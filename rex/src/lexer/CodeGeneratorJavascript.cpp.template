~                                                           #include "../common/Memory.hpp"

                                                            #include "CodeGenerator.hpp"

                                                            void CodeGeneratorJavascript::generateInstanceCode()
                                                            {
                                                              isJavascript = true;
                                                              if (! variable("append").boolean() && ! variable("embedded").boolean())
                                                              {
                                                                if (*variable("package").string())
                                                                {
~package ~                                                        print(variable("package").string());
         ~;

~                                                               }
~function ~                                                     print(variable("classname").string());
          ~()
{
~                                                             }
                                                              if (variable("tree").boolean())
                                                              {
                                                              }
                                                              if (variable("trace").boolean())
                                                              {
                                                              }
                                                              if (! variable("embedded").boolean())
                                                              {
~
  this.init = function(string)
  {
    input = string;
    size = string.length;
    end = 0;
  }

  match = function(tokenSetId, string)
  {
    init(string);
    return match(tokenSetId);
  }
~
                                                              }
                                                              if (variable("useGlr").boolean())
                                                              {
                                                                ++indent;
                                                              }
                                                              else
                                                              {
~
  var input;~                                                  if (! variable("nolexer").boolean())
                                                                {
~
  var size;~                                                    }
~
~                                                             }
~
  var begin;
  var end;~                                                   if (variable("nolexer").boolean())
                                                              {
~
  var lexer;
  var token = {};~                                            }
                                                              if (! variable("embedded").boolean())
                                                              {
~
  var state;~                                                 }
~
~                                                             if (variable("tables").boolean())
                                                              {
~
  function predict(dpi)~                                        predict();
                                                              }
~
  function match(tokenSetId)
  {~                                                          if (variable("nolexer").boolean())
                                                              {
~
    token.begin = end;
    lexer.match(tokenSetId, token);
    begin = token.begin;
    end = token.end;
    return token.code >= 0
         ? token.code
         : error(begin, end, - tokenSetId, -1, -1);~          }
                                                              else
                                                              {
                                                                if (variable("trace").boolean())
                                                                {
~
    writeTrace("  <tokenize ~                                   if (variable("useGlr").boolean())
                                                                {
                            ~thread=\"" + id + "\" ~            }
                            ~tokenset=\"" + tokenSetId + "\">\n");
~
                                                                }
                                                                int lookahead = variable("maxcontextlength").integer();
                                                                bool hasFixedTokenLength = variable("hasfixedtokenlength").boolean();
                                                                if (lookahead)
                                                                {
~
    var nonbmp = false;~                                        }
~
    begin = end;
    var current = end;
    var result = ~                                              print(variable("classname").string());
                 ~.INITIAL[tokenSetId];~                        if (variable("embedded").boolean())
                                                                {
~
    var state = 0;~                                             }
~
~                                                               if (variable("trace").boolean())
                                                                {
~
    writeTrace("    <next state=\"" + (result & ~                 print(Math::powerof(2, variable("stateCodeBits").integer()) - 1);
                                                ~) + "\"");~
                                                              }
~
    for (var code = result & ~                                  print(Math::powerof(2, variable("stateCodeBits").integer()) - 1);
                             ~; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;~
                                                                if (variable("trace").boolean())
                                                                {
~
      writeTrace(" offset=\"" + current + "\"");~               }
~
      ++current;
      if (c0 < ~                                                print(format.toString<char>(variable("simplifiedCodeMap").integer(), 16, 0, 0, "0x", "0123456789abcdef"));
               ~)
      {~
                                                                if (variable("trace").boolean())
                                                                {
~
        if (c0 >= 32 && c0 <= 126)
          writeTrace(" char=\"" + ~                               print(variable("classname").string());
                                  ~.xmlEscape(input.charAt(current - 1)) + "\"");~
                                                                }
~
        charclass = ~                                           print(variable("classname").string());
                    ~.MAP0[c0];
      }
      else if (c0 < ~                                           print(format.toString<char>(variable("uncompressedMapSize").integer(), 16, 0, 0, "0x", "0123456789abcdef"));
                    ~)
      {
~                                                               compressedMapAccessor(8, "c", "charclass = ", "MAP1", &variable("m1bits").integer());
~
      }
      else
      {~                                                        if (variable("m2").size == 0)
                                                                {
       ~
        charclass = 0;~                                         }
                                                                else
                                                                {
       ~
        if (~                                                     if (variable("uncompressedMapSize").integer() != 0xd800)
                                                                  {
            ~c0 >= 0xd800 && ~                                    }
                             ~c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;~  if (lookahead)
                                                                  {
~
            nonbmp = true;~                                       }
~
          }
        }

        var lo = 0, hi = ~                                        print(variable("m2").size / 3 - 1);
                         ~;
        for (var m = ~                                            print((variable("m2").size / 3) >> 1);
                     ~; ; m = (hi + lo) >> 1)
        {
          if (~                                                   print(variable("classname").string());
              ~.MAP2[m] > c0) hi = m - 1;
          else if (~                                              print(variable("classname").string());
                   ~.MAP2[~                                       print(variable("m2").size / 3);
                          ~ + m] < c0) lo = m + 1;
          else {charclass = ~                                     print(variable("classname").string());
                            ~.MAP2[~                              print(variable("m2").size / 3 * 2);
                                 ~ + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }~                                                      }
~
      }~                                                        if (variable("trace").boolean())
                                                                {
~
      writeTrace(" codepoint=\"" + c0 + "\" class=\"" + charclass + "\"");~
                                                                }
~

      state = code;
~                                                               compressedMap2dAccessor("code - 1", "charclass", variable("a1cols").integer(),
                                                                                           6, "i", "code = ", "TRANSITION", &variable("a1bits").integer());
~

      if (code > ~                                              print(Math::powerof(2, variable("stateCodeBits").integer()) - 1);
                 ~)
      {
        result = code;~                                         if (variable("trace").boolean())
                                                                {
~
        writeTrace(" result=\"" + ~                               print(variable("classname").string());
                                  ~.xmlEscape(~                   print(variable("classname").string());
                                  ~.TOKEN[((result >> ~           print(variable("stateCodeBits").integer());
                                                      ~) & ~      print(Math::powerof(2, variable("tokencodeBits").integer()) - 1);
                                                           ~) - 1]) + "\"");~
                                                                  if (lookahead || hasFixedTokenLength)
                                                                  {
                                                                    int contextOffset = variable("stateCodeBits").integer()
                                                                                      + variable("tokencodeBits").integer();
                                                                    int sizeOffset = contextOffset
                                                                                   + (hasFixedTokenLength ? 1 : 0);
                                                                    if (hasFixedTokenLength)
                                                                    {
~
        if ((result & ~                                               print(Math::powerof(2, contextOffset));
                      ~) > 0)
        {
          writeTrace(" token-size=\"" + (result >> ~                  print(sizeOffset);
                                                   ~) + "\"");
        }
        else ~                                                      }
                                                                    else
                                                                    {
~
        ~                                                           }
        ~if ((result >> ~                                           print(sizeOffset);
                        ~) > 0)
        {
          writeTrace(" trailing-context-size=\"" + (result >> ~     print(sizeOffset);
                                                              ~) + "\"");
        }~                                                        }
                                                                }
~
        code &= ~                                               print(Math::powerof(2, variable("stateCodeBits").integer()) - 1);
                ~;
        end = current;
      }~                                                        if (variable("trace").boolean())
                                                                {
~
      writeTrace("/>\n");
      if (code != 0)
      {
        writeTrace("    <next state=\"" + code + "\"");
      }~                                                        }
~
    }

    result >>= ~                                                print(variable("stateCodeBits").integer());
               ~;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;~                  if (variable("trace").boolean())
                                                                {
~
      writeTrace("    <fail begin=\"" + begin + "\" end=\"" + end + "\" state=\"" + state + "\"/>\n");
      writeTrace("  </tokenize>\n");~                           }
                                                                if (! variable("embedded").boolean())
                                                                {
~
      return -1;~                                               }
                                                                else
                                                                {
                                                                  if (variable("useGlr").boolean())
                                                                  {
~
      end = begin;
      return -1;~                                                 }
                                                                  else
                                                                  {
~
      return error(begin, end, state, -1, -1);~                   }
                                                                }
~
    }
~                                                               int lowBits = variable("tokencodeBits").integer();
                                                                if (hasFixedTokenLength && ! lookahead)
                                                                {
~
    if ((result & ~                                               print(Math::powerof(2, lowBits));
                                                                  ++lowBits;
                  ~) != 0)
    {
      end = begin;
    }
~                                                               }
                                                                else
                                                                {
                                                                  if (hasFixedTokenLength)
                                                                  {
~
    if ((result & ~                                                 print(Math::powerof(2, lowBits));
                                                                    ++lowBits;
                  ~) != 0)
    {
      end = begin;
      if (nonbmp)
      {
        for (var i = result >> ~                                    print(lowBits);
                               ~; i > 0; --i)
        {
          var c1 = end < size ? input.charCodeAt(end++) : 0;
          if (c1 >= 0xd800 && c1 < 0xdc00) ++end;
        }
      }
      else
      {
        end += (result >> ~                                         print(lowBits);
                          ~);
      }
    }
    else
    {~                                                              ++indent;
                                                                  }
                                                                  if (lookahead)
                                                                  {
~
    if (nonbmp)
    {
      for (var i = result >> ~                                      print(lowBits);
                             ~; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> ~                                            print(lowBits);
                       ~;
    }
~                                                                 }
                                                                  if (hasFixedTokenLength)
                                                                  {
                                                                    --indent;
~  }
~                                                                 }
                                                                }
~
    if (end > size) end = size;~                                if (variable("trace").boolean())
                                                                {
~

    writeTrace("    <done result=\"" + ~                          print(variable("classname").string());
                                       ~.xmlEscape(~              print(variable("classname").string());
                                       ~.TOKEN[(result & ~        print(Math::powerof(2, variable("tokencodeBits").integer()) - 1);
                                       ~) - 1]) + "\" begin=\"" + begin + "\" end=\"" + end + "\"/>\n");
    writeTrace("  </tokenize>\n");~                             }
~
    return (result & ~                                          print(Math::powerof(2, variable("tokencodeBits").integer()) - 1);
                     ~) - 1;~                                 }
~
  }
~                                                             if (variable("useGlr").boolean())
                                                              {
~
}
~                                                               --indent;
                                                              }
                                                              if (! variable("embedded").boolean())
                                                              {
~
  function getExpectedTokenSet()
  {
    return getTokenSet(- state);
  }
~                                                             }
                                                              if (variable("trace").boolean())
                                                              {
~
  var writeTrace = typeof process  != "undefined" ? function(string) {process.stderr.write(string);}
                 : typeof WScript  != "undefined" ? WScript.StdErr.write
                 : typeof err      != "undefined" ? function(string) {err.print(string);}
                 :                                  function(string) {java.lang.System.err.write(java.lang.String(string).getBytes("utf-8"));};
  this.writeTrace = writeTrace;
~                                                               if (variable("embedded").boolean())
                                                                {
~
  var flushTrace = typeof err != "undefined" ? function() {err.flush();} : function() {}
  this.flushTrace = flushTrace;
~                                                               }
                                                              }
                                                            }

                                                            void CodeGeneratorJavascript::generateStaticCode()
                                                            {
                                                              if (defined("gtbits"))
                                                              {
~
~                                                               print(variable("classname").string());
~.goTo = function(nonterminal, state)
{
~                                                               compressedMap2dAccessor("nonterminal", "state", variable("gtcols").integer(),
                                                                                        2, "i", "return ", "GOTO", &variable("gtbits").integer());
~
};
~                                                             }
                                                              if (variable("trace").boolean())
                                                              {
~
~                                                               print(variable("classname").string());
~.xmlEscape = function(s)
{
  var result = "";
  for (var i = 0; i < s.length; ++i)
  {
    var c = s.charAt(i);
    switch (c)
    {
    case '<': result += "&lt;"; break;
    case '"': result += "&quot;"; break;
    case '&': result += "&amp;"; break;

    default : result += c;
    }
  }
  return result;
};
~                                                             }
                                                              if (variable("nolexer").boolean())
                                                              {
~

~                                                               print(variable("classname").string());
~.getTokenSetCount = function() {return ~                       print(variable("entrycount").integer());
                                        ~;};
~                                                               print(variable("classname").string());
~.getTokenName = function(code) {return code >= 0 && code < ~   print(variable("classname").string());
                                                            ~.TOKEN.length ? ~
                                                                print(variable("classname").string());
                                                                             ~.TOKEN[code] : null;};
~
                                                              }
~
~                                                             print(variable("classname").string());
~.getTokenSet = function(tokenSetId)
{
  var set = [];~                                              if (! variable("nolexer").boolean())
                                                              {
~
  var s = tokenSetId < 0 ? - tokenSetId : ~                     print(variable("classname").string());
                                          ~.INITIAL[tokenSetId] & ~
                                                                print(Math::powerof(2, variable("stateCodeBits").integer()) - 1);
                                                                ~;~
                                                              }
~
  for (var i = 0; i < ~                                       print(variable("t1").size);
                      ~; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * ~                                     print(variable("transitionStateCount").integer());
                        ~ + ~                                 if (variable("nolexer").boolean())
                                                              {
                        ~tokenSetId~                          }
                                                              else
                                                              {
                        ~s - 1~                               }
                        ~;
~                                                             compressedMapAccessor(4, "i", "var f = ", "EXPECTED", &variable("t0bits").integer());
~
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(~                                            print(variable("classname").string());
                 ~.TOKEN[j]);
      }
    }
  }
  return set;
};
~                                                             if (variable("tree").boolean())
                                                              {
                                                                if (variable("lrparser").boolean())
                                                                {
~
~                                                                 print(variable("classname").string());
~.ParseTreeBuilder = function()
{
  var input;
  var stack;
  var top;
~                                                                 if (variable("useGlr").boolean())
                                                                  {
~
  this.getStack = function() {return stack;}
  this.getTop = function() {return top;}
~                                                                 }
~
  this.reset = function(string)
  {
    input = string;
    stack = [];
    top = -1;
  };

  this.nonterminal = function(name, begin, end, count)
  {~                                                              if (variable("useGlr").boolean())
                                                                  {
~
    if (count > top + 1)
    {
      var content = this.pop(top + 1);
      this.nonterminal("UNAMBIGUOUS", begin, content.length == 0 ? end : content[0].begin, 0);
      for (var i = 0; i < content.length; ++i)
      {
        this.push(content[i]);
      }
      count = top + 1;
    }~                                                            }
~
    this.push(new ~                                               print(variable("classname").string());
                  ~.Nonterminal(name, begin, end, this.pop(count)));
  };

  this.terminal = function(name, begin, end)
  {
    this.push(new ~                                               print(variable("classname").string());
                  ~.Terminal(name, begin, end));
  };

  this.serialize = function(e)
  {
    e.reset(input);
    for (var i = 0; i <= top; ++i)
    {
      stack[i].send(e);
    }
  };

  this.push = function(s)
  {
    stack[++top] = s;
  };

  this.pop = function(count)
  {
    top -= count;
    return stack.slice(top + 1, top + 1 + count);
  };
};
~                                                               }
                                                                else
                                                                {
~
~                                                                 print(variable("classname").string());
~.TopDownTreeBuilder = function()
{
  var input = null;
  var stack = null;

  this.reset = function(i)
  {
    input = i;
    stack = [];
  };

  this.startNonterminal = function(name, begin)
  {
    var nonterminal = new ~                                       print(variable("classname").string());
                          ~.Nonterminal(name, begin, begin, []);
    if (stack.length > 0) addChild(nonterminal);
    stack.push(nonterminal);
  };

  this.endNonterminal = function(name, end)
  {
    stack[stack.length - 1].end = end;
    if (stack.length > 1) stack.pop();
  };

  this.terminal = function(name, begin, end)
  {
    addChild(new ~                                                print(variable("classname").string());
                 ~.Terminal(name, begin, end));
  };

  this.whitespace = function(begin, end)
  {
  };

  function addChild(s)
  {
    var current = stack[stack.length - 1];
    current.children.push(s);
  }

  this.serialize = function(e)
  {
    e.reset(input);
    stack[0].send(e);
  };
};
~                                                               }
~
~                                                               print(variable("classname").string());
~.Terminal = function(name, begin, end)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.terminal(name, begin, end);
  };
};

~                                                              print(variable("classname").string());
~.Nonterminal = function(name, begin, end, children)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.startNonterminal(name, begin);
    var pos = begin;
    children.forEach
    (
      function(c)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
    );
    if (pos < end) e.whitespace(pos, end);
    e.endNonterminal(name, end);
  };
};
~                                                             }
                                                              for (VarsInInsertionOrder::iterator a(varsInInsertionOrder.begin());
                                                                   a != varsInInsertionOrder.end(); ++a)
                                                                if (a->isArray() && a->size > 0 && a->hasType(CGVariable::INTEGER) && strlen(a->name) == 2)
                                                              {
~
~                                                               print(variable("classname").string());
~.~                                                             print(a->getLongName());
  ~ =
[~                                                              int w = (int) Format::width(a->size);
                                                                for (size_t j = 0; j < a->size; ++j)
                                                                {
                                                                  if (j == 0 || lineLength() + Format::width(a->integer(j)) + 2 > 119)
                                                                  {
                                                                    if (j) print(",");
~
  /* ~                                                              print(format.toString<char>(j, 10, w));
     ~ */ ~                                                     }
                                                                  else
                                                                  {
   ~, ~                                                           }
                                                                  if (a->integer(j) != (int) 0x80000000)
                                                                  {
                                                                    print(a->integer(j));
                                                                  }
                                                                  else
                                                                  {
                                                                    print(format.toString<char>(a->integer(j), 16, 0, 0, "0x", "0123456789abcdef"));
                                                                  }
                                                                }
~
];
~                                                             }
                                                              for (VarsInInsertionOrder::iterator a(varsInInsertionOrder.begin());
                                                                   a != varsInInsertionOrder.end(); ++a)
                                                                if (a->isArray() && a->size > 0 && a->hasType(CGVariable::STRING) && strlen(a->name) == 2)
                                                              {
~
~                                                               print(variable("classname").string());
~.~                                                             print(a->getLongName());
  ~ =
[
~                                                               for (size_t j = 0; j < a->size; ++j)
                                                                {
                                                                  if (j)
                                                                  {
      ~,
~                                                                 }
~  ~                                                              print(variable("stringPrefix").string());
   ~"~                                                            const char *s = a->string(j);
                                                                  const char *c = s;
                                                                  for (; *c; ++c)
                                                                  {
                                                                    if (*c == '"' || *c == '\\')
                                                                    {
                                                                      print(s, c - s);
                                                                      print("\\");
                                                                      s = c;
                                                                    }
                                                                  }
                                                                  print(s, c - s);
    ~"~                                                           print(variable("stringSuffix").string());
                                                                }
~
];
~                                                             }
                                                              if (! variable("embedded").boolean())
                                                              {
~
var ~                                                           print(variable("classname").string());
    ~.Token =
{
  ~                                                             const CGVariable &token = variable("token");
                                                                int w = (int) Format::width(token.size);
                                                                for (size_t i = 0; i < token.size; ++i)
                                                                {
                                                                  if (i)
                                                                  {
  ~,
  ~                                                               }
                                                                  print(token.string(i));
    ~:~                                                           print(format.toString<char>(i, 10, w));
                                                                }
    ~
};
~                                                             }
                                                            }

                                                            void CodeGeneratorJavascript::generateData()
                                                            {
                                                            }
