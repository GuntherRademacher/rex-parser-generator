~                                                           #include "../common/Memory.hpp"
                                                            #include "../common/Format.hpp"

                                                            #include "CodeGenerator.hpp"

                                                            void CodeGeneratorCpp::generateInstanceCode()
                                                            {
                                                              if (! variable("append").boolean() && ! variable("embedded").boolean())
                                                              {
                                                                if (*variable("package").string())
                                                                {
~package ~                                                        print(variable("package").string());
         ~;

~                                                               }
~class ~                                                        print(Format::acceptableName<CString>(variable("classname").string()).c_str());
              ~
{~                                                            }
                                                              if (! variable("useGlr").boolean())
                                                              {
~
  const ~                                                       print(variable("stringType").string());
        ~input;~                                              }
~
  int begin;
  int end;~                                                   if (! variable("embedded").boolean())
                                                              {
~
  int state;~                                                 }
~
~                                                             if (! variable("embedded").boolean())
                                                              {
~
  void init(String string)
  {
    input = string;
    end = 0;
    current = 0;
    charclass = -1;
  }

  int getOffset() {return begin;}
  int getSize()   {return end - begin;}
  int getState()  {return state;}

  int match(int tokenSetId, String string)
  {
    init(string);
    return match(tokenSetId);
  }
~                                                             }
                                                              else if (variable("tables").boolean())
                                                              {
~
  int predict(int dpi)~                                         predict();
                                                              }
~
  int match(int tokenSetId)
  {~                                                          if (variable("trace").boolean())
                                                              {
~
    fprintf(stderr, "  <tokenize ~                              if (variable("useGlr").boolean())
                                                                {
                                 ~thread=\"%d\" ~               }
                                 ~tokenset=\"%d\">\n", ~        if (variable("useGlr").boolean())
                                                                {
                                                       ~id, ~   }
                                                       ~tokenSetId);
~                                                             }
                                                              int lookahead = variable("maxcontextlength").integer();
                                                              bool hasFixedTokenLength = variable("hasfixedtokenlength").boolean();
                                                              bool utf8 = 0 == strcmp("char *", variable("stringType").string());
                                                              const wchar_t *multiItem = utf8 ? L"nonascii" : L"nonbmp";
                                                              if (lookahead)
                                                              {
~
    bool ~                                                      append(multiItem);
         ~ = false;~                                          }
~
    begin = end;
    int current = end;
    int result = INITIAL[tokenSetId];~                        if (variable("embedded").boolean() && (variable("trace").boolean() || ! variable("useGlr").boolean()))
                                                              {
~
    int state = 0;~                                           }
~
~                                                             if (variable("trace").boolean())
                                                              {
~
    fprintf(stderr, "    <next state=\"%d\"", result & ~        print(Math::powerof(2, variable("stateCodeBits").integer()) - 1);
                                                       ~);~   }
~
    for (int code = result & ~                                print(Math::powerof(2, variable("stateCodeBits").integer()) - 1);
                             ~; code != 0; )
    {
      int charclass;
      int c0 = ~                                              if (utf8)
                                                              {
               ~(unsigned char) ~                             }
                                                              if (variable("useGlr").boolean())
                                                              {
               ~parser->~                                     }
               ~input[current];~
                                                              if (variable("trace").boolean())
                                                              {
~
      fprintf(stderr, " offset=\"%d\"", current);~            }
~
      ++current;
      if (c0 < ~                                              print(format.toString<char>(variable("simplifiedCodeMap").integer(), 16, 0, 0, "0x", "0123456789abcdef"));
               ~)
      {~                                                      if (variable("trace").boolean())
                                                              {
~
        if (c0 >= 32 && c0 <= 126)
        {
          ~                                                     print(utf8 ? "char" : "wchar_t");
          ~ c = (~                                              print(utf8 ? "char" : "wchar_t");
                 ~) c0;
          fprintf(stderr, " char=\"%s\"", ~                     if (! utf8)
                                                                {
                                          ~Utf8Encoder::encode(~
                                                                }
                                          ~xmlEscape(&c, 1).c_str()~
                                                                if (! utf8)
                                                                {
                                          ~).c_str()~           }
                                          ~);
        }~                                                    }
~
        charclass = MAP0[c0];
      }
      else~                                                   if (! utf8)
                                                              {
~ ~                                                           }
                                                              else
                                                              {
~
      {~                                                        if (lookahead)
                                                                {
~
        ~                                                         append(multiItem);
        ~ = true;~                                              }
~
        if      ((c0~
                                                                if (variable("useGlr").boolean())
                                                                {
                    ~        ~                                  }
                    ~                 & 0xe0) == 0xc0
              && (~
                                                                if (variable("useGlr").boolean())
                                                                {
                  ~parser->~                                    }
                  ~input[current    ] & 0xc0) == 0x80)
        {
          c0 = ((c0~
                                                                if (variable("useGlr").boolean())
                                                                {
                   ~        ~                                   }
                   ~                 & 0x1f) << 6)
             |  (~
                                                                if (variable("useGlr").boolean())
                                                                {
                 ~parser->~                                     }
                 ~input[current    ] & 0x3f);
          if (c0 < 0x80) c0 = -1; else ++current;
        }
        else if ((c0~
                                                                if (variable("useGlr").boolean())
                                                                {
                    ~        ~                                  }
                    ~                 & 0xf0) == 0xe0
              && (~
                                                                if (variable("useGlr").boolean())
                                                                {
                  ~parser->~                                    }
                  ~input[current    ] & 0xc0) == 0x80
              && (~
                                                                if (variable("useGlr").boolean())
                                                                {
                  ~parser->~                                    }
                  ~input[current + 1] & 0xc0) == 0x80)
        {
          c0 = ((c0~
                                                                if (variable("useGlr").boolean())
                                                                {
                   ~        ~                                   }
                   ~                 & 0x0f) << 12)
             | ((~
                                                                if (variable("useGlr").boolean())
                                                                {
                 ~parser->~                                     }
                 ~input[current    ] & 0x3f) <<  6)
             |  (~
                                                                if (variable("useGlr").boolean())
                                                                {
                 ~parser->~                                     }
                 ~input[current + 1] & 0x3f);
          if (c0 < 0x800) c0 = -1; else current += 2;
        }
        else if ((c0~
                                                                if (variable("useGlr").boolean())
                                                                {
                    ~        ~                                  }
                    ~                 & 0xf8) == 0xf0
              && (~
                                                                if (variable("useGlr").boolean())
                                                                {
                  ~parser->~                                    }
                  ~input[current    ] & 0xc0) == 0x80
              && (~
                                                                if (variable("useGlr").boolean())
                                                                {
                  ~parser->~                                    }
                  ~input[current + 1] & 0xc0) == 0x80
              && (~
                                                                if (variable("useGlr").boolean())
                                                                {
                  ~parser->~                                    }
                  ~input[current + 2] & 0xc0) == 0x80)
        {
          c0 = ((c0~
                                                                if (variable("useGlr").boolean())
                                                                {
                   ~        ~                                   }
                   ~                 & 0x07) << 18)
             | ((~
                                                                if (variable("useGlr").boolean())
                                                                {
                 ~parser->~                                     }
                 ~input[current    ] & 0x3f) << 12)
             | ((~
                                                                if (variable("useGlr").boolean())
                                                                {
                 ~parser->~                                     }
                 ~input[current + 1] & 0x3f) <<  6)
             | ( ~
                                                                if (variable("useGlr").boolean())
                                                                {
                 ~parser->~                                     }
                 ~input[current + 2] & 0x3f       );
          if (c0 < 0x10000 || c0 > 0x10ffff) c0 = -1; else current += 3;
        }

        ~                                                       indent++;
                                                              }
~if (c0 < ~                                                   print(format.toString<char>(variable("uncompressedMapSize").integer(), 16, 0, 0, "0x", "0123456789abcdef"));
          ~)
      {
~                                                             compressedMapAccessor(8, "c", "charclass = ", "MAP1", &variable("m1bits").integer());
~
      }
      else
      {~                                                      if (variable("m2").size == 0)
                                                              {
       ~
        charclass = 0;~                                       }
                                                              else
                                                              {
                                                                if (! utf8)
                                                                {
       ~
        if (~                                                     if (variable("uncompressedMapSize").integer() != 0xd800)
                                                                  {
            ~c0 >= 0xd800 && ~                                    }
                             ~c0 < 0xdc00)
        {
          int c1 = ~
                                                                  if (variable("useGlr").boolean())
                                                                  {
                   ~parser->~                                     }
                   ~input[current];
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {~                                                      if (lookahead)
                                                                  {
~
            ~                                                       append(multiItem);
            ~ = true;~                                            }
~
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
          }
        }~                                                      }
~
        int lo = 0, hi = ~                                      print(variable("m2").size / 3 - 1);
                         ~;
        for (int m = ~                                          print((variable("m2").size / 3) >> 1);
                     ~; ; m = (hi + lo) >> 1)
        {
          if (MAP2[m] > c0) hi = m - 1;
          else if (MAP2[~                                       print(variable("m2").size / 3);
                        ~ + m] < c0) lo = m + 1;
          else {charclass = MAP2[~                              print(variable("m2").size / 3 * 2);
                                 ~ + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }~                                                    }
                                                              if (utf8)
                                                              {
                                                                indent--;
~
        }~                                                    }
       ~
      }~                                                      if (variable("trace").boolean())
                                                              {
~
      fprintf(stderr, " codepoint=\"%d\" class=\"%d\"", c0, charclass);~
                                                              }
~
~                                                             if (variable("trace").boolean() || ! variable("useGlr").boolean())
                                                              {
~
      state = code;~                                          }
~
~                                                             compressedMap2dAccessor("code - 1", "charclass", variable("a1cols").integer(),
                                                                                         6, "i", "code = ", "TRANSITION", &variable("a1bits").integer());
~
      if (code > ~                                            print(Math::powerof(2, variable("stateCodeBits").integer()) - 1);
                 ~)
      {
        result = code;~                                       if (variable("trace").boolean())
                                                              {
~
        fprintf(stderr, " result=\"%s\"", ~
                                                                if (! utf8)
                                                                {
                                          ~Utf8Encoder::encode(~
                                                                }
                                          ~xmlEscape(TOKEN[((result >> ~
                                                                print(variable("stateCodeBits").integer());
                                          ~) & ~ print(Math::powerof(2, variable("tokencodeBits").integer()) - 1);
                                          ~) - 1], 0).c_str()~  if (! utf8)
                                                                {
                                          ~).c_str()~           }
                                          ~);~                  if (lookahead || hasFixedTokenLength)
                                                                {
                                                                  int contextOffset = variable("stateCodeBits").integer()
                                                                                    + variable("tokencodeBits").integer();
                                                                  int sizeOffset = contextOffset
                                                                                 + (hasFixedTokenLength ? 1 : 0);
                                                                  if (hasFixedTokenLength)
                                                                  {
~
        if ((result & ~                                             print(Math::powerof(2, contextOffset));
                      ~) > 0)
        {
          fprintf(stderr, " token-size=\"%d\"", result >> ~         print(sizeOffset);
                                                          ~);
        }
        else ~                                                    }
                                                                  else
                                                                  {
~
        ~                                                         }
        ~if ((result >> ~                                         print(sizeOffset);
                        ~) > 0)
        {
          fprintf(stderr, " trailing-context-size=\"%d\"", result >> ~
                                                                  print(sizeOffset);
                                                                     ~);
        }~                                                      }
                                                              }
~
        code &= ~                                             print(Math::powerof(2, variable("stateCodeBits").integer()) - 1);
                ~;
        end = current;
      }~                                                      if (variable("trace").boolean())
                                                              {
~
      fprintf(stderr, "/>\n");
      if (code != 0)
      {
        fprintf(stderr, "    <next state=\"%d\"", code);
      }~                                                      }
~
    }

    result >>= ~                                              print(variable("stateCodeBits").integer());
               ~;
    if (result == 0)
    {~                                                        if (utf8)
                                                              {
~
      for (end = current - 1; (~
                                                                if (variable("useGlr").boolean())
                                                                {
                               ~parser->~                       }
                               ~input[end] & 0xc0) == 0x80; --end) ;~
                                                              }
                                                              else
                                                              {
~
      end = current - 1;
      int c1 = ~
                                                                if (variable("useGlr").boolean())
                                                                {
               ~parser->~                                       }
               ~input[end];
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;~                }
                                                              if (variable("trace").boolean())
                                                              {
~
      fprintf(stderr, "    <fail begin=\"%d\" end=\"%d\" state=\"%d\"/>\n", begin, end, state);
      fprintf(stderr, "  </tokenize>\n");~                    }
                                                              if (! variable("embedded").boolean())
                                                              {
~
      return -1;~                                             }
                                                              else if (variable("useGlr").boolean())
                                                              {
~
      end = begin;
      return -1;~                                             }
                                                              else
                                                              {
~
      return error(begin, end, state, -1, -1);~               }
~
    }
~                                                             int lowBits = variable("tokencodeBits").integer();
                                                              if (hasFixedTokenLength && ! lookahead)
                                                              {
~
    if ((result & ~                                               print(Math::powerof(2, lowBits));
                                                                  ++lowBits;
                  ~) != 0)
    {
      end = begin;
    }
~                                                             }
                                                              else
                                                              {
                                                                if (hasFixedTokenLength)
                                                                {
~
    if ((result & ~                                               print(Math::powerof(2, lowBits));
                                                                  ++lowBits;
                  ~) != 0)
    {
      end = begin;
      if (~                                                       append(multiItem);
          ~)
      {
        for (int i = result >> ~                                  print(lowBits);
                               ~; i > 0; --i)~                    if (utf8)
                                                                  {
~
          for (++end; (~
                                                                    if (variable("useGlr").boolean())
                                                                    {
                       ~parser->~                                   }
                       ~input[end] & 0xc0) == 0x80 && end <= current; ++end) ;~
                                                                  }
                                                                  else
                                                                  {
~
        {
          int c1 = ~
                                                                    if (variable("useGlr").boolean())
                                                                    {
                   ~parser->~                                       }
                   ~input[end++];
          if (c1 >= 0xd800 && c1 < 0xdc00) ++end;
        }~                                                        }
~
      }
      else
      {
        end += (result >> ~                                       print(lowBits);
                          ~);
      }
    }
    else
    {~                                                            ++indent;
                                                                }
                                                                if (lookahead)
                                                                {
~
    if (~                                                         append(multiItem);
        ~)
    {
      for (int i = result >> ~                                    print(lowBits);
                             ~; i > 0; --i)~                      if (utf8)
                                                                  {
~
        for (--end; (~
                                                                    if (variable("useGlr").boolean())
                                                                    {
                     ~parser->~                                     }
                     ~input[end] & 0xc0) == 0x80; --end) ;~       }
                                                                  else
                                                                  {
~
      {
        int c1 = ~
                                                                    if (variable("useGlr").boolean())
                                                                    {
                 ~parser->~                                         }
                 ~input[--end];
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }~                                                          }
~
    }
    else
    {
      end -= result >> ~                                          print(lowBits);
                       ~;
    }
~                                                               }
                                                                if (hasFixedTokenLength)
                                                                {
                                                                  --indent;
~  }
~                                                               }
                                                              }
~
    if (~
                                                              if (variable("useGlr").boolean())
                                                              {
        ~parser->~                                            }
        ~input[begin] == 0) end = begin;~                     if (variable("trace").boolean())
                                                              {
~
    fprintf(stderr, "    <done result=\"%s\" begin=\"%d\" end=\"%d\"/>\n", ~
                                                                if (! utf8)
                                                                {
                                ~Utf8Encoder::encode(~          }
                                ~xmlEscape(TOKEN[(result & ~    print(Math::powerof(2, variable("tokencodeBits").integer()) - 1);
                                ~) - 1], 0).c_str()~            if (! utf8)
                                                                {
                                ~).c_str()~                     }
                                ~, begin, end);
    fprintf(stderr, "  </tokenize>\n");~                      }
~
    return (result & ~                                        print(Math::powerof(2, variable("tokencodeBits").integer()) - 1);
                     ~) - 1;
  }
~
                                                              if (! variable("embedded").boolean())
                                                              {
~
  String[] getExpectedTokenSet()
  {
    return getTokenSet(- state);
  }
~                                                             }
                                                            }

                                                            void CodeGeneratorCpp::generateStaticCode()
                                                            {
                                                              bool utf8 = 0 == strcmp("char *", variable("stringType").string());
                                                              if (defined("gtbits"))
                                                              {
~
  static int goTo(int nonterminal, int state)
  {
~                                                               compressedMap2dAccessor("nonterminal", "state", variable("gtcols").integer(),
                                                                                           4, "i", "return ", "GOTO", &variable("gtbits").integer());
~
  }
~                                                             }
                                                              if (variable("trace").boolean())
                                                              {
~
  static std::~                                                 print(utf8 ? "" : "w");
              ~string xmlEscape(const ~                         print(utf8 ? "char" : "wchar_t");
                                      ~ *string, size_t size)
  {
    std::~                                                      print(utf8 ? "" : "w");
         ~string result;
    if (size == 0) size = ~                                     print(utf8 ? L"str" : L"wcs");
                          ~len(string);
    for (size_t i = 0; i < size; ++i)
    {
      const ~                                                   print(utf8 ? "char" : "wchar_t");
            ~ c = string[i];
      switch (c)
      {
      case 0: break;
      case '&': result += ~                                     print(utf8 ? "" : "L");
                          ~"&amp;"; break;
      case '<': result += ~                                     print(utf8 ? "" : "L");
                          ~"&lt;"; break;
      case '"': result += ~                                     print(utf8 ? "" : "L");
                          ~"&quot;"; break;
      default: result += c;
      }
    }
    return result;
  }
~                                                             }
~
  static void getTokenSet(int tokenSetId, const ~             print(variable("stringType").string());
                                                ~*set, int size)
  {
    int s = tokenSetId < 0 ? - tokenSetId : INITIAL[tokenSetId] & ~
                                                              print(Math::powerof(2, variable("stateCodeBits").integer()) - 1);
                                                                  ~;
    for (int i = 0; i < ~                                     print(variable("t1").size);
                        ~; i += 32)
    {
      int j = i;
      for (unsigned int f = ec(i >> 5, s); f != 0; f >>= 1, ++j)
      {
        if ((f & 1) != 0)
        {
          if (size > 1)
          {
            set[0] = TOKEN[j];
            ++set;
            --size;
          }
        }
      }
    }
    if (size > 0)
    {
      set[0] = 0;
    }
  }

  static int ec(int t, int s)
  {
    int i0 = t * ~                                            print(variable("transitionStateCount").integer());
                 ~ + s - 1;
~                                                             compressedMapAccessor(4, "i", "return ", "EXPECTED", &variable("t0bits").integer());
~
  }
~                                                             for (VarsInInsertionOrder::iterator a(varsInInsertionOrder.begin());
                                                                   a != varsInInsertionOrder.end(); ++a)
                                                                if (a->isArray() && a->size > 0 && a->hasType(CGVariable::INTEGER) && strlen(a->name) == 2)
                                                              {
~
  static const int ~                                            print(a->longName);
                   ~[];~                                      }
                                                              for (VarsInInsertionOrder::iterator a(varsInInsertionOrder.begin());
                                                                   a != varsInInsertionOrder.end(); ++a)
                                                                if (a->isArray() && a->size > 0 && a->hasType(CGVariable::STRING) && strlen(a->name) == 2)
                                                              {
~
  static const ~                                                print(variable("stringType").string());
                                                                print(a->longName);
               ~[];~                                          }
                                                              if (! variable("embedded").boolean())
                                                              {
~

  enum Token
  {
    ~                                                           const CGVariable &token = variable("token");
                                                                int w = (int) Format::width(token.size);
                                                                for (size_t i = 0; i < token.size; ++i)
                                                                {
                                                                  if (i)
                                                                  {
    ~,
    ~                                                             }
    ~/* ~                                                         print(format.toString<char>(i, 10, w));
    ~ */ ~                                                        print(token.string(i));
                                                                }
    ~
  };~
                                                              }
~
};
~
                                                              generateData();
                                                              if (variable("selfTest").boolean())
                                                              {
~
  void selfTest(int set, int tokenId)
  {
    String tokenString = TOKEN[tokenId];
    if (tokenString.startsWith("'"))
    {
      System.out.print("testing(" + set + ", " + tokenId + ")...");
      tokenString = tokenString.substring(1, tokenString.length() - 1);
      if (tokenString.trim().equals(""))
      {
        System.out.println("  skipped");
      }
      else
      {
        int result = match(set, tokenString + " ");
        int resultSize = getSize();
        if (result != tokenId || resultSize != tokenString.length())
        {
          System.out.println();
          System.out.println("  tested: " + tokenString);
          System.out.println("  result: " + result);
          System.out.println("    size: " + resultSize);
          System.exit(1);
        }
        else
        {
          System.out.println("  OK");
        }
      }
    }
  }

  static void main(String[] args)
  {
    ~                                                         print(Format::acceptableName<CString>(variable("classname").string()).c_str());
    ~ testee();
    for (int e = 0; e < ~                                     print(variable("a0").size);
                        ~; ++e)
    {
      int s = INITIAL[e] & ~                                  print(Math::powerof(2, variable("stateCodeBits").integer()) - 1);
                           ~;
      for (int i = 0; i < ~                                   print(variable("t1").size);
                          ~; i += 32)
      {
        int j = i;
        for (int f = ec(i >> 5, s); f != 0; f >>>= 1, ++j)
        {
          if ((f & 1) != 0)
          {
            testee.selfTest(e, t);
          }
        }
      }
    }
  }
~                                                             }
                                                            }

                                                            void CodeGeneratorCpp::generateData()
                                                            {
                                                              for (VarsInInsertionOrder::iterator a(varsInInsertionOrder.begin());
                                                                   a != varsInInsertionOrder.end(); ++a)
                                                                if (a->isArray() && a->size > 0 && a->hasType(CGVariable::INTEGER) && strlen(a->name) == 2)
                                                              {
~
const int ~                                                     print(Format::acceptableName<CString>(variable("classname").string()).c_str());
          ~::~                                                  print(a->longName);
             ~[] =
{~                                                              int w = (int) Format::width(a->size);
                                                                for (size_t j = 0; j < a->size; ++j)
                                                                {
                                                                  if (j == 0 || lineLength() + Format::width(a->integer(j)) + 2 > 119)
                                                                  {
                                                                    if (j) print(",");
   ~
/* ~                                                                print(format.toString<char>(j, 10, w));
       ~ */ ~                                                     }
                                                                  else
                                                                  {
   ~, ~                                                           }
                                                                  if (a->integer(j) != (int) 0x80000000)
                                                                  {
                                                                    print(a->integer(j));
                                                                  }
                                                                  else
                                                                  {
   ~(int) ~                                                         print(format.toString<char>(a->integer(j), 16, 0, 0, "0x", "0123456789abcdef"));
                                                                  }
                                                                }
~
};
~                                                             }
                                                              for (VarsInInsertionOrder::iterator a(varsInInsertionOrder.begin());
                                                                   a != varsInInsertionOrder.end(); ++a)
                                                                if (a->isArray() && a->size > 0 && a->hasType(CGVariable::STRING) && strlen(a->name) == 2)
                                                              {
~
const ~                                                         print(variable("stringType").string());
                                                                print(Format::acceptableName<CString>(variable("classname").string()).c_str());
      ~::~                                                      print(a->longName);
          ~[] =
{
~                                                               for (size_t j = 0; j < a->size; ++j)
                                                                {
                                                                  if (j)
                                                                  {
    ~,
~                                                                 }
~  ~                                                              print(variable("stringPrefix").string());
   ~"~                                                            const char *s = a->string(j);
                                                                  const char *c = s;
                                                                  for (; *c; ++c)
                                                                  {
                                                                    if (*c == '"' || *c == '\\')
                                                                    {
                                                                      print(s, c - s);
                                                                      print("\\");
                                                                      s = c;
                                                                    }
                                                                  }
                                                                  print(s, c - s);
    ~"~                                                           print(variable("stringSuffix").string());
                                                                }
~
};
~                                                             }
                                                            }
