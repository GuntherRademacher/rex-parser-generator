~                                                           #include "../common/Memory.hpp"

                                                            #include "CodeGenerator.hpp"

                                                            void CodeGeneratorXSLT::compressedMap2dAccessor(const char *x,
                                                                                                            const char *y,
                                                                                                            int xCount,
                                                                                                            size_t indent, const char *index, const char *result, const char *map, const int *bits)
                                                            {
                                                              print(indent, " ");
~<xsl:variable name="~                                        print(index);
                     ~0" select="~                            print(format.toString<char>(xCount));
                                 ~ * ~                                              print(y);
                                     ~ + ~                                          print(x);
                                         ~"/>
~                                                             compressedMapAccessor(indent, index, result, map, bits);
~"/>~
                                                            }

                                                            void CodeGeneratorXSLT::compressedMapAccessor(size_t indent, const char *index, const char *result, const char *map, const int *bits)
                                                            {
                                                              size_t i = 0;
                                                              for (i = 0; bits[i]; ++i)
                                                              {
                                                                print(indent, " ");
~<xsl:variable name="~                                          print(index);
                                                                print(i + 1);
                     ~" select="$~                              print(index);
                                                                print(i);
                                 ~ idiv ~                       print(Math::powerof(2, bits[i]));
                                        ~"/>
~                                                             }
                                                              print(indent, " ");
                                                              print(result);
                                                              print(map);
~[$~                                                          for (i = 0; bits[i]; ++i)
                                                              {
                                                                print(index);
                                                                print(i);
   ~ mod ~                                                      print(Math::powerof(2, bits[i]));
         ~ + ~                                                  print(map);
             ~[$~                                             }
                                                              print(index);
                                                              print(i);
                                                              for (i = 0; bits[i]; ++i)
                                                              {
                ~ + 1]~                                       }
                      ~ + 1]~                               }

                                                            void CodeGeneratorXSLT::generateStaticCode()
                                                            {
                                                              indent += 1;
                                                              if (! variable("embedded").boolean())
                                                              {
~<!--~~
  ! The tokenizer that was generated for the ~                  print(variable("classname").string());
                                             ~ grammar.
 -->
<xsl:stylesheet version="2.0"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:p="~                                      print(variable("classname").string());
                         ~">~                                 }

                                                              for (VarsInInsertionOrder::iterator a(varsInInsertionOrder.begin());
                                                                   a != varsInInsertionOrder.end(); ++a)
                                                                if (a->isArray() && a->size > 0 && a->hasType(CGVariable::INTEGER) && strlen(a->name) == 2)
                                                              {
~

<!--~~
 ! ~                                                            print(a->getDescription());
   ~
-->
<xsl:variable name="p:~                                         print(a->getLongName());
                      ~" as="xs:integer+" select="
 ~                                                              for (size_t j = 0; j < a->size; ++j)
                                                                {
                                                                  if (j)
                                                                  {
 ~,~                                                              }
                                                                  if (lineLength() + Format::width(a->integer(j)) + 2 > 160)
                                                                  {
 ~
 ~                                                                }
 ~ ~                                                              print(a->integer(j));
                                                                }
 ~
"/>~                                                          }
                                                              for (VarsInInsertionOrder::iterator a(varsInInsertionOrder.begin());
                                                                   a != varsInInsertionOrder.end(); ++a)
                                                                if (a->isArray() && a->hasType(CGVariable::STRING) && strlen(a->name) == 2)
                                                              {
~

<!--~~
 ! ~                                                            print(a->getDescription());
   ~
-->
<xsl:variable name="p:~                                         print(a->getLongName());
                      ~" as="xs:string+" select="
  ~                                                             for (size_t j = 0; j < a->size; ++j)
                                                                {
                                                                  if (j)
                                                                  {
  ~,
  ~
                                                                  }
                                                                  const char *s = a->string(j);
                                                                  bool literal = *s == '\'';
                                                                  if (literal)
                                                                  {
  ~&quot;~                                                        }
                                                                  else
                                                                  {
  ~'~                                                             }
                                                                  const char *c = s;
                                                                  for (; *c; ++c)
                                                                  {
                                                                    if (*c == '"')
                                                                    {
                                                                      print(s, c - s);
                                                                      print("&quot;&quot;");
                                                                      s = c + 1;
                                                                    }
                                                                    else if (*c == '<')
                                                                    {
                                                                      print(s, c - s);
                                                                      print("&lt;");
                                                                      s = c + 1;
                                                                    }
                                                                    else if (*c == '>')
                                                                    {
                                                                      print(s, c - s);
                                                                      print("&gt;");
                                                                      s = c + 1;
                                                                    }
                                                                    else if (*c == '&')
                                                                    {
                                                                      print(s, c - s);
                                                                      print("&amp;");
                                                                      s = c + 1;
                                                                    }
                                                                  }
                                                                  if (c != s) print(s, c - s);
                                                                  if (literal)
                                                                  {
  ~&quot;~                                                        }
                                                                  else
                                                                  {
  ~'~                                                             }
                                                                }
  ~
"/>~                                                          }
~
~                                                             if (variable("trace").boolean())
                                                              {
~
<!--~~
 ! Pass a line to fn:trace, without generating a result. Actually,
 ! create an empty result, but make it somehow dependent on trace,
 ! so the optimizer does not eliminate the trace call.
 !
 ! @param $line the line to be traced.
 ! @return the empty sequence.
-->
<xsl:function name="p:trace" as="empty-sequence()">
  <xsl:param name="line" as="xs:string"/>

  <xsl:sequence select="if (trace($line, 'trace')) then () else ''[.]"/>
</xsl:function>

<!--~~
 ! Add escaping to a string for being placed in XML attribute or
 ! element content.
 !
 ! @param $s the string to be escaped.
 ! @return the escaped string.
-->
<xsl:function name="p:xml-escape" as="xs:string">
  <xsl:param name="s" as="xs:string"/>

  <xsl:sequence select="
    replace(
    replace(
    replace($s, '&amp;', '&amp;amp;'),
                '&lt;', '&amp;lt;'),
                '&quot;', '&amp;quot;')
  "/>
</xsl:function>
~                                                             }
                                                              if (   variable("embedded").boolean()
                                                                  && variable("tables").boolean())
                                                              {
~
<!--~~
 ! Predict the decision for a given decision point based on current
 ! lookahead.
 !
 ! @param $input the input string.
 ! @param $state the parser state.
 ! @param $dpi the decision point index.~                       if (variable("useGlr").boolean())
                                                                {
~
 : @param $id the parsing thread id.~                           }
~
 ! @return the updated parser state.
-->
<xsl:function name="p:predict" as="item()+">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>
  <xsl:param name="dpi" as="xs:integer"/>~                      if (variable("useGlr").boolean())
                                                                {
~
  <xsl:param name="id" as="xs:integer"/>~                       }
~
~                                                               if (variable("lrparser").boolean())
                                                                {
~
  <xsl:variable name="state" select="p:lookahead1~                if (variable("anyWhitespace").boolean())
                                                                  {
                                                 ~W~              }
                                                   ~($p:TOKENSET[$dpi + 1], $input, $state~
                                                                  if (variable("useGlr").boolean())
                                                                  {
                                                   ~, $id~        }
                                                   ~)"/>~
                                                                }
~
  <xsl:choose>
    <xsl:when test="$state[$p:l1] lt 0">
      <xsl:variable name="node">
        <xsl:element name="error">
          <xsl:attribute name="b" select="$state[$p:b1]"/>
          <xsl:attribute name="e" select="$state[$p:e1]"/>
          <xsl:attribute name="s" select="- $state[$p:l1]"/>
        </xsl:element>
      </xsl:variable>
      <xsl:sequence select="
        0,
        subsequence($state, $p:lk + 1~                          if (variable("useGlr").boolean())
                                                                {
                                     ~)~                        }
                                                                else
                                                                {
                                     ~, $p:error - $p:lk - 1),
        $node/node(),
        subsequence($state, $p:error + 1)~                      }
~
      "/>
    </xsl:when>
    <xsl:otherwise>~
                                                                indent += 2;
~
~                                                               int k = variable("k").integer();
                                                                const char *action = "<xsl:variable name=\"action\" select=\"";
                                                                compressedMap2dAccessor("$state[$p:l1]", "$dpi", variable("cicols").integer(),
                                                                                            2, "j1", action, "$p:CASEID", &variable("cibits").integer());
                                                                bool loop = k > 1 && variable("lrparser").boolean();
                                                                for (int i = 2; i <= k; ++i)
                                                                {
~
  <xsl:choose>
    <xsl:when test="$action mod 2 eq 0">
      <xsl:sequence select="$action idiv 2, subsequence($state, $p:lk + 1)"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead~             print(format.toString<char>(i));
                                                                  if (variable("anyWhitespace").boolean())
                                                                  {
                                                   ~W~            }
                                                     ~(~          if (variable("unlimitedLookahead").boolean())
                                                                  {
                                                       ~0, ~      }
                                                           ~$action idiv 2, $input, $state)"/>
      <xsl:choose>
        <xsl:when test="$state[$p:l~                              print(format.toString<char>(i));
                                   ~] lt 0">
          <xsl:sequence select="0, subsequence($state, $p:lk + 1)"/>
        </xsl:when>
        <xsl:otherwise>~                                          indent += 2;
~
~                                                                 CString li("$state[$p:l");
                                                                  li += format.toString<char>(i);
                                                                  li += "]";
                                                                  CString ii("i");
                                                                  ii += format.toString<char>(i);
                                                                  compressedMap2dAccessor(i == 2 ? "$state[$p:l1]" : "$lk", li.c_str(), variable("lxcols").integer(),
                                                                                              6, ii.c_str(), "<xsl:variable name=\"lk\" select=\"", "$p:LOOKAHEAD", &variable("lxbits").integer());
      ~
      <xsl:choose>
        <xsl:when test="$lk eq 0">~                               if (loop)
                                                                  {
~
          <xsl:sequence select="p:predict($input, $state, $dpi + 1)"/>~
                                                                  }
                                                                  else
                                                                  {
~
          <xsl:sequence select="0, subsequence($state, $p:lk + 1)"/>~
                                                                  }
~
        </xsl:when>
        <xsl:otherwise>~                                          indent += 1;
~
~                                                                 CString ji("j");
                                                                  ji += format.toString<char>(i);
                                                                  compressedMap2dAccessor("$lk", "$dpi", variable("cicols").integer(),
                                                                                              8, ji.c_str(), "<xsl:variable name=\"action\" select=\"", "$p:CASEID", &variable("cibits").integer());
                                                                  indent += 3;
                                                                }
                                                                if (loop)
                                                                {
~
  <xsl:sequence select="
    if ($action ne 0) then
      ($action idiv 2, subsequence($state, $p:lk + 1))
    else
      p:predict($input, $state, $dpi + 1)
  "/>~                                                          }
                                                                else
                                                                {
~
  <xsl:sequence select="$action idiv 2, subsequence($state, $p:lk + 1)"/>~
                                                                }
                                                                indent -= 5;
                                                                for (int i = 2; i <= k; ++i)
                                                                {
~
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:otherwise>
</xsl:choose>~                                                    indent -= 6;
                                                                }
                                                                indent += 3;
~
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>
~                                                             }
~
<!--~~
 ! Match next token in input string, starting at given index, using
 ! the DFA entry state for the set of tokens that are expected in
 ! the current context.
 !
 ! @param $input the input string.
 ! @param $begin the index where to start in input string.
 ! @param $token-set the expected token set id.~              if (variable("useGlr").boolean())
                                                              {
~
 : @param $id the parsing thread id.~                         }
~
 ! @return a sequence of three: the token code of the result token,
 ! with input string begin and end positions. If there is no valid
 ! token, return the negative id of the DFA state that failed, along
 ! with begin and end positions of the longest viable prefix.
-->
<xsl:function name="p:match" as="xs:integer+">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="begin" as="xs:integer"/>
  <xsl:param name="token-set" as="xs:integer"/>~              if (variable("useGlr").boolean())
                                                              {
~
  <xsl:param name="id" as="xs:integer"/>~                     }
~
~                                                             if (variable("trace").boolean())
                                                              {
~
  <xsl:sequence select="p:trace(concat('  &lt;tokenize ~        if (variable("useGlr").boolean())
                                                                {
                              ~thread=&quot;', $id, '&quot; ~   }
                              ~tokenset=&quot;', $token-set, '&quot;&gt;'))"/>~
                                                              }
~
  <xsl:variable name="result" select="$p:INITIAL[1 + $token-set]"/>
  <xsl:sequence select="p:transition($input, $begin, $begin, $begin, $result, $result mod ~
                                                              print(Math::powerof(2, variable("stateCodeBits").integer()));
                                                                                          ~, 0)"/>
</xsl:function>

<!--~~
 ! The DFA state transition function. If we are in a valid DFA state, save
 ! it's result annotation, consume one input codepoint, calculate the next
 ! state, and use tail recursion to do the same again. Otherwise, return
 ! any valid result or a negative DFA state id in case of an error.
 !
 ! @param $input the input string.
 ! @param $begin the begin index of the current token in the input string.
 ! @param $current the index of the current position in the input string.
 ! @param $end the end index of the result in the input string.
 ! @param $result the result code.
 ! @param $current-state the current DFA state.
 ! @param $previous-state the  previous DFA state.
 ! @return a sequence of three: the token code of the result token,
 ! with input string begin and end positions. If there is no valid
 ! token, return the negative id of the DFA state that failed, along
 ! with begin and end positions of the longest viable prefix.
-->
<xsl:function name="p:transition">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="begin" as="xs:integer"/>
  <xsl:param name="current" as="xs:integer"/>
  <xsl:param name="end" as="xs:integer"/>
  <xsl:param name="result" as="xs:integer"/>
  <xsl:param name="current-state" as="xs:integer"/>
  <xsl:param name="previous-state" as="xs:integer"/>

  <xsl:choose>
    <xsl:when test="$current-state eq 0">
      <xsl:variable name="result" select="$result idiv ~      print(Math::powerof(2, variable("stateCodeBits").integer()));
                                                       ~"/>~  if (0 == variable("maxcontextlength").integer())
                                                              {
                                                                if (variable("hasfixedtokenlength").boolean())
                                                                {
~
      <xsl:variable name="end" select="if ($result idiv ~         print(Math::powerof(2, variable("tokencodeBits").integer()));
                                                        ~ ne 0) then $begin else $end"/>~
                                                                }
                                                              }
                                                              else if (! variable("hasfixedtokenlength").boolean())
                                                              {
~
      <xsl:variable name="end" select="$end - $result idiv ~    print(Math::powerof(2, variable("tokencodeBits").integer()));
                                                           ~"/>~
                                                              }
                                                              else
                                                              {
~
      <xsl:variable name="end" select="
        if ($result idiv ~                                        print(Math::powerof(2, variable("tokencodeBits").integer()));
                         ~ mod 2 eq 1) then
          $begin + $result idiv ~                                 print(Math::powerof(2, 1 + variable("tokencodeBits").integer()));
                                ~
        else
          $end - $result idiv ~                                   print(Math::powerof(2, 1 + variable("tokencodeBits").integer()));
~
      "/>~                                                    }
~
      <xsl:variable name="end" select="if ($end gt string-length($input)) then string-length($input) + 1 else $end"/>
      <xsl:sequence select="
        if ($result ne 0) then
        (~                                                    if (variable("trace").boolean())
                                                              {
~
          p:trace(concat('    &lt;done result=&quot;', p:xml-escape($p:TOKEN[$result~
                                                                if (   0 != variable("maxcontextlength").integer()
                                                                    || variable("hasfixedtokenlength").boolean())
                                                                {
              ~ mod ~                                             print(Math::powerof(2, variable("tokencodeBits").integer()));
                                                                }
              ~]), '&quot; begin=&quot;', $begin, '&quot; end=&quot;', $end, '&quot;/&gt;')),
          p:trace('  &lt;/tokenize&gt;'),~
                                                              }
                                                              if (0 == variable("maxcontextlength").integer() && ! variable("hasfixedtokenlength").boolean())
                                                              {
~
          $result - 1,~                                       }
                                                              else
                                                              {
~
          $result mod ~                                         print(Math::powerof(2, variable("tokencodeBits").integer()));
                      ~ - 1,~                                 }
~
          $begin,
          $end
        )
        else
        (~                                                    if (variable("trace").boolean())
                                                              {
~
          p:trace(concat('    &lt;fail begin=&quot;', $begin, '&quot; end=&quot;', $current - 1, '&quot; state=&quot;', $previous-state, '&quot;/&gt;')),
          p:trace('  &lt;/tokenize&gt;'),~
                                                              }
~
          - $previous-state,
          $begin,
          $current - 1
        )
      "/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="c0" select="(string-to-codepoints(substring($input, $current, 1)), 0)[1]"/>
      <xsl:variable name="c1" as="xs:integer">
        <xsl:choose>
          <xsl:when test="$c0 &lt; ~                          print(variable("simplifiedCodeMap").integer());
                                   ~">
            <xsl:sequence select="$p:MAP0[1 + $c0]"/>
          </xsl:when>
          <xsl:when test="$c0 &lt; ~                          print(variable("uncompressedMapSize").integer());
                                   ~">~                                 const int *m1bits = &variable("m1bits").integer();
                                                              for (size_t i = 0; m1bits[i]; ++i)
                                                              {
                            ~
            <xsl:variable name="c~                              print(i + 1);
                                 ~" select="$c~                 print(i);
                                              ~ idiv ~          print(Math::powerof(2, m1bits[i]));
                                                     ~"/>~    }
                                                     ~
            <xsl:sequence select="$p:MAP1[1 + $c0~            for (size_t i = 0; m1bits[i]; ++i)
                                                              {
                                                 ~ mod ~        print(Math::powerof(2, m1bits[i]));
                                                       ~ + $p:MAP1[1 + $c~
                                                                print(i + 1);
                                                              }
                                                              for (size_t i = 0; m1bits[i]; ++i)
                                                              {
                                                                         ~]~
                                                              }
                                                                           ~]"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="~                           if (variable("m2").size == 0)
                                                              {
                                  ~0~                         }
                                                              else
                                                              {
                                  ~p:map2($c0, 1, ~             print(variable("m2").size / 3);
                                                  ~)~         }
                                                    ~"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="current" select="$current + 1"/>
~                                                             const int *a1bits = &variable("a1bits").integer();
                                                              compressedMap2dAccessor("$current-state - 1", "$c1", variable("a1cols").integer(),
                                                                                          6, "i", "<xsl:variable name=\"next-state\" select=\"", "$p:TRANSITION", a1bits);
~
      <xsl:sequence select="~                                 if (variable("trace").boolean())
                                                              {
~
        p:trace
        (
          string-join
          (
            (
              '    &lt;next state=&quot;', string($current-state), '&quot;',
              ' offset=&quot;', string($current - 1), '&quot;',
              if ($c0 lt 32 or $c0 gt 126) then
                ()
              else
                (' char=&quot;', p:xml-escape(substring($input, $current - 1, 1)), '&quot;'),
              ' codepoint=&quot;', string($c0), '&quot;',
              ' class=&quot;', string($c1), '&quot;',
              if ($next-state lt ~                              print(Math::powerof(2, variable("stateCodeBits").integer()));
                                 ~) then
                ()
              else
              (
                ' result=&quot;',
                p:xml-escape($p:TOKEN[$next-state idiv ~        print(Math::powerof(2, variable("stateCodeBits").integer()));
                                                       ~ mod ~  print(Math::powerof(2, variable("tokencodeBits").integer()));
                                                             ~]), '&quot;',
                if ($next-state lt ~                            int contextOffset = variable("stateCodeBits").integer()
                                                                                  + variable("tokencodeBits").integer();
                                                                int sizeOffset = contextOffset
                                                                               + (variable("hasfixedtokenlength").boolean() ? 1 : 0);
                                                                print(Math::powerof(2, sizeOffset));
                                   ~) then
                  ''
                else
                  (' trailing-context-size=&quot;', string($next-state idiv ~
                                                                print(Math::powerof(2, sizeOffset));
                                                                            ~), '&quot;')
              ),
              '/&gt;'
            ),
            ''
          )
        ),~                                                   }
~
        if ($next-state &gt; ~                                print(Math::powerof(2, variable("stateCodeBits").integer()) - 1);
                             ~) then
          p:transition($input, $begin, $current, $current, $next-state, $next-state mod ~
                                                              print(Math::powerof(2, variable("stateCodeBits").integer()));
                         ~, $current-state)
        else
          p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)~
~
      "/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

<!--~~
 ! Recursively translate one 32-bit chunk of an expected token bitset
 ! to the corresponding sequence of token strings.
 !
 ! @param $result the result of previous recursion levels.
 ! @param $chunk the 32-bit chunk of the expected token bitset.
 ! @param $base-token-code the token code of bit 0 in the current chunk.
 ! @return the set of token strings.
-->
<xsl:function name="p:token">
  <xsl:param name="result" as="xs:string*"/>
  <xsl:param name="chunk" as="xs:integer"/>
  <xsl:param name="base-token-code" as="xs:integer"/>

  <xsl:sequence select="
    if ($chunk = 0) then
      $result
    else
      p:token
      (
        ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
        if ($chunk &lt; 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
        $base-token-code + 1
      )
  "/>
</xsl:function>
~                                                             if (defined("gtbits"))
                                                              {
~
<!--~~
 ! Get GOTO table entry for given nonterminal and parser state.
 !
 ! @param $nonterminal the nonterminal.
 ! @param $state the LR parser state.
 ! @return the GOTO table entry.
-->
<xsl:function name="p:goto" as="xs:integer">
  <xsl:param name="nonterminal" as="xs:integer"/>
  <xsl:param name="state" as="xs:integer"/>

~                                                               compressedMap2dAccessor("$nonterminal",
                                                                                            "$state",
                                                                                            variable("gtcols").integer(),
                                                                                            2,
                                                                                            "i",
                                                                                            "<xsl:sequence select=\"",
                                                                                            "$p:GOTO",
                                                                                            &variable("gtbits").integer());
~
</xsl:function>
~                                                             }
~
<!--~~
 ! Calculate expected token set for a given DFA state as a sequence
 ! of strings.
 !
 ! @param $state the DFA state.
 ! @return the set of token strings
-->
<xsl:function name="p:expected-token-set" as="xs:string*">
  <xsl:param name="state" as="xs:integer"/>

  <xsl:if test="$state > 0">
    <xsl:for-each select="0 to ~                              print((variable("t1").size - 1) / 32);
                               ~">
      <xsl:variable name="i0" select=". * ~                   print(variable("transitionStateCount").integer());
                                          ~ + $state - 1"/>
~                                                             compressedMapAccessor(6, "i", "<xsl:sequence select=\"p:token((), ", "$p:EXPECTED", &variable("t0bits").integer());
~, . * 32 + 1)"/>
    </xsl:for-each>
  </xsl:if>
</xsl:function>
~                                                             if (variable("m2").size != 0)
                                                              {
~
<!--~~
 ! Classify codepoint by doing a tail recursive binary search for a
 ! matching codepoint range entry in MAP2, the codepoint to charclass
 ! map for codepoints above the surrogate block.
 !
 ! @param $c the codepoint.
 ! @param $lo the binary search lower bound map index.
 ! @param $hi the binary search upper bound map index.
 ! @return the character class.
-->
<xsl:function name="p:map2" as="xs:integer">
  <xsl:param name="c" as="xs:integer"/>
  <xsl:param name="lo" as="xs:integer"/>
  <xsl:param name="hi" as="xs:integer"/>

  <xsl:variable name="m" select="($hi + $lo) idiv 2"/>
  <xsl:choose>
    <xsl:when test="$lo &gt; $hi">
      <xsl:sequence select="0"/>
    </xsl:when>
    <xsl:when test="$p:MAP2[$m] &gt; $c">
      <xsl:sequence select="p:map2($c, $lo, $m - 1)"/>
    </xsl:when>
    <xsl:when test="$p:MAP2[~                                   print(variable("m2").size / 3);
                            ~ + $m] &lt; $c">
      <xsl:sequence select="p:map2($c, $m + 1, $hi)"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:sequence select="$p:MAP2[~                           print(variable("m2").size / 3 * 2);
                                    ~ + $m]"/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>
~                                                             }
                                                              indent -= 1;
                                                            }

                                                            void CodeGeneratorXSLT::generateData()
                                                            {
                                                            }
