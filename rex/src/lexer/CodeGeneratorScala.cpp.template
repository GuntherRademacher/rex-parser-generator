~                                                           // generate CodeGeneratorScala.cpp using this command:
                                                            //
                                                            //   REx CodeGeneratorScala.cpp.template

                                                            #include "../common/Memory.hpp"
                                                            #include "../common/WString.hpp"

                                                            #include "CodeGenerator.hpp"

                                                            void CodeGeneratorScala::generateInstanceCode()
                                                            {
                                                              isScala = true;
                                                              if (! variable("append").boolean() && ! variable("embedded").boolean())
                                                              {
                                                                if (*variable("package").string())
                                                                {
~package ~                                                        print(variable("package").string());
         ~;

~                                                               }
~public class ~                                                 print(variable("classname").string());
              ~
{
~                                                             }
                                                              if (! variable("embedded").boolean())
                                                              {
~
  public void init(String string)
  {
    input = string;
    size = string.length();
    end = 0;
  }

  public int getOffset() {return begin;}
  public int getSize()   {return end - begin;}
  public int getState()  {return state;}

  public int match(int tokenSetId, String string)
  {
    init(string);
    return match(tokenSetId);
  }

  public~                                                     }
                                                              else
                                                              {
                                                                if (variable("tables").boolean())
                                                                {
~
  private def predict(dpi: Int): Int =~                           predict();
                                                                  /*
                                 ~ {
    if (l1 < 0) {
      lk = l1
    }
    else {
~                                                                 indent += 1;
                                                                  int k = variable("k").integer();
                                                                  CString caseId(variable("classname").string());
                                                                  caseId += ".CASEID";
                                                                  compressedMap2dAccessor("l1", "dpi", variable("cicols").integer(),
                                                                                             4, "j1", "var action = ", caseId.c_str(), &variable("cibits").integer());
                                                                  for (int i = 2; i <= k; ++i)
                                                                  {
~
    if ((action & 1) == 0) {
      lk = action >> 1
    }
    else {
      if (l~                                                        print(format.toString<char>(i));
           ~ == 0) {
        l~                                                          print(format.toString<char>(i));
         ~ = match~                                                 if (variable("anyWhitespace").boolean())
                                                                    {
                  ~W~                                               }
                                                                    else
                                                                    {
                  ~er~                                              }
                  ~(action >> 1)
        b~                                                          print(format.toString<char>(i));
         ~ = begin
        e~                                                          print(format.toString<char>(i));
         ~ = end
      }
      if (l~                                                        print(format.toString<char>(i));
           ~ < 0) {
        lk = 0
      }
      else {~                                                       indent += 1;
~
~                                                                   CString li("l");
                                                                    li += format.toString<char>(i);
                                                                    CString ii("i");
                                                                    ii += format.toString<char>(i);
                                                                    CString lookahead(variable("classname").string());
                                                                    lookahead += ".LOOKAHEAD";
                                                                    compressedMap2dAccessor(i == 2 ? "l1" : "lk", li.c_str(), variable("lxcols").integer(),
                                                                                               6, ii.c_str(), "lk = ", lookahead.c_str(), &variable("lxbits").integer());
                                                                    indent -= 1;
~
      }
      if (lk != 0) {
~                                                                   CString ji("j");
                                                                    ji += format.toString<char>(i);
                                                                    compressedMap2dAccessor("lk", "dpi", variable("cicols").integer(),
                                                                                               8, ji.c_str(), "action = ", caseId.c_str(), &variable("cibits").integer());
                                                                    indent += 2;
                                                                  }
~
    lk = action >> 1~                                             for (int i = k; i >= 2; --i)
                                                                  {
                                                                    indent = 2 * i - 4;
~
      }
    }~                                                            }
                                                                  indent = 0;
~
    }
    lk
  }
~                                                                 */
                                                                }

~
  private~
                                                              }
         ~ def matcher(tokenSetId: Int) = {~
                                                              if (variable("nolexer").boolean())
                                                              {
~
    token.begin = end;
    lexer.match(tokenSetId, token);
    begin = token.begin;
    end = token.end;
    return token.code >= 0
         ? token.code
         : error(begin, end, - tokenSetId, -1, -1);
  }
~
                                                              }
                                                              else
                                                              {
                                                                if (variable("trace").boolean())
                                                                {
~
    ~                                                             if (variable("useGlr").boolean())
                                                                  {
    ~parser.~                                                     }
    ~writeTrace("  <tokenize ~                                    if (variable("useGlr").boolean())
                                                                  {
                             ~thread=\"" + id + "\" ~             }
                             ~tokenset=\"" + tokenSetId + "\">\n")
~                                                               }
                                                                int lookahead = variable("maxcontextlength").integer();
                                                                bool hasFixedTokenLength = variable("hasfixedtokenlength").boolean();
                                                                if (lookahead)
                                                                {
~
    var nonbmp = false~                                         }
~
    begin = end
    var current = end
    var result = ~                                              print(variable("classname").string());
                 ~.INITIAL(tokenSetId)~                         if (variable("embedded").boolean())
                                                                {
~
    var state = 0~                                              }
~
    var code = result & ~                                       print(Math::powerof(2, variable("stateCodeBits").integer()) - 1);
                                                                if (variable("trace").boolean())
                                                                {
~

    ~                                                             if (variable("useGlr").boolean())
                                                                  {
    ~parser.~                                                     }
    ~writeTrace("    <next state=\"" + (result & ~                print(Math::powerof(2, variable("stateCodeBits").integer()) - 1);
                                                 ~) + "\"")~    }
~

    while (code != 0) {
      var charclass = -1
      var c0: Int = if (current < ~                             if (variable("useGlr").boolean())
                                                                {
                                  ~parser.~                     }
                                          ~size) ~              if (variable("useGlr").boolean())
                                                                {
                                                 ~parser.~      }
                                                 ~input(current) else 0~
                                                                if (variable("trace").boolean())
                                                                {
~
      ~                                                             if (variable("useGlr").boolean())
                                                                  {
      ~parser.~                                                   }
      ~writeTrace(" offset=\"" + current + "\"")~               }
~
      current += 1
      if (c0 < 0x~                                              print(format.toString<char>(variable("simplifiedCodeMap").integer(), 16, 0, 0, 0, "0123456789abcdef"));
                 ~) {~                                          if (variable("trace").boolean())
                                                                {
~
        if (c0 >= 32 && c0 <= 126)
          ~                                                       if (variable("useGlr").boolean())
                                                                  {
          ~parser.~                                               }
          ~writeTrace(" char=\"" + ~                              print(variable("classname").string());
                                   ~.xmlEscape(~                  if (variable("useGlr").boolean())
                                                                  {
                                               ~parser.~          }
                                               ~input.substring(current - 1, current)) + "\"")~
                                                                }
~
        charclass = ~                                           print(variable("classname").string());
                    ~.MAP0(c0)
      }
      else if (c0 < 0x~                                         print(format.toString<char>(variable("uncompressedMapSize").integer(), 16, 0, 0, 0, "0123456789abcdef"));
                      ~) {
~                                                               CString map1(variable("classname").string());
                                                                map1 += ".MAP1";
                                                                compressedMapAccessor(8, "c", "charclass = ", map1.c_str(), &variable("m1bits").integer());
~
      }
      else {~                                                   if (variable("m2").size == 0)
                                                                {
       ~
        charclass = 0~                                          }
                                                                else
                                                                {
       ~
        if (~                                                     if (variable("uncompressedMapSize").integer() != 0xd800)
                                                                  {
            ~c0 >= 0xd800 && ~                                    }
                             ~c0 < 0xdc00) {
          val c1 = if (current < ~                                if (variable("useGlr").boolean())
                                                                  {
                                 ~parser.~                        }
                                 ~size) ~                         if (variable("useGlr").boolean())
                                                                  {
                                        ~parser.~                 }
                                        ~input(current) else 0
          if (c1 >= 0xdc00 && c1 < 0xe000) {~                     if (lookahead)
                                                                  {
~
            nonbmp = true~                                        }
~
            current += 1
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000
          }
        }
~
/*
 * tail recursive variant of MAP2 access
 *
        def binarySearch(lo: Int, hi: Int): Int = {
          if (lo > hi)
            0
          else {
            val m = (hi + lo) >> 1
            if (~                                                 print(variable("classname").string());
                ~.MAP2(m) > c0) binarySearch(lo, m - 1)
            else if (~                                            print(variable("classname").string());
                     ~.MAP2(2 + m) < c0) binarySearch(m + 1, hi)
            else ~                                                print(variable("classname").string());
                 ~.MAP2(4 + m)
          }
        }

        charclass = binarySearch(0, ~                             print(variable("classname").string());
                                    ~.MAP2.length)
 */
~
        var lo = 0
        var hi = ~                                                print(variable("m2").size / 3 - 1);
                 ~
        var m = ~                                                 print((variable("m2").size / 3) >> 1);
                ~
        while (charclass < 0) {
          if (~                                                   print(variable("classname").string());
              ~.MAP2(m) > c0) hi = m - 1
          else if (~                                              print(variable("classname").string());
                   ~.MAP2(~                                       print(variable("m2").size / 3);
                                ~ + m) < c0) lo = m + 1
          else charclass = ~                                      print(variable("classname").string());
                           ~.MAP2(~                               print(variable("m2").size / 3 * 2);
                                        ~ + m)
          if (lo > hi) charclass = 0 else m = (hi + lo) >> 1
        }~                                                      }
~
      }~                                                        if (variable("trace").boolean())
                                                                {
~
      ~                                                             if (variable("useGlr").boolean())
                                                                  {
      ~parser.~                                                   }
      ~writeTrace(" codepoint=\"" + c0 + "\" class=\"" + charclass + "\"")~
                                                                }
~

      state = code
~                                                               CString transition(variable("classname").string());
                                                                transition += ".TRANSITION";
                                                                compressedMap2dAccessor("code - 1", "charclass", variable("a1cols").integer(),
                                                                                           6, "i", "code = ", transition.c_str(), &variable("a1bits").integer());
~

      if (code > ~                                              print(Math::powerof(2, variable("stateCodeBits").integer()) - 1);
                 ~) {
        result = code~                                          if (variable("trace").boolean())
                                                                {
~
        ~                                                             if (variable("useGlr").boolean())
                                                                  {
        ~parser.~                                                 }
        ~writeTrace(" result=\"" + ~                              print(variable("classname").string());
                                   ~.xmlEscape(~                  print(variable("classname").string());
                                   ~.TOKEN(((result >> ~          print(variable("stateCodeBits").integer());
                                                       ~) & ~     print(Math::powerof(2, variable("tokencodeBits").integer()) - 1);
                                                            ~) - 1)) + "\"")~
                                                                  if (lookahead || hasFixedTokenLength)
                                                                  {
                                                                    int contextOffset = variable("stateCodeBits").integer()
                                                                                      + variable("tokencodeBits").integer();
                                                                    int sizeOffset = contextOffset
                                                                                   + (hasFixedTokenLength ? 1 : 0);
                                                                    if (hasFixedTokenLength)
                                                                    {
~
        if ((result & ~                                               print(Math::powerof(2, contextOffset));
                      ~) > 0) {
          ~                                                           if (variable("useGlr").boolean())
                                                                      {
          ~parser.~                                                   }
          ~writeTrace(" token-size=\"" + (result >> ~                 print(sizeOffset);
                                                   ~) + "\"")
        }
        else ~                                                      }
                                                                    else
                                                                    {
~
        ~                                                           }
        ~if ((result >> ~                                           print(sizeOffset);
                        ~) > 0) {
          ~                                                         if (variable("useGlr").boolean())
                                                                    {
          ~parser.~                                                 }
          ~writeTrace(" trailing-context-size=\"" + (result >> ~     print(sizeOffset);
                                                              ~) + "\"")
        }~                                                        }
                                                                }
~
        code &= ~                                               print(Math::powerof(2, variable("stateCodeBits").integer()) - 1);
                ~
        end = current
      }~                                                        if (variable("trace").boolean())
                                                                {
~
      ~                                                           if (variable("useGlr").boolean())
                                                                  {
      ~parser.~                                                   }
      ~writeTrace("/>\n")
      if (code != 0) {
        ~                                                         if (variable("useGlr").boolean())
                                                                  {
        ~parser.~                                                 }
        ~writeTrace("    <next state=\"" + code + "\"")
      }~                                                        }
~
    }

    result >>= ~                                                print(variable("stateCodeBits").integer());
               ~
    if (result == 0) {
      end = current - 1
      val c1 = if (end < ~                                      if (variable("useGlr").boolean())
                                                                {
                         ~parser.~                              }
                         ~size) ~                               if (variable("useGlr").boolean())
                                                                {
                                ~parser.~                       }
                                ~input(end) else 0
      if (c1 >= 0xdc00 && c1 < 0xe000) {
        end -= 1
      }~                                                        if (variable("trace").boolean())
                                                                {
~
      ~                                                           if (variable("useGlr").boolean())
                                                                  {
      ~parser.~                                                   }
      ~writeTrace("    <fail begin=\"" + begin + "\" end=\"" + end + "\" state=\"" + state + "\"/>\n")
      ~                                                           if (variable("useGlr").boolean())
                                                                  {
      ~parser.~                                                   }
      ~writeTrace("  </tokenize>\n")~                           }
                                                                if (variable("embedded").boolean())
                                                                {
                                                                  if (variable("useGlr").boolean())
                                                                  {
~
      end = begin
      -1~                                                         }
                                                                  else
                                                                  {
~
      error(begin, end, state, -1, -1)~                           }
                                                                }
~
    }
    else {~                                                     int lowBits = variable("tokencodeBits").integer();
                                                                if (hasFixedTokenLength && ! lookahead)
                                                                {
~
      if ((result & ~                                             print(Math::powerof(2, lowBits));
                                                                  ++lowBits;
                    ~) != 0) {
        end = begin
      }~                                                        }
                                                                else
                                                                {
                                                                  if (hasFixedTokenLength)
                                                                  {
~
      if ((result & ~                                               print(Math::powerof(2, lowBits));
                                                                    ++lowBits;
                    ~) != 0) {
        end = begin
        if (nonbmp) {
          var i = result >> ~                                       print(lowBits);
                            ~
          while (i > 0) {
            val c1 = if (end < ~                                    if (variable("useGlr").boolean())
                                                                    {
                               ~parser.~                            }
                               ~size) ~                             if (variable("useGlr").boolean())
                                                                    {
                                      ~parser.~                     }
                                      ~input(end) else 0
            end += 1
            if (c1 >= 0xd800 && c1 < 0xdc000) {
              end += 1
            }
            i -= 1
          }
        }
        else {
          end += (result >> ~                                       print(lowBits);
                            ~)
        }
      }~                                                          }
                                                                  if (lookahead)
                                                                  {
~
      if (nonbmp) {
        var i = result >> ~                                         print(lowBits);
                          ~
        while (i > 0) {
          end -= 1
          val c1 = if (end < ~                                      if (variable("useGlr").boolean())
                                                                    {
                             ~parser.~                              }
                             ~size) ~                               if (variable("useGlr").boolean())
                                                                    {
                                    ~parser.~                       }
                                    ~input(end) else 0
          if (c1 >= 0xdc00 && c1 < 0xe000) {
            end -= 1
          }
          i -= 1
        }
      }
      else {
        end -= result >> ~                                          print(lowBits);
                         ~
      }~                                                          }
                                                                }
~
      if (end > ~                                               if (variable("useGlr").boolean())
                                                                {
                ~parser.~                                       }
                ~size) end = ~                                  if (variable("useGlr").boolean())
                                                                {
                             ~parser.~                          }
                             ~size~                             if (variable("trace").boolean())
                                                                {
~
      ~                                                           if (variable("useGlr").boolean())
                                                                  {
      ~parser.~                                                   }
      ~writeTrace("    <done result=\"" + ~                        print(variable("classname").string());
                                         ~.xmlEscape(~            print(variable("classname").string());
                                         ~.TOKEN((result & ~      print(Math::powerof(2, variable("tokencodeBits").integer()) - 1);
                                                           ~) - 1)) + "\" begin=\"" + begin + "\" end=\"" + end + "\"/>\n")
      ~                                                           if (variable("useGlr").boolean())
                                                                  {
      ~parser.~                                                   }
      ~writeTrace("  </tokenize>\n")~                           }
                                                                const char *flags = getenv("FLAGS");
                                                                bool hack = flags && strchr(flags, 'H');
                                                                if (hack)
                                                                {
~
      hack((result & ~                                            print(Math::powerof(2, variable("tokencodeBits").integer()) - 1);
                     ~) - 1)
    }
~                                                               }
                                                                else
                                                                {
~
      (result & ~                                                 print(Math::powerof(2, variable("tokencodeBits").integer()) - 1);
                ~) - 1
    }
  }
~                                                               }
                                                              }
                                                              if (! variable("embedded").boolean())
                                                              {
~
  public String[] getExpectedTokenSet()
  {
    return getTokenSet(- state);
  }
~                                                             }
~
  var begin = 0
  var end = 0
~                                                           }

                                                            void CodeGeneratorScala::generateStaticCode()
                                                            {
                                                              isScala = true;
                                                              if (defined("gtbits"))
                                                              {
~
  private def goTo(nonterminal: Int, state: Int): Int = {
~
                                                                CString goTo(variable("classname").string());
                                                                goTo += ".GOTO";
                                                                compressedMap2dAccessor("nonterminal", "state", variable("gtcols").integer(),
                                                                                           4, "i", "", goTo.c_str(), &variable("gtbits").integer());
~
  }
~                                                             }
                                                              if (variable("trace").boolean())
                                                              {
~
  private def xmlEscape(s: String) = {
    var result = ""
    for (i <- 0 to s.length - 1) {
      var c = s.charAt(i)
      c match {
      case '<' => result += "&lt;"
      case '"' => result += "&quot;"
      case '&' => result += "&amp;"
      case _ => result += c
      }
    }
    result
  }
~                                                             }
                                                              if (variable("nolexer").boolean())
                                                              {
~
  public static int getTokenCount() {return ~                   print(variable("t1").size);
                                            ~;}
  public static String getTokenName(int code) {return code >= 0 && code < ~
                                                                print(variable("t1").size);
                                                                          ~ ? TOKEN[code] : null;}
  public static int getTokenSetCount() {return ~                print(variable("entrycount").integer());
                                               ~;}

  public static String[] getTokenSet(int tokenSetId) {~       }
                                                              else
                                                              {
~
  private def getTokenSet(tokenSetId: Int) = {~               }
~
    var expected = ArrayBuffer[String]()~                     if (! variable("nolexer").boolean())
                                                              {
~
    val s = if (tokenSetId < 0) - tokenSetId else INITIAL(tokenSetId) & ~
                                                                print(Math::powerof(2, variable("stateCodeBits").integer()) - 1);
                                                              }
~
    var i = 0
    while (i < ~                                              print(variable("t1").size);
               ~) {
      var j = i
      val i0 = (i >> 5) * ~                                   print(variable("transitionStateCount").integer());
                          ~ + ~                               if (variable("nolexer").boolean())
                                                              {
                              ~tokenSetId~                    }
                                                              else
                                                              {
                              ~s - 1~                         }
~
~
                                                              compressedMapAccessor(6, "i", "var f = ", "EXPECTED", &variable("t0bits").integer());
~
      while (f != 0) {
        if ((f & 1) != 0) {
          expected += TOKEN(j)
        }
        f >>>= 1
        j += 1
      }
      i += 32
    }
    expected.toArray
  }~                                                          size_t total = 0;
                                                              for (VarsInInsertionOrder::iterator a(varsInInsertionOrder.begin());
                                                                   a != varsInInsertionOrder.end(); ++a)
                                                                if (   a->isArray()
                                                                    && strlen(a->name) == 2
                                                                    && (a->hasType(CGVariable::INTEGER) || a->hasType(CGVariable::UNSIGNED)))
                                                              {
                                                                total += a->size;
                                                              }
                                                              bool asString = total > 4096;
                                                              size_t limit = asString ? 119 : 119;
                                                              for (VarsInInsertionOrder::iterator a(varsInInsertionOrder.begin());
                                                                   a != varsInInsertionOrder.end(); ++a)
                                                                if (   a->isArray()
                                                                    && a->size > 0
                                                                    && (a->hasType(CGVariable::INTEGER) || a->hasType(CGVariable::UNSIGNED))
                                                                    && strlen(a->name) == 2)
                                                              {
~

  private final val ~                                           print(a->longName);
                    ~ = Array(~
                                                                int w = (int) Format::width(a->size);
                                                                for (size_t j = 0; j < a->size; ++j)
                                                                {
                                                                  if (j == 0 || lineLength() + Format::width(a->integer(j)) + (asString ? 3 : 2) > limit)
                                                                  {
                                                                    if (j) print(asString ? "\"," : ",");
   ~
    /* ~                                                            print(format.toString<char>(j, 10, w));
       ~ */ ~                                                       if (asString) print("\"");
                                                                  }
                                                                  else
                                                                  {
   ~, ~                                                           }
                                                                  if (a->hasType(CGVariable::UNSIGNED))
                                                                  {
                                                                    print(format.toString<char>((unsigned) a->integer(j)));
                                                                  }
                                                                  else
                                                                  {
                                                                    print(a->integer(j));
                                                                  }
                                                                }
                                                                if (asString)
                                                                {
   ~"
  ).flatMap(_.split(", ").map(_.toInt))~                        }
                                                                else
                                                                {
~
  )~                                                            }
                                                              }
                                                              for (VarsInInsertionOrder::iterator a(varsInInsertionOrder.begin());
                                                                   a != varsInInsertionOrder.end(); ++a)
                                                                if (a->isArray() && a->size > 0 && a->hasType(CGVariable::STRING) && strlen(a->name) == 2)
                                                              {
~

  private final val ~                                           print(a->longName);
                    ~ = Array(
~                                                               for (size_t j = 0; j < a->size; ++j)
                                                                {
                                                                  if (j)
                                                                  {
    ~,
~                                                                 }
~    "~                                                           const char *s = a->string(j);
                                                                  const char *c = s;
                                                                  for (; *c; ++c)
                                                                  {
                                                                    if (*c == '"' || *c == '\\')
                                                                    {
                                                                      print(s, c - s);
                                                                      s = c;
                                                                      print("\\");
                                                                    }
                                                                  }
                                                                  print(s, c - s);
    ~"~                                                         }
~
  )~                                                         }
                                                              if (! variable("embedded").boolean())
                                                              {
~

  public enum Token
  {
    ~                                                           const CGVariable &token = variable("token");
                                                                int w = (int) Format::width(token.size);
                                                                for (size_t i = 0; i < token.size; ++i)
                                                                {
                                                                  if (i)
                                                                  {
    ~,
    ~                                                             }
    ~/* ~                                                         print(format.toString<char>(i, 10, w));
    ~ */ ~                                                        print(token.string(i));
                                                                }
    ~
  };~
                                                              }
                                                              if (variable("selfTest").boolean())
                                                              {
~

  private void selfTest(int set, int tokenId)
  {
    String tokenString = TOKEN[tokenId];
    if (tokenString.startsWith("'"))
    {
      System.out.print("testing(" + set + ", " + tokenId + ")...");
      tokenString = tokenString.substring(1, tokenString.length() - 1).replace("''", "'");
      if (tokenString.trim().equals(""))
      {
        System.out.println("  skipped");
      }
      else
      {
        int result = match(set, tokenString + " ");
        int resultSize = getSize();
        if (result != tokenId || resultSize != tokenString.length())
        {
          System.out.println();
          System.out.println("  tested: " + tokenString);
          System.out.println("  result: " + result);
          System.out.println("    size: " + resultSize);
          System.exit(1);
        }
        else
        {
          System.out.println("  OK");
        }
      }
    }
  }

  public static void main(String[] args)
  {
    ~                                                         print(variable("classname").string());
    ~ testee = new ~                                          print(variable("classname").string());
                   ~();
    for (int e = 0; e < ~                                     print(variable("a0").size);
                        ~; ++e)
    {
      int s = INITIAL[e] & ~                                  print(Math::powerof(2, variable("stateCodeBits").integer()) - 1);
                           ~;
      for (int i = 0; i < ~                                   print(variable("t1").size);
                          ~; i += 32)
      {
        int j = i;
        int i0 = (i >> 5) * ~                                 print(variable("transitionStateCount").integer());
                            ~ + s - 1;
~                                                             compressedMapAccessor(8, "i", "int f = ", "EXPECTED", &variable("t0bits").integer());
~
        for ( ; f != 0; f >>>= 1, ++j)
        {
          if ((f & 1) != 0)
          {
            testee.selfTest(e, j);
          }
        }
      }
    }
  }~                                                          }
~
~                                                             if (! variable("embedded").boolean())
                                                              {
~}
~                                                             }
                                                            }

                                                            void CodeGeneratorScala::generateData()
                                                            {
                                                            }
