~                                                           /*
                                                             * PrintCLike.hpp
                                                             *
                                                             *  Created on: 31.07.2008
                                                             *      Author: Gunther
                                                             */

                                                            #include "../common/Memory.hpp"

                                                            #include "PrintCLike.hpp"
                                                            #include "OrderedTokenSequenceVector.hpp"
                                                            #include "ItemSet.hpp"

                                                            #include "../common/PtrLess.hpp"
                                                            #include "../common/Format.hpp"
                                                            #include "../common/Encoder.hpp"

                                                            #ifdef TRACE
                                                            int Tracer::level = 0;
                                                            #endif

                                                            void PrintCLike::printCodeSequenceAnnotation(const TokenSequenceSet &t)
                                                            {
                                                              Trace("PrintCLike::printCodeSequenceAnnotation");

                                                              const size_t align = 36;
                                                              print(lineBuffer.c_str());
                                                              size_t lsize = column();
                                                              size_t filler = lsize <= align ? align - lsize : lsize % 2;
                                                              int spaces = lsize + filler;
                                                              size_t width = spaces > 120 ? 0 : 120 - spaces;
                                                              if (width < (120 - align) / 2) width = (120 - align) / 2;
                                                              WString commentContinuation(L"\n");
                                                              commentContinuation += inlineCommentIntroducer();
                                                              WString annotation(t.toString(grammar, commentContinuation.c_str(), L" |", width - 3, 0, false, toBeEscaped));
                                                              wchar_t *indentedAnnotation = Format::reIndent(annotation.c_str(), Math::max(0, static_cast<int>(spaces) - getIndent()));
                                                              print(filler, L" ");
                                                              print(inlineCommentIntroducer());
                                                              print(indentedAnnotation);
                                                              free(indentedAnnotation);
                                                            }

                                                            void PrintCLike::printLookahead(size_t k,
                                                                                            const TokenSequenceSet &prefix,
                                                                                            size_t level,
                                                                                            const CompressedTokenSet *lookahead,
                                                                                            bool findsLookahead)
                                                            {
                                                              Trace("PrintCLike::printLookahead");

                                                              if (lookahead != 0 && ! lookahead->empty())
                                                              {
                                                                if (level > 1 || ! findsLookahead)
                                                                {
~
~                                                                 const wchar_t *lookaheadType;
                                                                  if (anyWhitespace && lookahead->hasImplicitWhitespace())
                                                                  {
                                                                    lookaheadType = L"W";
                                                                  }
                                                                  else
                                                                  {
                                                                    lookaheadType = L"";
                                                                  }

                                                                  lineBuffer.clear();
                                                                  lineBuffer += thiz();
                                                                  lineBuffer += L"lookahead";
                                                                  lineBuffer += format.toString<wchar_t>(level);
                                                                  lineBuffer += lookaheadType;
                                                                  lineBuffer += L"(";
                                                                  lineBuffer += level == 1 || ! unlimitedLookahead ? L"" : format.toString<wchar_t>(lookahead->prefixCode(grammar->tokenSequenceFactory->tokenBits()));
                                                                  lineBuffer += level == 1 || ! unlimitedLookahead ? L"" : L", ";
                                                                  lineBuffer += grammar->singleLexer ? L"0" : format.toString<wchar_t>(lookahead->getSetNo(grammar->lookaheadSets));
                                                                  lineBuffer += L")";
                                                                  lineBuffer += semicolon();
                                                                  lineBuffer += L" ";

                                                                  printCodeSequenceAnnotation(lookahead->getInitials());
                                                                }

                                                                if (lookahead->getDpi() >= 0)
                                                                {
~
~                                                                 print(thiz());
~lk = ~                                                           print(thiz());
      ~predict(~                                                  print(format.toString<wchar_t>(lookahead->getDpi()));
               ~)~                                                print(semicolon());
                                                                }
                                                                else if (level < k)
                                                                {
                                                                  // this block will be obsolete when "tables" proves to be successful

                                                                  const CompressedTokenSet::CompressedTokenSetByTokenSet &chol(lookahead->getCombinedHigherOrderLookahead());
                                                                  if (! chol.empty())
                                                                  {
                                                                    const wchar_t *switchVar = (level == 1 && lookahead->getDpi() < 0) ? token() : tokenSequence();
                                                                    if (isScala())
                                                                    {
~
~                                                                     print(switchVar);
~ match~                                                            }
                                                                    else if (! isPython())
                                                                    {
~
switch ~                                                              print(ifLeftParen());
                                                                      print(thiz());
                                                                      print(switchVar);
                                                                      print(ifRightParen());
                                                                    }
                                                                    print(leftBrace());
                                                                    ++level;
                                                                    OrderedTokenSequenceVector orderedPrefix(prefix, __FILE__, __LINE__);
                                                                    if (unlimitedLookahead)
                                                                    {
                                                                      const CompressedTokenSet::HigherOrderLookahead &hol(lookahead->getHigherOrderLookahead());
                                                                      for (CompressedTokenSet::HigherOrderLookahead::const_iterator i(hol.begin());
                                                                           i != hol.end();
                                                                           ++i)
                                                                      {
                                                                        Token::Code token = i->first;

                                                                        for (OrderedTokenSequenceVector::const_iterator p = orderedPrefix.begin(); p != orderedPrefix.end(); ++p)
                                                                        {
                                                                          TokenSequence nextPrefix(grammar->tokenSequenceFactory->tokenSequence(*p, grammar->tokenSequence(token)));
~
~                                                                         lineBuffer.clear();
                                                                          if (isPython())
                                                                          {
                                                                            lineBuffer += L"if ";
                                                                            lineBuffer += L"self.";
                                                                            lineBuffer += switchVar;
                                                                            lineBuffer += L" == ";
                                                                          }
                                                                          else
                                                                          {
                                                                            lineBuffer += L"case ";
                                                                          }
                                                                          lineBuffer += format.toString<wchar_t>(lookahead->localSequenceCode(grammar->tokenSequenceFactory, grammar->tokenSequence(token), grammar->externalTokenCode));
                                                                          lineBuffer += isScala() ? L" => " : L": ";

                                                                          printCodeSequenceAnnotation(nextPrefix);
                                                                          increaseIndent();
                                                                          TokenSequenceSet singleNextPrefixSet;
                                                                          singleNextPrefixSet.insert(nextPrefix);
                                                                          printLookahead(k, singleNextPrefixSet, level, i->second, findsLookahead);
                                                                          if (! isScala() && ! isHaxe() && ! isGo() && ! isPython())
                                                                          {
~
break~                                                                      print(semicolon());
                                                                          }
                                                                          decreaseIndent();
                                                                        }
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      const CompressedTokenSet::CompressedTokenSetByTokenSet &chol = lookahead->getCombinedHigherOrderLookahead();
                                                                      for (CompressedTokenSet::CompressedTokenSetByTokenSet::const_iterator i = chol.begin();
                                                                           i != chol.end();
                                                                           ++i)
                                                                      {
                                                                        const CompressedTokenSet *cts = i->second;
                                                                        const OrderedTokenSequenceVector &ots(i->first);
                                                                        TokenSequenceSet nextPrefixSet;
                                                                        bool firstJ = true;
                                                                        size_t cases = orderedPrefix.size() * ots.size();
                                                                        for (OrderedTokenSequenceVector::const_iterator p = orderedPrefix.begin(); p != orderedPrefix.end(); )
                                                                        {
                                                                          const TokenSequence &otsv(*p);
                                                                          ++p;
                                                                          bool lastP = p == orderedPrefix.end();
                                                                          for (OrderedTokenSequenceVector::const_iterator j = ots.begin(); j != ots.end(); )
                                                                          {
                                                                            TokenSequence nextPrefix(grammar->tokenSequenceFactory->tokenSequence(otsv, *j));
                                                                            ++j;
                                                                            bool lastJ = lastP && j == ots.end();
                                                                            nextPrefixSet.insert(nextPrefix);
~
~                                                                           lineBuffer.clear();
                                                                            if (isPython())
                                                                            {
                                                                              if (i == chol.begin())
                                                                              {
                                                                                lineBuffer += firstJ ? L"if " : L"   ";
                                                                              }
                                                                              else
                                                                              {
                                                                                lineBuffer += firstJ ? L"elif " : L"     ";
                                                                              }
                                                                              if (cases > 1)
                                                                                lineBuffer += firstJ ? L"(" : L" ";
                                                                              lineBuffer += L"self.";
                                                                              lineBuffer += switchVar;
                                                                              lineBuffer += L" == ";
                                                                              lineBuffer += format.toString<wchar_t>(CompressedTokenSet::uniqueSequenceCode(grammar->tokenSequenceFactory, nextPrefix, grammar->externalTokenCode));
                                                                              if (lastJ)
                                                                              {
                                                                                if (cases > 1)
                                                                                  lineBuffer += L")";
                                                                                lineBuffer += L":";
                                                                              }
                                                                              else
                                                                              {
                                                                                lineBuffer += L" or";
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              lineBuffer += (! isScala() && ! isHaxe() && ! isGo()) || firstJ ? L"case "
                                                                                                                                     : isGo() ? L"     "
                                                                                                                                              : L"   | ";
                                                                              lineBuffer += format.toString<wchar_t>(CompressedTokenSet::uniqueSequenceCode(grammar->tokenSequenceFactory, nextPrefix, grammar->externalTokenCode));
                                                                              lineBuffer += ! isScala() && ! isHaxe() && ! isGo() && ! isPython() ? L": "
                                                                                                                                        : ! lastJ ? (isGo() ? L", " : L" ")
                                                                                                                                     : (isScala() ? L" => " : L": ");
                                                                            }
                                                                            printCodeSequenceAnnotation(nextPrefix);
                                                                            firstJ = false;
                                                                          }
                                                                        }
                                                                        increaseIndent();
                                                                        printLookahead(k, nextPrefixSet, level, cts, findsLookahead);
                                                                        if (! isScala() && ! isHaxe() && ! isGo() && ! isPython())
                                                                        {
~
break~                                                                    print(semicolon());
                                                                        }
                                                                        decreaseIndent();
                                                                      }
                                                                    }

                                                                    --level;
                                                                    if (isScala())
                                                                    {
~
case _ =>~                                                          }

                                                                    if (level == 1)
                                                                    {
                                                                      if (isPython())
                                                                      {
~
else:~
                                                                      }
                                                                      else if (! isScala())
                                                                      {
~
default:~                                                             }
                                                                      increaseIndent();
~
~                                                                     print(thiz());
~lk = ~                                                               print(thiz());
      ~l1~                                                            print(semicolon());
                                                                      if (isCpp() || isCSharp())
                                                                      {
~
break~                                                                  print(semicolon());
                                                                      }
                                                                      decreaseIndent();
                                                                    }
                                                                    print(rightBrace());
                                                                  }
                                                                }
                                                              }
                                                            }

                                                            void PrintCLike::printMatch(const CompressedTokenSet *lookahead,
                                                                                        size_t k,
                                                                                        int backtrackedCaseId,
                                                                                        const TokenSequenceSet &ts,
                                                                                        MatchType matchType,
                                                                                        bool invert,
                                                                                        int caseId,
                                                                                        const wchar_t *prefix)
                                                            {
                                                              Trace("PrintCLike::printMatch");

                                                              const wchar_t *logicalAnd = isPython() ? L" and " : L" && ";
                                                              const wchar_t *logicalOr  = isPython() ? L" or " : L" || ";

                                                              matchType = (! invert) ? matchType : matchType == IF ? IFNOT : IF;
                                                              const wchar_t *comparison = matchType == IFNOT ? L" != "    : L" == "  ;
                                                              const wchar_t *connector  = matchType == IFNOT ? logicalAnd : logicalOr;

                                                              bool multipleMatchCodes = (backtrackedCaseId && ! ts.empty())
                                                                                     || ((lookahead == 0 || lookahead->getDpi() < 0) && ts.size() > 1);
                                                              const wchar_t *healthCheckConnector  = invert ? logicalOr : logicalAnd;
                                                              bool needParenthesis = multipleMatchCodes
                                                                                  && healthCheckConnector != connector
                                                                                  && (isCpp() || connector == logicalOr);
                                                              bool trying = false;

                                                              if (*prefix)
                                                              {
                                                                trying = hasBacktracking
                                                                      && grammar->noThrow
                                                                      && methodPrefix == methodPrefixTry;
                                                                lineBuffer = prefix;
                                                                lineBuffer += L" ";
                                                                lineBuffer += isPython() && multipleMatchCodes ? L"(" : ifLeftParen();
                                                                if (trying)
                                                                {
                                                                  if (invert) lineBuffer += isPython() ? L"not " : L"! ";
                                                                  lineBuffer += thiz();
                                                                  lineBuffer += L"viable";
                                                                  lineBuffer += healthCheckConnector;
                                                                  if (needParenthesis)
                                                                  {
                                                                    lineBuffer += L"(";
                                                                  }
                                                                }
                                                              }
                                                              size_t prefixSize = lineBuffer.size();

                                                              const TokenSequence *previousCodeSequence = 0;
                                                              const TokenSequence *codeSequence = 0;

                                                              const wchar_t *matchVariable = k == 0
                                                                                           ? L"code"
                                                                                           : k == 1 && backtrackedCaseId == 0 && (lookahead == 0 || lookahead->getDpi() < 0)
                                                                                           ? token()
                                                                                           : tokenSequence();
                                                              bool first = true;

                                                              OrderedTokenSequenceVector v(ts, __FILE__, __LINE__);
                                                              for (OrderedTokenSequenceVector::const_iterator i = v.begin(); ; )
                                                              {
                                                                const wchar_t *matchCode;
                                                                bool forBacktrack = false;
                                                                if (backtrackedCaseId)
                                                                {
                                                                  matchCode = format.toString<wchar_t>(- backtrackedCaseId);
                                                                  forBacktrack = true;
                                                                  backtrackedCaseId = 0;
                                                                }
                                                                else if (lookahead && lookahead->getDpi() >= 0 && i != v.end())
                                                                {
                                                                  matchCode = format.toString<wchar_t>(caseId);
                                                                  i = v.end();
                                                                }
                                                                else if (! (i != v.end()))
                                                                {
                                                                  break;
                                                                }
                                                                else
                                                                {
                                                                  codeSequence = &*i;
                                                                  ++i;
                                                                  matchCode = ! unlimitedLookahead
                                                                            ? format.toString<wchar_t>(CompressedTokenSet::uniqueSequenceCode(grammar->tokenSequenceFactory, *codeSequence, grammar->externalTokenCode))
                                                                            : lookahead
                                                                            ? format.toString<wchar_t>(lookahead->localSequenceCode(grammar->tokenSequenceFactory, *codeSequence, grammar->externalTokenCode))
                                                                            : format.toString<wchar_t>(grammar->externalTokenCode[codeSequence->first()]);
                                                                }

                                                                switch (matchType)
                                                                {
                                                                case IF:
                                                                case IFNOT:
                                                                  if (! first)
                                                                  {
                                                                    if (isGo() || isPython())
                                                                    {
                                                                      lineBuffer.append(connector, wcslen(connector) - 1);
                                                                    }
                                                                    if (previousCodeSequence)
                                                                    {
                                                                      lineBuffer += L" ";
                                                                      printCodeSequenceAnnotation(*previousCodeSequence);
                                                                    }
                                                                    else
                                                                    {
                                                                      print(lineBuffer.c_str());
                                                                    }

                                                                    if (isGo() || isPython())
                                                                    {
                                                                      lineBuffer.assign(prefixSize, L' ');
                                                                    }
                                                                    else
                                                                    {
                                                                      if (prefixSize < 4)
                                                                      {
                                                                        internalerr();
                                                                      }
                                                                      lineBuffer.assign(prefixSize - 4, L' ');
                                                                      lineBuffer += connector;
                                                                    }
                                                                  }
~
~                                                                 if (k) lineBuffer += thiz();
                                                                  lineBuffer += matchVariable;
                                                                  lineBuffer += comparison;
                                                                  lineBuffer += matchCode;
                                                                  break;

                                                                case CASE:
~
~                                                                 lineBuffer.clear();
                                                                  if (isScala())
                                                                  {
                                                                    lineBuffer += first ? L"case " : L"   | ";
                                                                    lineBuffer += matchCode;
                                                                    lineBuffer += i == v.end() ? L" =>" : L"";
                                                                  }
                                                                  else if (isHaxe())
                                                                  {
                                                                    lineBuffer += first ? L"case " : L"   | ";
                                                                    lineBuffer += forBacktrack && i != v.end() ? L"(" : L"";
                                                                    lineBuffer += matchCode;
                                                                    lineBuffer += forBacktrack && i != v.end() ? L")" : L"";
                                                                    lineBuffer += i == v.end() ? L":" : L"";
                                                                  }
                                                                  else if (isGo())
                                                                  {
                                                                    lineBuffer += first ? L"case " : L"     ";
                                                                    lineBuffer += matchCode;
                                                                    lineBuffer += i == v.end() ? L":" : L",";
                                                                  }
                                                                  else if (isPython())
                                                                  {
                                                                    if (first)
                                                                    {
                                                                      lineBuffer += caseId == 1 ? L"if " : L"elif ";
                                                                      if (multipleMatchCodes)
                                                                      {
                                                                        lineBuffer += L"(";
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      lineBuffer += caseId == 1 ? L"   " : L"     ";
                                                                      if (multipleMatchCodes)
                                                                      {
                                                                        lineBuffer += L" ";
                                                                      }
                                                                    }
                                                                    lineBuffer += L"self.";
                                                                    lineBuffer += matchVariable;
                                                                    lineBuffer += L" == ";
                                                                    lineBuffer += matchCode;
                                                                    if (i == v.end())
                                                                    {
                                                                      if (multipleMatchCodes)
                                                                      {
                                                                        lineBuffer += L"):";
                                                                      }
                                                                      else
                                                                      {
                                                                        lineBuffer += L":";
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      lineBuffer += L" or ";
                                                                    }
                                                                  }
                                                                  else // not Scala, not Haxe, not Go, not Python
                                                                  {
                                                                    lineBuffer += L"case ";
                                                                    lineBuffer += matchCode;
                                                                    lineBuffer += L":";
                                                                  }
                                                                  if (codeSequence)
                                                                  {
                                                                    lineBuffer += L" ";
                                                                    printCodeSequenceAnnotation(*codeSequence);
                                                                  }
                                                                  else
                                                                  {
                                                                    print(lineBuffer.c_str());
                                                                  }
                                                                  break;

                                                                default:
                                                                  internalerr();
                                                                  break;
                                                                }
                                                                previousCodeSequence = codeSequence;
                                                                first = false;
                                                              }

                                                              if (! first && *prefix)
                                                              {
                                                                if (trying && needParenthesis)
                                                                {
                                                                  lineBuffer += L")";
                                                                }
                                                                if (isPython() && multipleMatchCodes)
                                                                {
                                                                  lineBuffer += L")";
                                                                }
                                                                lineBuffer += ifRightParen();
                                                                lineBuffer += wcsstr(leftBrace(), L"\n") ? L"" : leftBrace();

                                                                if (previousCodeSequence)
                                                                {
                                                                  lineBuffer += L" ";
                                                                  printCodeSequenceAnnotation(*previousCodeSequence);
                                                                }
                                                                else
                                                                {
                                                                  print(lineBuffer.c_str());
                                                                }
                                                                print(wcsstr(leftBrace(), L"\n") ? leftBrace() : L"");
                                                              }
                                                            }

                                                            void PrintCLike::printConsume(Token::Code code)
                                                            {
                                                              Trace("PrintCLike::printConsume");
~
~                                                             lineBuffer.clear();
                                                              lineBuffer += thiz();
                                                              lineBuffer += L"consume";
                                                              if ((tree || hasBacktracking) && methodPrefix == methodPrefixTry)
                                                              {
                                                                lineBuffer += L"T";
                                                                consumeMethods = 2;
                                                              }
                                                              lineBuffer += L"(";
                                                              lineBuffer += format.toString<wchar_t>(grammar->externalTokenCode[code]);
                                                              lineBuffer += L")";
                                                              lineBuffer += semicolon();
                                                              lineBuffer += L" ";
                                                              printCodeSequenceAnnotation(grammar->tokenSequence(code));
                                                            }

                                                            void PrintCLike::visitNodeList(Node *firstNode)
                                                            {
                                                              Trace("PrintCLike::visitNodeList");

                                                              if (firstNode)
                                                              {
                                                                bool doIndent = firstNode->getParent()
                                                                             && firstNode->getParent() != grammar
                                                                             && ! firstNode->getParent()->isSequence();
                                                                if (doIndent)
                                                                {
                                                                  increaseIndent();
                                                                }
                                                                for (Node *node = firstNode; node; node = node->followingSibling)
                                                                {
                                                                  node->accept(*this);
                                                                }
                                                                if (doIndent) decreaseIndent();
                                                              }
                                                            }

                                                            void PrintCLike::visitOptional(Optional *node)
                                                            {
                                                              Trace("PrintCLike::visitOptional");

                                                              printLookahead(node->k, *grammar->epsilon, 1, node->getLookahead(), node->findsLookahead);
                                                              printASICall(node);
                                                              printBacktracking(node,
                                                                                node->getLookahead(),
                                                                                node->conflictCaseId,
                                                                                node->conflictId,
                                                                                node->firstElementChild);

                                                              MatchType matchType;
                                                              const TokenSequenceSet &match = node->firstElementChild->getMatch(matchType);
                                                              printMatch(node->getLookahead(),
                                                                         node->k,
                                                                         node->conflicts(node->k) == 0 ? 0 : matchType == IF ? 1 : 2,
                                                                         match,
                                                                         matchType,
                                                                         false,
                                                                         1,
                                                                         L"if");
                                                              Visitor::visitNodeWithChildren(node);
                                                              print(rightBrace());
                                                            }

                                                            void PrintCLike::visitZeroOrMore(ZeroOrMore *node)
                                                            {
                                                              Trace("PrintCLike::visitZeroOrMore");

                                                              if (isScala() || isHaxe())
                                                              {
                                                                if (node->loopId == 0)
                                                                  node->loopId = ++loopId;
~
var c~                                                          print(format.toString<wchar_t>(node->loopId));
     ~ = true~                                                  print(semicolon());
~
while (c~                                                       print(format.toString<wchar_t>(node->loopId));
                                                                if (hasBacktracking && grammar->noThrow)
                                                                {
        ~ && ~                                                    print(thiz());
             ~viable~                                           }
        ~)~                                                   }
                                                              else if (isGo())
                                                              {
~
for~                                                            if (hasBacktracking && grammar->noThrow)
                                                                {
   ~ this.viable~                                               }
                                                              }
                                                              else if (isPython())
                                                              {
~
while ~                                                         if (hasBacktracking && grammar->noThrow)
                                                                {
      ~self.viable~                                             }
                                                                else
                                                                {
      ~True~                                                    }
           ~:~                                                }
                                                              else if (hasBacktracking && grammar->noThrow)
                                                              {
~
while (~                                                        print(thiz());
       ~viable)~                                              }
                                                              else
                                                              {
~
for (;;)~                                                     }
                                                              print(leftBrace());
                                                              increaseIndent();

                                                              printLookahead(node->k, *grammar->epsilon, 1, node->getLookahead(), node->findsLookahead);
                                                              printASICall(node);
                                                              printBacktracking(node,
                                                                                node->getLookahead(),
                                                                                node->conflictCaseId,
                                                                                node->conflictId,
                                                                                node->firstElementChild);

                                                              MatchType matchType;
                                                              const TokenSequenceSet &match = node->firstElementChild->getMatch(matchType);
                                                              int backtrackedCaseId = node->conflicts(node->k) == 0 ? 0 : matchType == IF ? 1 : 2;
                                                              const wchar_t *prefix = L"if";
                                                              if (backtrackedCaseId && isScala())
                                                              {
~
if (lk == -3) {
}~                                                              prefix = L"else if";
                                                              }
                                                              printMatch(node->getLookahead(),
                                                                         node->k,
                                                                         backtrackedCaseId,
                                                                         match,
                                                                         matchType,
                                                                         true,
                                                                         1,
                                                                         prefix);
                                                              if (isScala())
                                                              {
~
  c~                                                            print(format.toString<wchar_t>(node->loopId));
   ~ = false
}
else {~                                                         increaseIndent();
                                                              }
                                                              else
                                                              {
~
  break~                                                        print(semicolon());
                                                                print(rightBrace());
                                                              }
                                                              decreaseIndent();
                                                              Visitor::visitNodeWithChildren(node);
                                                              if (isScala())
                                                              {
~
}~                                                              decreaseIndent();
                                                              }
                                                              print(rightBrace());
                                                            }

                                                            void PrintCLike::visitOneOrMore(OneOrMore *node)
                                                            {
                                                              Trace("PrintCLike::visitOneOrMore");

                                                              bool nestedTry = methodPrefix == methodPrefixTry
                                                                            && node->conflicts(node->k);
                                                              if (nestedTry)
                                                              {
                                                                decreaseIndent();
                                                                Visitor::visitNodeWithChildren(node);
                                                                increaseIndent();
                                                              }
                                                              if (isScala() || isHaxe())
                                                              {
                                                                if (node->loopId == 0)
                                                                  node->loopId = ++loopId;
~
var c~                                                          print(format.toString<wchar_t>(node->loopId));
     ~ = true~                                                  print(semicolon());
~
while (c~                                                       print(format.toString<wchar_t>(node->loopId));
                                                                if (hasBacktracking && grammar->noThrow)
                                                                {
        ~ && ~                                                    print(thiz());
             ~viable~                                           }
        ~)~                                                   }
                                                              else if (isGo())
                                                              {
~
for~                                                            if (hasBacktracking && grammar->noThrow)
                                                                {
   ~ this.viable~                                               }
                                                              }
                                                              else if (hasBacktracking && grammar->noThrow)
                                                              {
~
while ~                                                         print(ifLeftParen());
                                                                print(thiz());
      ~viable~                                                  print(ifRightParen());
                                                              }
                                                              else if (isPython())
                                                              {
~
while True:~                                                  }
                                                              else
                                                              {
~
for (;;)~                                                     }
                                                              print(leftBrace());
                                                              if (! nestedTry)
                                                              {
                                                                Visitor::visitNodeWithChildren(node);
                                                              }

                                                              increaseIndent();
                                                              printLookahead(node->k, *grammar->epsilon, 1, node->getLookahead(), node->findsLookahead);
                                                              printASICall(node);
                                                              printBacktracking(node,
                                                                                node->getLookahead(),
                                                                                node->conflictCaseId,
                                                                                node->conflictId,
                                                                                node->firstElementChild);

                                                              MatchType matchType;
                                                              const TokenSequenceSet &match = node->firstElementChild->getMatch(matchType);
                                                              int backtrackedCaseId = node->conflicts(node->k) == 0 ? 0 : matchType == IF ? 1 : 2;
                                                              const wchar_t *prefix = L"if";
                                                              if (backtrackedCaseId && isScala())
                                                              {
~
if (lk == -3) {
}~                                                              prefix = L"else if";
                                                              }
                                                              printMatch(node->getLookahead(),
                                                                         node->k,
                                                                         backtrackedCaseId,
                                                                         match,
                                                                         matchType,
                                                                         true,
                                                                         1,
                                                                         prefix);
                                                              if (! isScala())
                                                              {
~
  break~                                                        print(semicolon());
                                                              }
                                                              else
                                                              {
~
  c~                                                            print(format.toString<wchar_t>(node->loopId));
   ~ = false~
                                                              }
                                                              print(rightBrace());
                                                              if (nestedTry)
                                                              {
                                                                if (isScala())
                                                                {
~
else {~                                                         }
                                                                decreaseIndent();
                                                                Visitor::visitNodeWithChildren(node);
                                                                increaseIndent();

                                                                if (isScala())
                                                                {
~
}~                                                              }
                                                              }
                                                              decreaseIndent();
                                                              print(rightBrace());
                                                            }

                                                            void PrintCLike::printCase(const CompressedTokenSet *lookahead, size_t k, Node *c, int backtrackedCaseId)
                                                            {
                                                              Trace("PrintCLike::printCase");

                                                              Node *e = c->element();
                                                              MatchType matchType;
                                                              const TokenSequenceSet &match = e->getMatch(matchType);

                                                              size_t s = 0;

                                                              if (matchType == DEFAULT)
                                                              {
                                                                if (isScala())
                                                                {
~
case _ =>~                                                      }
                                                                else if (! isPython())
                                                                {
~
default:~                                                       }
                                                                s = size();
                                                                if (   hasBacktracking
                                                                    && grammar->noThrow
                                                                    && c->getParent()->conflicts(k))
                                                                {
                                                                  increaseIndent();
~
if ~                                                              print(ifLeftParen());
                                                                  print(thiz());
   ~viable~                                                       print(ifRightParen());
                                                                  print(leftBrace());
                                                                }
                                                              }
                                                              else
                                                              {
                                                                if (match.empty() && backtrackedCaseId == 0)
                                                                  return;
                                                                printMatch(lookahead,
                                                                           k,
                                                                           backtrackedCaseId,
                                                                           match,
                                                                           matchType,
                                                                           false,
                                                                           e->caseId,
                                                                           L"");
                                                              }
                                                              increaseIndent();
                                                              if (c->hasActiveProcessingInstruction())
                                                              {
                                                                if (*leftBrace() != 0 && *leftBrace() != L'\n')
                                                                {
                                                                  print(L"\n");
                                                                  print(leftBrace() + (*leftBrace() == L' ' ? 1 : 0));
                                                                }
                                                                else
                                                                {
                                                                  print(leftBrace());
                                                                }
                                                                if (! isPython())
                                                                  increaseIndent();

                                                                c->accept(*this);

                                                                if (! isPython())
                                                                  decreaseIndent();
                                                                print(rightBrace());
                                                              }
                                                              else
                                                              {
                                                                size_t s = size();
                                                                c->accept(*this);
                                                                if (isPython() && s == size())
                                                                {
~
pass~                                                           }
                                                              }
                                                              decreaseIndent();
                                                              if (matchType == DEFAULT
                                                               && hasBacktracking
                                                               && grammar->noThrow
                                                               && c->getParent()->conflicts(k))
                                                              {
                                                                decreaseIndent(2);
                                                                print(rightBrace());
                                                                increaseIndent();
                                                              }
                                                              if (   ((matchType != DEFAULT || s == size()) && ! isScala() && ! isHaxe() && ! isGo() && ! isPython())
                                                                  || isCpp()
                                                                  || isCSharp())
                                                              {
~
  break~                                                        print(semicolon());
                                                              }
                                                              if (isPython() && s == size())
                                                              {
                                                                unprint(column() + 1);
                                                              }
                                                            }

                                                            int PrintCLike::nestedConflictLevel(Node *node)
                                                            {
                                                              Trace("PrintCLike::nestedConflictLevel");

                                                              int level = 0;
                                                              for (node = node->getParent(); node; node = node->getParent())
                                                              {
                                                                if (node->k > 0 && node->conflicts(node->k))
                                                                {
                                                                  ++level;
                                                                }
                                                              }
                                                              return level;
                                                            }

                                                            void PrintCLike::saveContext(int ncl)
                                                            {
                                                              Trace("PrintCLike::saveContext");
~
~                                                             print(intVal());
~b0~                                                          print(L'A' + ncl);
                                                              print(assign());
                                                              print(thiz());
   ~b0; ~
                                                              print(intVal());
        ~e0~                                                  print(L'A' + ncl);
                                                              print(assign());
                                                              print(thiz());
           ~e0~                                               for (size_t k = 1; k <= grammar->k; ++k)
                                                              {
              ~; ~                                              print(intVal());
                 ~l~                                            print(format.toString<wchar_t>(k));
                                                                print(L'A' + ncl);
                                                                print(assign());
                                                                print(thiz());
                   ~l~                                          print(format.toString<wchar_t>(k));
                                                                print(semicolon());
                     ~
~                                                               print(intVal());
~b~                                                             print(format.toString<wchar_t>(k));
                                                                print(L'A' + ncl);
                                                                print(assign());
                                                                print(thiz());
  ~b~                                                           print(format.toString<wchar_t>(k));
    ~; ~                                                        print(intVal());
       ~e~                                                      print(format.toString<wchar_t>(k));
                                                                print(L'A' + ncl);
                                                                print(assign());
                                                                print(thiz());
         ~e~                                                    print(format.toString<wchar_t>(k));
                                                              }
                                                              print(semicolon());
                                                            }

                                                            void PrintCLike::restoreContext(int ncl)
                                                            {
                                                              Trace("PrintCLike::restoreContext");
~
~                                                             print(thiz());
~b0 = b0~                                                     print(L'A' + ncl);
       ~; ~                                                   print(thiz());
          ~e0 = e0~                                           print(L'A' + ncl);
                  ~;~                                         for (size_t k = 1; k <= grammar->k; ++k)
                                                              {
                    ~ ~                                         print(thiz());
                      ~l~                                       print(format.toString<wchar_t>(k));
                        ~ = l~                                  print(format.toString<wchar_t>(k));
                                                                print(L'A' + ncl);
                                                                if (isPython())
                                                                {
                             ~
~                                                               }
                                                                else
                                                                {
                             ~; ~                               }
                                ~if ~                           print(ifLeftParen());
                                                                print(thiz());
                                    ~l~                         print(format.toString<wchar_t>(k));
                                      ~ == 0~                   print(ifRightParen());
                                                                if (isPython())
                                                                {
                                                                  increaseIndent();
                                            ~
~                                                               }
                                                                else
                                                                {
                                            ~ {~                }
                                                                print(thiz());
                                                ~end = e~       print(format.toString<wchar_t>(k - 1));
                                                                print(L'A' + ncl);
                                                                print(semicolon());
                                                                if (isPython())
                                                                {
                                                                  decreaseIndent();
                                                        ~
else:~                                                            increaseIndent();
                                                                }
                                                                else
                                                                {
                                                   ~} else {~   }
                                                            ~
~                                                               print(thiz());
~b~                                                             print(format.toString<wchar_t>(k));
  ~ = b~                                                        print(format.toString<wchar_t>(k));
                                                                print(L'A' + ncl);
       ~; ~                                                     print(thiz());
          ~e~                                                   print(format.toString<wchar_t>(k));
            ~ = e~                                              print(format.toString<wchar_t>(k));
                                                                print(L'A' + ncl);
                 ~;~                                          }
                   ~ ~                                        print(thiz());
                     ~end = e~                                print(format.toString<wchar_t>(grammar->k));
                                                              print(L'A' + ncl);
                                                              print(semicolon());
                             ~ ~                              for (size_t k = 1; k <= grammar->k; ++k)
                                                              {
                                                                if (isPython())
                                                                {
                                                                  decreaseIndent();
                                                                }
                                                                else
                                                                {
                               ~}~                              }
                                                              }
                                                              if (grammar->noThrow)
                                                              {
~
~                                                               print(thiz());
~viable = ~                                                     if (isPython())
                                                                {
          ~T~                                                   }
                                                                else
                                                                {
          ~t~                                                   }
            ~rue~                                               print(semicolon());
                                                              }
                                                            }

                                                            void PrintCLike::printBacktracking(Node *node,
                                                                                               const CompressedTokenSet *lookahead,
                                                                                               int conflictCaseId,
                                                                                               int conflictId,
                                                                                               Node *predicate)
                                                            {
                                                              Trace("PrintCLike::printBacktracking");

                                                              if (node->conflicts(node->k))
                                                              {
                                                                NodeList cases(false);
                                                                cases.push_back(predicate);
                                                                cases.push_back(predicate);
                                                                printBacktracking(node,
                                                                                  lookahead,
                                                                                  conflictCaseId,
                                                                                  conflictId,
                                                                                  cases);

                                                              }
                                                            }

                                                            void PrintCLike::printBacktracking(Node *node,
                                                                                               const CompressedTokenSet *lookahead,
                                                                                               int conflictCaseId,
                                                                                               int conflictId,
                                                                                               const NodeList &cases)
                                                            {
                                                              Trace("PrintCLike::printBacktracking");

                                                              if (node->conflicts(node->k))
                                                              {
                                                                // printf("grammar->k %d node->k %d\n", grammar->k, node->k);

                                                                MatchType conflictMatchType;
                                                                const TokenSequenceSet &conflictMatch = node->getConflictMatch(conflictMatchType);
                                                                if (! conflictMatch.empty())
                                                                {
                                                                  if (lookahead && lookahead->getDpi() >= 0 && conflictMatchType == IFNOT)
                                                                  {
                                                                    conflictMatchType = IF;
                                                                    conflictCaseId = 0;
                                                                  }
                                                                  printMatch(lookahead,
                                                                             node->k,
                                                                             0,
                                                                             conflictMatch,
                                                                             conflictMatchType,
                                                                             false,
                                                                             conflictCaseId,
                                                                             L"if");
                                                                  increaseIndent();
                                                                }
                                                                if (memoization)
                                                                {
~
~                                                                 print(thiz());
~lk = ~                                                           print(thiz());
      ~memoized(~                                                 print(format.toString<wchar_t>(conflictId));
                ~, ~                                              print(thiz());
                   ~e0)~                                          print(semicolon());
                       ~
if ~                                                              print(ifLeftParen());
                                                                  print(thiz());
   ~lk == 0~                                                      print(ifRightParen());
                                                                  print(leftBrace());
                                                                  increaseIndent();
                                                                }
                                                                size_t caseId = 0;
                                                                size_t firstConflictCaseId = 0;
                                                                size_t lastConflictCaseId = 0;
                                                                for (NodeList::const_iterator i = cases.begin(); i != cases.end(); ++i)
                                                                {
                                                                  Node *c = *i;
                                                                  ++caseId;
                                                                  if (c->involvedInConflict)
                                                                  {
                                                                    lastConflictCaseId = caseId;
                                                                    if (firstConflictCaseId == 0)
                                                                    {
                                                                      firstConflictCaseId = caseId;
                                                                    }
                                                                  }
                                                                }

                                                                bool nestedTry = methodPrefix == methodPrefixTry;
                                                                int ncl = nestedConflictLevel(node);
                                                                caseId = 0;
                                                                for (NodeList::const_iterator i = cases.begin(); i != cases.end(); ++i)
                                                                {
                                                                  Node *c = *i;
                                                                  ++caseId;
                                                                  if (caseId == lastConflictCaseId)
                                                                  {
                                                                    if (nestedTry)
                                                                    {
                                                                      if (node->isChoice())
                                                                      {
~
~                                                                       print(thiz());
~lk = -~                                                                print(format.toString<wchar_t>(caseId));
                                                                        print(semicolon());
                                                                      }
                                                                      restoreContext(ncl);
                                                                      if (memoization)
                                                                      {
~
~                                                                       print(thiz());
~memoize(~                                                              print(format.toString<wchar_t>(conflictId));
         ~, e0~                                                         print(L'A' + ncl);
              ~, -~                                                     print(format.toString<wchar_t>(caseId));
                  ~)~                                                   print(semicolon());
                                                                      }
                                                                      if (node->isZeroOrMore() || node->isOneOrMore())
                                                                      {
                                                                        if (isScala())
                                                                        {
~
~                                                                         print(thiz());
~lk = -~                                                                  print(format.toString<wchar_t>(caseId));
                                                                        }
                                                                        else
                                                                        {
~
break~                                                                    print(semicolon());
                                                                        }
                                                                      }
                                                                    }
                                                                    else
                                                                    {
~
~                                                                     print(thiz());
~lk = -~                                                              print(format.toString<wchar_t>(caseId));
                                                                      print(semicolon());
                                                                    }
                                                                  }
                                                                  else if (c->involvedInConflict)
                                                                  {
                                                                    if (caseId == firstConflictCaseId)
                                                                    {
                                                                      saveContext(ncl);
                                                                    }
                                                                    if (! grammar->noThrow)
                                                                    {
~
try~                                                                 if (isPython())
                                                                     {
   ~:~                                                               }
                                                                     print(leftBrace());
                                                                     increaseIndent();
                                                                    }
                                                                    if (caseId != firstConflictCaseId)
                                                                    {
                                                                      restoreContext(ncl);
                                                                    }

                                                                    const wchar_t *m = methodPrefix;
                                                                    const wchar_t *v = variant;

                                                                    methodPrefix = methodPrefixTry;

                                                                    const char *flags = getenv("FLAGS");
                                                                    bool hack = flags && strchr(flags, 'H');

                                                                    if (! hack)
                                                                    {
                                                                      variant = L"";
                                                                    }

                                                                    int defaultLk;
                                                                    if (node->isChoice())
                                                                    {
                                                                      c->accept(*this);
                                                                      defaultLk = static_cast<Choice *>(node)->cases.size() + 1;
                                                                    }
                                                                    else
                                                                    {
                                                                      decreaseIndent();
                                                                      visitNodeList(c);
                                                                      increaseIndent();
                                                                      defaultLk = 2;
                                                                    }
                                                                    variant = v;
                                                                    methodPrefix = m;
                                                                    if (grammar->noThrow)
                                                                    {
~
if ~                                                                  print(ifLeftParen());
                                                                      print(thiz());
   ~viable~                                                           print(ifRightParen());
                                                                      print(leftBrace());
                                                                      increaseIndent();
                                                                    }

                                                                    if (nestedTry)
                                                                    {
                                                                      if (memoization)
                                                                      {
~
~                                                                       print(thiz());
~memoize(~                                                              print(format.toString<wchar_t>(conflictId));
         ~, e0~                                                         print(L'A' + ncl);
              ~, -~                                                     print(format.toString<wchar_t>(caseId));
                  ~)~                                                   print(semicolon());
                                                                      }
                                                                      if (node->isChoice())
                                                                      {
~
~                                                                       print(thiz());
~lk = -~                                                                print(format.toString<wchar_t>(defaultLk));
                                                                        print(semicolon());
                                                                      }
                                                                      else if (node->isZeroOrMore() || node->isOneOrMore())
                                                                      {
                                                                        if (isScala())
                                                                        {
~
~                                                                         print(thiz());
~lk = -3~                                                               }
                                                                        else
                                                                        {
~
continue;~                                                              }
                                                                      }
                                                                    }
                                                                    else
                                                                    {
~
~                                                                     print(thiz());
~lk = -~                                                              print(format.toString<wchar_t>(caseId));
                                                                      print(semicolon());
                                                                    }

                                                                    decreaseIndent();
                                                                    if (grammar->noThrow)
                                                                    {
~
~                                                                     print(elseWithBraces());
                                                                    }
                                                                    else
                                                                    {
                                                                      print(rightBrace());
                                                                      if (isPython())
                                                                      {
~
except ~                                                                print(className.c_str());
       ~.ParseException:~                                             }
                                                                      else
                                                                      {
~
catch ~                                                                 if (isScala())
                                                                        {
      ~{
case _: ~                                                                 print(className.c_str());
        ~.ParseException =>~                                            }
                                                                        else
                                                                        {
      ~(~
                                                                          if (! isJavascript() && ! isTypescript() && ! isHaxe())
                                                                          {
       ~ParseException~                                                   }
                                                                          if (! isCSharp() && ! isJavascript() && ! isTypescript() && ! isHaxe())
                                                                          {
                      ~ ~                                                 }
                                                                          if (isJava() || isJavascript() || isTypescript() || isHaxe())
                                                                          {
                                                                            print(L"p");
                                                                            print(format.toString<wchar_t>(caseId));
                                                                            print(L'A' + ncl);
                                                                            if (isHaxe())
                                                                            {
                      ~: ParseException~                                    }
                                                                          }
                                                                          else if (isCpp())
                                                                          {
                      ~&~                                                 }
                      ~)~                                                 print(leftBrace());
                                                                        }
                                                                      }
                                                                    }
                                                                    increaseIndent();
                                                                  }
                                                                }

                                                                caseId = 0;
                                                                for (NodeList::const_iterator i = cases.begin(); i != cases.end(); ++i)
                                                                {
                                                                  Node *c = *i;
                                                                  ++caseId;
                                                                  if (c->involvedInConflict && caseId != lastConflictCaseId)
                                                                  {
                                                                    decreaseIndent();
                                                                    print(rightBrace());
                                                                  }
                                                                }
                                                                if (! nestedTry)
                                                                {
                                                                  restoreContext(ncl);
                                                                  if (memoization)
                                                                  {
~
~                                                                   print(thiz());
~memoize(~                                                          print(format.toString<wchar_t>(conflictId));
         ~, ~                                                       print(thiz());
            ~e0, ~                                                  print(thiz());
                 ~lk)~                                              print(semicolon());
                                                                  }
                                                                }
                                                                else if (node->isOptional())
                                                                {
~
~                                                                 print(thiz());
~lk = -2~                                                         print(semicolon());
                                                                }
                                                                if (memoization)
                                                                {
                                                                  decreaseIndent();
                                                                  print(rightBrace());
                                                                }
                                                                if (! conflictMatch.empty())
                                                                {
                                                                  decreaseIndent();
                                                                  if (! (node->k == 1 && (lookahead == 0 || lookahead->getDpi() < 0)))
                                                                  {
                                                                    print(rightBrace());
                                                                  }
                                                                  else
                                                                  {
~
~                                                                   print(elseWithBraces());
~
  ~                                                                 print(thiz());
  ~lk = ~                                                           print(thiz());
        ~l1~                                                        print(semicolon());
                                                                    print(rightBrace());
                                                                  }
                                                                }
                                                              }
                                                            }

                                                            void PrintCLike::visitChoice(Choice *node)
                                                            {
                                                              Trace("PrintCLike::visitChoice");

                                                              printLookahead(node->k, *grammar->epsilon, 1, node->getLookahead(), node->findsLookahead);
                                                              printASICall(node);
                                                              printBacktracking(node,
                                                                                node->getLookahead(),
                                                                                node->conflictCaseId,
                                                                                node->conflictId,
                                                                                node->cases);
                                                              size_t s = size();
                                                              if (isScala())
                                                              {
                                                                if (node->k == 1 && node->conflicts(node->k) == 0 && node->getLookahead()->getDpi() < 0)
                                                                {
~
l1 match~                                                       }
                                                                else
                                                                {
~
lk match~                                                       }
                                                              }
                                                              else if (! isPython())
                                                              {
~
switch ~                                                        print(ifLeftParen());
                                                                print(thiz());
                                                                if (node->k == 1 && node->conflicts(node->k) == 0 && node->getLookahead()->getDpi() < 0)
                                                                {
                                                                  print(token());
                                                                }
                                                                else
                                                                {
                                                                  print(tokenSequence());
                                                                }
                                                                print(ifRightParen());
                                                              }
                                                              print(leftBrace());

                                                              Node *defaultCase = 0;
                                                              size_t caseId = 0;
                                                              for (NodeList::iterator i = node->cases.begin(); i != node->cases.end(); ++i)
                                                              {
                                                                Node *c = *i;
                                                                ++caseId;
                                                                MatchType matchType;
                                                                c->getMatch(matchType);
                                                                if (matchType == DEFAULT)
                                                                {
                                                                  defaultCase = c;
                                                                }
                                                                else
                                                                {
                                                                  int backtrackedCaseId = c->involvedInConflict ? caseId : 0;
                                                                  printCase(node->getLookahead(), node->k, c, backtrackedCaseId);
                                                                }
                                                              }
                                                              bool nestedTry = node->conflicts(node->k)
                                                                            && methodPrefix == methodPrefixTry;
                                                              if (nestedTry)
                                                              {
                                                                if (isPython())
                                                                {
~
elif self.~                                                       if (node->k == 1 && node->conflicts(node->k) == 0 && node->getLookahead()->getDpi() < 0)
                                                                  {
                                                                    print(token());
                                                                  }
                                                                  else
                                                                  {
                                                                    print(tokenSequence());
                                                                  }
          ~ == -~                                                 print(format.toString<wchar_t>(node->cases.size() + 1));
                ~:
  pass~                                                         }
                                                                else
                                                                {
~
case -~                                                           print(format.toString<wchar_t>(node->cases.size() + 1));
                                                                  if (isScala())
                                                                  {
      ~ =>~
                                                                  }
                                                                  else if (isHaxe())
                                                                  {
      ~:~
                                                                  }
                                                                  else
                                                                  {
      ~:~                                                           if (! isGo())
                                                                    {
~
  break~                                                              print(semicolon());
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                              if (! isPython())
                                                              {
                                                                printCase(node->getLookahead(), node->k, defaultCase, 0);
                                                                print(rightBrace());
                                                              }
                                                              else if (s != size())
                                                              {
~
else:~                                                          printCase(node->getLookahead(), node->k, defaultCase, 0);
                                                              }
                                                              else
                                                              {
                                                                decreaseIndent();
                                                                printCase(node->getLookahead(), node->k, defaultCase, 0);
                                                                increaseIndent();
                                                              }
                                                            }

                                                            void PrintCLike::visitProduction(Production *node)
                                                            {
                                                              Trace("PrintCLike::visitProduction");

                                                              if (! isGo())
                                                                increaseIndent();
                                                              loopId = 0;
                                                              WString functionName(methodPrefix);
                                                              functionName.append(Format::acceptableName<WString>(node->name));
                                                              if (isGo() && node->isStartSymbol())
                                                              {
~
func (this *~                                                   print(className.c_str());
            ~) ~                                                functionName[0] = towupper(functionName[0]);
                                                                print(functionName.c_str());
               ~() (pe *ParseError) {
  defer func() {
    r := recover()
    if r != nil {
      e, isParseError := r.(*ParseError)
      if isParseError {
        pe = e
      }
    }
  }()
~                                                             }
                                                              else
                                                              {
                                                                openMethod(voidType(), L"", functionName.c_str(), L"");
                                                                print(leftBrace());
                                                              }
                                                              if (isLrParser)
                                                              {
                                                                if (! useGlr)
                                                                {
~
  ~                                                               print(thiz());
  ~top = -1~                                                      print(semicolon());
                                                                }
~
  ~                                                             if (useGlr && ! isCpp())
                                                                {
                                                                  print(thiz());
  ~thread = ~                                                   }
                                                                print(thiz());
  ~parse(~                                                      print(format.toString<wchar_t>(node->nonterminalCode));
         ~, ~                                                   print(format.toString<wchar_t>((*grammar->states)[node->state]->getStateId()));
                                                                if (tree)
                                                                {
         ~, ~                                                     print(thiz());
            ~eventHandler~                                      }
                                                                if (useGlr)
                                                                {
         ~, ~                                                     print(thiz());
            ~thread~                                            }
         ~)~                                                    print(semicolon());
                                                              }
                                                              else
                                                              {
                                                                if (trace)
                                                                {
~
  ~                                                               print(thiz());
  ~traceNonterminal(~                                             print(stringIntroducer());
                    ~"~                                           print(methodPrefix, wcslen(methodPrefix) - 1);
                      ~", ~                                       print(stringIntroducer());
                         ~"start", ~                              print(stringIntroducer());
                                   ~"~                            print(node->name);
                                     ~")~                         print(semicolon());
                                                                }
                                                                if (tree && methodPrefix != methodPrefixTry)
                                                                {
~
  ~                                                               print(thiz());
  ~eventHandler~                                                  print(arrow());
                                                                  if (isGo())
                                                                  {
  ~S~                                                             }
                                                                  else
                                                                  {
  ~s~                                                             }
    ~tartNonterminal(~                                            print(stringIntroducer());
                     ~"~                                          print(node->name);
                       ~", ~                                      print(thiz());
                           ~e0)~                                  print(semicolon());
                                                                }
                                                                visitNodeList(node->firstChild);

                                                                if (tree && methodPrefix != methodPrefixTry)
                                                                {
~
  ~                                                               print(thiz());
  ~eventHandler~                                                  print(arrow());
                                                                  if (isGo())
                                                                  {
  ~E~                                                             }
                                                                  else
                                                                  {
  ~e~                                                             }
    ~ndNonterminal(~                                              print(stringIntroducer());
                   ~"~                                            print(node->name);
                     ~", ~                                        print(thiz());
                         ~e0)~                                    print(semicolon());
                                                                }
                                                                if (trace)
                                                                {
~
  ~                                                               print(thiz());
  ~traceNonterminal(~                                             print(stringIntroducer());
                    ~"~                                           print(methodPrefix, wcslen(methodPrefix) - 1);
                      ~", ~                                       print(stringIntroducer());
                         ~"end", ~                                print(stringIntroducer());
                                 ~"~                              print(node->name);
                                   ~")~                           print(semicolon());
                                                                }
                                                              }
                                                              if (node->isStartSymbol())
                                                              {
                                                                printFlush(1);
                                                              }
                                                              if (isGo() && node->isStartSymbol())
                                                              {
~
  return nil~                                                 }
                                                              print(rightBrace());
                                                              if ((isJavascript()  && ! isTypescript()) && node->isStartSymbol())
                                                              {
   ~;~                                                        }
     ~
~                                                             if (! isGo())
                                                                decreaseIndent();
                                                            }

                                                            void PrintCLike::visitRef(Ref *node)
                                                            {
                                                              Trace("PrintCLike::visitRef");

                                                              printLookahead(1, *grammar->epsilon, 1, node->getLookahead(), node->findsLookahead);
                                                              printASICall(node);
                                                              if (node->lexical)
                                                              {
                                                                printConsume(node->lexical->tokenCode);
                                                              }
                                                              else
                                                              {
                                                                if (   node->whitespaceAllowance == IMPLICIT
                                                                    && methodPrefix != methodPrefixTry
                                                                    && tree)
                                                                {
~
~                                                                 print(thiz());
~whitespace~                                                      if (! isScala())
                                                                  {
          ~()~                                                    }
                                                                  print(semicolon());
                                                                }
                                                                if (   hasBacktracking
                                                                    && grammar->noThrow
                                                                    && methodPrefix == methodPrefixTry)
                                                                {
~
if ~                                                              print(ifLeftParen());
                                                                  print(thiz());
   ~viable~                                                       print(ifRightParen());
                                                                  print(leftBrace());
                                                                  increaseIndent();
                                                                }
~
~                                                               if (isJavascript()
                                                                 && methodPrefix != methodPrefixTry
                                                                 && node->nonTerminal->isStartSymbol())
                                                                {
                                                                  print(L"thisParser.");
                                                                }
                                                                else
                                                                {
                                                                  print(thiz());
                                                                }
                                                                if (isGo() && node->nonTerminal->isStartSymbol())
                                                                {
                                                                  print(towupper(methodPrefix[0]));
                                                                }
                                                                else
                                                                {
                                                                  print(methodPrefix[0]);
                                                                }
                                                                print(methodPrefix + 1);
                                                                print(Format::acceptableName<WString>(node->name).c_str());
                                                                if (! isScala())
                                                                {
          ~()~                                                  }
                                                                print(semicolon());
                                                                if (   hasBacktracking
                                                                    && grammar->noThrow
                                                                    && methodPrefix == methodPrefixTry)
                                                                {
                                                                  decreaseIndent();
                                                                  print(rightBrace());
                                                                }
                                                              }
                                                            }

                                                            void PrintCLike::visitString(String *node)
                                                            {
                                                              Trace("PrintCLike::visitString");

                                                              printLookahead(1, *grammar->epsilon, 1, node->getLookahead(), node->findsLookahead);
                                                              printASICall(node);
                                                              printConsume(node->lexical->tokenCode);
                                                            }

                                                            void PrintCLike::visitProcessingInstruction(ProcessingInstruction *node)
                                                            {
                                                              Trace("PrintCLike::visitProcessingInstruction");

                                                              if (variant != 0 && wcscmp(node->target, variant) == 0)
                                                              {
~
~
                                                                int spaces = isPython() ? 0 : Math::max(0, static_cast<int>(piIndent) - getIndent());
                                                                print(spaces, L" ");
                                                                print(lineCommentPrefix());
~line ~                                                         print(format.toString<wchar_t>(node->line));
      ~ "~                                                      print(node->fileName);
         ~"
~                                                               print(spaces, L" ");
                                                                wchar_t *reIndented = format.reIndent(node->content, spaces);
                                                                print(reIndented);
~
~                                                               free(reIndented);
                                                                print(spaces, L" ");
                                                                print(lineCommentPrefix());
~line ~                                                         print(format.toString<wchar_t>(lineNo + 1));
      ~ "~                                                      print(wFileName.c_str());
         ~"~                                                  }
                                                            }

                                                            void PrintCLike::printProlog()
                                                            {
                                                              Trace("PrintCLike::printProlog");

                                                              if (! isGo())
                                                                increaseIndent();
                                                              if (isJavascript())
                                                              {
~
function init(source~                                           if (noLexer)
                                                                {
                    ~, l~                                       }
                                                                if (tree)
                                                                {
                    ~, parsingEventHandler~                     }
                    ~)~                                       }
                                                              else
                                                              {
                                                                WString args(isJava() ? L"CharSequence " : isTypescript() ? L"string " : stringType());
                                                                args += L"source";
                                                                if (noLexer) args += L", Lexer l";
                                                                if (tree)
                                                                {
                                                                  args += L", ";
                                                                  if (isScala()) args += staticPrefix();
                                                                  args += isLrParser
                                                                        ? L"BottomUpEventHandler "
                                                                        : isTypescript()
                                                                        ? L"ParsingEventHandler "
                                                                        : L"EventHandler ";
                                                                  if (isCpp()) args += L"*";
                                                                  args += L"parsingEventHandler";
                                                                }
                                                                openMethod(voidType(), L"", L"initialize", args.c_str());
                                                              }
                                                              print(leftBrace());
                                                              if (tree)
                                                              {
~
  ~                                                             print(thiz());
  ~eventHandler = parsingEventHandler~                          print(semicolon());
                                                              }
~
  ~                                                           print(thiz());
  ~input = ~                                                  if (isHaxe())
                                                              {
           ~Bytes.ofString(source)~                           }
                                                              else
                                                              {
           ~source~                                           }
                                                              print(semicolon());
                                                              if (noLexer)
                                                              {
~
  ~                                                             print(thiz());
  ~lexer = l~                                                   print(semicolon());
~
  ~                                                             print(thiz());
  ~lexer.reset(input)~                                          print(semicolon());
                                                              }
                                                              else if (isGo() || isPython())
                                                              {
~
  ~                                                             print(thiz());
  ~size = len(source)~                                        }
                                                              else if (! isCpp())
                                                              {
~
  ~                                                             print(thiz());
  ~size = source.~                                              print(isCSharp() ? L"L" : L"l");
                 ~ength~                                        if (! isJavascript() && ! isTypescript() && ! isScala() && ! isHaxe() && ! isCSharp())
                                                                {
                       ~()~                                     }
                                                                print(semicolon());
                                                              }
                                                              if (! interfaceName.empty() && useGlr)
                                                              {
~
  ~                                                             print(thiz());
                                                                print(isGo() ? L"R" : L"r");
  ~eset()~                                                      print(semicolon());
                                                                print(rightBrace());
~
~                                                               openMethod(voidType(), L"", L"reset", L"");
                                                                print(leftBrace());
                                                              }
                                                              if (isLrParser && ! useGlr)
                                                              {
                                                                if (isPython())
                                                                {
~
  self.iStack = [0 for _ in range(192)]~                        }
                                                                else if (isGo())
                                                                {
~
  this.iStack = make([]int, 192)
  this.top = -1~                                                }
                                                              }
                                                              if (useGlr)
                                                              {
~
  ~                                                             print(thiz());
  ~maxId = 0~                                                   print(semicolon());
~
  ~                                                             print(thiz());
  ~thread = ~                                                   if (isScala())
                                                                {
            ~new ~                                                print(className.c_str());
                 ~.ParsingThread~                               }
                                                                else if (isPython())
                                                                {
                                                                  print(className.c_str());
            ~.ParsingThread()~                                  }
                                                                else if (isGo())
                                                                {
            ~new(ParsingThread)~                                }
                                                                else
                                                                {
            ~new ParsingThread()~                                 print(semicolon());
                                                                }
                                                                if (isCSharp() || isCpp() || isHaxe() || isScala() || isTypescript() || isGo() || isPython())
                                                                {
~
  ~                                                               print(thiz());
  ~thread~                                                        print(arrow());
         ~parser = ~                                              if (isPython())
                                                                  {
                   ~self~                                         }
                                                                  else
                                                                  {
                   ~this~                                         }
                                                                  print(semicolon());
                                                                }
~
  ~                                                             print(thiz());
  ~thread~                                                      print(arrow());
                                                              }
                                                              else
                                                              {
~
  ~                                                             print(thiz());
                                                              }
                                                              print(isGo() ? L"R" : L"r");
  ~eset(0, 0, 0)~                                             print(semicolon());
                                                              print(rightBrace());
~
~                                                             if (! isGo())
                                                                decreaseIndent();
                                                              if (! useGlr)
                                                              {
                                                                printInitializer();
                                                              }
                                                              if (! isGo())
                                                                increaseIndent();
                                                              if (isJavascript())
                                                              {
~
this.reset = function(l, b, e)
{
  ~                                                             if (useGlr)
                                                                {
  ~thread.~                                                     }
  ~reset(l, b, e);
};
~                                                               openMethod(L"static ", stringType(), L"getOffendingToken", L"ParseException e");
                                                                print(leftBrace());
~
  var o = e.getOffending();
  return o >= 0 ? ~                                             print(staticPrefix());
                  ~TOKEN[o] : ~                                 print(nullPtr());
                              ~;
};
~                                                             }
                                                              else if (isTypescript())
                                                              {
                                                                if (performanceTest && useGlr)
                                                                {
~
public reset(l: number, b: number, e: number)
{
  this.thread.reset(l, b, e);
}
~                                                               }
~
getOffendingToken(e: ParseException)
{~
~
  var o = e.getOffending();
  return o >= 0 ? Parser.TOKEN[o] : ~                           print(nullPtr());
                                    ~;
}
~                                                             }
                                                              else if (isScala())
                                                              {
                                                              }
                                                              else if (isGo())
                                                              {
~
func GetOffendingToken(e ParseError) string {
  if e.GetOffending() < 0 {
    return ""
  } else {
    return token[e.GetOffending()]
  }
}
~                                                             }
                                                              else if (isPython())
                                                              {
~
@staticmethod
def getOffendingToken(e):
  if e.getOffending() < 0:
    return ""
  else:
    return ~                                                    print(className.c_str());
           ~.TOKEN[e.getOffending()]
~                                                             }
                                                              else
                                                              {
                                                                openMethod(stringType(), L"static ", L"getOffendingToken", L"ParseException e");
                                                                print(leftBrace());
~
  return e.getOffending() < 0 ? ~                               print(nullPtr());
                                ~ : TOKEN[e.getOffending()];~
                                                                print(rightBrace());
~
~                                                             }

                                                              if (isJavascript() || isTypescript() || isHaxe())
                                                              {
                                                                openMethod(L"", L"static ", L"getExpectedTokenSet", L"ParseException e");
                                                                print(leftBrace());
~
  var expected~                                                 if (isTypescript())
                                                                {
              ~: string[]~                                      }
              ~;
  if (e.getExpected() < 0)
  {
    expected = ~                                                print(staticPrefix());
               ~getTokenSet(- e.getState());
  }
  else
  {
    expected = [~                                               print(staticPrefix());
                                                                print(isGo() ? L"token" : L"TOKEN");
                ~[e.getExpected()]];
  }
  return expected;
}~                                                              if (! isTypescript())
                                                                {
   ~;~                                                          }
     ~
~                                                               if (isHaxe())
                                                                {
~
public function getErrorMessage(e: ParseException): String~     }
                                                                else
                                                                {
                                                                  openMethod(stringType(), L"static ", L"getErrorMessage", L"ParseException e");
                                                                }
                                                                print(leftBrace());
~
  var message = e.getMessage();~                                if (useGlr)
                                                                {
                                                                  increaseIndent();
~
if ~                                                              print(ifLeftParen());
   ~e.isAmbiguousInput()~                                         print(ifRightParen());
                                                                  print(leftBrace());
~
  message += "\n"~                                                print(semicolon());
~
~                                                                 print(elseWithBraces());
                                                                }
~
  var found = ~                                                 if (! isHaxe())
                                                                {
                                                                  print(L"this.");
                                                                }
              ~getOffendingToken(e);
  var tokenSet = ~                                              if (! isHaxe())
                                                                {
                                                                  print(L"this.");
                                                                }
                 ~getExpectedTokenSet(e);
  var size = e.getEnd() - e.getBegin();
  message += (found == null ? "" : ", found " + found)
          + "\nwhile expecting "
          + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
          + "\n"
          + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");~
                                                                if (useGlr)
                                                                {
                                                                  decreaseIndent();
~
  }~                                                            }
~
  var prefix = ~                                                print(thiz());
               ~input.~                                         if (isHaxe())
                                                                {
                      ~getS~                                    }
                                                                else
                                                                {
                      ~subs~                                    }
                           ~tring(0, e.getBegin());
  var lines = prefix.split("\n");
  var line = lines.length;
  var column = lines[line - 1].length + 1;
  return message
       + "at line " + line + ", column " + column + ":\n..."
       + ~                                                      print(thiz());
                                                                if (isHaxe())
                                                                {
         ~input.getString(e.getBegin(), input.length < e.getBegin() + 64 ? input.length - e.getBegin() : 64~
                                                                }
                                                                else
                                                                {
         ~input.substring(e.getBegin(), ~
                                        ~Math.min(~               print(thiz());
                                                  ~input.length, e.getBegin() + 64)~
                                                                }
                                        ~)
       + "...";
}~                                                              if (! isTypescript())
                                                                {
   ~;~                                                          }
     ~
~                                                             }
                                                              else if (isJava())
                                                              {
                                                                openMethod(L"String[] ", L"static ", L"getExpectedTokenSet", L"ParseException e");
                                                                print(leftBrace());
~
  String[] expected~                                            if (useGlr)
                                                                {
                   ~ = {}~                                      }
                         ~;
  if (e.getExpected() >= 0)
  {
    expected = new String[]{TOKEN[e.getExpected()]};
  }
  else~                                                         if (useGlr)
                                                                {
      ~ if (! e.isAmbiguousInput())~                            }
~
  {
    expected = getTokenSet(- e.getState());
  }
  return expected;
}

public String getErrorMessage(ParseException e)
{
  String message = e.getMessage();~
                                                                if (useGlr)
                                                                {
~
  if ~                                                            print(ifLeftParen());
     ~e.isAmbiguousInput()~                                       print(ifRightParen());
                                                                  printIndented(1, leftBrace());
~
    message += "\n"~                                              print(semicolon());
~
  ~                                                               printIndented(1, elseWithBraces());
                                                                  increaseIndent();
                                                                }
~
  String[] tokenSet = getExpectedTokenSet(e);
  String found = getOffendingToken(e);
  int size = e.getEnd() - e.getBegin();
  message += (found == null ? "" : ", found " + found)
          + "\nwhile expecting "
          + (tokenSet.length == 1 ? tokenSet[0] : java.util.Arrays.toString(tokenSet))
          + "\n"
          + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");~
                                                                if (useGlr)
                                                                {
                                                                  decreaseIndent();
~
  }~                                                            }
~
  String prefix = input.subSequence(0, e.getBegin()).toString();
  int line = prefix.replaceAll("[^^\n]", "").length() + 1;
  int column = prefix.length() - prefix.lastIndexOf('\n');
  return message
       + "at line " + line + ", column " + column + ":\n..."
       + input.subSequence(e.getBegin(), Math.min(input.length(), e.getBegin() + 64))
       + "...";
}
~                                                               if (! interfaceName.empty())
                                                                {
~
public void parse()
{
  parse_~                                                         print(Format::acceptableName<WString>(grammar->startSymbol()->name).c_str());
        ~();
}
~                                                               }
                                                              }
                                                              else if (isCSharp())
                                                              {
                                                                openMethod(L"static String[] ", L"", L"getExpectedTokenSet", L"ParseException e");
                                                                print(leftBrace());
~
  String[] expected;
  if (e.getExpected() < 0)
  {
    expected = getTokenSet(- e.getState());
  }
  else
  {
    expected = new String[]{TOKEN[e.getExpected()]};
  }
  return expected;
}

public String getErrorMessage(ParseException e)
{
  String message = e.getMessage();~
                                                                if (useGlr)
                                                                {
~
  if (e.isAmbiguousInput())
  {
    message += "\n";
  }
  else
  {~                                                              increaseIndent();
                                                                }
~
  String[] tokenSet = getExpectedTokenSet(e);
  String found = getOffendingToken(e);
  int size = e.getEnd() - e.getBegin();
  message += (found == null ? "" : ", found " + found)
          + "\nwhile expecting "
          + (tokenSet.Length == 1 ? tokenSet[0] : ("[" + String.Join(", ", tokenSet) + "]"))
          + "\n"
          + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");~
                                                                if (useGlr)
                                                                {
                                                                  decreaseIndent();
~
  }~                                                            }
~
  String prefix = input.Substring(0, e.getBegin());
  int line = prefix.Length - prefix.Replace("\n", "").Length + 1;
  int column = prefix.Length - prefix.LastIndexOf('\n');
  return message
       + "at line " + line + ", column " + column + ":\n..."
       + input.Substring(e.getBegin(), Math.Min(input.Length, e.getBegin() + 64) - e.getBegin())
       + "...";
}
~                                                               if (! interfaceName.empty())
                                                                {
~
public void parse()
{
  parse_~                                                         print(Format::acceptableName<WString>(grammar->startSymbol()->name).c_str());
        ~();
}
~                                                               }
                                                              }
                                                              else if (isGo())
                                                              {
~
func GetExpectedTokenSet(e ParseError) []string {
  if e.expected < 0 {
    return getTokenSet(- e.state)
  } else {
    singleton := [...]string {token[e.expected]}
    return singleton[:]
  }
}

func (this *~                                                   print(className.c_str());
            ~) GetErrorMessage(e ParseError) string {
  message := e.Error()~
                                                                if (useGlr)
                                                                {
~
  if e.IsAmbiguousInput() {
    message += "\n"
  } else {~                                                       increaseIndent();
                                                                }
~
  found := GetOffendingToken(e)
  if found != "" {
    message += ", found "
    message += found
  }
  expected := GetExpectedTokenSet(e)
  message += "\nwhile expecting "
  delimiter := ""
  if len(expected) != 1 {
    delimiter = "["
  }
  for _, token := range expected {
    message += delimiter
    message += token
    delimiter = ", "
  }
  if len(expected) != 1 {
    message += "]"
  }
  message += "\n"
  size := e.GetEnd() - e.GetBegin()
  if size != 0 && found == "" {
    message += "after successfully scanning "
    message += strconv.Itoa(size)
    message += " characters beginning "
  }~                                                            if (useGlr)
                                                                {
                                                                  decreaseIndent();
~
  }~                                                            }
~
  line := 1
  column := 1
  for i := 0; i < e.GetBegin(); i++ {
    if this.input[i] == '\n' {
      line++
      column = 1
    } else {
      column++
    }
  }
  message += "at line "
  message += strconv.Itoa(line)
  message += ", column "
  message += strconv.Itoa(column)
  message += ":\n..."
  end := e.GetBegin() + 64
  if end > len(this.input) {
    end = len(this.input)
  }
  message += this.input[e.GetBegin() : end]
  message += "..."
  return message
}
~                                                               if (! interfaceName.empty())
                                                                {
~
public void parse()
{
  parse_~                                                         print(Format::acceptableName<WString>(grammar->startSymbol()->name).c_str());
        ~();
}
~                                                               }
                                                              }
                                                              else if (isPython())
                                                              {
~
@staticmethod
def getExpectedTokenSet(e):
  if e.expected < 0:
    return ~                                                    print(className.c_str());
           ~.getTokenSet(- e.state)
  else:
    return [~                                                   print(className.c_str());
            ~.TOKEN[e.expected]]

def getErrorMessage(self, e):
  message = e.error()~                                          if (useGlr)
                                                                {
~
  if e.isAmbiguousInput():
    message += "\n"
  else:~                                                          increaseIndent();
                                                                }
~
  found = ~                                                     print(className.c_str());
          ~.getOffendingToken(e)
  if found != "":
    message += ", found "
    message += found
  expected = ~                                                  print(className.c_str());
             ~.getExpectedTokenSet(e)
  message += "\nwhile expecting "
  delimiter = ""
  if len(expected) != 1:
    delimiter = "["
  for token in expected:
    message += delimiter
    message += token
    delimiter = ", "
  if len(expected) != 1:
    message += "]"
  message += "\n"
  size = e.getEnd() - e.getBegin()
  if size != 0 and found == "":
    message += "after successfully scanning "
    message += str(size)
    message += " characters beginning " ~                       if (useGlr)
                                                                {
                                                                  decreaseIndent();
                                                                }
~
  line = 1
  column = 1
  for i in range(e.getBegin()):
    if self.input[i] == '\n':
      line += 1
      column = 1
    else:
      column += 1
  message += "at line "
  message += str(line)
  message += ", column "
  message += str(column)
  message += ":\n..."
  end = e.getBegin() + 64
  if end > len(self.input):
    end = len(self.input)
  message += self.input[e.getBegin() : end]
  message += "..."
  return message
~                                                               if (! interfaceName.empty())
                                                                {
~
public void parse()
{
  parse_~                                                         print(Format::acceptableName<WString>(grammar->startSymbol()->name).c_str());
        ~();
}
~                                                               }
                                                              }
                                                              else if (isScala())
                                                              {
                                                              }
                                                              else
                                                              {
                                                                WString args(L"const ParseException &e, ");
                                                                args += stringType();
                                                                args += L"*set, int size";
                                                                openMethod(L"static void ", L"", L"getExpectedTokenSet", args.c_str());
                                                                print(leftBrace());
~
  if (e.expected < 0)
  {
    getTokenSet(- e.state, set, size);
  }
  else if (size == 1)
  {
    set[0] = 0;
  }
  else if (size > 1)
  {
    set[0] = ~                                                  print(isGo() ? L"token" : L"TOKEN");
             ~[e.expected];
    set[1] = 0;
  }
}

static std::~                                                   if (stringIntroducer()[0]) append(L"w");
            ~string to_~                                        if (stringIntroducer()[0]) append(L"w");
                       ~string(int i)
{
  const ~                                                       if (stringIntroducer()[0]) append(L"w");
        ~char~                                                  if (stringIntroducer()[0]) append(L"_t");
             ~ *sign = i < 0 ? ~                                append(stringIntroducer());
                               ~"-" : ~                         append(stringIntroducer());
                                      ~"";
  std::~                                                        if (stringIntroducer()[0]) append(L"w");
       ~string a;
  do
  {
    a += ~                                                      append(stringIntroducer());
         ~'0' + abs(i % 10);
    i /= 10;
  }
  while (i != 0);
  a += sign;
  std::reverse(a.begin(), a.end());
  return a;
}

std::~                                                          if (stringIntroducer()[0]) append(L"w");
     ~string getErrorMessage(const ParseException &e)
{
  std::~                                                        if (stringIntroducer()[0]) append(L"w");
       ~string message(e.getMessage());~                        if (useGlr)
                                                                {
~
  if (e.isAmbiguousInput())
  {
    message += ~                                                  print(stringIntroducer());
               ~"\n";
  }
  else
  {~                                                              increaseIndent();
                                                                }
~
  ~                                                             print(stringType());
  ~found = getOffendingToken(e);
  if (found != 0)
  {
    message += ~                                                print(stringIntroducer());
               ~", found ";
    message += found;
  }
  ~                                                             print(stringType());
  ~expected[64];
  getExpectedTokenSet(e, expected, sizeof expected / sizeof *expected);
  message += ~                                                  print(stringIntroducer());
             ~"\nwhile expecting ";
  ~                                                             print(stringType());
  ~delimiter(expected[1] ? ~                                    print(stringIntroducer());
                           ~"[" : ~                             print(stringIntroducer());
                                  ~"");
  for (~                                                        print(stringType());
       ~*x = expected; *x; ++x)
  {
    message += delimiter;
    message += *x;
    delimiter = ~                                               print(stringIntroducer());
                ~", ";
  }
  message += expected[1] ? ~                                    print(stringIntroducer());
                           ~"]\n" : ~                           print(stringIntroducer());
                                    ~"\n";
  int size = e.getEnd() - e.getBegin();
  if (size != 0 && found == 0)
  {
    message += ~                                                print(stringIntroducer());
               ~"after successfully scanning ";
    message += to_~                                             if (stringIntroducer()[0]) append(L"w");
                  ~string(size);
    message += ~                                                print(stringIntroducer());
               ~" characters beginning ";
  }~                                                            if (useGlr)
                                                                {
                                                                  decreaseIndent();
~
  }~                                                            }
~
  int line = 1;
  int column = 1;
  for (int i = 0; i < e.getBegin(); ++i)
  {
    if (input[i] == L'\n')
    {
      ++line;
      column = 1;
    }
    else
    {
      ++column;
    }
  }
  message += ~                                                  print(stringIntroducer());
             ~"at line ";
  message += to_~                                             if (stringIntroducer()[0]) append(L"w");
                ~string(line);
  message += ~                                                print(stringIntroducer());
             ~", column ";
  message += to_~                                             if (stringIntroducer()[0]) append(L"w");
                ~string(column);
  message += ~                                                  print(stringIntroducer());
             ~":\n...";
  ~                                                             print(stringType());
  ~w = input + e.getBegin();
  for (int i = 0; i < 64 && *w; ++i)
  {
    message += *w++;
  }
  message += ~                                                  print(stringIntroducer());
             ~"...";
  return message;
}
~                                                             }
                                                              if (! isGo())
                                                                decreaseIndent();
                                                            }

                                                            void PrintCLike::printEpilog()
                                                            {
                                                              Trace("PrintCLike::printEpilog");

                                                              if (trace && ! isLrParser)
                                                              {
                                                                increaseIndent();
                                                                WString type(stringType());
                                                                if (type.size() == 0) type = L"String ";
                                                                WString args(type);
                                                                args += L"method, ";
                                                                args += type;
                                                                args += L"occasion, ";
                                                                args += type;
                                                                args += L"name";
                                                                openMethod(voidType(), L"", L"traceNonterminal", args.c_str());
                                                                print(leftBrace());
                                                                if (isCpp())
                                                                {
~
  fprintf(stderr, "  <%s %snonterminal=\"%s\"", ~                 if (stringIntroducer()[0])
                                                                  {
                      ~Utf8Encoder::encode(~                      }
                      ~method~                                    if (stringIntroducer()[0])
                                                                  {
                             ~).c_str()~                          }
                             ~, ~                                 if (stringIntroducer()[0])
                                                                  {
                         ~Utf8Encoder::encode(~                   }
                         ~occasion~                               if (stringIntroducer()[0])
                                                                  {
                                  ~).c_str()~                     }
                                  ~, ~                            if (stringIntroducer()[0])
                                                                  {
                                         ~Utf8Encoder::encode(~   }
                                         ~name~                   if (stringIntroducer()[0])
                                                                  {
                                              ~).c_str()~         }
                                              ~);
  if (l1 != 0)
    fprintf(stderr, " input=\"%s\"", ~                            if (stringIntroducer()[0])
                                                                  {
                                     ~Utf8Encoder::encode(~       }
                                     ~xmlEscape(lookaheadString().c_str(), 0).c_str()~
                                                                  if (stringIntroducer()[0])
                                                                  {
                                     ~).c_str()~                  }
                                     ~);
  fprintf(stderr, "/>\n");~                                     }
                                                                else
                                                                {
                                                                  if (isHaxe())
                                                                  {
~
  trace(~                                                         }
                                                                  else
                                                                  {
                                                                    if (isGo())
                                                                    {
~
  var inputAttr string
  if (this.l1 == 0) {
    inputAttr = ""
  } else {
    inputAttr = " input=\"" + xmlEscape(this.lookaheadString()) + "\""
  }~                                                                }
~
  ~                                                                 print(writeTrace());
                                                                  }
  ~"  <" + method + " " + occasion + "nonterminal=\"" + name + "\"" + ~
                                                                  if (isGo())
                                                                  {
                                    ~inputAttr~                   }
                                                                  else
                                                                  {
                                    ~(~                             if (isScala())
                                                                    {
                                      ~if (l1 == 0) "" else~        }
                                                                    else if (isPython())
                                                                    {
                                      ~"" if self.l1 == 0 else~     }
                                                                    else
                                                                    {
                                                                      print(thiz());
                                      ~l1 == 0 ? "" :~              }
                                      ~ " input=\"" + ~             print(staticPrefix());
                                      ~xmlEscape(~                  print(thiz());
                                      ~lookaheadString~             if (! isScala()) print(L"()");
                                                      ~) + "\"")~ }
                                                      ~ + "/>~    if (isHaxe()) print(L"\")"); else print(L"\\n\"");
                                                                  print(endWriteTrace());
                                                                  print(semicolon());
                                                                }
                                                                print(rightBrace());
~
~                                                               decreaseIndent();
                                                              }

                                                              if (grammar->automaticSemicolonInsertion)
                                                              {
                                                                if (! isGo())
                                                                  increaseIndent();
                                                                openMethod(boolType(), L"", L"followsLineTerminator", L"");
                                                                print(leftBrace());
                                                                increaseIndent();
~
~                                                               print(intVar());
~i~                                                             print(assign());
                                                                print(thiz());
  ~e0~                                                          print(semicolon());
~
if ~                                                            print(ifLeftParen());
                                                                print(thiz());
   ~e0 == ~                                                     print(thiz());
          ~b1~                                                  print(ifRightParen());
                                                                print(leftBrace());
~
  i = ~                                                         print(thiz());
      ~b0~                                                      print(semicolon());
                                                                print(rightBrace());
                                                                if (isScala() || isHaxe() || isPython())
                                                                {
~
while ~                                                         }
                                                                else
                                                                {
~
for ~                                                           }
                                                                print(ifLeftParen());
                                                                if (! (isScala() || isHaxe() || isPython()))
                                                                {
    ~; ~                                                        }
    ~i < ~                                                      print(thiz());
         ~b1~                                                   if (! (isScala() || isHaxe() || isPython()))
                                                                {
            ~; i++~                                             }
                                                                print(ifRightParen());
                                                                print(leftBrace());
                                                                increaseIndent();
                                                                if (isGo())
                                                                {
~
c, _ := utf8.DecodeRuneInString(this.input[i:])~                }
                                                                else
                                                                {
~
~                                                                 print(intVar());
~c~                                                               print(assign());
                                                                  if (isCpp() || isCSharp() || isPython())
                                                                  {
                                                                    if (isPython())
                                                                    {
~ord(~                                                              }
                                                                    print(thiz());
     ~input[i]~                                                     if (isPython())
                                                                    {
              ~)~                                                   }
                                                                  }
                                                                  else if (isHaxe())
                                                                  {
~input.get(i)~                                                    }
                                                                  else
                                                                  {
                                                                    print(thiz());
~input.char~                                                        if (isTypescript() || isJavascript())
                                                                    {
           ~Code~                                                   }
           ~At(i)~                                                }
                                                                  print(semicolon());
                                                                }
~
if ~                                                            print(ifLeftParen());
   ~c == 0xA ~
                                                                if (isPython())
                                                                {
             ~or~                                               }
                                                                else
                                                                {
             ~||~                                               }
                ~ c == 0xD ~
                                                                if (isPython())
                                                                {
                           ~or~                                 }
                                                                else
                                                                {
                           ~||~                                 }
                              ~ c == 0x2028 ~
                                                                if (isPython())
                                                                {
                                            ~or~                }
                                                                else
                                                                {
                                            ~||~                }
                                               ~ c == 0x2029~   print(ifRightParen());
                                                                print(leftBrace());
~
  return ~                                                      if (isPython())
                                                                {
         ~T~                                                    }
                                                                else
                                                                {
           ~t~                                                  }
             ~rue~                                              print(semicolon());
                                                                print(rightBrace());
                                                                if (isScala() || isPython())
                                                                {
~
i += 1~
                                                                }
                                                                else if (isHaxe())
                                                                {
~
++i;~                                                           }

                                                                decreaseIndent();
                                                                print(rightBrace());
~
return ~                                                        if (isPython())
                                                                {
       ~F~                                                      }
                                                                else
                                                                {
       ~f~                                                      }
         ~alse~                                                 print(semicolon());
                                                                decreaseIndent();
                                                                print(rightBrace());
~
~                                                               if (! isGo())
                                                                  decreaseIndent();
                                                              }

                                                              if (isScala())
                                                              {
~
  def getErrorMessage(e: ~                                      print(className.c_str());
                         ~.ParseException) = {
    var message = e.getMessage~                                 if (useGlr)
                                                                {
~
    if (e.isAmbiguousInput)
      message += "\n"
    else {~                                                       increaseIndent();
                                                                }
~
    val tokenSet = ~                                            print(className.c_str());
                   ~.getExpectedTokenSet(e)
    val found = ~                                               print(className.c_str());
                ~.getOffendingToken(e)
    val size = e.end - e.begin
    message += (if (found == null) "" else ", found " + found) + "\nwhile expecting " +
      (if (tokenSet.length == 1) tokenSet(0) else "[" + (tokenSet mkString ", ") + "]") + "\n" +
      (if (size == 0 || found != null) "" else "after successfully scanning " + size + " characters beginning ")~
                                                                if (useGlr)
                                                                {
~
    }~                                                            decreaseIndent();
                                                                }
~
    val prefix = input.substring(0, e.begin)
    val line = prefix.replaceAll("[^^\n]", "").length + 1
    val column = prefix.length - prefix.lastIndexOf('\n')
    message +
      "at line " + line + ", column " + column + ":\n..." +
      input.substring(e.begin, math.min(input.length, e.begin + 64)) + "..."
  }
~                                                             }

                                                              if (isLrParser)
                                                              {
                                                                if (! isGo())
                                                                  increaseIndent();
                                                                if (useGlr)
                                                                {
                                                                  if (isTypescript())
                                                                  {
                                                                    printGlrParseMethod();
                                                                    increaseIndent();
                                                                  }
                                                                  else if (isHaxe() || isScala())
                                                                  {
                                                                    printGlrParseMethod();
                                                                    decreaseIndent();
                                                                  }
                                                                  else
                                                                  {
                                                                    if (! isJavascript())
                                                                    {
                                                                      openStackNode();
                                                                      printCountMethod();
                                                                      closeStackNode();
                                                                    }
                                                                    openThread();
                                                                    increaseIndent();
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  WString pushArgs = L"int state, int lookback";
                                                                  pushArgs += tree ? L", int begin" : L"";
                                                                  openMethod(voidType(), L"", L"push", pushArgs.c_str());
                                                                  print(leftBrace());
~
  ~                                                               print(thiz());
  ~top += ~                                                       if (tree)
                                                                  {
         ~3~                                                      }
                                                                  else
                                                                  {
         ~2~                                                      }
                                                                  print(semicolon());
                                                                  if (isJava())
                                                                  {
~
  if (top >= iStack.length)
  {
    iStack = Arrays.copyOf(iStack, iStack.length << 1);
  }~                                                              }
                                                                  else if (isCSharp())
                                                                  {
~
  if (top >= iStack.Length)
  {
    Array.Resize(ref iStack, iStack.Length << 1);
  }~                                                              }
                                                                  else if (isCpp())
                                                                  {
~
  if (top >= (int) iStack.size())
    iStack.resize(iStack.size() == 0 ? ~                            print(tree ? L"192" : L"128");
                                       ~ : iStack.size() << 1);~
                                                                  }
                                                                  else if (isScala())
                                                                  {
~
  if (top >= iStack.size) {
    val newStack = new Array[Int](iStack.size << 1)
    Array.copy(iStack, 0, newStack, 0, iStack.size)
    iStack = newStack
  }~                                                              }
                                                                  else if (isGo())
                                                                  {
~
  if this.top >= len(this.iStack) {
    this.iStack = append(this.iStack, this.iStack...)
  }~                                                              }
                                                                  else if (isPython())
                                                                  {
~
  if self.top >= len(self.iStack):
    self.iStack.extend([0 for _ in range(len(self.iStack))])~     }
                                                                  if (tree)
                                                                  {
~
  ~                                                                 print(thiz());
  ~iStack~                                                          print(leftbracket());
                                                                    print(thiz());
         ~top - 2~                                                  print(rightbracket());
                 ~ = begin~                                         print(semicolon());
                                                                  }
~
  ~                                                               print(thiz());
  ~iStack~                                                        print(leftbracket());
                                                                  print(thiz());
         ~top - 1~                                                print(rightbracket());
                 ~ = state~                                       print(semicolon());
~
  ~                                                               print(thiz());
  ~iStack~                                                        print(leftbracket());
                                                                  print(thiz());
         ~top~                                                    print(rightbracket());
             ~ = lookback~                                        print(semicolon());
                                                                  print(rightBrace());
~
~                                                                 printCountMethod();

                                                                  WString args(L"int target, int initialState");
                                                                  if (tree)
                                                                  {
                                                                    args += L", ";
                                                                    if (! isTypescript()) args += staticPrefix();
                                                                    args += L"BottomUpEventHandler ";
                                                                    if (isCpp()) args += L"*";
                                                                    args += L"eventHandler";
                                                                  }
                                                                  openMethod(voidType(), L"", L"parse", args.c_str());
                                                                  print(leftBrace());
                                                                  increaseIndent();
~
~                                                                 print(intVar());
~state~                                                           print(assign());
      ~initialState~                                              print(semicolon());
                                                                  if (tree || useGlr)
                                                                  {
~
~                                                                   print(intVar());
~bw~                                                                print(assign());
                                                                    print(thiz());
   ~e0~                                                             print(semicolon());
~
~                                                                   print(intVar());
~bs~                                                                print(assign());
                                                                    print(thiz());
   ~e0~                                                             print(semicolon());
                                                                  }
                                                                  if (tree)
                                                                  {
~
~                                                                   print(intVar());
~es~                                                                print(assign());
                                                                    print(thiz());
   ~e0~                                                             print(semicolon());
~
~                                                                   print(intVar());
~t~                                                                 print(assign());
                                                                    print(thiz());
  ~top~                                                             print(semicolon());
                                                                  }
~
~                                                                 print(intVar());
~action~                                                          print(assign());
                                                                  print(thiz());
       ~predict(state)~                                           print(semicolon());
                                                                }
                                                              }
                                                              if (! (isHaxe() || isScala() || isTypescript()) || ! useGlr)
                                                              {
                                                                printThreadBody1();
                                                              }
                                                              if (isScala())
                                                              {
                                                                if (trace)
                                                                {
~
  def setTraceWriter(w: Writer): Unit = {
    err = w
  }

  def writeTrace(content: String): Unit = {
    err.write(content)
  }
~
~
  def flushTrace: Unit = {
    err.flush
  }
~                                                               }
                                                                if (useGlr)
                                                                {
~
  var thread: ~                                                   print(className.c_str());
              ~.ParsingThread = null~                           }
~
  var input: String = null~                                     if (! noLexer)
                                                                {
~
  var size = 0~                                                 }
                                                                if (tree && useGlr)
                                                                {
~
  var eventHandler: ~                                             print(className.c_str());
                    ~.BottomUpEventHandler = null~              }
                                                                if (noLexer)
                                                                {
~
  var lexer: Lexer = null
  var token = new Token~                                        }
                                                                if (useGlr)
                                                                {
~
  var maxId = 0~                                                }
                                                                if (trace)
                                                                {
~
  var err: Writer = new OutputStreamWriter(System.err, "UTF-8")~
                                                                }
~
}

object ~                                                        print(className.c_str());
       ~ {

  def getOffendingToken(e: ParseException) = {
    if (e.offending < 0) null else TOKEN(e.offending)
  }
~
                                                              }
                                                            }

                                                            void PrintCLike::printThreadBody1()
                                                            {
                                                              Trace("PrintCLike::printThreadBody1");

                                                              if (isLrParser)
                                                              {
~
~                                                               print(intVar());
~nonterminalId~                                                 print(assign());
              ~-1~                                              print(semicolon());
                                                                if (isHaxe() || isScala() || isPython())
                                                                {
~
while ~                                                           print(ifLeftParen());
                                                                  if (isPython())
                                                                  {
      ~T~                                                         }
                                                                  else
                                                                  {
      ~t~                                                         }
        ~rue~                                                     print(ifRightParen());
                                                                }
                                                                else if (isGo())
                                                                {
~
for~                                                            }
                                                                else
                                                                {
~
for (;;)~                                                       }
                                                                print(leftBrace());
                                                                increaseIndent();
                                                                if (trace)
                                                                {
                                                                  if (isCpp())
                                                                  {
~
fprintf(stderr, "  <parse ~                                         if (useGlr)
                                                                    {
                          ~thread=\"%d\" offset=\"%d\" ~            }
                          ~state=\"%d\" input=\"%s%s%s\" action=\"",~
                                                                    if (useGlr)
                                                                    {
~
  id,
  e0,~                                                              }
~
  state,
  nonterminalId < 0 ? "" : ~                                        if (stringIntroducer()[0])
                                                                    {
                           ~Utf8Encoder::encode(~                   }
                           ~xmlEscape(~                             print(isGo() ? L"nonterminal" : L"NONTERMINAL");
                                      ~[nonterminalId], 0).c_str()~
                                                                    if (stringIntroducer()[0])
                                                                    {
                         ~).c_str()~                                }
                         ~,
  nonterminalId < 0 || l1 <= 0 ? "" : " ",
  l1 <= 0 ? "" : ~                                                  if (stringIntroducer()[0])
                                                                    {
                 ~Utf8Encoder::encode(~                             }
                 ~xmlEscape(lookaheadString().c_str(), 0).c_str()~  if (stringIntroducer()[0])
                                                                    {
                 ~).c_str()~                                        }
                 ~);
~                                                                 }
                                                                  else
                                                                  {
                                                                    if (isHaxe())
                                                                    {
~
var traceLine = ~                                                   }
                                                                    else
                                                                    {
~
~                                                                     print(writeTrace());
                                                                    }
~"  <parse ~                                                        if (useGlr)
                                                                    {
           ~thread=\"" + ~                                            if (isGo())
                                                                      {
                         ~strconv.Itoa(~                              }
                                                                      else if (isPython())
                                                                      {
                         ~str(~                                       }
                                                                      print(thiz());
                         ~id~                                         if (isGo() || isPython())
                                                                      {
                            ~)~                                       }
                            ~ + "\" offset=\"" + ~                    if (isGo())
                                                                      {
                                                ~strconv.Itoa(~       }
                                                                      else if (isPython())
                                                                      {
                                                ~str(~                }
                                                                      print(thiz());
                                                ~e0~                  if (isGo() || isPython())
                                                                      {
                                                   ~)~                }
                                                   ~ + "\" ~        }
           ~state=\"" + ~                                           if (isGo())
                                                                    {
                        ~strconv.Itoa(~                             }
                                                                    else if (isPython())
                                                                    {
                        ~str(~                                      }
                                                                    if (useGlr) print(thiz());
                        ~state~                                     if (isGo() || isPython())
                                                                    {
                              ~)~                                   }
                              ~ + "\" input=\""~                    print(endWriteTrace());
                                                                    print(semicolon());

~
if ~                                                                print(ifLeftParen());
   ~nonterminalId >= 0~                                             print(ifRightParen());
                                                                    print(leftBrace());
~
  ~                                                                 print(writeTrace());
                                                                    print(staticPrefix());
  ~xmlEscape(~
                                                                    print(staticPrefix());
                                                                    print(isGo() ? L"nonterminal" : L"NONTERMINAL");
                                                                    print(leftbracket());
             ~nonterminalId~                                        print(rightbracket());
                           ~)~                                      print(endWriteTrace());
                                                                    print(semicolon());
~
  if ~                                                              print(ifLeftParen());
                                                                    print(thiz());
     ~l1 != 0~                                                      print(ifRightParen());
                                                                    printIndented(1, leftBrace());
~
    ~                                                               print(writeTrace());
    ~" "~                                                           print(endWriteTrace());
                                                                    print(semicolon());
                                                                    increaseIndent();
                                                                    print(rightBrace());
                                                                    decreaseIndent();
                                                                    print(rightBrace());
~
~                                                                   print(writeTrace());
                                                                    print(staticPrefix());
  ~xmlEscape(~                                                      print(thiz());
             ~lookaheadString~                                      if (! isScala()) print(L"()");
                             ~) + "\" action=\""~                   print(endWriteTrace());
                                                                    print(semicolon());
                                                                  }
                                                                }
~
~                                                               print(intVal());
~argument~                                                      print(assign());
                                                                if (useGlr) print(thiz());
         ~action >> ~                                           print(format.toString<wchar_t>(grammar->states->dominoBits + LrStates::actionBits));
                                                                print(semicolon());
~
~                                                               print(intVal());
~lookback~                                                      print(assign());
         ~(~                                                    if (useGlr) print(thiz());
           ~action >> ~                                         print(format.toString<wchar_t>((int) LrStates::actionBits));
                      ~) & ~                                    print(format.toString<wchar_t>((1 << grammar->states->dominoBits) -1));
                                                                print(semicolon());
~
~                                                               print(intVar());
~shift~                                                         print(assign());
      ~-1~                                                      print(semicolon());
~
~                                                               print(intVar());
~reduce~                                                        print(assign());
       ~-1~                                                     print(semicolon());
~
~                                                               print(intVar());
~symbols~                                                       print(assign());
        ~-1~                                                    print(semicolon());
                                                                if (isPython())
                                                                {
~
~
                                                                  if (useGlr) print(thiz());
~action &= ~                                                      print(format.toString<wchar_t>((int) LrStates::actionMask));
                                                                }
                                                                else
                                                                {
~
~                                                                 if (! isScala())
                                                                  {
~switch ~                                                         }
                                                                  print(ifLeftParen());
                                                                  if (useGlr) print(thiz());
        ~action & ~                                               print(format.toString<wchar_t>((int) LrStates::actionMask));
                                                                  print(ifRightParen());
                                                                  if (isScala())
                                                                  {
                  ~ match~                                        }
                                                                  print(leftBrace());
                                                                }
                                                                if (isPython())
                                                                {
~
if ~                                                              if (useGlr) print(thiz());
   ~action == ~                                                 }
                                                                else
                                                                {
~
case ~                                                          }
                                                                print(format.toString<wchar_t>((int) LrStates::SHIFT));
                                                                print(caseIntroducer());
     ~ ~                                                        print(inlineCommentIntroducer());
       ~SHIFT
  shift = argument~                                             print(semicolon());
                                                                if (! isHaxe() && ! isScala() && ! isGo() && ! isPython())
                                                                {
~
  break~                                                          print(semicolon());
                                                                }
~
~                                                               if (isPython())
                                                                {
~
elif ~                                                            if (useGlr) print(thiz());
     ~action == ~                                               }
                                                                else
                                                                {
~
case ~                                                          }
                                                                print(format.toString<wchar_t>((int) LrStates::REDUCE));
                                                                print(caseIntroducer());
     ~ ~                                                        print(inlineCommentIntroducer());
       ~REDUCE
  reduce = argument~                                            print(semicolon());
~
  symbols = lookback~                                           print(semicolon());
                                                                if (! isHaxe() && ! isScala() && ! isGo() && ! isPython())
                                                                {
~
  break~                                                          print(semicolon());
                                                                }
                                                                if (grammar->states->hasLookback)
                                                                {
~
~                                                                 if (isPython())
                                                                  {
~
elif ~                                                              if (useGlr) print(thiz());
     ~action == ~                                                 }
                                                                  else
                                                                  {
~
case ~                                                            }
                                                                  print(format.toString<wchar_t>((int) LrStates::REDUCE_LOOKBACK));
                                                                  print(caseIntroducer());
     ~ ~                                                          print(inlineCommentIntroducer());
       ~REDUCE+LOOKBACK
  reduce = argument~                                              print(semicolon());
~
  symbols = ~                                                     print(thiz());
                                                                  if (useGlr)
                                                                  {
            ~stack~                                                 print(arrow());
                                                                  }
                                                                  if (isGo() && useGlr)
                                                                  {
            ~Count~                                               }
                                                                  else
                                                                  {
            ~count~                                               }
                  ~(lookback)~                                    print(semicolon());
                                                                  if (! isHaxe() && ! isScala() && ! isGo() && ! isPython())
                                                                  {
~
  break~                                                            print(semicolon());
                                                                  }
                                                                }
~
~                                                               if (isPython())
                                                                {
~
elif ~                                                            if (useGlr) print(thiz());
     ~action == ~                                               }
                                                                else
                                                                {
~
case ~                                                          }
                                                                print(format.toString<wchar_t>((int) LrStates::SHIFT_REDUCE));
                                                                print(caseIntroducer());
     ~ ~                                                        print(inlineCommentIntroducer());
       ~SHIFT+REDUCE
  shift = ~                                                     if (useGlr) print(thiz());
          ~state~                                               print(semicolon());
~
  reduce = argument~                                            print(semicolon());
~
  symbols = lookback + 1~                                       print(semicolon());
                                                                if (! isHaxe() && ! isScala() && ! isGo() && ! isPython())
                                                                {
~
  break~                                                          print(semicolon());
                                                                }
                                                                if (grammar->states->hasLookback)
                                                                {
~
~                                                                 if (isPython())
                                                                  {
~
elif ~                                                              if (useGlr) print(thiz());
     ~action == ~                                                 }
                                                                  else
                                                                  {
~
case ~                                                            }
                                                                  print(format.toString<wchar_t>((int) LrStates::SHIFT_REDUCE_LOOKBACK));
                                                                  print(caseIntroducer());
     ~ ~                                                          print(inlineCommentIntroducer());
       ~SHIFT+REDUCE+LOOKBACK
  shift = ~                                                       if (useGlr) print(thiz());
          ~state~                                                 print(semicolon());
~
  reduce = argument~                                              print(semicolon());
~
  symbols = ~                                                     print(thiz());
                                                                  if (useGlr)
                                                                  {
            ~stack~                                                 print(arrow());
                                                                  }
                                                                  if (isGo() && useGlr)
                                                                  {
            ~Count~                                               }
                                                                  else
                                                                  {
            ~count~                                               }
                  ~(lookback) + 1~                                print(semicolon());
                                                                  if (! isHaxe() && ! isScala() && ! isGo() && ! isPython())
                                                                  {
~
  break~                                                            print(semicolon());
                                                                  }
                                                                }
~
~                                                               if (isPython())
                                                                {
~
elif ~                                                            if (useGlr) print(thiz());
     ~action == ~                                               }
                                                                else
                                                                {
~
case ~                                                          }
                                                                print(format.toString<wchar_t>((int) LrStates::SHIFT_ACCEPT));
                                                                print(caseIntroducer());
     ~ ~                                                        print(inlineCommentIntroducer());
       ~ACCEPT~                                                 if (trace)
                                                                {
                                                                  if (isCpp())
                                                                  {
~
  fprintf(stderr, ~                                               }
                                                                  else
                                                                  {
~
  ~                                                                 print(writeTrace());
                                                                  }
  ~"accept\"/>~                                                   if (! isHaxe())
                                                                  {
              ~\n~                                                }
                 ~"~                                              print(endWriteTrace());
                                                                  print(semicolon());
                                                                  if (isHaxe())
                                                                  {
~
  trace(traceLine);~                                              }
                                                                }
                                                                if (useGlr)
                                                                {
~
  ~                                                               if (useGlr) print(thiz());
  ~accepted = ~                                                   if (isPython())
                                                                  {
              ~T~                                                 }
                                                                  else
                                                                  {
              ~t~                                                 }
                ~rue~                                             print(semicolon());
~
  ~                                                               if (useGlr) print(thiz());
  ~action = 0~                                                    print(semicolon());
~
  return ~                                                        if (isHaxe() || isTypescript() || isPython()) print(staticPrefix());
         ~ACCEPTED~                                               print(semicolon());
                                                                }
                                                                else
                                                                {
~
  return~                                                         print(semicolon());
                                                                }

                                                                if (useGlr)
                                                                {
~
~                                                                 if (isPython())
                                                                  {
~
elif ~                                                              if (useGlr) print(thiz());
     ~action == ~                                                 }
                                                                  else
                                                                  {
~
case ~                                                            }
                                                                  print(format.toString<wchar_t>((int) LrStates::FORK));
                                                                  print(caseIntroducer());
     ~ ~                                                          print(inlineCommentIntroducer());
       ~FORK~                                                     if (trace)
                                                                  {
                                                                    if (isCpp())
                                                                    {
~
  fprintf(stderr, "fork\"/>\n");~                                   }
                                                                    else
                                                                    {
~
  ~                                                                   print(writeTrace());
  ~"fork\"/>~                                                         if (! isHaxe())
                                                                      {
            ~\n"~                                                       print(endWriteTrace());
                                                                        print(semicolon());
                                                                      }
                                                                      else
                                                                      {
            ~";
  trace(traceLine);~                                                  }
                                                                    }
                                                                  }
                                                                  if (isGo())
                                                                  {
~
  heap.Push(this.threads, new(ParsingThread).copy(this, appendix[argument]))~
                                                                  }
                                                                  else if (isPython())
                                                                  {
~
  forked = ~                                                        print(staticPrefix());
           ~ParsingThread().copy(self, ~                            print(staticPrefix());
                                       ~APPENDIX[argument])
  heapq.heappush(self.threads, (False, forked.e0, forked.id, forked))~
                                                                  }
                                                                  else
                                                                  {
~
  ~                                                                 print(thiz());
  ~threads~                                                         if (isCpp())
                                                                    {
          ~->push(~                                                 }
                                                                    else if (isScala())
                                                                    {
          ~ += ~                                                    }
                                                                    else
                                                                    {
          ~.offer(~                                                 }
                                                                    if (isCpp() || isScala()) print(L"(");
          ~new ParsingThread~                                       if (! isScala()) print(L"()");
                                                                    if (isCpp() || isScala()) print(L")");
                                                                    print(arrow());
                            ~copy(this~                             if (isJavascript())
                                                                    {
                                      ~Thread~                      }
                                      ~, ~                          print(staticPrefix());
                                         ~APPENDIX~                 print(leftbracket());
                                                  ~argument~        print(rightbracket());
                                                           ~)~      if (! isScala()) print(L")");
                                                                    print(semicolon());
                                                                  }
~
  ~                                                               if (useGlr) print(thiz());
  ~action = ~                                                     print(staticPrefix());
                                                                  if (isGo())
                                                                  {
            ~appendix~                                            }
                                                                  else
                                                                  {
            ~APPENDIX~                                            }
                                                                  print(leftbracket());
                     ~argument + 1~                               print(rightbracket());
                                                                  print(semicolon());
~
  return ~                                                        if (isHaxe() || isTypescript() || isPython()) print(staticPrefix());
         ~PARSING~                                                print(semicolon());
                                                                }
~
~                                                               if (isPython())
                                                                {
~
else~                                                           }
                                                                else if (isScala())
                                                                {
~
case _~                                                         }
                                                                else
                                                                {
~
default~                                                        }
                                                                print(caseIntroducer());
       ~ ~                                                      print(inlineCommentIntroducer());
       ~ERROR~                                                  if (useGlr)
                                                                {
                                                                  if (trace)
                                                                  {
                                                                    if (isCpp())
                                                                    {
~
  fprintf(stderr, "fail\"/>\n");~                                   }
                                                                    else
                                                                    {
~
  ~                                                                   print(writeTrace());
  ~"fail\"/>~                                                         if (! isHaxe())
                                                                      {
            ~\n"~                                                       print(endWriteTrace());
                                                                        print(semicolon());
                                                                      }
                                                                      else
                                                                      {
            ~";
  trace(traceLine);~                                                  }
                                                                    }
                                                                  }
~
  return ~                                                        if (isHaxe() || isTypescript() || isPython()) print(staticPrefix());
         ~ERROR~                                                  print(semicolon());
                                                                }
                                                                else
                                                                {
~
  ~                                                               print(beginThrowStmt());
                                                                  print(thiz());
  ~b1, ~                                                          print(thiz());
       ~e1, ~                                                     print(staticPrefix());
                                                                  if (isGo())
                                                                  {
            ~tokenset~                                            }
                                                                  else
                                                                  {
            ~TOKENSET~                                            }
                                                                  print(leftbracket());
                     ~state~                                      print(rightbracket());
                           ~ + 1, ~                               print(thiz());
                                  ~l1, -1~                        print(endThrowStmt());
                                                                  print(semicolon());
                                                                }
                                                                print(rightBrace());
~

if ~                                                            print(ifLeftParen());
   ~shift >= 0~                                                 print(ifRightParen());
                                                                print(leftBrace());
                                                                if (trace)
                                                                {
                                                                  if (isCpp())
                                                                  {
~
  fprintf(stderr, ~                                               }
                                                                  else
                                                                  {
~
  ~                                                                 print(writeTrace());
                                                                  }
  ~"shift"~                                                       print(endWriteTrace());
                                                                  print(semicolon());
                                                                }
~
  if ~                                                          print(ifLeftParen());
     ~nonterminalId < 0~                                        print(ifRightParen());
                                                                printIndented(1, leftBrace());
                                                                if (tree)
                                                                {
~
    if ~                                                          print(ifLeftParen());
                                                                  if (useGlr) print(thiz());
       ~eventHandler != ~                                         print(nullPtr());
                                                                  print(ifRightParen());
                                                                  printIndented(2, leftBrace());
                                                                  if (useGlr)
                                                                  {
~
      if ~                                                          print(ifLeftParen());
                                                                    print(thiz());
                                                                    if (isGo())
                                                                    {
         ~IsUnambiguous~                                            }
                                                                    else
                                                                    {
         ~isUnambiguous~                                            }
                                                                    if (! isScala()) print(L"()");
                                                                    print(ifRightParen());
                                                                    printIndented(3, leftBrace());
                                                                    increaseIndent();
                                                                  }
~
      ~                                                           if (useGlr) print(thiz());
      ~eventHandler~                                              print(arrow());
                                                                  if (isGo())
                                                                  {
                   ~T~                                            }
                                                                  else
                                                                  {
                   ~t~                                            }
                     ~erminal(~                                   print(staticPrefix());
                                                                  print(isGo() ? L"token" : L"TOKEN");
                                                                  print(leftbracket());
                                                                  print(thiz());
                                    ~l1~                          print(rightbracket());
                                       ~, ~                       print(thiz());
                                          ~b1, ~                  print(thiz());
                                               ~e1)~              print(semicolon());
                                                                  if (! useGlr)
                                                                  {
                                                                    increaseIndent(2);
                                                                    print(rightBrace());
                                                                    decreaseIndent(2);
                                                                  }
                                                                  else
                                                                  {
                                                                    decreaseIndent();
~
      ~                                                             printIndented(3, elseWithBraces());
~
        ~                                                           print(thiz());
        ~deferredEvent = ~                                          if (isGo())
                                                                    {
                         ~&TerminalEvent{&AbstractDeferredEvent{~   }
                                                                    else
                                                                    {
                                                                      if (! isPython())
                                                                      {
                         ~new ~                                       }
                                                                      if (! isHaxe() && ! isTypescript()) print(staticPrefix());
                                                                      if (isJavascript() || isTypescript())
                                                                      {
                              ~DeferredEvent~                         }
                                                                      else
                                                                      {
                              ~TerminalEvent~                         }
                              ~(~                                   }
                                                                    print(thiz());
                                ~deferredEvent, ~                   print(staticPrefix());
                                                                    print(isGo() ? L"token" : L"TOKEN");
                                                                    print(leftbracket());
                                                                    print(thiz());
                                                ~l1~                print(rightbracket());
                                                   ~, ~             print(thiz());
                                                      ~b1, ~        print(thiz());
                                                           ~e1~
                                                                    if (isTypescript())
                                                                    {
                                                              ~, null~
                                                                    }
                                                                    if (isGo())
                                                                    {
                                                                     ~}}~
                                                                    }
                                                                    else
                                                                    {
                                                                     ~)~
                                                                      print(semicolon());
                                                                    }
                                                                    increaseIndent(3);
                                                                    print(rightBrace());
                                                                    decreaseIndent();
                                                                    print(rightBrace());
                                                                    decreaseIndent(2);
                                                                  }
~
    ~                                                             if (useGlr) print(thiz());
    ~es = ~                                                       print(thiz());
          ~e1~                                                    print(semicolon());
                                                                }
                                                                if (useGlr)
                                                                {
~
    ~                                                             print(thiz());
    ~stack = ~                                                    if (isGo())
                                                                  {
             ~&StackNode{~                                        }
                                                                  else
                                                                  {
                                                                    if (! isPython())
                                                                    {
             ~new ~                                                 }
                                                                    if (! isHaxe() && ! isTypescript()) print(staticPrefix());
                  ~StackNode(~                                    }
                                                                  print(thiz());
                             ~state, ~                            if (grammar->states->hasLookback)
                                                                  {
                                     ~lookback, ~                 }
                                                                  print(thiz());
                                                ~b1, ~            print(thiz());
                                                     ~stack~      print(isGo() ? L"}" : L")");
                                                                  print(semicolon());
                                                                }
                                                                else
                                                                {
~
    ~                                                             print(thiz());
    ~push(state, lookback~                                        if (tree)
                                                                  {
                         ~, ~                                       print(thiz());
                            ~b1~                                  }
                               ~)~                                print(semicolon());
                                                                }
~
    ~                                                           print(thiz());
    ~consume(~                                                  print(thiz());
             ~l1)~                                              print(semicolon());
~
  ~                                                             printIndented(1, elseWithBraces());
                                                                if (useGlr)
                                                                {
~
    ~                                                             print(thiz());
    ~stack = ~                                                    if (isGo())
                                                                  {
             ~&StackNode{~                                        }
                                                                  else
                                                                  {
                                                                    if (! isPython())
                                                                    {
             ~new ~                                                 }
                                                                    if (! isHaxe() && ! isTypescript()) print(staticPrefix());
                 ~StackNode(~                                     }
                                                                  print(thiz());
                            ~state, ~                             if (grammar->states->hasLookback)
                                                                  {
                                    ~lookback, ~                  }
                                                                  if (tree)
                                                                  {
                                                                    print(thiz());
                                               ~bs~               }
                                                                  else
                                                                  {
                                               ~0~                }
                                                 ~, ~             print(thiz());
                                                    ~stack~       print(isGo() ? L"}" : L")");
                                                                  print(semicolon());
                                                                }
                                                                else
                                                                {
~
    ~                                                             print(thiz());
    ~push(state, lookback~                                        if (tree)
                                                                  {
                         ~, bs~                                   }
                              ~)~                                 print(semicolon());
                                                                }
                                                                increaseIndent();
                                                                print(rightBrace());
                                                                decreaseIndent();
~
  ~                                                             if (useGlr) print(thiz());
  ~state = shift~                                               print(semicolon());
                                                                print(rightBrace());
~

if ~                                                            print(ifLeftParen());
   ~reduce < 0~                                                 print(ifRightParen());
                                                                print(leftBrace());
                                                                if (trace)
                                                                {
                                                                  if (isCpp())
                                                                  {
~
  fprintf(stderr, ~                                               }
                                                                  else
                                                                  {
~
  ~                                                                 print(writeTrace());
                                                                  }
  ~"\"/>~
                                                                  if (! isHaxe())
                                                                  {
        ~\n"~                                                       print(endWriteTrace());
                                                                    print(semicolon());
                                                                  }
                                                                  else
                                                                  {
        ~";
  trace(traceLine);~                                              }
                                                                }
~
  ~                                                             if (useGlr) print(thiz());
  ~action = ~                                                   print(thiz());
            ~predict(~                                          if (useGlr) print(thiz());
                     ~state)~                                   print(semicolon());
                                                                if (useGlr)
                                                                {
                                                                  if (isCpp())
                                                                  {
~
  break~                                                            print(semicolon());
                                                                  }
                                                                  else
                                                                  {
~
  return ~                                                          if (isHaxe() || isTypescript() || isPython()) print(staticPrefix());
         ~PARSING~                                                  print(semicolon());
                                                                  }
                                                                }
                                                                else
                                                                {
~
  nonterminalId = -1~                                             print(semicolon());
                                                                }
~
~                                                               print(elseWithBraces());
                                                                if (hasCustomCode)
                                                                {
~
  nonterminalId = ~                                               print(staticPrefix());
                                                                  if (isGo())
                                                                  {
                  ~reduction~                                     }
                                                                  else
                                                                  {
                  ~REDUCTION~                                     }
                                                                  print(leftbracket());
                            ~reduce~                              print(rightbracket());
                                                                  print(semicolon());
~
  reduce = ~                                                      print(staticPrefix());
                                                                  if (isGo())
                                                                  {
           ~reduction~                                            }
                                                                  else
                                                                  {
           ~REDUCTION~                                            }
                                                                  print(leftbracket());
                     ~reduce + 1~                                 print(rightbracket());
                                                                  print(semicolon());
~
  if ~                                                            print(ifLeftParen());
     ~reduce >= 0~                                                print(ifRightParen());
                                                                  increaseIndent();
                                                                  print(leftBrace());
                                                                  if (useGlr)
                                                                  {
~
  if ~                                                              print(ifLeftParen());
                                                                    print(thiz());
                                                                    if (isGo())
                                                                    {
     ~IsUnambiguous~                                                }
                                                                    else
                                                                    {
     ~isUnambiguous~                                                }
                                                                    if (! isScala()) print(L"()");
                                                                    print(ifRightParen());
                                                                    print(leftBrace());
~
    ~                                                               print(thiz());
                                                                    print(isGo() && useGlr ? L"E" : L"e");
    ~xecute(reduce)~                                                print(semicolon());
~
  ~                                                                 print(elseWithBraces());
~
    ~                                                               print(thiz());
    ~deferredCode = ~                                               if (isGo())
                                                                    {
                    ~&DeferredCode{~
                                                                    }
                                                                    else
                                                                    {
                                                                      if (! isPython())
                                                                      {
                    ~new ~                                            }
                                                                      if (! isHaxe() && ! isTypescript()) print(staticPrefix());
                        ~DeferredCode(~                             }
                                                                    print(thiz());
                                      ~deferredCode, reduce, ~      print(thiz());
                                                             ~b0, ~ print(thiz());
                                                                  ~e0~
                                                                    if (isGo())
                                                                    {
                                                                     ~}~
                                                                    }
                                                                    else
                                                                    {
                                                                     ~)~
                                                                    }
                                                                    print(semicolon());
                                                                    increaseIndent();
                                                                    print(rightBrace());
                                                                    decreaseIndent();
                                                                  }
                                                                  else
                                                                  {
~
  ~                                                                 print(thiz());
                                                                    print(isGo() && useGlr ? L"E" : L"e");
  ~xecute(reduce)~                                                  print(semicolon());
                                                                  }
                                                                  print(rightBrace());
                                                                  decreaseIndent();
                                                                }
                                                                else
                                                                {
~
  nonterminalId = reduce~                                         print(semicolon());
                                                                }
                                                                if (trace)
                                                                {
~
  if ~                                                            print(ifLeftParen());
     ~shift >= 0~                                                 print(ifRightParen());
                                                                  printIndented(1, leftBrace());
                                                                  if (isCpp())
                                                                  {
~
    fprintf(stderr, ~                                             }
                                                                  else
                                                                  {
~
    ~                                                               print(writeTrace());
                                                                  }
    ~" "~                                                         print(endWriteTrace());
                                                                  print(semicolon());
                                                                  increaseIndent();
                                                                  print(rightBrace());
                                                                  decreaseIndent();
                                                                  if (isCpp())
                                                                  {
~
  fprintf(stderr, "reduce\" nonterminal=\"%s\" count=\"%d\"/>\n", ~ if (stringIntroducer()[0])
                                                                    {
                               ~Utf8Encoder::encode(~               }
                               ~xmlEscape(~                         print(isGo() ? L"nonterminal" : L"NONTERMINAL");
                                          ~[nonterminalId], 0).c_str()~
                                                                    if (stringIntroducer()[0])
                                                                    {
                               ~).c_str()~                          }
                               ~, symbols);~                      }
                                                                  else
                                                                  {
~
  ~                                                                 print(writeTrace());
  ~"reduce\" nonterminal=\"" + ~
                                                                    print(staticPrefix());
                               ~xmlEscape(~                         print(staticPrefix());
                                                                    print(isGo() ? L"nonterminal" : L"NONTERMINAL");
                                                                    print(leftbracket());
                                          ~nonterminalId~           print(rightbracket());
                                                        ~) + "\" count=\"" + ~
                                                                    if (isPython())
                                                                    {
                                                                             ~str(~
                                                                    }
                                                                    else if (isGo())
                                                                    {
                                                                             ~strconv.Itoa(~
                                                                    }
                                                                             ~symbols~
                                                                    if (isGo() || isPython())
                                                                    {
                                                                                           ~)~
                                                                    }
                                                                                     ~ + "\"/>~
                                                                    if (! isHaxe())
                                                                    {
                               ~\n"~
                                                                      print(endWriteTrace());
                                                                      print(semicolon());
                                                                    }
                                                                    else
                                                                    {
                               ~";
  trace(traceLine);~                                                }
                                                                  }
                                                                }
                                                                if (tree)
                                                                {
~
  if ~                                                            print(ifLeftParen());
     ~symbols > 0~                                                print(ifRightParen());
                                                                  printIndented(1, leftBrace());
                                                                  if (useGlr)
                                                                  {
                                                                    if (isCpp())
                                                                    {
~
    stack = stack->pop(symbols - 1);~                               }
                                                                    else
                                                                    {
                                                                      increaseIndent(2);
                                                                      if (isHaxe())
                                                                      {
~
for (i in 1...symbols)~                                               }
                                                                      else if (isScala())
                                                                      {
~
var i = 0
for (i <- 2 to symbols)~                                              }
                                                                      else if (isPython())
                                                                      {
~
for _ in range(symbols - 1):~                                         }
                                                                      else
                                                                      {
~
for ~                                                                   print(ifLeftParen());
                                                                        print(intVar());
    ~i~                                                                 print(assign());
      ~1; i < symbols; i++~                                             print(ifRightParen());
                                                                      }
                                                                      print(leftBrace());
~
  ~                                                                   print(thiz());
  ~stack = ~                                                          print(thiz());
           ~stack.link~                                               print(semicolon());
                                                                      print(rightBrace());
                                                                      decreaseIndent(2);
                                                                    }
~
    ~                                                               print(thiz());
    ~state = ~                                                      print(thiz());
             ~stack~                                                print(arrow());
                 ~state~                                            print(semicolon());
~
    ~                                                               print(thiz());
    ~bs = ~                                                         print(thiz());
          ~stack~                                                   print(arrow());
                ~pos~                                               print(semicolon());
                                                                    if (isCpp())
                                                                    {
~
    stack = stack->pop(1);~                                         }
                                                                    else
                                                                    {
~
    ~                                                                 print(thiz());
    ~stack = ~                                                        print(thiz());
             ~stack.link~                                             print(semicolon());
                                                                    }
                                                                  }
                                                                  else
                                                                  {
~
    ~                                                               print(thiz());
    ~top -= symbols * 3~                                            print(semicolon());
~
    state = ~                                                       print(thiz());
            ~iStack~                                                print(leftbracket());
                                                                    print(thiz());
                   ~top + 2~                                        print(rightbracket());
                                                                    print(semicolon());
~
    bs = ~                                                          print(thiz());
         ~iStack~                                                   print(leftbracket());
                                                                    print(thiz());
                ~top + 1~                                           print(rightbracket());
                                                                    print(semicolon());
                                                                  }
~
  ~                                                               printIndented(1, elseWithBraces());
~
    ~                                                             if (useGlr) print(thiz());
    ~bs = ~                                                       print(thiz());
          ~b1~                                                    print(semicolon());
~
    ~                                                             if (useGlr) print(thiz());
    ~es = ~                                                       print(thiz());
          ~b1~                                                    print(semicolon());
                                                                  increaseIndent();
                                                                  print(rightBrace());
                                                                  decreaseIndent();
~
  if ~                                                            print(ifLeftParen());
     ~nonterminalId == ~                                          if (useGlr) print(thiz());
                       ~target ~                                  if (isPython())
                                                                  {
                               ~and~                              }
                                                                  else
                                                                  {
                               ~&&~                               }
                                  ~ ~                             if (useGlr)
                                                                  {
                                                                    print(thiz());
                                    ~stack~                         print(arrow());
                                          ~link == ~                print(nullPtr());
                                                                  }
                                                                  else
                                                                  {
                                    ~t == ~                         print(thiz());
                                          ~top~                   }
                                                                  print(ifRightParen());
                                                                  printIndented(1, leftBrace());
~
    ~                                                             if (useGlr) print(thiz());
    ~bs = ~                                                       if (useGlr) print(thiz());
          ~bw~                                                    print(semicolon());
~
    ~                                                             if (useGlr) print(thiz());
    ~es = ~                                                       print(thiz());
          ~b1~                                                    print(semicolon());
~
    ~                                                             if (useGlr) print(thiz());
    ~bw = ~                                                       print(thiz());
          ~b1~                                                    print(semicolon());
                                                                  increaseIndent();
                                                                  print(rightBrace());
                                                                  decreaseIndent();
~
  if ~                                                            print(ifLeftParen());
                                                                  if (useGlr) print(thiz());
     ~eventHandler != ~                                           print(nullPtr());
                                                                  print(ifRightParen());
                                                                  printIndented(1, leftBrace());
                                                                  if (useGlr)
                                                                  {
~
    if ~                                                            print(ifLeftParen());
                                                                    print(thiz());
                                                                    if (isGo())
                                                                    {
       ~IsUnambiguous~                                              }
                                                                    else
                                                                    {
       ~isUnambiguous~                                              }
                                                                    if (! isScala()) print(L"()");
                                                                    print(ifRightParen());
                                                                    printIndented(2, leftBrace());
                                                                    increaseIndent();
                                                                  }
~
    ~                                                             if (useGlr) print(thiz());
    ~eventHandler~                                                print(arrow());
                                                                  if (isGo())
                                                                  {
                 ~N~                                              }
                                                                  else
                                                                  {
                 ~n~                                              }
                   ~onterminal(~                                  print(staticPrefix());
                                                                  print(isGo() ? L"nonterminal" : L"NONTERMINAL");
                                                                  print(leftbracket());
                               ~nonterminalId~                    print(rightbracket());
                                             ~, ~                 if (useGlr) print(thiz());
                                                ~bs, ~            if (useGlr) print(thiz());
                                                     ~es, symbols)~
                                                                  print(semicolon());
                                                                  if (useGlr)
                                                                  {
                                                                    decreaseIndent();
~
    ~                                                               printIndented(2, elseWithBraces());
~
      ~                                                             if (useGlr) print(thiz());
      ~deferredEvent = ~                                            if (isGo())
                                                                    {
                       ~&NonterminalEvent{&AbstractDeferredEvent{this.deferredEvent, nonterminal[nonterminalId], this.bs, this.es}, symbols}~
                                                                    }
                                                                    else
                                                                    {
                                                                      if (! isPython())
                                                                      {
                       ~new ~                                         }
                                                                      if (! isHaxe() && ! isTypescript()) print(staticPrefix());
                                                                      if (isJavascript() || isTypescript())
                                                                      {
                           ~DeferredEvent~                            }
                                                                      else
                                                                      {
                           ~NonterminalEvent~                         }
                           ~(~                                        print(thiz());
                             ~deferredEvent, ~                        print(staticPrefix());
                                             ~NONTERMINAL~            print(leftbracket());
                                             ~nonterminalId~          print(rightbracket());
                                                           ~, ~       print(thiz());
                                                              ~bs, ~
                                                                      print(thiz());
                                                                   ~es, symbols)~
                                                                      print(semicolon());
                                                                    }
                                                                    increaseIndent(2);
                                                                    print(rightBrace());
                                                                    decreaseIndent(2);
                                                                  }
                                                                  increaseIndent();
                                                                  print(rightBrace());
                                                                  decreaseIndent();
                                                                }
                                                                else
                                                                {
~
  if ~                                                            print(ifLeftParen());
     ~symbols > 0~                                                print(ifRightParen());
                                                                  printIndented(1, leftBrace());
                                                                  if (useGlr)
                                                                  {
                                                                    if (isCpp())
                                                                    {
~
    stack = stack->pop(symbols - 1);~                               }
                                                                    else
                                                                    {
                                                                      increaseIndent(2);
                                                                      if (isHaxe())
                                                                      {
~
for (i in 1...symbols)~                                               }
                                                                      else if (isScala())
                                                                      {
~
var i = 0
for (i <- 2 to symbols)~                                              }
                                                                      else if (isPython())
                                                                      {
~
for _ in range(symbols - 1):~                                         }
                                                                      else
                                                                      {
~
for ~                                                                   print(ifLeftParen());
                                                                        print(intVar());
    ~i~                                                                 print(assign());
      ~1; i < symbols; i++~                                             print(ifRightParen());
                                                                      }
                                                                      print(leftBrace());
~
  ~                                                                   print(thiz());
  ~stack = ~                                                          print(thiz());
           ~stack.link~                                               print(semicolon());
                                                                      print(rightBrace());
                                                                      decreaseIndent(2);
                                                                    }

~
    ~                                                               print(thiz());
    ~state = ~                                                      print(thiz());
             ~stack~                                                print(arrow());
                   ~state~                                          print(semicolon());
                                                                    if (tree)
                                                                    {
~
    ~                                                                 print(thiz());
    ~bs = ~                                                           print(thiz());
          ~stack~                                                     print(arrow());
                ~pos~                                                 print(semicolon());
                                                                    }
                                                                    if (isCpp())
                                                                    {
~
    stack = stack->pop(1);~                                         }
                                                                    else
                                                                    {
~
    ~                                                                 print(thiz());
    ~stack = ~                                                        print(thiz());
             ~stack.link~                                             print(semicolon());
                                                                    }
                                                                  }
                                                                  else
                                                                  {
~
    ~                                                               print(thiz());
    ~top -= symbols << 1;
    state = ~                                                       print(thiz());
            ~iStack~                                                print(leftbracket());
                                                                    print(thiz());
                   ~top + 1~                                        print(rightbracket());
                                                                    print(semicolon());
                                                                  }
                                                                  if (! useGlr)
                                                                  {
                                                                    increaseIndent();
                                                                    print(rightBrace());
                                                                    decreaseIndent();
                                                                  }
                                                                  else
                                                                  {
~
  ~                                                                 printIndented(1, elseWithBraces());
~
    ~                                                               print(thiz());
    ~bs = ~                                                         print(thiz());
          ~b1~                                                      print(semicolon());
                                                                    increaseIndent();
                                                                    print(rightBrace());
                                                                    decreaseIndent();
                                                                    if (tree)
                                                                    {
~
  if ~                                                                print(ifLeftParen());
     ~nonterminalId == ~                                              print(thiz());
                       ~target ~                                      if (isPython())
                                                                      {
                               ~and~                                  }
                                                                      else
                                                                      {
                               ~&&~                                   }
                                  ~ ~                                 print(thiz());
                                    ~stack~                           print(arrow());
                                          ~link == ~                  print(nullPtr());
                                                                      print(ifRightParen());
                                                                      printIndented(1, leftBrace());
~
    ~                                                                 print(thiz());
    ~bs = ~                                                           print(thiz());
          ~bw~                                                        print(semicolon());
~
    ~                                                                 print(thiz());
    ~bw = ~                                                           print(thiz());
          ~b1~                                                        print(semicolon());
                                                                      increaseIndent();
                                                                      print(rightBrace());
                                                                      decreaseIndent();
                                                                    }
                                                                  }
                                                                }
~
  ~                                                             if (useGlr) print(thiz());
  ~action = ~                                                   print(staticPrefix());
                                                                print(isGo() ? L"reduceAction" : L"goTo");
            ~(nonterminalId, ~                                  if (useGlr) print(thiz());
                             ~state)~                           print(semicolon());
                                                                print(rightBrace());
                                                                decreaseIndent();
                                                                print(rightBrace());
                                                                decreaseIndent();
                                                                if (useGlr)
                                                                {
                                                                  if (isScala())
                                                                  {
~
  ERROR~                                                          }
                                                                  else if (isCpp())
                                                                  {
~
  return PARSING;~                                                }
                                                                }
                                                                print(rightBrace());
                                                                if (isJavascript() && useGlr)
                                                                {
 ~;~                                                            }
~
~                                                               if ((tree || hasCustomCode) && useGlr)
                                                                {
                                                                  openMethod(boolType(), L"", L"isUnambiguous", L"", false, L"ParsingThread");
                                                                  print(leftBrace());
~
  return ~                                                        if (isPython())
                                                                  {
         ~len(self.threads) == 0~                                 }
                                                                  else
                                                                  {
                                                                    print(thiz());
         ~threads~                                                  print(arrow());
                                                                    if (isCpp())
                                                                    {
                 ~empty();~                                         }
                                                                    else
                                                                    {
                 ~isEmpty~                                            if (! isScala()) print(L"()");
                                                                      print(semicolon());
                                                                    }
                                                                  }
                                                                  print(rightBrace());
~
~                                                               }
                                                                if (hasCustomCode)
                                                                {
                                                                  if (useGlr)
                                                                  {
                                                                    if (isJavascript())
                                                                    {
~
this.executeDeferredCode = function()
~                                                                   }
                                                                    else if (isTypescript())
                                                                    {
~
executeDeferredCode()
~                                                                   }
                                                                    else
                                                                    {
                                                                      openMethod(voidType(), L"", L"executeDeferredCode", L"", false, L"ParsingThread");
                                                                    }
                                                                    print(leftBrace());
                                                                    increaseIndent();
~
if ~                                                                print(ifLeftParen());
                                                                    print(thiz());
   ~deferredCode != ~                                               print(nullPtr());
                                                                    print(ifRightParen());
                                                                    print(leftBrace());
                                                                    increaseIndent();
~
~                                                                   if (isJavascript() || isHaxe() || isScala() || isTypescript())
                                                                    {
~var ~                                                              }
                                                                    else if (! isGo() && ! isPython())
                                                                    {
~DeferredCode ~                                                     }
                                                                    if (isCpp()) print(L"*");
              ~predecessor~                                         print(assign());
                                                                    print(thiz());
                          ~deferredCode~                            print(arrow());
                                       ~link~                       print(semicolon());
~
~                                                                   print(thiz());
~deferredCode~                                                      print(arrow());
            ~link = ~                                               print(nullPtr());
                                                                    print(semicolon());
                                                                    if (isGo())
                                                                    {
~
for ~                                                               }
                                                                    else
                                                                    {
~
while ~                                                             }
                                                                    print(ifLeftParen());
      ~predecessor != ~                                             print(nullPtr());
                                                                    print(ifRightParen());
                                                                    print(leftBrace());
~
  ~                                                                 if (isJavascript() || isHaxe() || isScala() || isTypescript())
                                                                    {
  ~var ~                                                            }
                                                                    else if (! isGo() && ! isPython())
                                                                    {
  ~DeferredCode ~                                                   }
                                                                    if (isCpp()) print(L"*");
                 ~nextCode~                                         print(assign());
                          ~predecessor~                             print(arrow());
                                      ~link~                        print(semicolon());
~
  predecessor~                                                      print(arrow());
             ~link = ~                                              print(thiz());
                     ~deferredCode~                                 print(semicolon());
~
  ~                                                                 print(thiz());
  ~deferredCode = predecessor~                                      print(semicolon());
~
  predecessor = nextCode~                                           print(semicolon());
                                                                    print(rightBrace());
~
~                                                                   print(intVar());
~b0t~                                                               print(assign());
                                                                    print(thiz());
    ~b0~                                                            print(semicolon());
~
~                                                                   print(intVar());
~e0t~                                                               print(assign());
                                                                    print(thiz());
    ~e0~                                                            print(semicolon());
                                                                    if (isGo())
                                                                    {
~
for ~                                                               }
                                                                    else
                                                                    {
~
while ~                                                             }
                                                                    print(ifLeftParen());
                                                                    print(thiz());
      ~deferredCode != ~                                            print(nullPtr());
                                                                    print(ifRightParen());
                                                                    print(leftBrace());
~
  ~                                                                 print(thiz());
  ~b0 = ~                                                           print(thiz());
        ~deferredCode~                                              print(arrow());
                     ~b0~                                           print(semicolon());
~
  ~                                                                 print(thiz());
  ~e0 = ~                                                           print(thiz());
        ~deferredCode~                                              print(arrow());
                     ~e0~                                           print(semicolon());
~
  ~                                                                 print(thiz());
                                                                    print(isGo() ? L"E" : L"e");
  ~xecute(~                                                         print(thiz());
          ~deferredCode~                                            print(arrow());
                       ~codeId)~                                    print(semicolon());
                                                                    if (isCpp())
                                                                    {
~
  DeferredCode *next = deferredCode->link;
  delete deferredCode;
  deferredCode = next;~                                             }
                                                                    else
                                                                    {
~
  ~                                                                   print(thiz());
  ~deferredCode = ~                                                   print(thiz());
                  ~deferredCode~                                      print(arrow());
                               ~link~                                 print(semicolon());
                                                                    }
                                                                    print(rightBrace());
~
~                                                                   print(thiz());
~b0 = b0t~                                                          print(semicolon());
~
~                                                                   print(thiz());
~e0 = e0t~                                                          print(semicolon());
                                                                    decreaseIndent();
                                                                    print(rightBrace());
                                                                    decreaseIndent();
                                                                    print(rightBrace());
~
~                                                                 }
                                                                  openMethod(voidType(), L"", L"execute", L"int reduce", false, useGlr ? L"ParsingThread" : className.c_str());
                                                                  print(leftBrace());
                                                                  increaseIndent();
                                                                  if (! isPython())
                                                                  {
~
~                                                                   if (! isScala())
                                                                    {
~switch ~                                                           }
                                                                    print(ifLeftParen());
        ~reduce~                                                    print(ifRightParen());
                                                                    if (isScala())
                                                                    {
               ~ match~                                             }
                                                                    print(leftBrace());
                                                                  }
                                                                  int lastContentId = grammar->distinctCodeAnnotations.size() - 1;
                                                                  for (int contentId = 0; contentId <= lastContentId; ++contentId)
                                                                  {
                                                                    ProcessingInstruction *p = grammar->distinctCodeAnnotations[contentId];
                                                                    if (! isPython())
                                                                    {
~
case ~                                                              }
                                                                    else if (contentId == 0)
                                                                    {
~
if reduce == ~                                                      }
                                                                    else
                                                                    {
~
elif reduce == ~                                                    }
                                                                    print(format.toString<wchar_t>(contentId));
                                                                    print(caseIntroducer());
                                                                    increaseIndent();
                                                                    print(leftBrace());
                                                                    visitProcessingInstruction(p);
                                                                    print(rightBrace());
                                                                    if (! isScala() && ! isHaxe() && ! isGo() && ! isPython())
                                                                    {
~
break~                                                                print(semicolon());
                                                                    }
                                                                    decreaseIndent();
                                                                  }
                                                                  if (isScala())
                                                                  {
~
case _~                                                             print(caseIntroducer());
                                                                  }
                                                                  else if (! isPython())
                                                                  {
~
default~                                                            print(caseIntroducer());
                                                                  }
                                                                  if (! isScala() && ! isHaxe() && ! isGo() && ! isPython())
                                                                  {
~
  break~                                                            print(semicolon());
                                                                  }
                                                                  print(rightBrace());
                                                                  decreaseIndent();
                                                                  print(rightBrace());
~
~                                                               }
                                                                if (! isGo())
                                                                  decreaseIndent();
                                                              }

                                                              if (useGlr)
                                                              {
                                                                beginPublic();
                                                                printInitializer();
                                                                if (! isCpp())
                                                                  beginNonpublic();
                                                              }

                                                              WString name;
                                                              for (int i = 0; i < consumeMethods; ++i)
                                                              {
                                                                if (! isGo())
                                                                  increaseIndent();
                                                                name = L"consume";
                                                                if (i == 1) name += L"T";
                                                                openMethod(voidType(), L"", name.c_str(), L"int t", false, useGlr ? L"ParsingThread" : className.c_str());
                                                                print(leftBrace());
                                                                increaseIndent();
~
if ~                                                            print(ifLeftParen());
                                                                print(thiz());
   ~l1 == t~                                                    print(ifRightParen());
                                                                print(leftBrace());
                                                                increaseIndent();
                                                                if (tree && i == 0 && ! isLrParser)
                                                                {
                                                                  if (anyWhitespace && ! isLrParser)
                                                                  {
~
~                                                                   print(thiz());
~whitespace~                                                        print(isScala() ? L"" : L"()");
                                                                    print(semicolon());
                                                                  }
~
~
                                                                  print(thiz());
    ~eventHandler~                                                print(arrow());
                                                                  if (isGo())
                                                                  {
    ~T~                                                           }
                                                                  else
                                                                  {
    ~t~                                                           }
      ~erminal(~                                                  if (isJava() || isCSharp())
                                                                  {
                                                                    print(staticPrefix());
              ~TOKEN[~                                              print(thiz());
                     ~l1]~                                        }
                                                                  else if (isTypescript())
                                                                  {
                                                                    print(staticPrefix());
              ~TOKEN[~                                              print(thiz());
                     ~l1]~                                        }
                                                                  else if (isJavascript() || isHaxe())
                                                                  {
                                                                    print(staticPrefix());
              ~TOKEN[~                                              print(thiz());
                      ~l1]~                                       }
                                                                  else if (isScala())
                                                                  {
                                                                    print(staticPrefix());
              ~TOKEN(l1)~                                         }
                                                                  else if (isGo())
                                                                  {
              ~token[this.l1]~                                    }
                                                                  else
                                                                  {
                                                                    print(staticPrefix());
              ~TOKEN[~                                              print(thiz());
                     ~l1]~                                        }
              ~, ~                                                print(thiz());
                 ~b1, ~                                           print(thiz());
                      ~e1)~                                       print(semicolon());
                                                                }
~
~                                                               print(thiz());
~b0 = ~                                                         print(thiz());
      ~b1; ~                                                    print(thiz());
           ~e0 = ~                                              print(thiz());
                 ~e1;~                                          for (size_t k = 1; k < grammar->k; ++k)
                                                                {
                     ~ ~                                          print(thiz());
                       ~l~                                        print(format.toString<wchar_t>(k));
                         ~ = ~                                    print(thiz());
                             ~l~                                  print(format.toString<wchar_t>(k + 1));
                                                                  print(isPython() ? L"\n" : L"; ");
                               ~if ~                              print(ifLeftParen());
                                                                  print(thiz());
                                   ~l~                            print(format.toString<wchar_t>(k));
                                     ~ != 0~                      print(ifRightParen());
                                                                  if (isPython())
                                                                  {
                                                                    increaseIndent();
                                                                  }
                                                                  else
                                                                  {
                                           ~ {~                   }
~
~                                                                 print(thiz());
~b~                                                               print(format.toString<wchar_t>(k));
  ~ = ~                                                           print(thiz());
      ~b~                                                         print(format.toString<wchar_t>(k + 1));
        ~; ~                                                      print(thiz());
           ~e~                                                    print(format.toString<wchar_t>(k));
             ~ = ~                                                print(thiz());
                 ~e~                                              print(format.toString<wchar_t>(k + 1));
                   ~;~                                          }
                     ~ ~                                        print(thiz());
                       ~l~                                      print(format.toString<wchar_t>(grammar->k));
                         ~ = 0~                                 print(semicolon());
                                                                if (grammar->k > 1)
                                                                {
                         ~ ~                                      for (size_t k = 1; k < grammar->k; ++k)
                                                                  {
                                                                    if (! isPython())
                                                                    {
                           ~}~                                      }
                                                                    else
                                                                    {
                                                                      decreaseIndent();
                                                                    }
                                                                  }
                                                                }
                                                                decreaseIndent();
                                                                if (trace && ! isLrParser)
                                                                {
                                                                  if (isCpp())
                                                                  {
~
  fprintf(stderr, "  <parse terminal=\"%s\"%s%s%s/>\n", ~           if (stringIntroducer()[0])
                                                                    {
                                                      ~Utf8Encoder::encode(~
                                                                    }
                                                      ~xmlEscape(TOKEN[t], 0).c_str()~
                                                                    if (stringIntroducer()[0])
                                                                    {
                                                      ~).c_str()~   }
                                                      ~, (l1 == 0 ? "" : " input=\""),  (l1 == 0 ? "" : ~
                                                                    if (stringIntroducer()[0])
                                                                    {
                                                      ~Utf8Encoder::encode(~
                                                                    }
                                                      ~xmlEscape(lookaheadString().c_str(), 0).c_str()~
                                                                    if (stringIntroducer()[0])
                                                                    {
                                                      ~).c_str()~   }
                                                      ~), (l1 == 0 ? "" : "\""));~
                                                                  }
                                                                  else
                                                                  {
                                                                    if (isGo())
                                                                    {
~
  var inputAttr string
  if (this.l1 == 0) {
    inputAttr = ""
  } else {
    inputAttr = " input=\"" + xmlEscape(this.lookaheadString()) + "\""
  }~                                                                }
~
  ~                                                                 if (isHaxe())
                                                                    {
  ~trace(~
                                                                    }
                                                                    else
                                                                    {
                                                                      print(writeTrace());
                                                                    }
  ~"  <parse terminal=\"" + ~                                       print(staticPrefix());
                            ~xmlEscape(~                            print(staticPrefix());
                                                                    print(isGo() ? L"token" : L"TOKEN");
                                                                    print(leftbracket());
                                  ~t~                               print(rightbracket());
                                    ~) + "\"" + ~                   if (isGo())
                                                                    {
                                                ~inputAttr~         }
                                                                    else
                                                                    {
                                                ~(~                   if (isScala())
                                                                      {
                            ~if (l1 == 0) "" else~                    }
                                                                      else if (isPython())
                                                                      {
                            ~"" if self.l1 == 0 else~                 }
                                                                      else
                                                                      {
                                                                        print(thiz());
                            ~l1 == 0 ? "" :~                          }
                                           ~ " input=\"" + ~          print(staticPrefix());
                            ~xmlEscape(~                              print(thiz());
                            ~lookaheadString~                         if (! isScala()) print(L"()");
                                            ~) + "\"")~             }
                                                      ~ + "/>~      if (isHaxe())
                                                                    {
                                                             ~")~   }
                                                                    else
                                                                    {
                                                             ~\n"~    print(endWriteTrace());
                                                                    }
                                                                    print(semicolon());
                                                                  }
                                                                }
                                                                print(rightBrace());
                                                                if (hasBacktracking)
                                                                {
                                                                  if (grammar->noThrow)
                                                                  {
                                                                    print(isGo() ? L" " : L"\n");
~el~                                                                if (! isPython())
                                                                    {
   ~se ~                                                            }
       ~if ~                                                        print(ifLeftParen());
                                                                    print(thiz());
                                                                    print(token());
           ~ < 0~                                                   print(ifRightParen());
                                                                    print(leftBrace());
~
  ~                                                                 print(thiz());
  ~error(~                                                          print(thiz());
         ~b1, ~                                                     print(thiz());
              ~e1, -~                                               print(thiz());
                    ~l1, 0, 0)~                                     print(semicolon());
                                                                    if (i == 0)
                                                                    {
~
  ~                                                                   print(beginThrowStmt());
                                                                      print(thiz());
  ~bx, ~                                                              print(thiz());
       ~ex, ~                                                         print(thiz());
            ~sx, ~                                                    print(thiz());
                 ~lx, ~                                               print(thiz());
                      ~tx~                                            print(endThrowStmt());
                                                                      print(semicolon());
                                                                    }
                                                                    print(rightBrace());
                                                                  }
                                                                  print(isGo() ? L" " : L"\n");
~else~                                                            if (isPython()) print(L":");
                                                                  print(leftBrace());
~
  ~                                                               print(thiz());
  ~error(~                                                        print(thiz());
         ~b1, ~                                                   print(thiz());
              ~e1, 0, ~                                           print(thiz());
                      ~l1, t)~                                    print(semicolon());
                                                                  if (i == 0 && grammar->noThrow)
                                                                  {
~
  ~                                                                 print(beginThrowStmt());
                                                                    print(thiz());
  ~bx, ~                                                            print(thiz());
       ~ex, ~                                                       print(thiz());
            ~sx, ~                                                  print(thiz());
                 ~lx, ~                                             print(thiz());
                      ~tx~                                          print(endThrowStmt());
                                                                    print(semicolon());
                                                                  }
                                                                  print(rightBrace());
                                                                }
                                                                else
                                                                {
                                                                  print(isGo() ? L" " : L"\n");
~else~                                                            if (isPython()) print(L":");
                                                                  print(leftBrace());
~
  ~                                                               print(thiz());
  ~error(~                                                        print(thiz());
         ~b1, ~                                                   print(thiz());
              ~e1, 0, ~                                           print(thiz());
                      ~l1, t)~                                    print(semicolon());
                                                                  print(rightBrace());
                                                                }
                                                                decreaseIndent();
                                                                print(rightBrace());
~
~                                                               if (! isGo())
                                                                  decreaseIndent();
                                                              }

                                                              if (anyWhitespace)
                                                              {
                                                                if (complexWhitespace)
                                                                {
                                                                  if (! isGo())
                                                                    increaseIndent();
                                                                  openMethod (voidType(), L"", L"skip", L"int code", false, useGlr ? L"ParsingThread" : className.c_str());
                                                                  print(leftBrace());
                                                                  if (useGlr)
                                                                  {
                                                                    if (isJavascript())
                                                                    {
~
  var thread = new ParsingThread().copy(thisThread, 0);
  thread.setL1(code);
  thread.setB1(begin);
  thread.setE1(end);~                                               }
                                                                    else if (isGo())
                                                                    {
~
  thread := new(ParsingThread).copy(this, 0)
  thread.l1 = code
  thread.b1 = this.begin
  thread.e1 = this.end~                                             }
                                                                    else
                                                                    {
~
  ~                                                                   if (isHaxe() || isScala() || isTypescript())
                                                                      {
  ~var ~                                                              }
                                                                      else if (! isPython())
                                                                      {
  ~ParsingThread ~                                                    }
                                                                      if (isCpp()) print(L"*");
                  ~thread = ~                                         if (isCpp()) print(L"(");
                                                                      if (! isPython())
                                                                      {
                            ~new ~                                    }
                                                                      if (isScala() || isPython())
                                                                      {
                                                                        print(className.c_str());
                                 ~.~                                  }
                                 ~ParsingThread()~                    if (isCpp()) print(L")");
                                                                      print(arrow());
                                                 ~copy(~              if (isPython())
                                                                      {
                                                       ~self~         }
                                                                      else
                                                                      {
                                                       ~this~         }
                                                            ~, 0)~    print(semicolon());
~
  thread~                                                             print(arrow());
        ~l1 = code~                                                   print(semicolon());
~
  thread~                                                             print(arrow());
        ~b1 = ~                                                       if (useGlr) print(thiz());
              ~begin~                                                 print(semicolon());
~
  thread~                                                             print(arrow());
        ~e1 = ~                                                       if (useGlr) print(thiz());
              ~end~                                                   print(semicolon());
                                                                    }
                                                                  }
                                                                  else
                                                                  {
~
  ~                                                                 print(intVal());
  ~b0W~                                                             print(assign());
                                                                    print(thiz());
      ~b0; ~                                                        print(intVal());
           ~e0W~                                                    print(assign());
                                                                    print(thiz());

               ~e0~                                                 for (size_t k = 1; k < grammar->k; ++k)
                                                                    {
                  ~; ~                                                print(intVal());
                     ~l~                                              print(format.toString<wchar_t>(k));
                       ~W~                                            print(assign());
                                                                      print(thiz());
                         ~l~                                          print(format.toString<wchar_t>(k));
                                                                      print(semicolon());
                           ~
  ~                                                                   print(intVal());
  ~b~                                                                 print(format.toString<wchar_t>(k));
    ~W~                                                               print(assign());
                                                                      print(thiz());
      ~b~                                                             print(format.toString<wchar_t>(k));
        ~; ~                                                          print(intVal());
           ~e~                                                        print(format.toString<wchar_t>(k));
             ~W~                                                      print(assign());
                                                                      print(thiz());
               ~e~                                                    print(format.toString<wchar_t>(k));
                                                                    }
                                                                    print(semicolon());
~

  ~                                                                 print(thiz());
  ~l1 = code; ~                                                     print(thiz());
              ~b1 = ~                                               print(thiz());
                    ~begin; ~                                       print(thiz());
                            ~e1 = ~                                 print(thiz());
                                  ~end~                             print(semicolon());
                                                                    for (size_t k = 2; k <= grammar->k; ++k)
                                                                    {
~
  ~                                                                   print(thiz());
  ~l~                                                                 print(format.toString<wchar_t>(k));
    ~ = 0~                                                            print(semicolon());
                                                                    }
                                                                  }
                                                                  if (isLrParser)
                                                                  {
~
  ~                                                                 if (useGlr)
                                                                    {
                                                                      if (! isCpp())
                                                                      {
  ~thread = ~                                                         }
                                                                      if (isJava())
                                                                      {
                                                                        print(className.c_str());
  ~.this.~                                                            }
                                                                      else if (isCSharp() || isCpp() || isHaxe() || isScala() || isTypescript() || isGo() || isPython())
                                                                      {
                                                                        print(thiz());
  ~parser~                                                              print(arrow());
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      print(thiz());
                                                                    }
  ~parse(-1, ~                                                      print(format.toString<wchar_t>(grammar->whitespace->getStateId()));
                                                                    if (tree)
                                                                    {
             ~, ~                                                     print(nullPtr());
                                                                    }
                                                                    if (useGlr)
                                                                    {
             ~, thread~                                             }
             ~)~                                                    print(semicolon());
                                                                  }
                                                                  else
                                                                  {
~

  ~                                                                 print(thiz());
  ~try_~                                                            print(Format::acceptableName<WString>(grammar->whitespace->name).c_str());
                                                                    if (! isScala()) print(L"()");
                                                                    print(semicolon());
                                                                  }
                                                                  if (useGlr)
                                                                  {
                                                                    if (isJavascript())
                                                                    {
~
  end = thread.getEnd();~                                           }
                                                                    else
                                                                    {
~
  ~                                                                   if (useGlr) print(thiz());
  ~end = thread~                                                      print(arrow());
               ~end~                                                  print(semicolon());
                                                                    }
                                                                  }
                                                                  else
                                                                  {
~

  ~                                                                 print(thiz());
  ~b0 = b0W; ~                                                      print(thiz());
             ~e0 = e0W~                                             for (size_t k = 1; k < grammar->k; ++k)
                                                                    {
                      ~; ~                                            print(thiz());
                         ~l~                                          print(format.toString<wchar_t>(k));
                           ~ = l~                                     print(format.toString<wchar_t>(k));
                                ~W~                                   if (isPython())
                                                                      {
                                  ~
  ~                                                                   }
                                                                      else
                                                                      {
                                  ~; ~                                }
                                     ~if ~                            print(ifLeftParen());
                                                                      print(thiz());
                                          ~l~                         print(format.toString<wchar_t>(k));
                                            ~ != 0~                   print(ifRightParen());
                                                                      if (isPython())
                                                                      {
                                                                        increaseIndent();
                                                                      }
                                                                      else
                                                                      {
                                                  ~ {~                }
~
  ~                                                                   print(thiz());
  ~b~                                                                 print(format.toString<wchar_t>(k));
    ~ = b~                                                            print(format.toString<wchar_t>(k));
         ~W; ~                                                        print(thiz());
             ~e~                                                      print(format.toString<wchar_t>(k));
               ~ = e~                                                 print(format.toString<wchar_t>(k));
                    ~W~                                             }
                                                                    print(semicolon());
                                                                    if (isPython())
                                                                    {
                                                                      decreaseIndent(grammar->k - 1);
                                                                    }
                                                                    else
                                                                    {
                      ~ ~                                             for (size_t k = 1; k < grammar->k; ++k)
                                                                      {
                        ~}~                                           }
                                                                    }
                                                                  }
                                                                  print(rightBrace());
~
~                                                                 if (! isGo())
                                                                    decreaseIndent();
                                                                }
                                                                if (tree && ! isLrParser)
                                                                {
                                                                  if (! isGo())
                                                                    increaseIndent();
                                                                  openMethod (voidType(), L"", L"whitespace", L"");
                                                                  print(leftBrace());
~
  if ~                                                            print(ifLeftParen());
                                                                  print(thiz());
     ~e0 != ~                                                     print(thiz());
             ~b1~                                                 print(ifRightParen());
                                                                  increaseIndent();
                                                                  print(leftBrace());
                                                                  decreaseIndent();
~
    ~                                                             print(thiz());
    ~eventHandler~                                                print(arrow());
                                                                  if (isGo())
                                                                  {
    ~W~                                                           }
                                                                  else
                                                                  {
    ~w~                                                           }
      ~hitespace(~                                                print(thiz());
                 ~e0, ~                                           print(thiz());
                      ~b1)~                                       print(semicolon());
~
    ~                                                             print(thiz());
    ~e0 = ~                                                       print(thiz());
          ~b1~                                                    print(semicolon());
                                                                  increaseIndent();
                                                                  print(rightBrace());
                                                                  decreaseIndent();
                                                                  print(rightBrace());
                                                                  if (! isGo())
                                                                    decreaseIndent();
~
~                                                               }
                                                                if (! isGo())
                                                                  increaseIndent();
                                                                openMethod(intType(), L"", L"matchW", L"int tokenSetId", false, useGlr ? L"ParsingThread" : className.c_str());
                                                                print(leftBrace());
                                                                if (isScala())
                                                                {
~
  var continue = true
  var code = 0
  while (continue) {
    code = matcher(tokenSetId)~                                   increaseIndent(2);
                                                                }
                                                                else
                                                                {
                                                                  if (! isPython())
                                                                  {
~
  ~                                                                 print((isJavascript() || isTypescript() || isHaxe() || isGo()) ? L"var" : L"int");
    ~ code~                                                         if (isTypescript())
                                                                    {
          ~: number~                                                }
                                                                    else if (isGo())
                                                                    {
          ~ int~                                                    }
                                                                    if (isHaxe())
                                                                    {
          ~ = 0~                                                    }
                                                                    print(semicolon());
                                                                  }
                                                                  if (isHaxe() || isPython())
                                                                  {
~
  while ~                                                           print(ifLeftParen());
                                                                    print(isPython() ? L"T" : L"t");
        ~rue~                                                       print(ifRightParen());
                                                                  }
                                                                  else
                                                                  {
~
  for~                                                              if (! isGo())
                                                                    {
     ~ (;;)~                                                        }
                                                                  }
                                                                  increaseIndent();
                                                                  print(leftBrace());
                                                                  increaseIndent();
~
code = ~                                                          print(thiz());
       ~match(tokenSetId)~                                        print(semicolon());
                                                                }
                                                                if (simpleWhitespace)
                                                                {
                                                                  printMatch(0,
                                                                             0,
                                                                             0,
                                                                             grammar->simpleWhitespaceIntroducers,
                                                                             IFNOT,
                                                                             false,
                                                                             0,
                                                                             L"if");
                                                                  increaseIndent();
                                                                }
                                                                if (complexWhitespace)
                                                                {
                                                                  printMatch(0,
                                                                             0,
                                                                             0,
                                                                             grammar->complexWhitespaceIntroducers,
                                                                             IFNOT,
                                                                             false,
                                                                             0,
                                                                             L"if");
                                                                  if (isScala())
                                                                  {
~
  continue = false
}
else {
  ~                                                                 print(thiz());
  ~skip(code)
}~                                                                }
                                                                  else
                                                                  {
~
  break~                                                            print(semicolon());
                                                                    print(rightBrace());
~
~                                                                   print(thiz());
~skip(code);~                                                     }
                                                                }
                                                                else if (isScala())
                                                                {
~
continue = false~                                               }
                                                                else
                                                                {
~
break~                                                            print(semicolon());
                                                                }
                                                                if (simpleWhitespace)
                                                                {
                                                                  decreaseIndent();
                                                                  print(rightBrace());
                                                                }
                                                                decreaseIndent();
                                                                print(rightBrace());
                                                                decreaseIndent();
~
  ~                                                             if (! isScala())
                                                                {
  ~return ~                                                     }
          ~code~                                                print(semicolon());
                                                                print(rightBrace());
~
~                                                               if (! isGo())
                                                                  decreaseIndent();
                                                                printLookaheadMethods(grammar->lookaheadSets.lookaheadWCount, true);
                                                              }
                                                              printLookaheadMethods(grammar->lookaheadSets.lookaheadCount, false);

                                                              if (! isGo())
                                                                increaseIndent();

                                                              if (isScala())
                                                              {
                                                                if (! interfaceName.empty())
                                                                {
~
def parse(): Unit = {
  parse_~                                                         print(Format::acceptableName<WString>(grammar->startSymbol()->name).c_str());
        ~()
}
~                                                               }
                                                                if (memoization)
                                                                {
                                                                  int bits = Math::bits(grammar->conflictCount);
~
private def memoize(i: Int, e: Int, v: Int): Unit = {
  memo.put((e << ~                                                print(format.toString<wchar_t>(bits));
                 ~) + i, v)
}

private def memoized(i: Int, e: Int) = {
  memo.getOrElse((e << ~                                          print(format.toString<wchar_t>(bits));
                       ~) + i, 0)
}
~                                                               }
~
def error(b: Int, e: Int, s: Int, l: Int, t: Int): Int = {~   }
                                                              else
                                                              {
                                                                const wchar_t *returnType = isTypescript() && ! grammar->noThrow ? voidType() : L"int ";
                                                                openMethod (returnType, L"", L"error", L"int b, int e, int s, int l, int t", false, useGlr ? L"ParsingThread" : className.c_str());
                                                                print(leftBrace());
                                                              }
                                                              if (hasBacktracking)
                                                              {
                                                                increaseIndent();
~
if ~                                                            print(ifLeftParen());
                                                                if (grammar->noThrow)
                                                                {
                                                                  print(thiz());
   ~viable ~                                                      if (isPython())
                                                                  {
           ~and~                                                  }
                                                                  else
                                                                  {
           ~&&~                                                   }
              ~ ~                                               }
                ~e >= ~                                         print(thiz());
                      ~ex~                                      print(ifRightParen());
                                                                print(leftBrace());
                         ~
  ~                                                             print(thiz());
  ~bx = b~                                                      print(semicolon());
         ~
  ~                                                             print(thiz());
  ~ex = e~                                                      print(semicolon());
         ~
  ~                                                             print(thiz());
  ~sx = s~                                                      print(semicolon());
         ~
  ~                                                             print(thiz());
  ~lx = l~                                                      print(semicolon());
         ~
  ~                                                             print(thiz());
  ~tx = t~                                                      print(semicolon());
                                                                print(rightBrace());
                                                                decreaseIndent();
                                                                if (grammar->noThrow)
                                                                {
~
  ~                                                               print(thiz());
  ~viable = ~                                                     if (isPython())
                                                                  {
            ~F~                                                   }
                                                                  else
                                                                  {
            ~f~                                                   }
              ~alse~                                              print(semicolon());
                 ~
  return -s~                                                      print(semicolon());
                                                                }
                                                                else
                                                                {
                                                                  printFlush(1, true);
~
  ~                                                               print(beginThrowStmt());
                                                                  print(thiz());
  ~bx, ~                                                          print(thiz());
       ~ex, ~                                                     print(thiz());
            ~sx, ~                                                print(thiz());
                 ~lx, ~                                           print(thiz());
                      ~tx~                                        print(endThrowStmt());
                                                                  print(semicolon());
                                                                }
                                                              }
                                                              else
                                                              {
                                                                printFlush(1, true);
~
  ~                                                             if (isGo())
                                                                {
  ~panic(&ParseError{b, e, s, l, t~                               if (useGlr)
                                                                  {
                                  ~, false~                         if (tree)
                                                                    {
                                          ~, nil~                   }
                                                                  }
                                                ~})~            }
                                                                else
                                                                {
                                                                  print(beginThrowStmt());
  ~b, e, s, l, t~                                                 print(endThrowStmt());
                                                                  print(semicolon());
                                                                }
                                                              }
                                                              print(rightBrace());
~
~                                                             if (! isGo())
                                                                decreaseIndent();
                                                              if (isScala())
                                                              {
                                                                printInstanceCode();
                                                              }
                                                              privateVars();
                                                            }

                                                            void PrintCLike::printCountMethod()
                                                            {
                                                              Trace("PrintCLike::printCountMethod");

                                                              const wchar_t *clazz = useGlr ? L"StackNode" : className.c_str();
                                                              if (grammar->states->hasLookback)
                                                              {
                                                                openMethod(intType(), L"", L"lookback", L"int x, int y", false, clazz);
                                                                const wchar_t *lookback = isGo() ? L"lookback" : L"LOOKBACK";
                                                                print(leftBrace());
                                                                increaseIndent();
                                                                if (isGo())
                                                                {
~
i := lookback[y]
l := lookback[i]
for l > x {~                                                    }
                                                                else
                                                                {
~
~                                                                 print(intVar());
~i~                                                               print(assign());
                                                                  print(staticPrefix());
                                                                  print(lookback);
                                                                  print(leftbracket());
  ~y~                                                             print(rightbracket());
                                                                  print(semicolon());
~
~                                                                 print(intVar());
~l~                                                               print(assign());
                                                                  print(staticPrefix());
                                                                  print(lookback);
                                                                  print(leftbracket());
      ~i~                                                         print(rightbracket());
                                                                  print(semicolon());
~
while ~                                                           print(ifLeftParen());
      ~l > x~                                                     print(ifRightParen());
                                                                  print(leftBrace());
                                                                }
~
  i += 2~                                                       print(semicolon());
~
  l = ~                                                         print(staticPrefix());
                                                                print(lookback);
                                                                print(leftbracket());
      ~i~                                                       print(rightbracket());
                                                                print(semicolon());
                                                                print(rightBrace());
~
if ~                                                            print(ifLeftParen());
   ~l < x~                                                      print(ifRightParen());
                                                                print(leftBrace());
~
  ~                                                             print(returnKeyword());
  ~0~                                                           print(semicolon());
~
~                                                               print(elseWithBraces());
~
  ~                                                             print(returnKeyword());
                                                                print(staticPrefix());
                                                                print(lookback);
                                                                print(leftbracket());
             ~i + 1~                                            print(rightbracket());
                                                                print(semicolon());
                                                                print(rightBrace());
                                                                decreaseIndent();
                                                                print(rightBrace());
~
~                                                               if (isJavascript() && useGlr)
                                                                {
~
this.count = function(code)
~                                                               }
                                                                else if (isTypescript() && useGlr)
                                                                {
~
public count(code: number)
~                                                               }
                                                                else
                                                                {
                                                                  openMethod(intType(), L"", L"count", L"int code", false, clazz);
                                                                }
                                                                print(leftBrace());
                                                                increaseIndent();
~
~                                                               print(intVar());
~count~                                                         print(assign());
      ~0~                                                       print(semicolon());
                                                                int stackElementSize = tree ? 3 : 2;
                                                                if (isHaxe() || isScala())
                                                                {
                                                                  if (useGlr)
                                                                  {
~
var node = this~                                                    print(semicolon());
                                                                    if (isScala())
                                                                    {
~
var c = code~                                                       }
~
while ~                                                             print(ifLeftParen());
      ~node.state >= 0~                                             print(ifRightParen());
                                                                    print(leftBrace());
                                                                    if (isScala())
                                                                    {
~
  c = lookback(node.code, c)
  if (c == 0) return count
  count += 1~                                                       }
                                                                    else
                                                                    {
~
  code = lookback(node.code, code);
  if ~                                                                print(ifLeftParen());
     ~code == 0~                                                      print(ifRightParen());

               ~
    break~                                                            print(semicolon());
~
  count++~                                                            print(semicolon());
                                                                    }
~
  node = node.link~                                                 print(semicolon());
                                                                  }
                                                                  else
                                                                  {
~
var t = top~                                                        print(semicolon());
~
var c = code~                                                       print(semicolon());
~
while (t >= 0)~                                                     print(leftBrace());
~
  c = lookback(iStack~                                              print(leftbracket());
                     ~t~                                            print(rightbracket());
                       ~, c)~                                       print(semicolon());
~
  if ~                                                              print(ifLeftParen());
     ~c == 0~                                                       print(ifRightParen());
            ~ return count~                                         print(semicolon());
~
  count += 1~                                                       print(semicolon());
~
  t -= ~                                                            print(format.toString<wchar_t>(stackElementSize));
                                                                    print(semicolon());
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  if (useGlr)
                                                                  {
                                                                    if (isPython())
                                                                    {
~
node = self
while ~                                                             }
                                                                    else
                                                                    {
~
for ~                                                                 print(ifLeftParen());
                                                                      if (isJavascript() || isTypescript())
                                                                      {
    ~var ~                                                            }
                                                                      else if (!isGo())
                                                                      {
    ~StackNode ~                                                      }
                                                                      if (isCpp()) print(L"*");
               ~node~                                                 if (isTypescript())
                                                                      {
                      ~: StackNode~                                   }
                                                                      print(assign());
                      ~this; ~                                      }
                             ~node~                                 print(arrow());
                                  ~state >= 0~                      if (isPython())
                                                                    {
                                             ~:~                    }
                                                                    else
                                                                    {
                                             ~; node = node~          print(arrow());
                                                           ~link~     print(ifRightParen());
                                                                    }
                                                                    print(leftBrace());
~
  code = ~                                                          print(thiz());
                                                                    print(isGo() ? L"L" : L"l");
         ~ookback(node~                                             print(arrow());
                      ~code, code)~                                 print(semicolon());
                                                                  }
                                                                  else
                                                                  {
                                                                    if (isPython())
                                                                    {
~
t~                                                                    print(assign());
                                                                      print(thiz());
 ~top~                                                                print(semicolon());
~
while ~                                                               print(ifLeftParen());
                                                                      print(intVar());
      ~t >= 0~                                                      }
                                                                    else
                                                                    {
~
for ~                                                                 print(ifLeftParen());
                                                                      print(intVar());
    ~t~                                                               print(assign());
                                                                      print(thiz());
      ~top; t >= 0; t -= ~                                            print(format.toString<wchar_t>(stackElementSize));
                                                                    }
                                                                    print(ifRightParen());
                                                                    print(leftBrace());
~
  code = ~                                                          print(thiz());
         ~lookback(~                                                print(thiz());
                   ~iStack[t], code)~                               print(semicolon());
                                                                  }
~
  if ~                                                            print(ifLeftParen());
     ~code == 0~                                                  print(ifRightParen());
                                                                  increaseIndent();
                                                                  print(leftBrace());
~
  ~                                                               if (! isHaxe() && ! isScala())
                                                                  {
  ~break~                                                         }
                                                                  else
                                                                  {
  ~return count~                                                  }
                                                                  print(semicolon());
                                                                  print(rightBrace());
                                                                  decreaseIndent();
~
  count += 1~                                                     print(semicolon());
                                                                  if (isPython())
                                                                  {
                                                                    if (useGlr)
                                                                    {
~
  node = node.link~                                                 }
                                                                    else
                                                                    {
~
  t -= ~                                                              print(format.toString<wchar_t>(stackElementSize));
                                                                    }
                                                                  }
                                                                }
                                                                print(rightBrace());
~
~                                                               print(returnKeyword());
~count~                                                         print(semicolon());
                                                                decreaseIndent();
                                                                print(rightBrace());
                                                                if (isJavascript() && useGlr)
                                                                {
 ~;~                                                            }
~
~                                                             }
                                                            }

                                                            void PrintCLike::printLookaheadMethods(size_t lookaheadMethods, bool withWhitespace)
                                                            {
                                                              Trace("PrintCLike::printLookaheadMethods");

                                                              if (! isLrParser)
                                                              {
                                                                for (size_t k = 1; k <= lookaheadMethods; ++k)
                                                                {
                                                                  if (! isGo())
                                                                    increaseIndent();
                                                                  WString name(L"lookahead");
                                                                  name += format.toString<wchar_t>(k);
                                                                  name += withWhitespace ? L"W" : L"";
                                                                  WString args(k == 1 || ! unlimitedLookahead ? L"" : L"int prefix, ");
                                                                  args += L"int tokenSetId";
                                                                  openMethod(voidType(), L"", name.c_str(), args.c_str());
                                                                  print(leftBrace());
                                                                  wchar_t *kAsString = format.toString<wchar_t>(k);
                                                                  increaseIndent();
~
if ~                                                              print(ifLeftParen());
                                                                  print(thiz());
   ~l~                                                            print(kAsString);
     ~ == 0~                                                      print(ifRightParen());
                                                                  print(leftBrace());
           ~
  ~                                                               print(thiz());
  ~l~                                                             print(kAsString);
    ~ = ~                                                         print(thiz());
        ~match~                                                   if (withWhitespace)
                                                                  {
              ~W~                                                 }
                                                                  else if (isScala())
                                                                  {
              ~er~                                                }
              ~(tokenSetId)~                                      print(semicolon());
                           ~
  ~                                                               print(thiz());
  ~b~                                                             print(kAsString);
    ~ = ~                                                         print(thiz());
        ~begin~                                                   print(semicolon());
              ~
  ~                                                               print(thiz());
  ~e~                                                             print(kAsString);
    ~ = ~                                                         print(thiz());
        ~end~                                                     print(semicolon());
                                                                  print(rightBrace());
                                                                  if (unlimitedLookahead)
                                                                  {
                                                                    if (k >= 2)
                                                                    {
~
~                                                                     print(thiz());
~lk = prefix + ~                                                      print(thiz());
               ~l~                                                    print(kAsString);
                                                                      print(semicolon());
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    if (k == 2)
                                                                    {
~
~                                                                     print(thiz());
~lk = (~                                                              print(thiz());
       ~l2 << ~                                                       print(format.toString<wchar_t>(grammar->tokenSequenceFactory->tokenBits()));
              ~) | ~                                                  print(thiz());
                   ~l1~                                               print(semicolon());
                                                                    }
                                                                    else if (k > 2)
                                                                    {
~
~                                                                     print(thiz());
~lk |= ~                                                              print(thiz());
       ~l~                                                            print(kAsString);
         ~ << ~                                                       print(format.toString<wchar_t>((k - 1) * grammar->tokenSequenceFactory->tokenBits()));
                                                                      print(semicolon());
                                                                    }
                                                                  }
                                                                  decreaseIndent();
                                                                  print(rightBrace());
~
~                                                                 if (! isGo())
                                                                    decreaseIndent();
                                                                  if (grammar->tables && k + 1 >= grammar->tables)
                                                                  {
                                                                    break;
                                                                  }
                                                                }
                                                              }
                                                            }

                                                            void PrintCLike::printInitializer()
                                                            {
                                                              Trace("PrintCLike::printInitializer");

                                                              if (! isGo())
                                                                increaseIndent();
                                                              if (! useGlr)
                                                              {
                                                                const wchar_t *type = isJava()
                                                                                    ? L"CharSequence "
                                                                                    : isHaxe()
                                                                                    ? L"Bytes "
                                                                                    : stringType();
                                                                openMethod(type, L"", L"getInput", L"", true);
                                                                print(leftBrace());
~
  return ~                                                      print(thiz());
                                                                if (useGlr && (isCSharp() || isCpp() || isHaxe() || isScala() || isTypescript()))
                                                                {
         ~parser~                                                 print(arrow());
                                                                }
         ~input~                                                print(semicolon());
                                                                print(rightBrace());
                                                                if (isJavascript())
                                                                {
 ~;~                                                            }
~
~                                                               openMethod(intType(), L"", L"getTokenOffset", L"", true);
                                                                print(leftBrace());
~
  return ~                                                      print(thiz());
         ~b0~                                                   print(semicolon());
                                                                print(rightBrace());
                                                                if (isJavascript())
                                                                {
 ~;~                                                            }
~
~                                                               openMethod(intType(), L"", L"getTokenEnd", L"", true);
                                                                print(leftBrace());
~
  return ~                                                      print(thiz());
         ~e0~                                                   print(semicolon());
                                                                print(rightBrace());
                                                                if (isJavascript())
                                                                {
 ~;~                                                            }
~
~                                                             }
                                                              if (isJavascript())
                                                              {
                                                                if (useGlr)
                                                                {
~
this.reset = function~                                          }
                                                                else
                                                                {
~
function reset~                                                 }
              ~(l, b, e)
{~                                                            }
                                                              else if (isTypescript())
                                                              {
~
~                                                               if (! performanceTest && ! useGlr)
                                                                {
~private ~                                                      }
~reset(l: number, b: number, e: number)
{~                                                            }
                                                              else if (isHaxe())
                                                              {
~
public function reset(l, b, e)
{~                                                            }
                                                              else
                                                              {
                                                                openMethod(voidType(), isJava() ? L"final " : L"", L"reset", L"int l, int b, int e", false, useGlr ? L"ParsingThread" : className.c_str());
                                                                print(leftBrace());
                                                              }
~
  ~                                                           if (! isPython() && ! isScala())
                                                              {
  ~        ~                                                    print(wcslen(thiz()), L" ");
                                                              }
                                                              print(thiz());
           ~b0 = b; ~                                         print(thiz());
                    ~e0 = b~                                  print(semicolon());
                           ~
  ~                                                           print(thiz());
  ~l1 = l; ~                                                  print(thiz());
           ~b1 = b; ~                                         print(thiz());
                    ~e1 = e~                                  print(semicolon());
                                                              for (size_t k = 2; k <= grammar->k; ++k)
                                                              {
~
  ~                                                             print(thiz());
  ~l~                                                           print(format.toString<wchar_t>(k));
    ~ = 0; ~                                                    print(thiz());
           ~b~                                                  print(format.toString<wchar_t>(k));
             ~ = 0; ~                                           print(thiz());
                    ~e~                                         print(format.toString<wchar_t>(k));
                      ~ = 0~                                    print(semicolon());
                                                              }
~
  ~                                                           print(thiz());
  ~end = e~                                                   print(semicolon());
                                                              if (hasBacktracking)
                                                              {
~
  ~                                                             print(thiz());
  ~ex = -1~                                                     print(semicolon());
                                                                if (memoization)
                                                                {
                                                                  if (isJavascript() || isTypescript())
                                                                  {
~
  ~                                                                 print(thiz());
  ~memo = {};~                                                    }
                                                                  else if (isCSharp())
                                                                  {
~
  memo.Clear();~                                                  }
                                                                  else if (isScala())
                                                                  {
~
  memo.clear~                                                     }
                                                                  else if (isHaxe())
                                                                  {
~
  memo = new Map();~                                              }
                                                                  else if (isGo())
                                                                  {
~
  this.memo = make(map[int]int)~                                  }
                                                                  else if (isPython())
                                                                  {
~
  self.memo = {}~                                                 }
                                                                  else
                                                                  {
~
  memo.clear();~                                                  }
                                                                }
                                                                if (grammar->noThrow)
                                                                {
~
  ~                                                               print(thiz());
  ~viable = ~                                                     if (isPython())
                                                                  {
            ~T~                                                   }
                                                                  else
                                                                  {
            ~t~                                                   }
              ~rue~                                               print(semicolon());
                                                                }
                                                              }
                                                              if (tree && ! useGlr)
                                                              {
~
  ~                                                             print(thiz());
  ~eventHandler~                                                print(arrow());
                                                                if (isGo())
                                                                {
               ~R~                                              }
                                                                else
                                                                {
               ~r~                                              }
                 ~eset(~                                        print(thiz());
                       ~input)~                                 print(semicolon());
                                                              }
                                                              if (useGlr)
                                                              {
~
  ~                                                             if (isCSharp() || isCpp() || isHaxe() || isScala() || isTypescript() || isGo())
                                                                {
                                                                  print(thiz());
  ~parser~                                                        print(arrow());
                                                                }
  ~maxId = 0~                                                   print(semicolon());
~
  ~                                                             print(thiz());
  ~id = ~                                                       if (isCSharp() || isCpp() || isHaxe() || isScala() || isTypescript() || isGo())
                                                                {
                                                                  print(thiz());
        ~parser~                                                   print(arrow());
                                                                }
        ~maxId~                                                 print(semicolon());
                                                              }
                                                              print(rightBrace());
                                                              if (isJavascript() && useGlr)
                                                              {
 ~;~                                                          }
~
~                                                             if (useGlr || isJavascript() || isTypescript() || isHaxe() || isGo() || isPython())
                                                              {
                                                              }
                                                              else
                                                              {
                                                                openMethod(voidType(), L"", L"reset", L"");
                                                                print(leftBrace());
~
  reset(0, 0, 0)~                                               print(semicolon());
                                                                print(rightBrace());
~
~                                                             }
                                                              if (! isGo())
                                                                decreaseIndent();
                                                              // end of reset()
                                                            }

                                                            void PrintCLike::printASICall(Node *node)
                                                            {
                                                              Trace("PrintCLike::printASICall");

                                                              if (node->automaticSemicolonInsertion)
                                                              {
                                                                lineBuffer.clear();
                                                                Production *p = grammar->stringByName.byStringValue(L";");
                                                                Token::Code semicolonToken = p == 0 ? -1 : p->tokenCode;
                                                                TokenSequenceSet tss;
                                                                switch (node->automaticSemicolonInsertion)
                                                                {
                                                                case PLUSPLUS:
                                                                case MINUSMINUS:
                                                                  {
                                                                    p = grammar->stringByName.byStringValue(L"++");
                                                                    Token::Code plusplus = p == 0 ? -1 : p->tokenCode;
                                                                    p = grammar->stringByName.byStringValue(L"--");
                                                                    Token::Code minusminus = p == 0 ? -1 : p->tokenCode;
~
if ~                                                                print(ifLeftParen());
   ~(~                                                              print(thiz());
                                                                    print(token());
     ~ == ~                                                         print(format.toString<wchar_t>(grammar->externalTokenCode[plusplus]));
                                                                    if (isPython())
                                                                    {
          ~ or ~                                                    }
                                                                    else
                                                                    {
          ~ || ~                                                    }
                                                                    print(thiz());
                                                                    print(token());
               ~ == ~                                               print(format.toString<wchar_t>(grammar->externalTokenCode[minusminus]));
                    ~)~
                                                                    if (isPython())
                                                                    {
                      ~ and ~                                       }
                                                                    else
                                                                    {
                      ~ && ~                                        }
                                                                    print(thiz());
                           ~followsLineTerminator~                  if (! isScala())
                                                                    {
                                                 ~()~               }
                                                                    print(ifRightParen());
                                                                    tss.insert(grammar->tokenSequence(plusplus));
                                                                    tss.insert(grammar->tokenSequence(minusminus));
                                                                  }
                                                                  break;
                                                                case CONTINUE:
                                                                case BREAK:
                                                                case RETURN:
                                                                case THROW:
                                                                  {
~
if ~                                                                print(ifLeftParen());
                                                                    print(thiz());
                                                                    print(token());
   ~ != ~                                                           print(format.toString<wchar_t>(grammar->externalTokenCode[semicolonToken]));
                                                                    if (isPython())
                                                                    {
        ~ and ~                                                     }
                                                                    else
                                                                    {
        ~ && ~                                                      }
                                                                    print(thiz());
                                                                    print(token());
             ~ >= 0~
                                                                    if (isPython())
                                                                    {
                   ~ and ~                                          }
                                                                    else
                                                                    {
                   ~ && ~                                           }
                                                                    print(thiz());
                        ~followsLineTerminator~                     if (! isScala())
                                                                    {
                                              ~()~                  }
                                                                    print(ifRightParen());
                                                                    tss.insert(grammar->tokenSequence(semicolonToken));
                                                                  }
                                                                  break;
                                                                case SEMICOLON:
                                                                  {
                                                                    const bool afterRbrace = false;
                                                                    p = grammar->terminalByName.byNodeType(EndOfFile().getNodeType());
                                                                    Token::Code eof = p == 0 ? -1 : p->tokenCode;
                                                                    p = grammar->stringByName.byStringValue(L"}");
                                                                    Token::Code rbrace = p == 0 ? -1 : p->tokenCode;
~
if ~                                                                print(isPython() ? L"(" : ifLeftParen());
                                                                    print(thiz());
                                                                    print(token());
   ~ == ~                                                           print(format.toString<wchar_t>(grammar->externalTokenCode[rbrace]));
                                                                    if (isPython())
                                                                    {
        ~ or~                                                       }
                                                                    else if (isGo())
                                                                    {
        ~ ||~                                                       }
                                                                    printCodeSequenceAnnotation(grammar->tokenSequence(rbrace));
                                                                    if (isGo() || isPython())
                                                                    {
~
    ~                                                               }
                                                                    else
                                                                    {
~
 || ~                                                               }
                                                                    print(thiz());
                                                                    print(token());
    ~ == ~                                                          print(format.toString<wchar_t>(grammar->externalTokenCode[eof]));
                                                                    if (isPython())
                                                                    {
          ~ or~                                                     }
                                                                    else if (isGo())
                                                                    {
          ~ ||~                                                     }
                                                                    printCodeSequenceAnnotation(grammar->tokenSequence(eof));
                                                                    if (isGo() || isPython())
                                                                    {
~
    ~                                                               }
                                                                    else
                                                                    {
~
 || ~                                                               }
                                                                    print(thiz());
                                                                    print(token());
    ~ != ~                                                          print(format.toString<wchar_t>(grammar->externalTokenCode[semicolonToken]));
                                                                    if (isPython())
                                                                    {
         ~ and ~                                                    }
                                                                    else
                                                                    {
         ~ && ~                                                     }
                                                                    print(thiz());
                                                                    print(token());
              ~ >= 0~
                                                                    if (isPython())
                                                                    {
                    ~ and ~                                         }
                                                                    else
                                                                    {
                    ~ && ~                                          }
                                                                    if (afterRbrace)
                                                                    {
                         ~(~                                        }
                                                                    print(thiz());
                           ~followsLineTerminator~                  if (! isScala())
                                                                    {
                                                 ~()~               }
                                                                    if (afterRbrace)
                                                                    {
                                                                      if (isPython())
                                                                      {
                                                 ~ || ~               }
                                                                      else
                                                                      {
                                                 ~ or ~               }
                                                                      if (isCpp() || isCSharp() || isPython())
                                                                      {
                                                                        print(thiz());
                                                      ~input~
                                                            ~[~         print(thiz());
                                                              ~b0]~   }
                                                                      else
                                                                      {
                                                                        print(thiz());
                                                      ~input.char~      if (isTypescript() || isJavascript() || isHaxe())
                                                                        {
                                                                 ~Code~
                                                                        }
                                                                 ~At(~ print(thiz());
                                                                     ~b0)~
                                                                      }
                                                      ~ == 0x7D)~   }
                                                                    print(isPython() ? L"):" : ifRightParen());
                                                                  }
                                                                  break;
                                                                default:
                                                                  internalerr();
                                                                }
                                                                print(isScala() || isGo() ? L" { ": L" ");
                                                                if (! tss.empty()) printCodeSequenceAnnotation(tss);
                                                                print(isScala() || isGo() || isPython() ? L"": L"\n{");
~
  ~                                                             print(thiz());
  ~l1 = ~                                                       print(format.toString<wchar_t>(grammar->externalTokenCode[semicolonToken]));
                                                                print(semicolon());
        ~ ~                                                     printCodeSequenceAnnotation(grammar->tokenSequence(semicolonToken));
~
  ~                                                             print(thiz());
  ~e1 = ~                                                       print(thiz());
        ~b1~                                                    print(semicolon());
~
  ~                                                             print(thiz());
  ~end = ~                                                      print(thiz());
         ~e1~                                                   print(semicolon());
                                                                print(rightBrace());
                                                              }
                                                            }
