xquery version "1.0" encoding "UTF-8";

(: This file was generated on Thu Dec 26, 2024 06:58 (UTC+01) by REx v6.1-SNAPSHOT which is Copyright (c) 1979-2024 by Gunther Rademacher <grd@gmx.net> :)
(: REx command line: -q withoutSubtraction.ebnf -xquery :)

(:~
 : The parser that was generated for the withoutSubtraction grammar.
 :)
module namespace p="withoutSubtraction";
declare default function namespace "http://www.w3.org/2005/xpath-functions";

(:~
 : The index of the lexer state for accessing the combined
 : (i.e. level > 1) lookahead code.
 :)
declare variable $p:lk as xs:integer := 1;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the begin of the token that has been consumed.
 :)
declare variable $p:b0 as xs:integer := 2;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the end of the token that has been consumed.
 :)
declare variable $p:e0 as xs:integer := 3;

(:~
 : The index of the lexer state for accessing the code of the
 : level-1-lookahead token.
 :)
declare variable $p:l1 as xs:integer := 4;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the begin of the level-1-lookahead token.
 :)
declare variable $p:b1 as xs:integer := 5;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the end of the level-1-lookahead token.
 :)
declare variable $p:e1 as xs:integer := 6;

(:~
 : The index of the lexer state for accessing the token code that
 : was expected when an error was found.
 :)
declare variable $p:error as xs:integer := 7;

(:~
 : The index of the lexer state that points to the first entry
 : used for collecting action results.
 :)
declare variable $p:result as xs:integer := 8;

(:~
 : The codepoint to charclass mapping for 7 bit codepoints.
 :)
declare variable $p:MAP0 as xs:integer+ :=
(
  0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 28, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 1, 2, 3, 2, 2,
  4, 2, 5, 6, 2, 2, 2, 7, 7, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 2, 9, 2, 10, 11, 2, 12, 13, 14, 15, 16, 17, 18, 19, 20,
  21, 21, 22, 23, 21, 21, 21, 21, 21, 21, 24, 21, 21, 21, 25, 21, 21, 26, 2, 27, 2, 21, 2, 21, 21, 21, 21, 21, 21, 21,
  21, 21, 21, 21, 22, 23, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 25, 21, 21, 2, 2, 2, 2, 2
);

(:~
 : The codepoint to charclass mapping for codepoints below the surrogate block.
 :)
declare variable $p:MAP1 as xs:integer+ :=
(
  108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181, 181, 214,
  215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 254, 247, 270, 416, 310, 355, 369,
  383, 293, 293, 293, 285, 339, 331, 339, 331, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  339, 339, 410, 410, 410, 410, 410, 410, 410, 324, 339, 339, 339, 339, 339, 339, 339, 339, 394, 293, 293, 294, 292,
  293, 293, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 293, 293, 293,
  293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
  293, 293, 293, 293, 293, 293, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 293, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 28, 28, 0, 0, 28, 0, 0, 28, 1, 2, 3, 2, 2, 4, 2, 5, 6, 2, 2, 2, 7, 7, 2, 2, 2, 2, 2, 2, 2, 7, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 2, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 22, 23, 21, 21, 21, 21, 21,
  21, 21, 21, 21, 21, 21, 21, 21, 21, 2, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
  24, 21, 21, 21, 25, 21, 21, 26, 2, 27, 2, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 23, 21, 21, 21, 21, 21, 21,
  21, 21, 25, 21, 21, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 21, 21, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  8, 2, 9, 2, 10, 11
);

(:~
 : The codepoint to charclass mapping for codepoints above the surrogate block.
 :)
declare variable $p:MAP2 as xs:integer+ :=
(
  57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 2, 21, 2, 21, 21, 2
);

(:~
 : The token-set-id to DFA-initial-state mapping.
 :)
declare variable $p:INITIAL as xs:integer+ :=
(
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10
);

(:~
 : The DFA transition table.
 :)
declare variable $p:TRANSITION as xs:integer+ :=
(
  239, 239, 239, 239, 239, 239, 239, 239, 232, 318, 248, 238, 634, 583, 239, 239, 232, 318, 266, 238, 634, 583, 239,
  239, 262, 374, 266, 238, 634, 583, 239, 239, 274, 318, 278, 239, 634, 583, 239, 239, 286, 388, 266, 238, 634, 583,
  239, 239, 232, 589, 266, 238, 634, 583, 239, 239, 232, 318, 330, 298, 312, 583, 239, 239, 326, 338, 330, 346, 312,
  583, 239, 239, 360, 318, 278, 239, 634, 583, 239, 239, 232, 304, 236, 240, 368, 382, 239, 239, 396, 352, 254, 408,
  416, 583, 239, 239, 232, 424, 330, 346, 432, 583, 239, 239, 232, 440, 330, 346, 312, 583, 239, 239, 232, 448, 330,
  456, 312, 583, 239, 239, 232, 464, 330, 472, 312, 583, 239, 239, 232, 480, 330, 346, 312, 583, 239, 239, 232, 488,
  330, 346, 312, 583, 239, 239, 232, 496, 330, 346, 312, 583, 239, 239, 232, 504, 330, 346, 312, 583, 239, 239, 232,
  512, 330, 346, 312, 583, 239, 239, 232, 520, 330, 346, 312, 583, 239, 239, 232, 520, 330, 528, 536, 583, 239, 239,
  232, 520, 400, 544, 312, 583, 239, 239, 232, 520, 330, 346, 552, 583, 239, 239, 232, 560, 330, 568, 312, 583, 239,
  239, 232, 318, 290, 238, 576, 583, 239, 239, 597, 318, 605, 613, 634, 621, 239, 239, 232, 318, 266, 629, 642, 583,
  239, 239, 1, 194, 3, 4, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 576, 5, 24, 7, 0, 0, 0, 5, 0, 7, 26, 0, 0, 5, 0, 1, 194,
  2319, 4, 5, 0, 7, 0, 0, 0, 5, 0, 1, 194, 3, 4, 5, 0, 0, 0, 0, 0, 5, 0, 2187, 205, 3, 4, 5, 0, 7, 0, 0, 0, 5, 28, 7, 0,
  661, 0, 29, 29, 0, 0, 1, 1, 194, 194, 3, 0, 33, 29, 0, 33, 29, 0, 0, 0, 1, 1, 194, 194, 3, 4, 2188, 206, 3, 4, 5, 0,
  7, 0, 661, 661, 5, 0, 661, 0, 2176, 2188, 0, 206, 3, 4, 7, 29, 661, 0, 29, 29, 0, 0, 1, 1, 194, 194, 3, 2384, 1, 194,
  3, 4, 5, 18, 0, 20, 33, 0, 0, 576, 0, 0, 0, 0, 1, 1, 194, 194, 2319, 4, 41, 41, 448, 0, 0, 0, 0, 0, 2187, 2187, 205,
  205, 3, 4, 1, 194, 3, 2384, 5, 0, 7, 0, 661, 667, 5, 0, 7, 0, 0, 0, 32, 32, 0, 0, 36, 32, 0, 36, 0, 0, 0, 0, 661, 704,
  1, 1, 194, 194, 3, 4, 33, 29, 38, 33, 29, 0, 40, 0, 661, 768, 1, 1, 194, 194, 3, 4, 661, 832, 1, 1, 194, 194, 3, 4, 7,
  29, 661, 31, 29, 29, 0, 0, 661, 896, 1, 1, 194, 194, 3, 4, 7, 29, 661, 0, 29, 29, 35, 0, 661, 960, 1, 1, 194, 194, 3,
  4, 661, 1024, 1, 1, 194, 194, 3, 4, 661, 1088, 1, 1, 194, 194, 3, 4, 661, 1152, 1, 1, 194, 194, 3, 4, 661, 1216, 1, 1,
  194, 194, 3, 4, 661, 0, 1, 1, 194, 194, 3, 4, 7, 29, 21, 0, 29, 29, 0, 0, 33, 37, 0, 33, 29, 0, 0, 0, 7, 29, 661, 0,
  29, 34, 0, 0, 33, 29, 0, 33, 29, 39, 0, 0, 662, 0, 1, 1, 194, 194, 3, 4, 7, 30, 661, 0, 29, 29, 0, 0, 33, 0, 0, 33, 0,
  0, 0, 41, 41, 41, 0, 0, 0, 0, 0, 1, 0, 194, 0, 0, 4, 1, 194, 3, 4, 17, 0, 19, 0, 4503, 0, 4633, 0, 0, 0, 4503, 0,
  4633, 0, 0, 0, 0, 0, 0, 0, 42, 43, 43, 0, 0, 0, 0, 0, 7, 0, 0, 0, 33, 33, 0, 0, 33, 0, 0, 0, 0, 33, 33, 0, 33, 0, 0,
  0, 0
);

(:~
 : The DFA-state to expected-token-set mapping.
 :)
declare variable $p:EXPECTED as xs:integer+ :=
(
  14, 24, 11, 18, 24, 22, 26, 30, 30, 33, 34, 512, 523264, 2, 2, 4, 8, 16, 4, 4, 8, 16, 512, 512, 32, 64, 128, 256, 512,
  64, 256, 256, 64, 256, 64, 64, 64
);

(:~
 : The token-string table.
 :)
declare variable $p:TOKEN as xs:string+ :=
(
  "%ERROR",
  "CommentContentsE",
  "CommentContents",
  "PragmaContents",
  "DirPIContents",
  "CDataSectionContents",
  "CDSect",
  "CharData",
  "PI",
  "PITarget",
  "'A'",
  "'B'",
  "'C'",
  "'D'",
  "'E'",
  "'F'",
  "'G'",
  "'H'",
  "'I'"
);

(:~
 : Match next token in input string, starting at given index, using
 : the DFA entry state for the set of tokens that are expected in
 : the current context.
 :
 : @param $input the input string.
 : @param $begin the index where to start in input string.
 : @param $token-set the expected token set id.
 : @return a sequence of three: the token code of the result token,
 : with input string begin and end positions. If there is no valid
 : token, return the negative id of the DFA state that failed, along
 : with begin and end positions of the longest viable prefix.
 :)
declare function p:match($input as xs:string,
                         $begin as xs:integer,
                         $token-set as xs:integer) as xs:integer+
{
  let $result := $p:INITIAL[1 + $token-set]
  return p:transition($input,
                      $begin,
                      $begin,
                      $begin,
                      $result,
                      $result mod 64,
                      0)
};

(:~
 : The DFA state transition function. If we are in a valid DFA state, save
 : it's result annotation, consume one input codepoint, calculate the next
 : state, and use tail recursion to do the same again. Otherwise, return
 : any valid result or a negative DFA state id in case of an error.
 :
 : @param $input the input string.
 : @param $begin the begin index of the current token in the input string.
 : @param $current the index of the current position in the input string.
 : @param $end the end index of the result in the input string.
 : @param $result the result code.
 : @param $current-state the current DFA state.
 : @param $previous-state the  previous DFA state.
 : @return a sequence of three: the token code of the result token,
 : with input string begin and end positions. If there is no valid
 : token, return the negative id of the DFA state that failed, along
 : with begin and end positions of the longest viable prefix.
 :)
declare function p:transition($input as xs:string,
                              $begin as xs:integer,
                              $current as xs:integer,
                              $end as xs:integer,
                              $result as xs:integer,
                              $current-state as xs:integer,
                              $previous-state as xs:integer)
{
  if ($current-state eq 0) then
    let $result := $result idiv 64
    let $end := $end - $result idiv 32
    let $end := if ($end gt string-length($input)) then string-length($input) + 1 else $end
    return
      if ($result ne 0) then
      (
        $result mod 32 - 1,
        $begin,
        $end
      )
      else
      (
        - $previous-state,
        $begin,
        $current - 1
      )
  else
    let $c0 := (string-to-codepoints(substring($input, $current, 1)), 0)[1]
    let $c1 :=
      if ($c0 < 128) then
        $p:MAP0[1 + $c0]
      else if ($c0 < 55296) then
        let $c1 := $c0 idiv 16
        let $c2 := $c1 idiv 32
        return $p:MAP1[1 + $c0 mod 16 + $p:MAP1[1 + $c1 mod 32 + $p:MAP1[1 + $c2]]]
      else
        p:map2($c0, 1, 6)
    let $current := $current + 1
    let $i0 := 64 * $c1 + $current-state - 1
    let $i1 := $i0 idiv 8
    let $next-state := $p:TRANSITION[$i0 mod 8 + $p:TRANSITION[$i1 + 1] + 1]
    return
      if ($next-state > 63) then
        p:transition($input, $begin, $current, $current, $next-state, $next-state mod 64, $current-state)
      else
        p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
};

(:~
 : Recursively translate one 32-bit chunk of an expected token bitset
 : to the corresponding sequence of token strings.
 :
 : @param $result the result of previous recursion levels.
 : @param $chunk the 32-bit chunk of the expected token bitset.
 : @param $base-token-code the token code of bit 0 in the current chunk.
 : @return the set of token strings.
 :)
declare function p:token($result as xs:string*,
                         $chunk as xs:integer,
                         $base-token-code as xs:integer)
{
  if ($chunk = 0) then
    $result
  else
    p:token
    (
      ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
      if ($chunk < 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
      $base-token-code + 1
    )
};

(:~
 : Calculate expected token set for a given DFA state as a sequence
 : of strings.
 :
 : @param $state the DFA state.
 : @return the set of token strings.
 :)
declare function p:expected-token-set($state as xs:integer) as xs:string*
{
  if ($state > 0) then
    for $t in 0 to 0
    let $i0 := $t * 43 + $state - 1
    let $i1 := $i0 idiv 4
    return p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 + 1] + 1], $t * 32 + 1)
  else
    ()
};

(:~
 : Classify codepoint by doing a tail recursive binary search for a
 : matching codepoint range entry in MAP2, the codepoint to charclass
 : map for codepoints above the surrogate block.
 :
 : @param $c the codepoint.
 : @param $lo the binary search lower bound map index.
 : @param $hi the binary search upper bound map index.
 : @return the character class.
 :)
declare function p:map2($c as xs:integer, $lo as xs:integer, $hi as xs:integer) as xs:integer
{
  if ($lo > $hi) then
    0
  else
    let $m := ($hi + $lo) idiv 2
    return
      if ($p:MAP2[$m] > $c) then
        p:map2($c, $lo, $m - 1)
      else if ($p:MAP2[6 + $m] < $c) then
        p:map2($c, $m + 1, $hi)
      else
        $p:MAP2[12 + $m]
};

(:~
 : Parse X.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-X($input as xs:string, $state as item()+) as item()+
{
  let $state := p:lookahead1(9, $input, $state)             (: 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 10) then                       (: 'A' :)
      let $state := p:consume(10, $input, $state)           (: 'A' :)
      let $state := p:lookahead1(0, $input, $state)         (: CommentContentsE :)
      let $state := p:consume(1, $input, $state)            (: CommentContentsE :)
      return $state
    else if ($state[$p:l1] = 11) then                       (: 'B' :)
      let $state := p:consume(11, $input, $state)           (: 'B' :)
      let $state := p:lookahead1(1, $input, $state)         (: CommentContents :)
      let $state := p:consume(2, $input, $state)            (: CommentContents :)
      return $state
    else if ($state[$p:l1] = 12) then                       (: 'C' :)
      let $state := p:consume(12, $input, $state)           (: 'C' :)
      let $state := p:lookahead1(2, $input, $state)         (: PragmaContents :)
      let $state := p:consume(3, $input, $state)            (: PragmaContents :)
      return $state
    else if ($state[$p:l1] = 13) then                       (: 'D' :)
      let $state := p:consume(13, $input, $state)           (: 'D' :)
      let $state := p:lookahead1(3, $input, $state)         (: DirPIContents :)
      let $state := p:consume(4, $input, $state)            (: DirPIContents :)
      return $state
    else if ($state[$p:l1] = 14) then                       (: 'E' :)
      let $state := p:consume(14, $input, $state)           (: 'E' :)
      let $state := p:lookahead1(4, $input, $state)         (: CDataSectionContents :)
      let $state := p:consume(5, $input, $state)            (: CDataSectionContents :)
      return $state
    else if ($state[$p:l1] = 15) then                       (: 'F' :)
      let $state := p:consume(15, $input, $state)           (: 'F' :)
      let $state := p:lookahead1(5, $input, $state)         (: CDSect :)
      let $state := p:consume(6, $input, $state)            (: CDSect :)
      return $state
    else if ($state[$p:l1] = 16) then                       (: 'G' :)
      let $state := p:consume(16, $input, $state)           (: 'G' :)
      let $state := p:lookahead1(6, $input, $state)         (: CharData :)
      let $state := p:consume(7, $input, $state)            (: CharData :)
      return $state
    else if ($state[$p:l1] = 17) then                       (: 'H' :)
      let $state := p:consume(17, $input, $state)           (: 'H' :)
      let $state := p:lookahead1(8, $input, $state)         (: PITarget :)
      let $state := p:consume(9, $input, $state)            (: PITarget :)
      return $state
    else
      let $state := p:consume(18, $input, $state)           (: 'I' :)
      let $state := p:lookahead1(7, $input, $state)         (: PI :)
      let $state := p:consume(8, $input, $state)            (: PI :)
      return $state
  return $state
};

(:~
 : Create a textual error message from a parsing error.
 :
 : @param $input the input string.
 : @param $error the parsing error descriptor.
 : @return the error message.
 :)
declare function p:error-message($input as xs:string, $error as element(error)) as xs:string
{
  let $begin := xs:integer($error/@b)
  let $context := string-to-codepoints(substring($input, 1, $begin - 1))
  let $linefeeds := index-of($context, 10)
  let $line := count($linefeeds) + 1
  let $column := ($begin - $linefeeds[last()], $begin)[1]
  return
    string-join
    (
      (
        if ($error/@o) then
          ("syntax error, found ", $p:TOKEN[$error/@o + 1])
        else
          "lexical analysis failed",
        "&#10;",
        "while expecting ",
        if ($error/@x) then
          $p:TOKEN[$error/@x + 1]
        else
          let $expected := p:expected-token-set($error/@s)
          return
          (
            "["[exists($expected[2])],
            string-join($expected, ", "),
            "]"[exists($expected[2])]
          ),
        "&#10;",
        if ($error/@o or $error/@e = $begin) then
          ()
        else
          ("after successfully scanning ", string($error/@e - $begin), " characters beginning "),
        "at line ", string($line), ", column ", string($column), ":&#10;",
        "...", substring($input, $begin, 64), "..."
      ),
      ""
    )
};

(:~
 : Consume one token, i.e. compare lookahead token 1 with expected
 : token and in case of a match, shift lookahead tokens down such that
 : l1 becomes the current token, and higher lookahead tokens move down.
 : When lookahead token 1 does not match the expected token, raise an
 : error by saving the expected token code in the error field of the
 : lexer state.
 :
 : @param $code the expected token.
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:consume($code as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else if ($state[$p:l1] eq $code) then
  (
    subsequence($state, $p:l1, 3),
    0, 0, 0,
    subsequence($state, 7)
  )
  else
  (
    subsequence($state, 1, $p:error - 1),
    element error
    {
      attribute b {$state[$p:b1]},
      attribute e {$state[$p:e1]},
      if ($state[$p:l1] lt 0) then
        attribute s {- $state[$p:l1]}
      else
        (attribute o {$state[$p:l1]}, attribute x {$code})
    },
    subsequence($state, $p:error + 1)
  )
};

(:~
 : Lookahead one token on level 1.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:lookahead1($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:l1] ne 0) then
    $state
  else
    let $match :=
        p:match($input, $state[$p:e0], $set)
    return
    (
      $match[1],
      subsequence($state, $p:b0, 2),
      $match,
      subsequence($state, 7)
    )
};

(:~
 : Parse start symbol X from given string.
 :
 : @param $s the string to be parsed.
 : @return the result as generated by parser actions.
 :)
declare function p:parse-X($s as xs:string) as item()*
{
  let $state := (0, 1, 1, 0, 0, 0, false())
  let $state := p:parse-X($s, $state)
  let $error := $state[$p:error]
  return
    if ($error) then
      element ERROR {$error/@*, p:error-message($s, $error)}
    else
      subsequence($state, $p:result)
};

(: End :)
