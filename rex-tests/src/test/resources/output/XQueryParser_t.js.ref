// This file was generated on Thu Dec 26, 2024 07:00 (UTC+01) by REx v6.1-SNAPSHOT which is Copyright (c) 1979-2024 by Gunther Rademacher <grd@gmx.net>
// REx command line: -q XQueryParser.ebnf -ll 2 -backtrack -tree -javascript -a xquery.rex -t -name XQueryParser_t

                                                            // line 2 "XQueryParser.ebnf"
                                                            /* ***** BEGIN LICENSE BLOCK *****
                                                             * Distributed under the BSD license:
                                                             *
                                                             * Copyright (c) 2010, Ajax.org B.V.
                                                             * All rights reserved.
                                                             *
                                                             * Redistribution and use in source and binary forms, with or without
                                                             * modification, are permitted provided that the following conditions are met:
                                                             *     * Redistributions of source code must retain the above copyright
                                                             *       notice, this list of conditions and the following disclaimer.
                                                             *     * Redistributions in binary form must reproduce the above copyright
                                                             *       notice, this list of conditions and the following disclaimer in the
                                                             *       documentation and/or other materials provided with the distribution.
                                                             *     * Neither the name of Ajax.org B.V. nor the
                                                             *       names of its contributors may be used to endorse or promote products
                                                             *       derived from this software without specific prior written permission.
                                                             *
                                                             * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
                                                             * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                             * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                                                             * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
                                                             * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                                                             * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
                                                             * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
                                                             * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                                                             * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                                                             * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                                             *
                                                             * ***** END LICENSE BLOCK ***** */

                                                            define(function(require, exports, module)
                                                            {
                                                              var XQueryParser = exports.XQueryParser = function XQueryParser(string, parsingEventHandler)
                                                              {
                                                                init(string, parsingEventHandler);
                                                            // line 41 "XQueryParser_t.js"
  var thisParser = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var begin = b;
    var end = e;
    var state = s;
    var offending = o;
    var expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};
    this.isAmbiguousInput = function() {return false;};

    this.getMessage = function()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    };
  };

  function init(source, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = source;
    size = source.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  this.getTokenOffset = function()
  {
    return b0;
  };

  this.getTokenEnd = function()
  {
    return e0;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0; b2 = 0; e2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.reset = function(l, b, e)
  {
    reset(l, b, e);
  };

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? XQueryParser_t.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = XQueryParser_t.getTokenSet(- e.getState());
    }
    else
    {
      expected = [XQueryParser_t.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var message = e.getMessage();
    var found = this.getOffendingToken(e);
    var tokenSet = this.getExpectedTokenSet(e);
    var size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(272);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Module();
    consume(90);                    // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    lk = predict(0);
    if (lk == 1)
    {
      whitespace();
      parse_VersionDecl();
    }
    lookahead1W(272);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    lk = predict(1);
    switch (lk)
    {
    case 1:
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    consume(282);                   // 'xquery'
    lookahead1W(116);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 193:                       // 'encoding'
      consume(193);                 // 'encoding'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(144);                 // StringLiteral
      break;
    default:
      consume(278);                 // 'version'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(144);                 // StringLiteral
      lookahead1W(109);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 193)                // 'encoding'
      {
        consume(193);               // 'encoding'
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        consume(144);               // StringLiteral
      }
    }
    lookahead1W(28);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(138);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    consume(230);                   // 'module'
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consume(231);                   // 'namespace'
    lookahead1W(250);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(29);                // S^WS | '(:' | '='
    consume(107);                   // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(5);                     // URILiteral
    lookahead1W(28);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(272);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      lk = predict(2);
      if (lk != 1)
      {
        break;
      }
      lk = predict(3);
      if (lk == 5)
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 2:
        whitespace();
        parse_NamespaceDecl();
        break;
      case 3:
        whitespace();
        parse_Import();
        break;
      case 4:
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(28);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(272);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      lk = predict(4);
      if (lk != 1)
      {
        break;
      }
      lk = predict(5);
      switch (lk)
      {
      case 1:
        whitespace();
        parse_ContextItemDecl();
        break;
      case 2:
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(28);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    consume(101);                   // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    lk = predict(6);
    if (lk == 9)
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 1:
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 3:
      parse_BaseURIDecl();
      break;
    case 4:
      parse_ConstructionDecl();
      break;
    case 5:
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 7:
      parse_RevalidationDecl();
      break;
    case 8:
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(33);                // S^WS | '(:' | 'boundary-space'
    consume(163);                   // 'boundary-space'
    lookahead1W(133);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 72:                        // 'preserve'
      consume(72);                  // 'preserve'
      break;
    default:
      consume(78);                  // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(181);                   // 'default'
    lookahead1W(38);                // S^WS | '(:' | 'collation'
    consume(170);                   // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(5);                     // URILiteral
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function try_DefaultCollationDecl()
  {
    consumeT(180);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(181);                  // 'default'
    lookahead1W(38);                // S^WS | '(:' | 'collation'
    consumeT(170);                  // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consumeT(5);                    // URILiteral
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(32);                // S^WS | '(:' | 'base-uri'
    consume(161);                   // 'base-uri'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(5);                     // URILiteral
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'construction'
    consume(173);                   // 'construction'
    lookahead1W(133);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 78:                        // 'strip'
      consume(78);                  // 'strip'
      break;
    default:
      consume(72);                  // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(68);                // S^WS | '(:' | 'ordering'
    consume(243);                   // 'ordering'
    lookahead1W(131);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 242:                       // 'ordered'
      consume(242);                 // 'ordered'
      break;
    default:
      consume(273);                 // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(181);                   // 'default'
    lookahead1W(67);                // S^WS | '(:' | 'order'
    consume(241);                   // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(191);                   // 'empty'
    lookahead1W(121);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 47:                        // 'greatest'
      consume(47);                  // 'greatest'
      break;
    default:
      consume(54);                  // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function try_EmptyOrderDecl()
  {
    consumeT(180);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(181);                  // 'default'
    lookahead1W(67);                // S^WS | '(:' | 'order'
    consumeT(241);                  // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(191);                  // 'empty'
    lookahead1W(121);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 47:                        // 'greatest'
      consumeT(47);                 // 'greatest'
      break;
    default:
      consumeT(54);                 // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'copy-namespaces'
    consume(177);                   // 'copy-namespaces'
    lookahead1W(128);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(25);                // S^WS | '(:' | ','
    consume(97);                    // ','
    lookahead1W(123);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 72:                        // 'preserve'
      consume(72);                  // 'preserve'
      break;
    default:
      consume(61);                  // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 50:                        // 'inherit'
      consume(50);                  // 'inherit'
      break;
    default:
      consume(60);                  // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(114);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 179:                       // 'decimal-format'
      consume(179);                 // 'decimal-format'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      consume(181);                 // 'default'
      lookahead1W(45);              // S^WS | '(:' | 'decimal-format'
      consume(179);                 // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(180);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'grouping-separator' | 'infinity' | 'minus-sign' | 'pattern-separator' |
                                    // 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 101)                // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(29);              // S^WS | '(:' | '='
      consume(107);                 // '='
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(144);                 // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 40:                        // 'decimal-separator'
      consume(40);                  // 'decimal-separator'
      break;
    case 48:                        // 'grouping-separator'
      consume(48);                  // 'grouping-separator'
      break;
    case 49:                        // 'infinity'
      consume(49);                  // 'infinity'
      break;
    case 57:                        // 'minus-sign'
      consume(57);                  // 'minus-sign'
      break;
    case 34:                        // 'NaN'
      consume(34);                  // 'NaN'
      break;
    case 69:                        // 'percent'
      consume(69);                  // 'percent'
      break;
    case 68:                        // 'per-mille'
      consume(68);                  // 'per-mille'
      break;
    case 87:                        // 'zero-digit'
      consume(87);                  // 'zero-digit'
      break;
    case 41:                        // 'digit'
      consume(41);                  // 'digit'
      break;
    default:
      consume(67);                  // 'pattern-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    lk = predict(7);
    switch (lk)
    {
    case 1:
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    consume(211);                   // 'import'
    lookahead1W(73);                // S^WS | '(:' | 'schema'
    consume(254);                   // 'schema'
    lookahead1W(137);               // URILiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 5)                    // URILiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(5);                     // URILiteral
    lookahead1W(108);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 159)                  // 'at'
    {
      consume(159);                 // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(5);                   // URILiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ',' | ';'
        if (l1 != 97)               // ','
        {
          break;
        }
        consume(97);                // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        consume(5);                 // URILiteral
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 231:                       // 'namespace'
      consume(231);                 // 'namespace'
      lookahead1W(250);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(29);              // S^WS | '(:' | '='
      consume(107);                 // '='
      break;
    default:
      consume(181);                 // 'default'
      lookahead1W(47);              // S^WS | '(:' | 'element'
      consume(189);                 // 'element'
      lookahead1W(61);              // S^WS | '(:' | 'namespace'
      consume(231);                 // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    consume(211);                   // 'import'
    lookahead1W(60);                // S^WS | '(:' | 'module'
    consume(230);                   // 'module'
    lookahead1W(90);                // URILiteral | S^WS | '(:' | 'namespace'
    if (l1 == 231)                  // 'namespace'
    {
      consume(231);                 // 'namespace'
      lookahead1W(250);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(29);              // S^WS | '(:' | '='
      consume(107);                 // '='
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(5);                     // URILiteral
    lookahead1W(108);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 159)                  // 'at'
    {
      consume(159);                 // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(5);                   // URILiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ',' | ';'
        if (l1 != 97)               // ','
        {
          break;
        }
        consume(97);                // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        consume(5);                 // URILiteral
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consume(231);                   // 'namespace'
    lookahead1W(250);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(29);                // S^WS | '(:' | '='
    consume(107);                   // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(5);                     // URILiteral
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(181);                   // 'default'
    lookahead1W(115);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 189:                       // 'element'
      consume(189);                 // 'element'
      break;
    default:
      consume(205);                 // 'function'
    }
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consume(231);                   // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(5);                     // URILiteral
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function try_DefaultNamespaceDecl()
  {
    consumeT(180);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(181);                  // 'default'
    lookahead1W(115);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 189:                       // 'element'
      consumeT(189);                // 'element'
      break;
    default:
      consumeT(205);                // 'function'
    }
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consumeT(231);                  // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consumeT(5);                    // URILiteral
  }

  function parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(52);                // S^WS | '(:' | 'ft-option'
    consume(204);                   // 'ft-option'
    lookahead1W(81);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    consume(180);                   // 'declare'
    for (;;)
    {
      lookahead1W(170);             // S^WS | '%' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
      if (l1 != 147                 // '%'
       && l1 != 274)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 274:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 277:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    case 205:                       // 'function'
      whitespace();
      parse_FunctionDecl();
      break;
    case 38:                        // 'collection'
      whitespace();
      parse_CollectionDecl();
      break;
    case 213:                       // 'index'
      whitespace();
      parse_IndexDecl();
      break;
    default:
      whitespace();
      parse_ICDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    consume(274);                   // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    consume(147);                   // '%'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(171);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 92)                   // '('
    {
      consume(92);                  // '('
      lookahead1W(154);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 97)               // ','
        {
          break;
        }
        consume(97);                // ','
        lookahead1W(154);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      consume(94);                  // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    consumeT(147);                  // '%'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(171);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 92)                   // '('
    {
      consumeT(92);                 // '('
      lookahead1W(154);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 97)               // ','
        {
          break;
        }
        consumeT(97);               // ','
        lookahead1W(154);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      consumeT(94);                 // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    consume(277);                   // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(147);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 157)                  // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(106);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 29:                        // ':='
      consume(29);                  // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(199);                 // 'external'
      lookahead1W(104);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 29)                 // ':='
      {
        consume(29);                // ':='
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(43);                // S^WS | '(:' | 'context'
    consume(174);                   // 'context'
    lookahead1W(55);                // S^WS | '(:' | 'item'
    consume(220);                   // 'item'
    lookahead1W(147);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 157)                  // 'as'
    {
      consume(157);                 // 'as'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(106);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 29:                        // ':='
      consume(29);                  // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(199);                 // 'external'
      lookahead1W(104);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 29)                 // ':='
      {
        consume(29);                // ':='
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 != 97)                 // ','
      {
        break;
      }
      consume(97);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 != 97)                 // ','
      {
        break;
      }
      consumeT(97);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(143);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 157)                  // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(143);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 157)                  // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    consume(283);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(138);                   // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    consumeT(283);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(138);                  // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(66);                // S^WS | '(:' | 'option'
    consume(239);                   // 'option'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consume(144);                   // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consume(97);                  // ','
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consumeT(97);                 // ','
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 250)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 250)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    lk = predict(8);
    switch (lk)
    {
    case 1:
      parse_ForClause();
      break;
    case 2:
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    lk = predict(8);
    switch (lk)
    {
    case 1:
      try_ForClause();
      break;
    case 2:
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 203:                       // 'for'
    case 225:                       // 'let'
      parse_InitialClause();
      break;
    case 279:                       // 'where'
      parse_WhereClause();
      break;
    case 207:                       // 'group'
      parse_GroupByClause();
      break;
    case 178:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 203:                       // 'for'
    case 225:                       // 'let'
      try_InitialClause();
      break;
    case 279:                       // 'where'
      try_WhereClause();
      break;
    case 207:                       // 'group'
      try_GroupByClause();
      break;
    case 178:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    consume(203);                   // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consume(97);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    consumeT(203);                  // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consumeT(97);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(164);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 157)                  // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(158);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 152)                  // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(150);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 159)                  // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(122);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 257)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(212);                   // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(164);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 157)                  // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(158);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 152)                  // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(150);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 159)                  // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(122);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 257)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(212);                  // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    consume(152);                   // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(191);                   // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    consumeT(152);                  // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(191);                  // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    consume(159);                   // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    consumeT(159);                  // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    consume(257);                   // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  function try_FTScoreVar()
  {
    consumeT(257);                  // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    consume(225);                   // 'let'
    lookahead1W(96);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consume(97);                  // ','
      lookahead1W(96);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    consumeT(225);                  // 'let'
    lookahead1W(96);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consumeT(97);                 // ','
      lookahead1W(96);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 146:                       // '$'
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(105);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 157)                // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(27);                // S^WS | '(:' | ':='
    consume(29);                    // ':='
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    switch (l1)
    {
    case 146:                       // '$'
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(105);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 157)                // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(27);                // S^WS | '(:' | ':='
    consumeT(29);                   // ':='
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    consume(203);                   // 'for'
    lookahead1W(135);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 269:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    consumeT(203);                  // 'for'
    lookahead1W(135);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 269:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    consume(269);                   // 'tumbling'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consume(132);                   // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 157)                  // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(212);                   // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    if (l1 == 194                   // 'end'
     || l1 == 238)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    consumeT(269);                  // 'tumbling'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consumeT(132);                  // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 157)                  // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(212);                  // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    if (l1 == 194                   // 'end'
     || l1 == 238)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    consume(259);                   // 'sliding'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consume(132);                   // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 157)                  // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(212);                   // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    consumeT(259);                  // 'sliding'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consumeT(132);                  // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 157)                  // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(212);                  // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    consume(262);                   // 'start'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consume(84);                    // 'when'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    consumeT(262);                  // 'start'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consumeT(84);                   // 'when'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 238)                  // 'only'
    {
      consume(238);                 // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consume(194);                   // 'end'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consume(84);                    // 'when'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 238)                  // 'only'
    {
      consumeT(238);                // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consumeT(194);                  // 'end'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consumeT(84);                   // 'when'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 146)                  // '$'
    {
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 159)                  // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(153);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 73)                   // 'previous'
    {
      consume(73);                  // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(127);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 59)                   // 'next'
    {
      consume(59);                  // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 146)                  // '$'
    {
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_CurrentItem();
    }
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 159)                  // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(153);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 73)                   // 'previous'
    {
      consumeT(73);                 // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_PreviousItem();
    }
    lookahead1W(127);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 59)                   // 'next'
    {
      consumeT(59);                 // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    consume(178);                   // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    consumeT(178);                  // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    consume(279);                   // 'where'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    consumeT(279);                  // 'where'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    consume(207);                   // 'group'
    lookahead1W(34);                // S^WS | '(:' | 'by'
    consume(114);                   // 'by'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    consumeT(207);                  // 'group'
    lookahead1W(34);                // S^WS | '(:' | 'by'
    consumeT(114);                  // 'by'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 97)                 // ','
      {
        break;
      }
      consume(97);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 97)                 // ','
      {
        break;
      }
      consumeT(97);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(182);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 29                    // ':='
     || l1 == 157)                  // 'as'
    {
      if (l1 == 157)                // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(27);              // S^WS | '(:' | ':='
      consume(29);                  // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    if (l1 == 170)                  // 'collation'
    {
      consume(170);                 // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(5);                   // URILiteral
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(182);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 29                    // ':='
     || l1 == 157)                  // 'as'
    {
      if (l1 == 157)                // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(27);              // S^WS | '(:' | ':='
      consumeT(29);                 // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    if (l1 == 170)                  // 'collation'
    {
      consumeT(170);                // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consumeT(5);                  // URILiteral
    }
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 241:                       // 'order'
      consume(241);                 // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consume(114);                 // 'by'
      break;
    default:
      consume(261);                 // 'stable'
      lookahead1W(67);              // S^WS | '(:' | 'order'
      consume(241);                 // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consume(114);                 // 'by'
    }
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 241:                       // 'order'
      consumeT(241);                // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consumeT(114);                // 'by'
      break;
    default:
      consumeT(261);                // 'stable'
      lookahead1W(67);              // S^WS | '(:' | 'order'
      consumeT(241);                // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consumeT(114);                // 'by'
    }
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 97)                 // ','
      {
        break;
      }
      consume(97);                  // ','
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 97)                 // ','
      {
        break;
      }
      consumeT(97);                 // ','
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 158                   // 'ascending'
     || l1 == 185)                  // 'descending'
    {
      switch (l1)
      {
      case 158:                     // 'ascending'
        consume(158);               // 'ascending'
        break;
      default:
        consume(185);               // 'descending'
      }
    }
    lookahead1W(179);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 191)                  // 'empty'
    {
      consume(191);                 // 'empty'
      lookahead1W(121);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 47:                      // 'greatest'
        consume(47);                // 'greatest'
        break;
      default:
        consume(54);                // 'least'
      }
    }
    lookahead1W(177);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 170)                  // 'collation'
    {
      consume(170);                 // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(5);                   // URILiteral
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 158                   // 'ascending'
     || l1 == 185)                  // 'descending'
    {
      switch (l1)
      {
      case 158:                     // 'ascending'
        consumeT(158);              // 'ascending'
        break;
      default:
        consumeT(185);              // 'descending'
      }
    }
    lookahead1W(179);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 191)                  // 'empty'
    {
      consumeT(191);                // 'empty'
      lookahead1W(121);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 47:                      // 'greatest'
        consumeT(47);               // 'greatest'
        break;
      default:
        consumeT(54);               // 'least'
      }
    }
    lookahead1W(177);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 170)                  // 'collation'
    {
      consumeT(170);                // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consumeT(5);                  // URILiteral
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 260:                       // 'some'
      consume(260);                 // 'some'
      break;
    default:
      consume(196);                 // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 157)                  // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(212);                   // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consume(97);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(110);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 157)                // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consume(212);                 // 'in'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    consume(253);                   // 'satisfies'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 260:                       // 'some'
      consumeT(260);                // 'some'
      break;
    default:
      consumeT(196);                // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 157)                  // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(212);                  // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consumeT(97);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(110);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 157)                // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consumeT(212);                // 'in'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    consumeT(253);                  // 'satisfies'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    consume(264);                   // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(94);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consume(181);                   // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    consumeT(264);                  // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(94);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consumeT(181);                  // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      consume(165);                 // 'case'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      consumeT(165);                // 'case'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    consume(271);                   // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(94);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consume(181);                   // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 146)                  // '$'
    {
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    consumeT(271);                  // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(94);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_CaseClause();
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consumeT(181);                  // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 146)                  // '$'
    {
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    consume(165);                   // 'case'
    lookahead1W(261);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 146)                  // '$'
    {
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(157);                 // 'as'
    }
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    consumeT(165);                  // 'case'
    lookahead1W(261);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 146)                  // '$'
    {
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(157);                // 'as'
    }
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceTypeUnion();
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(134);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 135)                // '|'
      {
        break;
      }
      consume(135);                 // '|'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(134);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 135)                // '|'
      {
        break;
      }
      consumeT(135);                // '|'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    consume(210);                   // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(94);                    // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consume(79);                    // 'then'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(190);                   // 'else'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    consumeT(210);                  // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(94);                   // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consumeT(79);                   // 'then'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(190);                  // 'else'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(184);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
      if (l1 != 168)                // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(184);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
      if (l1 != 168)                // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    consume(268);                   // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(283);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_TryTargetExpr();
    consume(138);                   // '}'
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    consumeT(268);                  // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(283);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_TryTargetExpr();
    consumeT(138);                  // '}'
  }

  function parse_TryTargetExpr()
  {
    eventHandler.startNonterminal("TryTargetExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("TryTargetExpr", e0);
  }

  function try_TryTargetExpr()
  {
    try_Expr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    consume(168);                   // 'catch'
    lookahead1W(251);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_CatchErrorList();
    consume(283);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(138);                   // '}'
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    consumeT(168);                  // 'catch'
    lookahead1W(251);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_CatchErrorList();
    consumeT(283);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(138);                  // '}'
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | '{' | '|'
      if (l1 != 135)                // '|'
      {
        break;
      }
      consume(135);                 // '|'
      lookahead1W(251);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | '{' | '|'
      if (l1 != 135)                // '|'
      {
        break;
      }
      consumeT(135);                // '|'
      lookahead1W(251);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 240)                // 'or'
      {
        break;
      }
      consume(240);                 // 'or'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      if (l1 != 240)                // 'or'
      {
        break;
      }
      consumeT(240);                // 'or'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      if (l1 != 155)                // 'and'
      {
        break;
      }
      consume(155);                 // 'and'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      if (l1 != 155)                // 'and'
      {
        break;
      }
      consumeT(155);                // 'and'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    if (l1 == 91                    // '!='
     || l1 == 102                   // '<'
     || l1 == 104                   // '<<'
     || l1 == 105                   // '<='
     || l1 == 107                   // '='
     || l1 == 108                   // '>'
     || l1 == 109                   // '>='
     || l1 == 110                   // '>>'
     || l1 == 195                   // 'eq'
     || l1 == 206                   // 'ge'
     || l1 == 208                   // 'gt'
     || l1 == 219                   // 'is'
     || l1 == 224                   // 'le'
     || l1 == 227                   // 'lt'
     || l1 == 233)                  // 'ne'
    {
      switch (l1)
      {
      case 195:                     // 'eq'
      case 206:                     // 'ge'
      case 208:                     // 'gt'
      case 224:                     // 'le'
      case 227:                     // 'lt'
      case 233:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 104:                     // '<<'
      case 110:                     // '>>'
      case 219:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_FTContainsExpr();
    if (l1 == 91                    // '!='
     || l1 == 102                   // '<'
     || l1 == 104                   // '<<'
     || l1 == 105                   // '<='
     || l1 == 107                   // '='
     || l1 == 108                   // '>'
     || l1 == 109                   // '>='
     || l1 == 110                   // '>>'
     || l1 == 195                   // 'eq'
     || l1 == 206                   // 'ge'
     || l1 == 208                   // 'gt'
     || l1 == 219                   // 'is'
     || l1 == 224                   // 'le'
     || l1 == 227                   // 'lt'
     || l1 == 233)                  // 'ne'
    {
      switch (l1)
      {
      case 195:                     // 'eq'
      case 206:                     // 'ge'
      case 208:                     // 'gt'
      case 224:                     // 'le'
      case 227:                     // 'lt'
      case 233:                     // 'ne'
        try_ValueComp();
        break;
      case 104:                     // '<<'
      case 110:                     // '>>'
      case 219:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_FTContainsExpr();
    }
  }

  function parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    if (l1 == 115)                  // 'contains'
    {
      consume(115);                 // 'contains'
      lookahead1W(76);              // S^WS | '(:' | 'text'
      consume(265);                 // 'text'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 85)                 // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  function try_FTContainsExpr()
  {
    try_StringConcatExpr();
    if (l1 == 115)                  // 'contains'
    {
      consumeT(115);                // 'contains'
      lookahead1W(76);              // S^WS | '(:' | 'text'
      consumeT(265);                // 'text'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 85)                 // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 136)                // '||'
      {
        break;
      }
      consume(136);                 // '||'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 136)                // '||'
      {
        break;
      }
      consumeT(136);                // '||'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    if (l1 == 266)                  // 'to'
    {
      consume(266);                 // 'to'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    if (l1 == 266)                  // 'to'
    {
      consumeT(266);                // 'to'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 96                  // '+'
       && l1 != 98)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 96:                      // '+'
        consume(96);                // '+'
        break;
      default:
        consume(98);                // '-'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 96                  // '+'
       && l1 != 98)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 96:                      // '+'
        consumeT(96);               // '+'
        break;
      default:
        consumeT(98);               // '-'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 95                  // '*'
       && l1 != 186                 // 'div'
       && l1 != 209                 // 'idiv'
       && l1 != 228)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 95:                      // '*'
        consume(95);                // '*'
        break;
      case 186:                     // 'div'
        consume(186);               // 'div'
        break;
      case 209:                     // 'idiv'
        consume(209);               // 'idiv'
        break;
      default:
        consume(228);               // 'mod'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      if (l1 != 95                  // '*'
       && l1 != 186                 // 'div'
       && l1 != 209                 // 'idiv'
       && l1 != 228)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 95:                      // '*'
        consumeT(95);               // '*'
        break;
      case 186:                     // 'div'
        consumeT(186);              // 'div'
        break;
      case 209:                     // 'idiv'
        consumeT(209);              // 'idiv'
        break;
      default:
        consumeT(228);              // 'mod'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 272                 // 'union'
       && l1 != 135)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 272:                     // 'union'
        consume(272);               // 'union'
        break;
      default:
        consume(135);               // '|'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 272                 // 'union'
       && l1 != 135)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 272:                     // 'union'
        consumeT(272);              // 'union'
        break;
      default:
        consumeT(135);              // '|'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(222);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 197                 // 'except'
       && l1 != 217)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 217:                     // 'intersect'
        consume(217);               // 'intersect'
        break;
      default:
        consume(197);               // 'except'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(222);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 197                 // 'except'
       && l1 != 217)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 217:                     // 'intersect'
        consumeT(217);              // 'intersect'
        break;
      default:
        consumeT(197);              // 'except'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(223);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 215)                  // 'instance'
    {
      consume(215);                 // 'instance'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consume(64);                  // 'of'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(223);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 215)                  // 'instance'
    {
      consumeT(215);                // 'instance'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consumeT(64);                 // 'of'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 267)                  // 'treat'
    {
      consume(267);                 // 'treat'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(157);                 // 'as'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 267)                  // 'treat'
    {
      consumeT(267);                // 'treat'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(157);                // 'as'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 167)                  // 'castable'
    {
      consume(167);                 // 'castable'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(157);                 // 'as'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 167)                  // 'castable'
    {
      consumeT(167);                // 'castable'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(157);                // 'as'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_UnaryExpr();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 166)                  // 'cast'
    {
      consume(166);                 // 'cast'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(157);                 // 'as'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_UnaryExpr();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 166)                  // 'cast'
    {
      consumeT(166);                // 'cast'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(157);                // 'as'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_SingleType();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      if (l1 != 96                  // '+'
       && l1 != 98)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 98:                      // '-'
        consume(98);                // '-'
        break;
      default:
        consume(96);                // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      if (l1 != 96                  // '+'
       && l1 != 98)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 98:                      // '-'
        consumeT(98);               // '-'
        break;
      default:
        consumeT(96);               // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    lk = predict(9);
    switch (lk)
    {
    case 1:
      parse_ValidateExpr();
      break;
    case 2:
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    lk = predict(9);
    switch (lk)
    {
    case 1:
      try_ValidateExpr();
      break;
    case 2:
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 145)                // '!'
      {
        break;
      }
      consume(145);                 // '!'
      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 145)                // '!'
      {
        break;
      }
      consumeT(145);                // '!'
      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_PathExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 107:                       // '='
      consume(107);                 // '='
      break;
    case 91:                        // '!='
      consume(91);                  // '!='
      break;
    case 102:                       // '<'
      consume(102);                 // '<'
      break;
    case 105:                       // '<='
      consume(105);                 // '<='
      break;
    case 108:                       // '>'
      consume(108);                 // '>'
      break;
    default:
      consume(109);                 // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 107:                       // '='
      consumeT(107);                // '='
      break;
    case 91:                        // '!='
      consumeT(91);                 // '!='
      break;
    case 102:                       // '<'
      consumeT(102);                // '<'
      break;
    case 105:                       // '<='
      consumeT(105);                // '<='
      break;
    case 108:                       // '>'
      consumeT(108);                // '>'
      break;
    default:
      consumeT(109);                // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 195:                       // 'eq'
      consume(195);                 // 'eq'
      break;
    case 233:                       // 'ne'
      consume(233);                 // 'ne'
      break;
    case 227:                       // 'lt'
      consume(227);                 // 'lt'
      break;
    case 224:                       // 'le'
      consume(224);                 // 'le'
      break;
    case 208:                       // 'gt'
      consume(208);                 // 'gt'
      break;
    default:
      consume(206);                 // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 195:                       // 'eq'
      consumeT(195);                // 'eq'
      break;
    case 233:                       // 'ne'
      consumeT(233);                // 'ne'
      break;
    case 227:                       // 'lt'
      consumeT(227);                // 'lt'
      break;
    case 224:                       // 'le'
      consumeT(224);                // 'le'
      break;
    case 208:                       // 'gt'
      consumeT(208);                // 'gt'
      break;
    default:
      consumeT(206);                // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 219:                       // 'is'
      consume(219);                 // 'is'
      break;
    case 104:                       // '<<'
      consume(104);                 // '<<'
      break;
    default:
      consume(110);                 // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 219:                       // 'is'
      consumeT(219);                // 'is'
      break;
    case 104:                       // '<<'
      consumeT(104);                // '<<'
      break;
    default:
      consumeT(110);                // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    consume(275);                   // 'validate'
    lookahead1W(160);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 283)                  // '{'
    {
      switch (l1)
      {
      case 270:                     // 'type'
        consume(270);               // 'type'
        lookahead1W(249);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(283);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(138);                   // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    consumeT(275);                  // 'validate'
    lookahead1W(160);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 283)                  // '{'
    {
      switch (l1)
      {
      case 270:                     // 'type'
        consumeT(270);              // 'type'
        lookahead1W(249);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(283);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(138);                  // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 223:                       // 'lax'
      consume(223);                 // 'lax'
      break;
    default:
      consume(263);                 // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 223:                       // 'lax'
      consumeT(223);                // 'lax'
      break;
    default:
      consumeT(263);                // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 93)                 // '(#'
      {
        break;
      }
    }
    consume(283);                   // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 138)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(138);                   // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 93)                 // '(#'
      {
        break;
      }
    }
    consumeT(283);                  // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 138)                  // '}'
    {
      try_Expr();
    }
    consumeT(138);                  // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    consume(93);                    // '(#'
    lookahead1(248);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 == 15)                   // S
    {
      consume(15);                  // S
    }
    parse_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 15)                   // S
    {
      consume(15);                  // S
      lookahead1(0);                // PragmaContents
      consume(1);                   // PragmaContents
    }
    lookahead1(5);                  // '#)'
    consume(21);                    // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    consumeT(93);                   // '(#'
    lookahead1(248);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 == 15)                   // S
    {
      consumeT(15);                 // S
    }
    try_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 15)                   // S
    {
      consumeT(15);                 // S
      lookahead1(0);                // PragmaContents
      consumeT(1);                  // PragmaContents
    }
    lookahead1(5);                  // '#)'
    consumeT(21);                   // '#)'
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 150:                       // '/'
      consume(150);                 // '/'
      lookahead1W(284);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' |
                                    // '=' | '>' | '>=' | '>>' | '@' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '{|' | '|' | '||' |
                                    // '|}' | '}'
      switch (l1)
      {
      case 90:                      // EOF
      case 145:                     // '!'
      case 91:                      // '!='
      case 94:                      // ')'
      case 95:                      // '*'
      case 96:                      // '+'
      case 97:                      // ','
      case 98:                      // '-'
      case 100:                     // ':'
      case 101:                     // ';'
      case 104:                     // '<<'
      case 105:                     // '<='
      case 107:                     // '='
      case 108:                     // '>'
      case 109:                     // '>='
      case 110:                     // '>>'
      case 112:                     // ']'
      case 114:                     // 'by'
      case 115:                     // 'contains'
      case 123:                     // 'paragraphs'
      case 125:                     // 'sentences'
      case 130:                     // 'times'
      case 133:                     // 'words'
      case 135:                     // '|'
      case 136:                     // '||'
      case 137:                     // '|}'
      case 138:                     // '}'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 99:                        // '//'
      consume(99);                  // '//'
      lookahead1W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    switch (l1)
    {
    case 150:                       // '/'
      consumeT(150);                // '/'
      lookahead1W(284);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' |
                                    // '=' | '>' | '>=' | '>>' | '@' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '{|' | '|' | '||' |
                                    // '|}' | '}'
      switch (l1)
      {
      case 90:                      // EOF
      case 145:                     // '!'
      case 91:                      // '!='
      case 94:                      // ')'
      case 95:                      // '*'
      case 96:                      // '+'
      case 97:                      // ','
      case 98:                      // '-'
      case 100:                     // ':'
      case 101:                     // ';'
      case 104:                     // '<<'
      case 105:                     // '<='
      case 107:                     // '='
      case 108:                     // '>'
      case 109:                     // '>='
      case 110:                     // '>>'
      case 112:                     // ']'
      case 114:                     // 'by'
      case 115:                     // 'contains'
      case 123:                     // 'paragraphs'
      case 125:                     // 'sentences'
      case 130:                     // 'times'
      case 133:                     // 'words'
      case 135:                     // '|'
      case 136:                     // '||'
      case 137:                     // '|}'
      case 138:                     // '}'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 99:                        // '//'
      consumeT(99);                 // '//'
      lookahead1W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      lk = predict(10);
      if (lk == 0)
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 150:               // '/'
              consumeT(150);        // '/'
              break;
            case 99:                // '//'
              consumeT(99);         // '//'
              break;
            default:
              consumeT(145);        // '!'
            }
            lookahead1W(264);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
            try_StepExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0, lk);
        }
      }
      if (lk != -1
       && lk != 1)
      {
        break;
      }
      switch (l1)
      {
      case 150:                     // '/'
        consume(150);               // '/'
        break;
      case 99:                      // '//'
        consume(99);                // '//'
        break;
      default:
        consume(145);               // '!'
      }
      lookahead1W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      lk = predict(10);
      if (lk == 0)
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 150:               // '/'
              consumeT(150);        // '/'
              break;
            case 99:                // '//'
              consumeT(99);         // '//'
              break;
            default:
              consumeT(145);        // '!'
            }
            lookahead1W(264);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
            try_StepExpr();
            memoize(2, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(2, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 1)
      {
        break;
      }
      switch (l1)
      {
      case 150:                     // '/'
        consumeT(150);              // '/'
        break;
      case 99:                      // '//'
        consumeT(99);               // '//'
        break;
      default:
        consumeT(145);              // '!'
      }
      lookahead1W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    lk = predict(11);
    if (lk == 2)
    {
      lk = memoized(3, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(3, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 1:
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    lk = predict(11);
    if (lk == 2)
    {
      lk = memoized(3, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(3, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 1:
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    lk = predict(12);
    switch (lk)
    {
    case 1:
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(236);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  function try_AxisStep()
  {
    lk = predict(12);
    switch (lk)
    {
    case 1:
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(236);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    lk = predict(13);
    switch (lk)
    {
    case 1:
      parse_ForwardAxis();
      lookahead1W(259);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  function try_ForwardStep()
  {
    lk = predict(13);
    switch (lk)
    {
    case 1:
      try_ForwardAxis();
      lookahead1W(259);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 169:                       // 'child'
      consume(169);                 // 'child'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 183:                       // 'descendant'
      consume(183);                 // 'descendant'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 160:                       // 'attribute'
      consume(160);                 // 'attribute'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 258:                       // 'self'
      consume(258);                 // 'self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 184:                       // 'descendant-or-self'
      consume(184);                 // 'descendant-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 202:                       // 'following-sibling'
      consume(202);                 // 'following-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
      break;
    default:
      consume(201);                 // 'following'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 169:                       // 'child'
      consumeT(169);                // 'child'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
      break;
    case 183:                       // 'descendant'
      consumeT(183);                // 'descendant'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
      break;
    case 160:                       // 'attribute'
      consumeT(160);                // 'attribute'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
      break;
    case 258:                       // 'self'
      consumeT(258);                // 'self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
      break;
    case 184:                       // 'descendant-or-self'
      consumeT(184);                // 'descendant-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
      break;
    case 202:                       // 'following-sibling'
      consumeT(202);                // 'following-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
      break;
    default:
      consumeT(201);                // 'following'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 33)                   // '@'
    {
      consume(33);                  // '@'
    }
    lookahead1W(259);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 33)                   // '@'
    {
      consumeT(33);                 // '@'
    }
    lookahead1W(259);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 149:                       // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(259);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 149:                       // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(259);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 244:                       // 'parent'
      consume(244);                 // 'parent'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 153:                       // 'ancestor'
      consume(153);                 // 'ancestor'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 246:                       // 'preceding-sibling'
      consume(246);                 // 'preceding-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 245:                       // 'preceding'
      consume(245);                 // 'preceding'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
      break;
    default:
      consume(154);                 // 'ancestor-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 244:                       // 'parent'
      consumeT(244);                // 'parent'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
      break;
    case 153:                       // 'ancestor'
      consumeT(153);                // 'ancestor'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
      break;
    case 246:                       // 'preceding-sibling'
      consumeT(246);                // 'preceding-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
      break;
    case 245:                       // 'preceding'
      consumeT(245);                // 'preceding'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
      break;
    default:
      consumeT(154);                // 'ancestor-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    consume(149);                   // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  function try_AbbrevReverseStep()
  {
    consumeT(149);                  // '..'
  }

  function parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    lk = predict(14);
    switch (lk)
    {
    case 1:
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  function try_NodeTest()
  {
    lk = predict(14);
    switch (lk)
    {
    case 1:
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 139:                       // Wildcard
      consume(139);                 // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 139:                       // Wildcard
      consumeT(139);                // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(239);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 92                  // '('
       && l1 != 111)                // '['
      {
        break;
      }
      switch (l1)
      {
      case 111:                     // '['
        whitespace();
        parse_Predicate();
        break;
      default:
        whitespace();
        parse_ArgumentList();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(239);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 92                  // '('
       && l1 != 111)                // '['
      {
        break;
      }
      switch (l1)
      {
      case 111:                     // '['
        try_Predicate();
        break;
      default:
        try_ArgumentList();
      }
    }
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    consume(92);                    // '('
    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 94)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 97)               // ','
        {
          break;
        }
        consume(97);                // ','
        lookahead1W(274);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_Argument();
      }
    }
    consume(94);                    // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    consumeT(92);                   // '('
    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 94)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 97)               // ','
        {
          break;
        }
        consumeT(97);               // ','
        lookahead1W(274);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        try_Argument();
      }
    }
    consumeT(94);                   // ')'
  }

  function parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(236);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 111)                // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(236);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 111)                // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    consume(111);                   // '['
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(112);                   // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    consumeT(111);                  // '['
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(112);                  // ']'
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 144:                       // StringLiteral
      consume(144);                 // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 144:                       // StringLiteral
      consumeT(144);                // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 141:                       // IntegerLiteral
      consume(141);                 // IntegerLiteral
      break;
    case 142:                       // DecimalLiteral
      consume(142);                 // DecimalLiteral
      break;
    default:
      consume(143);                 // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 141:                       // IntegerLiteral
      consumeT(141);                // IntegerLiteral
      break;
    case 142:                       // DecimalLiteral
      consumeT(142);                // DecimalLiteral
      break;
    default:
      consumeT(143);                // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    consume(92);                    // '('
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 94)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    consume(94);                    // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    consumeT(92);                   // '('
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 94)                   // ')'
    {
      try_Expr();
    }
    consumeT(94);                   // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    consume(148);                   // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    consumeT(148);                  // '.'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    consume(242);                   // 'ordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(283);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(138);                   // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    consumeT(242);                  // 'ordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(283);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(138);                  // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    consume(273);                   // 'unordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(283);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(138);                   // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    consumeT(273);                  // 'unordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(283);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(138);                  // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 31:                        // '?'
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 31:                        // '?'
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    consume(31);                    // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    consumeT(31);                   // '?'
  }

  function parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 102:                       // '<'
    case 103:                       // '<!--'
    case 106:                       // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 102:                       // '<'
    case 103:                       // '<!--'
    case 106:                       // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 102:                       // '<'
      parse_DirElemConstructor();
      break;
    case 103:                       // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 102:                       // '<'
      try_DirElemConstructor();
      break;
    case 103:                       // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    consume(102);                   // '<'
    lookahead1(4);                  // QName
    consume(14);                    // QName
    parse_DirAttributeList();
    switch (l1)
    {
    case 26:                        // '/>'
      consume(26);                  // '/>'
      break;
    default:
      consume(108);                 // '>'
      for (;;)
      {
        lookahead1(174);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 30)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      consume(30);                  // '</'
      lookahead1(4);                // QName
      consume(14);                  // QName
      lookahead1(12);               // S | '>'
      if (l1 == 15)                 // S
      {
        consume(15);                // S
      }
      lookahead1(8);                // '>'
      consume(108);                 // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    consumeT(102);                  // '<'
    lookahead1(4);                  // QName
    consumeT(14);                   // QName
    try_DirAttributeList();
    switch (l1)
    {
    case 26:                        // '/>'
      consumeT(26);                 // '/>'
      break;
    default:
      consumeT(108);                // '>'
      for (;;)
      {
        lookahead1(174);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 30)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      consumeT(30);                 // '</'
      lookahead1(4);                // QName
      consumeT(14);                 // QName
      lookahead1(12);               // S | '>'
      if (l1 == 15)                 // S
      {
        consumeT(15);               // S
      }
      lookahead1(8);                // '>'
      consumeT(108);                // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 15)                 // S
      {
        break;
      }
      consume(15);                  // S
      lookahead1(91);               // QName | S | '/>' | '>'
      if (l1 == 14)                 // QName
      {
        consume(14);                // QName
        lookahead1(11);             // S | '='
        if (l1 == 15)               // S
        {
          consume(15);              // S
        }
        lookahead1(7);              // '='
        consume(107);               // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 15)               // S
        {
          consume(15);              // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 15)                 // S
      {
        break;
      }
      consumeT(15);                 // S
      lookahead1(91);               // QName | S | '/>' | '>'
      if (l1 == 14)                 // QName
      {
        consumeT(14);               // QName
        lookahead1(11);             // S | '='
        if (l1 == 15)               // S
        {
          consumeT(15);             // S
        }
        lookahead1(7);              // '='
        consumeT(107);              // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 15)               // S
        {
          consumeT(15);             // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 19:                        // '"'
      consume(19);                  // '"'
      for (;;)
      {
        lookahead1(167);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 19)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          consume(7);               // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      consume(19);                  // '"'
      break;
    default:
      consume(22);                  // "'"
      for (;;)
      {
        lookahead1(168);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 22)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          consume(8);               // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      consume(22);                  // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 19:                        // '"'
      consumeT(19);                 // '"'
      for (;;)
      {
        lookahead1(167);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 19)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          consumeT(7);              // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      consumeT(19);                 // '"'
      break;
    default:
      consumeT(22);                 // "'"
      for (;;)
      {
        lookahead1(168);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 22)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          consumeT(8);              // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      consumeT(22);                 // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      consume(10);                  // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      consumeT(10);                 // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      consume(11);                  // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      consumeT(11);                 // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 102:                       // '<'
    case 103:                       // '<!--'
    case 106:                       // '<?'
      parse_DirectConstructor();
      break;
    case 4:                         // CDataSection
      consume(4);                   // CDataSection
      break;
    case 9:                         // ElementContentChar
      consume(9);                   // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 102:                       // '<'
    case 103:                       // '<!--'
    case 106:                       // '<?'
      try_DirectConstructor();
      break;
    case 4:                         // CDataSection
      consumeT(4);                  // CDataSection
      break;
    case 9:                         // ElementContentChar
      consumeT(9);                  // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    consume(103);                   // '<!--'
    lookahead1(1);                  // DirCommentContents
    consume(2);                     // DirCommentContents
    lookahead1(6);                  // '-->'
    consume(25);                    // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    consumeT(103);                  // '<!--'
    lookahead1(1);                  // DirCommentContents
    consumeT(2);                    // DirCommentContents
    lookahead1(6);                  // '-->'
    consumeT(25);                   // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    consume(106);                   // '<?'
    lookahead1(3);                  // PITarget
    consume(12);                    // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 15)                   // S
    {
      consume(15);                  // S
      lookahead1(2);                // DirPIContents
      consume(3);                   // DirPIContents
    }
    lookahead1(9);                  // '?>'
    consume(32);                    // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    consumeT(106);                  // '<?'
    lookahead1(3);                  // PITarget
    consumeT(12);                   // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 15)                   // S
    {
      consumeT(15);                 // S
      lookahead1(2);                // DirPIContents
      consumeT(3);                  // DirPIContents
    }
    lookahead1(9);                  // '?>'
    consumeT(32);                   // '?>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 187:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 189:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 160:                       // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 231:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 265:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 171:                       // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 187:                       // 'document'
      try_CompDocConstructor();
      break;
    case 189:                       // 'element'
      try_CompElemConstructor();
      break;
    case 160:                       // 'attribute'
      try_CompAttrConstructor();
      break;
    case 231:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 265:                       // 'text'
      try_CompTextConstructor();
      break;
    case 171:                       // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    consume(189);                   // 'element'
    lookahead1W(252);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 283:                       // '{'
      consume(283);                 // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(138);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(283);                   // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 138)                  // '}'
    {
      whitespace();
      parse_ContentExpr();
    }
    consume(138);                   // '}'
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    consumeT(189);                  // 'element'
    lookahead1W(252);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 283:                       // '{'
      consumeT(283);                // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(138);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(283);                  // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 138)                  // '}'
    {
      try_ContentExpr();
    }
    consumeT(138);                  // '}'
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    consume(231);                   // 'namespace'
    lookahead1W(253);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 283:                       // '{'
      consume(283);                 // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_PrefixExpr();
      consume(138);                 // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(283);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_URIExpr();
    consume(138);                   // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    consumeT(231);                  // 'namespace'
    lookahead1W(253);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 283:                       // '{'
      consumeT(283);                // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_PrefixExpr();
      consumeT(138);                // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(283);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_URIExpr();
    consumeT(138);                  // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    lk = predict(15);
    switch (lk)
    {
    case 1:
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    lk = predict(15);
    switch (lk)
    {
    case 1:
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    consume(20);                    // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    consume(141);                   // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    consumeT(20);                   // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    consumeT(141);                  // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 147)                // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(205);                   // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 146)                  // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(94);                    // ')'
    lookahead1W(111);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 157)                  // 'as'
    {
      consume(157);                 // 'as'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 147)                // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(205);                  // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 146)                  // '$'
    {
      try_ParamList();
    }
    consumeT(94);                   // ')'
    lookahead1W(111);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 157)                  // 'as'
    {
      consumeT(157);                // 'as'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 31)                   // '?'
    {
      consume(31);                  // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 31)                   // '?'
    {
      consumeT(31);                 // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    consume(157);                   // 'as'
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    consumeT(157);                  // 'as'
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    lk = predict(16);
    switch (lk)
    {
    case 1:
      consume(192);                 // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consume(92);                  // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consume(94);                  // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(237);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 24:                      // '*'
      case 96:                      // '+'
      case 31:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    lk = predict(16);
    switch (lk)
    {
    case 1:
      consumeT(192);                // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consumeT(92);                 // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consumeT(94);                 // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(237);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 24:                      // '*'
      case 96:                      // '+'
      case 31:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 31:                        // '?'
      consume(31);                  // '?'
      break;
    case 24:                        // '*'
      consume(24);                  // '*'
      break;
    default:
      consume(96);                  // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 31:                        // '?'
      consumeT(31);                 // '?'
      break;
    case 24:                        // '*'
      consumeT(24);                 // '*'
      break;
    default:
      consumeT(96);                 // '+'
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    lk = predict(17);
    if (lk == 7)
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_KindTest();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -6;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(4, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 1:
      parse_KindTest();
      break;
    case 2:
      consume(220);                 // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consume(92);                  // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consume(94);                  // ')'
      break;
    case 3:
      parse_FunctionTest();
      break;
    case 4:
      parse_ParenthesizedItemType();
      break;
    case -6:
      parse_JSONTest();
      break;
    case 6:
      parse_StructuredItemTest();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    lk = predict(17);
    if (lk == 7)
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_KindTest();
          memoize(4, e0A, -1);
          lk = -8;
        }
        catch (p1A)
        {
          lk = -6;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(4, e0A, -6);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 1:
      try_KindTest();
      break;
    case 2:
      consumeT(220);                // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consumeT(92);                 // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consumeT(94);                 // ')'
      break;
    case 3:
      try_FunctionTest();
      break;
    case 4:
      try_ParenthesizedItemType();
      break;
    case -6:
      try_JSONTest();
      break;
    case 6:
      try_StructuredItemTest();
      break;
    case -8:
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_JSONTest()
  {
    eventHandler.startNonterminal("JSONTest", e0);
    switch (l1)
    {
    case 221:                       // 'json-item'
      parse_JSONItemTest();
      break;
    case 237:                       // 'object'
      parse_JSONObjectTest();
      break;
    default:
      parse_JSONArrayTest();
    }
    eventHandler.endNonterminal("JSONTest", e0);
  }

  function try_JSONTest()
  {
    switch (l1)
    {
    case 221:                       // 'json-item'
      try_JSONItemTest();
      break;
    case 237:                       // 'object'
      try_JSONObjectTest();
      break;
    default:
      try_JSONArrayTest();
    }
  }

  function parse_StructuredItemTest()
  {
    eventHandler.startNonterminal("StructuredItemTest", e0);
    consume(128);                   // 'structured-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("StructuredItemTest", e0);
  }

  function try_StructuredItemTest()
  {
    consumeT(128);                  // 'structured-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_JSONItemTest()
  {
    eventHandler.startNonterminal("JSONItemTest", e0);
    consume(221);                   // 'json-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("JSONItemTest", e0);
  }

  function try_JSONItemTest()
  {
    consumeT(221);                  // 'json-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_JSONObjectTest()
  {
    eventHandler.startNonterminal("JSONObjectTest", e0);
    consume(237);                   // 'object'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("JSONObjectTest", e0);
  }

  function try_JSONObjectTest()
  {
    consumeT(237);                  // 'object'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_JSONArrayTest()
  {
    eventHandler.startNonterminal("JSONArrayTest", e0);
    consume(156);                   // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("JSONArrayTest", e0);
  }

  function try_JSONArrayTest()
  {
    consumeT(156);                  // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 188:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 189:                       // 'element'
      parse_ElementTest();
      break;
    case 160:                       // 'attribute'
      parse_AttributeTest();
      break;
    case 256:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 255:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 247:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 171:                       // 'comment'
      parse_CommentTest();
      break;
    case 265:                       // 'text'
      parse_TextTest();
      break;
    case 232:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    case 235:                       // 'node'
      parse_AnyKindTest();
      break;
    default:
      parse_JSONTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 188:                       // 'document-node'
      try_DocumentTest();
      break;
    case 189:                       // 'element'
      try_ElementTest();
      break;
    case 160:                       // 'attribute'
      try_AttributeTest();
      break;
    case 256:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 255:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 247:                       // 'processing-instruction'
      try_PITest();
      break;
    case 171:                       // 'comment'
      try_CommentTest();
      break;
    case 265:                       // 'text'
      try_TextTest();
      break;
    case 232:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    case 235:                       // 'node'
      try_AnyKindTest();
      break;
    default:
      try_JSONTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    consume(235);                   // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    consumeT(235);                  // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    consume(188);                   // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(144);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 94)                   // ')'
    {
      switch (l1)
      {
      case 189:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    consumeT(188);                  // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(144);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 94)                   // ')'
    {
      switch (l1)
      {
      case 189:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    consume(265);                   // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    consumeT(265);                  // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    consume(171);                   // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    consumeT(171);                  // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    consume(232);                   // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    consumeT(232);                  // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    consume(247);                   // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(256);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 94)                   // ')'
    {
      switch (l1)
      {
      case 144:                     // StringLiteral
        consume(144);               // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    consumeT(247);                  // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(256);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 94)                   // ')'
    {
      switch (l1)
      {
      case 144:                     // StringLiteral
        consumeT(144);              // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    consume(160);                   // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 94)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 97)                 // ','
      {
        consume(97);                // ','
        lookahead1W(249);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    consumeT(160);                  // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 94)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 97)                 // ','
      {
        consumeT(97);               // ','
        lookahead1W(249);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 95:                        // '*'
      consume(95);                  // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 95:                        // '*'
      consumeT(95);                 // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    consume(255);                   // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    consumeT(255);                  // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    consume(189);                   // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 94)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 97)                 // ','
      {
        consume(97);                // ','
        lookahead1W(249);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(102);           // S^WS | '(:' | ')' | '?'
        if (l1 == 31)               // '?'
        {
          consume(31);              // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    consumeT(189);                  // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 94)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 97)                 // ','
      {
        consumeT(97);               // ','
        lookahead1W(249);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
        lookahead1W(102);           // S^WS | '(:' | ')' | '?'
        if (l1 == 31)               // '?'
        {
          consumeT(31);             // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 95:                        // '*'
      consume(95);                  // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 95:                        // '*'
      consumeT(95);                 // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    consume(256);                   // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    consumeT(256);                  // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 147)                // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    lk = predict(18);
    lk = memoized(5, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(5, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 147)                // '%'
      {
        break;
      }
      try_Annotation();
    }
    lk = predict(18);
    lk = memoized(5, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(5, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    consume(205);                   // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    consume(95);                    // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    consumeT(205);                  // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    consumeT(95);                   // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    consume(205);                   // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 != 94)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 97)               // ','
        {
          break;
        }
        consume(97);                // ','
        lookahead1W(260);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    consume(94);                    // ')'
    lookahead1W(30);                // S^WS | '(:' | 'as'
    consume(157);                   // 'as'
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    consumeT(205);                  // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 != 94)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 97)               // ','
        {
          break;
        }
        consumeT(97);               // ','
        lookahead1W(260);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        try_SequenceType();
      }
    }
    consumeT(94);                   // ')'
    lookahead1W(30);                // S^WS | '(:' | 'as'
    consumeT(157);                  // 'as'
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    consume(92);                    // '('
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    consumeT(92);                   // '('
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(72);                // S^WS | '(:' | 'revalidation'
    consume(252);                   // 'revalidation'
    lookahead1W(152);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 263:                       // 'strict'
      consume(263);                 // 'strict'
      break;
    case 223:                       // 'lax'
      consume(223);                 // 'lax'
      break;
    default:
      consume(77);                  // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 151:                       // 'after'
      consume(151);                 // 'after'
      break;
    case 162:                       // 'before'
      consume(162);                 // 'before'
      break;
    default:
      if (l1 == 157)                // 'as'
      {
        consume(157);               // 'as'
        lookahead1W(119);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 200:                   // 'first'
          consume(200);             // 'first'
          break;
        default:
          consume(222);             // 'last'
        }
      }
      lookahead1W(54);              // S^WS | '(:' | 'into'
      consume(218);                 // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 151:                       // 'after'
      consumeT(151);                // 'after'
      break;
    case 162:                       // 'before'
      consumeT(162);                // 'before'
      break;
    default:
      if (l1 == 157)                // 'as'
      {
        consumeT(157);              // 'as'
        lookahead1W(119);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 200:                   // 'first'
          consumeT(200);            // 'first'
          break;
        default:
          consumeT(222);            // 'last'
        }
      }
      lookahead1W(54);              // S^WS | '(:' | 'into'
      consumeT(218);                // 'into'
    }
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    consume(214);                   // 'insert'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 235:                       // 'node'
      consume(235);                 // 'node'
      break;
    default:
      consume(236);                 // 'nodes'
    }
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_SourceExpr();
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    consumeT(214);                  // 'insert'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 235:                       // 'node'
      consumeT(235);                // 'node'
      break;
    default:
      consumeT(236);                // 'nodes'
    }
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_SourceExpr();
    try_InsertExprTargetChoice();
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    consume(182);                   // 'delete'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 235:                       // 'node'
      consume(235);                 // 'node'
      break;
    default:
      consume(236);                 // 'nodes'
    }
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    consumeT(182);                  // 'delete'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 235:                       // 'node'
      consumeT(235);                // 'node'
      break;
    default:
      consumeT(236);                // 'nodes'
    }
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    consume(249);                   // 'replace'
    lookahead1W(130);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 276)                  // 'value'
    {
      consume(276);                 // 'value'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consume(64);                  // 'of'
    }
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(235);                   // 'node'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    consume(281);                   // 'with'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    consumeT(249);                  // 'replace'
    lookahead1W(130);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 276)                  // 'value'
    {
      consumeT(276);                // 'value'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consumeT(64);                 // 'of'
    }
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consumeT(235);                  // 'node'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_TargetExpr();
    consumeT(281);                  // 'with'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    consume(248);                   // 'rename'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(235);                   // 'node'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    consume(157);                   // 'as'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    consumeT(248);                  // 'rename'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consumeT(235);                  // 'node'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_TargetExpr();
    consumeT(157);                  // 'as'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_TransformExpr()
  {
    eventHandler.startNonterminal("TransformExpr", e0);
    consume(176);                   // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consume(29);                    // ':='
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consume(97);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(27);              // S^WS | '(:' | ':='
      consume(29);                  // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    consume(229);                   // 'modify'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformExpr", e0);
  }

  function try_TransformExpr()
  {
    consumeT(176);                  // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consumeT(29);                   // ':='
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consumeT(97);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(27);              // S^WS | '(:' | ':='
      consumeT(29);                 // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    consumeT(229);                  // 'modify'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      lk = predict(19);
      if (lk != 1)
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  function try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      lk = predict(19);
      if (lk != 1)
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  function parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    consume(83);                    // 'weight'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(283);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(138);                   // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  function try_FTWeight()
  {
    consumeT(83);                   // 'weight'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(283);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(138);                  // '}'
  }

  function parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 46)                 // 'ftor'
      {
        break;
      }
      consume(46);                  // 'ftor'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  function try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 46)                 // 'ftor'
      {
        break;
      }
      consumeT(46);                 // 'ftor'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  function parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 44)                 // 'ftand'
      {
        break;
      }
      consume(44);                  // 'ftand'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  function try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 44)                 // 'ftand'
      {
        break;
      }
      consumeT(44);                 // 'ftand'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  function parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(212);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
      if (l1 != 62)                 // 'not'
      {
        break;
      }
      consume(62);                  // 'not'
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consume(212);                 // 'in'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  function try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(212);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
      if (l1 != 62)                 // 'not'
      {
        break;
      }
      consumeT(62);                 // 'not'
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consumeT(212);                // 'in'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  function parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 45)                   // 'ftnot'
    {
      consume(45);                  // 'ftnot'
    }
    lookahead1W(155);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  function try_FTUnaryNot()
  {
    if (l1 == 45)                   // 'ftnot'
    {
      consumeT(45);                 // 'ftnot'
    }
    lookahead1W(155);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  function parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 82)                   // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 83)                   // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  function try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 82)                   // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 83)                   // 'weight'
    {
      try_FTWeight();
    }
  }

  function parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 92:                        // '('
      consume(92);                  // '('
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      consume(94);                  // ')'
      break;
    case 93:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 63)                 // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  function try_FTPrimary()
  {
    switch (l1)
    {
    case 92:                        // '('
      consumeT(92);                 // '('
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      consumeT(94);                 // ')'
      break;
    case 93:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 63)                 // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  function parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(221);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 35                    // 'all'
     || l1 == 36                    // 'any'
     || l1 == 70)                   // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  function try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(221);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 35                    // 'all'
     || l1 == 36                    // 'any'
     || l1 == 70)                   // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  function parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 144:                       // StringLiteral
      consume(144);                 // StringLiteral
      break;
    default:
      consume(283);                 // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(138);                 // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  function try_FTWordsValue()
  {
    switch (l1)
    {
    case 144:                       // StringLiteral
      consumeT(144);                // StringLiteral
      break;
    default:
      consumeT(283);                // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(138);                // '}'
    }
  }

  function parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 93)                 // '(#'
      {
        break;
      }
    }
    consume(283);                   // '{'
    lookahead1W(166);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 138)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    consume(138);                   // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  function try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 93)                 // '(#'
      {
        break;
      }
    }
    consumeT(283);                  // '{'
    lookahead1W(166);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 138)                  // '}'
    {
      try_FTSelection();
    }
    consumeT(138);                  // '}'
  }

  function parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 36:                        // 'any'
      consume(36);                  // 'any'
      lookahead1W(218);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
      if (l1 == 86)                 // 'word'
      {
        consume(86);                // 'word'
      }
      break;
    case 35:                        // 'all'
      consume(35);                  // 'all'
      lookahead1W(219);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
      if (l1 == 133)                // 'words'
      {
        consume(133);               // 'words'
      }
      break;
    default:
      consume(70);                  // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  function try_FTAnyallOption()
  {
    switch (l1)
    {
    case 36:                        // 'any'
      consumeT(36);                 // 'any'
      lookahead1W(218);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
      if (l1 == 86)                 // 'word'
      {
        consumeT(86);               // 'word'
      }
      break;
    case 35:                        // 'all'
      consumeT(35);                 // 'all'
      lookahead1W(219);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
      if (l1 == 133)                // 'words'
      {
        consumeT(133);              // 'words'
      }
      break;
    default:
      consumeT(70);                 // 'phrase'
    }
  }

  function parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    consume(63);                    // 'occurs'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    consume(130);                   // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  function try_FTTimes()
  {
    consumeT(63);                   // 'occurs'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    consumeT(130);                  // 'times'
  }

  function parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 120:                       // 'exactly'
      consume(120);                 // 'exactly'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      break;
    case 159:                       // 'at'
      consume(159);                 // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 54:                      // 'least'
        consume(54);                // 'least'
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        consume(58);                // 'most'
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      consume(121);                 // 'from'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      consume(266);                 // 'to'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  function try_FTRange()
  {
    switch (l1)
    {
    case 120:                       // 'exactly'
      consumeT(120);                // 'exactly'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_AdditiveExpr();
      break;
    case 159:                       // 'at'
      consumeT(159);                // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 54:                      // 'least'
        consumeT(54);               // 'least'
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        try_AdditiveExpr();
        break;
      default:
        consumeT(58);               // 'most'
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        try_AdditiveExpr();
      }
      break;
    default:
      consumeT(121);                // 'from'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_AdditiveExpr();
      consumeT(266);                // 'to'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 242:                       // 'ordered'
      parse_FTOrder();
      break;
    case 132:                       // 'window'
      parse_FTWindow();
      break;
    case 118:                       // 'distance'
      parse_FTDistance();
      break;
    case 117:                       // 'different'
    case 124:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  function try_FTPosFilter()
  {
    switch (l1)
    {
    case 242:                       // 'ordered'
      try_FTOrder();
      break;
    case 132:                       // 'window'
      try_FTWindow();
      break;
    case 118:                       // 'distance'
      try_FTDistance();
      break;
    case 117:                       // 'different'
    case 124:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  function parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    consume(242);                   // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  function try_FTOrder()
  {
    consumeT(242);                  // 'ordered'
  }

  function parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    consume(132);                   // 'window'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  function try_FTWindow()
  {
    consumeT(132);                  // 'window'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_AdditiveExpr();
    try_FTUnit();
  }

  function parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    consume(118);                   // 'distance'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  function try_FTDistance()
  {
    consumeT(118);                  // 'distance'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  function parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 133:                       // 'words'
      consume(133);                 // 'words'
      break;
    case 125:                       // 'sentences'
      consume(125);                 // 'sentences'
      break;
    default:
      consume(123);                 // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  function try_FTUnit()
  {
    switch (l1)
    {
    case 133:                       // 'words'
      consumeT(133);                // 'words'
      break;
    case 125:                       // 'sentences'
      consumeT(125);                // 'sentences'
      break;
    default:
      consumeT(123);                // 'paragraphs'
    }
  }

  function parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 124:                       // 'same'
      consume(124);                 // 'same'
      break;
    default:
      consume(117);                 // 'different'
    }
    lookahead1W(132);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  function try_FTScope()
  {
    switch (l1)
    {
    case 124:                       // 'same'
      consumeT(124);                // 'same'
      break;
    default:
      consumeT(117);                // 'different'
    }
    lookahead1W(132);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  function parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 76:                        // 'sentence'
      consume(76);                  // 'sentence'
      break;
    default:
      consume(66);                  // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  function try_FTBigUnit()
  {
    switch (l1)
    {
    case 76:                        // 'sentence'
      consumeT(76);                 // 'sentence'
      break;
    default:
      consumeT(66);                 // 'paragraph'
    }
  }

  function parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 159:                       // 'at'
      consume(159);                 // 'at'
      lookahead1W(117);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 262:                     // 'start'
        consume(262);               // 'start'
        break;
      default:
        consume(194);               // 'end'
      }
      break;
    default:
      consume(119);                 // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consume(39);                  // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  function try_FTContent()
  {
    switch (l1)
    {
    case 159:                       // 'at'
      consumeT(159);                // 'at'
      lookahead1W(117);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 262:                     // 'start'
        consumeT(262);              // 'start'
        break;
      default:
        consumeT(194);              // 'end'
      }
      break;
    default:
      consumeT(119);                // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consumeT(39);                 // 'content'
    }
  }

  function parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      consume(82);                  // 'using'
      lookahead1W(181);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      whitespace();
      parse_FTMatchOption();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 82)                 // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  function try_FTMatchOptions()
  {
    for (;;)
    {
      consumeT(82);                 // 'using'
      lookahead1W(181);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      try_FTMatchOption();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 82)                 // 'using'
      {
        break;
      }
    }
  }

  function parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    lk = predict(20);
    switch (lk)
    {
    case 1:
      parse_FTLanguageOption();
      break;
    case 2:
      parse_FTWildCardOption();
      break;
    case 3:
      parse_FTThesaurusOption();
      break;
    case 4:
      parse_FTStemOption();
      break;
    case 5:
      parse_FTDiacriticsOption();
      break;
    case 6:
      parse_FTStopWordOption();
      break;
    case 7:
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  function try_FTMatchOption()
  {
    lk = predict(20);
    switch (lk)
    {
    case 1:
      try_FTLanguageOption();
      break;
    case 2:
      try_FTWildCardOption();
      break;
    case 3:
      try_FTThesaurusOption();
      break;
    case 4:
      try_FTStemOption();
      break;
    case 5:
      try_FTDiacriticsOption();
      break;
    case 6:
      try_FTStopWordOption();
      break;
    case 7:
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  function parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 165:                       // 'case'
      consume(165);                 // 'case'
      lookahead1W(124);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 51:                      // 'insensitive'
        consume(51);                // 'insensitive'
        break;
      default:
        consume(75);                // 'sensitive'
      }
      break;
    case 56:                        // 'lowercase'
      consume(56);                  // 'lowercase'
      break;
    default:
      consume(81);                  // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  function try_FTCaseOption()
  {
    switch (l1)
    {
    case 165:                       // 'case'
      consumeT(165);                // 'case'
      lookahead1W(124);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 51:                      // 'insensitive'
        consumeT(51);               // 'insensitive'
        break;
      default:
        consumeT(75);               // 'sensitive'
      }
      break;
    case 56:                        // 'lowercase'
      consumeT(56);                 // 'lowercase'
      break;
    default:
      consumeT(81);                 // 'uppercase'
    }
  }

  function parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    consume(116);                   // 'diacritics'
    lookahead1W(124);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 51:                        // 'insensitive'
      consume(51);                  // 'insensitive'
      break;
    default:
      consume(75);                  // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  function try_FTDiacriticsOption()
  {
    consumeT(116);                  // 'diacritics'
    lookahead1W(124);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 51:                        // 'insensitive'
      consumeT(51);                 // 'insensitive'
      break;
    default:
      consumeT(75);                 // 'sensitive'
    }
  }

  function parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 126:                       // 'stemming'
      consume(126);                 // 'stemming'
      break;
    default:
      consume(234);                 // 'no'
      lookahead1W(74);              // S^WS | '(:' | 'stemming'
      consume(126);                 // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  function try_FTStemOption()
  {
    switch (l1)
    {
    case 126:                       // 'stemming'
      consumeT(126);                // 'stemming'
      break;
    default:
      consumeT(234);                // 'no'
      lookahead1W(74);              // S^WS | '(:' | 'stemming'
      consumeT(126);                // 'stemming'
    }
  }

  function parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 129:                       // 'thesaurus'
      consume(129);                 // 'thesaurus'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 159:                     // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 181:                     // 'default'
        consume(181);               // 'default'
        break;
      default:
        consume(92);                // '('
        lookahead1W(112);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 159:                   // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          consume(181);             // 'default'
        }
        for (;;)
        {
          lookahead1W(101);         // S^WS | '(:' | ')' | ','
          if (l1 != 97)             // ','
          {
            break;
          }
          consume(97);              // ','
          lookahead1W(31);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        consume(94);                // ')'
      }
      break;
    default:
      consume(234);                 // 'no'
      lookahead1W(78);              // S^WS | '(:' | 'thesaurus'
      consume(129);                 // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  function try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 129:                       // 'thesaurus'
      consumeT(129);                // 'thesaurus'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 159:                     // 'at'
        try_FTThesaurusID();
        break;
      case 181:                     // 'default'
        consumeT(181);              // 'default'
        break;
      default:
        consumeT(92);               // '('
        lookahead1W(112);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 159:                   // 'at'
          try_FTThesaurusID();
          break;
        default:
          consumeT(181);            // 'default'
        }
        for (;;)
        {
          lookahead1W(101);         // S^WS | '(:' | ')' | ','
          if (l1 != 97)             // ','
          {
            break;
          }
          consumeT(97);             // ','
          lookahead1W(31);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        consumeT(94);               // ')'
      }
      break;
    default:
      consumeT(234);                // 'no'
      lookahead1W(78);              // S^WS | '(:' | 'thesaurus'
      consumeT(129);                // 'thesaurus'
    }
  }

  function parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    consume(159);                   // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(5);                     // URILiteral
    lookahead1W(220);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 74)                   // 'relationship'
    {
      consume(74);                  // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(144);                 // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    lk = predict(21);
    if (lk == 1)
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(58);              // S^WS | '(:' | 'levels'
      consume(55);                  // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  function try_FTThesaurusID()
  {
    consumeT(159);                  // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consumeT(5);                    // URILiteral
    lookahead1W(220);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 74)                   // 'relationship'
    {
      consumeT(74);                 // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consumeT(144);                // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    lk = predict(21);
    if (lk == 1)
    {
      try_FTLiteralRange();
      lookahead1W(58);              // S^WS | '(:' | 'levels'
      consumeT(55);                 // 'levels'
    }
  }

  function parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 120:                       // 'exactly'
      consume(120);                 // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consume(141);                 // IntegerLiteral
      break;
    case 159:                       // 'at'
      consume(159);                 // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 54:                      // 'least'
        consume(54);                // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consume(141);               // IntegerLiteral
        break;
      default:
        consume(58);                // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consume(141);               // IntegerLiteral
      }
      break;
    default:
      consume(121);                 // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consume(141);                 // IntegerLiteral
      lookahead1W(79);              // S^WS | '(:' | 'to'
      consume(266);                 // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consume(141);                 // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  function try_FTLiteralRange()
  {
    switch (l1)
    {
    case 120:                       // 'exactly'
      consumeT(120);                // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consumeT(141);                // IntegerLiteral
      break;
    case 159:                       // 'at'
      consumeT(159);                // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 54:                      // 'least'
        consumeT(54);               // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consumeT(141);              // IntegerLiteral
        break;
      default:
        consumeT(58);               // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consumeT(141);              // IntegerLiteral
      }
      break;
    default:
      consumeT(121);                // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consumeT(141);                // IntegerLiteral
      lookahead1W(79);              // S^WS | '(:' | 'to'
      consumeT(266);                // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consumeT(141);                // IntegerLiteral
    }
  }

  function parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 127:                       // 'stop'
      consume(127);                 // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consume(133);                 // 'words'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 181:                     // 'default'
        consume(181);               // 'default'
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 197             // 'except'
           && l1 != 272)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 197             // 'except'
           && l1 != 272)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consume(234);                 // 'no'
      lookahead1W(75);              // S^WS | '(:' | 'stop'
      consume(127);                 // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consume(133);                 // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  function try_FTStopWordOption()
  {
    switch (l1)
    {
    case 127:                       // 'stop'
      consumeT(127);                // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consumeT(133);                // 'words'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 181:                     // 'default'
        consumeT(181);              // 'default'
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 197             // 'except'
           && l1 != 272)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 197             // 'except'
           && l1 != 272)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consumeT(234);                // 'no'
      lookahead1W(75);              // S^WS | '(:' | 'stop'
      consumeT(127);                // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consumeT(133);                // 'words'
    }
  }

  function parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 159:                       // 'at'
      consume(159);                 // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(5);                   // URILiteral
      break;
    default:
      consume(92);                  // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(144);                 // StringLiteral
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 97)               // ','
        {
          break;
        }
        consume(97);                // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        consume(144);               // StringLiteral
      }
      consume(94);                  // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  function try_FTStopWords()
  {
    switch (l1)
    {
    case 159:                       // 'at'
      consumeT(159);                // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consumeT(5);                  // URILiteral
      break;
    default:
      consumeT(92);                 // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consumeT(144);                // StringLiteral
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 97)               // ','
        {
          break;
        }
        consumeT(97);               // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        consumeT(144);              // StringLiteral
      }
      consumeT(94);                 // ')'
    }
  }

  function parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 272:                       // 'union'
      consume(272);                 // 'union'
      break;
    default:
      consume(197);                 // 'except'
    }
    lookahead1W(99);                // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  function try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 272:                       // 'union'
      consumeT(272);                // 'union'
      break;
    default:
      consumeT(197);                // 'except'
    }
    lookahead1W(99);                // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  function parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    consume(122);                   // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consume(144);                   // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  function try_FTLanguageOption()
  {
    consumeT(122);                  // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consumeT(144);                  // StringLiteral
  }

  function parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 131:                       // 'wildcards'
      consume(131);                 // 'wildcards'
      break;
    default:
      consume(234);                 // 'no'
      lookahead1W(84);              // S^WS | '(:' | 'wildcards'
      consume(131);                 // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  function try_FTWildCardOption()
  {
    switch (l1)
    {
    case 131:                       // 'wildcards'
      consumeT(131);                // 'wildcards'
      break;
    default:
      consumeT(234);                // 'no'
      lookahead1W(84);              // S^WS | '(:' | 'wildcards'
      consumeT(131);                // 'wildcards'
    }
  }

  function parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    consume(239);                   // 'option'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consume(144);                   // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  function try_FTExtensionOption()
  {
    consumeT(239);                  // 'option'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consumeT(144);                  // StringLiteral
  }

  function parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    consume(85);                    // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consume(39);                    // 'content'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  function try_FTIgnoreOption()
  {
    consumeT(85);                   // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consumeT(39);                   // 'content'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_UnionExpr();
  }

  function parse_CollectionDecl()
  {
    eventHandler.startNonterminal("CollectionDecl", e0);
    consume(38);                    // 'collection'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(107);               // S^WS | '(:' | ';' | 'as'
    if (l1 == 157)                  // 'as'
    {
      whitespace();
      parse_CollectionTypeDecl();
    }
    eventHandler.endNonterminal("CollectionDecl", e0);
  }

  function parse_CollectionTypeDecl()
  {
    eventHandler.startNonterminal("CollectionTypeDecl", e0);
    consume(157);                   // 'as'
    lookahead1W(183);               // S^WS | '(:' | 'array' | 'attribute' | 'comment' | 'document-node' | 'element' |
                                    // 'json-item' | 'namespace-node' | 'node' | 'object' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'text'
    whitespace();
    parse_KindTest();
    lookahead1W(156);               // S^WS | '(:' | '*' | '+' | ';' | '?'
    if (l1 != 101)                  // ';'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("CollectionTypeDecl", e0);
  }

  function parse_IndexName()
  {
    eventHandler.startNonterminal("IndexName", e0);
    parse_EQName();
    eventHandler.endNonterminal("IndexName", e0);
  }

  function parse_IndexDomainExpr()
  {
    eventHandler.startNonterminal("IndexDomainExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexDomainExpr", e0);
  }

  function parse_IndexKeySpec()
  {
    eventHandler.startNonterminal("IndexKeySpec", e0);
    parse_IndexKeyExpr();
    if (l1 == 157)                  // 'as'
    {
      whitespace();
      parse_IndexKeyTypeDecl();
    }
    lookahead1W(146);               // S^WS | '(:' | ',' | ';' | 'collation'
    if (l1 == 170)                  // 'collation'
    {
      whitespace();
      parse_IndexKeyCollation();
    }
    eventHandler.endNonterminal("IndexKeySpec", e0);
  }

  function parse_IndexKeyExpr()
  {
    eventHandler.startNonterminal("IndexKeyExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexKeyExpr", e0);
  }

  function parse_IndexKeyTypeDecl()
  {
    eventHandler.startNonterminal("IndexKeyTypeDecl", e0);
    consume(157);                   // 'as'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_AtomicType();
    lookahead1W(169);               // S^WS | '(:' | '*' | '+' | ',' | ';' | '?' | 'collation'
    if (l1 == 24                    // '*'
     || l1 == 96                    // '+'
     || l1 == 31)                   // '?'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("IndexKeyTypeDecl", e0);
  }

  function parse_AtomicType()
  {
    eventHandler.startNonterminal("AtomicType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicType", e0);
  }

  function parse_IndexKeyCollation()
  {
    eventHandler.startNonterminal("IndexKeyCollation", e0);
    consume(170);                   // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(5);                     // URILiteral
    eventHandler.endNonterminal("IndexKeyCollation", e0);
  }

  function parse_IndexDecl()
  {
    eventHandler.startNonterminal("IndexDecl", e0);
    consume(213);                   // 'index'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_IndexName();
    lookahead1W(65);                // S^WS | '(:' | 'on'
    consume(65);                    // 'on'
    lookahead1W(63);                // S^WS | '(:' | 'nodes'
    consume(236);                   // 'nodes'
    lookahead1W(265);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexDomainExpr();
    consume(114);                   // 'by'
    lookahead1W(265);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexKeySpec();
    for (;;)
    {
      lookahead1W(103);             // S^WS | '(:' | ',' | ';'
      if (l1 != 97)                 // ','
      {
        break;
      }
      consume(97);                  // ','
      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_IndexKeySpec();
    }
    eventHandler.endNonterminal("IndexDecl", e0);
  }

  function parse_ICDecl()
  {
    eventHandler.startNonterminal("ICDecl", e0);
    consume(216);                   // 'integrity'
    lookahead1W(40);                // S^WS | '(:' | 'constraint'
    consume(172);                   // 'constraint'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(120);               // S^WS | '(:' | 'foreign' | 'on'
    switch (l1)
    {
    case 65:                        // 'on'
      whitespace();
      parse_ICCollection();
      break;
    default:
      whitespace();
      parse_ICForeignKey();
    }
    eventHandler.endNonterminal("ICDecl", e0);
  }

  function parse_ICCollection()
  {
    eventHandler.startNonterminal("ICCollection", e0);
    consume(65);                    // 'on'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    consume(38);                    // 'collection'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(140);               // S^WS | '$' | '(:' | 'foreach' | 'node'
    switch (l1)
    {
    case 146:                       // '$'
      whitespace();
      parse_ICCollSequence();
      break;
    case 235:                       // 'node'
      whitespace();
      parse_ICCollSequenceUnique();
      break;
    default:
      whitespace();
      parse_ICCollNode();
    }
    eventHandler.endNonterminal("ICCollection", e0);
  }

  function parse_ICCollSequence()
  {
    eventHandler.startNonterminal("ICCollSequence", e0);
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    consume(37);                    // 'check'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollSequence", e0);
  }

  function parse_ICCollSequenceUnique()
  {
    eventHandler.startNonterminal("ICCollSequenceUnique", e0);
    consume(235);                   // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    consume(37);                    // 'check'
    lookahead1W(80);                // S^WS | '(:' | 'unique'
    consume(80);                    // 'unique'
    lookahead1W(57);                // S^WS | '(:' | 'key'
    consume(53);                    // 'key'
    lookahead1W(265);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICCollSequenceUnique", e0);
  }

  function parse_ICCollNode()
  {
    eventHandler.startNonterminal("ICCollNode", e0);
    consume(42);                    // 'foreach'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(235);                   // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    consume(37);                    // 'check'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollNode", e0);
  }

  function parse_ICForeignKey()
  {
    eventHandler.startNonterminal("ICForeignKey", e0);
    consume(43);                    // 'foreign'
    lookahead1W(57);                // S^WS | '(:' | 'key'
    consume(53);                    // 'key'
    lookahead1W(51);                // S^WS | '(:' | 'from'
    whitespace();
    parse_ICForeignKeySource();
    whitespace();
    parse_ICForeignKeyTarget();
    eventHandler.endNonterminal("ICForeignKey", e0);
  }

  function parse_ICForeignKeySource()
  {
    eventHandler.startNonterminal("ICForeignKeySource", e0);
    consume(121);                   // 'from'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeySource", e0);
  }

  function parse_ICForeignKeyTarget()
  {
    eventHandler.startNonterminal("ICForeignKeyTarget", e0);
    consume(266);                   // 'to'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeyTarget", e0);
  }

  function parse_ICForeignKeyValues()
  {
    eventHandler.startNonterminal("ICForeignKeyValues", e0);
    consume(38);                    // 'collection'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(235);                   // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(57);                // S^WS | '(:' | 'key'
    consume(53);                    // 'key'
    lookahead1W(265);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICForeignKeyValues", e0);
  }

  function try_Comment()
  {
    consumeT(23);                   // '(:'
    for (;;)
    {
      lookahead1(89);               // CommentContents | '(:' | ':)'
      if (l1 == 27)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 18:                      // CommentContents
        consumeT(18);               // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    consumeT(27);                   // ':)'
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 16:                        // S^WS
      consumeT(16);                 // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(247);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 160:                       // 'attribute'
      consume(160);                 // 'attribute'
      break;
    case 171:                       // 'comment'
      consume(171);                 // 'comment'
      break;
    case 188:                       // 'document-node'
      consume(188);                 // 'document-node'
      break;
    case 189:                       // 'element'
      consume(189);                 // 'element'
      break;
    case 192:                       // 'empty-sequence'
      consume(192);                 // 'empty-sequence'
      break;
    case 205:                       // 'function'
      consume(205);                 // 'function'
      break;
    case 210:                       // 'if'
      consume(210);                 // 'if'
      break;
    case 220:                       // 'item'
      consume(220);                 // 'item'
      break;
    case 232:                       // 'namespace-node'
      consume(232);                 // 'namespace-node'
      break;
    case 235:                       // 'node'
      consume(235);                 // 'node'
      break;
    case 247:                       // 'processing-instruction'
      consume(247);                 // 'processing-instruction'
      break;
    case 255:                       // 'schema-attribute'
      consume(255);                 // 'schema-attribute'
      break;
    case 256:                       // 'schema-element'
      consume(256);                 // 'schema-element'
      break;
    case 264:                       // 'switch'
      consume(264);                 // 'switch'
      break;
    case 265:                       // 'text'
      consume(265);                 // 'text'
      break;
    case 271:                       // 'typeswitch'
      consume(271);                 // 'typeswitch'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(247);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 160:                       // 'attribute'
      consumeT(160);                // 'attribute'
      break;
    case 171:                       // 'comment'
      consumeT(171);                // 'comment'
      break;
    case 188:                       // 'document-node'
      consumeT(188);                // 'document-node'
      break;
    case 189:                       // 'element'
      consumeT(189);                // 'element'
      break;
    case 192:                       // 'empty-sequence'
      consumeT(192);                // 'empty-sequence'
      break;
    case 205:                       // 'function'
      consumeT(205);                // 'function'
      break;
    case 210:                       // 'if'
      consumeT(210);                // 'if'
      break;
    case 220:                       // 'item'
      consumeT(220);                // 'item'
      break;
    case 232:                       // 'namespace-node'
      consumeT(232);                // 'namespace-node'
      break;
    case 235:                       // 'node'
      consumeT(235);                // 'node'
      break;
    case 247:                       // 'processing-instruction'
      consumeT(247);                // 'processing-instruction'
      break;
    case 255:                       // 'schema-attribute'
      consumeT(255);                // 'schema-attribute'
      break;
    case 256:                       // 'schema-element'
      consumeT(256);                // 'schema-element'
      break;
    case 264:                       // 'switch'
      consumeT(264);                // 'switch'
      break;
    case 265:                       // 'text'
      consumeT(265);                // 'text'
      break;
    case 271:                       // 'typeswitch'
      consumeT(271);                // 'typeswitch'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 140:                       // EQName^Token
      consume(140);                 // EQName^Token
      break;
    case 151:                       // 'after'
      consume(151);                 // 'after'
      break;
    case 153:                       // 'ancestor'
      consume(153);                 // 'ancestor'
      break;
    case 154:                       // 'ancestor-or-self'
      consume(154);                 // 'ancestor-or-self'
      break;
    case 155:                       // 'and'
      consume(155);                 // 'and'
      break;
    case 157:                       // 'as'
      consume(157);                 // 'as'
      break;
    case 158:                       // 'ascending'
      consume(158);                 // 'ascending'
      break;
    case 162:                       // 'before'
      consume(162);                 // 'before'
      break;
    case 165:                       // 'case'
      consume(165);                 // 'case'
      break;
    case 166:                       // 'cast'
      consume(166);                 // 'cast'
      break;
    case 167:                       // 'castable'
      consume(167);                 // 'castable'
      break;
    case 169:                       // 'child'
      consume(169);                 // 'child'
      break;
    case 170:                       // 'collation'
      consume(170);                 // 'collation'
      break;
    case 176:                       // 'copy'
      consume(176);                 // 'copy'
      break;
    case 178:                       // 'count'
      consume(178);                 // 'count'
      break;
    case 180:                       // 'declare'
      consume(180);                 // 'declare'
      break;
    case 181:                       // 'default'
      consume(181);                 // 'default'
      break;
    case 182:                       // 'delete'
      consume(182);                 // 'delete'
      break;
    case 183:                       // 'descendant'
      consume(183);                 // 'descendant'
      break;
    case 184:                       // 'descendant-or-self'
      consume(184);                 // 'descendant-or-self'
      break;
    case 185:                       // 'descending'
      consume(185);                 // 'descending'
      break;
    case 186:                       // 'div'
      consume(186);                 // 'div'
      break;
    case 187:                       // 'document'
      consume(187);                 // 'document'
      break;
    case 190:                       // 'else'
      consume(190);                 // 'else'
      break;
    case 191:                       // 'empty'
      consume(191);                 // 'empty'
      break;
    case 194:                       // 'end'
      consume(194);                 // 'end'
      break;
    case 195:                       // 'eq'
      consume(195);                 // 'eq'
      break;
    case 196:                       // 'every'
      consume(196);                 // 'every'
      break;
    case 197:                       // 'except'
      consume(197);                 // 'except'
      break;
    case 200:                       // 'first'
      consume(200);                 // 'first'
      break;
    case 201:                       // 'following'
      consume(201);                 // 'following'
      break;
    case 202:                       // 'following-sibling'
      consume(202);                 // 'following-sibling'
      break;
    case 203:                       // 'for'
      consume(203);                 // 'for'
      break;
    case 206:                       // 'ge'
      consume(206);                 // 'ge'
      break;
    case 207:                       // 'group'
      consume(207);                 // 'group'
      break;
    case 208:                       // 'gt'
      consume(208);                 // 'gt'
      break;
    case 209:                       // 'idiv'
      consume(209);                 // 'idiv'
      break;
    case 211:                       // 'import'
      consume(211);                 // 'import'
      break;
    case 214:                       // 'insert'
      consume(214);                 // 'insert'
      break;
    case 215:                       // 'instance'
      consume(215);                 // 'instance'
      break;
    case 217:                       // 'intersect'
      consume(217);                 // 'intersect'
      break;
    case 218:                       // 'into'
      consume(218);                 // 'into'
      break;
    case 219:                       // 'is'
      consume(219);                 // 'is'
      break;
    case 222:                       // 'last'
      consume(222);                 // 'last'
      break;
    case 224:                       // 'le'
      consume(224);                 // 'le'
      break;
    case 225:                       // 'let'
      consume(225);                 // 'let'
      break;
    case 227:                       // 'lt'
      consume(227);                 // 'lt'
      break;
    case 228:                       // 'mod'
      consume(228);                 // 'mod'
      break;
    case 229:                       // 'modify'
      consume(229);                 // 'modify'
      break;
    case 230:                       // 'module'
      consume(230);                 // 'module'
      break;
    case 231:                       // 'namespace'
      consume(231);                 // 'namespace'
      break;
    case 233:                       // 'ne'
      consume(233);                 // 'ne'
      break;
    case 238:                       // 'only'
      consume(238);                 // 'only'
      break;
    case 240:                       // 'or'
      consume(240);                 // 'or'
      break;
    case 241:                       // 'order'
      consume(241);                 // 'order'
      break;
    case 242:                       // 'ordered'
      consume(242);                 // 'ordered'
      break;
    case 244:                       // 'parent'
      consume(244);                 // 'parent'
      break;
    case 245:                       // 'preceding'
      consume(245);                 // 'preceding'
      break;
    case 246:                       // 'preceding-sibling'
      consume(246);                 // 'preceding-sibling'
      break;
    case 248:                       // 'rename'
      consume(248);                 // 'rename'
      break;
    case 249:                       // 'replace'
      consume(249);                 // 'replace'
      break;
    case 250:                       // 'return'
      consume(250);                 // 'return'
      break;
    case 253:                       // 'satisfies'
      consume(253);                 // 'satisfies'
      break;
    case 258:                       // 'self'
      consume(258);                 // 'self'
      break;
    case 260:                       // 'some'
      consume(260);                 // 'some'
      break;
    case 261:                       // 'stable'
      consume(261);                 // 'stable'
      break;
    case 262:                       // 'start'
      consume(262);                 // 'start'
      break;
    case 266:                       // 'to'
      consume(266);                 // 'to'
      break;
    case 267:                       // 'treat'
      consume(267);                 // 'treat'
      break;
    case 268:                       // 'try'
      consume(268);                 // 'try'
      break;
    case 272:                       // 'union'
      consume(272);                 // 'union'
      break;
    case 273:                       // 'unordered'
      consume(273);                 // 'unordered'
      break;
    case 275:                       // 'validate'
      consume(275);                 // 'validate'
      break;
    case 279:                       // 'where'
      consume(279);                 // 'where'
      break;
    case 281:                       // 'with'
      consume(281);                 // 'with'
      break;
    case 282:                       // 'xquery'
      consume(282);                 // 'xquery'
      break;
    case 152:                       // 'allowing'
      consume(152);                 // 'allowing'
      break;
    case 159:                       // 'at'
      consume(159);                 // 'at'
      break;
    case 161:                       // 'base-uri'
      consume(161);                 // 'base-uri'
      break;
    case 163:                       // 'boundary-space'
      consume(163);                 // 'boundary-space'
      break;
    case 164:                       // 'break'
      consume(164);                 // 'break'
      break;
    case 168:                       // 'catch'
      consume(168);                 // 'catch'
      break;
    case 173:                       // 'construction'
      consume(173);                 // 'construction'
      break;
    case 174:                       // 'context'
      consume(174);                 // 'context'
      break;
    case 175:                       // 'continue'
      consume(175);                 // 'continue'
      break;
    case 177:                       // 'copy-namespaces'
      consume(177);                 // 'copy-namespaces'
      break;
    case 179:                       // 'decimal-format'
      consume(179);                 // 'decimal-format'
      break;
    case 193:                       // 'encoding'
      consume(193);                 // 'encoding'
      break;
    case 198:                       // 'exit'
      consume(198);                 // 'exit'
      break;
    case 199:                       // 'external'
      consume(199);                 // 'external'
      break;
    case 204:                       // 'ft-option'
      consume(204);                 // 'ft-option'
      break;
    case 212:                       // 'in'
      consume(212);                 // 'in'
      break;
    case 213:                       // 'index'
      consume(213);                 // 'index'
      break;
    case 216:                       // 'integrity'
      consume(216);                 // 'integrity'
      break;
    case 223:                       // 'lax'
      consume(223);                 // 'lax'
      break;
    case 236:                       // 'nodes'
      consume(236);                 // 'nodes'
      break;
    case 239:                       // 'option'
      consume(239);                 // 'option'
      break;
    case 243:                       // 'ordering'
      consume(243);                 // 'ordering'
      break;
    case 252:                       // 'revalidation'
      consume(252);                 // 'revalidation'
      break;
    case 254:                       // 'schema'
      consume(254);                 // 'schema'
      break;
    case 257:                       // 'score'
      consume(257);                 // 'score'
      break;
    case 259:                       // 'sliding'
      consume(259);                 // 'sliding'
      break;
    case 263:                       // 'strict'
      consume(263);                 // 'strict'
      break;
    case 269:                       // 'tumbling'
      consume(269);                 // 'tumbling'
      break;
    case 270:                       // 'type'
      consume(270);                 // 'type'
      break;
    case 274:                       // 'updating'
      consume(274);                 // 'updating'
      break;
    case 276:                       // 'value'
      consume(276);                 // 'value'
      break;
    case 277:                       // 'variable'
      consume(277);                 // 'variable'
      break;
    case 278:                       // 'version'
      consume(278);                 // 'version'
      break;
    case 280:                       // 'while'
      consume(280);                 // 'while'
      break;
    case 172:                       // 'constraint'
      consume(172);                 // 'constraint'
      break;
    case 226:                       // 'loop'
      consume(226);                 // 'loop'
      break;
    default:
      consume(251);                 // 'returning'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 140:                       // EQName^Token
      consumeT(140);                // EQName^Token
      break;
    case 151:                       // 'after'
      consumeT(151);                // 'after'
      break;
    case 153:                       // 'ancestor'
      consumeT(153);                // 'ancestor'
      break;
    case 154:                       // 'ancestor-or-self'
      consumeT(154);                // 'ancestor-or-self'
      break;
    case 155:                       // 'and'
      consumeT(155);                // 'and'
      break;
    case 157:                       // 'as'
      consumeT(157);                // 'as'
      break;
    case 158:                       // 'ascending'
      consumeT(158);                // 'ascending'
      break;
    case 162:                       // 'before'
      consumeT(162);                // 'before'
      break;
    case 165:                       // 'case'
      consumeT(165);                // 'case'
      break;
    case 166:                       // 'cast'
      consumeT(166);                // 'cast'
      break;
    case 167:                       // 'castable'
      consumeT(167);                // 'castable'
      break;
    case 169:                       // 'child'
      consumeT(169);                // 'child'
      break;
    case 170:                       // 'collation'
      consumeT(170);                // 'collation'
      break;
    case 176:                       // 'copy'
      consumeT(176);                // 'copy'
      break;
    case 178:                       // 'count'
      consumeT(178);                // 'count'
      break;
    case 180:                       // 'declare'
      consumeT(180);                // 'declare'
      break;
    case 181:                       // 'default'
      consumeT(181);                // 'default'
      break;
    case 182:                       // 'delete'
      consumeT(182);                // 'delete'
      break;
    case 183:                       // 'descendant'
      consumeT(183);                // 'descendant'
      break;
    case 184:                       // 'descendant-or-self'
      consumeT(184);                // 'descendant-or-self'
      break;
    case 185:                       // 'descending'
      consumeT(185);                // 'descending'
      break;
    case 186:                       // 'div'
      consumeT(186);                // 'div'
      break;
    case 187:                       // 'document'
      consumeT(187);                // 'document'
      break;
    case 190:                       // 'else'
      consumeT(190);                // 'else'
      break;
    case 191:                       // 'empty'
      consumeT(191);                // 'empty'
      break;
    case 194:                       // 'end'
      consumeT(194);                // 'end'
      break;
    case 195:                       // 'eq'
      consumeT(195);                // 'eq'
      break;
    case 196:                       // 'every'
      consumeT(196);                // 'every'
      break;
    case 197:                       // 'except'
      consumeT(197);                // 'except'
      break;
    case 200:                       // 'first'
      consumeT(200);                // 'first'
      break;
    case 201:                       // 'following'
      consumeT(201);                // 'following'
      break;
    case 202:                       // 'following-sibling'
      consumeT(202);                // 'following-sibling'
      break;
    case 203:                       // 'for'
      consumeT(203);                // 'for'
      break;
    case 206:                       // 'ge'
      consumeT(206);                // 'ge'
      break;
    case 207:                       // 'group'
      consumeT(207);                // 'group'
      break;
    case 208:                       // 'gt'
      consumeT(208);                // 'gt'
      break;
    case 209:                       // 'idiv'
      consumeT(209);                // 'idiv'
      break;
    case 211:                       // 'import'
      consumeT(211);                // 'import'
      break;
    case 214:                       // 'insert'
      consumeT(214);                // 'insert'
      break;
    case 215:                       // 'instance'
      consumeT(215);                // 'instance'
      break;
    case 217:                       // 'intersect'
      consumeT(217);                // 'intersect'
      break;
    case 218:                       // 'into'
      consumeT(218);                // 'into'
      break;
    case 219:                       // 'is'
      consumeT(219);                // 'is'
      break;
    case 222:                       // 'last'
      consumeT(222);                // 'last'
      break;
    case 224:                       // 'le'
      consumeT(224);                // 'le'
      break;
    case 225:                       // 'let'
      consumeT(225);                // 'let'
      break;
    case 227:                       // 'lt'
      consumeT(227);                // 'lt'
      break;
    case 228:                       // 'mod'
      consumeT(228);                // 'mod'
      break;
    case 229:                       // 'modify'
      consumeT(229);                // 'modify'
      break;
    case 230:                       // 'module'
      consumeT(230);                // 'module'
      break;
    case 231:                       // 'namespace'
      consumeT(231);                // 'namespace'
      break;
    case 233:                       // 'ne'
      consumeT(233);                // 'ne'
      break;
    case 238:                       // 'only'
      consumeT(238);                // 'only'
      break;
    case 240:                       // 'or'
      consumeT(240);                // 'or'
      break;
    case 241:                       // 'order'
      consumeT(241);                // 'order'
      break;
    case 242:                       // 'ordered'
      consumeT(242);                // 'ordered'
      break;
    case 244:                       // 'parent'
      consumeT(244);                // 'parent'
      break;
    case 245:                       // 'preceding'
      consumeT(245);                // 'preceding'
      break;
    case 246:                       // 'preceding-sibling'
      consumeT(246);                // 'preceding-sibling'
      break;
    case 248:                       // 'rename'
      consumeT(248);                // 'rename'
      break;
    case 249:                       // 'replace'
      consumeT(249);                // 'replace'
      break;
    case 250:                       // 'return'
      consumeT(250);                // 'return'
      break;
    case 253:                       // 'satisfies'
      consumeT(253);                // 'satisfies'
      break;
    case 258:                       // 'self'
      consumeT(258);                // 'self'
      break;
    case 260:                       // 'some'
      consumeT(260);                // 'some'
      break;
    case 261:                       // 'stable'
      consumeT(261);                // 'stable'
      break;
    case 262:                       // 'start'
      consumeT(262);                // 'start'
      break;
    case 266:                       // 'to'
      consumeT(266);                // 'to'
      break;
    case 267:                       // 'treat'
      consumeT(267);                // 'treat'
      break;
    case 268:                       // 'try'
      consumeT(268);                // 'try'
      break;
    case 272:                       // 'union'
      consumeT(272);                // 'union'
      break;
    case 273:                       // 'unordered'
      consumeT(273);                // 'unordered'
      break;
    case 275:                       // 'validate'
      consumeT(275);                // 'validate'
      break;
    case 279:                       // 'where'
      consumeT(279);                // 'where'
      break;
    case 281:                       // 'with'
      consumeT(281);                // 'with'
      break;
    case 282:                       // 'xquery'
      consumeT(282);                // 'xquery'
      break;
    case 152:                       // 'allowing'
      consumeT(152);                // 'allowing'
      break;
    case 159:                       // 'at'
      consumeT(159);                // 'at'
      break;
    case 161:                       // 'base-uri'
      consumeT(161);                // 'base-uri'
      break;
    case 163:                       // 'boundary-space'
      consumeT(163);                // 'boundary-space'
      break;
    case 164:                       // 'break'
      consumeT(164);                // 'break'
      break;
    case 168:                       // 'catch'
      consumeT(168);                // 'catch'
      break;
    case 173:                       // 'construction'
      consumeT(173);                // 'construction'
      break;
    case 174:                       // 'context'
      consumeT(174);                // 'context'
      break;
    case 175:                       // 'continue'
      consumeT(175);                // 'continue'
      break;
    case 177:                       // 'copy-namespaces'
      consumeT(177);                // 'copy-namespaces'
      break;
    case 179:                       // 'decimal-format'
      consumeT(179);                // 'decimal-format'
      break;
    case 193:                       // 'encoding'
      consumeT(193);                // 'encoding'
      break;
    case 198:                       // 'exit'
      consumeT(198);                // 'exit'
      break;
    case 199:                       // 'external'
      consumeT(199);                // 'external'
      break;
    case 204:                       // 'ft-option'
      consumeT(204);                // 'ft-option'
      break;
    case 212:                       // 'in'
      consumeT(212);                // 'in'
      break;
    case 213:                       // 'index'
      consumeT(213);                // 'index'
      break;
    case 216:                       // 'integrity'
      consumeT(216);                // 'integrity'
      break;
    case 223:                       // 'lax'
      consumeT(223);                // 'lax'
      break;
    case 236:                       // 'nodes'
      consumeT(236);                // 'nodes'
      break;
    case 239:                       // 'option'
      consumeT(239);                // 'option'
      break;
    case 243:                       // 'ordering'
      consumeT(243);                // 'ordering'
      break;
    case 252:                       // 'revalidation'
      consumeT(252);                // 'revalidation'
      break;
    case 254:                       // 'schema'
      consumeT(254);                // 'schema'
      break;
    case 257:                       // 'score'
      consumeT(257);                // 'score'
      break;
    case 259:                       // 'sliding'
      consumeT(259);                // 'sliding'
      break;
    case 263:                       // 'strict'
      consumeT(263);                // 'strict'
      break;
    case 269:                       // 'tumbling'
      consumeT(269);                // 'tumbling'
      break;
    case 270:                       // 'type'
      consumeT(270);                // 'type'
      break;
    case 274:                       // 'updating'
      consumeT(274);                // 'updating'
      break;
    case 276:                       // 'value'
      consumeT(276);                // 'value'
      break;
    case 277:                       // 'variable'
      consumeT(277);                // 'variable'
      break;
    case 278:                       // 'version'
      consumeT(278);                // 'version'
      break;
    case 280:                       // 'while'
      consumeT(280);                // 'while'
      break;
    case 172:                       // 'constraint'
      consumeT(172);                // 'constraint'
      break;
    case 226:                       // 'loop'
      consumeT(226);                // 'loop'
      break;
    default:
      consumeT(251);                // 'returning'
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 13:                        // NCName^Token
      consume(13);                  // NCName^Token
      break;
    case 151:                       // 'after'
      consume(151);                 // 'after'
      break;
    case 155:                       // 'and'
      consume(155);                 // 'and'
      break;
    case 157:                       // 'as'
      consume(157);                 // 'as'
      break;
    case 158:                       // 'ascending'
      consume(158);                 // 'ascending'
      break;
    case 162:                       // 'before'
      consume(162);                 // 'before'
      break;
    case 165:                       // 'case'
      consume(165);                 // 'case'
      break;
    case 166:                       // 'cast'
      consume(166);                 // 'cast'
      break;
    case 167:                       // 'castable'
      consume(167);                 // 'castable'
      break;
    case 170:                       // 'collation'
      consume(170);                 // 'collation'
      break;
    case 178:                       // 'count'
      consume(178);                 // 'count'
      break;
    case 181:                       // 'default'
      consume(181);                 // 'default'
      break;
    case 185:                       // 'descending'
      consume(185);                 // 'descending'
      break;
    case 186:                       // 'div'
      consume(186);                 // 'div'
      break;
    case 190:                       // 'else'
      consume(190);                 // 'else'
      break;
    case 191:                       // 'empty'
      consume(191);                 // 'empty'
      break;
    case 194:                       // 'end'
      consume(194);                 // 'end'
      break;
    case 195:                       // 'eq'
      consume(195);                 // 'eq'
      break;
    case 197:                       // 'except'
      consume(197);                 // 'except'
      break;
    case 203:                       // 'for'
      consume(203);                 // 'for'
      break;
    case 206:                       // 'ge'
      consume(206);                 // 'ge'
      break;
    case 207:                       // 'group'
      consume(207);                 // 'group'
      break;
    case 208:                       // 'gt'
      consume(208);                 // 'gt'
      break;
    case 209:                       // 'idiv'
      consume(209);                 // 'idiv'
      break;
    case 215:                       // 'instance'
      consume(215);                 // 'instance'
      break;
    case 217:                       // 'intersect'
      consume(217);                 // 'intersect'
      break;
    case 218:                       // 'into'
      consume(218);                 // 'into'
      break;
    case 219:                       // 'is'
      consume(219);                 // 'is'
      break;
    case 224:                       // 'le'
      consume(224);                 // 'le'
      break;
    case 225:                       // 'let'
      consume(225);                 // 'let'
      break;
    case 227:                       // 'lt'
      consume(227);                 // 'lt'
      break;
    case 228:                       // 'mod'
      consume(228);                 // 'mod'
      break;
    case 229:                       // 'modify'
      consume(229);                 // 'modify'
      break;
    case 233:                       // 'ne'
      consume(233);                 // 'ne'
      break;
    case 238:                       // 'only'
      consume(238);                 // 'only'
      break;
    case 240:                       // 'or'
      consume(240);                 // 'or'
      break;
    case 241:                       // 'order'
      consume(241);                 // 'order'
      break;
    case 250:                       // 'return'
      consume(250);                 // 'return'
      break;
    case 253:                       // 'satisfies'
      consume(253);                 // 'satisfies'
      break;
    case 261:                       // 'stable'
      consume(261);                 // 'stable'
      break;
    case 262:                       // 'start'
      consume(262);                 // 'start'
      break;
    case 266:                       // 'to'
      consume(266);                 // 'to'
      break;
    case 267:                       // 'treat'
      consume(267);                 // 'treat'
      break;
    case 272:                       // 'union'
      consume(272);                 // 'union'
      break;
    case 279:                       // 'where'
      consume(279);                 // 'where'
      break;
    case 281:                       // 'with'
      consume(281);                 // 'with'
      break;
    case 153:                       // 'ancestor'
      consume(153);                 // 'ancestor'
      break;
    case 154:                       // 'ancestor-or-self'
      consume(154);                 // 'ancestor-or-self'
      break;
    case 160:                       // 'attribute'
      consume(160);                 // 'attribute'
      break;
    case 169:                       // 'child'
      consume(169);                 // 'child'
      break;
    case 171:                       // 'comment'
      consume(171);                 // 'comment'
      break;
    case 176:                       // 'copy'
      consume(176);                 // 'copy'
      break;
    case 180:                       // 'declare'
      consume(180);                 // 'declare'
      break;
    case 182:                       // 'delete'
      consume(182);                 // 'delete'
      break;
    case 183:                       // 'descendant'
      consume(183);                 // 'descendant'
      break;
    case 184:                       // 'descendant-or-self'
      consume(184);                 // 'descendant-or-self'
      break;
    case 187:                       // 'document'
      consume(187);                 // 'document'
      break;
    case 188:                       // 'document-node'
      consume(188);                 // 'document-node'
      break;
    case 189:                       // 'element'
      consume(189);                 // 'element'
      break;
    case 192:                       // 'empty-sequence'
      consume(192);                 // 'empty-sequence'
      break;
    case 196:                       // 'every'
      consume(196);                 // 'every'
      break;
    case 200:                       // 'first'
      consume(200);                 // 'first'
      break;
    case 201:                       // 'following'
      consume(201);                 // 'following'
      break;
    case 202:                       // 'following-sibling'
      consume(202);                 // 'following-sibling'
      break;
    case 205:                       // 'function'
      consume(205);                 // 'function'
      break;
    case 210:                       // 'if'
      consume(210);                 // 'if'
      break;
    case 211:                       // 'import'
      consume(211);                 // 'import'
      break;
    case 214:                       // 'insert'
      consume(214);                 // 'insert'
      break;
    case 220:                       // 'item'
      consume(220);                 // 'item'
      break;
    case 222:                       // 'last'
      consume(222);                 // 'last'
      break;
    case 230:                       // 'module'
      consume(230);                 // 'module'
      break;
    case 231:                       // 'namespace'
      consume(231);                 // 'namespace'
      break;
    case 232:                       // 'namespace-node'
      consume(232);                 // 'namespace-node'
      break;
    case 235:                       // 'node'
      consume(235);                 // 'node'
      break;
    case 242:                       // 'ordered'
      consume(242);                 // 'ordered'
      break;
    case 244:                       // 'parent'
      consume(244);                 // 'parent'
      break;
    case 245:                       // 'preceding'
      consume(245);                 // 'preceding'
      break;
    case 246:                       // 'preceding-sibling'
      consume(246);                 // 'preceding-sibling'
      break;
    case 247:                       // 'processing-instruction'
      consume(247);                 // 'processing-instruction'
      break;
    case 248:                       // 'rename'
      consume(248);                 // 'rename'
      break;
    case 249:                       // 'replace'
      consume(249);                 // 'replace'
      break;
    case 255:                       // 'schema-attribute'
      consume(255);                 // 'schema-attribute'
      break;
    case 256:                       // 'schema-element'
      consume(256);                 // 'schema-element'
      break;
    case 258:                       // 'self'
      consume(258);                 // 'self'
      break;
    case 260:                       // 'some'
      consume(260);                 // 'some'
      break;
    case 264:                       // 'switch'
      consume(264);                 // 'switch'
      break;
    case 265:                       // 'text'
      consume(265);                 // 'text'
      break;
    case 268:                       // 'try'
      consume(268);                 // 'try'
      break;
    case 271:                       // 'typeswitch'
      consume(271);                 // 'typeswitch'
      break;
    case 273:                       // 'unordered'
      consume(273);                 // 'unordered'
      break;
    case 275:                       // 'validate'
      consume(275);                 // 'validate'
      break;
    case 277:                       // 'variable'
      consume(277);                 // 'variable'
      break;
    case 282:                       // 'xquery'
      consume(282);                 // 'xquery'
      break;
    case 152:                       // 'allowing'
      consume(152);                 // 'allowing'
      break;
    case 159:                       // 'at'
      consume(159);                 // 'at'
      break;
    case 161:                       // 'base-uri'
      consume(161);                 // 'base-uri'
      break;
    case 163:                       // 'boundary-space'
      consume(163);                 // 'boundary-space'
      break;
    case 164:                       // 'break'
      consume(164);                 // 'break'
      break;
    case 168:                       // 'catch'
      consume(168);                 // 'catch'
      break;
    case 173:                       // 'construction'
      consume(173);                 // 'construction'
      break;
    case 174:                       // 'context'
      consume(174);                 // 'context'
      break;
    case 175:                       // 'continue'
      consume(175);                 // 'continue'
      break;
    case 177:                       // 'copy-namespaces'
      consume(177);                 // 'copy-namespaces'
      break;
    case 179:                       // 'decimal-format'
      consume(179);                 // 'decimal-format'
      break;
    case 193:                       // 'encoding'
      consume(193);                 // 'encoding'
      break;
    case 198:                       // 'exit'
      consume(198);                 // 'exit'
      break;
    case 199:                       // 'external'
      consume(199);                 // 'external'
      break;
    case 204:                       // 'ft-option'
      consume(204);                 // 'ft-option'
      break;
    case 212:                       // 'in'
      consume(212);                 // 'in'
      break;
    case 213:                       // 'index'
      consume(213);                 // 'index'
      break;
    case 216:                       // 'integrity'
      consume(216);                 // 'integrity'
      break;
    case 223:                       // 'lax'
      consume(223);                 // 'lax'
      break;
    case 236:                       // 'nodes'
      consume(236);                 // 'nodes'
      break;
    case 239:                       // 'option'
      consume(239);                 // 'option'
      break;
    case 243:                       // 'ordering'
      consume(243);                 // 'ordering'
      break;
    case 252:                       // 'revalidation'
      consume(252);                 // 'revalidation'
      break;
    case 254:                       // 'schema'
      consume(254);                 // 'schema'
      break;
    case 257:                       // 'score'
      consume(257);                 // 'score'
      break;
    case 259:                       // 'sliding'
      consume(259);                 // 'sliding'
      break;
    case 263:                       // 'strict'
      consume(263);                 // 'strict'
      break;
    case 269:                       // 'tumbling'
      consume(269);                 // 'tumbling'
      break;
    case 270:                       // 'type'
      consume(270);                 // 'type'
      break;
    case 274:                       // 'updating'
      consume(274);                 // 'updating'
      break;
    case 276:                       // 'value'
      consume(276);                 // 'value'
      break;
    case 278:                       // 'version'
      consume(278);                 // 'version'
      break;
    case 280:                       // 'while'
      consume(280);                 // 'while'
      break;
    case 172:                       // 'constraint'
      consume(172);                 // 'constraint'
      break;
    case 226:                       // 'loop'
      consume(226);                 // 'loop'
      break;
    default:
      consume(251);                 // 'returning'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 13:                        // NCName^Token
      consumeT(13);                 // NCName^Token
      break;
    case 151:                       // 'after'
      consumeT(151);                // 'after'
      break;
    case 155:                       // 'and'
      consumeT(155);                // 'and'
      break;
    case 157:                       // 'as'
      consumeT(157);                // 'as'
      break;
    case 158:                       // 'ascending'
      consumeT(158);                // 'ascending'
      break;
    case 162:                       // 'before'
      consumeT(162);                // 'before'
      break;
    case 165:                       // 'case'
      consumeT(165);                // 'case'
      break;
    case 166:                       // 'cast'
      consumeT(166);                // 'cast'
      break;
    case 167:                       // 'castable'
      consumeT(167);                // 'castable'
      break;
    case 170:                       // 'collation'
      consumeT(170);                // 'collation'
      break;
    case 178:                       // 'count'
      consumeT(178);                // 'count'
      break;
    case 181:                       // 'default'
      consumeT(181);                // 'default'
      break;
    case 185:                       // 'descending'
      consumeT(185);                // 'descending'
      break;
    case 186:                       // 'div'
      consumeT(186);                // 'div'
      break;
    case 190:                       // 'else'
      consumeT(190);                // 'else'
      break;
    case 191:                       // 'empty'
      consumeT(191);                // 'empty'
      break;
    case 194:                       // 'end'
      consumeT(194);                // 'end'
      break;
    case 195:                       // 'eq'
      consumeT(195);                // 'eq'
      break;
    case 197:                       // 'except'
      consumeT(197);                // 'except'
      break;
    case 203:                       // 'for'
      consumeT(203);                // 'for'
      break;
    case 206:                       // 'ge'
      consumeT(206);                // 'ge'
      break;
    case 207:                       // 'group'
      consumeT(207);                // 'group'
      break;
    case 208:                       // 'gt'
      consumeT(208);                // 'gt'
      break;
    case 209:                       // 'idiv'
      consumeT(209);                // 'idiv'
      break;
    case 215:                       // 'instance'
      consumeT(215);                // 'instance'
      break;
    case 217:                       // 'intersect'
      consumeT(217);                // 'intersect'
      break;
    case 218:                       // 'into'
      consumeT(218);                // 'into'
      break;
    case 219:                       // 'is'
      consumeT(219);                // 'is'
      break;
    case 224:                       // 'le'
      consumeT(224);                // 'le'
      break;
    case 225:                       // 'let'
      consumeT(225);                // 'let'
      break;
    case 227:                       // 'lt'
      consumeT(227);                // 'lt'
      break;
    case 228:                       // 'mod'
      consumeT(228);                // 'mod'
      break;
    case 229:                       // 'modify'
      consumeT(229);                // 'modify'
      break;
    case 233:                       // 'ne'
      consumeT(233);                // 'ne'
      break;
    case 238:                       // 'only'
      consumeT(238);                // 'only'
      break;
    case 240:                       // 'or'
      consumeT(240);                // 'or'
      break;
    case 241:                       // 'order'
      consumeT(241);                // 'order'
      break;
    case 250:                       // 'return'
      consumeT(250);                // 'return'
      break;
    case 253:                       // 'satisfies'
      consumeT(253);                // 'satisfies'
      break;
    case 261:                       // 'stable'
      consumeT(261);                // 'stable'
      break;
    case 262:                       // 'start'
      consumeT(262);                // 'start'
      break;
    case 266:                       // 'to'
      consumeT(266);                // 'to'
      break;
    case 267:                       // 'treat'
      consumeT(267);                // 'treat'
      break;
    case 272:                       // 'union'
      consumeT(272);                // 'union'
      break;
    case 279:                       // 'where'
      consumeT(279);                // 'where'
      break;
    case 281:                       // 'with'
      consumeT(281);                // 'with'
      break;
    case 153:                       // 'ancestor'
      consumeT(153);                // 'ancestor'
      break;
    case 154:                       // 'ancestor-or-self'
      consumeT(154);                // 'ancestor-or-self'
      break;
    case 160:                       // 'attribute'
      consumeT(160);                // 'attribute'
      break;
    case 169:                       // 'child'
      consumeT(169);                // 'child'
      break;
    case 171:                       // 'comment'
      consumeT(171);                // 'comment'
      break;
    case 176:                       // 'copy'
      consumeT(176);                // 'copy'
      break;
    case 180:                       // 'declare'
      consumeT(180);                // 'declare'
      break;
    case 182:                       // 'delete'
      consumeT(182);                // 'delete'
      break;
    case 183:                       // 'descendant'
      consumeT(183);                // 'descendant'
      break;
    case 184:                       // 'descendant-or-self'
      consumeT(184);                // 'descendant-or-self'
      break;
    case 187:                       // 'document'
      consumeT(187);                // 'document'
      break;
    case 188:                       // 'document-node'
      consumeT(188);                // 'document-node'
      break;
    case 189:                       // 'element'
      consumeT(189);                // 'element'
      break;
    case 192:                       // 'empty-sequence'
      consumeT(192);                // 'empty-sequence'
      break;
    case 196:                       // 'every'
      consumeT(196);                // 'every'
      break;
    case 200:                       // 'first'
      consumeT(200);                // 'first'
      break;
    case 201:                       // 'following'
      consumeT(201);                // 'following'
      break;
    case 202:                       // 'following-sibling'
      consumeT(202);                // 'following-sibling'
      break;
    case 205:                       // 'function'
      consumeT(205);                // 'function'
      break;
    case 210:                       // 'if'
      consumeT(210);                // 'if'
      break;
    case 211:                       // 'import'
      consumeT(211);                // 'import'
      break;
    case 214:                       // 'insert'
      consumeT(214);                // 'insert'
      break;
    case 220:                       // 'item'
      consumeT(220);                // 'item'
      break;
    case 222:                       // 'last'
      consumeT(222);                // 'last'
      break;
    case 230:                       // 'module'
      consumeT(230);                // 'module'
      break;
    case 231:                       // 'namespace'
      consumeT(231);                // 'namespace'
      break;
    case 232:                       // 'namespace-node'
      consumeT(232);                // 'namespace-node'
      break;
    case 235:                       // 'node'
      consumeT(235);                // 'node'
      break;
    case 242:                       // 'ordered'
      consumeT(242);                // 'ordered'
      break;
    case 244:                       // 'parent'
      consumeT(244);                // 'parent'
      break;
    case 245:                       // 'preceding'
      consumeT(245);                // 'preceding'
      break;
    case 246:                       // 'preceding-sibling'
      consumeT(246);                // 'preceding-sibling'
      break;
    case 247:                       // 'processing-instruction'
      consumeT(247);                // 'processing-instruction'
      break;
    case 248:                       // 'rename'
      consumeT(248);                // 'rename'
      break;
    case 249:                       // 'replace'
      consumeT(249);                // 'replace'
      break;
    case 255:                       // 'schema-attribute'
      consumeT(255);                // 'schema-attribute'
      break;
    case 256:                       // 'schema-element'
      consumeT(256);                // 'schema-element'
      break;
    case 258:                       // 'self'
      consumeT(258);                // 'self'
      break;
    case 260:                       // 'some'
      consumeT(260);                // 'some'
      break;
    case 264:                       // 'switch'
      consumeT(264);                // 'switch'
      break;
    case 265:                       // 'text'
      consumeT(265);                // 'text'
      break;
    case 268:                       // 'try'
      consumeT(268);                // 'try'
      break;
    case 271:                       // 'typeswitch'
      consumeT(271);                // 'typeswitch'
      break;
    case 273:                       // 'unordered'
      consumeT(273);                // 'unordered'
      break;
    case 275:                       // 'validate'
      consumeT(275);                // 'validate'
      break;
    case 277:                       // 'variable'
      consumeT(277);                // 'variable'
      break;
    case 282:                       // 'xquery'
      consumeT(282);                // 'xquery'
      break;
    case 152:                       // 'allowing'
      consumeT(152);                // 'allowing'
      break;
    case 159:                       // 'at'
      consumeT(159);                // 'at'
      break;
    case 161:                       // 'base-uri'
      consumeT(161);                // 'base-uri'
      break;
    case 163:                       // 'boundary-space'
      consumeT(163);                // 'boundary-space'
      break;
    case 164:                       // 'break'
      consumeT(164);                // 'break'
      break;
    case 168:                       // 'catch'
      consumeT(168);                // 'catch'
      break;
    case 173:                       // 'construction'
      consumeT(173);                // 'construction'
      break;
    case 174:                       // 'context'
      consumeT(174);                // 'context'
      break;
    case 175:                       // 'continue'
      consumeT(175);                // 'continue'
      break;
    case 177:                       // 'copy-namespaces'
      consumeT(177);                // 'copy-namespaces'
      break;
    case 179:                       // 'decimal-format'
      consumeT(179);                // 'decimal-format'
      break;
    case 193:                       // 'encoding'
      consumeT(193);                // 'encoding'
      break;
    case 198:                       // 'exit'
      consumeT(198);                // 'exit'
      break;
    case 199:                       // 'external'
      consumeT(199);                // 'external'
      break;
    case 204:                       // 'ft-option'
      consumeT(204);                // 'ft-option'
      break;
    case 212:                       // 'in'
      consumeT(212);                // 'in'
      break;
    case 213:                       // 'index'
      consumeT(213);                // 'index'
      break;
    case 216:                       // 'integrity'
      consumeT(216);                // 'integrity'
      break;
    case 223:                       // 'lax'
      consumeT(223);                // 'lax'
      break;
    case 236:                       // 'nodes'
      consumeT(236);                // 'nodes'
      break;
    case 239:                       // 'option'
      consumeT(239);                // 'option'
      break;
    case 243:                       // 'ordering'
      consumeT(243);                // 'ordering'
      break;
    case 252:                       // 'revalidation'
      consumeT(252);                // 'revalidation'
      break;
    case 254:                       // 'schema'
      consumeT(254);                // 'schema'
      break;
    case 257:                       // 'score'
      consumeT(257);                // 'score'
      break;
    case 259:                       // 'sliding'
      consumeT(259);                // 'sliding'
      break;
    case 263:                       // 'strict'
      consumeT(263);                // 'strict'
      break;
    case 269:                       // 'tumbling'
      consumeT(269);                // 'tumbling'
      break;
    case 270:                       // 'type'
      consumeT(270);                // 'type'
      break;
    case 274:                       // 'updating'
      consumeT(274);                // 'updating'
      break;
    case 276:                       // 'value'
      consumeT(276);                // 'value'
      break;
    case 278:                       // 'version'
      consumeT(278);                // 'version'
      break;
    case 280:                       // 'while'
      consumeT(280);                // 'while'
      break;
    case 172:                       // 'constraint'
      consumeT(172);                // 'constraint'
      break;
    case 226:                       // 'loop'
      consumeT(226);                // 'loop'
      break;
    default:
      consumeT(251);                // 'returning'
    }
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_Program();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_Program()
  {
    eventHandler.startNonterminal("Program", e0);
    parse_StatementsAndOptionalExpr();
    eventHandler.endNonterminal("Program", e0);
  }

  function parse_Statements()
  {
    eventHandler.startNonterminal("Statements", e0);
    for (;;)
    {
      lookahead1W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      lk = predict(22);
      if (lk == 0)
      {
        lk = memoized(6, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(6, e0, lk);
        }
      }
      if (lk != -1
       && lk != 1)
      {
        break;
      }
      whitespace();
      parse_Statement();
    }
    eventHandler.endNonterminal("Statements", e0);
  }

  function try_Statements()
  {
    for (;;)
    {
      lookahead1W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      lk = predict(22);
      if (lk == 0)
      {
        lk = memoized(6, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            memoize(6, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(6, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 1)
      {
        break;
      }
      try_Statement();
    }
  }

  function parse_StatementsAndExpr()
  {
    eventHandler.startNonterminal("StatementsAndExpr", e0);
    parse_Statements();
    whitespace();
    parse_Expr();
    eventHandler.endNonterminal("StatementsAndExpr", e0);
  }

  function try_StatementsAndExpr()
  {
    try_Statements();
    try_Expr();
  }

  function parse_StatementsAndOptionalExpr()
  {
    eventHandler.startNonterminal("StatementsAndOptionalExpr", e0);
    parse_Statements();
    if (l1 != 90                    // EOF
     && l1 != 138)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    eventHandler.endNonterminal("StatementsAndOptionalExpr", e0);
  }

  function try_StatementsAndOptionalExpr()
  {
    try_Statements();
    if (l1 != 90                    // EOF
     && l1 != 138)                  // '}'
    {
      try_Expr();
    }
  }

  function parse_Statement()
  {
    eventHandler.startNonterminal("Statement", e0);
    lk = predict(23);
    if (lk == 13)
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            lk = -2;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              lk = -3;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                lk = -12;
              }
              catch (p12A)
              {
                lk = -13;
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(7, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
      parse_AssignStatement();
      break;
    case -3:
      parse_BlockStatement();
      break;
    case 3:
      parse_BreakStatement();
      break;
    case 4:
      parse_ContinueStatement();
      break;
    case 5:
      parse_ExitStatement();
      break;
    case 6:
      parse_FLWORStatement();
      break;
    case 7:
      parse_IfStatement();
      break;
    case 8:
      parse_SwitchStatement();
      break;
    case 9:
      parse_TryCatchStatement();
      break;
    case 10:
      parse_TypeswitchStatement();
      break;
    case -12:
    case 11:
      parse_VarDeclStatement();
      break;
    case -13:
      parse_WhileStatement();
      break;
    default:
      parse_ApplyStatement();
    }
    eventHandler.endNonterminal("Statement", e0);
  }

  function try_Statement()
  {
    lk = predict(23);
    if (lk == 13)
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          memoize(7, e0A, -1);
          lk = -14;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            memoize(7, e0A, -2);
            lk = -14;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              memoize(7, e0A, -3);
              lk = -14;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                memoize(7, e0A, -12);
                lk = -14;
              }
              catch (p12A)
              {
                lk = -13;
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(7, e0A, -13);
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -2:
      try_AssignStatement();
      break;
    case -3:
      try_BlockStatement();
      break;
    case 3:
      try_BreakStatement();
      break;
    case 4:
      try_ContinueStatement();
      break;
    case 5:
      try_ExitStatement();
      break;
    case 6:
      try_FLWORStatement();
      break;
    case 7:
      try_IfStatement();
      break;
    case 8:
      try_SwitchStatement();
      break;
    case 9:
      try_TryCatchStatement();
      break;
    case 10:
      try_TypeswitchStatement();
      break;
    case -12:
    case 11:
      try_VarDeclStatement();
      break;
    case -13:
      try_WhileStatement();
      break;
    case -14:
      break;
    default:
      try_ApplyStatement();
    }
  }

  function parse_ApplyStatement()
  {
    eventHandler.startNonterminal("ApplyStatement", e0);
    parse_ExprSimple();
    consume(101);                   // ';'
    eventHandler.endNonterminal("ApplyStatement", e0);
  }

  function try_ApplyStatement()
  {
    try_ExprSimple();
    consumeT(101);                  // ';'
  }

  function parse_AssignStatement()
  {
    eventHandler.startNonterminal("AssignStatement", e0);
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consume(29);                    // ':='
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(101);                   // ';'
    eventHandler.endNonterminal("AssignStatement", e0);
  }

  function try_AssignStatement()
  {
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consumeT(29);                   // ':='
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(101);                  // ';'
  }

  function parse_BlockStatement()
  {
    eventHandler.startNonterminal("BlockStatement", e0);
    consume(283);                   // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    whitespace();
    parse_Statements();
    consume(138);                   // '}'
    eventHandler.endNonterminal("BlockStatement", e0);
  }

  function try_BlockStatement()
  {
    consumeT(283);                  // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    try_Statements();
    consumeT(138);                  // '}'
  }

  function parse_BreakStatement()
  {
    eventHandler.startNonterminal("BreakStatement", e0);
    consume(164);                   // 'break'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consume(226);                   // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consume(101);                   // ';'
    eventHandler.endNonterminal("BreakStatement", e0);
  }

  function try_BreakStatement()
  {
    consumeT(164);                  // 'break'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consumeT(226);                  // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consumeT(101);                  // ';'
  }

  function parse_ContinueStatement()
  {
    eventHandler.startNonterminal("ContinueStatement", e0);
    consume(175);                   // 'continue'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consume(226);                   // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consume(101);                   // ';'
    eventHandler.endNonterminal("ContinueStatement", e0);
  }

  function try_ContinueStatement()
  {
    consumeT(175);                  // 'continue'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consumeT(226);                  // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consumeT(101);                  // ';'
  }

  function parse_ExitStatement()
  {
    eventHandler.startNonterminal("ExitStatement", e0);
    consume(198);                   // 'exit'
    lookahead1W(71);                // S^WS | '(:' | 'returning'
    consume(251);                   // 'returning'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(101);                   // ';'
    eventHandler.endNonterminal("ExitStatement", e0);
  }

  function try_ExitStatement()
  {
    consumeT(198);                  // 'exit'
    lookahead1W(71);                // S^WS | '(:' | 'returning'
    consumeT(251);                  // 'returning'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(101);                  // ';'
  }

  function parse_FLWORStatement()
  {
    eventHandler.startNonterminal("FLWORStatement", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 250)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnStatement();
    eventHandler.endNonterminal("FLWORStatement", e0);
  }

  function try_FLWORStatement()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 250)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnStatement();
  }

  function parse_ReturnStatement()
  {
    eventHandler.startNonterminal("ReturnStatement", e0);
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("ReturnStatement", e0);
  }

  function try_ReturnStatement()
  {
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_IfStatement()
  {
    eventHandler.startNonterminal("IfStatement", e0);
    consume(210);                   // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(94);                    // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consume(79);                    // 'then'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consume(190);                   // 'else'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("IfStatement", e0);
  }

  function try_IfStatement()
  {
    consumeT(210);                  // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(94);                   // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consumeT(79);                   // 'then'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consumeT(190);                  // 'else'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_SwitchStatement()
  {
    eventHandler.startNonterminal("SwitchStatement", e0);
    consume(264);                   // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(94);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consume(181);                   // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchStatement", e0);
  }

  function try_SwitchStatement()
  {
    consumeT(264);                  // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(94);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_SwitchCaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consumeT(181);                  // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_SwitchCaseStatement()
  {
    eventHandler.startNonterminal("SwitchCaseStatement", e0);
    for (;;)
    {
      consume(165);                 // 'case'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchCaseStatement", e0);
  }

  function try_SwitchCaseStatement()
  {
    for (;;)
    {
      consumeT(165);                // 'case'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_TryCatchStatement()
  {
    eventHandler.startNonterminal("TryCatchStatement", e0);
    consume(268);                   // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockStatement();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      consume(168);                 // 'catch'
      lookahead1W(251);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_CatchErrorList();
      whitespace();
      parse_BlockStatement();
      lookahead1W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      lk = predict(24);
      if (lk == 2)
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(36);        // S^WS | '(:' | 'catch'
            consumeT(168);          // 'catch'
            lookahead1W(251);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
            try_CatchErrorList();
            try_BlockStatement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(8, e0, lk);
        }
      }
      if (lk != -1
       && lk != 1)
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchStatement", e0);
  }

  function try_TryCatchStatement()
  {
    consumeT(268);                  // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockStatement();
    lookahead1W(36);                // S^WS | '(:' | 'catch'
    consumeT(168);                  // 'catch'
    lookahead1W(251);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_CatchErrorList();
    try_BlockStatement();
    for (;;)
    {
      lookahead1W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      lk = predict(24);
      if (lk == 2)
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(36);        // S^WS | '(:' | 'catch'
            consumeT(168);          // 'catch'
            lookahead1W(251);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
            try_CatchErrorList();
            try_BlockStatement();
            memoize(8, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(8, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 1)
      {
        break;
      }
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      consumeT(168);                // 'catch'
      lookahead1W(251);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_CatchErrorList();
      try_BlockStatement();
    }
  }

  function parse_TypeswitchStatement()
  {
    eventHandler.startNonterminal("TypeswitchStatement", e0);
    consume(271);                   // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(94);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consume(181);                   // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 146)                  // '$'
    {
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("TypeswitchStatement", e0);
  }

  function try_TypeswitchStatement()
  {
    consumeT(271);                  // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(94);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_CaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consumeT(181);                  // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 146)                  // '$'
    {
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_CaseStatement()
  {
    eventHandler.startNonterminal("CaseStatement", e0);
    consume(165);                   // 'case'
    lookahead1W(261);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 146)                  // '$'
    {
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(157);                 // 'as'
    }
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("CaseStatement", e0);
  }

  function try_CaseStatement()
  {
    consumeT(165);                  // 'case'
    lookahead1W(261);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 146)                  // '$'
    {
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(157);                // 'as'
    }
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceType();
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_VarDeclStatement()
  {
    eventHandler.startNonterminal("VarDeclStatement", e0);
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 147)                // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(277);                   // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(157);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 157)                  // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(145);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 29)                   // ':='
    {
      consume(29);                  // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consume(97);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(157);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 157)                // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(145);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 29)                 // ':='
      {
        consume(29);                // ':='
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(101);                   // ';'
    eventHandler.endNonterminal("VarDeclStatement", e0);
  }

  function try_VarDeclStatement()
  {
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 147)                // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(277);                  // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(157);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 157)                  // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(145);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 29)                   // ':='
    {
      consumeT(29);                 // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consumeT(97);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(157);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 157)                // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(145);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 29)                 // ':='
      {
        consumeT(29);               // ':='
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        try_ExprSingle();
      }
    }
    consumeT(101);                  // ';'
  }

  function parse_WhileStatement()
  {
    eventHandler.startNonterminal("WhileStatement", e0);
    consume(280);                   // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(94);                    // ')'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("WhileStatement", e0);
  }

  function try_WhileStatement()
  {
    consumeT(280);                  // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(94);                   // ')'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    lk = predict(25);
    switch (lk)
    {
    case 1:
      parse_FLWORExpr();
      break;
    case 2:
      parse_IfExpr();
      break;
    case 3:
      parse_SwitchExpr();
      break;
    case 4:
      parse_TryCatchExpr();
      break;
    case 5:
      parse_TypeswitchExpr();
      break;
    default:
      parse_ExprSimple();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    lk = predict(25);
    switch (lk)
    {
    case 1:
      try_FLWORExpr();
      break;
    case 2:
      try_IfExpr();
      break;
    case 3:
      try_SwitchExpr();
      break;
    case 4:
      try_TryCatchExpr();
      break;
    case 5:
      try_TypeswitchExpr();
      break;
    default:
      try_ExprSimple();
    }
  }

  function parse_ExprSimple()
  {
    eventHandler.startNonterminal("ExprSimple", e0);
    lk = predict(26);
    switch (lk)
    {
    case 1:
      parse_QuantifiedExpr();
      break;
    case 2:
      parse_InsertExpr();
      break;
    case 3:
      parse_DeleteExpr();
      break;
    case 4:
      parse_RenameExpr();
      break;
    case 5:
      parse_ReplaceExpr();
      break;
    case 6:
      parse_TransformExpr();
      break;
    case 7:
      parse_JSONDeleteExpr();
      break;
    case 8:
      parse_JSONInsertExpr();
      break;
    case 9:
      parse_JSONRenameExpr();
      break;
    case 10:
      parse_JSONReplaceExpr();
      break;
    case 11:
      parse_JSONAppendExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSimple", e0);
  }

  function try_ExprSimple()
  {
    lk = predict(26);
    switch (lk)
    {
    case 1:
      try_QuantifiedExpr();
      break;
    case 2:
      try_InsertExpr();
      break;
    case 3:
      try_DeleteExpr();
      break;
    case 4:
      try_RenameExpr();
      break;
    case 5:
      try_ReplaceExpr();
      break;
    case 6:
      try_TransformExpr();
      break;
    case 7:
      try_JSONDeleteExpr();
      break;
    case 8:
      try_JSONInsertExpr();
      break;
    case 9:
      try_JSONRenameExpr();
      break;
    case 10:
      try_JSONReplaceExpr();
      break;
    case 11:
      try_JSONAppendExpr();
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_JSONDeleteExpr()
  {
    eventHandler.startNonterminal("JSONDeleteExpr", e0);
    consume(182);                   // 'delete'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(52);                    // 'json'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    eventHandler.endNonterminal("JSONDeleteExpr", e0);
  }

  function try_JSONDeleteExpr()
  {
    consumeT(182);                  // 'delete'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(52);                   // 'json'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_PostfixExpr();
  }

  function parse_JSONInsertExpr()
  {
    eventHandler.startNonterminal("JSONInsertExpr", e0);
    consume(214);                   // 'insert'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(52);                    // 'json'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(218);                   // 'into'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    lk = predict(27);
    if (lk == 2)
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(159);            // 'at'
          lookahead1W(69);          // S^WS | '(:' | 'position'
          consumeT(71);             // 'position'
          lookahead1W(270);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
          try_ExprSingle();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(9, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(159);                 // 'at'
      lookahead1W(69);              // S^WS | '(:' | 'position'
      consume(71);                  // 'position'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("JSONInsertExpr", e0);
  }

  function try_JSONInsertExpr()
  {
    consumeT(214);                  // 'insert'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(52);                   // 'json'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(218);                  // 'into'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    lk = predict(27);
    if (lk == 2)
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(159);            // 'at'
          lookahead1W(69);          // S^WS | '(:' | 'position'
          consumeT(71);             // 'position'
          lookahead1W(270);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
          try_ExprSingle();
          memoize(9, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(9, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(159);                // 'at'
      lookahead1W(69);              // S^WS | '(:' | 'position'
      consumeT(71);                 // 'position'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_JSONRenameExpr()
  {
    eventHandler.startNonterminal("JSONRenameExpr", e0);
    consume(248);                   // 'rename'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(52);                    // 'json'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    consume(157);                   // 'as'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONRenameExpr", e0);
  }

  function try_JSONRenameExpr()
  {
    consumeT(248);                  // 'rename'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(52);                   // 'json'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_PostfixExpr();
    consumeT(157);                  // 'as'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONReplaceExpr()
  {
    eventHandler.startNonterminal("JSONReplaceExpr", e0);
    consume(249);                   // 'replace'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(52);                    // 'json'
    lookahead1W(82);                // S^WS | '(:' | 'value'
    consume(276);                   // 'value'
    lookahead1W(64);                // S^WS | '(:' | 'of'
    consume(64);                    // 'of'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    consume(281);                   // 'with'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONReplaceExpr", e0);
  }

  function try_JSONReplaceExpr()
  {
    consumeT(249);                  // 'replace'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(52);                   // 'json'
    lookahead1W(82);                // S^WS | '(:' | 'value'
    consumeT(276);                  // 'value'
    lookahead1W(64);                // S^WS | '(:' | 'of'
    consumeT(64);                   // 'of'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_PostfixExpr();
    consumeT(281);                  // 'with'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONAppendExpr()
  {
    eventHandler.startNonterminal("JSONAppendExpr", e0);
    consume(113);                   // 'append'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(52);                    // 'json'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(218);                   // 'into'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONAppendExpr", e0);
  }

  function try_JSONAppendExpr()
  {
    consumeT(113);                  // 'append'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(52);                   // 'json'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(218);                  // 'into'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      consume(6);                   // PredefinedEntityRef
      break;
    case 17:                        // CharRef
      consume(17);                  // CharRef
      break;
    case 88:                        // '{{'
      consume(88);                  // '{{'
      break;
    case 89:                        // '}}'
      consume(89);                  // '}}'
      break;
    default:
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      consumeT(6);                  // PredefinedEntityRef
      break;
    case 17:                        // CharRef
      consumeT(17);                 // CharRef
      break;
    case 88:                        // '{{'
      consumeT(88);                 // '{{'
      break;
    case 89:                        // '}}'
      consumeT(89);                 // '}}'
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_ContentExpr()
  {
    eventHandler.startNonterminal("ContentExpr", e0);
    parse_StatementsAndExpr();
    eventHandler.endNonterminal("ContentExpr", e0);
  }

  function try_ContentExpr()
  {
    try_StatementsAndExpr();
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    consume(187);                   // 'document'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    consumeT(187);                  // 'document'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    consume(160);                   // 'attribute'
    lookahead1W(252);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 283:                       // '{'
      consume(283);                 // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(138);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    lk = predict(28);
    if (lk == 2)
    {
      lk = memoized(10, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(283);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(138);            // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(10, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      consume(283);                 // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consume(138);                 // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    consumeT(160);                  // 'attribute'
    lookahead1W(252);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 283:                       // '{'
      consumeT(283);                // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(138);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    lk = predict(28);
    if (lk == 2)
    {
      lk = memoized(10, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(283);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(138);            // '}'
          memoize(10, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(10, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(283);                // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consumeT(138);                // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    consume(247);                   // 'processing-instruction'
    lookahead1W(253);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 283:                       // '{'
      consume(283);                 // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(138);                 // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    lk = predict(29);
    if (lk == 2)
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(283);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(138);            // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(11, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      consume(283);                 // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consume(138);                 // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    consumeT(247);                  // 'processing-instruction'
    lookahead1W(253);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 283:                       // '{'
      consumeT(283);                // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(138);                // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    lk = predict(29);
    if (lk == 2)
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(283);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(138);            // '}'
          memoize(11, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(11, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(283);                // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consumeT(138);                // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    consume(171);                   // 'comment'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    consumeT(171);                  // 'comment'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    consume(265);                   // 'text'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    consumeT(265);                  // 'text'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    lk = predict(30);
    if (lk == 13)
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          lk = -10;
        }
        catch (p10A)
        {
          lk = -11;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(12, e0, lk);
      }
    }
    switch (lk)
    {
    case 1:
      parse_Literal();
      break;
    case 2:
      parse_VarRef();
      break;
    case 3:
      parse_ParenthesizedExpr();
      break;
    case 4:
      parse_ContextItemExpr();
      break;
    case 5:
      parse_FunctionCall();
      break;
    case 6:
      parse_OrderedExpr();
      break;
    case 7:
      parse_UnorderedExpr();
      break;
    case 8:
      parse_FunctionItemExpr();
      break;
    case -10:
      parse_BlockExpr();
      break;
    case -11:
      parse_ObjectConstructor();
      break;
    case 11:
      parse_ArrayConstructor();
      break;
    case 12:
      parse_JSONSimpleObjectUnion();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    lk = predict(30);
    if (lk == 13)
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          memoize(12, e0A, -10);
          lk = -14;
        }
        catch (p10A)
        {
          lk = -11;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(12, e0A, -11);
        }
      }
    }
    switch (lk)
    {
    case 1:
      try_Literal();
      break;
    case 2:
      try_VarRef();
      break;
    case 3:
      try_ParenthesizedExpr();
      break;
    case 4:
      try_ContextItemExpr();
      break;
    case 5:
      try_FunctionCall();
      break;
    case 6:
      try_OrderedExpr();
      break;
    case 7:
      try_UnorderedExpr();
      break;
    case 8:
      try_FunctionItemExpr();
      break;
    case -10:
      try_BlockExpr();
      break;
    case -11:
      try_ObjectConstructor();
      break;
    case 11:
      try_ArrayConstructor();
      break;
    case 12:
      try_JSONSimpleObjectUnion();
      break;
    case -14:
      break;
    default:
      try_Constructor();
    }
  }

  function parse_JSONSimpleObjectUnion()
  {
    eventHandler.startNonterminal("JSONSimpleObjectUnion", e0);
    consume(134);                   // '{|'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '|}'
    if (l1 != 137)                  // '|}'
    {
      whitespace();
      parse_Expr();
    }
    consume(137);                   // '|}'
    eventHandler.endNonterminal("JSONSimpleObjectUnion", e0);
  }

  function try_JSONSimpleObjectUnion()
  {
    consumeT(134);                  // '{|'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '|}'
    if (l1 != 137)                  // '|}'
    {
      try_Expr();
    }
    consumeT(137);                  // '|}'
  }

  function parse_ObjectConstructor()
  {
    eventHandler.startNonterminal("ObjectConstructor", e0);
    consume(283);                   // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 138)                  // '}'
    {
      whitespace();
      parse_PairConstructor();
      for (;;)
      {
        if (l1 != 97)               // ','
        {
          break;
        }
        consume(97);                // ','
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_PairConstructor();
      }
    }
    consume(138);                   // '}'
    eventHandler.endNonterminal("ObjectConstructor", e0);
  }

  function try_ObjectConstructor()
  {
    consumeT(283);                  // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 138)                  // '}'
    {
      try_PairConstructor();
      for (;;)
      {
        if (l1 != 97)               // ','
        {
          break;
        }
        consumeT(97);               // ','
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        try_PairConstructor();
      }
    }
    consumeT(138);                  // '}'
  }

  function parse_PairConstructor()
  {
    eventHandler.startNonterminal("PairConstructor", e0);
    parse_ExprSingle();
    consume(100);                   // ':'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("PairConstructor", e0);
  }

  function try_PairConstructor()
  {
    try_ExprSingle();
    consumeT(100);                  // ':'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    consume(111);                   // '['
    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 112)                  // ']'
    {
      whitespace();
      parse_Expr();
    }
    consume(112);                   // ']'
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    consumeT(111);                  // '['
    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 112)                  // ']'
    {
      try_Expr();
    }
    consumeT(112);                  // ']'
  }

  function parse_BlockExpr()
  {
    eventHandler.startNonterminal("BlockExpr", e0);
    consume(283);                   // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    whitespace();
    parse_StatementsAndOptionalExpr();
    consume(138);                   // '}'
    eventHandler.endNonterminal("BlockExpr", e0);
  }

  function try_BlockExpr()
  {
    consumeT(283);                  // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    try_StatementsAndOptionalExpr();
    consumeT(138);                  // '}'
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    consume(205);                   // 'function'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 146)                  // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(94);                    // ')'
    lookahead1W(148);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 157)                  // 'as'
    {
      consume(157);                 // 'as'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(118);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 283:                       // '{'
      consume(283);                 // '{'
      lookahead1W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      whitespace();
      parse_StatementsAndOptionalExpr();
      consume(138);                 // '}'
      break;
    default:
      consume(199);                 // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function consume(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(XQueryParser_t.TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function consumeT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  function matchW(tokenSetId)
  {
    var code;
    for (;;)
    {
      code = match(tokenSetId);
      if (code != 16)               // S^WS
      {
        if (code != 23)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = matchW(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead1(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = match(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function error(b, e, s, l, t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new thisParser.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 4) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 4) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;

  var begin;
  var end;

  function predict(dpi)
  {
    var d = dpi;
    var j10 = 2240 * d + l1;
    var j11 = j10 >> 3;
    var action = XQueryParser_t.CASEID[(j10 & 7) + XQueryParser_t.CASEID[(j11 & 7) + XQueryParser_t.CASEID[j11 >> 3]]];
    if ((action & 1) == 0)
      return action >> 1;
    if (l2 == 0)
    {
      l2 = matchW(action >> 1);
      b2 = begin;
      e2 = end;
    }
    var i20 = 288 * l2 + l1;
    var i21 = i20 >> 3;
    var matchCode = XQueryParser_t.LOOKAHEAD[(i20 & 7) + XQueryParser_t.LOOKAHEAD[(i21 & 7) + XQueryParser_t.LOOKAHEAD[i21 >> 3]]];
    if (matchCode != 0)
    {
      var j20 = 2240 * d + matchCode;
      var j21 = j20 >> 3;
      action = XQueryParser_t.CASEID[(j20 & 7) + XQueryParser_t.CASEID[(j21 & 7) + XQueryParser_t.CASEID[j21 >> 3]]];
      return action >> 1;
    }
    return 0;
  }

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = XQueryParser_t.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 4095; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = XQueryParser_t.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = XQueryParser_t.MAP1[(c0 & 15) + XQueryParser_t.MAP1[(c1 & 31) + XQueryParser_t.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }

        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (XQueryParser_t.MAP2[m] > c0) hi = m - 1;
          else if (XQueryParser_t.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = XQueryParser_t.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 12) + code - 1;
      code = XQueryParser_t.TRANSITION[(i0 & 15) + XQueryParser_t.TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 9; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 9;
    }

    if (end > size) end = size;
    return (result & 511) - 1;
  }

}

XQueryParser_t.XmlSerializer = function(log, indent)
{
  var input = null;
  var delayedTag = null;
  var hasChildElement = false;
  var depth = 0;

  this.reset = function(string)
  {
    log("<?xml version=\"1.0\" encoding=\"UTF-8\"?" + ">");
    input = string;
    delayedTag = null;
    hasChildElement = false;
    depth = 0;
  };

  this.startNonterminal = function(tag, begin)
  {
    if (delayedTag != null)
    {
      log("<");
      log(delayedTag);
      log(">");
    }
    delayedTag = tag;
    if (indent)
    {
      log("\n");
      for (var i = 0; i < depth; ++i)
      {
        log("  ");
      }
    }
    hasChildElement = false;
    ++depth;
  };

  this.endNonterminal = function(tag, end)
  {
    --depth;
    if (delayedTag != null)
    {
      delayedTag = null;
      log("<");
      log(tag);
      log("/>");
    }
    else
    {
      if (indent)
      {
        if (hasChildElement)
        {
          log("\n");
          for (var i = 0; i < depth; ++i)
          {
            log("  ");
          }
        }
      }
      log("</");
      log(tag);
      log(">");
    }
    hasChildElement = true;
  };

  this.terminal = function(tag, begin, end)
  {
    if (tag.charAt(0) == '\'') tag = "TOKEN";
    this.startNonterminal(tag, begin);
    characters(begin, end);
    this.endNonterminal(tag, end);
  };

  this.whitespace = function(begin, end)
  {
    characters(begin, end);
  };

  function characters(begin, end)
  {
    if (begin < end)
    {
      if (delayedTag != null)
      {
        log("<");
        log(delayedTag);
        log(">");
        delayedTag = null;
      }
      log(input.substring(begin, end)
               .replace(/&/g, "&amp;")
               .replace(/</g, "&lt;")
               .replace(/>/g, "&gt;"));
    }
  }
};

XQueryParser_t.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : XQueryParser_t.INITIAL[tokenSetId] & 4095;
  for (var i = 0; i < 284; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 3155 + s - 1;
    var i1 = i0 >> 1;
    var i2 = i1 >> 2;
    var f = XQueryParser_t.EXPECTED[(i0 & 1) + XQueryParser_t.EXPECTED[(i1 & 3) + XQueryParser_t.EXPECTED[(i2 & 3) + XQueryParser_t.EXPECTED[i2 >> 2]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(XQueryParser_t.TOKEN[j]);
      }
    }
  }
  return set;
};

XQueryParser_t.TopDownTreeBuilder = function()
{
  var input = null;
  var stack = null;

  this.reset = function(i)
  {
    input = i;
    stack = [];
  };

  this.startNonterminal = function(name, begin)
  {
    var nonterminal = new XQueryParser_t.Nonterminal(name, begin, begin, []);
    if (stack.length > 0) addChild(nonterminal);
    stack.push(nonterminal);
  };

  this.endNonterminal = function(name, end)
  {
    stack[stack.length - 1].end = end;
    if (stack.length > 1) stack.pop();
  };

  this.terminal = function(name, begin, end)
  {
    addChild(new XQueryParser_t.Terminal(name, begin, end));
  };

  this.whitespace = function(begin, end)
  {
  };

  function addChild(s)
  {
    var current = stack[stack.length - 1];
    current.children.push(s);
  }

  this.serialize = function(e)
  {
    e.reset(input);
    stack[0].send(e);
  };
};

XQueryParser_t.Terminal = function(name, begin, end)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.terminal(name, begin, end);
  };
};

XQueryParser_t.Nonterminal = function(name, begin, end, children)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.startNonterminal(name, begin);
    var pos = begin;
    children.forEach
    (
      function(c)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
    );
    if (pos < end) e.whitespace(pos, end);
    e.endNonterminal(name, end);
  };
};

XQueryParser_t.MAP0 =
[
  /*   0 */ 70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,
  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,
  /*  91 */ 37, 38, 39, 38, 30, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
  /* 118 */ 61, 62, 63, 64, 65, 66, 67, 68, 38, 38
];

XQueryParser_t.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 70, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,
  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30,
  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30,
  /* 371 */ 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
  /* 398 */ 66, 67, 68, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 69, 38, 38,
  /* 425 */ 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
  /* 452 */ 69, 69, 69, 69
];

XQueryParser_t.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30,
  /* 17 */ 38
];

XQueryParser_t.INITIAL =
[
  /*   0 */ 1, 12290, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
  /*  82 */ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
  /* 107 */ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
  /* 128 */ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
  /* 149 */ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
  /* 170 */ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
  /* 191 */ 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
  /* 212 */ 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
  /* 233 */ 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
  /* 254 */ 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
  /* 275 */ 276, 277, 278, 279, 280, 281, 282, 283, 284, 285
];

XQueryParser_t.TRANSITION =
[
  /*     0 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*    15 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*    30 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*    45 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*    60 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*    75 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*    90 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   105 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   120 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   135 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   150 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   165 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   180 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   195 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   210 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   225 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   240 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   255 */ 18555, 19027, 18176, 18180, 18180, 18180, 18199, 18180, 18180, 18180, 18180, 18220, 18180, 18180, 18180,
  /*   270 */ 18180, 18211, 18180, 18183, 35888, 18555, 18555, 18555, 26625, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   285 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 36904,
  /*   300 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 21221, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   315 */ 37250, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   330 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   345 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   360 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   375 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   390 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   405 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   420 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20054, 18555, 18555, 18555, 18555, 20054,
  /*   435 */ 18555, 18555, 39641, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   450 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   465 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   480 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   495 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   510 */ 18555, 18555, 18408, 18555, 18555, 18555, 18555, 28557, 18555, 18555, 18555, 18555, 20736, 42089, 18236,
  /*   525 */ 18249, 18261, 18273, 18747, 31224, 26603, 18555, 18555, 18555, 26625, 18555, 18555, 18555, 38262, 18555,
  /*   540 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 44430, 44429, 18555, 18555, 18555,
  /*   555 */ 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 21221, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   570 */ 18555, 37250, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   585 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   600 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   615 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   630 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   645 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   660 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   675 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20054, 18555, 18555, 18555, 18555,
  /*   690 */ 20054, 18555, 18555, 39641, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   705 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   720 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   735 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   750 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   765 */ 18555, 18555, 18555, 18776, 18296, 18555, 18555, 18555, 20578, 18555, 18555, 23468, 22697, 18315, 18555,
  /*   780 */ 18555, 18555, 18555, 18555, 18364, 18395, 21869, 18555, 18555, 18555, 26625, 18555, 18555, 38700, 18555,
  /*   795 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18556, 18375, 18555,
  /*   810 */ 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 21221, 18555, 18555, 18555, 18555, 18555,
  /*   825 */ 18555, 18555, 37250, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   840 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   855 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   870 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   885 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   900 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   915 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   930 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20054, 18555, 18555, 18555,
  /*   945 */ 18555, 20054, 18555, 18555, 39641, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   960 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   975 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*   990 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1005 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1020 */ 18555, 18555, 18555, 18555, 18427, 18503, 18555, 18555, 18555, 39621, 18555, 18555, 39291, 18555, 20736,
  /*  1035 */ 26452, 18538, 18471, 18462, 18493, 18524, 45708, 26603, 18555, 18555, 18555, 26625, 18554, 18555, 26318,
  /*  1050 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18573,
  /*  1065 */ 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 21221, 18555, 18555, 18555, 18555,
  /*  1080 */ 18555, 18555, 18555, 37250, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1095 */ 18555, 18555, 18555, 18555, 18555, 18595, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1110 */ 18613, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1125 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1140 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1155 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1170 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1185 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20054, 18555, 18555,
  /*  1200 */ 18555, 18555, 20054, 18555, 18555, 39641, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1215 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1230 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1245 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1260 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1275 */ 18555, 18555, 18555, 18555, 18555, 18408, 20445, 18555, 18555, 18555, 30255, 20450, 18555, 45618, 18555,
  /*  1290 */ 18665, 20439, 18631, 18555, 18638, 18555, 18654, 18681, 26603, 18555, 18555, 18555, 26625, 18555, 18555,
  /*  1305 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1320 */ 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 21221, 18555, 18555, 18555,
  /*  1335 */ 18555, 18555, 18555, 18555, 37250, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1350 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1365 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1380 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1395 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1410 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1425 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1440 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20054, 18555,
  /*  1455 */ 18555, 18555, 18555, 20054, 18555, 18555, 39641, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1470 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1485 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1500 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1515 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1530 */ 18555, 18555, 18555, 18555, 18555, 18555, 18408, 18555, 18555, 18555, 18555, 28557, 18710, 18555, 18555,
  /*  1545 */ 18555, 31400, 18555, 18555, 18741, 18555, 18555, 18729, 18763, 26603, 18555, 18555, 18555, 26625, 18555,
  /*  1560 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1575 */ 18555, 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 21221, 18555, 18555,
  /*  1590 */ 18555, 18555, 18555, 18555, 18555, 37250, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1605 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1620 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1635 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1650 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1665 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1680 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1695 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20054,
  /*  1710 */ 18555, 18555, 18555, 18555, 20054, 18555, 18555, 39641, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1725 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1740 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1755 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1770 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1785 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18408, 18555, 18555, 18555, 18555, 28557, 18555, 18555,
  /*  1800 */ 18555, 18555, 39862, 18555, 18555, 18555, 18555, 18555, 18555, 20057, 37932, 18555, 18555, 18555, 26625,
  /*  1815 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1830 */ 18555, 18555, 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 22758, 18555,
  /*  1845 */ 18555, 18555, 18555, 18555, 18555, 18555, 31278, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1860 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1875 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1890 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1905 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1920 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1935 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1950 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1965 */ 20054, 18555, 18555, 18555, 18555, 20054, 18555, 18555, 39641, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1980 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  1995 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2010 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2025 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2040 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18824, 18792, 18555, 18555, 18555, 34571, 18555,
  /*  2055 */ 18555, 25421, 38299, 35913, 18555, 18555, 18555, 18555, 18555, 35901, 18811, 26355, 18555, 18555, 18555,
  /*  2070 */ 26625, 18555, 18555, 40735, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2085 */ 18555, 18555, 18555, 18840, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 21221,
  /*  2100 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 37250, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2115 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2130 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2145 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2160 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2175 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2190 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2205 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2220 */ 18555, 20054, 18555, 18555, 18555, 18555, 20054, 18555, 18555, 39641, 18555, 18555, 18555, 18555, 18555,
  /*  2235 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2250 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2265 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2280 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2295 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18694, 18878, 18918, 18918, 18918, 18885,
  /*  2310 */ 18913, 18918, 18923, 18998, 18863, 18948, 18979, 18992, 18901, 18939, 18964, 19014, 26603, 18555, 18555,
  /*  2325 */ 18555, 22093, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2340 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 34080, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2355 */ 21221, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 37250, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2370 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2385 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2400 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2415 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2430 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2445 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2460 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2475 */ 18555, 18555, 20054, 18555, 18555, 18555, 18555, 20054, 18555, 18555, 39641, 18555, 18555, 18555, 18555,
  /*  2490 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2505 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2520 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2535 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2550 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18408, 19096, 18555, 18555, 18555,
  /*  2565 */ 32628, 19043, 18555, 43216, 19049, 20736, 19095, 18555, 19066, 19072, 19088, 19112, 19135, 19151, 18555,
  /*  2580 */ 18555, 18555, 45683, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2595 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 28557, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2610 */ 18555, 21221, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 37250, 18555, 18555, 18555, 18555, 18555,
  /*  2625 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2640 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2655 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2670 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2685 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2700 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2715 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2730 */ 18555, 18555, 18555, 20054, 18555, 18555, 18555, 18555, 20054, 18555, 18555, 39641, 18555, 18555, 18555,
  /*  2745 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2760 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2775 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2790 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2805 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18408, 19869, 18555, 18555,
  /*  2820 */ 18555, 28557, 18555, 18555, 18555, 41523, 34976, 38323, 19225, 19211, 19228, 19196, 19181, 19244, 26603,
  /*  2835 */ 18555, 18555, 18555, 26625, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2850 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555,
  /*  2865 */ 18555, 18555, 21221, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 45253, 18555, 18555, 18555, 18555,
  /*  2880 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2895 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2910 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2925 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2940 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2955 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2970 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  2985 */ 18555, 18555, 18555, 18555, 20054, 18555, 18555, 18555, 18555, 20054, 18555, 18555, 39641, 18555, 18555,
  /*  3000 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3015 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3030 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3045 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3060 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18408, 18555, 18555,
  /*  3075 */ 18555, 18555, 28557, 18555, 18555, 18555, 44683, 39932, 30617, 19286, 19305, 19286, 19319, 30616, 19289,
  /*  3090 */ 26603, 18555, 18555, 18555, 26625, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3105 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 36904, 18555, 18555, 19342, 18555,
  /*  3120 */ 18555, 18555, 18555, 21221, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 37250, 18555, 18555, 18555,
  /*  3135 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3150 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3165 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3180 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3195 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3210 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3225 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3240 */ 18555, 18555, 18555, 18555, 18555, 20054, 18555, 18555, 18555, 18555, 20054, 18555, 18555, 39641, 18555,
  /*  3255 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3270 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3285 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3300 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3315 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18408, 19403,
  /*  3330 */ 18555, 18555, 18555, 28557, 19361, 18555, 43781, 19399, 38154, 19385, 19419, 19424, 19424, 19440, 41146,
  /*  3345 */ 25942, 26603, 18555, 18555, 18555, 26625, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3360 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 36904, 18555, 18555, 18555,
  /*  3375 */ 18555, 18555, 18555, 18555, 21221, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 37250, 18555, 18555,
  /*  3390 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3405 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3420 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3435 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3450 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3465 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3480 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3495 */ 18555, 18555, 18555, 18555, 18555, 18555, 20054, 18555, 18555, 18555, 18555, 20054, 18555, 18555, 39641,
  /*  3510 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3525 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3540 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3555 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3570 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 19463,
  /*  3585 */ 18555, 18555, 18555, 18555, 28557, 18555, 18555, 18555, 18555, 20736, 20833, 19486, 19505, 19486, 19519,
  /*  3600 */ 20832, 19489, 19542, 18555, 18555, 18555, 26625, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3615 */ 18555, 18555, 45144, 30078, 46204, 41439, 19842, 23983, 45240, 18555, 39413, 18555, 36904, 44231, 18555,
  /*  3630 */ 19342, 19589, 18555, 18555, 18555, 21221, 30078, 37491, 30078, 43275, 46206, 19610, 46206, 27344, 23160,
  /*  3645 */ 19842, 19842, 37556, 32270, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 19628, 18555, 18555, 18555,
  /*  3660 */ 19659, 30078, 30078, 30078, 30078, 46205, 46206, 46206, 46206, 46206, 19677, 19842, 19842, 19842, 19842,
  /*  3675 */ 25680, 35471, 18555, 19695, 18555, 18555, 18555, 18555, 37241, 19722, 18555, 36225, 34885, 30078, 30078,
  /*  3690 */ 30079, 19739, 46206, 46206, 46206, 28366, 19755, 19842, 19842, 19842, 44196, 23993, 18555, 18555, 18555,
  /*  3705 */ 18555, 19799, 18555, 45555, 30078, 19820, 30078, 43276, 33305, 46206, 46206, 44988, 19842, 19841, 19842,
  /*  3720 */ 28151, 26676, 18555, 33495, 18555, 37923, 20371, 30078, 38928, 30213, 46206, 39163, 23578, 19842, 41481,
  /*  3735 */ 23330, 40944, 18555, 19859, 18555, 38827, 30078, 30211, 19894, 30273, 26568, 19842, 23330, 19915, 44223,
  /*  3750 */ 19932, 19973, 24898, 20006, 20026, 19843, 26674, 20073, 30869, 41360, 36468, 20111, 20137, 20162, 20178,
  /*  3765 */ 20041, 29946, 19982, 28308, 36376, 43272, 25016, 36373, 24484, 20230, 29843, 36447, 23134, 31942, 23996,
  /*  3780 */ 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3795 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3810 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3825 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3840 */ 18408, 18555, 18555, 18555, 18555, 28557, 18555, 18555, 18555, 32576, 20736, 18555, 18555, 18555, 18555,
  /*  3855 */ 18555, 24981, 20246, 20287, 18555, 18555, 18555, 26625, 18555, 18555, 20342, 18555, 18555, 18555, 18555,
  /*  3870 */ 18555, 18555, 18555, 45144, 30078, 46204, 41439, 19842, 25569, 45240, 18555, 18555, 18555, 36904, 18555,
  /*  3885 */ 18555, 18555, 18555, 18555, 18555, 18555, 21221, 30078, 30078, 30078, 43275, 46206, 46206, 46206, 27344,
  /*  3900 */ 19842, 19842, 19842, 35975, 32270, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  3915 */ 18555, 19659, 30078, 30078, 30078, 30078, 46205, 46206, 46206, 46206, 46206, 19677, 19842, 19842, 19842,
  /*  3930 */ 19842, 25680, 35471, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20374, 30078, 30078,
  /*  3945 */ 30078, 30079, 46206, 46206, 46206, 46206, 28366, 19842, 19842, 19842, 19842, 29115, 23993, 18555, 18555,
  /*  3960 */ 18555, 18555, 18555, 18555, 45555, 30078, 30078, 30078, 43276, 46206, 46206, 46206, 44988, 19842, 19842,
  /*  3975 */ 19842, 28151, 26676, 18555, 18555, 18555, 18555, 20371, 30078, 30078, 30213, 46206, 46206, 23578, 19842,
  /*  3990 */ 19842, 23330, 18555, 18555, 18555, 18555, 20755, 30078, 30211, 46206, 30273, 19842, 19842, 23330, 18555,
  /*  4005 */ 18555, 45143, 30078, 30211, 46206, 28657, 19843, 26674, 20054, 30078, 46204, 28656, 25932, 20368, 43276,
  /*  4020 */ 25018, 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373, 20376, 25016, 29843, 36447, 23134, 31942,
  /*  4035 */ 23996, 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4050 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4065 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4080 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4095 */ 18555, 18408, 20392, 18555, 18555, 18555, 32414, 18555, 18555, 18555, 18555, 20736, 43116, 20412, 20433,
  /*  4110 */ 43121, 20467, 43116, 20417, 26603, 18555, 18555, 18555, 26625, 18555, 18555, 18555, 19470, 18555, 45992,
  /*  4125 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 36904,
  /*  4140 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 21221, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4155 */ 37250, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4170 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4185 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4200 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4215 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4230 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4245 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4260 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20054, 18555, 18555, 18555, 18555, 20054,
  /*  4275 */ 18555, 18555, 39641, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4290 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4305 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4320 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4335 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4350 */ 18555, 18555, 18408, 20490, 18555, 18555, 18555, 28557, 18555, 18555, 18555, 21448, 20736, 18555, 18555,
  /*  4365 */ 18555, 18555, 18555, 24322, 20507, 20543, 18555, 18555, 18555, 26625, 18555, 18555, 20594, 18555, 18555,
  /*  4380 */ 18555, 18555, 18555, 18555, 18555, 45144, 30078, 46204, 41439, 19842, 22664, 45240, 18555, 18555, 18555,
  /*  4395 */ 36904, 18555, 18555, 20615, 18555, 18555, 18555, 18555, 21221, 30078, 30078, 30078, 43275, 46206, 46206,
  /*  4410 */ 46206, 27344, 19842, 19842, 19842, 35975, 43353, 20639, 18555, 18555, 18555, 18555, 18555, 20665, 18555,
  /*  4425 */ 18555, 18555, 18555, 19659, 30078, 30078, 30078, 30078, 46205, 46206, 46206, 46206, 46206, 19677, 19842,
  /*  4440 */ 19842, 19842, 19842, 25680, 20688, 20724, 18555, 18555, 18555, 18555, 24582, 18555, 18555, 18555, 20752,
  /*  4455 */ 30078, 30078, 30078, 30079, 46206, 46206, 46206, 46206, 29798, 19842, 19842, 19842, 19842, 29115, 25579,
  /*  4470 */ 20703, 18555, 18555, 18555, 18555, 18555, 38679, 30078, 30078, 30078, 43276, 46206, 46206, 46206, 35615,
  /*  4485 */ 19842, 19842, 19842, 28151, 26676, 18555, 18555, 18555, 18555, 28025, 30078, 30078, 30213, 46206, 46206,
  /*  4500 */ 43696, 19842, 19842, 23330, 18555, 18555, 18555, 18555, 20755, 30078, 30211, 46206, 30273, 19842, 19842,
  /*  4515 */ 23330, 18555, 18555, 45143, 30078, 30211, 46206, 28657, 19843, 26674, 20054, 30078, 46204, 28656, 25932,
  /*  4530 */ 20368, 43276, 25018, 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373, 20376, 25016, 29843, 36447,
  /*  4545 */ 23134, 31942, 23996, 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4560 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4575 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4590 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4605 */ 18555, 18555, 18555, 18408, 23035, 18555, 18555, 18555, 38790, 44663, 18555, 18555, 20773, 20736, 25151,
  /*  4620 */ 30609, 20803, 20809, 20825, 20451, 20649, 20849, 18555, 18555, 18555, 32322, 20865, 18555, 18555, 18555,
  /*  4635 */ 18555, 18555, 18555, 18555, 18555, 18555, 22741, 29526, 21219, 20084, 20882, 21038, 20899, 18555, 18555,
  /*  4650 */ 18555, 40718, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 21221, 29526, 29526, 29526, 21189, 18555,
  /*  4665 */ 18555, 18555, 40581, 20882, 20882, 20882, 20927, 21050, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4680 */ 18555, 18555, 18555, 18555, 29524, 29526, 29526, 29526, 29526, 21220, 18555, 18555, 18555, 18555, 20962,
  /*  4695 */ 20882, 20882, 20882, 20882, 21008, 20978, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4710 */ 41814, 29526, 29526, 29526, 29527, 18555, 18555, 18555, 18555, 24792, 20882, 20882, 20882, 20882, 21002,
  /*  4725 */ 21048, 18555, 18555, 18555, 18555, 18555, 18555, 20866, 29526, 29526, 29526, 21190, 18555, 18555, 18555,
  /*  4740 */ 20525, 20882, 20882, 20882, 21024, 21115, 18555, 18555, 18555, 18555, 41811, 29526, 29526, 21097, 18555,
  /*  4755 */ 18555, 20958, 20882, 20882, 21066, 18555, 18555, 18555, 18555, 29524, 29526, 21095, 18555, 24791, 20882,
  /*  4770 */ 20882, 21066, 18555, 18555, 22740, 29526, 21095, 18555, 20961, 20883, 21113, 20054, 29526, 21219, 20960,
  /*  4785 */ 21131, 41808, 21190, 20527, 21157, 41811, 21096, 20958, 20095, 21186, 20525, 20092, 41816, 20525, 40590,
  /*  4800 */ 20952, 20942, 29511, 21206, 21079, 21138, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4815 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4830 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4845 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4860 */ 18555, 18555, 18555, 18555, 18408, 44897, 18555, 18555, 18555, 28557, 21242, 18555, 18555, 21237, 42142,
  /*  4875 */ 21258, 21266, 21266, 21266, 21282, 46517, 21320, 26603, 18555, 18555, 18555, 26625, 18555, 18555, 18555,
  /*  4890 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4905 */ 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 21221, 18555, 18555, 18555, 18555,
  /*  4920 */ 18555, 18555, 18555, 37250, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4935 */ 21310, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4950 */ 18555, 18555, 18555, 18555, 18555, 18555, 44057, 21336, 18555, 18555, 18555, 18555, 21368, 18555, 18555,
  /*  4965 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4980 */ 18555, 18557, 21390, 18555, 18555, 18555, 18555, 18555, 19369, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  4995 */ 18555, 31327, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 43525, 18555, 18555, 18555,
  /*  5010 */ 18555, 18555, 21411, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5025 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20054, 18555, 18555,
  /*  5040 */ 18555, 18555, 20054, 18555, 18555, 39641, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5055 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5070 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5085 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5100 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5115 */ 18555, 18555, 18555, 18555, 18555, 18408, 18555, 18555, 18555, 18555, 28557, 18555, 18555, 18555, 18555,
  /*  5130 */ 38909, 23360, 21432, 21432, 21432, 21441, 45646, 21464, 26603, 18555, 18555, 18555, 26625, 18555, 18555,
  /*  5145 */ 18555, 18555, 18555, 45419, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 37157,
  /*  5160 */ 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 21221, 18555, 18555, 18555,
  /*  5175 */ 18555, 18555, 18555, 18555, 37250, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5190 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5205 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5220 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5235 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5250 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5265 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5280 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20054, 18555,
  /*  5295 */ 18555, 18555, 18555, 20054, 18555, 18555, 39641, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5310 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5325 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5340 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5355 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5370 */ 18555, 18555, 18555, 18555, 18555, 18555, 20259, 42055, 18555, 18555, 18555, 28557, 18555, 18555, 18555,
  /*  5385 */ 18555, 20736, 37012, 21498, 21498, 21498, 21507, 46564, 31337, 26603, 21530, 18555, 18555, 26625, 18555,
  /*  5400 */ 18555, 18555, 18555, 18555, 20672, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5415 */ 37659, 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 21221, 18555, 18555,
  /*  5430 */ 18555, 18555, 18555, 18555, 18555, 37250, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5445 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5460 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5475 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5490 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5505 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5520 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5535 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20054,
  /*  5550 */ 18555, 18555, 18555, 18555, 20054, 18555, 18555, 39641, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5565 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5580 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5595 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5610 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5625 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 19257, 19266, 18555, 18555, 18555, 42816, 18555, 18555,
  /*  5640 */ 18555, 18555, 20736, 38499, 21547, 21547, 21547, 21556, 46608, 22487, 21579, 18555, 18555, 18555, 26625,
  /*  5655 */ 18555, 18555, 18555, 18555, 18555, 43496, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5670 */ 18555, 35392, 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 21221, 18555,
  /*  5685 */ 18555, 18555, 18555, 18555, 18555, 18555, 37250, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5700 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5715 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5730 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5745 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5760 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5775 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5790 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5805 */ 20054, 18555, 18555, 18555, 18555, 20054, 18555, 18555, 40402, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5820 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5835 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5850 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5865 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5880 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 21651, 18555, 18555, 18555, 18555, 28557, 36864,
  /*  5895 */ 18555, 18555, 42764, 26991, 18555, 18555, 18555, 36868, 21620, 18555, 21638, 26603, 18555, 18555, 18555,
  /*  5910 */ 26625, 18555, 18555, 18555, 21289, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5925 */ 18555, 21294, 21293, 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 21221,
  /*  5940 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 37250, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5955 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5970 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  5985 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6000 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6015 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6030 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6045 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6060 */ 18555, 20054, 18555, 18555, 18555, 18555, 20054, 18555, 18555, 39641, 18555, 18555, 18555, 18555, 18555,
  /*  6075 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6090 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6105 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6120 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6135 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18408, 18555, 18555, 18555, 18555, 28557,
  /*  6150 */ 18555, 18555, 18555, 18555, 20736, 18555, 18555, 18555, 18555, 18555, 31372, 21667, 26603, 18555, 18555,
  /*  6165 */ 18555, 26625, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6180 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6195 */ 21221, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 37250, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6210 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6225 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6240 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6255 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6270 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6285 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6300 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6315 */ 18555, 18555, 20054, 18555, 18555, 18555, 18555, 20054, 18555, 18555, 39641, 18555, 18555, 18555, 18555,
  /*  6330 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6345 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6360 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6375 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6390 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20520, 18555, 18555, 18555, 18555,
  /*  6405 */ 30138, 18555, 18555, 18555, 18555, 20736, 18555, 18555, 18555, 18555, 34655, 21683, 33128, 20287, 18555,
  /*  6420 */ 18555, 18555, 26625, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 45144, 30078,
  /*  6435 */ 46204, 41439, 19842, 23983, 24567, 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6450 */ 18555, 39679, 30078, 30078, 30078, 43275, 46206, 46206, 46206, 35966, 19842, 19842, 19842, 35975, 32270,
  /*  6465 */ 18555, 18555, 18555, 18555, 18555, 18555, 24581, 18555, 18555, 18555, 18555, 19659, 30078, 30078, 30078,
  /*  6480 */ 30078, 46205, 46206, 46206, 46206, 46206, 19677, 19842, 19842, 19842, 19842, 25680, 21712, 46654, 18555,
  /*  6495 */ 18555, 18555, 18555, 24582, 18555, 18555, 18555, 20374, 30078, 30078, 30078, 30079, 46206, 46206, 46206,
  /*  6510 */ 46206, 28366, 19842, 19842, 19842, 19842, 29115, 25579, 20703, 18555, 18555, 18555, 21753, 18555, 18847,
  /*  6525 */ 30078, 30078, 30078, 43276, 46206, 46206, 46206, 31471, 19842, 19842, 19842, 28151, 26676, 18555, 18555,
  /*  6540 */ 18555, 18555, 28025, 30078, 30078, 30213, 46206, 46206, 43696, 19842, 19842, 23330, 18555, 18555, 21770,
  /*  6555 */ 18555, 20755, 30078, 30211, 46206, 30273, 19842, 19842, 23330, 18555, 18555, 45143, 30078, 30211, 46206,
  /*  6570 */ 28657, 19843, 26674, 20054, 30078, 46204, 28656, 25932, 20368, 43276, 25018, 46587, 20371, 30212, 28654,
  /*  6585 */ 36376, 43272, 25016, 36373, 20376, 25016, 29843, 36447, 23134, 31942, 23996, 33629, 20118, 18555, 18555,
  /*  6600 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6615 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6630 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6645 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20520, 18555, 18555, 18555,
  /*  6660 */ 18555, 30138, 18555, 18555, 18555, 18555, 20736, 18555, 18555, 18555, 18555, 34655, 21683, 33128, 20287,
  /*  6675 */ 18555, 18555, 18555, 26625, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 45144,
  /*  6690 */ 30078, 46204, 41439, 19842, 23983, 24567, 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555,
  /*  6705 */ 18555, 18555, 39679, 30078, 30078, 30078, 43275, 46206, 46206, 46206, 35966, 19842, 19842, 19842, 35975,
  /*  6720 */ 32270, 18555, 18555, 18555, 18555, 18555, 18555, 24581, 18555, 18555, 18555, 18555, 19659, 30078, 30078,
  /*  6735 */ 30078, 30078, 46205, 46206, 46206, 46206, 46206, 19677, 19842, 19842, 19842, 19842, 25680, 21712, 46654,
  /*  6750 */ 18555, 18555, 18555, 18555, 24582, 18555, 18555, 18555, 20374, 30078, 30078, 30078, 30079, 46206, 46206,
  /*  6765 */ 46206, 46206, 28366, 19842, 19842, 19842, 19842, 29115, 25579, 20703, 18555, 18555, 18555, 18555, 18555,
  /*  6780 */ 18847, 30078, 30078, 30078, 43276, 46206, 46206, 46206, 31471, 19842, 19842, 19842, 28151, 26676, 18555,
  /*  6795 */ 18555, 18555, 18555, 28025, 30078, 30078, 30213, 46206, 46206, 43696, 19842, 19842, 23330, 18555, 18555,
  /*  6810 */ 18555, 18555, 20755, 30078, 30211, 46206, 30273, 19842, 19842, 23330, 18555, 18555, 45143, 30078, 30211,
  /*  6825 */ 46206, 28657, 19843, 26674, 20054, 30078, 46204, 28656, 25932, 20368, 43276, 25018, 46587, 20371, 30212,
  /*  6840 */ 28654, 36376, 43272, 25016, 36373, 20376, 25016, 29843, 36447, 23134, 31942, 23996, 33629, 20118, 18555,
  /*  6855 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6870 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6885 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6900 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20520, 18555, 18555,
  /*  6915 */ 18555, 18555, 30138, 18555, 18555, 18555, 18555, 20736, 18555, 18555, 18555, 18555, 34655, 21683, 33128,
  /*  6930 */ 20287, 18555, 18555, 18555, 26625, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  6945 */ 45144, 30078, 46204, 41439, 19842, 23983, 24567, 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555,
  /*  6960 */ 18555, 18555, 18555, 39679, 30078, 30078, 30078, 43275, 46206, 46206, 46206, 35966, 19842, 19842, 19842,
  /*  6975 */ 35975, 32270, 18555, 18555, 18555, 18555, 18555, 18555, 24581, 21791, 18555, 18555, 18555, 19659, 30078,
  /*  6990 */ 30078, 30078, 30078, 46205, 46206, 46206, 46206, 46206, 19677, 19842, 19842, 19842, 19842, 25680, 21712,
  /*  7005 */ 46654, 18555, 18555, 18555, 18555, 24582, 18555, 18555, 18555, 20374, 30078, 30078, 30078, 30079, 46206,
  /*  7020 */ 46206, 46206, 46206, 28366, 19842, 19842, 19842, 19842, 29115, 25579, 20703, 18555, 18555, 18555, 18555,
  /*  7035 */ 18555, 18847, 30078, 30078, 30078, 43276, 46206, 46206, 46206, 31471, 19842, 19842, 19842, 28151, 26676,
  /*  7050 */ 18555, 18555, 18555, 18555, 28025, 30078, 30078, 30213, 46206, 46206, 43696, 19842, 19842, 23330, 18555,
  /*  7065 */ 18555, 18555, 18555, 20755, 30078, 30211, 46206, 30273, 19842, 19842, 23330, 18555, 18555, 45143, 30078,
  /*  7080 */ 30211, 46206, 28657, 19843, 26674, 20054, 30078, 46204, 28656, 25932, 20368, 43276, 25018, 46587, 20371,
  /*  7095 */ 30212, 28654, 36376, 43272, 25016, 36373, 20376, 25016, 29843, 36447, 23134, 31942, 23996, 33629, 20118,
  /*  7110 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  7125 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  7140 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  7155 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20520, 18555,
  /*  7170 */ 18555, 18555, 18555, 30138, 18555, 18555, 18555, 18555, 20736, 18555, 18555, 18555, 18555, 34655, 21683,
  /*  7185 */ 33128, 20287, 18555, 18555, 18555, 26625, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  7200 */ 18555, 45144, 30078, 46204, 41439, 19842, 23983, 24567, 18555, 18555, 18555, 36904, 18555, 18555, 18555,
  /*  7215 */ 18555, 18555, 18555, 18555, 39679, 30078, 30078, 30078, 43275, 46206, 46206, 46206, 35966, 19842, 19842,
  /*  7230 */ 19842, 35975, 32270, 18555, 18555, 18555, 18555, 18555, 18555, 24581, 18555, 18555, 18555, 18555, 19659,
  /*  7245 */ 30078, 30078, 30078, 30078, 46205, 46206, 46206, 46206, 46206, 19677, 19842, 19842, 19842, 19842, 25680,
  /*  7260 */ 21712, 46654, 18555, 18555, 18555, 18555, 41945, 18555, 18555, 18555, 20374, 30078, 30078, 30078, 30079,
  /*  7275 */ 46206, 46206, 46206, 46206, 28366, 19842, 19842, 19842, 19842, 29115, 25579, 20703, 18555, 18555, 18555,
  /*  7290 */ 18555, 18555, 18847, 30078, 30078, 30078, 43276, 46206, 46206, 46206, 31471, 19842, 19842, 19842, 28151,
  /*  7305 */ 26676, 18555, 18555, 18555, 18555, 28025, 30078, 30078, 30213, 46206, 46206, 43696, 19842, 19842, 23330,
  /*  7320 */ 18555, 18555, 18555, 18555, 20755, 30078, 30211, 46206, 30273, 19842, 19842, 23330, 18555, 18555, 45143,
  /*  7335 */ 30078, 30211, 46206, 28657, 19843, 26674, 20054, 30078, 46204, 28656, 25932, 20368, 43276, 25018, 46587,
  /*  7350 */ 20371, 30212, 28654, 36376, 43272, 25016, 36373, 20376, 25016, 29843, 36447, 23134, 31942, 23996, 33629,
  /*  7365 */ 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  7380 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  7395 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  7410 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20520,
  /*  7425 */ 18555, 18555, 18555, 18555, 30138, 18555, 18555, 18555, 18555, 20736, 18555, 18555, 18555, 18555, 34655,
  /*  7440 */ 21683, 33128, 20287, 18555, 18555, 18555, 26625, 18555, 18555, 21811, 18555, 18555, 18555, 18555, 18555,
  /*  7455 */ 18555, 18555, 45144, 30078, 46204, 41439, 19842, 23983, 24567, 18555, 18555, 18555, 36904, 18555, 18555,
  /*  7470 */ 21814, 18555, 18555, 18555, 18555, 39679, 30078, 30078, 30078, 43275, 46206, 46206, 46206, 35966, 19842,
  /*  7485 */ 19842, 19842, 35975, 32270, 18555, 18555, 18555, 18555, 18555, 18555, 24581, 18555, 18555, 18555, 18555,
  /*  7500 */ 19659, 30078, 30078, 30078, 30078, 46205, 46206, 46206, 46206, 46206, 19677, 19842, 19842, 19842, 19842,
  /*  7515 */ 25680, 21712, 46654, 18555, 18555, 18555, 18555, 24582, 18555, 18555, 18555, 20374, 30078, 30078, 30078,
  /*  7530 */ 30079, 46206, 46206, 46206, 46206, 28366, 19842, 19842, 19842, 19842, 29115, 25579, 20703, 18555, 18555,
  /*  7545 */ 18555, 18555, 18555, 18847, 30078, 30078, 30078, 43276, 46206, 46206, 46206, 31471, 19842, 19842, 19842,
  /*  7560 */ 28151, 26676, 18555, 18555, 18555, 18555, 28025, 30078, 30078, 30213, 46206, 46206, 43696, 19842, 19842,
  /*  7575 */ 23330, 18555, 18555, 18555, 18555, 20755, 30078, 30211, 46206, 30273, 19842, 19842, 23330, 18555, 18555,
  /*  7590 */ 45143, 30078, 30211, 46206, 28657, 19843, 26674, 20054, 30078, 46204, 28656, 25932, 20368, 43276, 25018,
  /*  7605 */ 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373, 20376, 25016, 29843, 36447, 23134, 31942, 23996,
  /*  7620 */ 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  7635 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  7650 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  7665 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  7680 */ 20520, 18555, 18555, 18555, 18555, 30138, 18555, 18555, 18555, 18555, 20736, 18555, 18555, 18555, 18555,
  /*  7695 */ 34655, 21683, 33128, 20287, 18555, 18555, 18555, 26625, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  7710 */ 18555, 18555, 18555, 45144, 30078, 46204, 41439, 19842, 23983, 24567, 18555, 18555, 18555, 36904, 18555,
  /*  7725 */ 18555, 18555, 18555, 18555, 18555, 18555, 39679, 30078, 30078, 30078, 43275, 46206, 46206, 46206, 35966,
  /*  7740 */ 19842, 19842, 19842, 35975, 32270, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  7755 */ 18555, 19659, 30078, 30078, 30078, 30078, 46205, 46206, 46206, 46206, 46206, 19677, 19842, 19842, 19842,
  /*  7770 */ 19842, 25680, 35471, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20374, 30078, 30078,
  /*  7785 */ 30078, 30079, 46206, 46206, 46206, 46206, 28366, 19842, 19842, 19842, 19842, 29115, 23993, 18555, 18555,
  /*  7800 */ 18555, 18555, 18555, 18555, 45555, 30078, 30078, 30078, 43276, 46206, 46206, 46206, 44988, 19842, 19842,
  /*  7815 */ 19842, 28151, 26676, 18555, 18555, 18555, 18555, 20371, 30078, 30078, 30213, 46206, 46206, 23578, 19842,
  /*  7830 */ 19842, 23330, 18555, 18555, 18555, 18555, 20755, 30078, 30211, 46206, 30273, 19842, 19842, 23330, 18555,
  /*  7845 */ 18555, 45143, 30078, 30211, 46206, 28657, 19843, 26674, 20054, 30078, 46204, 28656, 25932, 20368, 43276,
  /*  7860 */ 25018, 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373, 20376, 25016, 29843, 36447, 23134, 31942,
  /*  7875 */ 23996, 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  7890 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  7905 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  7920 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  7935 */ 18555, 20520, 18555, 18555, 18555, 18555, 30138, 18555, 18555, 18555, 18555, 20736, 18555, 18555, 18555,
  /*  7950 */ 18555, 34655, 21683, 33128, 20287, 18555, 18555, 18555, 26625, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  7965 */ 18555, 18555, 18555, 18555, 45144, 30078, 46204, 41439, 19842, 23983, 24241, 18555, 18555, 18555, 36904,
  /*  7980 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 39679, 30078, 30078, 30078, 43275, 46206, 46206, 46206,
  /*  7995 */ 35966, 19842, 19842, 19842, 35975, 32270, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8010 */ 18555, 18555, 19659, 30078, 30078, 30078, 30078, 46205, 46206, 46206, 46206, 46206, 19677, 19842, 19842,
  /*  8025 */ 19842, 19842, 25680, 35471, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20374, 30078,
  /*  8040 */ 30078, 30078, 30079, 46206, 46206, 46206, 46206, 28366, 19842, 19842, 19842, 19842, 29115, 23993, 18555,
  /*  8055 */ 18555, 18555, 18555, 18555, 18555, 45555, 30078, 30078, 30078, 43276, 46206, 46206, 46206, 44988, 19842,
  /*  8070 */ 19842, 19842, 28151, 26676, 18555, 18555, 18555, 18555, 20371, 30078, 30078, 30213, 46206, 46206, 23578,
  /*  8085 */ 19842, 19842, 23330, 18555, 18555, 18555, 18555, 20755, 30078, 30211, 46206, 30273, 19842, 19842, 23330,
  /*  8100 */ 18555, 18555, 45143, 30078, 30211, 46206, 28657, 19843, 26674, 20054, 30078, 46204, 28656, 25932, 20368,
  /*  8115 */ 43276, 25018, 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373, 20376, 25016, 29843, 36447, 23134,
  /*  8130 */ 31942, 23996, 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8145 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8160 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8175 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8190 */ 18555, 18555, 20520, 18555, 18555, 18555, 18555, 30138, 18555, 18555, 18555, 18555, 20736, 18555, 18555,
  /*  8205 */ 18555, 18555, 34655, 21683, 33128, 21832, 18555, 18555, 18555, 26625, 18555, 18555, 18555, 18555, 18555,
  /*  8220 */ 18555, 18555, 18555, 18555, 18555, 45144, 30078, 46204, 41439, 19842, 23983, 24567, 18555, 18555, 18555,
  /*  8235 */ 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 39679, 30078, 30078, 30078, 43275, 46206, 46206,
  /*  8250 */ 46206, 35966, 19842, 19842, 19842, 35975, 32270, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8265 */ 18555, 18555, 18555, 19659, 30078, 30078, 30078, 30078, 46205, 46206, 46206, 46206, 46206, 19677, 19842,
  /*  8280 */ 19842, 19842, 19842, 25680, 35471, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20374,
  /*  8295 */ 30078, 30078, 30078, 30079, 46206, 46206, 46206, 46206, 28366, 19842, 19842, 19842, 19842, 29115, 23993,
  /*  8310 */ 18555, 18555, 18555, 18555, 18555, 18555, 45555, 30078, 30078, 30078, 43276, 46206, 46206, 46206, 44988,
  /*  8325 */ 19842, 19842, 19842, 28151, 26676, 18555, 18555, 18555, 18555, 20371, 30078, 30078, 30213, 46206, 46206,
  /*  8340 */ 23578, 19842, 19842, 23330, 18555, 18555, 18555, 18555, 20755, 30078, 30211, 46206, 30273, 19842, 19842,
  /*  8355 */ 23330, 18555, 18555, 45143, 30078, 30211, 46206, 28657, 19843, 26674, 20054, 30078, 46204, 28656, 25932,
  /*  8370 */ 20368, 43276, 25018, 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373, 20376, 25016, 29843, 36447,
  /*  8385 */ 23134, 31942, 23996, 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8400 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8415 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8430 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8445 */ 18555, 18555, 18555, 20520, 18555, 18555, 18555, 18555, 30138, 18555, 18555, 18555, 18555, 20736, 21885,
  /*  8460 */ 18555, 18555, 18555, 34655, 21683, 33128, 20287, 18555, 18555, 18555, 26625, 18555, 18555, 18555, 18555,
  /*  8475 */ 18555, 18555, 18555, 18555, 18555, 18555, 45144, 30078, 46204, 41439, 19842, 23983, 24567, 18555, 18555,
  /*  8490 */ 18555, 36904, 18555, 18555, 18555, 42736, 18555, 18555, 18555, 39679, 30078, 30078, 30078, 43275, 46206,
  /*  8505 */ 46206, 46206, 35966, 19842, 19842, 19842, 35975, 32270, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8520 */ 18555, 18555, 18555, 18555, 19659, 30078, 30078, 30078, 30078, 46205, 46206, 46206, 46206, 46206, 19677,
  /*  8535 */ 19842, 19842, 19842, 19842, 25680, 35471, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8550 */ 20374, 30078, 30078, 30078, 30079, 46206, 46206, 46206, 46206, 28366, 19842, 19842, 19842, 19842, 29115,
  /*  8565 */ 23993, 18555, 18555, 18555, 18555, 18555, 18555, 45555, 30078, 30078, 30078, 43276, 46206, 46206, 46206,
  /*  8580 */ 44988, 19842, 19842, 19842, 28151, 26676, 18555, 18555, 18555, 18555, 20371, 30078, 30078, 30213, 46206,
  /*  8595 */ 46206, 23578, 19842, 19842, 23330, 18555, 18555, 18555, 18555, 20755, 30078, 30211, 46206, 30273, 19842,
  /*  8610 */ 19842, 23330, 18555, 18555, 45143, 30078, 30211, 46206, 28657, 19843, 26674, 20054, 30078, 46204, 28656,
  /*  8625 */ 25932, 20368, 43276, 25018, 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373, 20376, 25016, 29843,
  /*  8640 */ 36447, 23134, 31942, 23996, 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8655 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8670 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8685 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8700 */ 18555, 18555, 18555, 18555, 20520, 18555, 18555, 18555, 18555, 30138, 18555, 18555, 18555, 18555, 20736,
  /*  8715 */ 18555, 18555, 18555, 18555, 22379, 21906, 21922, 20287, 18555, 18555, 18555, 26625, 18555, 18555, 18555,
  /*  8730 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 45144, 30078, 46204, 41439, 19842, 23983, 24567, 18555,
  /*  8745 */ 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 39679, 30078, 30078, 30078, 43275,
  /*  8760 */ 46206, 46206, 46206, 35966, 19842, 19842, 19842, 35975, 32270, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8775 */ 18555, 18555, 18555, 18555, 18555, 19659, 30078, 30078, 30078, 30078, 46205, 46206, 46206, 46206, 46206,
  /*  8790 */ 19677, 19842, 19842, 19842, 19842, 25680, 35471, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8805 */ 18555, 20374, 30078, 30078, 30078, 30079, 46206, 46206, 46206, 46206, 28366, 19842, 19842, 19842, 19842,
  /*  8820 */ 29115, 23993, 18555, 18555, 18555, 18555, 18555, 18555, 45555, 30078, 30078, 30078, 43276, 46206, 46206,
  /*  8835 */ 46206, 44988, 19842, 19842, 19842, 28151, 26676, 18555, 18555, 18555, 18555, 20371, 30078, 30078, 30213,
  /*  8850 */ 46206, 46206, 23578, 19842, 19842, 23330, 18555, 18555, 18555, 18555, 20755, 30078, 30211, 46206, 30273,
  /*  8865 */ 19842, 19842, 23330, 18555, 18555, 45143, 30078, 30211, 46206, 28657, 19843, 26674, 20054, 30078, 46204,
  /*  8880 */ 28656, 25932, 20368, 43276, 25018, 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373, 20376, 25016,
  /*  8895 */ 29843, 36447, 23134, 31942, 23996, 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8910 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8925 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8940 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  8955 */ 18555, 18555, 18555, 18555, 18555, 20520, 18555, 18555, 18555, 18555, 30138, 18555, 18555, 18555, 18555,
  /*  8970 */ 20736, 18555, 18555, 18555, 18555, 34655, 21683, 33128, 20287, 18555, 18555, 18555, 26625, 18555, 18555,
  /*  8985 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 45144, 30078, 46204, 41439, 19842, 23983, 24567,
  /*  9000 */ 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 39679, 30078, 30078, 30078,
  /*  9015 */ 43275, 46206, 46206, 46206, 35966, 19842, 19842, 19842, 35975, 32270, 18555, 18555, 18555, 18555, 18555,
  /*  9030 */ 18555, 18555, 18555, 18555, 18555, 18555, 19659, 30078, 30078, 30078, 30078, 46205, 46206, 46206, 46206,
  /*  9045 */ 46206, 19677, 19842, 19842, 19842, 19842, 25680, 35471, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9060 */ 18555, 18555, 20374, 30078, 30078, 30078, 30079, 46206, 46206, 46206, 46206, 28366, 19842, 19842, 19842,
  /*  9075 */ 19842, 29115, 23993, 18555, 18555, 18555, 18555, 18555, 18555, 45555, 30078, 30078, 30078, 43276, 46206,
  /*  9090 */ 46206, 46206, 44988, 19842, 19842, 19842, 28151, 26676, 18555, 18555, 21938, 18555, 20371, 30078, 30078,
  /*  9105 */ 30213, 46206, 46206, 23578, 19842, 19842, 23330, 18555, 18555, 18555, 18555, 20755, 30078, 30211, 46206,
  /*  9120 */ 30273, 19842, 19842, 23330, 18555, 18555, 45143, 30078, 30211, 46206, 28657, 19843, 26674, 20054, 30078,
  /*  9135 */ 46204, 28656, 25932, 20368, 43276, 25018, 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373, 20376,
  /*  9150 */ 25016, 29843, 36447, 23134, 31942, 23996, 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9165 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9180 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9195 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9210 */ 18555, 18555, 18555, 18555, 18555, 18555, 21477, 18555, 18555, 18555, 18555, 30138, 18555, 18555, 18555,
  /*  9225 */ 18555, 20736, 18555, 18555, 18555, 18555, 34655, 21683, 33128, 20287, 18555, 18555, 18555, 26625, 18555,
  /*  9240 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 45144, 30078, 46204, 41439, 19842, 23983,
  /*  9255 */ 24567, 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 39679, 30078, 30078,
  /*  9270 */ 30078, 43275, 46206, 46206, 46206, 35966, 19842, 19842, 19842, 35975, 32270, 18555, 18555, 18555, 18555,
  /*  9285 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 19659, 30078, 30078, 30078, 30078, 46205, 46206, 46206,
  /*  9300 */ 46206, 46206, 19677, 19842, 19842, 19842, 19842, 25680, 35471, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9315 */ 18555, 18555, 18555, 20374, 30078, 30078, 30078, 30079, 46206, 46206, 46206, 46206, 28366, 19842, 19842,
  /*  9330 */ 19842, 19842, 29115, 23993, 18555, 18555, 18555, 18555, 18555, 18555, 45555, 30078, 30078, 30078, 43276,
  /*  9345 */ 46206, 46206, 46206, 44988, 19842, 19842, 19842, 28151, 26676, 18555, 18555, 18555, 18555, 20371, 30078,
  /*  9360 */ 30078, 30213, 46206, 46206, 23578, 19842, 19842, 23330, 18555, 18555, 18555, 18555, 20755, 30078, 30211,
  /*  9375 */ 46206, 30273, 19842, 19842, 23330, 18555, 18555, 45143, 30078, 30211, 46206, 28657, 19843, 26674, 20054,
  /*  9390 */ 30078, 46204, 28656, 25932, 20368, 43276, 25018, 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373,
  /*  9405 */ 20376, 25016, 29843, 36447, 23134, 31942, 23996, 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9420 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9435 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9450 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9465 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18408, 18555, 18555, 18555, 18555, 28557, 18555, 18555,
  /*  9480 */ 18555, 18555, 20736, 25396, 21960, 21979, 22008, 22020, 25398, 21963, 26603, 18555, 18555, 18555, 26625,
  /*  9495 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9510 */ 18555, 18555, 18555, 18555, 18555, 36904, 18555, 18555, 18555, 22043, 18555, 18555, 18555, 21221, 18555,
  /*  9525 */ 18555, 18555, 18555, 18555, 18555, 18555, 37250, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9540 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9555 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9570 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9585 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9600 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9615 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9630 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20051, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9645 */ 20054, 18555, 18555, 18555, 18555, 20054, 18555, 18555, 39641, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9660 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9675 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9690 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9705 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9720 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18408, 18555, 18555, 18555, 18555, 28557, 18555,
  /*  9735 */ 18555, 18555, 18555, 20736, 18555, 18555, 18555, 18555, 18555, 18555, 20057, 26603, 18555, 18555, 18555,
  /*  9750 */ 26625, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9765 */ 18555, 18555, 18555, 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 21221,
  /*  9780 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 37250, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9795 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9810 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9825 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9840 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9855 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9870 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9885 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9900 */ 18555, 20054, 18555, 18555, 18555, 18555, 20054, 18555, 18555, 39641, 18555, 18555, 18555, 18555, 18555,
  /*  9915 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9930 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9945 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9960 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /*  9975 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18408, 18555, 18555, 18555, 18555, 28557,
  /*  9990 */ 18555, 18555, 18555, 18555, 20736, 37602, 18555, 22064, 22070, 22086, 18555, 22109, 26603, 18555, 18555,
  /* 10005 */ 18555, 26625, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10020 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10035 */ 21221, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 37250, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10050 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10065 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10080 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10095 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10110 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10125 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10140 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10155 */ 18555, 18555, 22125, 18555, 18555, 18555, 18555, 22147, 18555, 18555, 40294, 18555, 18555, 18555, 18555,
  /* 10170 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10185 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10200 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10215 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10230 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20520, 18597, 18555, 18555, 18555,
  /* 10245 */ 30138, 22166, 22197, 18615, 22182, 22214, 33157, 33166, 22251, 22265, 22277, 22293, 22309, 20287, 22325,
  /* 10260 */ 18555, 22349, 41960, 18438, 40711, 22366, 22395, 22432, 22461, 21795, 22477, 22503, 22524, 22569, 22585,
  /* 10275 */ 24662, 22601, 22641, 23416, 34765, 22691, 18555, 18555, 36904, 22713, 32533, 18555, 22737, 22757, 38293,
  /* 10290 */ 22721, 25188, 30078, 30078, 19661, 43275, 46206, 46206, 30921, 35966, 19842, 19842, 41042, 39534, 32270,
  /* 10305 */ 18555, 40520, 23230, 18555, 31082, 22774, 21846, 18555, 22795, 32675, 25967, 22812, 45320, 30078, 30817,
  /* 10320 */ 22839, 27334, 22865, 46206, 41430, 22885, 22910, 25083, 19842, 37582, 25922, 22948, 22977, 46654, 23008,
  /* 10335 */ 35122, 32315, 35539, 24582, 18555, 34204, 23029, 28616, 23051, 38240, 28857, 42242, 30651, 23084, 43905,
  /* 10350 */ 23103, 23121, 38018, 23159, 41914, 19842, 23176, 23192, 22992, 45892, 23229, 40554, 23246, 23273, 18847,
  /* 10365 */ 36253, 30078, 46327, 41352, 23294, 46206, 37531, 23319, 23376, 19842, 35998, 23402, 22932, 23432, 30978,
  /* 10380 */ 18555, 23461, 23484, 23507, 23545, 23690, 23566, 23600, 44159, 23619, 23647, 26847, 37969, 18555, 18555,
  /* 10395 */ 23666, 34223, 46344, 23688, 23706, 23728, 28401, 42657, 23330, 18555, 18555, 45143, 30078, 30211, 46206,
  /* 10410 */ 28657, 19843, 26674, 20054, 30078, 46204, 28656, 25932, 20368, 43276, 25018, 24516, 23752, 24492, 27233,
  /* 10425 */ 35626, 23787, 23809, 41050, 20376, 25016, 27353, 36447, 23134, 31942, 23996, 33629, 20118, 18555, 18555,
  /* 10440 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10455 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10470 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10485 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20520, 18555, 23840, 18555,
  /* 10500 */ 18555, 30138, 18555, 18555, 18555, 18555, 26905, 23859, 18555, 23902, 23908, 23924, 23940, 23956, 20287,
  /* 10515 */ 18555, 18555, 18555, 26625, 18555, 18555, 18555, 18555, 22150, 18555, 18555, 18555, 18555, 18555, 45144,
  /* 10530 */ 30078, 46204, 41439, 19842, 23972, 24567, 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555,
  /* 10545 */ 18555, 18555, 39679, 30078, 30078, 30078, 43275, 46206, 46206, 46206, 35966, 19842, 19842, 19842, 35975,
  /* 10560 */ 32270, 18555, 18555, 18555, 18555, 18555, 27479, 24581, 24012, 18555, 24012, 18555, 19659, 30078, 30078,
  /* 10575 */ 30078, 24029, 46205, 46206, 46206, 29232, 24051, 19677, 19842, 19842, 19842, 24072, 25680, 21712, 46654,
  /* 10590 */ 18555, 18555, 18555, 18555, 24582, 18555, 18555, 18555, 20374, 30078, 30078, 30078, 30079, 46206, 46206,
  /* 10605 */ 46206, 46206, 28366, 19842, 19842, 19842, 19842, 29115, 25579, 20703, 18555, 24094, 18555, 37722, 18280,
  /* 10620 */ 18847, 24114, 30078, 30078, 22849, 24137, 46206, 46206, 24155, 24209, 19842, 19842, 44532, 26676, 18555,
  /* 10635 */ 18555, 18555, 18555, 28025, 30078, 30078, 30213, 46206, 46206, 43696, 19842, 19842, 23330, 18555, 18555,
  /* 10650 */ 18555, 18555, 20755, 30078, 30211, 46206, 30273, 19842, 19842, 23330, 18555, 18555, 45143, 30078, 30211,
  /* 10665 */ 46206, 28657, 19843, 26674, 20054, 30078, 46204, 28656, 25932, 20368, 43276, 25018, 46587, 20371, 30212,
  /* 10680 */ 28654, 36376, 24228, 24257, 24284, 20376, 25016, 29843, 36447, 23134, 31942, 23996, 33629, 20118, 18555,
  /* 10695 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10710 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10725 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10740 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20520, 18555, 24309,
  /* 10755 */ 18555, 18555, 30138, 18555, 24338, 18555, 24356, 29885, 24375, 24384, 24400, 24415, 24427, 24443, 24459,
  /* 10770 */ 20287, 18555, 18555, 24098, 29444, 18555, 24340, 18555, 18555, 20491, 18555, 18555, 18555, 46859, 18555,
  /* 10785 */ 24475, 24682, 46204, 24508, 32059, 44546, 32301, 18555, 24532, 18555, 38984, 24535, 27497, 18555, 27515,
  /* 10800 */ 28743, 27427, 25986, 32914, 24552, 24598, 30078, 24853, 28489, 46206, 46206, 27169, 44473, 19842, 19842,
  /* 10815 */ 35975, 32270, 18555, 24618, 18555, 30156, 18555, 31109, 24581, 41560, 33385, 18555, 18555, 24636, 42334,
  /* 10830 */ 24678, 24698, 30078, 26215, 38609, 24720, 24739, 46206, 24760, 37120, 34818, 26528, 19842, 25680, 21712,
  /* 10845 */ 46654, 18555, 18555, 24789, 18555, 24808, 18555, 24830, 18555, 20374, 30078, 30078, 30078, 24849, 46206,
  /* 10860 */ 46206, 46206, 23712, 28366, 19842, 19842, 19842, 39806, 29267, 25579, 21727, 18555, 18555, 38746, 35519,
  /* 10875 */ 18555, 18847, 30078, 30078, 25491, 43276, 46206, 46206, 24869, 31471, 19842, 19842, 31534, 28151, 26676,
  /* 10890 */ 18555, 19119, 18555, 35355, 24890, 30078, 24914, 30213, 39483, 46206, 43696, 40144, 19842, 24268, 24932,
  /* 10905 */ 18555, 18555, 24968, 20146, 37992, 30211, 24997, 25013, 33120, 33471, 23330, 18555, 41274, 45143, 30078,
  /* 10920 */ 43867, 46206, 25034, 34857, 26674, 20054, 30078, 46204, 28656, 25932, 20368, 43276, 25018, 46587, 20371,
  /* 10935 */ 30212, 28654, 31482, 25053, 25069, 25104, 20376, 25016, 29843, 36447, 23134, 31942, 22961, 25123, 20118,
  /* 10950 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10965 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10980 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 10995 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20520, 18555,
  /* 11010 */ 18411, 18555, 18555, 30138, 18555, 25185, 26169, 18555, 26278, 25204, 25213, 25229, 25243, 25252, 25268,
  /* 11025 */ 25284, 20287, 18555, 18555, 18555, 26625, 18555, 18555, 18555, 18555, 18555, 18555, 27742, 27740, 18555,
  /* 11040 */ 41101, 41108, 29143, 45916, 41439, 25300, 23983, 24567, 18555, 31269, 25318, 36904, 18555, 25342, 23013,
  /* 11055 */ 18555, 18555, 25360, 25414, 25437, 25453, 25472, 25507, 31444, 35032, 40229, 25529, 25546, 39375, 43764,
  /* 11070 */ 19679, 35975, 32270, 18555, 18555, 18555, 41503, 18555, 32866, 24581, 18555, 18555, 18555, 45391, 19659,
  /* 11085 */ 30078, 30078, 20757, 30078, 46205, 46206, 46206, 23087, 46206, 19677, 19842, 19842, 25302, 19842, 44400,
  /* 11100 */ 25595, 46654, 25611, 18555, 27452, 26162, 24582, 18555, 18555, 30580, 43252, 25629, 30078, 30078, 32112,
  /* 11115 */ 44977, 35786, 46206, 46206, 25645, 24184, 36524, 19842, 33908, 25674, 25579, 20703, 18555, 18555, 18555,
  /* 11130 */ 32666, 25696, 18847, 25718, 30078, 38546, 41381, 46206, 46206, 25736, 37277, 19842, 19842, 25754, 36532,
  /* 11145 */ 26676, 20207, 27020, 18555, 19326, 28025, 37432, 39770, 30213, 28359, 25773, 43696, 46243, 25799, 23330,
  /* 11160 */ 18555, 25825, 18555, 18555, 20755, 30078, 30211, 46206, 30273, 19842, 19842, 23330, 18555, 25842, 45143,
  /* 11175 */ 30078, 30643, 46206, 25860, 35299, 26674, 20054, 30078, 46204, 28656, 37809, 20368, 43276, 25018, 46587,
  /* 11190 */ 25879, 28635, 28716, 25107, 23491, 33436, 25958, 20376, 25016, 29843, 36447, 23134, 31942, 23996, 33629,
  /* 11205 */ 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 11220 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 11235 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 11250 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20520,
  /* 11265 */ 18555, 19050, 25983, 18555, 30138, 31666, 26002, 18555, 26025, 42371, 26049, 26058, 26074, 26088, 26100,
  /* 11280 */ 26116, 26132, 20287, 18555, 26148, 39585, 26625, 26185, 26266, 21811, 19706, 26294, 26314, 26334, 26371,
  /* 11295 */ 26417, 26433, 26468, 26484, 29984, 26500, 26550, 27995, 35657, 21775, 34399, 24359, 26584, 46888, 18555,
  /* 11310 */ 26619, 26641, 18555, 22350, 18555, 39679, 44600, 26661, 44592, 26692, 26717, 42951, 26754, 26783, 26808,
  /* 11325 */ 26562, 26836, 26863, 32270, 30193, 45855, 26893, 26921, 26938, 26966, 27007, 32356, 43152, 27044, 27060,
  /* 11340 */ 27076, 33016, 40037, 27111, 27088, 27127, 27154, 38096, 27218, 27259, 27275, 27965, 41734, 27303, 40120,
  /* 11355 */ 27319, 27369, 46654, 27385, 18555, 27422, 27443, 42795, 27540, 27575, 27605, 20374, 27621, 30078, 27651,
  /* 11370 */ 44294, 33551, 42564, 23105, 33077, 27680, 24078, 39369, 42293, 29658, 27709, 27725, 20703, 27758, 29002,
  /* 11385 */ 27774, 30431, 40174, 27790, 27829, 27850, 27869, 27885, 45185, 35432, 27901, 31471, 27917, 25757, 27953,
  /* 11400 */ 27981, 26676, 18555, 28011, 18555, 34605, 28048, 25484, 28072, 30213, 28098, 28119, 43696, 27932, 28143,
  /* 11415 */ 23330, 18555, 28167, 44076, 28183, 28214, 28269, 28293, 28331, 25908, 24170, 28382, 28417, 28433, 19526,
  /* 11430 */ 28449, 28465, 44768, 45939, 28505, 29110, 28532, 28550, 30078, 28573, 28590, 42623, 28610, 28632, 28651,
  /* 11445 */ 28673, 20371, 23764, 28689, 20193, 40378, 28711, 28732, 28759, 28775, 28810, 36447, 25658, 28835, 23996,
  /* 11460 */ 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 11475 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 11490 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 11505 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 11520 */ 20520, 18555, 18555, 28881, 18555, 30138, 28902, 28920, 19270, 34728, 28945, 28975, 18555, 28961, 29018,
  /* 11535 */ 29027, 29043, 29059, 20287, 18555, 18555, 29075, 26625, 18555, 18555, 18555, 18555, 18555, 32701, 18555,
  /* 11550 */ 32693, 18555, 32700, 26200, 42236, 19946, 29627, 29095, 29131, 24567, 18555, 29165, 18555, 36904, 29169,
  /* 11565 */ 18555, 18555, 23278, 22198, 29168, 29186, 39679, 35217, 30078, 30078, 43275, 29207, 46206, 46206, 36283,
  /* 11580 */ 46473, 19842, 19842, 35975, 32270, 18555, 18555, 18555, 18555, 18555, 18555, 24581, 18555, 18555, 33649,
  /* 11595 */ 18555, 19659, 30078, 30078, 24602, 30078, 46205, 46206, 46206, 40093, 46206, 19677, 19842, 19842, 25863,
  /* 11610 */ 19842, 25680, 21712, 46654, 18555, 18555, 18555, 18555, 24582, 18555, 35858, 18555, 20374, 30078, 29574,
  /* 11625 */ 30078, 30079, 46206, 46206, 42485, 46206, 28366, 19842, 19842, 29260, 19842, 29115, 25579, 20703, 18555,
  /* 11640 */ 18555, 18555, 18555, 30770, 18847, 30078, 30078, 42979, 43276, 46206, 46206, 43660, 31471, 19842, 19842,
  /* 11655 */ 43615, 28151, 26676, 18555, 18555, 18555, 18555, 28025, 30078, 30078, 30213, 46206, 46206, 43696, 19842,
  /* 11670 */ 19842, 23330, 18555, 18555, 18555, 18555, 20755, 30078, 30211, 46206, 30273, 19842, 19842, 23330, 32621,
  /* 11685 */ 18555, 45143, 42896, 30211, 29231, 29248, 19843, 26674, 20054, 30078, 46204, 28656, 25932, 20368, 43276,
  /* 11700 */ 25018, 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373, 20376, 25016, 29843, 36447, 24773, 29283,
  /* 11715 */ 31243, 29312, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 11730 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 11745 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 11760 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 11775 */ 18555, 20520, 18555, 18555, 18555, 18555, 30138, 18555, 22416, 18555, 18555, 20911, 29343, 29352, 29368,
  /* 11790 */ 29374, 29390, 29406, 29422, 20287, 18555, 18555, 18555, 26625, 18555, 18555, 26645, 18555, 18555, 18555,
  /* 11805 */ 18555, 18555, 18555, 18555, 45144, 30078, 46204, 41439, 19842, 23983, 24567, 29438, 18555, 18555, 36904,
  /* 11820 */ 18555, 18555, 18555, 42744, 18555, 18555, 18555, 39679, 30078, 30078, 30078, 43275, 46206, 46206, 46206,
  /* 11835 */ 35966, 19842, 19842, 19842, 35975, 32270, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 33927, 18555,
  /* 11850 */ 18555, 45677, 29460, 30078, 30078, 30078, 30078, 46205, 46206, 46206, 46206, 46206, 29478, 19842, 19842,
  /* 11865 */ 19842, 19842, 25680, 35471, 18555, 18555, 41125, 18555, 35850, 27584, 18555, 18555, 27589, 20374, 30078,
  /* 11880 */ 40277, 30078, 30079, 46206, 46206, 26731, 46206, 28366, 19842, 19842, 28789, 19842, 29115, 39564, 18555,
  /* 11895 */ 18555, 38671, 18555, 18555, 18555, 45555, 30078, 30078, 30078, 43276, 46206, 46206, 46206, 44988, 19842,
  /* 11910 */ 19842, 19842, 28151, 26676, 18555, 21944, 34588, 18555, 20371, 30078, 39124, 30213, 46206, 41603, 23578,
  /* 11925 */ 19842, 43092, 23330, 22027, 29496, 29543, 18555, 29571, 29590, 29618, 46308, 29643, 39142, 36177, 29679,
  /* 11940 */ 34787, 40545, 29706, 39966, 29744, 29778, 29814, 29835, 26674, 29859, 28082, 42533, 29901, 29936, 20368,
  /* 11955 */ 43276, 25018, 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373, 20376, 25016, 29843, 36447, 23134,
  /* 11970 */ 31942, 29971, 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 11985 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 12000 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 12015 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 12030 */ 18555, 18555, 20520, 18555, 18555, 18555, 18555, 30138, 18555, 18555, 18555, 18555, 20736, 18555, 18555,
  /* 12045 */ 18555, 18555, 34655, 21683, 33128, 20287, 25160, 18555, 18555, 30000, 18555, 18555, 18555, 30060, 18555,
  /* 12060 */ 30061, 18555, 18555, 30041, 30057, 45144, 30077, 30095, 31161, 34822, 35326, 30117, 18555, 18555, 32376,
  /* 12075 */ 36904, 27488, 22779, 18555, 18555, 32894, 18555, 18555, 39679, 30078, 30078, 24704, 43275, 46206, 46206,
  /* 12090 */ 35747, 35966, 19842, 19842, 32201, 35975, 32270, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 12105 */ 18555, 30154, 30172, 19659, 30078, 30078, 30078, 46446, 46205, 46206, 46206, 46206, 41399, 19677, 19842,
  /* 12120 */ 19842, 19842, 46412, 25680, 35471, 18555, 30190, 18555, 18555, 18555, 18555, 18555, 18555, 43821, 43840,
  /* 12135 */ 30078, 30078, 30078, 30079, 33964, 46206, 46206, 46206, 28366, 45807, 19842, 19842, 19842, 29115, 23993,
  /* 12150 */ 18555, 18555, 46170, 18555, 18555, 18555, 45555, 30078, 30078, 30078, 30209, 46206, 46206, 42999, 44988,
  /* 12165 */ 19842, 19842, 30716, 28151, 26676, 18555, 36045, 18555, 18555, 20371, 30078, 30078, 30213, 46206, 46206,
  /* 12180 */ 23578, 19842, 19842, 23330, 18555, 18555, 18555, 18555, 20755, 30078, 30211, 46206, 30273, 19842, 19842,
  /* 12195 */ 23330, 18555, 30229, 37703, 30078, 30211, 46206, 28657, 19843, 30248, 21170, 30078, 30271, 30289, 31214,
  /* 12210 */ 20368, 43276, 25018, 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373, 20376, 25016, 29843, 36447,
  /* 12225 */ 23134, 31942, 23996, 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 12240 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 12255 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 12270 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 12285 */ 18555, 18555, 18555, 20520, 18555, 18555, 42401, 18555, 30138, 21622, 23672, 32227, 34358, 34368, 30309,
  /* 12300 */ 30318, 30334, 30349, 30361, 30377, 30393, 20287, 18555, 18555, 18555, 46056, 39614, 18555, 18555, 24620,
  /* 12315 */ 30409, 40563, 30430, 38891, 30447, 30463, 21416, 30479, 30499, 31814, 28594, 26250, 30524, 18555, 18555,
  /* 12330 */ 18555, 30561, 18555, 19165, 18555, 18555, 18555, 33186, 30596, 39679, 24035, 30633, 30790, 42524, 33047,
  /* 12345 */ 30667, 33772, 30688, 31594, 30713, 26820, 30732, 32270, 18555, 38754, 31490, 24013, 41625, 20787, 18555,
  /* 12360 */ 30762, 34135, 34098, 18555, 19659, 30786, 27853, 30806, 30851, 46205, 30885, 22869, 30904, 30937, 19677,
  /* 12375 */ 32748, 25037, 30994, 31021, 26239, 35471, 18555, 18555, 18555, 27028, 31071, 31106, 35191, 18555, 18555,
  /* 12390 */ 28819, 31125, 30078, 35236, 37743, 31146, 46206, 46206, 41009, 44325, 31201, 19842, 19842, 29913, 42708,
  /* 12405 */ 31240, 18555, 37855, 31259, 31312, 31353, 31388, 31416, 30078, 38453, 31432, 31460, 46206, 31506, 28345,
  /* 12420 */ 31522, 19842, 31556, 31579, 31630, 30970, 31660, 31682, 31703, 22553, 45085, 37761, 31733, 31762, 35012,
  /* 12435 */ 31799, 40257, 31849, 31830, 23330, 31865, 18555, 34045, 31886, 29296, 39050, 23793, 31910, 31933, 31958,
  /* 12450 */ 31614, 23330, 38719, 36668, 45143, 30078, 30211, 46206, 28657, 19843, 28253, 20054, 31994, 27195, 32051,
  /* 12465 */ 32075, 32101, 43276, 25018, 46587, 32146, 32170, 32186, 32221, 43272, 25016, 36373, 20376, 25016, 29843,
  /* 12480 */ 32243, 32259, 31942, 23996, 26877, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 12495 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 12510 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 12525 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 12540 */ 18555, 18555, 18555, 18555, 20520, 18555, 18555, 31287, 18555, 30138, 18555, 18555, 18555, 18555, 20736,
  /* 12555 */ 22545, 18299, 31295, 19878, 34655, 32286, 32338, 20287, 18555, 18555, 18555, 26625, 18555, 18555, 18555,
  /* 12570 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 45144, 30078, 46204, 41439, 19842, 23983, 24567, 18555,
  /* 12585 */ 18555, 18555, 36904, 18555, 18555, 18555, 18555, 41072, 18555, 18555, 39679, 30078, 30078, 30078, 43275,
  /* 12600 */ 46206, 46206, 46206, 35966, 19842, 19842, 19842, 35280, 32270, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 12615 */ 18555, 18555, 18555, 18555, 18555, 19659, 30078, 30078, 30078, 30078, 46205, 46206, 46206, 46206, 46206,
  /* 12630 */ 19677, 19842, 19842, 19842, 19842, 25680, 35471, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 12645 */ 18555, 20374, 30078, 30078, 30078, 30079, 46206, 46206, 46206, 46206, 28366, 19842, 19842, 19842, 19842,
  /* 12660 */ 29115, 23993, 18555, 18555, 18555, 18555, 18555, 18555, 45555, 30078, 30078, 30078, 43276, 46206, 46206,
  /* 12675 */ 46206, 44988, 19842, 19842, 19842, 28151, 26676, 18555, 18555, 18555, 18555, 20371, 30078, 30078, 30213,
  /* 12690 */ 46206, 46206, 23578, 19842, 19842, 23330, 18555, 18555, 18555, 18555, 20755, 30078, 30211, 46206, 30273,
  /* 12705 */ 19842, 19842, 23330, 18555, 18555, 45143, 30078, 30211, 46206, 28657, 19843, 26674, 20054, 30078, 46204,
  /* 12720 */ 28656, 25932, 20368, 43276, 25018, 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373, 20376, 25016,
  /* 12735 */ 29843, 36447, 23134, 31942, 23996, 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 12750 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 12765 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 12780 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 12795 */ 18555, 18555, 18555, 18555, 18555, 20520, 18555, 18555, 20214, 18555, 30138, 18555, 18555, 18555, 18555,
  /* 12810 */ 20736, 18555, 18555, 18555, 18555, 34655, 21683, 33128, 20287, 18555, 18555, 18555, 26625, 18555, 18555,
  /* 12825 */ 32354, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 45144, 30078, 46204, 41439, 19842, 23983, 24567,
  /* 12840 */ 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 39679, 30078, 30078, 30078,
  /* 12855 */ 43275, 46206, 46206, 46206, 35966, 19842, 19842, 19842, 35975, 32270, 18555, 18555, 18555, 18555, 18555,
  /* 12870 */ 18555, 18555, 18555, 18555, 18555, 18555, 19659, 30078, 30078, 30078, 30078, 46205, 46206, 46206, 46206,
  /* 12885 */ 46206, 19677, 19842, 19842, 19842, 19842, 25680, 35471, 18555, 32372, 18555, 18555, 18555, 18555, 18555,
  /* 12900 */ 18555, 18555, 40439, 30078, 30078, 30078, 30079, 46300, 46206, 46206, 46206, 28366, 31607, 19842, 19842,
  /* 12915 */ 19842, 29115, 23993, 18555, 18555, 18555, 18555, 18555, 18555, 45555, 30078, 30078, 30078, 43276, 46206,
  /* 12930 */ 46206, 46206, 44988, 19842, 19842, 19842, 28151, 26676, 18555, 18555, 18555, 18555, 20371, 30078, 30078,
  /* 12945 */ 30213, 46206, 46206, 23578, 19842, 19842, 23330, 18555, 18555, 18555, 18555, 20755, 30078, 30211, 46206,
  /* 12960 */ 30273, 19842, 19842, 23330, 18555, 18555, 45143, 30078, 30211, 46206, 28657, 19843, 26674, 20054, 30078,
  /* 12975 */ 46204, 28656, 25932, 20368, 43276, 25018, 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373, 20376,
  /* 12990 */ 25016, 29843, 36447, 23134, 31942, 23996, 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 13005 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 13020 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 13035 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 13050 */ 18555, 18555, 18555, 18555, 18555, 18555, 20520, 18555, 18555, 24814, 18555, 30138, 18555, 36402, 18555,
  /* 13065 */ 45271, 32392, 32430, 32443, 32459, 32465, 32481, 32497, 32513, 20287, 18555, 32529, 18555, 26625, 18555,
  /* 13080 */ 39200, 25138, 18555, 18555, 32549, 18555, 19804, 23213, 32570, 32592, 32644, 23521, 32718, 43735, 32768,
  /* 13095 */ 32607, 32815, 18555, 18555, 32855, 18555, 18555, 32890, 32407, 18555, 32910, 32930, 32946, 32962, 30863,
  /* 13110 */ 33004, 27813, 29754, 33032, 29791, 33100, 38644, 32205, 19783, 24193, 33144, 18555, 33182, 18555, 18555,
  /* 13125 */ 18555, 25326, 18555, 18555, 18555, 18555, 18555, 33202, 33247, 33267, 44123, 24916, 25894, 33285, 33304,
  /* 13140 */ 38183, 23603, 33321, 33336, 33356, 43727, 29480, 25680, 35471, 18555, 18555, 33374, 18555, 32554, 36688,
  /* 13155 */ 18555, 18555, 18555, 20374, 30078, 25720, 38553, 33401, 46206, 46206, 42959, 33422, 28366, 19842, 19842,
  /* 13170 */ 43439, 33459, 29115, 23993, 18555, 33494, 18555, 42409, 18555, 18555, 45555, 41163, 30078, 30078, 43276,
  /* 13185 */ 38615, 46206, 46206, 44988, 28794, 19842, 19842, 28151, 28534, 35807, 18555, 29873, 41234, 34329, 39960,
  /* 13200 */ 30078, 33511, 33547, 46206, 33567, 33596, 19842, 33616, 18555, 33645, 19447, 18555, 20755, 33665, 30211,
  /* 13215 */ 44807, 30273, 41214, 19842, 23330, 18555, 33685, 45143, 30078, 46198, 46206, 33705, 43072, 26674, 20054,
  /* 13230 */ 30078, 46204, 28656, 25932, 20368, 43276, 25018, 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373,
  /* 13245 */ 36426, 33724, 33748, 22823, 23134, 36124, 32975, 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 13260 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 13275 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 13290 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 13305 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20520, 18555, 18555, 18379, 18555, 30138, 18555, 18795,
  /* 13320 */ 18555, 18555, 40823, 33788, 33797, 33813, 33827, 33836, 33852, 33868, 21832, 18555, 21352, 18555, 26625,
  /* 13335 */ 18555, 26298, 18555, 18555, 18555, 21352, 18555, 20347, 37195, 21351, 20352, 33884, 38578, 22894, 33906,
  /* 13350 */ 23983, 24567, 18555, 18555, 33924, 36904, 18555, 26444, 27506, 18555, 20301, 18555, 30572, 24293, 19825,
  /* 13365 */ 30078, 33943, 33980, 30914, 20010, 19990, 35966, 41476, 23584, 25809, 26792, 33999, 34061, 28886, 34096,
  /* 13380 */ 34114, 18555, 18555, 18555, 18555, 34132, 18555, 18555, 34151, 23068, 33890, 30078, 30078, 43874, 37523,
  /* 13395 */ 33531, 46206, 46206, 34167, 37078, 28695, 19842, 19842, 25680, 35471, 18555, 31687, 31870, 18555, 32702,
  /* 13410 */ 29170, 34183, 34199, 18555, 34220, 35574, 30078, 38464, 30079, 46206, 34239, 46206, 34262, 31917, 35449,
  /* 13425 */ 28396, 33358, 42289, 29115, 23993, 18555, 18555, 18555, 18555, 18555, 18555, 45555, 30078, 30078, 30078,
  /* 13440 */ 43276, 46206, 46206, 46206, 44988, 19842, 19842, 19842, 28151, 26676, 18555, 18555, 18555, 18555, 20371,
  /* 13455 */ 30078, 30078, 30213, 46206, 46206, 23578, 19842, 19842, 23330, 30131, 18555, 18555, 18555, 46075, 30078,
  /* 13470 */ 30211, 34285, 30273, 31563, 19842, 23330, 18555, 18555, 34305, 30078, 30211, 46206, 28657, 45062, 26674,
  /* 13485 */ 20054, 30078, 46204, 28656, 25932, 34326, 44948, 28127, 45538, 41583, 40385, 23736, 36376, 43272, 25016,
  /* 13500 */ 36373, 20376, 25016, 29843, 36447, 22614, 31942, 23996, 33629, 20118, 18555, 18555, 18555, 18555, 18555,
  /* 13515 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 13530 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 13545 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 13560 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20520, 18555, 18555, 18713, 18555, 35103, 18555,
  /* 13575 */ 19594, 34345, 27406, 34384, 34438, 34477, 34463, 34482, 34447, 34498, 34514, 20287, 18555, 21594, 34530,
  /* 13590 */ 34551, 34683, 23207, 18555, 34587, 34604, 34621, 34671, 29327, 46777, 34699, 26386, 34750, 27635, 34803,
  /* 13605 */ 34838, 34873, 24567, 25344, 34907, 18555, 23257, 22508, 34925, 19556, 34014, 34946, 22333, 34964, 34992,
  /* 13620 */ 45325, 23060, 28277, 43275, 35779, 35008, 35028, 35966, 42652, 35048, 35065, 37318, 35083, 28904, 18555,
  /* 13635 */ 35119, 35138, 18555, 18555, 30174, 18555, 35167, 18555, 35188, 35207, 35233, 30078, 30078, 30078, 28480,
  /* 13650 */ 35252, 46206, 46206, 46206, 35270, 35296, 19842, 19842, 19842, 35315, 35471, 18555, 18555, 18555, 18555,
  /* 13665 */ 35353, 18555, 35371, 35671, 35390, 44583, 30078, 30078, 35408, 44761, 35428, 46206, 30888, 46361, 28366,
  /* 13680 */ 35448, 19842, 27937, 33708, 29115, 35465, 38519, 35487, 35514, 35535, 41301, 42169, 35555, 39008, 35590,
  /* 13695 */ 35642, 43276, 35694, 35732, 35769, 44988, 37362, 43477, 37788, 28151, 35802, 35823, 40755, 35839, 35874,
  /* 13710 */ 37819, 40874, 43303, 35929, 43936, 35952, 35991, 45210, 37348, 36014, 39450, 36043, 18555, 31717, 38235,
  /* 13725 */ 36061, 40332, 35753, 36115, 36140, 36157, 23330, 36193, 18555, 36217, 36241, 36269, 36299, 36327, 36366,
  /* 13740 */ 32657, 36392, 37465, 26701, 33443, 25932, 36418, 36442, 36463, 36484, 24952, 36500, 36548, 36592, 28032,
  /* 13755 */ 29215, 43027, 20376, 25016, 29843, 36447, 27182, 36608, 23996, 36027, 36644, 18555, 18555, 18555, 18555,
  /* 13770 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 13785 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 13800 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 13815 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20520, 18555, 18555, 18555, 36663, 30138,
  /* 13830 */ 18555, 45262, 36684, 18555, 20271, 36704, 36713, 36729, 36743, 36752, 36768, 36784, 20287, 36800, 21816,
  /* 13845 */ 36816, 36991, 25169, 36850, 18555, 36884, 25375, 36920, 28198, 36936, 36962, 36978, 37028, 37044, 32988,
  /* 13860 */ 37094, 37110, 31644, 37143, 18555, 40952, 37180, 44877, 18555, 37211, 37189, 37230, 27524, 18555, 31090,
  /* 13875 */ 39679, 30078, 28056, 37828, 42933, 46206, 37266, 37293, 35966, 19842, 37309, 37334, 27287, 32270, 18555,
  /* 13890 */ 22796, 37378, 18555, 37395, 22235, 37413, 29191, 30414, 45399, 21563, 37448, 31130, 37481, 30078, 40004,
  /* 13905 */ 33763, 43911, 37514, 46206, 40066, 37547, 25088, 37572, 19842, 43996, 25680, 37645, 37682, 18555, 37698,
  /* 13920 */ 37719, 18555, 18555, 18555, 18555, 28984, 20374, 30078, 37738, 37759, 30079, 46206, 19612, 30672, 46206,
  /* 13935 */ 28366, 19842, 33600, 40127, 19842, 29115, 23993, 18555, 18555, 42809, 35172, 18555, 18555, 39717, 30078,
  /* 13950 */ 30078, 30078, 30835, 46206, 46206, 46206, 37777, 19842, 19842, 19842, 36562, 26676, 37844, 18555, 18555,
  /* 13965 */ 18555, 37871, 30078, 37897, 32121, 25738, 46206, 37070, 37950, 19842, 23330, 37914, 18555, 18555, 18555,
  /* 13980 */ 27803, 40867, 33983, 42593, 30273, 31970, 37948, 23330, 37966, 18555, 45143, 30078, 30211, 46206, 28657,
  /* 13995 */ 19843, 28227, 20054, 37985, 38058, 38008, 23386, 38044, 38083, 38112, 39338, 38128, 38170, 38206, 36376,
  /* 14010 */ 43272, 25016, 36373, 20376, 25016, 29843, 36447, 31174, 38222, 23996, 44033, 20118, 18555, 18555, 18555,
  /* 14025 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 14040 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 14055 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 14070 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20520, 18555, 18555, 18555, 42846,
  /* 14085 */ 30138, 18555, 18555, 38256, 21604, 38278, 38315, 18555, 19345, 38339, 38351, 38367, 38383, 20287, 18555,
  /* 14100 */ 18555, 44501, 26625, 18555, 18555, 18555, 38399, 23352, 18555, 18555, 37004, 44499, 18555, 45144, 37498,
  /* 14115 */ 41663, 38417, 31044, 38441, 24567, 18555, 38491, 18555, 36904, 18555, 20623, 38480, 18555, 38515, 18555,
  /* 14130 */ 21890, 39679, 23550, 38535, 32154, 38569, 39509, 35709, 38594, 35966, 43429, 31845, 38631, 30697, 31185,
  /* 14145 */ 38660, 18555, 38695, 38716, 24536, 38401, 43163, 18555, 18555, 18555, 18555, 19659, 30078, 45164, 30078,
  /* 14160 */ 30078, 46205, 46206, 45513, 46206, 46206, 19677, 19842, 43971, 19842, 19842, 25680, 38735, 38770, 26922,
  /* 14175 */ 18555, 18555, 36201, 21374, 38806, 35374, 18555, 38824, 30078, 38843, 30078, 30079, 46206, 28103, 38867,
  /* 14190 */ 46206, 27202, 19842, 46250, 19842, 19842, 29115, 23993, 18555, 38885, 18555, 18555, 18555, 38907, 34535,
  /* 14205 */ 30078, 30078, 38925, 43276, 46206, 33288, 46206, 30948, 19842, 35067, 19842, 28151, 26676, 18555, 18555,
  /* 14220 */ 18555, 18555, 20371, 30078, 30078, 30213, 46206, 46206, 23578, 19842, 19842, 23330, 18555, 41254, 18555,
  /* 14235 */ 18555, 38944, 30078, 30211, 46206, 30273, 19842, 19842, 28516, 18555, 18555, 45143, 30078, 30211, 46206,
  /* 14250 */ 28657, 19843, 26674, 20054, 30078, 46204, 28656, 27243, 38962, 34891, 31783, 46587, 39000, 30212, 28654,
  /* 14265 */ 36376, 43272, 25016, 36373, 20376, 25016, 29843, 36447, 23134, 31942, 23996, 33629, 20118, 18555, 18555,
  /* 14280 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 14295 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 14310 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 14325 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20520, 18555, 18555, 18555,
  /* 14340 */ 18555, 30138, 18555, 18555, 18555, 18555, 20736, 18555, 18555, 18555, 18555, 34655, 21683, 33128, 20287,
  /* 14355 */ 18555, 18555, 18555, 26625, 18555, 18555, 29079, 18555, 18555, 18555, 39028, 39031, 37666, 39024, 40432,
  /* 14370 */ 39047, 39066, 25783, 23650, 23983, 24567, 39100, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555,
  /* 14385 */ 18555, 18555, 39679, 30078, 30078, 30078, 43275, 46206, 46206, 46206, 35966, 19842, 19842, 19842, 35975,
  /* 14400 */ 32270, 18555, 18555, 18555, 20571, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 39122, 30078, 30078,
  /* 14415 */ 30078, 30078, 46205, 46206, 46206, 46206, 46206, 39140, 19842, 19842, 19842, 19842, 25680, 35471, 18555,
  /* 14430 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20374, 30078, 30078, 30078, 30079, 46206, 46206,
  /* 14445 */ 46206, 46206, 28366, 19842, 19842, 19842, 19842, 29115, 23993, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 14460 */ 45555, 30078, 30078, 30078, 43276, 46206, 46206, 46206, 44988, 19842, 19842, 19842, 28151, 26676, 18555,
  /* 14475 */ 18555, 18555, 18555, 20371, 30078, 30078, 30213, 46206, 46206, 23578, 19842, 19842, 23330, 18555, 18555,
  /* 14490 */ 18555, 18555, 20755, 30078, 30211, 46206, 30273, 19842, 19842, 23330, 18555, 18555, 45143, 42207, 30211,
  /* 14505 */ 39158, 33732, 19843, 26674, 20054, 30078, 46204, 28656, 25932, 20368, 43276, 25018, 46587, 20371, 30212,
  /* 14520 */ 28654, 36376, 43272, 25016, 36373, 20376, 25016, 29843, 36447, 23134, 31942, 23996, 33629, 20118, 18555,
  /* 14535 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 14550 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 14565 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 14580 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20520, 18555, 18555,
  /* 14595 */ 18555, 34027, 35678, 18555, 18555, 34564, 18555, 46666, 39179, 25702, 39216, 39229, 39238, 39254, 39270,
  /* 14610 */ 20287, 18555, 35096, 25388, 26625, 46728, 39286, 39307, 40903, 37629, 36897, 34412, 34422, 26979, 32085,
  /* 14625 */ 21395, 44927, 41883, 39326, 39354, 39391, 36076, 18555, 18555, 18555, 23886, 39407, 39429, 46496, 25613,
  /* 14640 */ 39445, 18555, 25844, 39466, 30078, 42200, 37881, 42467, 46207, 39482, 39499, 39525, 24212, 35049, 44841,
  /* 14655 */ 39550, 39601, 18555, 18555, 18555, 30232, 39637, 39657, 18555, 39677, 39695, 39640, 39713, 39733, 33251,
  /* 14670 */ 30078, 33669, 39756, 29721, 24056, 46206, 24744, 39084, 39798, 30293, 19842, 32752, 39822, 25680, 35471,
  /* 14685 */ 18555, 18555, 39852, 35498, 39878, 18555, 28929, 39908, 39920, 39948, 30078, 39982, 40028, 29462, 41847,
  /* 14700 */ 34289, 40053, 40089, 42572, 34853, 26534, 40109, 40143, 44373, 23993, 45577, 18555, 34948, 40160, 40197,
  /* 14715 */ 31296, 34647, 27095, 33269, 30078, 43276, 40219, 40073, 46206, 44988, 31033, 31540, 19842, 45815, 38977,
  /* 14730 */ 43036, 36825, 18555, 18555, 34310, 30078, 30078, 40245, 46206, 43400, 26227, 19842, 41197, 23330, 18555,
  /* 14745 */ 30538, 18555, 18555, 40273, 30078, 28865, 46206, 35254, 19842, 19842, 31005, 18555, 40293, 45143, 30078,
  /* 14760 */ 30211, 46206, 28657, 19843, 26674, 20054, 30078, 46204, 28656, 38028, 40310, 45023, 45363, 46543, 20371,
  /* 14775 */ 30212, 28654, 44999, 40326, 40348, 41447, 20376, 25016, 29843, 36447, 27693, 40364, 24649, 33629, 20118,
  /* 14790 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 14805 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 14820 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 14835 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20520, 18555,
  /* 14850 */ 18555, 18555, 26009, 30138, 40401, 33231, 40418, 40455, 40484, 40536, 40468, 40606, 40620, 40632, 40648,
  /* 14865 */ 40664, 20287, 40680, 20599, 18555, 40698, 18555, 18555, 37164, 18555, 20708, 40734, 40751, 40771, 21141,
  /* 14880 */ 40778, 40794, 44941, 35604, 30508, 40839, 40855, 24567, 22535, 44870, 23877, 36904, 40890, 18555, 18555,
  /* 14895 */ 18555, 18555, 40919, 40968, 18446, 29602, 27834, 30078, 43275, 40989, 41000, 46206, 43383, 41033, 44188,
  /* 14910 */ 19842, 35975, 32270, 18555, 41066, 18555, 40514, 41088, 41124, 18555, 18555, 18555, 18555, 41141, 19659,
  /* 14925 */ 41162, 41179, 30078, 35412, 28574, 25530, 46206, 46206, 24874, 19677, 41196, 41213, 19842, 33340, 22653,
  /* 14940 */ 35471, 18555, 18555, 41230, 41250, 18555, 43164, 41270, 41290, 36647, 41317, 30078, 37898, 41341, 41376,
  /* 14955 */ 41397, 46206, 35936, 41415, 33084, 19842, 19842, 44832, 41463, 29115, 21696, 41497, 41519, 34930, 18555,
  /* 14970 */ 18555, 41539, 41576, 30078, 41180, 30827, 43276, 46206, 30101, 41599, 44988, 19842, 29819, 43967, 28151,
  /* 14985 */ 26676, 18555, 41619, 31894, 43191, 37424, 41700, 43579, 30213, 35716, 31776, 43607, 29920, 46387, 23330,
  /* 15000 */ 18555, 18555, 41641, 43532, 20755, 30078, 30211, 46206, 30273, 19842, 19842, 22921, 20326, 32829, 28240,
  /* 15015 */ 30078, 41657, 38869, 28657, 43446, 38142, 41679, 41695, 33957, 41716, 37592, 20368, 41750, 41774, 41795,
  /* 15030 */ 20371, 30212, 28654, 36376, 41832, 45044, 36373, 41870, 42493, 23824, 41899, 23134, 31942, 23996, 33629,
  /* 15045 */ 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 15060 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 15075 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 15090 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20520,
  /* 15105 */ 18555, 18555, 18555, 20396, 30138, 18555, 18555, 36946, 18555, 41930, 32023, 32035, 41976, 41992, 42004,
  /* 15120 */ 42020, 42036, 20287, 42052, 32839, 20121, 26625, 22229, 37611, 42071, 37620, 32684, 42081, 42105, 42114,
  /* 15135 */ 42130, 42158, 42185, 42223, 37058, 42258, 42274, 42309, 32783, 39106, 21482, 34636, 30545, 18555, 18555,
  /* 15150 */ 20986, 42357, 34714, 42387, 42425, 42441, 42457, 42509, 42324, 24121, 42549, 26767, 42588, 42609, 42639,
  /* 15165 */ 19769, 42673, 42693, 22625, 42724, 20557, 18555, 42760, 42780, 41554, 18555, 32874, 18555, 42832, 42868,
  /* 15180 */ 42884, 42918, 40012, 30078, 42975, 26401, 34246, 38067, 46206, 42995, 43015, 43052, 31978, 19842, 43088,
  /* 15195 */ 23631, 43108, 18555, 34779, 34072, 43137, 18555, 43180, 43215, 18555, 43232, 43268, 43292, 43319, 46429,
  /* 15210 */ 43342, 24723, 43369, 43399, 46098, 43416, 29663, 43462, 19842, 46123, 29115, 23993, 28993, 43493, 39661,
  /* 15225 */ 40933, 18555, 43512, 43548, 43571, 39782, 44287, 43595, 43631, 43651, 43684, 19957, 43067, 43718, 43751,
  /* 15240 */ 36350, 29690, 43780, 43797, 36834, 43815, 43837, 43856, 30078, 43890, 43927, 46206, 43952, 43987, 19842,
  /* 15255 */ 44020, 18555, 44049, 44073, 44092, 36621, 44114, 44147, 33062, 29728, 44175, 39836, 23330, 44212, 18555,
  /* 15270 */ 44247, 44273, 44310, 23529, 44363, 44389, 31746, 44416, 44446, 45354, 44462, 44489, 20368, 43276, 25018,
  /* 15285 */ 46587, 20371, 30212, 28654, 36376, 43272, 25016, 46395, 44257, 44517, 31055, 44562, 44616, 31942, 23996,
  /* 15300 */ 30746, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 15315 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 15330 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 15345 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 15360 */ 20520, 18555, 18555, 18555, 18555, 44643, 18555, 18555, 44679, 18555, 29555, 18330, 18339, 44699, 18339,
  /* 15375 */ 18348, 44715, 44731, 20287, 18555, 18555, 18555, 34734, 18555, 22131, 18555, 18555, 18555, 18555, 22128,
  /* 15390 */ 18555, 38783, 18555, 45144, 44747, 42942, 44784, 28315, 35337, 32009, 23868, 18555, 18555, 36904, 18555,
  /* 15405 */ 18555, 40203, 19570, 18555, 18555, 18555, 19573, 29955, 30078, 30078, 29149, 44800, 46206, 46206, 36515,
  /* 15420 */ 44823, 19842, 19842, 32733, 32270, 44857, 18555, 40499, 27470, 18555, 18555, 25826, 21860, 44893, 18555,
  /* 15435 */ 22409, 19659, 37457, 44913, 38851, 25513, 46205, 33524, 44964, 39075, 34269, 19677, 41725, 26514, 38425,
  /* 15450 */ 43702, 25558, 35471, 18555, 33689, 34116, 18555, 18555, 18555, 26033, 18555, 18555, 45015, 42341, 30078,
  /* 15465 */ 30078, 30079, 46206, 45039, 46206, 46206, 26738, 19842, 45060, 19842, 19842, 29115, 23993, 27399, 34909,
  /* 15480 */ 18555, 18555, 18555, 18555, 45078, 45101, 30078, 30078, 33406, 46206, 46206, 46206, 27138, 19842, 19842,
  /* 15495 */ 19842, 28151, 23341, 18555, 18555, 45121, 45140, 43555, 45160, 30078, 23143, 45180, 46206, 36311, 45201,
  /* 15510 */ 19842, 30959, 37379, 18555, 18555, 18555, 20755, 30078, 30211, 46206, 30273, 19842, 19842, 23330, 18555,
  /* 15525 */ 18555, 45143, 30078, 30211, 46206, 28657, 19843, 26674, 20054, 39740, 41758, 41779, 25932, 20368, 43276,
  /* 15540 */ 25018, 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373, 45226, 41854, 44574, 36447, 23134, 45305,
  /* 15555 */ 45341, 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 15570 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 15585 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 15600 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 15615 */ 18555, 20520, 18555, 18555, 18555, 18555, 45379, 45438, 35151, 45415, 18555, 26950, 18555, 35148, 45435,
  /* 15630 */ 18508, 22445, 45457, 45473, 20287, 18555, 18555, 18555, 26625, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 15645 */ 18555, 18555, 18555, 18555, 45144, 45489, 42476, 23303, 19842, 23983, 24567, 18555, 21531, 22048, 36904,
  /* 15660 */ 18555, 18555, 18555, 18555, 18555, 21514, 18555, 39679, 45492, 30078, 44131, 43275, 43668, 46206, 45508,
  /* 15675 */ 35966, 33111, 19842, 45529, 35975, 32270, 18555, 18555, 18555, 18555, 18555, 18555, 45554, 18555, 18555,
  /* 15690 */ 45571, 18555, 19659, 30078, 39995, 30078, 30078, 46205, 46206, 45593, 46206, 46206, 19677, 19842, 44338,
  /* 15705 */ 19842, 19842, 25680, 35471, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20374, 30078,
  /* 15720 */ 30078, 30078, 30079, 46206, 46206, 46206, 46206, 28366, 19842, 19842, 19842, 19842, 29115, 23993, 18555,
  /* 15735 */ 18555, 18555, 18555, 18555, 18555, 45555, 30078, 30078, 30078, 43276, 46206, 46206, 46206, 44988, 19842,
  /* 15750 */ 19842, 19842, 28151, 26676, 18555, 39578, 18555, 18555, 20371, 30078, 30078, 30213, 46206, 46206, 23578,
  /* 15765 */ 19842, 19842, 23330, 18555, 34036, 18555, 18555, 20755, 30078, 30211, 46206, 30273, 19842, 19842, 23330,
  /* 15780 */ 18555, 18555, 45143, 30078, 30211, 46206, 28657, 19843, 27664, 45614, 30078, 46204, 28656, 25932, 20368,
  /* 15795 */ 43276, 25018, 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373, 20376, 25016, 29843, 36447, 23134,
  /* 15810 */ 31942, 23996, 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 15825 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 15840 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 15855 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 15870 */ 18555, 18555, 20520, 18555, 18555, 18555, 18555, 45634, 18555, 19723, 18555, 40181, 45662, 45699, 18555,
  /* 15885 */ 45724, 45738, 45750, 45766, 45782, 20287, 18555, 18555, 18555, 26625, 18555, 18555, 18555, 18555, 18555,
  /* 15900 */ 18555, 18555, 18555, 18555, 18555, 45144, 30483, 46204, 45798, 44004, 36576, 33217, 18555, 18555, 18555,
  /* 15915 */ 36904, 18555, 18555, 18555, 18555, 45831, 18555, 18555, 39679, 30078, 30078, 30078, 43275, 46206, 46206,
  /* 15930 */ 46206, 35966, 19842, 19842, 19842, 35975, 32270, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 15945 */ 18555, 18555, 18555, 19659, 30078, 30078, 30078, 30078, 46205, 46206, 46206, 46206, 46206, 19677, 19842,
  /* 15960 */ 19842, 19842, 19842, 25680, 35471, 18555, 18555, 18555, 18555, 18555, 45851, 18555, 18555, 18555, 35565,
  /* 15975 */ 30078, 30078, 30078, 30079, 45871, 46206, 46206, 46206, 23771, 19842, 19842, 19842, 19842, 29115, 23993,
  /* 15990 */ 18555, 18555, 45888, 18555, 18555, 18555, 45555, 30078, 41325, 30078, 45908, 46206, 45932, 24139, 44988,
  /* 16005 */ 19842, 36341, 36141, 28151, 26676, 18555, 18555, 18555, 18555, 20371, 30078, 30078, 30213, 46206, 46206,
  /* 16020 */ 23578, 19842, 19842, 23330, 18555, 18555, 18555, 18555, 20755, 30078, 30211, 46206, 30273, 19842, 19842,
  /* 16035 */ 23330, 18555, 18555, 45143, 30078, 30211, 46206, 28657, 19843, 26674, 20054, 30078, 46204, 28656, 25932,
  /* 16050 */ 20368, 43276, 25018, 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373, 20376, 25016, 29843, 36447,
  /* 16065 */ 23134, 31942, 23996, 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16080 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16095 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16110 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16125 */ 18555, 18555, 18555, 21477, 18555, 18555, 18555, 18555, 30138, 18555, 18555, 18555, 18555, 20736, 18555,
  /* 16140 */ 18555, 18555, 18555, 23445, 45955, 45971, 20287, 18555, 18555, 18555, 26625, 45987, 19916, 18555, 18555,
  /* 16155 */ 18555, 18555, 27559, 18555, 42852, 27555, 43245, 46008, 46291, 32130, 19842, 23983, 24567, 18555, 18555,
  /* 16170 */ 21754, 36904, 24833, 45441, 26595, 18555, 18555, 18555, 18555, 39679, 30078, 46011, 30078, 46027, 46206,
  /* 16185 */ 29762, 19899, 35966, 19842, 36168, 33478, 35975, 44627, 46046, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16200 */ 18555, 18555, 18555, 18555, 19659, 30078, 30078, 30078, 30078, 46205, 46206, 46206, 46206, 46206, 19677,
  /* 16215 */ 19842, 19842, 19842, 19842, 25680, 35471, 18555, 18555, 18555, 18555, 18555, 26347, 18555, 18555, 18555,
  /* 16230 */ 46072, 30078, 43326, 30078, 30079, 46206, 46206, 46091, 46206, 38190, 19842, 19842, 46114, 19842, 29115,
  /* 16245 */ 23993, 37214, 18555, 18555, 18555, 18555, 18555, 45555, 42902, 30078, 30078, 43276, 46139, 46206, 46206,
  /* 16260 */ 44988, 46233, 19842, 19842, 28151, 26676, 18555, 18555, 18555, 18555, 20371, 30078, 30078, 30213, 46206,
  /* 16275 */ 46206, 23578, 19842, 19842, 23330, 18555, 18555, 18555, 18555, 20755, 30078, 30211, 46206, 30273, 19842,
  /* 16290 */ 19842, 23330, 18555, 18555, 45143, 30078, 30211, 46206, 28657, 19843, 26674, 20054, 30078, 46204, 28656,
  /* 16305 */ 25932, 20368, 43276, 25018, 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373, 20376, 25016, 29843,
  /* 16320 */ 36447, 23134, 31942, 23996, 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16335 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16350 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16365 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16380 */ 18555, 18555, 18555, 18555, 20520, 18555, 18555, 18555, 18555, 30138, 18555, 18555, 18555, 18555, 20736,
  /* 16395 */ 18555, 18555, 18555, 18555, 34655, 21683, 33128, 20287, 46164, 18555, 18555, 26625, 18555, 18555, 19639,
  /* 16410 */ 18555, 18555, 18555, 18555, 19643, 18555, 18555, 46186, 25456, 46204, 46223, 37127, 22675, 40809, 18555,
  /* 16425 */ 37397, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 46266, 30078, 30078, 30078, 46282,
  /* 16440 */ 46206, 46206, 43635, 35966, 19842, 19842, 46479, 35975, 32270, 18555, 27461, 18555, 18555, 18555, 18555,
  /* 16455 */ 18555, 18555, 40682, 18555, 18555, 19659, 46324, 30078, 46343, 30078, 46205, 46360, 45872, 46206, 46206,
  /* 16470 */ 19677, 46377, 19842, 46411, 19842, 25680, 35471, 18555, 39697, 18555, 18555, 18555, 18555, 45835, 18555,
  /* 16485 */ 18555, 20374, 38946, 46428, 30078, 30079, 46206, 41017, 46206, 46206, 28366, 19842, 37799, 19842, 19842,
  /* 16500 */ 44347, 23993, 18555, 18555, 18555, 18555, 18555, 31363, 45555, 30078, 30078, 46445, 36628, 46206, 45598,
  /* 16515 */ 46206, 46462, 19842, 42677, 19842, 33580, 26676, 18555, 18555, 46495, 18555, 20371, 30078, 30078, 30213,
  /* 16530 */ 46206, 46206, 23578, 19842, 19842, 23330, 46512, 18555, 44655, 18555, 28848, 30078, 46030, 46206, 30273,
  /* 16545 */ 46533, 19842, 23330, 18555, 46559, 45143, 45105, 30211, 46148, 28657, 46580, 26674, 20054, 30078, 46204,
  /* 16560 */ 28656, 25932, 20368, 43276, 25018, 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373, 20376, 25016,
  /* 16575 */ 29843, 36447, 23134, 31942, 23996, 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16590 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16605 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16620 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16635 */ 18555, 18555, 18555, 18555, 18555, 20520, 18555, 18555, 18555, 18555, 30138, 18555, 18555, 18555, 18555,
  /* 16650 */ 20736, 46603, 18555, 18555, 18555, 34655, 21683, 33128, 20287, 18555, 18555, 18555, 26625, 18555, 18555,
  /* 16665 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 45144, 30078, 46204, 41439, 19842, 23983, 24567,
  /* 16680 */ 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 39679, 30078, 30078, 30078,
  /* 16695 */ 43275, 46206, 46206, 46206, 35966, 19842, 19842, 19842, 35975, 32270, 18555, 18555, 18555, 18555, 18555,
  /* 16710 */ 18555, 18555, 18555, 18555, 18555, 18555, 19659, 30078, 30078, 30078, 30078, 46205, 46206, 46206, 46206,
  /* 16725 */ 46206, 19677, 19842, 19842, 19842, 19842, 25680, 35471, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16740 */ 18555, 18555, 20374, 30078, 30078, 30078, 30079, 46206, 46206, 46206, 46206, 28366, 19842, 19842, 19842,
  /* 16755 */ 19842, 29115, 23993, 18555, 18555, 18555, 18555, 18555, 18555, 45555, 30078, 30078, 30078, 43276, 46206,
  /* 16770 */ 46206, 46206, 44988, 19842, 19842, 19842, 28151, 26676, 18555, 18555, 18555, 18555, 20371, 30078, 30078,
  /* 16785 */ 30213, 46206, 46206, 23578, 19842, 19842, 23330, 18555, 18555, 18555, 18555, 20755, 30078, 30211, 46206,
  /* 16800 */ 30273, 19842, 19842, 23330, 18555, 18555, 45143, 30078, 30211, 46206, 28657, 19843, 26674, 20054, 30078,
  /* 16815 */ 46204, 28656, 25932, 20368, 43276, 25018, 46587, 20371, 30212, 28654, 36376, 43272, 25016, 36373, 20376,
  /* 16830 */ 25016, 29843, 36447, 23134, 31942, 23996, 33629, 20118, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16845 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16860 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16875 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16890 */ 18555, 18555, 18555, 18555, 18555, 18555, 18408, 18555, 18555, 18555, 18555, 30013, 21992, 21990, 20311,
  /* 16905 */ 32799, 46639, 43799, 21985, 20321, 32797, 30025, 46624, 46682, 26603, 18555, 18555, 18555, 26625, 18555,
  /* 16920 */ 18555, 39310, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 23843, 18555, 18555, 37249, 18555, 18555,
  /* 16935 */ 18555, 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16950 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16965 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16980 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 16995 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17010 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17025 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17040 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17055 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20054,
  /* 17070 */ 18555, 18555, 18555, 18555, 20054, 18555, 18555, 39641, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17085 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17100 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17115 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17130 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17145 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18408, 18555, 18555, 18555, 18555, 28557, 18555, 18555,
  /* 17160 */ 36090, 18555, 20736, 45280, 45289, 46698, 46712, 46721, 18477, 46744, 26603, 18555, 18555, 18555, 26625,
  /* 17175 */ 18555, 18555, 18555, 18555, 18555, 18555, 44098, 18555, 18555, 44095, 18555, 18555, 18555, 18555, 18555,
  /* 17190 */ 39193, 18555, 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 21221, 18555,
  /* 17205 */ 18555, 18555, 18555, 18555, 18555, 18555, 37250, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17220 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17235 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17250 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17265 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17280 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17295 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17310 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17325 */ 20054, 18555, 18555, 18555, 18555, 20054, 18555, 18555, 39641, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17340 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17355 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17370 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17385 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17400 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18408, 18555, 18555, 18555, 18555, 24942, 18555,
  /* 17415 */ 18555, 18555, 18555, 39892, 21737, 46760, 46793, 46799, 46770, 18579, 46815, 26603, 18555, 18555, 18555,
  /* 17430 */ 26625, 18555, 18555, 38808, 18555, 18555, 43199, 18555, 18555, 18555, 45124, 18555, 18555, 18555, 18555,
  /* 17445 */ 18555, 18555, 18555, 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 20866,
  /* 17460 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 40572, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17475 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17490 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17505 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17520 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17535 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17550 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17565 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17580 */ 18555, 20054, 18555, 18555, 18555, 18555, 20054, 18555, 18555, 39641, 18555, 18555, 18555, 18555, 18555,
  /* 17595 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17610 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17625 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17640 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17655 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18408, 18555, 18555, 18555, 18555, 28557,
  /* 17670 */ 18555, 18555, 18555, 18555, 20736, 18555, 18555, 18555, 18555, 18555, 18555, 20057, 20287, 18555, 18555,
  /* 17685 */ 18555, 26625, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 45144, 30078, 46204,
  /* 17700 */ 41439, 19842, 23983, 45240, 18555, 18555, 18555, 36904, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17715 */ 21221, 30078, 30078, 30078, 43275, 46206, 46206, 46206, 27344, 19842, 19842, 19842, 35975, 32270, 18555,
  /* 17730 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 19659, 30078, 30078, 30078, 30078,
  /* 17745 */ 46205, 46206, 46206, 46206, 46206, 19677, 19842, 19842, 19842, 19842, 25680, 35471, 18555, 18555, 18555,
  /* 17760 */ 18555, 18555, 18555, 18555, 18555, 18555, 20374, 30078, 30078, 30078, 30079, 46206, 46206, 46206, 46206,
  /* 17775 */ 28366, 19842, 19842, 19842, 19842, 29115, 23993, 18555, 18555, 18555, 18555, 18555, 18555, 45555, 30078,
  /* 17790 */ 30078, 30078, 43276, 46206, 46206, 46206, 44988, 19842, 19842, 19842, 28151, 26676, 18555, 18555, 18555,
  /* 17805 */ 18555, 20371, 30078, 30078, 30213, 46206, 46206, 23578, 19842, 19842, 23330, 18555, 18555, 18555, 18555,
  /* 17820 */ 20755, 30078, 30211, 46206, 30273, 19842, 19842, 23330, 18555, 18555, 45143, 30078, 30211, 46206, 28657,
  /* 17835 */ 19843, 26674, 20054, 30078, 46204, 28656, 25932, 20368, 43276, 25018, 46587, 20371, 30212, 28654, 36376,
  /* 17850 */ 43272, 25016, 36373, 20376, 25016, 29843, 36447, 23134, 31942, 23996, 33629, 20118, 18555, 18555, 18555,
  /* 17865 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17880 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17895 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17910 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17925 */ 18555, 18555, 18555, 20474, 18555, 18555, 36099, 46831, 46836, 46836, 46852, 40973, 46875, 18555, 18555,
  /* 17940 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17955 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17970 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 17985 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 18000 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 18015 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 18030 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 18045 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 18060 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 18075 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 18090 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 18105 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 18120 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 18135 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 18150 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555,
  /* 18165 */ 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 18555, 69928, 69928, 65831, 65831,
  /* 18180 */ 69928, 69928, 69928, 69928, 69928, 69928, 69928, 69928, 69928, 69928, 69928, 69928, 69928, 69928, 69928,
  /* 18195 */ 69928, 1, 12290, 3, 69928, 69928, 69928, 69928, 69928, 69928, 69928, 69928, 69928, 363, 69928, 65831,
  /* 18211 */ 69928, 69928, 69928, 69928, 69928, 69928, 69928, 0, 65831, 69928, 69928, 69928, 69928, 69928, 69928,
  /* 18226 */ 69928, 45056, 49152, 69928, 69928, 69928, 69928, 69928, 40960, 69928, 598475, 598475, 598475, 598475,
  /* 18240 */ 598475, 598475, 598475, 598475, 598475, 598475, 598475, 598475, 598475, 598475, 598475, 598475, 459, 459,
  /* 18254 */ 598475, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 598475, 598475, 598475, 598475, 598475, 598475,
  /* 18271 */ 598475, 598475, 598475, 459, 598475, 598475, 598475, 598475, 598475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2269,
  /* 18291 */ 0, 0, 0, 0, 0, 0, 301, 81920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 332, 0, 332, 0, 0, 301, 0, 0, 0, 301,
  /* 18322 */ 82332, 49152, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 440, 0, 0, 0, 474, 474, 474, 474, 474, 474, 474, 474,
  /* 18347 */ 474, 474, 474, 474, 474, 474, 474, 474, 578095, 578095, 578095, 57924, 578139, 578095, 57924, 578095,
  /* 18363 */ 578095, 301, 0, 0, 0, 0, 0, 0, 301, 301, 301, 301, 0, 0, 0, 301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
  /* 18392 */ 0, 0, 0, 301, 301, 301, 301, 301, 301, 301, 301, 0, 0, 0, 301, 301, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18419 */ 0, 0, 0, 0, 0, 321, 322, 0, 2105630, 12290, 3, 0, 0, 292, 0, 0, 0, 0, 292, 0, 0, 0, 0, 0, 0, 0, 709, 0, 0,
  /* 18448 */ 0, 0, 0, 0, 0, 0, 0, 1191, 1215, 1216, 0, 0, 578753, 832, 0, 0, 0, 0, 86016, 86016, 86016, 86016, 86016,
  /* 18471 */ 86016, 86016, 86016, 0, 0, 86016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 557531, 557531, 557531, 0, 557531, 0,
  /* 18494 */ 0, 86016, 0, 86016, 86016, 86016, 0, 0, 0, 0, 0, 0, 0, 86016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 358, 0, 0,
  /* 18522 */ 0, 0, 0, 86016, 86016, 0, 0, 0, 0, 0, 0, 0, 0, 86016, 86016, 86016, 0, 86016, 86016, 86016, 86016, 86016,
  /* 18544 */ 86016, 86016, 86016, 86016, 86016, 86016, 86016, 86016, 86016, 86016, 385024, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18564 */ 0, 0, 0, 0, 0, 0, 0, 297, 0, 1038, 1042, 0, 0, 1046, 1050, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 569344,
  /* 18591 */ 569344, 569344, 0, 569344, 0, 1634, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 306, 307, 0, 1786, 0, 0, 0,
  /* 18618 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 307, 306, 0, 602112, 0, 0, 602112, 602112, 0, 0, 0, 0, 0, 0, 602112, 0,
  /* 18645 */ 602112, 0, 602112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 602112, 0, 602112, 602112, 602112, 602112, 0, 0, 0,
  /* 18668 */ 602112, 0, 0, 0, 45056, 49152, 0, 0, 0, 0, 0, 40960, 0, 602112, 602112, 602112, 602112, 602112, 602112,
  /* 18687 */ 602112, 602112, 0, 0, 0, 602112, 602112, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 299, 0, 606208,
  /* 18712 */ 606208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 337, 338, 339, 0, 0, 0, 0, 606208, 606208, 606208, 606208,
  /* 18737 */ 606208, 606208, 606208, 0, 0, 0, 606208, 0, 0, 606208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 598475, 598475,
  /* 18760 */ 598475, 0, 598475, 606208, 606208, 606208, 606208, 606208, 606208, 606208, 606208, 0, 0, 0, 606208,
  /* 18775 */ 606208, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81920, 297, 0, 302, 94208, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18803 */ 0, 0, 0, 0, 0, 384, 336, 0, 302, 302, 302, 302, 302, 302, 302, 302, 0, 0, 0, 302, 302, 1, 12290, 3, 0, 0,
  /* 18829 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 94208, 298, 0, 0, 298, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2279, 0, 0,
  /* 18860 */ 0, 0, 578077, 299, 299, 381297, 299, 299, 299, 381297, 45056, 49152, 299, 299, 381227, 299, 299, 40960,
  /* 18878 */ 299, 299, 0, 0, 299, 299, 381227, 299, 299, 299, 299, 299, 299, 299, 299, 299, 364, 299, 0, 381227, 299,
  /* 18899 */ 299, 299, 299, 299, 299, 299, 381227, 381227, 381227, 381227, 381227, 381227, 381227, 381227, 299, 299,
  /* 18915 */ 299, 381227, 369, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 381227,
  /* 18935 */ 299, 299, 381227, 299, 299, 381227, 381227, 381227, 381227, 381227, 381227, 0, 0, 299, 299, 299, 299, 299,
  /* 18953 */ 299, 299, 299, 299, 381227, 299, 381227, 381227, 381227, 381227, 299, 299, 299, 381227, 299, 381227,
  /* 18969 */ 381227, 381227, 381227, 381227, 381227, 381297, 381227, 381227, 381227, 381297, 381227, 381227, 381227,
  /* 18982 */ 381227, 381227, 381227, 381227, 381227, 381227, 381227, 381227, 381227, 381227, 381227, 381227, 381227,
  /* 18995 */ 299, 299, 381227, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 381297, 299, 299, 299, 299,
  /* 19014 */ 381297, 381297, 381297, 381297, 381297, 381297, 381297, 381297, 381227, 381227, 381227, 381227, 381227, 1,
  /* 19028 */ 12290, 3, 0, 0, 0, 0, 0, 0, 0, 65831, 65831, 65831, 65831, 0, 69928, 0, 0, 0, 0, 0, 389120, 389120, 0, 0,
  /* 19052 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 323, 0, 0, 0, 389120, 389120, 0, 389120, 389120, 389120, 389120,
  /* 19076 */ 389120, 389120, 389120, 389120, 389120, 389120, 389120, 389120, 389120, 389120, 389120, 389120, 389120,
  /* 19089 */ 389120, 389120, 389120, 389120, 389120, 389120, 0, 0, 0, 0, 0, 0, 0, 0, 389120, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19112 */ 389120, 0, 0, 0, 0, 0, 389120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2462, 0, 0, 0, 0, 0, 0, 389120, 0, 0, 0, 0,
  /* 19141 */ 0, 389120, 389120, 389120, 389120, 0, 389120, 0, 12290, 3, 0, 0, 0, 90112, 0, 0, 0, 0, 297, 298, 0, 0,
  /* 19163 */ 301, 302, 0, 0, 0, 0, 0, 0, 1128, 0, 0, 0, 0, 0, 0, 0, 1135, 0, 0, 0, 0, 574024, 0, 0, 0, 0, 574024,
  /* 19190 */ 574024, 574024, 574024, 393216, 393216, 574024, 393216, 102400, 393216, 393216, 393216, 393216, 393216, 0,
  /* 19204 */ 0, 0, 0, 574024, 0, 0, 0, 393216, 393216, 393216, 0, 0, 393216, 0, 0, 0, 0, 0, 0, 0, 0, 393216, 393216,
  /* 19227 */ 393216, 393216, 393216, 393216, 393216, 393216, 393216, 393216, 393216, 393216, 393216, 393216, 393216,
  /* 19240 */ 393216, 102400, 393216, 393216, 574024, 574024, 574024, 574024, 574024, 574024, 574024, 574024, 393216,
  /* 19253 */ 393216, 393216, 574024, 574024, 1, 12290, 3, 0, 0, 0, 0, 0, 446464, 0, 0, 0, 446464, 0, 0, 0, 0, 0, 0, 0,
  /* 19277 */ 0, 0, 0, 0, 0, 398, 0, 0, 0, 397312, 397312, 397312, 397312, 397312, 397312, 397312, 397312, 397312,
  /* 19295 */ 397312, 397312, 397312, 397312, 397312, 397312, 397312, 1, 12290, 3, 397312, 397312, 397312, 0, 0, 397312,
  /* 19311 */ 0, 0, 0, 0, 0, 0, 0, 0, 397312, 397312, 397312, 397312, 397312, 397312, 397312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19335 */ 0, 2488, 0, 0, 0, 0, 0, 0, 0, 1138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 515, 522, 522, 0, 0, 0, 0, 0,
  /* 19366 */ 401408, 0, 401408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 832, 0, 0, 0, 832, 0, 0, 401408, 401408, 0, 401408, 0, 0,
  /* 19391 */ 401408, 0, 401408, 0, 401408, 0, 0, 0, 0, 401408, 401408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401408, 0, 0, 0,
  /* 19416 */ 0, 0, 0, 401408, 0, 401408, 401408, 0, 401408, 401408, 401408, 401408, 401408, 401408, 401408, 401408,
  /* 19432 */ 401408, 401408, 401408, 401408, 401408, 401408, 401408, 401408, 401408, 401408, 401408, 401408, 401408,
  /* 19445 */ 401408, 401408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2651, 0, 0, 0, 0, 0, 1, 287, 3, 0, 0, 0, 293, 0, 0, 0, 0, 0,
  /* 19475 */ 0, 0, 0, 0, 0, 126976, 0, 0, 0, 0, 0, 405504, 405504, 405504, 405504, 405504, 405504, 405504, 405504,
  /* 19494 */ 405504, 405504, 405504, 405504, 405504, 405504, 405504, 405504, 1, 0, 3, 405504, 405504, 405504, 0, 0,
  /* 19510 */ 405504, 0, 0, 0, 0, 0, 0, 0, 0, 405504, 405504, 405504, 405504, 405504, 405504, 405504, 0, 0, 0, 0, 0, 0,
  /* 19532 */ 0, 0, 0, 0, 282624, 0, 0, 233472, 335872, 659456, 53537, 53537, 61731, 0, 639, 0, 0, 0, 297, 298, 0, 0,
  /* 19554 */ 301, 302, 0, 0, 0, 0, 0, 0, 1141, 0, 0, 0, 0, 0, 0, 1062, 0, 0, 0, 0, 0, 0, 1151, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19585 */ 0, 0, 578753, 832, 0, 0, 0, 0, 1155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 381, 0, 0, 0, 385, 57907, 58674,
  /* 19612 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59428,
  /* 19627 */ 57907, 0, 0, 425984, 0, 0, 0, 0, 0, 0, 0, 1590, 0, 0, 0, 0, 0, 0, 0, 741, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19658 */ 0, 578753, 0, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 19672 */ 578077, 578077, 578077, 578817, 578077, 574817, 0, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 19686 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578986, 578121, 1895, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19705 */ 1903, 0, 0, 0, 0, 0, 0, 0, 754, 0, 0, 0, 0, 0, 0, 761, 0, 1969, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19737 */ 0, 359, 57907, 57907, 57907, 57907, 59407, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 19753 */ 57907, 59416, 578121, 578121, 579664, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 19766 */ 578121, 578121, 579673, 578121, 578121, 578121, 578121, 578954, 578121, 578121, 926281, 578121, 578121,
  /* 19779 */ 578121, 578121, 578121, 578962, 578121, 578121, 578121, 578121, 578974, 578121, 578121, 578121, 578121,
  /* 19792 */ 578121, 578121, 578121, 578121, 578121, 578121, 578987, 0, 0, 0, 0, 2250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19815 */ 663, 0, 0, 0, 0, 578077, 578077, 578077, 578077, 579836, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 19831 */ 578077, 578077, 578077, 578077, 578077, 578768, 578077, 578077, 578077, 578077, 579930, 578121, 578121,
  /* 19844 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 19857 */ 578121, 578077, 0, 0, 0, 0, 0, 2647, 0, 0, 0, 2650, 0, 0, 0, 0, 0, 0, 0, 0, 393216, 0, 0, 0, 0, 0, 0, 0,
  /* 19885 */ 0, 332, 0, 332, 332, 0, 0, 0, 0, 57907, 57907, 57907, 57907, 60049, 57907, 57907, 57907, 57907, 57907,
  /* 19904 */ 57907, 57907, 57907, 57907, 57907, 57907, 58707, 57907, 57907, 57907, 57907, 2760, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19924 */ 0, 0, 0, 0, 0, 0, 0, 733, 2778, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 580321, 578077, 578077, 57907, 58236,
  /* 19950 */ 57907, 57907, 57907, 57907, 57907, 57907, 864819, 57907, 57907, 57907, 57907, 57907, 0, 0, 0, 0, 0, 0,
  /* 19968 */ 578121, 579912, 578121, 578121, 578121, 580322, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 19981 */ 580329, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 60335, 57907, 57907, 57907, 57907, 57907,
  /* 19995 */ 57907, 57907, 57907, 58703, 57907, 57907, 57907, 57907, 58709, 57907, 57907, 57907, 57907, 57907, 60155,
  /* 20010 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 58686, 57907, 57907,
  /* 20025 */ 57907, 57907, 57907, 57907, 580357, 578121, 578121, 580358, 578121, 578121, 578121, 578121, 578121,
  /* 20038 */ 578121, 578121, 580365, 578121, 578121, 578121, 578121, 580498, 578121, 578121, 578121, 580502, 0, 0, 0,
  /* 20053 */ 0, 0, 0, 2771, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 12290, 3, 0, 0, 2771, 0, 0, 0, 0, 0, 0, 0, 2856,
  /* 20084 */ 0, 0, 0, 0, 0, 0, 0, 951, 952, 952, 952, 952, 952, 952, 952, 952, 831, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20111 */ 580436, 578121, 578121, 578121, 578121, 578121, 578077, 578077, 57907, 578121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20130 */ 0, 0, 0, 0, 686, 687, 0, 0, 0, 2771, 0, 0, 0, 0, 0, 2918, 0, 0, 578077, 578077, 578077, 578077, 578077,
  /* 20153 */ 578077, 578077, 578077, 578077, 580212, 578077, 578077, 578077, 578077, 580462, 578077, 578077, 578077,
  /* 20166 */ 578077, 578077, 580468, 578077, 578077, 578077, 57907, 57907, 57907, 57907, 57907, 60285, 57907, 57907,
  /* 20180 */ 57907, 57907, 57907, 60291, 57907, 57907, 57907, 578121, 578121, 578121, 578121, 578121, 580492, 578121,
  /* 20194 */ 578121, 578121, 578121, 580552, 578077, 0, 0, 0, 0, 0, 0, 0, 774144, 0, 0, 0, 0, 0, 0, 2446, 0, 0, 0, 0,
  /* 20218 */ 0, 0, 0, 0, 0, 333, 0, 0, 0, 0, 0, 0, 57907, 57907, 57907, 60424, 57907, 57907, 57907, 57907, 57907,
  /* 20239 */ 57907, 57907, 578121, 578121, 578121, 578121, 580623, 610920, 610920, 610920, 610920, 610920, 610920,
  /* 20252 */ 610920, 610920, 0, 0, 0, 610920, 610920, 1, 12290, 3, 0, 0, 0, 0, 442368, 0, 0, 0, 442368, 0, 0, 0, 0, 0,
  /* 20276 */ 0, 0, 45056, 49152, 0, 0, 0, 344, 343, 40960, 342, 53537, 53537, 61731, 0, 0, 0, 0, 0, 297, 298, 0, 0,
  /* 20299 */ 301, 302, 0, 0, 0, 0, 0, 0, 1171, 0, 0, 1174, 0, 0, 0, 0, 0, 0, 0, 0, 1163264, 0, 0, 1163264, 0, 0, 0, 0,
  /* 20327 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 532480, 540672, 0, 0, 0, 0, 0, 0, 0, 586466, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20357 */ 0, 664, 0, 0, 0, 0, 0, 578077, 578077, 578077, 578077, 0, 0, 2771, 0, 0, 0, 0, 0, 0, 0, 0, 578077, 578077,
  /* 20381 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 57907, 0, 0, 0, 303, 0, 0,
  /* 20398 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352, 353, 354, 355, 618956, 618956, 618956, 618956, 618956, 618956, 618956,
  /* 20419 */ 618956, 618956, 618956, 618956, 618956, 618956, 618956, 618956, 618956, 0, 0, 1, 12290, 3, 618956, 618956,
  /* 20435 */ 618956, 0, 0, 618956, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 602112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20465 */ 0, 304, 618956, 0, 618956, 618956, 618956, 618956, 618956, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 372736, 0, 0, 0,
  /* 20488 */ 0, 0, 581932, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 781, 582037, 582037, 582037, 582037, 582037,
  /* 20512 */ 582037, 582037, 582037, 0, 0, 0, 582037, 582037, 1, 12290, 3, 53537, 61731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20535 */ 0, 952, 952, 952, 952, 952, 952, 952, 53537, 53537, 61731, 0, 0, 0, 0, 0, 297, 298, 0, 581932, 301, 302,
  /* 20557 */ 0, 0, 0, 0, 0, 0, 1513, 1514, 0, 0, 0, 0, 0, 1519, 0, 0, 0, 0, 0, 0, 1535, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363,
  /* 20588 */ 297, 0, 0, 0, 0, 0, 0, 0, 0, 586466, 582037, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 670, 0, 0, 0, 0, 0, 586466,
  /* 20617 */ 590962, 0, 0, 0, 0, 1142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1131, 0, 0, 0, 0, 0, 0, 0, 1487, 0, 0, 0, 1493, 0, 0,
  /* 20647 */ 0, 1499, 0, 0, 0, 0, 0, 0, 0, 0, 413696, 413696, 414000, 0, 413696, 1, 12290, 3, 0, 590962, 0, 0, 0, 1142,
  /* 20671 */ 1574, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 376832, 0, 434176, 450560, 0, 0, 57907, 57907, 57907, 57907, 578121,
  /* 20693 */ 578121, 578121, 578121, 1481, 1887, 0, 0, 0, 0, 1487, 1889, 0, 1891, 0, 1893, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20717 */ 0, 0, 777, 0, 0, 0, 0, 0, 0, 0, 0, 1493, 1891, 0, 0, 0, 0, 1499, 1893, 0, 0, 0, 0, 0, 0, 0, 45056, 49152,
  /* 20745 */ 0, 0, 0, 0, 0, 40960, 0, 0, 1994, 0, 0, 0, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 20765 */ 578077, 578077, 578077, 578077, 578077, 578077, 579230, 578077, 0, 305, 0, 305, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20786 */ 305, 0, 0, 0, 0, 0, 0, 1562, 0, 0, 0, 0, 0, 0, 0, 0, 1570, 0, 0, 0, 413696, 413696, 0, 413696, 413696,
  /* 20811 */ 413696, 413696, 413696, 413696, 413696, 413696, 413696, 413696, 413696, 413696, 413696, 414001, 413696,
  /* 20824 */ 413696, 414000, 414001, 413696, 414000, 414000, 413696, 413696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 405504,
  /* 20843 */ 405504, 405504, 405504, 405504, 405504, 405504, 0, 0, 638, 0, 0, 0, 0, 0, 297, 298, 98304, 0, 301, 302, 0,
  /* 20864 */ 118784, 98304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 831, 952, 952, 952, 952, 952, 952, 952, 952,
  /* 20890 */ 952, 952, 952, 952, 952, 952, 952, 952, 831, 831, 0, 0, 0, 0, 0, 0, 952, 952, 952, 952, 952, 0, 0, 0, 0,
  /* 20915 */ 0, 0, 0, 45056, 49152, 0, 0, 0, 0, 423, 40960, 0, 952, 952, 952, 952, 952, 952, 952, 831, 831, 831, 831,
  /* 20938 */ 0, 952, 831, 0, 952, 952, 952, 831, 0, 0, 0, 0, 0, 831, 831, 831, 831, 831, 831, 0, 0, 0, 0, 0, 0, 0, 952,
  /* 20965 */ 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 0, 0, 0, 0, 952, 952, 952, 952, 0, 0, 0,
  /* 20989 */ 0, 0, 0, 0, 0, 0, 1146, 0, 1149, 0, 0, 0, 0, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 831, 831,
  /* 21014 */ 831, 831, 952, 831, 0, 952, 831, 831, 831, 831, 952, 952, 952, 952, 952, 952, 952, 952, 831, 831, 831,
  /* 21035 */ 952, 831, 0, 952, 831, 831, 831, 831, 0, 0, 0, 952, 831, 0, 952, 831, 831, 831, 831, 0, 0, 0, 0, 952, 952,
  /* 21060 */ 952, 952, 0, 0, 0, 0, 952, 952, 952, 952, 952, 831, 831, 952, 831, 0, 831, 831, 0, 0, 952, 952, 0, 831, 0,
  /* 21085 */ 952, 0, 831, 0, 952, 0, 831, 0, 952, 0, 831, 831, 831, 831, 831, 831, 831, 831, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21112 */ 0, 831, 831, 831, 0, 0, 952, 952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 952, 952, 952, 952, 952, 952, 831, 831,
  /* 21139 */ 0, 952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 692, 0, 0, 952, 952, 952, 952, 952, 952, 952, 952, 831, 0,
  /* 21167 */ 0, 0, 0, 0, 0, 2771, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2859, 0, 0, 831, 831, 831, 831, 831, 831, 831, 831,
  /* 21195 */ 831, 831, 831, 831, 831, 0, 0, 0, 0, 0, 0, 831, 831, 831, 0, 0, 0, 0, 952, 952, 952, 952, 0, 0, 831, 831,
  /* 21221 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 832, 0, 417792, 417792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 417792,
  /* 21250 */ 417792, 0, 0, 417792, 417792, 417792, 0, 0, 0, 0, 0, 0, 417792, 0, 0, 0, 417792, 417792, 417792, 417792,
  /* 21270 */ 417792, 417792, 417792, 417792, 417792, 417792, 417792, 417792, 417792, 417792, 417792, 417792, 417792,
  /* 21283 */ 417792, 417792, 417792, 417792, 417792, 417792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 438272, 0, 0, 0, 0, 0, 0, 0,
  /* 21307 */ 0, 0, 0, 0, 0, 0, 0, 0, 73728, 0, 0, 0, 28672, 0, 0, 0, 0, 0, 0, 0, 0, 417792, 417792, 417792, 417792,
  /* 21332 */ 417792, 1, 12290, 3, 0, 0, 298, 0, 301, 0, 0, 0, 301, 0, 302, 0, 0, 0, 302, 0, 0, 0, 0, 0, 664, 0, 0, 0,
  /* 21360 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 851968, 0, 0, 0, 0, 298, 0,
  /* 21392 */ 301, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 578077, 578077, 578077, 578377, 0, 0, 0, 0, 953, 0, 0,
  /* 21418 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 825, 578077, 578077, 578077, 578077, 422349, 422349, 422349, 422349, 422349,
  /* 21437 */ 422349, 422349, 422349, 422349, 422349, 422349, 422349, 422349, 422349, 422349, 422349, 0, 0, 0, 0, 0, 0,
  /* 21454 */ 0, 0, 0, 0, 582037, 0, 0, 0, 0, 0, 422502, 422502, 422502, 422502, 422502, 422502, 422502, 422502, 422349,
  /* 21473 */ 422349, 422349, 422519, 422519, 1, 12290, 3, 53538, 61731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073, 0, 0, 0,
  /* 21497 */ 0, 442368, 442368, 442368, 442368, 442368, 442368, 442368, 442368, 442368, 442368, 442368, 442368, 442368,
  /* 21511 */ 442368, 442368, 442368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 765952, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0,
  /* 21538 */ 0, 0, 0, 0, 0, 0, 0, 0, 1076, 446926, 446926, 446926, 446926, 446926, 446926, 446926, 446926, 446926,
  /* 21556 */ 446926, 446926, 446926, 446926, 446926, 446926, 446926, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 897024, 0, 0, 0, 0,
  /* 21578 */ 0, 0, 0, 0, 0, 0, 135168, 0, 0, 297, 298, 0, 0, 301, 302, 110592, 0, 0, 0, 0, 0, 665, 0, 0, 872448, 668,
  /* 21604 */ 0, 0, 0, 0, 0, 0, 0, 345, 0, 403, 0, 0, 0, 0, 0, 403, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21636 */ 329, 0, 0, 0, 131072, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 1, 12290, 2113824, 0, 0, 0, 0, 0, 0, 294, 0, 0,
  /* 21663 */ 0, 294, 0, 0, 139264, 139264, 139264, 139264, 139264, 139264, 139264, 139264, 0, 0, 0, 139264, 139264, 1,
  /* 21681 */ 12290, 3, 57907, 57907, 57907, 578121, 578077, 578077, 578077, 578077, 578121, 578121, 578121, 578121,
  /* 21695 */ 578077, 57907, 578121, 578077, 578077, 537117, 549405, 57907, 57907, 537139, 549427, 578121, 578121,
  /* 21708 */ 537161, 549449, 0, 1485, 57907, 57907, 57907, 57907, 578121, 578121, 578121, 578121, 0, 1887, 0, 0, 0, 0,
  /* 21726 */ 0, 1889, 0, 1891, 0, 1893, 0, 0, 0, 0, 2201, 0, 0, 0, 0, 0, 0, 0, 0, 569344, 0, 569344, 0, 0, 0, 0,
  /* 21752 */ 569344, 2246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1092, 0, 0, 0, 0, 2646, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21783 */ 0, 0, 0, 1058, 0, 0, 0, 0, 0, 0, 0, 1583, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 675, 0, 0, 0, 0, 0, 0, 0,
  /* 21815 */ 739, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 673, 674, 53537, 53885, 61731, 0, 0, 0, 0, 0, 297, 298, 0,
  /* 21843 */ 0, 301, 302, 0, 0, 0, 0, 0, 0, 1574, 0, 0, 0, 0, 0, 0, 1578, 0, 0, 0, 0, 0, 0, 1586, 0, 1588, 0, 0, 0, 0,
  /* 21873 */ 0, 0, 0, 0, 25216, 298, 0, 0, 594564, 302, 0, 0, 0, 0, 0, 0, 430, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1065,
  /* 21902 */ 0, 0, 0, 0, 57907, 57907, 57907, 578122, 578078, 578078, 578078, 578078, 578122, 578122, 578122, 578122,
  /* 21918 */ 578078, 57907, 578122, 578078, 578122, 578122, 578122, 578122, 578122, 578122, 578122, 578122, 578078,
  /* 21931 */ 57907, 578078, 578122, 578122, 1, 12290, 3, 0, 0, 0, 0, 0, 2469, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1064960,
  /* 21956 */ 0, 0, 0, 0, 458752, 458752, 458752, 458752, 458752, 458752, 458752, 458752, 458752, 458752, 458752,
  /* 21971 */ 458752, 458752, 458752, 458752, 458752, 1, 12290, 3, 458752, 458752, 458752, 0, 0, 458752, 0, 0, 0, 0, 0,
  /* 21990 */ 0, 0, 0, 0, 0, 0, 1163264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1163264, 0, 0, 0, 0, 458752, 458752, 458752,
  /* 22015 */ 458752, 458752, 458752, 458752, 458752, 458752, 0, 458752, 458752, 458752, 458752, 458752, 0, 0, 0, 0, 0,
  /* 22032 */ 0, 0, 0, 0, 0, 999424, 0, 0, 0, 520192, 0, 0, 0, 0, 0, 1156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
  /* 22062 */ 0, 0, 0, 0, 0, 462848, 462848, 0, 462848, 462848, 462848, 462848, 462848, 462848, 462848, 462848, 462848,
  /* 22079 */ 462848, 462848, 462848, 462848, 462848, 462848, 462848, 462848, 462848, 462848, 462848, 462848, 462848,
  /* 22092 */ 462848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2175674, 2175674, 2175674, 0, 0, 0, 0, 0, 0, 462848, 0, 0, 0, 0,
  /* 22117 */ 462848, 462848, 462848, 0, 462848, 1, 12290, 3, 0, 0, 2851, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 728, 0,
  /* 22143 */ 0, 0, 0, 0, 0, 0, 2912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 779, 0, 0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
  /* 22175 */ 306, 0, 306, 307, 0, 306, 306, 0, 0, 0, 306, 306, 307, 307, 0, 0, 0, 0, 0, 0, 306, 406, 307, 0, 0, 0, 0,
  /* 22202 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1180, 0, 0, 0, 307, 411, 0, 0, 45056, 49152, 0, 0, 0, 0, 0, 40960, 0, 0,
  /* 22231 */ 0, 0, 0, 707, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1566, 0, 0, 0, 0, 0, 463, 463, 463, 489, 489, 463, 489, 489,
  /* 22259 */ 489, 489, 489, 489, 489, 514, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 534, 489,
  /* 22280 */ 489, 489, 489, 489, 578079, 578079, 578079, 57908, 578123, 578079, 57908, 578079, 578079, 57908, 57908,
  /* 22295 */ 57908, 578143, 578146, 578146, 578146, 578079, 578143, 578143, 578143, 578123, 578079, 57908, 578156,
  /* 22308 */ 578079, 578156, 578156, 578156, 578156, 578156, 578156, 578156, 578156, 578079, 57908, 578079, 578143,
  /* 22321 */ 578143, 1, 12290, 3, 0, 0, 0, 648, 0, 0, 650, 651, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1188, 0, 0, 0, 0, 0, 0, 675,
  /* 22350 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1193, 734, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 745, 0, 0, 0, 0,
  /* 22383 */ 0, 0, 0, 578078, 578078, 578078, 57907, 578122, 578078, 57907, 578078, 578078, 0, 0, 648, 0, 0, 0, 0, 0,
  /* 22403 */ 0, 0, 0, 0, 0, 760, 0, 0, 0, 0, 0, 0, 1628, 0, 0, 0, 0, 0, 0, 0, 0, 0, 378, 0, 0, 0, 0, 0, 0, 0, 0, 766,
  /* 22435 */ 0, 0, 770, 0, 0, 0, 0, 0, 0, 778, 0, 0, 0, 0, 0, 0, 0, 578096, 578096, 578096, 57925, 578140, 578096,
  /* 22458 */ 57925, 578096, 578096, 0, 0, 785, 0, 0, 0, 0, 789, 0, 0, 0, 0, 0, 0, 0, 793, 0, 0, 734, 0, 793, 0, 0, 0,
  /* 22485 */ 0, 650, 0, 0, 0, 0, 0, 0, 0, 0, 446926, 446926, 446926, 446926, 446926, 1, 12290, 0, 808, 0, 0, 0, 793, 0,
  /* 22509 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1117, 0, 0, 0, 0, 0, 0, 0, 650, 0, 0, 0, 0, 0, 823, 789, 0, 0, 0, 0, 0, 0,
  /* 22541 */ 0, 1054, 0, 1056, 0, 0, 0, 0, 0, 0, 0, 444, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2487, 0, 2489, 0, 0, 0, 0, 827,
  /* 22570 */ 828, 789, 789, 0, 0, 0, 0, 789, 734, 789, 0, 578077, 578077, 578077, 578374, 578378, 578077, 578077,
  /* 22588 */ 578077, 578077, 578077, 578398, 578077, 578402, 578077, 578407, 578077, 578410, 578077, 578077, 578423,
  /* 22601 */ 57907, 58277, 57907, 57907, 58290, 57907, 57907, 0, 578121, 578121, 578121, 578495, 578499, 578121,
  /* 22615 */ 578121, 578121, 528925, 0, 0, 0, 0, 0, 578077, 578077, 578077, 578077, 578077, 578077, 57907, 57907,
  /* 22631 */ 57907, 57907, 578121, 578121, 578121, 578121, 62477, 0, 0, 1485, 578121, 578121, 578519, 578121, 578523,
  /* 22646 */ 578121, 578528, 578121, 578531, 578121, 578121, 578544, 578121, 578121, 578121, 578121, 578077, 578077,
  /* 22659 */ 578077, 578077, 579340, 579188, 59070, 578121, 578077, 578077, 578077, 578077, 0, 0, 586466, 578121,
  /* 22673 */ 578077, 57907, 578121, 578077, 578077, 578077, 578077, 0, 0, 0, 578121, 578077, 57907, 578121, 471581,
  /* 22688 */ 578077, 578077, 578420, 1039, 1043, 0, 0, 1047, 1051, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 301, 301, 0, 0, 0, 0,
  /* 22713 */ 0, 0, 1108, 0, 0, 0, 0, 1113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1203, 0, 0, 0, 0, 0, 0, 0, 0, 1153, 0, 0, 0, 0,
  /* 22744 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 831, 831, 831, 831, 1165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1218, 0,
  /* 22775 */ 0, 0, 0, 1560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1133, 0, 0, 0, 0, 1597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22807 */ 0, 0, 0, 0, 1520, 578753, 1635, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579182,
  /* 22823 */ 578077, 578077, 578077, 578077, 578077, 60448, 57907, 57907, 57907, 57907, 57907, 57907, 580646, 578121,
  /* 22837 */ 578121, 578121, 578077, 578077, 578077, 578077, 579235, 578077, 578077, 578077, 578077, 579240, 578077,
  /* 22850 */ 578077, 578077, 578077, 578077, 578077, 578077, 579861, 578077, 578077, 57907, 57907, 57907, 59674, 57907,
  /* 22864 */ 57907, 57907, 57907, 57907, 59076, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 22879 */ 57907, 57907, 59096, 57907, 57907, 57907, 57907, 57907, 57907, 59117, 57907, 57907, 57907, 57907, 59122,
  /* 22894 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 0, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 22908 */ 578506, 578121, 574817, 1787, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579334,
  /* 22921 */ 578121, 578121, 578121, 578121, 578121, 578077, 578077, 475721, 475677, 475699, 578077, 578077, 57907,
  /* 22934 */ 57907, 578121, 578121, 0, 0, 0, 0, 2437, 0, 0, 0, 2439, 0, 0, 578121, 579400, 578121, 578121, 579403,
  /* 22953 */ 578077, 578077, 578077, 578121, 578077, 57907, 578121, 579411, 578077, 578077, 578077, 57907, 57907,
  /* 22966 */ 57907, 57907, 578121, 578121, 578121, 578121, 0, 3140, 578077, 580677, 57907, 59223, 57907, 57907, 57907,
  /* 22981 */ 579419, 578121, 578121, 578121, 0, 1887, 0, 0, 0, 0, 0, 1889, 0, 1891, 0, 1893, 0, 0, 2199, 0, 0, 0, 0, 0,
  /* 23005 */ 0, 0, 2207, 0, 0, 0, 0, 1897, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1148, 1150, 0, 0, 0, 0, 0, 1980, 0, 0,
  /* 23034 */ 1985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 304, 305, 0, 0, 0, 0, 578077, 579544, 578077, 578077, 578077, 578077,
  /* 23057 */ 578077, 578077, 579551, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578788, 578077, 578077,
  /* 23070 */ 578077, 578077, 578077, 578077, 578077, 578077, 579198, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 23083 */ 578077, 57907, 57907, 59418, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 23098 */ 57907, 57907, 59112, 57907, 57907, 57907, 59445, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 23113 */ 57907, 57907, 57907, 57907, 57907, 57907, 59442, 59443, 57907, 57907, 57907, 57907, 59459, 57907, 57907,
  /* 23128 */ 57907, 57907, 0, 0, 0, 0, 578121, 578121, 578121, 578077, 0, 0, 0, 0, 0, 578077, 578077, 578077, 578077,
  /* 23147 */ 578077, 578077, 57907, 57907, 57907, 59884, 57907, 57907, 57907, 57907, 57907, 59890, 579675, 578121,
  /* 23161 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 23174 */ 578121, 578947, 578121, 578121, 579716, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578077,
  /* 23187 */ 578077, 578077, 578077, 579724, 579725, 59534, 578121, 578077, 578077, 578077, 578077, 57907, 57907,
  /* 23200 */ 57907, 57907, 578121, 578121, 578121, 578121, 1887, 0, 0, 0, 0, 0, 723, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 663,
  /* 23224 */ 0, 663, 0, 0, 0, 2218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1531, 0, 2247, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23256 */ 2256, 0, 0, 0, 0, 0, 0, 0, 1100, 0, 363, 363, 0, 1103, 0, 0, 0, 0, 0, 0, 0, 2265, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23286 */ 0, 0, 0, 1160, 0, 0, 0, 0, 59676, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59684, 57907, 57907,
  /* 23305 */ 57907, 57907, 57907, 57907, 57907, 0, 578121, 578121, 578121, 578121, 578121, 578121, 578508, 578121,
  /* 23319 */ 57907, 59714, 57907, 57907, 57907, 0, 2373, 0, 0, 0, 0, 578121, 578121, 578121, 578121, 578121, 578077,
  /* 23336 */ 578077, 578121, 578077, 57907, 578077, 578077, 57907, 57907, 578121, 578121, 0, 0, 0, 0, 0, 2438, 0, 0, 0,
  /* 23355 */ 0, 0, 0, 0, 772, 0, 0, 0, 0, 0, 0, 0, 0, 0, 422349, 422349, 422349, 422349, 422349, 422349, 422349,
  /* 23376 */ 578121, 579916, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579924, 578121, 578121, 578121,
  /* 23389 */ 578121, 578121, 578121, 578077, 578077, 57907, 578121, 0, 2907, 0, 0, 2910, 0, 578121, 578121, 579954,
  /* 23405 */ 578121, 578121, 578121, 578121, 578121, 578077, 578077, 578077, 578121, 578077, 57907, 578121, 578077,
  /* 23418 */ 578077, 578077, 578410, 0, 0, 0, 578499, 578378, 58245, 578121, 578374, 578561, 578410, 578077, 0, 0,
  /* 23434 */ 2442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2452, 0, 0, 0, 0, 0, 0, 0, 578098, 578098, 578098, 57927, 578142, 578098,
  /* 23458 */ 57927, 578098, 578098, 2479, 2480, 0, 0, 0, 0, 2484, 0, 0, 0, 0, 0, 0, 0, 0, 0, 297, 0, 0, 0, 0, 0, 0, 0,
  /* 23485 */ 0, 0, 0, 2497, 0, 2279, 0, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 580571, 578077,
  /* 23502 */ 578077, 578077, 578077, 57907, 57907, 578077, 580043, 578077, 578077, 580046, 578077, 578077, 578077,
  /* 23515 */ 578077, 578077, 578077, 578077, 578077, 580052, 578077, 578077, 57907, 58237, 57907, 57907, 57907, 58251,
  /* 23529 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 893491, 57907, 57907, 57907, 57907, 60161, 57907,
  /* 23544 */ 60162, 578077, 578077, 578077, 578077, 580059, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 23557 */ 578077, 578077, 578077, 578077, 578770, 578077, 578077, 578077, 578077, 57907, 57907, 59892, 57907, 57907,
  /* 23571 */ 57907, 57907, 57907, 57907, 57907, 57907, 59898, 57907, 57907, 57907, 57907, 0, 0, 578121, 578121, 578121,
  /* 23587 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578959, 578121, 578121, 578121, 578121, 578121,
  /* 23600 */ 57907, 57907, 59905, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 23615 */ 57907, 59128, 57907, 57907, 578121, 578121, 580122, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 23628 */ 578121, 578121, 580128, 578121, 578121, 578121, 578121, 578077, 578077, 578077, 578077, 579407, 579408,
  /* 23641 */ 59217, 578121, 578077, 579412, 578077, 578077, 578121, 578121, 580135, 578121, 578121, 578121, 578121,
  /* 23654 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578548, 578121, 578121, 0, 0, 0,
  /* 23669 */ 0, 0, 2661, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 329, 380, 382, 0, 0, 0, 578077, 580229, 578077, 578077, 578077,
  /* 23693 */ 578077, 578077, 578077, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59889, 57907,
  /* 23707 */ 57907, 57907, 57907, 57907, 60050, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 23722 */ 59452, 59453, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 60062, 57907, 60064, 57907,
  /* 23737 */ 57907, 57907, 57907, 57907, 57907, 578121, 578121, 578121, 578121, 580543, 578121, 578121, 578121, 578121,
  /* 23751 */ 578121, 2971, 0, 2973, 0, 0, 0, 0, 0, 578077, 580515, 578077, 580516, 578077, 578077, 578077, 578077,
  /* 23768 */ 578077, 578077, 580526, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 0, 0, 0, 0, 578121,
  /* 23785 */ 579660, 578121, 0, 578077, 578077, 578077, 580567, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 23799 */ 578077, 578077, 57907, 57907, 57907, 57907, 664115, 57907, 57907, 57907, 57907, 60387, 57907, 57907,
  /* 23813 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 578121, 578121, 578121, 580591, 578121, 578121, 578121,
  /* 23827 */ 578121, 580626, 578121, 578121, 578077, 729088, 0, 0, 0, 0, 0, 578077, 729629, 308, 309, 310, 0, 0, 0, 0,
  /* 23847 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 832, 0, 0, 0, 0, 419, 0, 0, 0, 0, 0, 450, 0, 0, 0, 0, 0, 0, 0, 0, 1055, 0, 0,
  /* 23879 */ 0, 0, 0, 0, 0, 0, 1085, 0, 0, 0, 0, 0, 0, 0, 0, 1101, 363, 363, 0, 0, 1104, 0, 0, 0, 0, 0, 450, 450, 419,
  /* 23908 */ 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 533, 450, 533, 533, 533, 450, 533, 533, 533,
  /* 23929 */ 533, 450, 578080, 578080, 578080, 57909, 578124, 578080, 57909, 578080, 578080, 57909, 57909, 57909,
  /* 23943 */ 578124, 578080, 578080, 578080, 578080, 578124, 578124, 578124, 578124, 578080, 57909, 578124, 578080,
  /* 23956 */ 578124, 578124, 578124, 578124, 578124, 578124, 578124, 578124, 578157, 57970, 578157, 578124, 578168, 1,
  /* 23970 */ 12290, 3, 578551, 578077, 578077, 578554, 578077, 0, 0, 0, 578121, 578077, 57907, 578121, 578077, 578077,
  /* 23986 */ 578077, 578077, 0, 0, 0, 578121, 578077, 57907, 578121, 578077, 578077, 578077, 578077, 57907, 57907,
  /* 24001 */ 57907, 57907, 578121, 578121, 578121, 578121, 0, 0, 578077, 578077, 57907, 1581, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24021 */ 0, 0, 0, 0, 0, 0, 0, 1543, 579231, 578077, 578077, 578077, 578077, 579236, 578077, 578077, 578077, 578077,
  /* 24039 */ 578077, 578077, 578077, 578077, 578077, 578077, 578766, 578077, 578077, 578077, 578077, 578077, 57907,
  /* 24052 */ 57907, 57907, 57907, 59118, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 24067 */ 59083, 57907, 57907, 57907, 57907, 579383, 578121, 578121, 578121, 578121, 579388, 578121, 578121, 578121,
  /* 24081 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579669, 578121, 579671, 578121, 578121, 578121, 0,
  /* 24095 */ 0, 0, 2220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 685, 0, 0, 0, 578077, 578077, 579820, 578077, 578077,
  /* 24119 */ 578077, 579823, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578832, 578077,
  /* 24132 */ 58642, 57907, 57907, 57907, 58646, 57907, 59677, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 24147 */ 57907, 57907, 57907, 57907, 57907, 57907, 59711, 57907, 57907, 57907, 59715, 57907, 57907, 0, 2373, 0, 0,
  /* 24164 */ 0, 0, 578121, 578121, 578121, 579914, 578121, 578121, 578121, 578121, 688713, 578121, 578121, 578121,
  /* 24178 */ 721481, 578121, 578121, 578121, 578121, 580272, 578121, 578121, 578121, 578121, 579666, 578121, 578121,
  /* 24191 */ 578121, 696905, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578077, 578077, 578077, 578077, 0,
  /* 24205 */ 578927, 578767, 58654, 578121, 578121, 578121, 579917, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 24218 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578945, 836169, 578121, 3027, 578077, 578077,
  /* 24231 */ 578077, 578077, 578077, 578077, 578077, 580570, 578077, 580572, 578077, 580574, 578077, 57907, 57907,
  /* 24244 */ 57907, 57907, 57907, 0, 578121, 578121, 578121, 578121, 578121, 289, 62477, 0, 0, 57907, 57907, 57907,
  /* 24260 */ 57907, 57907, 60390, 57907, 60392, 57907, 60394, 57907, 578121, 578121, 578121, 578121, 578121, 578077,
  /* 24274 */ 578077, 578121, 578077, 57907, 578077, 580156, 57907, 59966, 578121, 580160, 578121, 578121, 580594,
  /* 24287 */ 578121, 580596, 578121, 580598, 578121, 578077, 0, 0, 0, 0, 0, 0, 0, 0, 1214, 0, 0, 0, 0, 0, 578753, 832,
  /* 24309 */ 0, 0, 0, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 0, 0, 0, 0, 0, 0, 0, 582037, 582037, 582037,
  /* 24332 */ 582037, 0, 0, 0, 582037, 0, 0, 311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 732, 0, 0, 0, 314, 0, 0, 0,
  /* 24362 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1090, 0, 0, 421, 429, 420, 429, 0, 311, 429, 442, 451, 464, 464, 464, 464,
  /* 24388 */ 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 485, 490, 490, 501, 490, 490, 490,
  /* 24409 */ 490, 490, 490, 490, 490, 516, 516, 529, 529, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 516, 530,
  /* 24430 */ 530, 530, 530, 530, 578081, 578081, 578081, 57910, 578125, 578081, 57910, 578081, 578081, 57910, 57910,
  /* 24445 */ 57910, 578125, 578081, 578081, 578081, 578081, 578125, 578125, 578125, 578153, 578154, 57963, 578125,
  /* 24458 */ 578154, 578125, 578125, 578125, 578125, 578125, 578125, 578125, 578125, 578154, 57963, 578154, 578153,
  /* 24471 */ 578153, 1, 12290, 3, 0, 0, 700, 0, 0, 0, 0, 0, 700, 0, 0, 0, 578077, 578077, 578077, 578077, 580609,
  /* 24492 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 57907, 60336, 57907, 60337, 57907, 57907, 57907,
  /* 24506 */ 57907, 57907, 57907, 58278, 57907, 57907, 57907, 57907, 57907, 0, 578121, 578121, 578121, 578121, 578121,
  /* 24521 */ 578121, 578121, 578121, 578077, 2967, 0, 2968, 0, 0, 0, 2771, 0, 0, 0, 1066, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24546 */ 0, 0, 0, 0, 0, 1556, 578077, 578077, 578757, 578758, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 24562 */ 578077, 578077, 578772, 578077, 578776, 578077, 57907, 57907, 57907, 57907, 57907, 0, 578121, 578121,
  /* 24576 */ 578121, 578121, 578121, 53537, 62477, 0, 0, 0, 0, 0, 0, 1574, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 578077,
  /* 24599 */ 578780, 578077, 578782, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 24612 */ 578077, 578077, 578077, 1061405, 578077, 578077, 1507, 1508, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24634 */ 762, 0, 578753, 0, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579184,
  /* 24649 */ 578077, 578077, 578077, 57907, 57907, 57907, 57907, 578121, 578121, 578121, 578121, 200704, 0, 578077,
  /* 24663 */ 578077, 57907, 57907, 58241, 58245, 57907, 57907, 57907, 57907, 57907, 58265, 57907, 58269, 57907, 58274,
  /* 24678 */ 578077, 578077, 578077, 579207, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 24691 */ 578077, 578077, 578077, 578411, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579221, 579222,
  /* 24704 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578812, 578077, 578077,
  /* 24717 */ 578077, 578077, 578077, 57907, 57907, 59089, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 24731 */ 57907, 57907, 57907, 57907, 57907, 59413, 57907, 57907, 57907, 57907, 57907, 59103, 59104, 57907, 57907,
  /* 24746 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59111, 57907, 57907, 57907, 59114, 574817,
  /* 24761 */ 0, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579336, 578121, 578121,
  /* 24775 */ 578121, 578077, 0, 0, 0, 0, 0, 635421, 578077, 578077, 578077, 578077, 578077, 635443, 0, 1921, 0, 0, 0,
  /* 24794 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 952, 952, 952, 0, 1947, 0, 0, 0, 1574, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 334,
  /* 24825 */ 335, 0, 0, 0, 0, 0, 0, 1971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1119, 0, 0, 579585, 579586, 578077,
  /* 24852 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 57907,
  /* 24865 */ 57907, 58644, 58645, 57907, 57907, 57907, 57907, 57907, 59704, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 24880 */ 57907, 57907, 57907, 57907, 57907, 59126, 57907, 57907, 57907, 57907, 0, 2495, 0, 0, 0, 2498, 2279, 0,
  /* 24898 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 60147, 57907, 57907, 60148, 57907, 57907,
  /* 24912 */ 57907, 57907, 578077, 580056, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 24925 */ 578077, 578077, 578077, 578077, 578077, 579246, 578077, 0, 0, 0, 0, 0, 2629, 0, 0, 0, 2633, 0, 0, 0, 0, 0,
  /* 24947 */ 0, 0, 0, 569344, 363, 0, 0, 0, 0, 0, 0, 0, 0, 578077, 578077, 713245, 578077, 578077, 578077, 578077,
  /* 24967 */ 580520, 0, 0, 0, 2659, 0, 0, 0, 0, 0, 0, 0, 0, 2665, 0, 0, 0, 0, 0, 0, 0, 610708, 610920, 610920, 610920,
  /* 24992 */ 0, 0, 0, 610920, 0, 57907, 60047, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 25009 */ 57907, 57907, 57907, 60057, 60058, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 25024 */ 57907, 57907, 57907, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 57907, 60164, 57907, 578121,
  /* 25038 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579366,
  /* 25051 */ 578121, 578121, 0, 578077, 580565, 580566, 578077, 578077, 578077, 580569, 578077, 578077, 578077, 578077,
  /* 25065 */ 578077, 578077, 57907, 60385, 60386, 57907, 57907, 57907, 60389, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 25080 */ 578121, 580589, 580590, 578121, 578121, 578121, 578121, 579346, 578121, 578121, 578121, 578121, 578121,
  /* 25093 */ 578121, 578121, 578121, 578121, 578121, 578121, 579352, 578121, 578121, 578121, 578121, 578121, 580593,
  /* 25106 */ 578121, 578121, 578121, 578121, 578121, 578121, 578077, 0, 0, 0, 0, 0, 0, 0, 0, 3025, 0, 60486, 578121,
  /* 25125 */ 580679, 0, 578077, 57907, 578121, 0, 578077, 57907, 578121, 0, 578077, 57907, 578121, 0, 0, 0, 0, 0, 740,
  /* 25144 */ 0, 0, 0, 0, 740, 0, 746, 0, 0, 0, 0, 0, 0, 305, 0, 413696, 0, 0, 0, 0, 0, 0, 0, 0, 652, 0, 0, 0, 0, 0, 0,
  /* 25175 */ 0, 0, 710, 0, 0, 0, 714, 0, 0, 717, 322, 322, 372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1185, 578753,
  /* 25203 */ 832, 0, 0, 372, 0, 431, 437, 0, 443, 452, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465,
  /* 25226 */ 465, 465, 465, 465, 465, 465, 491, 491, 502, 491, 491, 491, 491, 491, 491, 491, 491, 517, 517, 517, 517,
  /* 25247 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 578082, 578082, 578082, 57911, 578126, 578082,
  /* 25265 */ 57911, 578082, 578082, 57911, 57911, 57911, 578126, 578082, 578082, 578082, 578082, 578126, 578126,
  /* 25278 */ 578126, 578126, 578082, 57911, 578126, 578082, 578126, 578126, 578126, 578126, 578126, 578126, 578126,
  /* 25291 */ 578126, 578082, 57911, 578082, 578126, 578126, 1, 12290, 3, 578121, 578515, 578121, 578121, 578121,
  /* 25305 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579382, 578121, 0,
  /* 25319 */ 1078, 0, 1080, 1081, 0, 1083, 1084, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1565, 0, 0, 0, 0, 0, 0, 1122, 1123, 0, 0,
  /* 25346 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1061, 1062, 0, 0, 1182, 0, 0, 0, 0, 638976, 0, 0, 0, 0, 0, 0, 937984,
  /* 25375 */ 0, 0, 0, 0, 0, 771, 962560, 0, 0, 775, 776, 0, 676, 0, 0, 0, 0, 0, 0, 679, 680, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25405 */ 458752, 458752, 458752, 458752, 458752, 458752, 458752, 458752, 458752, 0, 939062, 0, 1148, 0, 798720,
  /* 25420 */ 1200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 0, 0, 0, 0, 0, 0, 0, 638976, 0, 0, 0, 939166, 0, 0, 0, 0, 0, 0, 0,
  /* 25450 */ 0, 578753, 832, 578077, 578077, 639517, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 25464 */ 578077, 578077, 578077, 578077, 578077, 578420, 578077, 578077, 578077, 799261, 578077, 578077, 578077,
  /* 25477 */ 578077, 578077, 578077, 578077, 578077, 578077, 578792, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 25490 */ 741917, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579850, 578077, 578077,
  /* 25503 */ 578077, 578077, 578077, 578077, 939246, 578077, 578800, 578077, 578077, 578803, 578077, 578077, 578077,
  /* 25516 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579242, 578077, 578077, 578077, 578077, 578077,
  /* 25529 */ 58690, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 25544 */ 57907, 59086, 58713, 57907, 57907, 57907, 57907, 57907, 574817, 578753, 953, 578121, 578121, 639561,
  /* 25558 */ 578121, 578121, 578121, 578121, 578077, 578077, 578077, 579406, 578121, 578077, 57907, 578121, 578077,
  /* 25571 */ 578077, 578077, 578077, 0, 0, 614400, 578121, 578077, 57907, 578121, 578077, 578077, 578077, 578077,
  /* 25585 */ 57907, 57907, 57907, 57907, 578121, 578121, 578121, 578121, 1887, 0, 57907, 57907, 57907, 59226, 578121,
  /* 25600 */ 578121, 578121, 579422, 0, 1887, 0, 0, 0, 0, 0, 1889, 0, 1896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25627 */ 1163, 1164, 696861, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 25640 */ 578077, 578077, 578077, 578077, 579558, 59456, 57907, 59458, 57907, 57907, 57907, 57907, 57907, 57907, 0,
  /* 25655 */ 0, 0, 0, 578121, 578121, 578121, 578077, 0, 0, 0, 0, 1048576, 578077, 580656, 578077, 578077, 578077,
  /* 25672 */ 1049117, 57907, 579715, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578077,
  /* 25685 */ 578077, 578077, 578077, 578121, 578077, 57907, 578121, 578077, 578077, 578077, 578077, 0, 0, 0, 0, 0,
  /* 25701 */ 2266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 347, 0, 0, 0, 0, 0, 578077, 579819, 578077, 578077, 578077, 578077,
  /* 25724 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579570, 578077, 57907,
  /* 25737 */ 59702, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 25752 */ 59901, 57907, 578121, 578121, 579942, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 25765 */ 578121, 578121, 578121, 578121, 578121, 946761, 578121, 578121, 57907, 57907, 57907, 995891, 57907, 57907,
  /* 25779 */ 57907, 57907, 57907, 59910, 57907, 57907, 57907, 57907, 57907, 57907, 58294, 0, 578121, 578121, 578121,
  /* 25794 */ 578121, 578121, 578121, 803401, 578121, 578121, 578121, 578121, 995913, 578121, 578121, 578121, 578121,
  /* 25807 */ 578121, 580140, 578121, 578121, 578121, 578121, 578121, 578121, 578976, 578121, 578121, 578121, 578121,
  /* 25820 */ 578982, 578121, 578121, 578121, 578121, 2637, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1580, 0,
  /* 25843 */ 1122304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1208, 0, 57907, 57907, 1122867, 578121, 578121, 578121,
  /* 25866 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 1061449, 578121, 578121,
  /* 25879 */ 0, 0, 0, 2974, 0, 0, 0, 0, 578077, 578077, 578077, 578077, 578077, 578077, 580519, 578077, 57907, 57907,
  /* 25897 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59067, 59068, 57907, 57907, 57907, 57907,
  /* 25912 */ 57907, 57907, 60063, 60065, 57907, 57907, 60067, 57907, 1131059, 1139251, 578121, 578121, 578121, 578121,
  /* 25926 */ 579387, 578121, 578121, 578121, 578121, 579392, 578121, 578121, 578121, 578121, 578121, 578121, 578077,
  /* 25939 */ 578077, 57907, 578121, 0, 0, 0, 0, 0, 0, 0, 0, 401408, 401408, 401408, 401408, 401408, 1, 12290, 3,
  /* 25958 */ 578121, 578121, 578121, 580595, 578121, 578121, 578121, 578121, 578077, 0, 0, 0, 0, 0, 0, 0, 0, 1629,
  /* 25976 */ 1630, 0, 1631, 0, 0, 0, 0, 324, 325, 326, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207, 0, 0, 0, 0, 0, 323,
  /* 26006 */ 371, 326, 370, 0, 0, 0, 0, 0, 0, 0, 0, 0, 349, 350, 351, 0, 0, 0, 0, 323, 0, 0, 370, 370, 400, 0, 326, 0,
  /* 26034 */ 0, 0, 0, 0, 0, 0, 0, 0, 1963, 0, 0, 0, 0, 0, 0, 0, 0, 0, 325, 0, 0, 0, 323, 453, 466, 466, 466, 466, 466,
  /* 26063 */ 466, 466, 479, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 492, 492, 466, 492, 492, 507, 509,
  /* 26084 */ 492, 492, 507, 492, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 535, 518, 518, 518,
  /* 26105 */ 518, 518, 578083, 578083, 578083, 57912, 578127, 578083, 57912, 578083, 578083, 57912, 57912, 57912,
  /* 26119 */ 578127, 578083, 578083, 578083, 578083, 578127, 578127, 578127, 578127, 578083, 57912, 578127, 578083,
  /* 26132 */ 578127, 578127, 578127, 578127, 578127, 578127, 578127, 578127, 578083, 57912, 578083, 578127, 578127, 1,
  /* 26146 */ 12290, 3, 660, 661, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 671, 672, 0, 0, 0, 0, 0, 0, 1937, 0, 0, 0, 0, 0, 0, 0,
  /* 26176 */ 0, 0, 322, 396, 0, 0, 0, 322, 0, 0, 0, 0, 705, 706, 0, 0, 0, 0, 0, 712, 0, 0, 0, 716, 0, 0, 0, 0, 0, 782,
  /* 26206 */ 0, 0, 0, 0, 0, 0, 578077, 578077, 578369, 578077, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 26224 */ 57907, 57907, 59066, 57907, 57907, 57907, 57907, 0, 0, 578121, 578121, 578121, 578121, 580115, 580116,
  /* 26239 */ 578121, 578121, 578121, 578121, 578077, 578077, 578077, 579233, 578121, 578077, 57907, 578121, 578077,
  /* 26252 */ 578077, 578077, 578077, 0, 0, 0, 578121, 578077, 57907, 578121, 578077, 578077, 578077, 578563, 718, 0, 0,
  /* 26269 */ 0, 0, 0, 0, 725, 0, 0, 0, 729, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 0, 0, 0, 372, 0, 40960, 0, 0, 0, 767,
  /* 26297 */ 768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 730, 0, 0, 0, 0, 784, 0, 786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26330 */ 744, 0, 0, 0, 0, 0, 847872, 0, 921600, 0, 958464, 0, 0, 0, 0, 921600, 958464, 0, 0, 0, 0, 0, 0, 0, 876544,
  /* 26355 */ 0, 0, 0, 0, 0, 0, 0, 0, 297, 25219, 0, 0, 301, 594567, 0, 0, 958464, 958464, 921600, 0, 0, 0, 0, 0, 0, 0,
  /* 26381 */ 786, 0, 847872, 0, 922354, 0, 0, 0, 0, 0, 792, 665, 873274, 0, 0, 0, 0, 578077, 578077, 578371, 578077,
  /* 26402 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 685753, 57907, 57907, 57907, 57907, 59071,
  /* 26417 */ 0, 0, 0, 958464, 0, 705, 0, 0, 813, 0, 0, 0, 0, 0, 813, 813, 816, 0, 0, 0, 786, 0, 0, 0, 0, 0, 824, 0, 0,
  /* 26446 */ 0, 0, 0, 0, 0, 1129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86016, 0, 86016, 86016, 86016, 86016, 86016, 0, 0, 0, 0,
  /* 26472 */ 784, 0, 0, 0, 824, 922354, 824, 0, 578077, 578077, 578077, 578375, 578077, 578381, 578077, 578077, 848413,
  /* 26489 */ 578077, 922463, 578077, 959005, 578077, 578077, 578409, 578412, 578417, 578077, 578424, 58276, 58279,
  /* 26502 */ 58284, 57907, 58291, 57907, 57907, 0, 578121, 578121, 578121, 578496, 578121, 578502, 578121, 578121,
  /* 26516 */ 578121, 578121, 579360, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579367, 578121,
  /* 26529 */ 578121, 578121, 578121, 579373, 579374, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 26542 */ 578121, 578121, 579684, 578121, 578121, 578121, 578121, 578121, 848457, 578121, 922584, 578121, 959049,
  /* 26555 */ 578121, 578121, 578530, 578533, 578538, 578121, 578545, 578121, 578121, 578121, 578121, 578121, 578955,
  /* 26568 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580268, 578121, 578121,
  /* 26581 */ 578121, 578121, 578121, 1093, 1094, 0, 0, 0, 1098, 0, 0, 0, 363, 363, 0, 0, 0, 0, 0, 0, 0, 1143, 0, 0, 0,
  /* 26606 */ 0, 0, 0, 0, 0, 297, 298, 0, 0, 301, 302, 0, 0, 1137, 739, 0, 0, 0, 1090, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26635 */ 363, 363, 363, 0, 0, 0, 0, 0, 0, 1154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 746, 0, 0, 0, 578077, 578077,
  /* 26663 */ 578781, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578795, 578077, 578077,
  /* 26676 */ 578077, 57907, 57907, 578121, 578121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 578077, 578821, 578077, 578077,
  /* 26696 */ 578077, 578077, 578077, 578077, 578830, 578077, 578077, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 26710 */ 57907, 60225, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 58650, 57907, 57907, 57907, 57907,
  /* 26725 */ 57907, 57907, 58664, 57907, 57907, 58668, 57907, 57907, 57907, 57907, 57907, 57907, 59434, 57907, 57907,
  /* 26740 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 0, 0, 0, 2123, 578121, 578121, 578121, 57907, 57907,
  /* 26756 */ 58692, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 58708, 57907, 57907, 57907, 57907,
  /* 26771 */ 57907, 57907, 58681, 57907, 57907, 926259, 57907, 57907, 57907, 57907, 57907, 58689, 57907, 57907, 57907,
  /* 26786 */ 58717, 57907, 57907, 574817, 578753, 953, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578077,
  /* 26800 */ 578077, 578077, 578077, 0, 578928, 578768, 58655, 578121, 578121, 578923, 578121, 578121, 578121, 578121,
  /* 26814 */ 578121, 578121, 578937, 578121, 578121, 578941, 578121, 578121, 578121, 578121, 578121, 578975, 578121,
  /* 26827 */ 578121, 578979, 578121, 578121, 578121, 578121, 578984, 578121, 578121, 578965, 578121, 578121, 578121,
  /* 26840 */ 578121, 578121, 578121, 578121, 578121, 578121, 578981, 578121, 578121, 578121, 578121, 578121, 578077,
  /* 26853 */ 578077, 578121, 578077, 57907, 580155, 578077, 59965, 57907, 580159, 578121, 578121, 578990, 578121,
  /* 26866 */ 578121, 578121, 578121, 578121, 578077, 578077, 578077, 578077, 0, 578121, 578077, 57907, 578121, 578121,
  /* 26880 */ 0, 578077, 57907, 578121, 3148, 580685, 60494, 580687, 0, 578077, 57907, 578121, 0, 0, 0, 0, 1521, 0, 0,
  /* 26899 */ 1523, 966656, 1524, 0, 1526, 1527, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 0, 0, 0, 419, 0, 40960, 0, 1532, 0,
  /* 26923 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1907, 1544, 0, 0, 0, 0, 0, 1549, 0, 0, 1552, 0, 1554, 0, 0, 0,
  /* 26953 */ 0, 0, 0, 0, 45056, 49152, 0, 368, 368, 0, 0, 40960, 368, 0, 968180, 1558, 0, 0, 0, 0, 0, 0, 0, 0, 1567,
  /* 26978 */ 1568, 0, 0, 0, 0, 0, 0, 0, 987816, 0, 987943, 0, 666, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 131072, 0, 0, 0,
  /* 27004 */ 0, 40960, 0, 0, 0, 0, 1110016, 0, 0, 1574, 0, 0, 0, 0, 1576, 1577, 0, 0, 0, 0, 0, 0, 0, 995328, 0, 0, 0,
  /* 27031 */ 0, 0, 0, 0, 0, 0, 1927, 0, 0, 1928, 0, 0, 0, 0, 0, 0, 0, 1614, 0, 0, 1616, 0, 0, 0, 1620, 0, 0, 0, 1624,
  /* 27060 */ 512000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1616, 0, 0, 1633, 679936, 679936, 578753, 0, 579174, 578077, 579176,
  /* 27081 */ 579177, 578077, 579179, 578077, 578077, 578077, 680477, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 27094 */ 1111717, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579826, 578077, 578077,
  /* 27107 */ 578077, 578077, 579831, 578077, 578077, 578077, 579219, 579220, 578077, 578077, 578077, 578077, 578077,
  /* 27120 */ 578077, 578077, 579228, 578077, 578077, 578077, 1069597, 579247, 59056, 57907, 59058, 59059, 57907, 59061,
  /* 27134 */ 57907, 57907, 57907, 680499, 57907, 57907, 57907, 57907, 57907, 0, 0, 0, 0, 0, 0, 578121, 578121, 578121,
  /* 27152 */ 578121, 579915, 57907, 57907, 57907, 57907, 59077, 57907, 57907, 57907, 782899, 57907, 57907, 57907,
  /* 27166 */ 59084, 57907, 59085, 57907, 57907, 57907, 57907, 57907, 57907, 574817, 578753, 953, 578121, 578121,
  /* 27180 */ 578917, 578918, 578121, 578121, 578121, 578077, 0, 0, 0, 0, 0, 578077, 578077, 580657, 580658, 578077,
  /* 27196 */ 578077, 57907, 57907, 57907, 60221, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 27211 */ 0, 2121, 0, 0, 578121, 578121, 578121, 57907, 59101, 59102, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 27227 */ 57907, 59110, 57907, 57907, 57907, 1069619, 57907, 57907, 57907, 57907, 57907, 57907, 578121, 580541,
  /* 27241 */ 578121, 580542, 578121, 578121, 578121, 578121, 578121, 578121, 578077, 578077, 57907, 578121, 2906, 0,
  /* 27255 */ 2908, 0, 0, 0, 57907, 57907, 57907, 57907, 57907, 1111791, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 27271 */ 57907, 57907, 57907, 59129, 574817, 0, 579326, 578121, 579328, 579329, 578121, 579331, 578121, 578121,
  /* 27285 */ 578121, 680521, 578121, 578121, 578121, 578121, 578121, 578995, 578121, 578077, 578998, 578077, 578077, 0,
  /* 27299 */ 578121, 578077, 57907, 578121, 578121, 578121, 579371, 579372, 578121, 578121, 578121, 578121, 578121,
  /* 27312 */ 578121, 578121, 579380, 578121, 578121, 578121, 1069641, 579399, 578121, 578121, 579402, 578077, 578077,
  /* 27325 */ 579405, 578077, 578121, 578077, 57907, 579410, 579220, 578077, 579413, 578077, 57907, 57907, 57907, 57907,
  /* 27339 */ 57907, 57907, 57907, 57907, 59064, 57907, 57907, 57907, 57907, 57907, 57907, 0, 0, 953, 578121, 578121,
  /* 27355 */ 578121, 578121, 578121, 578121, 578121, 578077, 0, 0, 3094, 0, 0, 0, 578077, 578077, 59102, 57907, 59225,
  /* 27372 */ 57907, 579372, 578121, 579421, 578121, 0, 1887, 0, 0, 0, 0, 0, 1889, 0, 0, 0, 0, 0, 1898, 0, 0, 1901,
  /* 27394 */ 1902, 0, 0, 0, 1906, 0, 0, 0, 0, 0, 0, 2198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 385, 0, 0, 0, 0, 0, 385, 1134592,
  /* 27423 */ 0, 0, 0, 1056768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1189, 0, 0, 0, 0, 0, 0, 0, 0, 1935, 0, 0, 0, 1939, 0,
  /* 27453 */ 0, 0, 0, 0, 0, 0, 0, 1926, 0, 0, 0, 0, 0, 0, 0, 0, 1515, 0, 0, 0, 0, 0, 0, 0, 0, 1537, 0, 0, 0, 0, 0, 0,
  /* 27485 */ 0, 0, 1564, 0, 0, 0, 0, 0, 0, 0, 0, 1114, 0, 0, 0, 0, 0, 0, 0, 0, 1130, 0, 0, 0, 0, 0, 0, 0, 0, 1144, 0,
  /* 27516 */ 0, 0, 0, 0, 0, 0, 0, 1157, 0, 0, 0, 0, 0, 0, 0, 0, 1173, 0, 0, 1176, 0, 0, 0, 0, 0, 0, 0, 0, 1958, 0,
  /* 27546 */ 1960, 0, 0, 0, 0, 0, 0, 0, 1967, 0, 0, 0, 0, 0, 796, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 796, 0, 0, 0, 0,
  /* 27578 */ 1972, 0, 0, 0, 0, 1976, 0, 0, 0, 0, 0, 0, 0, 0, 1950, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1992, 0, 0, 0, 1902,
  /* 27608 */ 0, 1984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1993, 578077, 578077, 579545, 578077, 579547, 578077, 578077,
  /* 27628 */ 578077, 578077, 578077, 578077, 579554, 578077, 579556, 578077, 578077, 57907, 58238, 57907, 57907, 57907,
  /* 27642 */ 58253, 57907, 57907, 873367, 57907, 57907, 57907, 58271, 57907, 578077, 578077, 578077, 578077, 579575,
  /* 27656 */ 579576, 578077, 578077, 578077, 578077, 578077, 578077, 1057309, 578077, 578077, 578077, 57907, 57907,
  /* 27669 */ 578121, 578121, 0, 0, 0, 0, 0, 0, 0, 0, 2848, 57907, 57907, 57907, 1135155, 57907, 57907, 1147443,
  /* 27687 */ 1151539, 57907, 0, 0, 0, 0, 578121, 578121, 578121, 578077, 0, 0, 0, 3119, 0, 578077, 578077, 578077,
  /* 27705 */ 578077, 580659, 578077, 57907, 578121, 1135177, 578121, 578121, 1147465, 1151561, 578121, 578121, 578121,
  /* 27718 */ 578121, 578077, 578077, 578077, 578077, 579671, 579547, 59414, 578121, 578077, 579729, 578077, 578077,
  /* 27731 */ 57907, 59539, 57907, 57907, 578121, 579733, 578121, 578121, 1887, 0, 0, 0, 0, 0, 797, 0, 0, 0, 0, 0, 0, 0,
  /* 27753 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 946176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 331776, 2233, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27784 */ 0, 0, 0, 0, 0, 1073152, 0, 491520, 0, 0, 0, 0, 290816, 0, 0, 0, 2279, 0, 0, 0, 0, 578077, 578077, 578077,
  /* 27808 */ 578077, 578077, 578077, 578077, 580210, 578077, 578077, 578077, 578077, 578077, 578077, 578827, 578077,
  /* 27821 */ 578077, 578077, 578077, 57907, 58643, 57907, 57907, 57907, 578077, 578077, 578077, 578077, 668189, 578077,
  /* 27835 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578793, 578077, 578796,
  /* 27848 */ 578077, 578077, 750109, 578077, 579834, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 27861 */ 578077, 578077, 578077, 578077, 578077, 579214, 578077, 578077, 578077, 946717, 578077, 578077, 579846,
  /* 27874 */ 578077, 578077, 578077, 1020445, 578077, 578077, 578077, 578077, 578077, 578077, 1073693, 578077, 578077,
  /* 27887 */ 578077, 578077, 579858, 578077, 578077, 578077, 578077, 578077, 57907, 57907, 57907, 57907, 57907, 668211,
  /* 27901 */ 57907, 57907, 57907, 1020467, 57907, 57907, 57907, 57907, 57907, 57907, 1073715, 57907, 57907, 57907,
  /* 27915 */ 57907, 59712, 668233, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 27928 */ 578121, 750153, 578121, 579928, 578121, 578121, 578121, 578121, 741961, 578121, 578121, 578121, 578121,
  /* 27941 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579698, 578121, 578121, 578121, 578121, 579940,
  /* 27954 */ 578121, 578121, 578121, 1020489, 578121, 578121, 578121, 578121, 578121, 578121, 1073737, 578121, 578121,
  /* 27967 */ 578121, 578121, 578121, 579347, 578121, 578121, 578121, 782921, 578121, 578121, 578121, 579354, 578121,
  /* 27980 */ 579355, 579952, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578077, 578077, 578077, 578121,
  /* 27993 */ 578077, 57907, 578121, 578077, 578077, 578077, 578412, 0, 0, 0, 578121, 578077, 57907, 578121, 578375,
  /* 28008 */ 578077, 578562, 578417, 0, 0, 2455, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 741376, 0, 0, 0, 0, 0, 0, 2279, 0,
  /* 28033 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 580573, 578077, 580575,
  /* 28046 */ 57907, 57907, 2494, 0, 0, 0, 0, 0, 2279, 0, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 28063 */ 578077, 578789, 578077, 578077, 578077, 578077, 578077, 578077, 578797, 578077, 578077, 578077, 580058,
  /* 28076 */ 578077, 578077, 578077, 578077, 578077, 1024541, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 28089 */ 762397, 578077, 578077, 578077, 578077, 578077, 580407, 578077, 578077, 57907, 57907, 57907, 57907,
  /* 28102 */ 741939, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59426, 57907, 57907,
  /* 28117 */ 57907, 59429, 57907, 59904, 57907, 57907, 57907, 57907, 57907, 1024563, 57907, 57907, 57907, 57907, 57907,
  /* 28132 */ 57907, 57907, 57907, 60294, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580134,
  /* 28145 */ 578121, 578121, 578121, 578121, 578121, 1024585, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 28158 */ 578121, 578077, 578077, 578077, 578121, 578077, 57907, 578121, 578077, 0, 0, 1138688, 0, 0, 0, 0, 0, 0,
  /* 28176 */ 2641, 299008, 2642, 0, 315392, 0, 2644, 0, 0, 2658, 0, 0, 2644, 0, 0, 2664, 688128, 0, 884736, 0, 0,
  /* 28197 */ 487424, 0, 0, 0, 0, 0, 799, 0, 0, 1093632, 0, 0, 673, 0, 1093632, 0, 802, 0, 2669, 578077, 578077, 578077,
  /* 28219 */ 578077, 578077, 578077, 688669, 578077, 578077, 578077, 721437, 578077, 578077, 578077, 57907, 57907,
  /* 28232 */ 578121, 578121, 0, 0, 0, 0, 0, 2846, 0, 0, 0, 0, 0, 0, 0, 1040384, 0, 0, 2783, 0, 516096, 578077, 578077,
  /* 28255 */ 578077, 57907, 57907, 578121, 578121, 0, 0, 0, 2844, 0, 0, 2847, 0, 0, 578077, 580218, 578077, 578077,
  /* 28273 */ 578077, 578077, 578077, 885277, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578807,
  /* 28286 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 580228, 580230, 578077, 578077, 580232, 578077,
  /* 28299 */ 1131037, 1139229, 57907, 57907, 57907, 57907, 57907, 57907, 688691, 57907, 57907, 57907, 57907, 57907,
  /* 28313 */ 57907, 580540, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578540, 578121,
  /* 28326 */ 578121, 578121, 578121, 578121, 578121, 57907, 57907, 721459, 57907, 57907, 57907, 57907, 60053, 57907,
  /* 28340 */ 57907, 57907, 57907, 57907, 885299, 57907, 57907, 57907, 57907, 57907, 57907, 59706, 57907, 57907, 57907,
  /* 28355 */ 57907, 57907, 57907, 59710, 57907, 57907, 57907, 57907, 57907, 57907, 59894, 57907, 57907, 57907, 57907,
  /* 28370 */ 57907, 57907, 57907, 57907, 57907, 0, 0, 0, 0, 578121, 578121, 578121, 578121, 578121, 578121, 885321,
  /* 28386 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580282, 580284, 578121, 578121, 578121,
  /* 28399 */ 578121, 579679, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 28412 */ 580269, 578121, 578121, 578121, 578121, 580286, 578121, 1131081, 1139273, 580287, 580288, 578077, 578121,
  /* 28425 */ 578077, 57907, 578077, 580291, 57907, 60101, 578121, 580295, 0, 0, 0, 0, 0, 2764, 0, 0, 950272, 0, 0, 0,
  /* 28445 */ 0, 0, 0, 311296, 0, 0, 2779, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 578077, 578077, 659997, 578077, 578077, 578077,
  /* 28468 */ 578077, 580325, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 953068, 578077,
  /* 28481 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59063, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 28496 */ 58659, 57907, 58663, 57907, 57907, 58667, 57907, 58669, 57907, 57907, 57907, 57907, 578121, 578121,
  /* 28510 */ 660041, 578121, 578121, 578121, 578121, 580361, 578121, 578121, 578121, 578121, 578121, 578077, 578077,
  /* 28523 */ 578121, 578077, 57907, 580290, 578077, 60100, 57907, 580294, 578121, 580375, 578077, 578077, 57907, 57907,
  /* 28537 */ 578121, 578121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2440, 0, 0, 2850, 2771, 2852, 0, 0, 2854, 0, 0, 0, 0, 0, 0, 0,
  /* 28564 */ 0, 0, 363, 0, 0, 0, 0, 0, 0, 580410, 578077, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 28583 */ 57907, 57907, 57907, 57907, 57907, 57907, 59070, 57907, 57907, 60233, 57907, 578121, 578121, 578121,
  /* 28597 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578547, 578121, 578121, 578121,
  /* 28610 */ 253952, 0, 2771, 0, 2914, 0, 0, 0, 0, 0, 0, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 28628 */ 578077, 578077, 579543, 578077, 578077, 578077, 580464, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 28641 */ 578077, 57907, 57907, 57907, 57907, 57907, 57907, 60340, 57907, 57907, 57907, 60287, 57907, 57907, 57907,
  /* 28656 */ 57907, 57907, 57907, 57907, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 28669 */ 578121, 578121, 578121, 578121, 580494, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578077, 0,
  /* 28683 */ 0, 0, 0, 0, 2970, 2771, 57907, 57907, 57907, 57907, 57907, 60347, 578121, 578121, 578121, 578121, 578121,
  /* 28700 */ 578121, 578121, 578121, 578121, 578121, 905801, 578121, 578121, 578121, 578121, 578121, 57907, 57907,
  /* 28713 */ 57907, 774707, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 578121, 578121, 578121, 578121, 578121,
  /* 28727 */ 578121, 580545, 578121, 578121, 578121, 774729, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 28740 */ 578077, 671744, 3065, 0, 0, 0, 0, 0, 0, 0, 1172, 0, 0, 0, 0, 0, 0, 1179, 0, 954368, 0, 0, 580607, 672285,
  /* 28764 */ 580608, 578077, 578077, 791069, 578077, 954909, 578077, 578077, 578077, 578077, 60422, 672307, 60423,
  /* 28777 */ 57907, 57907, 791091, 57907, 954931, 57907, 57907, 57907, 57907, 580621, 672329, 580622, 578121, 578121,
  /* 28791 */ 578121, 578121, 579691, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 28804 */ 578121, 579926, 578121, 578121, 578121, 578121, 791113, 578121, 954953, 578121, 578121, 578121, 578121,
  /* 28817 */ 580628, 0, 0, 0, 0, 0, 0, 578077, 578077, 578077, 578077, 579539, 578077, 578077, 578077, 578077, 578077,
  /* 28834 */ 578077, 60468, 57907, 57907, 57907, 1049139, 578121, 580664, 578121, 578121, 578121, 1049161, 0, 0, 0, 0,
  /* 28850 */ 578077, 578077, 578077, 578077, 578077, 580209, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 28863 */ 578077, 579578, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 57907, 633481, 57907,
  /* 28876 */ 57907, 57907, 57907, 57907, 57907, 0, 0, 0, 327, 328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1518, 0, 0, 499712,
  /* 28901 */ 0, 0, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1506, 0, 0, 0, 0, 367, 0, 0, 0, 375, 377, 0, 0, 0, 0,
  /* 28933 */ 0, 0, 0, 0, 1962, 0, 1964, 1965, 0, 0, 0, 0, 0, 0, 410, 0, 0, 0, 410, 45056, 49152, 0, 367, 367, 0, 422,
  /* 28959 */ 40960, 367, 0, 0, 367, 422, 499, 503, 499, 499, 508, 499, 499, 499, 508, 499, 422, 422, 328, 422, 0, 0,
  /* 28981 */ 422, 0, 422, 0, 0, 0, 0, 0, 0, 0, 0, 1987, 0, 0, 0, 0, 0, 0, 0, 0, 2200, 0, 0, 0, 0, 0, 0, 0, 0, 2225, 0,
  /* 29012 */ 0, 0, 0, 2230, 0, 2232, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422,
  /* 29034 */ 578084, 578084, 578084, 57913, 578128, 578084, 57913, 578084, 578084, 57913, 57913, 57913, 578128, 578084,
  /* 29048 */ 578084, 578084, 578084, 578128, 578128, 578128, 578128, 578084, 57913, 578128, 578084, 578128, 578128,
  /* 29061 */ 578128, 578128, 578128, 578128, 578128, 578128, 578084, 57913, 578084, 578128, 578128, 1, 12290, 3, 0, 0,
  /* 29077 */ 0, 266240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 747, 0, 0, 0, 578121, 864841, 578121, 578121, 578121,
  /* 29100 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578490, 578121, 578121, 578121,
  /* 29113 */ 578121, 953104, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578077,
  /* 29126 */ 578077, 578077, 578077, 578121, 578077, 578121, 578369, 578077, 578077, 578077, 0, 0, 0, 578121, 578077,
  /* 29141 */ 57907, 578490, 578077, 578077, 578077, 578077, 578077, 578394, 578077, 578077, 578077, 578077, 578077,
  /* 29154 */ 578077, 578077, 578077, 578077, 578077, 578833, 57907, 57907, 57907, 57907, 57907, 0, 0, 0, 0, 1067, 0, 0,
  /* 29172 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1954, 0, 0, 0, 0, 1197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1592, 0,
  /* 29204 */ 0, 0, 0, 57907, 58648, 57907, 57907, 57907, 57907, 57907, 58660, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 29221 */ 57907, 57907, 60393, 57907, 60395, 578121, 578121, 578121, 578121, 578121, 60152, 57907, 57907, 57907,
  /* 29235 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59113, 57907, 57907,
  /* 29250 */ 57907, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580362, 578121, 578121, 578121,
  /* 29263 */ 578121, 578121, 579693, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 29276 */ 579720, 578077, 578077, 579722, 579723, 578121, 578077, 57907, 57907, 57907, 57907, 57907, 635465, 578121,
  /* 29290 */ 578121, 578121, 578121, 578121, 0, 0, 0, 0, 578077, 578077, 578077, 578077, 664093, 578077, 578077,
  /* 29305 */ 578077, 580211, 578077, 578077, 578077, 578077, 580216, 57907, 758345, 578121, 0, 578077, 57907, 578121,
  /* 29319 */ 0, 578077, 57907, 578121, 0, 578077, 57907, 578121, 0, 0, 0, 0, 0, 804, 0, 801, 792, 0, 0, 806, 0, 668, 0,
  /* 29342 */ 788, 423, 423, 0, 423, 432, 0, 423, 0, 423, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
  /* 29364 */ 467, 467, 467, 467, 467, 467, 467, 493, 493, 467, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
  /* 29385 */ 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 578085, 578085, 578085, 57914, 578129, 578085,
  /* 29403 */ 57914, 578085, 578085, 57914, 57914, 57914, 578129, 578085, 578085, 578085, 578085, 578129, 578129,
  /* 29416 */ 578129, 578129, 578085, 57914, 578129, 578085, 578129, 578129, 578129, 578129, 578129, 578129, 578129,
  /* 29429 */ 578129, 578085, 57914, 578085, 578129, 578129, 1, 12290, 3, 1040, 1044, 0, 0, 1048, 1052, 0, 0, 0, 0, 0,
  /* 29449 */ 0, 0, 0, 0, 0, 363, 363, 363, 700, 0, 0, 578753, 1636, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 29468 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579594, 623155, 574817, 1788, 578121,
  /* 29481 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 29494 */ 579398, 578121, 0, 0, 0, 0, 794624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105920, 0, 0, 0, 0, 0, 952, 952, 952, 952,
  /* 29520 */ 952, 952, 0, 0, 0, 0, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 0,
  /* 29543 */ 0, 626688, 0, 1126400, 0, 0, 2648, 0, 0, 0, 0, 2652, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 0, 418, 418, 0, 0,
  /* 29569 */ 40960, 418, 0, 0, 627229, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 29584 */ 578077, 578077, 578077, 579569, 578077, 578077, 578077, 578077, 795165, 578077, 578077, 578077, 578077,
  /* 29597 */ 578077, 578077, 578077, 578077, 999965, 578077, 578077, 578077, 578077, 578077, 578760, 578077, 578077,
  /* 29610 */ 578077, 578764, 578077, 578077, 578775, 578077, 578077, 578778, 578077, 578077, 1106461, 578077, 578077,
  /* 29623 */ 1126941, 578077, 578077, 627251, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 0, 578121, 578121,
  /* 29637 */ 578490, 578121, 578121, 578121, 578121, 578121, 57907, 999987, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 29651 */ 1106483, 57907, 57907, 1126963, 57907, 57907, 627273, 578121, 578121, 578121, 578121, 1057353, 578121,
  /* 29664 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579670, 578121, 578121,
  /* 29677 */ 733769, 578121, 578121, 1126985, 578121, 578121, 578121, 578077, 578077, 578121, 578077, 57907, 578077,
  /* 29690 */ 578077, 57907, 57907, 578121, 578121, 0, 0, 0, 2436, 0, 0, 163840, 716800, 0, 0, 745472, 0, 0, 0, 0, 0,
  /* 29711 */ 651264, 0, 0, 0, 0, 0, 0, 0, 578077, 651805, 578077, 57907, 57907, 57907, 57907, 59060, 57907, 57907,
  /* 29729 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 60066, 57907, 57907, 57907, 57907, 578121, 578121,
  /* 29744 */ 578077, 1032733, 578077, 578077, 578077, 578077, 578077, 578077, 57907, 651827, 57907, 57907, 57907,
  /* 29757 */ 57907, 57907, 57907, 58654, 58661, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 918067, 57907,
  /* 29772 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 830205, 57907, 57907, 57907,
  /* 29787 */ 57907, 1010431, 57907, 1032755, 57907, 57907, 57907, 57907, 57907, 57907, 58701, 57907, 57907, 57907,
  /* 29801 */ 57907, 57907, 57907, 57907, 57907, 57907, 2118, 0, 0, 0, 578121, 578121, 578121, 57907, 57907, 57907,
  /* 29817 */ 578121, 651849, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 29830 */ 579938, 578121, 578121, 578121, 578121, 830223, 578121, 578121, 578121, 578121, 1010449, 578121, 1032777,
  /* 29843 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578077, 0, 0, 0, 0, 0, 0, 578077, 578077, 0, 0,
  /* 29861 */ 2771, 0, 0, 0, 0, 0, 0, 0, 0, 2857, 0, 761856, 0, 0, 0, 0, 0, 0, 2470, 0, 0, 0, 0, 2475, 0, 0, 0, 0, 0, 0,
  /* 29891 */ 0, 45056, 49152, 314, 315, 315, 420, 421, 40960, 428, 57907, 57907, 57907, 57907, 578121, 578121, 578121,
  /* 29908 */ 578121, 578121, 578121, 578121, 762441, 578121, 578121, 578121, 578121, 578121, 579707, 578121, 578121,
  /* 29921 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580126, 578121, 578121, 578121, 578121,
  /* 29934 */ 578121, 578121, 578121, 580437, 578121, 578121, 578121, 578121, 578077, 578077, 57907, 578121, 0, 0, 0, 0,
  /* 29950 */ 0, 0, 0, 0, 580514, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578762, 578077, 578077,
  /* 29965 */ 578077, 578771, 578077, 578077, 578077, 578077, 832029, 1012253, 578077, 57907, 832051, 1012275, 57907,
  /* 29978 */ 578121, 832073, 1012297, 578121, 0, 0, 578077, 578077, 57907, 57907, 58242, 57907, 58248, 57907, 57907,
  /* 29993 */ 848435, 57907, 922522, 57907, 959027, 57907, 57907, 689, 690, 0, 0, 0, 0, 694, 0, 0, 0, 363, 363, 363, 0,
  /* 30014 */ 0, 0, 0, 0, 0, 0, 1163264, 0, 363, 0, 0, 0, 1163264, 0, 0, 0, 1163264, 1163264, 0, 0, 0, 0, 0, 1163264,
  /* 30038 */ 1163264, 1163264, 0, 0, 756, 0, 0, 0, 0, 0, 0, 756, 0, 0, 0, 0, 0, 756, 756, 0, 0, 819, 0, 0, 0, 0, 0, 0,
  /* 30066 */ 0, 0, 0, 756, 0, 0, 0, 0, 0, 0, 0, 578379, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 30086 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 57907, 578425, 578077, 57907, 57907,
  /* 30099 */ 57907, 58246, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59698, 57907, 57907,
  /* 30114 */ 57907, 57907, 57907, 578425, 57907, 57907, 57907, 57907, 58292, 0, 578121, 578121, 578121, 578121, 578546,
  /* 30129 */ 53537, 62477, 0, 0, 0, 0, 0, 0, 2630, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 61731, 0, 0, 0, 0, 0, 1155072, 0,
  /* 30157 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1542, 0, 0, 1156697, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30188 */ 1579, 0, 0, 0, 692224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1505, 0, 679936, 578077, 1085981, 578077,
  /* 30212 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 30226 */ 57907, 57907, 57907, 0, 0, 274432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1541, 0, 0, 578077, 580376,
  /* 30250 */ 578077, 60185, 57907, 580378, 578121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 0, 0, 0, 602112, 602112, 578077,
  /* 30272 */ 1114653, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 30287 */ 578121, 578121, 57907, 57907, 57907, 1114675, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 30300 */ 578121, 578121, 578121, 578121, 578121, 579353, 578121, 578121, 578121, 0, 0, 0, 0, 433, 0, 0, 0, 330,
  /* 30318 */ 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 486, 494, 494,
  /* 30339 */ 486, 494, 494, 494, 494, 494, 494, 494, 494, 519, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 30360 */ 527, 527, 536, 527, 527, 527, 527, 527, 578086, 578086, 578086, 57915, 578130, 578086, 57915, 578086,
  /* 30376 */ 578086, 57915, 57915, 57915, 578130, 578086, 578086, 578086, 578086, 578130, 578130, 578130, 578130,
  /* 30389 */ 578086, 57915, 578130, 578086, 578130, 578130, 578130, 578130, 578130, 578130, 578130, 578130, 578086,
  /* 30402 */ 57915, 578086, 578130, 578130, 1, 12290, 3, 0, 765, 0, 0, 769, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1608, 0,
  /* 30427 */ 0, 0, 0, 795, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2261, 0, 809, 0, 0, 0, 795, 0, 0, 809, 0, 0, 0,
  /* 30459 */ 0, 0, 809, 809, 0, 0, 0, 0, 795, 0, 0, 0, 0, 0, 0, 825, 791, 0, 0, 825, 578077, 578382, 578077, 578389,
  /* 30483 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578416,
  /* 30496 */ 578077, 578077, 578077, 578426, 578077, 57907, 57907, 57907, 57907, 58249, 57907, 58256, 57907, 57907,
  /* 30510 */ 57907, 57907, 57907, 57907, 57907, 0, 578121, 578121, 648125, 578121, 578121, 578121, 578121, 578121,
  /* 30524 */ 578426, 57907, 57907, 57907, 58375, 58293, 0, 578121, 578121, 578121, 578571, 578547, 53537, 62477, 0, 0,
  /* 30540 */ 0, 0, 0, 0, 2638, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 363, 0, 0, 0, 1105, 0, 0, 0, 1095, 1096, 0, 0, 0, 0, 0,
  /* 30570 */ 363, 363, 0, 0, 0, 0, 0, 0, 0, 1201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184320, 0, 0, 0, 0, 0, 0, 1194, 0, 0, 0,
  /* 30600 */ 0, 0, 0, 0, 0, 0, 0, 0, 1206, 0, 0, 0, 0, 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397312, 397312, 397312,
  /* 30629 */ 397312, 397312, 397312, 397312, 578077, 578077, 578077, 578783, 578077, 578077, 578077, 578077, 578077,
  /* 30642 */ 578790, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 1122845, 57907, 57907, 57907, 57907,
  /* 30655 */ 57907, 57907, 57907, 57907, 59410, 57907, 57907, 59411, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 30670 */ 57907, 58677, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59439, 57907,
  /* 30685 */ 57907, 57907, 57907, 57907, 57907, 57907, 58718, 57907, 57907, 574817, 578753, 953, 578121, 578121,
  /* 30699 */ 578121, 578121, 578121, 578121, 578121, 578077, 578077, 578077, 578077, 0, 578930, 578770, 58657, 579004,
  /* 30713 */ 578121, 578121, 578950, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 30726 */ 578121, 578121, 578121, 1086025, 578121, 578121, 578121, 578991, 578121, 578121, 578121, 578121, 578121,
  /* 30739 */ 578077, 578077, 578077, 578077, 0, 578121, 578077, 57907, 578121, 578121, 3144, 580681, 60490, 580683, 0,
  /* 30754 */ 578077, 57907, 578121, 0, 578077, 57907, 578121, 0, 0, 0, 0, 0, 1584, 1585, 0, 1587, 0, 0, 0, 0, 0, 0, 0,
  /* 30777 */ 0, 0, 2268, 0, 0, 0, 0, 0, 0, 578077, 578077, 578077, 579192, 578077, 578077, 578077, 578077, 578077,
  /* 30795 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578815, 578077, 578077, 578819, 578077, 579218,
  /* 30808 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579227, 578077, 578077, 578077, 578077,
  /* 30821 */ 578077, 578077, 579223, 578077, 578077, 579226, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 30834 */ 579849, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579862, 578077, 57907, 57907,
  /* 30847 */ 57907, 57907, 57907, 57907, 578077, 579233, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 30860 */ 578077, 579241, 579243, 578077, 578077, 578077, 578077, 578077, 578786, 578077, 578077, 578077, 578077,
  /* 30873 */ 578077, 578077, 578077, 578077, 578077, 578077, 580404, 580405, 580406, 578077, 578077, 578077, 57907,
  /* 30886 */ 57907, 59074, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 30901 */ 59441, 57907, 57907, 59100, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59109, 57907, 57907,
  /* 30916 */ 57907, 57907, 57907, 57907, 58655, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 58704,
  /* 30931 */ 57907, 57907, 57907, 57907, 57907, 57907, 59115, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 30946 */ 59123, 59125, 57907, 57907, 57907, 57907, 57907, 0, 0, 2122, 0, 0, 0, 578121, 578121, 578121, 578121,
  /* 30963 */ 578121, 578077, 580151, 578121, 578077, 57907, 578077, 578077, 57907, 57907, 578121, 578121, 0, 0, 2435,
  /* 30978 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2461, 0, 0, 0, 0, 0, 0, 578121, 579370, 578121, 578121, 578121, 578121, 578121,
  /* 31001 */ 578121, 578121, 578121, 579379, 578121, 578121, 578121, 578121, 578121, 578077, 580289, 578121, 578077,
  /* 31014 */ 57907, 578077, 578077, 57907, 57907, 578121, 578121, 578121, 579385, 578121, 578121, 578121, 578121,
  /* 31027 */ 578121, 578121, 578121, 578121, 579393, 579395, 578121, 578121, 578121, 578121, 578121, 579920, 578121,
  /* 31040 */ 578121, 578121, 578121, 579925, 578121, 578121, 578121, 578121, 578121, 578526, 578121, 578121, 578121,
  /* 31053 */ 578121, 578543, 578121, 578121, 578121, 578121, 578121, 578121, 1053257, 578077, 0, 3093, 0, 3095, 3096,
  /* 31068 */ 3097, 578077, 578077, 0, 0, 1933, 0, 0, 0, 0, 0, 0, 0, 1940, 0, 0, 0, 0, 0, 0, 0, 1550, 0, 0, 0, 0, 0, 0,
  /* 31096 */ 0, 0, 0, 1204, 0, 0, 0, 0, 0, 0, 0, 0, 1948, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1569, 0, 0, 578077,
  /* 31126 */ 578077, 578077, 578077, 579548, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 31139 */ 578077, 578077, 579200, 578077, 578077, 578077, 578077, 57907, 57907, 57907, 59406, 57907, 57907, 57907,
  /* 31153 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59415, 57907, 57907, 57907, 57907, 57907, 58292, 57907,
  /* 31168 */ 0, 578121, 578121, 578121, 578121, 578500, 578121, 578121, 578121, 578077, 3116, 0, 3118, 0, 0, 578077,
  /* 31184 */ 578077, 578077, 578077, 578077, 578077, 57907, 57907, 57907, 57907, 578121, 578121, 578121, 578121, 62477,
  /* 31198 */ 0, 1484, 0, 578121, 579663, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 31212 */ 578121, 579672, 578121, 578121, 578121, 578121, 578121, 1114697, 578077, 578077, 57907, 578121, 0, 0, 0,
  /* 31227 */ 0, 0, 0, 0, 0, 598475, 598475, 598475, 598475, 598475, 1, 12290, 3, 59415, 578121, 578077, 578077, 578077,
  /* 31245 */ 578077, 57907, 57907, 57907, 57907, 578121, 578121, 578121, 578121, 0, 0, 758301, 578077, 758323, 0, 0,
  /* 31261 */ 2219, 0, 0, 2222, 0, 0, 0, 2226, 0, 0, 0, 0, 0, 0, 0, 0, 798720, 0, 0, 0, 0, 0, 0, 0, 0, 1378, 0, 0, 0, 0,
  /* 31291 */ 0, 0, 0, 0, 332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2273, 0, 0, 0, 0, 2237, 0, 0, 0, 0, 0, 0, 0,
  /* 31324 */ 2243, 0, 2245, 0, 0, 0, 0, 0, 953, 0, 0, 0, 953, 0, 0, 0, 0, 0, 0, 0, 0, 442368, 442368, 442368, 442368,
  /* 31349 */ 442368, 1, 12290, 3, 0, 0, 2248, 2249, 0, 0, 2252, 0, 0, 2255, 0, 0, 0, 0, 0, 0, 0, 0, 942080, 0, 0, 0, 0,
  /* 31376 */ 0, 0, 0, 0, 139264, 139264, 139264, 0, 0, 0, 139264, 0, 2262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2270, 0, 0, 0,
  /* 31403 */ 0, 0, 0, 0, 45056, 49152, 0, 606208, 606208, 0, 0, 40960, 606208, 0, 0, 0, 0, 0, 2276, 0, 0, 0, 0, 0, 0,
  /* 31428 */ 0, 0, 0, 579817, 578077, 578077, 578077, 578077, 579847, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 31443 */ 579852, 578077, 578077, 578077, 578077, 578077, 578826, 578077, 578077, 578077, 578077, 578077, 57907,
  /* 31456 */ 57907, 639539, 57907, 57907, 578077, 578077, 579856, 578077, 578077, 579859, 578077, 578077, 578077,
  /* 31469 */ 578077, 59671, 57907, 57907, 57907, 57907, 57907, 0, 2373, 0, 0, 0, 0, 578121, 578121, 578121, 578121,
  /* 31486 */ 578121, 578077, 3018, 3019, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1525, 0, 0, 1528, 0, 0, 0, 59691, 57907, 57907,
  /* 31509 */ 57907, 57907, 59695, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59701, 59713, 57907,
  /* 31524 */ 57907, 57907, 57907, 0, 0, 0, 0, 0, 0, 579911, 578121, 578121, 578121, 578121, 578121, 579944, 578121,
  /* 31541 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579937, 578121, 578121, 578121,
  /* 31554 */ 578121, 578121, 578121, 579931, 578121, 578121, 578121, 578121, 579935, 578121, 578121, 578121, 578121,
  /* 31567 */ 578121, 578121, 578121, 578121, 578121, 580267, 578121, 578121, 578121, 578121, 578121, 578121, 579941,
  /* 31580 */ 578121, 578121, 578121, 578121, 578121, 578121, 579946, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 31593 */ 579950, 578121, 578121, 578121, 578926, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 31606 */ 578943, 578121, 578121, 578121, 578121, 578121, 676425, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 31619 */ 578121, 578121, 578121, 578121, 580279, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579953,
  /* 31632 */ 578121, 578121, 578121, 578121, 579957, 578121, 579958, 578077, 578077, 579960, 579961, 59770, 578121,
  /* 31645 */ 578077, 578077, 578077, 578414, 0, 0, 0, 578557, 578558, 58367, 578121, 578376, 578077, 578414, 1094173,
  /* 31660 */ 0, 2441, 0, 0, 0, 2445, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 370, 0, 0, 371, 0, 0, 0, 0, 0, 2456, 2457, 0, 0, 0,
  /* 31690 */ 0, 0, 0, 0, 0, 0, 0, 0, 1904, 0, 0, 0, 0, 0, 0, 0, 2467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2476, 0, 0, 0, 0, 0,
  /* 31722 */ 0, 2662, 0, 0, 0, 0, 0, 0, 2666, 0, 2667, 578077, 578077, 580057, 578077, 578077, 578077, 578077, 580061,
  /* 31741 */ 578077, 578077, 580063, 578077, 580065, 578077, 578077, 578077, 57907, 57907, 578121, 578121, 0, 0,
  /* 31755 */ 708608, 0, 0, 0, 0, 249856, 0, 580068, 578077, 578077, 578077, 578077, 578077, 57907, 57907, 59883, 57907,
  /* 31772 */ 57907, 57907, 57907, 59888, 57907, 57907, 57907, 57907, 57907, 57907, 59908, 57907, 57907, 57907, 57907,
  /* 31787 */ 57907, 57907, 57907, 57907, 57907, 578121, 580488, 578121, 580490, 578121, 578121, 578121, 59903, 57907,
  /* 31801 */ 57907, 57907, 57907, 59907, 57907, 57907, 59909, 57907, 59911, 57907, 57907, 57907, 59914, 57907, 57907,
  /* 31816 */ 57907, 57907, 57907, 58293, 57907, 0, 578121, 578121, 578121, 578121, 578121, 578503, 578121, 578510,
  /* 31830 */ 580133, 578121, 578121, 578121, 578121, 580137, 578121, 578121, 580139, 578121, 580141, 578121, 578121,
  /* 31843 */ 578121, 580144, 578121, 578121, 578121, 578951, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 31856 */ 578121, 578121, 578121, 578121, 578121, 580129, 580130, 578121, 578121, 663552, 0, 0, 2627, 2628, 0, 0, 0,
  /* 31873 */ 0, 0, 0, 0, 0, 0, 0, 0, 1917, 1918, 0, 0, 0, 0, 0, 0, 0, 2660, 0, 0, 2663, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31903 */ 2473, 0, 0, 0, 0, 0, 0, 60046, 57907, 57907, 57907, 57907, 60051, 57907, 57907, 57907, 57907, 57907,
  /* 31921 */ 57907, 57907, 57907, 57907, 57907, 0, 2120, 0, 0, 578121, 578121, 578121, 57907, 57907, 57907, 60060,
  /* 31937 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 578121, 578121, 578121, 578121,
  /* 31951 */ 578121, 578121, 0, 0, 0, 0, 578077, 578121, 578121, 664137, 578121, 578121, 578121, 580265, 578121,
  /* 31966 */ 578121, 578121, 578121, 580270, 578121, 578121, 578121, 578121, 578121, 580264, 578121, 578121, 578121,
  /* 31979 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579364, 578121, 578121, 913993, 578121, 578121,
  /* 31992 */ 578121, 578121, 578077, 578077, 578077, 580398, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 32005 */ 578077, 578077, 578077, 580408, 578077, 57907, 57907, 57907, 58286, 57907, 0, 578121, 578121, 578121,
  /* 32019 */ 578540, 578121, 53537, 62477, 0, 0, 0, 0, 0, 354, 0, 352, 0, 473, 473, 473, 473, 473, 473, 473, 478, 473,
  /* 32041 */ 473, 473, 473, 473, 473, 473, 473, 473, 478, 473, 60231, 57907, 57907, 57907, 578121, 578121, 578121,
  /* 32058 */ 580428, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578532, 578121, 578121, 578121,
  /* 32071 */ 578121, 578121, 578121, 578121, 578121, 578121, 580438, 578121, 578121, 578121, 578077, 578077, 57907,
  /* 32084 */ 578121, 0, 0, 0, 0, 0, 0, 0, 0, 987815, 0, 0, 0, 0, 0, 0, 800, 0, 0, 2771, 0, 0, 0, 0, 0, 0, 0, 2920,
  /* 32112 */ 578077, 578077, 578077, 578077, 578077, 578077, 579589, 578077, 579591, 578077, 578077, 578077, 578077,
  /* 32125 */ 578077, 578077, 57907, 59882, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 0, 578121, 578121,
  /* 32140 */ 578121, 578121, 578121, 578121, 578509, 578121, 0, 0, 0, 0, 0, 2976, 2977, 0, 578077, 578077, 578077,
  /* 32157 */ 578077, 578077, 578077, 578077, 578077, 578808, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 32170 */ 580521, 578077, 580523, 580524, 578077, 580525, 578077, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 32184 */ 57907, 60342, 57907, 60344, 60345, 57907, 60346, 57907, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 32198 */ 578121, 578121, 580547, 578121, 578121, 578121, 578972, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 32211 */ 578121, 578121, 578121, 578121, 578121, 578121, 578961, 578121, 578121, 578121, 580549, 580550, 578121,
  /* 32224 */ 580551, 578121, 580553, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397, 0, 0, 0, 0, 0, 578077, 580636, 580637, 578077,
  /* 32247 */ 578077, 57907, 57907, 57907, 60450, 60451, 57907, 57907, 578121, 578121, 578121, 580648, 580649, 578121,
  /* 32261 */ 578121, 578077, 0, 0, 0, 0, 0, 578077, 578077, 578077, 578077, 578077, 578077, 57907, 57907, 57907, 57907,
  /* 32278 */ 578121, 578121, 578121, 578121, 62477, 0, 0, 0, 57907, 57907, 57907, 578144, 578147, 578147, 578147,
  /* 32293 */ 578077, 578144, 578144, 578144, 578121, 578077, 57907, 578144, 578077, 57907, 57907, 58278, 57907, 57907,
  /* 32307 */ 0, 578121, 578121, 578532, 578121, 578121, 53537, 62477, 0, 0, 0, 0, 0, 0, 1924, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32330 */ 0, 0, 2175675, 98304, 2175675, 0, 0, 0, 578144, 578144, 578144, 578144, 578144, 578144, 578144, 578144,
  /* 32346 */ 578077, 57907, 578077, 578144, 578144, 1, 12290, 3, 0, 735, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32370 */ 1595, 1596, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1089, 0, 0, 0, 401, 0, 0, 0, 0, 379, 0,
  /* 32399 */ 45056, 49152, 0, 0, 0, 0, 424, 40960, 0, 0, 0, 0, 0, 1060, 1059, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 303,
  /* 32426 */ 0, 0, 0, 0, 424, 424, 0, 424, 0, 438, 424, 0, 424, 469, 469, 469, 476, 469, 469, 469, 469, 469, 469, 469,
  /* 32450 */ 469, 476, 469, 469, 469, 469, 469, 469, 469, 469, 483, 469, 495, 495, 469, 495, 495, 495, 495, 495, 495,
  /* 32471 */ 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 538, 578087, 578087,
  /* 32490 */ 578087, 57916, 578131, 578087, 57916, 578087, 578087, 57916, 57916, 57916, 578131, 578087, 578087, 578087,
  /* 32504 */ 578087, 578131, 578131, 578131, 578131, 578087, 57916, 578131, 578087, 578131, 578131, 578131, 578131,
  /* 32517 */ 578131, 578131, 578131, 578131, 578087, 57916, 578087, 578131, 578131, 1, 12290, 3, 0, 0, 662, 663, 0, 0,
  /* 32535 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1134, 0, 0, 0, 0, 0, 0, 0, 663, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1941, 0, 0,
  /* 32568 */ 0, 0, 0, 817, 0, 0, 0, 663, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 404, 0, 0, 0, 0, 0, 0, 0, 0, 727, 0, 740, 663,
  /* 32599 */ 0, 0, 0, 0, 0, 578077, 578077, 578370, 578077, 57907, 57907, 58280, 57907, 57907, 0, 578121, 578121,
  /* 32616 */ 578534, 578121, 578121, 289, 62477, 0, 0, 0, 0, 0, 0, 2765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 0, 0, 0,
  /* 32642 */ 389120, 0, 578077, 578077, 578384, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 32656 */ 578413, 578077, 578077, 578077, 57907, 57907, 578121, 578121, 0, 159744, 0, 0, 0, 0, 0, 0, 0, 0, 2254, 0,
  /* 32676 */ 0, 0, 0, 0, 0, 0, 0, 1617, 0, 0, 0, 0, 0, 0, 0, 0, 774, 0, 0, 0, 0, 0, 0, 0, 0, 782, 0, 0, 0, 0, 0, 0, 0,
  /* 32709 */ 0, 0, 0, 0, 0, 0, 0, 0, 1945, 57907, 58280, 57907, 57907, 57907, 57907, 57907, 0, 578121, 578121, 578491,
  /* 32729 */ 578121, 578121, 578121, 578505, 578121, 578121, 578121, 578993, 578121, 578121, 578121, 578077, 578077,
  /* 32742 */ 578077, 578077, 0, 578931, 578771, 58658, 578121, 578121, 578121, 579344, 578121, 578121, 578121, 578121,
  /* 32756 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579381, 578121, 578121, 578121, 578121,
  /* 32769 */ 578370, 578077, 578077, 578413, 0, 0, 0, 578121, 578077, 57907, 578491, 578077, 578077, 578413, 578077,
  /* 32784 */ 57907, 57907, 58282, 57907, 57907, 0, 578121, 578121, 578536, 578121, 578121, 53537, 62477, 0, 0, 0, 0, 0,
  /* 32802 */ 0, 1163264, 0, 0, 0, 0, 0, 0, 1163264, 0, 0, 0, 0, 1040, 1044, 0, 0, 1048, 1052, 0, 0, 0, 0, 0, 0, 1059,
  /* 32828 */ 1060, 0, 0, 0, 0, 0, 0, 2772, 0, 0, 2775, 0, 0, 0, 0, 0, 0, 0, 667, 0, 0, 669, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32859 */ 1097, 0, 1099, 0, 0, 363, 363, 0, 0, 0, 0, 0, 0, 0, 1563, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1589, 0, 0, 0, 0, 0,
  /* 32889 */ 0, 0, 0, 0, 1139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1177, 0, 0, 0, 0, 0, 0, 1183, 0, 0, 0, 0, 0, 0, 0,
  /* 32921 */ 0, 0, 0, 0, 0, 1189, 0, 578753, 832, 0, 0, 1060, 0, 0, 0, 0, 0, 0, 0, 0, 1060, 0, 0, 0, 1209, 147456, 0,
  /* 32948 */ 0, 1059, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 578753, 832, 578077, 578756, 578077, 578077, 578077, 578077,
  /* 32968 */ 578077, 578077, 578077, 578077, 578077, 578767, 578774, 578077, 578077, 578077, 60480, 57907, 57907,
  /* 32981 */ 57907, 580674, 578121, 578121, 578121, 0, 0, 578077, 578077, 57907, 57907, 58243, 58247, 58250, 57907,
  /* 32996 */ 58257, 57907, 57907, 58267, 58268, 58270, 57907, 57907, 578077, 578077, 578077, 578801, 578077, 578077,
  /* 33010 */ 578077, 578077, 578077, 578077, 578077, 578814, 578077, 578077, 578077, 578077, 578077, 579195, 578077,
  /* 33023 */ 578077, 578077, 782877, 578077, 578077, 578077, 579202, 578077, 579203, 58673, 57907, 57907, 57907, 57907,
  /* 33037 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 58688, 57907, 57907, 57907, 57907, 57907,
  /* 33052 */ 58653, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 58670, 57907, 57907, 57907, 57907, 57907,
  /* 33067 */ 57907, 772756, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 60056, 57907, 57907, 57907, 57907, 57907,
  /* 33082 */ 57907, 1057331, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 0, 0, 0, 0, 578121, 578121,
  /* 33099 */ 579661, 57907, 58714, 57907, 57907, 57907, 57907, 574817, 578753, 953, 578121, 578916, 578121, 578121,
  /* 33113 */ 578121, 578121, 578121, 578121, 766537, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 33126 */ 578121, 580266, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578077, 57907, 578077,
  /* 33139 */ 578121, 578121, 1, 12290, 3, 578077, 578814, 578077, 578077, 57907, 58701, 57907, 57907, 578121, 578974,
  /* 33154 */ 578121, 578121, 62477, 0, 0, 0, 0, 0, 0, 306, 441, 449, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
  /* 33176 */ 463, 463, 463, 463, 463, 463, 0, 0, 1509, 1510, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1190, 0, 0, 0, 578753,
  /* 33203 */ 1636, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579185,
  /* 33216 */ 579186, 578077, 57907, 57907, 58283, 57907, 57907, 0, 578121, 578121, 578537, 578121, 578121, 53537,
  /* 33230 */ 62477, 0, 0, 0, 0, 0, 374, 0, 0, 0, 0, 366, 0, 383, 0, 349, 0, 578077, 578077, 578077, 579193, 578077,
  /* 33252 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579201, 578077,
  /* 33265 */ 578077, 578077, 578077, 579205, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 33278 */ 578077, 578077, 578077, 578077, 578077, 579843, 578077, 57907, 57907, 59075, 57907, 57907, 57907, 57907,
  /* 33292 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59699, 57907, 57907, 59087, 57907, 57907,
  /* 33307 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59690, 574817,
  /* 33322 */ 1788, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579337,
  /* 33335 */ 579338, 578121, 578121, 578121, 579345, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 33348 */ 578121, 578121, 578121, 578121, 579396, 578121, 578121, 578121, 578121, 579357, 578121, 578121, 578121,
  /* 33361 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579701, 578121,
  /* 33374 */ 1908, 1909, 0, 0, 0, 0, 0, 0, 0, 0, 1916, 0, 0, 0, 0, 0, 0, 0, 1604, 0, 0, 0, 0, 1609, 0, 0, 0, 578077,
  /* 33402 */ 578077, 578077, 579587, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 33415 */ 578077, 57907, 57907, 57907, 57907, 59675, 57907, 57907, 57907, 57907, 59447, 57907, 57907, 57907, 57907,
  /* 33430 */ 59451, 57907, 57907, 57907, 57907, 59454, 57907, 57907, 57907, 57907, 57907, 57907, 60391, 57907, 57907,
  /* 33445 */ 57907, 57907, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580432, 578121, 578121,
  /* 33458 */ 578121, 578121, 579704, 578121, 578121, 578121, 578121, 579708, 578121, 578121, 578121, 578121, 579711,
  /* 33471 */ 578121, 578121, 578121, 578121, 578121, 580276, 580277, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 33484 */ 578121, 578121, 578121, 578980, 578121, 578121, 578121, 578121, 578121, 578121, 2208, 0, 0, 0, 0, 0, 0, 0,
  /* 33502 */ 0, 0, 0, 0, 0, 0, 0, 0, 2464, 578077, 578077, 578077, 578077, 580072, 578077, 57907, 57907, 57907, 57907,
  /* 33521 */ 57907, 57907, 59887, 57907, 57907, 57907, 57907, 57907, 57907, 59079, 57907, 57907, 57907, 57907, 57907,
  /* 33536 */ 57907, 57907, 57907, 57907, 905779, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59893,
  /* 33551 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59412, 57907, 59414,
  /* 33566 */ 57907, 57907, 57907, 59918, 57907, 0, 0, 578121, 578121, 578121, 578121, 578121, 578121, 580117, 578121,
  /* 33581 */ 578121, 578121, 578121, 578121, 1159753, 578121, 578121, 578077, 578077, 578077, 578121, 578077, 57907,
  /* 33594 */ 578121, 578077, 578121, 578121, 578121, 580123, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 33607 */ 578121, 578121, 578121, 578121, 578121, 579685, 578121, 578121, 578121, 578121, 578121, 580148, 578121,
  /* 33620 */ 578121, 578077, 578077, 578121, 578077, 57907, 578077, 578077, 57907, 57907, 578121, 578121, 0, 578077,
  /* 33634 */ 57907, 578121, 0, 578077, 57907, 578121, 0, 578077, 57907, 578121, 0, 0, 0, 0, 819200, 0, 0, 0, 0, 0, 0,
  /* 33655 */ 0, 0, 0, 0, 0, 0, 1621, 0, 0, 0, 578077, 578077, 578077, 819741, 578077, 578077, 578077, 578077, 578077,
  /* 33674 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579229, 578077, 578077, 578077, 0, 0, 0, 2770, 0,
  /* 33690 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1905, 0, 0, 0, 60163, 57907, 57907, 578121, 578121, 578121, 578121,
  /* 33712 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 1118793, 578121, 578121, 57907,
  /* 33725 */ 57907, 57907, 57907, 57907, 60425, 57907, 60426, 57907, 57907, 57907, 578121, 578121, 578121, 578121,
  /* 33739 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580366, 578121, 580624, 578121, 580625,
  /* 33752 */ 578121, 578121, 578121, 578077, 0, 0, 0, 0, 0, 0, 580634, 578077, 57907, 59057, 57907, 57907, 57907,
  /* 33769 */ 57907, 59062, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 58702, 57907, 57907, 58706, 57907,
  /* 33784 */ 57907, 57907, 57907, 58711, 0, 0, 0, 0, 434, 0, 0, 0, 454, 470, 470, 470, 470, 470, 470, 470, 470, 470,
  /* 33806 */ 480, 470, 470, 470, 470, 470, 470, 470, 470, 470, 454, 454, 470, 454, 454, 454, 454, 454, 454, 454, 454,
  /* 33827 */ 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 578088, 578088, 578088,
  /* 33846 */ 57917, 578132, 578088, 57917, 578088, 578088, 57917, 57917, 57917, 578132, 578088, 578088, 578088, 578088,
  /* 33860 */ 578132, 578132, 578132, 578132, 578088, 57917, 578132, 578088, 578132, 578132, 578132, 578132, 578132,
  /* 33873 */ 578132, 578132, 578132, 578088, 57917, 578088, 578132, 578132, 1, 12290, 3, 578077, 578077, 578385,
  /* 33887 */ 578077, 578077, 578395, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 33900 */ 905757, 578077, 578077, 578077, 578077, 578077, 578121, 578516, 578121, 578121, 578121, 578121, 578121,
  /* 33913 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579713, 578121, 0, 0, 1079, 0, 0,
  /* 33929 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1594, 0, 0, 578077, 578799, 578077, 578077, 578077, 578077, 578077,
  /* 33950 */ 578077, 578077, 578077, 578077, 578077, 578077, 578816, 578077, 578077, 57907, 60220, 57907, 57907, 60222,
  /* 33964 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 692787, 57907, 57907, 57907, 57907, 57907,
  /* 33979 */ 57907, 578077, 578077, 578822, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 57907,
  /* 33992 */ 57907, 57907, 57907, 57907, 57907, 57907, 60045, 578077, 578077, 579007, 578077, 57907, 57907, 58819,
  /* 34006 */ 57907, 578121, 578121, 579015, 578121, 62477, 0, 1483, 0, 0, 0, 0, 0, 1064, 0, 0, 0, 0, 0, 0, 1161, 0, 0,
  /* 34029 */ 0, 0, 0, 0, 346, 347, 348, 0, 0, 0, 0, 0, 0, 0, 0, 2640, 0, 0, 0, 0, 0, 0, 0, 0, 2649, 0, 0, 0, 2653, 0,
  /* 34059 */ 0, 0, 0, 0, 1489, 0, 0, 0, 1495, 0, 0, 0, 1501, 0, 0, 0, 0, 0, 0, 0, 1913, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34089 */ 2175674, 2175674, 0, 0, 0, 0, 0, 0, 905216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1623, 0, 0, 1533, 0,
  /* 34117 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1920, 0, 0, 0, 1599, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1610,
  /* 34149 */ 0, 1611, 578753, 0, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 34163 */ 578077, 578077, 578077, 579187, 574817, 0, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 34177 */ 578121, 578121, 578121, 578121, 578121, 579339, 0, 0, 0, 0, 0, 1959, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1968, 0,
  /* 34200 */ 0, 0, 0, 1973, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1979, 1980, 0, 1982, 0, 0, 0, 1996, 0, 0, 578077, 578077,
  /* 34227 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 580215, 57907,
  /* 34240 */ 59417, 57907, 57907, 57907, 57907, 59422, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 34255 */ 59081, 57907, 57907, 57907, 815667, 57907, 57907, 59444, 57907, 57907, 57907, 57907, 59449, 57907, 57907,
  /* 34270 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59124, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 34285 */ 57907, 57907, 57907, 60048, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 34300 */ 57907, 59427, 57907, 57907, 57907, 0, 909312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 578077, 578077, 578077,
  /* 34321 */ 578077, 580039, 580040, 578077, 578077, 0, 2911, 2771, 0, 0, 0, 0, 0, 0, 0, 0, 578077, 578077, 578077,
  /* 34340 */ 578077, 578077, 578077, 580041, 578077, 386, 388, 338, 0, 0, 0, 0, 0, 0, 337, 0, 0, 338, 0, 0, 0, 0, 0, 0,
  /* 34364 */ 329, 0, 0, 0, 0, 0, 0, 0, 329, 0, 0, 45056, 49152, 0, 417, 417, 0, 0, 40960, 417, 0, 0, 0, 385, 0, 0, 0,
  /* 34391 */ 45056, 49152, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 1068, 0, 0, 0, 0, 0, 0, 1074, 0, 0, 0, 0, 0, 0, 0,
  /* 34419 */ 987136, 800, 0, 0, 0, 0, 800, 0, 0, 987136, 0, 0, 0, 0, 0, 753, 0, 0, 987943, 0, 0, 337, 0, 0, 439, 0,
  /* 34445 */ 445, 0, 471, 471, 471, 471, 471, 471, 471, 578089, 578089, 578089, 57918, 578133, 578089, 57918, 578089,
  /* 34462 */ 578089, 481, 471, 471, 471, 500, 477, 500, 500, 500, 500, 500, 500, 500, 500, 471, 471, 477, 471, 471,
  /* 34482 */ 471, 471, 471, 471, 471, 471, 471, 471, 481, 471, 482, 481, 471, 471, 471, 471, 57918, 57918, 57918,
  /* 34501 */ 578133, 578089, 578089, 578089, 578089, 578133, 578133, 578133, 578133, 578089, 57918, 578133, 578089,
  /* 34514 */ 578133, 578133, 578133, 578133, 578133, 578133, 578133, 578133, 578089, 57918, 578089, 578133, 578133, 1,
  /* 34528 */ 12290, 3, 0, 0, 0, 0, 270336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1998, 0, 0, 0, 578077, 0, 0, 0, 691, 0, 0,
  /* 34557 */ 0, 0, 0, 0, 363, 363, 363, 0, 0, 0, 0, 0, 0, 346, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 298, 0, 0, 0, 0, 0, 748,
  /* 34588 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2478, 764, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2493,
  /* 34621 */ 0, 0, 0, 0, 665, 0, 788, 0, 0, 0, 0, 0, 0, 0, 792, 0, 0, 0, 0, 0, 1082, 0, 0, 0, 1086, 1087, 0, 0, 0, 0,
  /* 34651 */ 0, 0, 0, 2277, 0, 0, 0, 0, 0, 0, 0, 578077, 578077, 578077, 57907, 578121, 578077, 57907, 578077, 578077,
  /* 34671 */ 0, 0, 0, 798, 0, 0, 0, 0, 0, 801, 0, 0, 0, 0, 704, 0, 0, 0, 0, 0, 0, 0, 0, 713, 0, 715, 0, 0, 0, 818, 0,
  /* 34702 */ 0, 0, 665, 821, 0, 788, 0, 0, 0, 0, 0, 826, 0, 0, 0, 0, 0, 1170, 0, 0, 0, 0, 0, 0, 0, 1178, 0, 0, 0, 0, 0,
  /* 34733 */ 327, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 363, 363, 0, 701, 0, 578077, 578077, 578386, 578077, 578077,
  /* 34755 */ 873308, 578077, 578077, 578077, 578404, 578077, 578077, 578077, 578077, 578421, 578077, 58241, 58373,
  /* 34768 */ 58277, 57907, 57907, 0, 578495, 578569, 578531, 578121, 578121, 53537, 62477, 0, 0, 0, 0, 0, 0, 1899,
  /* 34786 */ 1900, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1032192, 0, 0, 0, 0, 0, 0, 57907, 57907, 57907, 58288, 57907, 57907,
  /* 34809 */ 57907, 0, 578121, 578121, 578492, 578121, 578121, 578121, 578507, 578121, 578121, 578121, 579359, 578121,
  /* 34823 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578546, 578121,
  /* 34836 */ 578121, 578121, 578121, 873429, 578121, 578121, 578121, 578525, 578121, 578121, 578121, 578121, 578542,
  /* 34849 */ 578121, 578121, 578121, 578492, 578121, 578121, 578121, 579665, 578121, 578121, 578121, 578121, 578121,
  /* 34862 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580374, 578121, 578121, 578077, 578525, 578371,
  /* 34875 */ 578077, 578404, 578077, 0, 0, 0, 578121, 578077, 57907, 578492, 578077, 578077, 578077, 578077, 578077,
  /* 34890 */ 579549, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 57907, 60281,
  /* 34903 */ 57907, 60283, 57907, 57907, 1063, 1064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2217, 0, 0, 0, 0, 0,
  /* 34929 */ 1126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2228, 0, 0, 0, 0, 0, 1166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34961 */ 0, 2231, 0, 0, 0, 1195, 0, 0, 0, 0, 0, 1100, 0, 0, 1205, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 102400, 0, 0,
  /* 34988 */ 0, 0, 40960, 0, 0, 0, 0, 1188, 0, 0, 0, 1213, 0, 0, 0, 0, 0, 0, 578753, 832, 57907, 57907, 58675, 57907,
  /* 35012 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59899, 59900, 57907,
  /* 35027 */ 57907, 57907, 57907, 57907, 58694, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 35042 */ 57907, 57907, 799283, 57907, 57907, 57907, 578948, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 35056 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578964, 578121, 578967, 578121, 578121,
  /* 35069 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579939,
  /* 35082 */ 578121, 578077, 579006, 578077, 578077, 57907, 58818, 57907, 57907, 578121, 579014, 578121, 578121, 62477,
  /* 35096 */ 0, 0, 0, 0, 0, 0, 666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 337, 61731, 0, 0, 0, 0, 0, 0, 217088, 0, 0, 0, 0,
  /* 35126 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1919, 0, 0, 0, 0, 0, 0, 327680, 0, 0, 1536, 0, 348160, 0, 0, 0, 0, 0, 0, 0,
  /* 35155 */ 373, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2242, 0, 0, 0, 0,
  /* 35188 */ 0, 0, 1626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1966, 0, 0, 578753, 0, 578077, 578077, 578077, 578077,
  /* 35213 */ 578077, 578077, 578077, 579181, 578077, 578077, 578077, 578077, 578077, 578077, 578761, 578077, 578077,
  /* 35226 */ 578077, 578077, 578077, 578773, 578077, 578077, 578077, 578077, 578077, 579191, 578077, 578077, 578077,
  /* 35239 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579583, 578077, 578077,
  /* 35252 */ 57907, 59073, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 35267 */ 57907, 578121, 633508, 574817, 0, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579333, 578121,
  /* 35281 */ 578121, 578121, 578121, 578121, 578121, 578996, 578077, 578077, 578999, 578077, 0, 578121, 578077, 57907,
  /* 35295 */ 578121, 578121, 578121, 579343, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 35308 */ 578121, 578121, 578121, 578121, 1122889, 578121, 578077, 578121, 578121, 579401, 578121, 578077, 579404,
  /* 35321 */ 578077, 578077, 578121, 578077, 57907, 578121, 578077, 578077, 578077, 578077, 0, 0, 0, 578500, 578379,
  /* 35336 */ 58246, 578121, 578077, 578077, 578077, 578077, 0, 0, 0, 578121, 578077, 57907, 578121, 578077, 578077,
  /* 35351 */ 578077, 578419, 1931, 1932, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2492, 0, 0, 0, 1956, 0, 0, 0, 0, 0,
  /* 35379 */ 0, 0, 0, 0, 0, 0, 0, 0, 1981, 0, 0, 0, 1118208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106496, 0,
  /* 35408 */ 578077, 578077, 578077, 579574, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 35421 */ 578077, 578077, 578077, 579244, 578077, 578077, 578077, 57907, 57907, 59405, 57907, 57907, 57907, 57907,
  /* 35435 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 946739, 57907, 57907, 59700, 579662,
  /* 35449 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 35462 */ 578121, 578121, 579674, 57907, 579727, 578077, 578077, 578077, 578077, 57907, 57907, 57907, 57907, 578121,
  /* 35476 */ 578121, 578121, 578121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2209, 0, 0, 0, 0, 983040, 0, 0, 1028096, 2214, 0, 0, 0,
  /* 35501 */ 0, 0, 0, 0, 1925, 0, 0, 0, 0, 0, 0, 0, 1930, 0, 0, 0, 0, 2221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2257,
  /* 35531 */ 2258, 0, 0, 0, 0, 0, 2235, 2236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1942, 0, 1944, 0, 2274, 0, 0, 0, 0,
  /* 35560 */ 0, 0, 0, 2278, 0, 0, 0, 0, 0, 0, 578077, 579536, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 35579 */ 578077, 578077, 579550, 578077, 578077, 578077, 578077, 579555, 578077, 578077, 578077, 578077, 579833,
  /* 35592 */ 578077, 579835, 578077, 578077, 578077, 579838, 578077, 578077, 578077, 578077, 578077, 579842, 578077,
  /* 35605 */ 578077, 57907, 648063, 57907, 57907, 57907, 57907, 57907, 57907, 901683, 57907, 57907, 57907, 57907,
  /* 35619 */ 57907, 2118, 2373, 0, 0, 0, 0, 578121, 578121, 578121, 578121, 578121, 578077, 0, 0, 3020, 0, 0, 3023, 0,
  /* 35639 */ 0, 0, 0, 578077, 578077, 578077, 983581, 578077, 578077, 578077, 578077, 578077, 578077, 1030411, 578077,
  /* 35654 */ 578077, 578077, 579855, 578077, 58242, 57907, 58374, 58284, 57907, 0, 578496, 578121, 578570, 578538,
  /* 35668 */ 578121, 53537, 62477, 0, 0, 0, 0, 0, 0, 1974, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 61731, 0, 0, 0, 346,
  /* 35694 */ 57907, 57907, 57907, 59679, 57907, 57907, 59682, 59683, 57907, 57907, 57907, 57907, 59687, 57907, 59689,
  /* 35709 */ 57907, 57907, 57907, 57907, 57907, 58678, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 35724 */ 57907, 59896, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59692, 57907, 57907, 57907, 57907,
  /* 35739 */ 57907, 59696, 57907, 57907, 57907, 57907, 57907, 983603, 57907, 57907, 57907, 57907, 57907, 58699, 57907,
  /* 35754 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 60054, 57907, 844339, 57907, 57907, 57907,
  /* 35769 */ 57907, 57907, 57907, 57907, 57907, 1030457, 57907, 57907, 57907, 59709, 57907, 57907, 57907, 57907, 57907,
  /* 35784 */ 57907, 58656, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59425, 57907, 57907, 57907,
  /* 35799 */ 57907, 57907, 57907, 579964, 57907, 59774, 578121, 579968, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2451, 0, 0, 0,
  /* 35822 */ 0, 0, 0, 0, 2443, 0, 0, 0, 2447, 0, 0, 0, 0, 0, 2453, 1142784, 180224, 0, 0, 2466, 0, 2468, 0, 0, 2471, 0,
  /* 35848 */ 0, 2474, 0, 0, 0, 0, 0, 0, 0, 1938, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1977, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2482,
  /* 35879 */ 0, 0, 0, 0, 0, 0, 0, 0, 2491, 0, 0, 0, 0, 0, 0, 65831, 69928, 297, 298, 0, 0, 301, 302, 0, 0, 0, 0, 0, 0,
  /* 35908 */ 302, 302, 302, 302, 0, 0, 0, 302, 0, 0, 0, 302, 45056, 94624, 0, 0, 0, 0, 0, 40960, 0, 578077, 578077,
  /* 35931 */ 580070, 578077, 578077, 1143325, 59881, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 35945 */ 59438, 971315, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59906, 57907, 57907, 57907,
  /* 35960 */ 57907, 57907, 57907, 57907, 57907, 59913, 57907, 57907, 57907, 57907, 57907, 57907, 574817, 578753, 953,
  /* 35975 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578077, 578077, 578077, 578077, 0, 578121, 578077,
  /* 35989 */ 57907, 578121, 59916, 57907, 57907, 1143347, 0, 0, 580111, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 36004 */ 578121, 578121, 578121, 1046892, 578121, 578121, 578121, 578121, 578121, 578121, 580146, 578121, 578121,
  /* 36017 */ 1143369, 578121, 578077, 578077, 580152, 580153, 59962, 578077, 578077, 57907, 57907, 578121, 578121, 0,
  /* 36031 */ 578077, 57907, 578121, 0, 578077, 57907, 578121, 0, 578077, 57907, 578121, 1015808, 0, 843776, 0, 0, 0, 0,
  /* 36049 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176128, 0, 578077, 578077, 578077, 578077, 580219, 578077, 844317, 578077,
  /* 36069 */ 578077, 578077, 578077, 578077, 580224, 578077, 580226, 578077, 58244, 58275, 57907, 58285, 57907, 0,
  /* 36083 */ 578498, 578529, 578121, 578539, 578121, 53537, 62477, 0, 0, 0, 0, 0, 0, 557056, 0, 557056, 0, 0, 0, 0, 0,
  /* 36104 */ 0, 0, 0, 372736, 0, 372736, 0, 0, 0, 0, 372736, 57907, 57907, 60059, 57907, 60061, 57907, 57907, 57907,
  /* 36123 */ 57907, 57907, 57907, 57907, 57907, 57907, 578121, 578121, 578121, 578121, 578121, 578121, 0, 0, 0, 0,
  /* 36139 */ 580670, 580261, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 36152 */ 578121, 578121, 578121, 578121, 579951, 580273, 578121, 844361, 578121, 578121, 578121, 578121, 578121,
  /* 36165 */ 580278, 578121, 580280, 578121, 578121, 578121, 578121, 578121, 578121, 918089, 578121, 578121, 578121,
  /* 36178 */ 578121, 578121, 578121, 578121, 578121, 578121, 1000009, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 36191 */ 1106505, 578121, 0, 700416, 0, 2762, 0, 0, 0, 839680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 323584, 0, 0, 0, 0, 0, 0,
  /* 36217 */ 0, 0, 0, 2780, 0, 0, 2782, 0, 0, 0, 0, 0, 0, 578077, 578077, 578077, 578077, 578077, 579540, 578077,
  /* 36237 */ 578077, 578077, 578077, 578077, 578077, 700957, 580323, 578077, 578077, 578077, 580327, 580328, 578077,
  /* 36250 */ 578077, 578077, 840221, 578077, 578077, 578077, 578077, 578077, 579822, 578077, 578077, 578077, 578077,
  /* 36263 */ 578077, 578077, 578077, 579830, 578077, 578077, 580334, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 36276 */ 578077, 57907, 57907, 57907, 57907, 700979, 60149, 57907, 57907, 57907, 57907, 57907, 57907, 574817,
  /* 36290 */ 578753, 953, 578121, 578121, 578121, 578121, 578121, 578121, 578921, 57907, 60153, 60154, 57907, 57907,
  /* 36304 */ 57907, 840243, 57907, 57907, 57907, 57907, 60160, 57907, 57907, 57907, 57907, 0, 0, 578121, 578121,
  /* 36319 */ 578121, 580114, 578121, 578121, 578121, 578121, 578121, 580120, 57907, 57907, 57907, 578121, 578121,
  /* 36332 */ 578121, 578121, 701001, 580359, 578121, 578121, 578121, 580363, 580364, 578121, 578121, 578121, 578121,
  /* 36345 */ 579933, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 975433,
  /* 36358 */ 578077, 975389, 579959, 578121, 578077, 57907, 578121, 578077, 578121, 840265, 578121, 578121, 578121,
  /* 36371 */ 578121, 580370, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578077, 0, 0, 0, 0, 0, 0,
  /* 36388 */ 0, 0, 0, 0, 0, 0, 2771, 0, 0, 237568, 0, 0, 0, 2855, 0, 0, 0, 0, 0, 0, 0, 376, 0, 379, 0, 0, 0, 379, 0, 0,
  /* 36418 */ 0, 0, 2771, 0, 0, 0, 0, 2917, 0, 0, 0, 578077, 578077, 578077, 578077, 578077, 578077, 580610, 578077,
  /* 36437 */ 580611, 578077, 578077, 578077, 57907, 578077, 578077, 578077, 578077, 580466, 578077, 578077, 578077,
  /* 36450 */ 578077, 578077, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 578121, 578121, 578121, 578121, 57907,
  /* 36464 */ 57907, 57907, 60289, 57907, 57907, 57907, 57907, 57907, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 36478 */ 578121, 578121, 578121, 578121, 580434, 580435, 578121, 578121, 580496, 578121, 578121, 578121, 578121,
  /* 36491 */ 578121, 578077, 0, 712704, 0, 0, 1036288, 0, 2771, 578077, 578077, 578077, 578077, 1036829, 578077,
  /* 36506 */ 578077, 57907, 57907, 713267, 57907, 57907, 57907, 57907, 60341, 57907, 57907, 57907, 57907, 57907, 58720,
  /* 36521 */ 574817, 578753, 953, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579682, 578121, 578121,
  /* 36534 */ 578121, 578121, 578121, 578121, 578121, 578121, 578077, 578077, 578077, 578121, 578077, 57907, 467529,
  /* 36547 */ 578077, 57907, 57907, 57907, 1036851, 57907, 57907, 578121, 578121, 713289, 578121, 578121, 578121,
  /* 36560 */ 578121, 580546, 578121, 578121, 578121, 578121, 579956, 578121, 578121, 578121, 578077, 578077, 578077,
  /* 36573 */ 578121, 578077, 57907, 578121, 578077, 578077, 578077, 578416, 0, 0, 0, 578121, 578077, 57907, 578121,
  /* 36588 */ 578077, 578077, 578416, 578077, 578121, 578121, 1036873, 578121, 578121, 578077, 0, 0, 0, 3021, 0, 0, 0,
  /* 36605 */ 0, 0, 3026, 57907, 60469, 60470, 57907, 57907, 578121, 578121, 580665, 580666, 578121, 578121, 0, 0, 0, 0,
  /* 36623 */ 578077, 578077, 578077, 580208, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 36636 */ 578077, 1159709, 57907, 57907, 57907, 57907, 57907, 57907, 1016349, 1016371, 1016393, 0, 0, 0, 0, 0, 0, 0,
  /* 36654 */ 0, 0, 0, 0, 0, 0, 1991, 0, 0, 340, 341, 342, 343, 344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2776, 0, 0, 0, 0,
  /* 36684 */ 0, 0, 0, 389, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1952, 0, 0, 0, 343, 343, 344, 343, 0, 342, 343, 446,
  /* 36712 */ 455, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 487, 496,
  /* 36733 */ 496, 504, 496, 506, 496, 496, 506, 506, 496, 506, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
  /* 36754 */ 521, 521, 521, 521, 521, 578090, 578090, 578090, 57919, 578134, 578090, 57919, 578090, 578090, 57919,
  /* 36769 */ 57919, 57919, 578145, 578148, 578148, 578148, 578090, 578145, 578145, 578145, 578134, 578090, 57919,
  /* 36782 */ 578145, 578090, 578145, 578145, 578145, 578145, 578145, 578145, 578145, 578145, 578090, 57919, 578090,
  /* 36795 */ 578145, 578145, 1, 12290, 3, 0, 0, 0, 0, 649, 0, 0, 0, 0, 653, 654, 655, 656, 657, 658, 659, 0, 676, 677,
  /* 36819 */ 0, 0, 0, 0, 0, 681, 0, 0, 0, 0, 0, 0, 0, 0, 2460, 0, 0, 0, 0, 0, 0, 0, 0, 2472, 0, 0, 0, 286720, 0, 2477,
  /* 36849 */ 0, 0, 719, 0, 721, 0, 0, 0, 0, 0, 0, 0, 0, 0, 731, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36881 */ 131072, 0, 0, 0, 0, 649, 750, 751, 752, 0, 0, 0, 0, 0, 758, 759, 0, 0, 0, 0, 0, 0, 679, 0, 0, 0, 0, 0, 0,
  /* 36910 */ 0, 0, 0, 363, 363, 0, 0, 0, 0, 0, 0, 0, 759, 0, 0, 787, 0, 0, 0, 0, 0, 0, 0, 0, 0, 794, 676, 721, 0,
  /* 36939 */ 1093632, 803, 0, 0, 0, 0, 759, 0, 0, 0, 0, 0, 0, 0, 395, 0, 0, 0, 0, 0, 395, 0, 0, 0, 0, 752, 811, 812, 0,
  /* 36968 */ 0, 0, 0, 0, 0, 752, 0, 0, 815, 697, 0, 0, 0, 820, 0, 0, 0, 822, 0, 0, 0, 1093632, 697, 0, 0, 1093632, 0,
  /* 36995 */ 0, 0, 0, 0, 0, 697, 363, 363, 363, 0, 0, 0, 0, 0, 0, 678, 749, 0, 0, 0, 0, 0, 0, 0, 0, 0, 442368, 442368,
  /* 37023 */ 442368, 442368, 442368, 442368, 442368, 820, 820, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1093632, 578077, 578077,
  /* 37042 */ 578077, 578376, 578380, 578383, 578077, 578390, 578077, 578077, 578400, 578401, 578403, 578077, 578077,
  /* 37055 */ 578077, 578414, 1094173, 578077, 578077, 57907, 656256, 57907, 57907, 57907, 57907, 58258, 856627, 58264,
  /* 37069 */ 934451, 57907, 57907, 57907, 57907, 0, 0, 578121, 580112, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 37084 */ 578121, 578121, 579350, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 57907, 58281, 1094195,
  /* 37097 */ 57907, 57907, 57907, 57907, 0, 578121, 578121, 578121, 578497, 578501, 578504, 578121, 578511, 578121,
  /* 37111 */ 578121, 578521, 578522, 578524, 578121, 578121, 578121, 578535, 1094217, 578121, 578121, 578121, 578121,
  /* 37124 */ 578121, 578121, 579348, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578541,
  /* 37137 */ 578121, 578121, 578121, 578121, 578121, 578121, 578564, 58243, 57907, 58281, 1094195, 58376, 0, 578497,
  /* 37151 */ 578121, 578535, 1094217, 578572, 53537, 62477, 0, 0, 0, 0, 0, 0, 430080, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37174 */ 647168, 0, 0, 0, 0, 0, 1077, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37205 */ 664, 0, 664, 0, 0, 0, 0, 0, 1124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2205, 0, 0, 1152, 0, 0, 0, 0, 0,
  /* 37236 */ 0, 0, 0, 0, 1159, 0, 0, 0, 0, 0, 0, 0, 1961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 953, 0, 0, 0, 0, 0, 0, 0, 57907,
  /* 37267 */ 57907, 57907, 58676, 57907, 57907, 57907, 57907, 57907, 57907, 58684, 57907, 57907, 57907, 57907, 57907,
  /* 37282 */ 0, 2373, 0, 0, 0, 0, 578121, 578121, 579913, 578121, 578121, 57907, 57907, 58693, 57907, 57907, 58700,
  /* 37299 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 58712, 578121, 578949, 578121, 578121,
  /* 37313 */ 578121, 578121, 578121, 578121, 578957, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578077,
  /* 37326 */ 578077, 578077, 578077, 0, 579001, 579002, 58811, 578121, 578966, 578121, 578121, 578973, 578121, 578121,
  /* 37340 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578985, 578121, 578121, 578121, 578121, 580136,
  /* 37353 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580143, 578121, 578121, 578121, 578121,
  /* 37366 */ 579919, 578121, 578121, 579922, 579923, 578121, 578121, 578121, 578121, 579927, 578121, 579929, 897024, 0,
  /* 37380 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2636, 0, 1545, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221184,
  /* 37412 */ 0, 0, 0, 1572, 0, 1573, 0, 0, 0, 1575, 0, 746, 0, 0, 0, 0, 0, 0, 0, 1998, 578077, 578077, 578077, 578077,
  /* 37436 */ 578077, 578077, 578077, 578077, 580048, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578753, 0,
  /* 37450 */ 578077, 579175, 578077, 578077, 578077, 578077, 579180, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 37463 */ 578077, 579197, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 580402, 578077, 578077,
  /* 37476 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579206, 578077, 578077, 578077, 579209, 578077,
  /* 37489 */ 578077, 897565, 578077, 578077, 578077, 578077, 578077, 578077, 578787, 578077, 578077, 578077, 578077,
  /* 37502 */ 578077, 578077, 578077, 578077, 578077, 578405, 578077, 578077, 578077, 578077, 578422, 578077, 57907,
  /* 37515 */ 59088, 57907, 57907, 57907, 59091, 57907, 57907, 897587, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 37530 */ 59080, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 1046844, 57907, 57907, 57907, 57907, 57907,
  /* 37545 */ 57907, 57907, 574817, 0, 578121, 579327, 578121, 578121, 578121, 578121, 579332, 578121, 578121, 578121,
  /* 37559 */ 578121, 578121, 578121, 578121, 578077, 578077, 578077, 578077, 1155, 578121, 578077, 57907, 578121,
  /* 37572 */ 578121, 578121, 579358, 578121, 578121, 578121, 579361, 578121, 578121, 897609, 578121, 578121, 578121,
  /* 37585 */ 578121, 578121, 578121, 579375, 578121, 578121, 579378, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 37598 */ 578077, 508445, 508467, 508489, 0, 0, 0, 0, 0, 0, 0, 0, 462848, 0, 0, 0, 0, 0, 0, 0, 0, 726, 0, 0, 0, 0,
  /* 37624 */ 0, 0, 0, 0, 755, 0, 0, 0, 0, 0, 0, 0, 0, 773, 0, 0, 0, 0, 0, 780, 0, 57907, 57907, 57907, 57907, 578121,
  /* 37650 */ 578121, 578121, 578121, 0, 0, 0, 1888, 0, 1040, 0, 0, 0, 0, 0, 0, 434176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37676 */ 802816, 0, 802816, 0, 0, 0, 0, 1890, 0, 1044, 0, 0, 0, 1892, 0, 1048, 0, 0, 0, 1894, 0, 1052, 0, 0, 0, 0,
  /* 37702 */ 1911, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2784, 0, 578077, 578077, 578077, 0, 0, 1922, 0, 0, 0, 0, 0, 0, 0,
  /* 37729 */ 0, 0, 0, 0, 0, 0, 2259, 0, 0, 578077, 578077, 578077, 578077, 579561, 578077, 578077, 578077, 578077,
  /* 37747 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579593, 578077, 578077, 578077, 57907, 578077,
  /* 37760 */ 579572, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 37773 */ 578077, 578077, 580053, 580054, 57907, 57907, 57907, 59716, 57907, 0, 0, 0, 2374, 0, 1788, 578121, 578121,
  /* 37790 */ 578121, 578121, 578121, 578121, 1030505, 578121, 578121, 578121, 579949, 578121, 578121, 578121, 578121,
  /* 37803 */ 578121, 578121, 788577, 578121, 807497, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580441,
  /* 37816 */ 578077, 57907, 578121, 0, 0, 0, 0, 0, 0, 0, 0, 580035, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 37834 */ 578077, 578806, 578077, 578077, 578813, 578077, 578077, 578077, 578077, 578077, 0, 0, 0, 0, 2444, 0, 0, 0,
  /* 37852 */ 0, 0, 2450, 0, 0, 0, 0, 0, 0, 0, 2212, 2213, 0, 0, 2215, 0, 2216, 0, 0, 0, 0, 0, 2496, 0, 0, 0, 0, 578077,
  /* 37880 */ 580036, 578077, 578077, 578077, 578077, 578077, 578077, 578804, 578077, 578077, 578077, 578077, 578077,
  /* 37893 */ 578077, 578077, 578818, 578077, 580055, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 37906 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579571, 0, 0, 2626, 0, 0, 0, 0, 0, 2632, 0, 0, 0,
  /* 37926 */ 0, 0, 0, 0, 0, 2486, 0, 0, 0, 0, 0, 0, 0, 0, 641, 642, 0, 0, 645, 646, 0, 0, 578121, 580274, 578121,
  /* 37951 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 37964 */ 580131, 578121, 0, 0, 2761, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2635, 0, 0, 580396, 578077, 578077,
  /* 37988 */ 578077, 578077, 580400, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 38001 */ 580222, 580223, 578077, 578077, 578077, 578077, 578077, 57907, 57907, 57907, 57907, 580426, 578121,
  /* 38014 */ 578121, 578121, 578121, 580430, 578121, 578121, 578121, 578121, 578121, 578121, 579667, 578121, 578121,
  /* 38027 */ 579668, 578121, 578121, 578121, 578121, 578121, 578121, 578077, 578077, 57907, 578121, 0, 0, 0, 2909, 0,
  /* 38043 */ 0, 0, 0, 2771, 0, 0, 0, 2916, 0, 0, 0, 0, 578077, 578077, 580459, 578077, 578077, 60219, 57907, 57907,
  /* 38063 */ 57907, 57907, 60223, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59094, 57907, 57907, 913971,
  /* 38078 */ 57907, 57907, 57907, 57907, 57907, 578077, 580463, 578077, 578077, 578077, 578077, 578077, 580469, 578077,
  /* 38092 */ 578077, 57907, 57907, 60282, 57907, 57907, 57907, 57907, 57907, 57907, 59092, 59093, 59095, 57907, 57907,
  /* 38107 */ 57907, 57907, 59098, 968411, 57907, 60286, 57907, 57907, 57907, 57907, 57907, 60292, 57907, 57907, 578121,
  /* 38122 */ 578121, 580489, 578121, 578121, 578121, 580493, 0, 0, 0, 0, 2975, 0, 0, 0, 578077, 578077, 578077, 578077,
  /* 38140 */ 578077, 580518, 578077, 578077, 516637, 57907, 516659, 578121, 516681, 2843, 0, 0, 0, 2845, 0, 0, 0, 0, 0,
  /* 38159 */ 0, 0, 45056, 49152, 401408, 0, 0, 0, 0, 40960, 0, 578077, 580522, 578077, 578077, 578077, 578077, 578077,
  /* 38177 */ 57907, 57907, 57907, 57907, 57907, 60339, 57907, 57907, 57907, 57907, 57907, 57907, 59106, 57907, 57907,
  /* 38192 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 2119, 0, 0, 0, 578121, 578121, 578121, 60343, 57907,
  /* 38208 */ 57907, 57907, 57907, 57907, 578121, 578121, 578121, 578121, 578121, 580544, 578121, 578121, 578121,
  /* 38221 */ 580548, 57907, 57907, 57907, 57907, 57907, 578121, 578121, 578121, 578121, 578121, 578121, 0, 3132, 0, 0,
  /* 38237 */ 578077, 578077, 580207, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 38250 */ 578077, 579566, 578077, 578077, 578077, 578077, 387, 0, 0, 0, 391, 387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 757,
  /* 38273 */ 0, 0, 0, 0, 0, 0, 0, 0, 403, 0, 345, 0, 45056, 49152, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 1185, 0, 0, 0,
  /* 38302 */ 0, 0, 0, 0, 0, 0, 0, 302, 302, 0, 0, 0, 0, 0, 0, 0, 0, 435, 0, 0, 447, 0, 0, 0, 0, 0, 0, 0, 0, 0, 393216,
  /* 38333 */ 393216, 393216, 393216, 393216, 393216, 393216, 522, 522, 522, 522, 0, 0, 0, 0, 0, 0, 0, 0, 522, 522, 522,
  /* 38354 */ 522, 522, 522, 522, 578091, 578091, 578091, 57920, 578135, 578091, 57920, 578091, 578091, 57920, 57920,
  /* 38369 */ 57920, 578135, 578091, 578091, 578091, 578091, 578135, 578135, 578135, 578135, 578091, 57920, 578135,
  /* 38382 */ 578091, 578135, 578135, 578135, 578135, 578135, 578135, 578135, 578135, 578158, 57971, 578158, 578135,
  /* 38395 */ 578169, 1, 12290, 3, 0, 749, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319488, 0, 57907, 57907, 57907,
  /* 38420 */ 58289, 57907, 57907, 57907, 0, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579377,
  /* 38434 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578526, 578077, 578077, 578405, 578077, 0, 0, 0,
  /* 38449 */ 578121, 578077, 57907, 578560, 578077, 578077, 578077, 578077, 578077, 579837, 578077, 578077, 578077,
  /* 38462 */ 578077, 579841, 578077, 578077, 578077, 578077, 578077, 578077, 579577, 578077, 578077, 578077, 578077,
  /* 38475 */ 579582, 578077, 578077, 578077, 578077, 0, 0, 0, 0, 1140, 0, 0, 0, 1145, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
  /* 38498 */ 1070, 0, 0, 0, 0, 0, 0, 0, 0, 0, 446926, 446926, 446926, 446926, 446926, 446926, 446926, 0, 0, 0, 1168, 0,
  /* 38520 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2204, 0, 2206, 0, 578779, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 38542 */ 578077, 578077, 578077, 578791, 578077, 578077, 578077, 578077, 578077, 578077, 579848, 578077, 578077,
  /* 38555 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579580, 578077, 578077, 578077, 578077, 579584,
  /* 38568 */ 578077, 578077, 578077, 578077, 578823, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 57907,
  /* 38581 */ 57907, 57907, 57907, 57907, 58252, 57907, 57907, 58262, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 38596 */ 57907, 58695, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 58710, 57907, 57907,
  /* 38611 */ 57907, 57907, 57907, 59078, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59686,
  /* 38626 */ 57907, 57907, 57907, 57907, 57907, 578121, 578968, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 38640 */ 578121, 578121, 578121, 578983, 578121, 578121, 578121, 578121, 578927, 578934, 578121, 578121, 578121,
  /* 38653 */ 578121, 578121, 578121, 578121, 578121, 578946, 578121, 0, 0, 1490, 0, 0, 0, 1496, 0, 0, 0, 1502, 0, 0, 0,
  /* 38674 */ 0, 0, 0, 0, 2224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1994, 2279, 0, 0, 0, 0, 578077, 0, 0, 0, 0, 929792, 0, 0, 0,
  /* 38703 */ 0, 0, 0, 0, 0, 0, 0, 0, 32768, 0, 0, 0, 0, 0, 0, 524288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2767,
  /* 38733 */ 2768, 0, 57907, 57907, 57907, 57907, 578121, 578121, 578121, 578121, 0, 0, 1485, 0, 0, 0, 0, 0, 0, 0,
  /* 38753 */ 2239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1516, 0, 0, 0, 0, 0, 0, 1491, 0, 0, 0, 0, 0, 1497, 0, 0, 0, 0, 0, 1503,
  /* 38783 */ 0, 0, 0, 0, 0, 0, 701, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 0, 0, 0, 0, 0, 0, 0, 1955, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38816 */ 0, 0, 0, 0, 0, 0, 368640, 0, 0, 0, 1997, 0, 0, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 38836 */ 578077, 578077, 578077, 578077, 578077, 580214, 578077, 578077, 579559, 578077, 578077, 578077, 579562,
  /* 38849 */ 578077, 852509, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579225, 578077, 578077,
  /* 38862 */ 578077, 578077, 578077, 578077, 578077, 57907, 852531, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 38876 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 1040947, 57907, 0, 0, 0, 0, 0, 2211, 0, 0, 0, 0, 0, 0, 0,
  /* 38898 */ 0, 0, 0, 805, 0, 0, 0, 0, 0, 0, 2263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 422315, 0, 578077, 578077,
  /* 38927 */ 579845, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 38940 */ 578077, 580066, 578077, 578077, 2668, 0, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 38954 */ 578077, 578077, 578077, 578077, 578077, 578077, 788453, 578077, 0, 0, 2771, 2913, 0, 2915, 0, 0, 0, 0, 0,
  /* 38973 */ 578077, 580458, 578077, 580460, 578077, 59773, 57907, 579967, 578121, 2433, 2434, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38992 */ 0, 363, 363, 0, 0, 0, 0, 1106, 0, 2972, 0, 0, 0, 0, 0, 307200, 578077, 578077, 578077, 578077, 578077,
  /* 39013 */ 578077, 578077, 578077, 579825, 578077, 578077, 579828, 579829, 578077, 578077, 578077, 0, 0, 0, 0, 0,
  /* 39029 */ 802816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 802816, 0, 0, 0, 0, 578077, 578077, 803357, 578077, 578077,
  /* 39052 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 580225, 578077,
  /* 39065 */ 578077, 578077, 578427, 57907, 57907, 57907, 57907, 57907, 803379, 57907, 57907, 57907, 57907, 57907,
  /* 39079 */ 57907, 57907, 57907, 59107, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59121, 57907, 57907,
  /* 39094 */ 57907, 57907, 59127, 57907, 57907, 57907, 1041, 1045, 0, 0, 1049, 1053, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39116 */ 1057, 0, 0, 0, 0, 0, 578753, 1637, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 39133 */ 578077, 578077, 578077, 578077, 578077, 1065501, 578077, 574817, 1789, 578121, 578121, 578121, 578121,
  /* 39146 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 795209, 578121, 57907,
  /* 39159 */ 57907, 57907, 57907, 60156, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 39174 */ 59912, 57907, 57907, 57907, 57907, 346, 346, 348, 346, 0, 0, 346, 0, 346, 0, 0, 0, 0, 347, 0, 0, 0, 0, 0,
  /* 39198 */ 0, 552960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 727, 0, 0, 0, 0, 0, 0, 0, 0, 0, 346, 346, 348, 346, 346, 346, 346,
  /* 39226 */ 346, 346, 513, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 578092,
  /* 39246 */ 578092, 578092, 57921, 578136, 578092, 57921, 578092, 578092, 57921, 57921, 57921, 578136, 578092, 578092,
  /* 39260 */ 578092, 578092, 578136, 578136, 578136, 578136, 578092, 57921, 578136, 578092, 578136, 578136, 578136,
  /* 39273 */ 578136, 578136, 578136, 578136, 578136, 578092, 57921, 578092, 578136, 578136, 1, 12290, 3, 0, 0, 720, 0,
  /* 39290 */ 722, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86016, 0, 0, 0, 0, 0, 0, 737, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39323 */ 364544, 0, 0, 57907, 57907, 58285, 57907, 57907, 57907, 57907, 0, 578121, 578121, 578121, 578498, 578121,
  /* 39339 */ 578121, 578121, 578121, 578121, 580499, 578121, 578121, 578077, 0, 0, 0, 0, 0, 0, 2771, 578514, 578121,
  /* 39356 */ 578121, 578121, 578121, 988127, 578529, 578121, 578121, 578539, 578121, 578121, 578121, 578121, 578549,
  /* 39369 */ 578121, 578121, 578121, 579678, 578121, 579680, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 39382 */ 578121, 578121, 578121, 799305, 578121, 578121, 578121, 578121, 578121, 988127, 578552, 578077, 988006,
  /* 39395 */ 578077, 0, 0, 0, 578121, 578077, 57907, 578549, 578377, 578408, 578077, 578418, 0, 1107, 0, 1109, 0, 1111,
  /* 39413 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1072, 0, 0, 0, 0, 0, 0, 0, 0, 1125, 0, 1127, 0, 0, 0, 0, 1132, 0, 0, 0, 0,
  /* 39444 */ 1136, 0, 0, 0, 0, 1169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 294912, 2634, 0, 0, 0, 0, 0, 1210, 0, 0, 0, 1212,
  /* 39473 */ 0, 0, 0, 0, 0, 0, 1136, 578753, 832, 836147, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 39491 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59902, 57907, 58691, 57907, 57907, 57907, 57907, 57907,
  /* 39506 */ 57907, 57907, 58705, 57907, 57907, 57907, 57907, 57907, 57907, 58657, 57907, 57907, 57907, 57907, 58666,
  /* 39521 */ 57907, 57907, 57907, 57907, 57907, 58715, 58716, 57907, 57907, 57907, 574817, 578753, 953, 578121, 578121,
  /* 39536 */ 578121, 578121, 578121, 578121, 578121, 578077, 578077, 578077, 578817, 0, 578121, 578077, 57907, 578121,
  /* 39550 */ 578989, 578121, 578121, 578121, 578994, 578121, 578121, 578997, 578077, 578077, 579000, 0, 578121, 578077,
  /* 39564 */ 57907, 578121, 579728, 578077, 578077, 578077, 59538, 57907, 57907, 57907, 579732, 578121, 578121, 578121,
  /* 39578 */ 0, 0, 0, 0, 0, 0, 2459, 0, 0, 0, 0, 0, 0, 0, 0, 0, 682, 683, 684, 0, 0, 0, 688, 579005, 578077, 578077,
  /* 39604 */ 579008, 58817, 57907, 57907, 58820, 579013, 578121, 578121, 579016, 62477, 0, 0, 0, 0, 0, 0, 708, 0, 0, 0,
  /* 39624 */ 0, 0, 0, 0, 0, 0, 363, 0, 0, 86016, 86016, 0, 0, 0, 0, 0, 1547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39655 */ 0, 2771, 0, 0, 0, 1559, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2229, 0, 0, 0, 0, 1582, 0, 0, 0, 0, 0, 0, 0,
  /* 39686 */ 0, 0, 0, 0, 0, 0, 0, 578753, 832, 0, 1598, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 786432, 0, 0, 0, 0,
  /* 39716 */ 192512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2280, 0, 1636, 578077, 578753, 0, 578077, 578077, 578077,
  /* 39738 */ 578077, 579178, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 580403, 578077,
  /* 39751 */ 578077, 578077, 578077, 578077, 578077, 579232, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 39764 */ 579239, 578077, 578077, 578077, 578077, 579245, 578077, 578077, 578077, 578077, 578077, 995869, 578077,
  /* 39777 */ 578077, 578077, 578077, 578077, 580064, 578077, 578077, 578077, 578077, 578077, 578077, 811549, 578077,
  /* 39790 */ 578077, 579840, 578077, 868893, 881181, 578077, 578077, 578077, 574817, 0, 578121, 578121, 578121, 578121,
  /* 39804 */ 579330, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579709, 579710, 578121,
  /* 39817 */ 578121, 578121, 578121, 578121, 578121, 579384, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 39830 */ 579391, 578121, 578121, 578121, 578121, 579397, 578121, 578121, 578121, 578121, 580275, 578121, 578121,
  /* 39843 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580285, 0, 0, 0, 0, 0, 991232, 1912, 0,
  /* 39860 */ 1914, 1915, 0, 0, 0, 0, 0, 0, 0, 413, 413, 0, 0, 0, 0, 0, 413, 0, 0, 0, 0, 1934, 0, 1936, 0, 0, 0, 0, 0,
  /* 39889 */ 0, 0, 1943, 0, 0, 0, 0, 0, 0, 569344, 415, 415, 0, 0, 0, 0, 0, 415, 0, 0, 0, 0, 0, 0, 622592, 0, 1975, 0,
  /* 39917 */ 0, 0, 0, 0, 0, 0, 1983, 0, 0, 1986, 993168, 0, 0, 0, 1989, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 397312, 0,
  /* 39943 */ 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 623133, 578077, 578077, 578077, 578077, 578077, 579541, 578077, 578077,
  /* 39962 */ 578077, 578077, 578077, 580047, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 39975 */ 578077, 830187, 578077, 578077, 578077, 578077, 1010413, 578077, 578077, 579560, 578077, 578077, 578077,
  /* 39988 */ 578077, 578077, 579564, 578077, 579565, 578077, 579568, 578077, 578077, 578077, 578077, 578077, 860701,
  /* 40001 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579238, 578077, 578077,
  /* 40014 */ 578077, 578077, 578077, 578077, 578077, 578077, 579212, 578077, 578077, 913949, 578077, 578077, 578077,
  /* 40027 */ 578077, 578077, 578077, 993269, 578077, 578077, 578077, 578077, 578077, 579579, 578077, 578077, 578077,
  /* 40040 */ 578077, 578077, 578077, 578077, 579210, 579211, 579213, 578077, 578077, 578077, 578077, 579216, 968337,
  /* 40053 */ 57907, 57907, 59431, 57907, 59432, 57907, 59435, 57907, 57907, 57907, 57907, 57907, 993328, 57907, 57907,
  /* 40068 */ 57907, 57907, 57907, 57907, 59120, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59697,
  /* 40083 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59446, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 40098 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 1061427, 57907, 57907, 57907, 579688, 578121, 579689,
  /* 40112 */ 578121, 579692, 578121, 578121, 578121, 578121, 578121, 993393, 578121, 578121, 578121, 578121, 578121,
  /* 40125 */ 578121, 1111869, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579696, 578121,
  /* 40138 */ 578121, 578121, 578121, 578121, 578121, 579703, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 40151 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580132, 0, 2234, 0, 0, 0, 2238, 0, 0, 0,
  /* 40169 */ 0, 0, 0, 0, 2244, 0, 0, 0, 0, 0, 0, 667648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 359, 0, 0, 0, 0, 0, 359, 0, 0, 0,
  /* 40200 */ 0, 0, 2251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1147, 0, 0, 0, 1151, 0, 57907, 57907, 57907, 57907, 59680,
  /* 40224 */ 57907, 57907, 57907, 57907, 59685, 57907, 57907, 57907, 57907, 57907, 57907, 58679, 57907, 57907, 57907,
  /* 40239 */ 57907, 939325, 57907, 58687, 57907, 57907, 578077, 580069, 578077, 578077, 578077, 578077, 57907, 57907,
  /* 40253 */ 57907, 57907, 59885, 59886, 57907, 57907, 57907, 57907, 0, 0, 578121, 578121, 580113, 578121, 578121,
  /* 40268 */ 578121, 578121, 580118, 578121, 578121, 0, 0, 578077, 633454, 578077, 578077, 578077, 578077, 578077,
  /* 40282 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579567, 578077, 578077, 578077, 2769, 0, 0, 0, 0,
  /* 40298 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2912, 0, 0, 2771, 0, 0, 0, 0, 0, 0, 2919, 0, 580457, 578077, 578077,
  /* 40324 */ 578077, 580461, 0, 578077, 578077, 578077, 578077, 580568, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 40338 */ 578077, 578077, 57907, 57907, 60042, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 60388, 57907, 57907,
  /* 40353 */ 57907, 57907, 57907, 57907, 57907, 57907, 578121, 578121, 578121, 578121, 580592, 57907, 57907, 57907,
  /* 40367 */ 60471, 57907, 578121, 578121, 578121, 578121, 580667, 578121, 167936, 0, 278528, 0, 578077, 578077,
  /* 40381 */ 578077, 578077, 578077, 774685, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 57907, 57907,
  /* 40394 */ 57907, 57907, 60338, 57907, 57907, 57907, 57907, 366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20480,
  /* 40418 */ 0, 0, 0, 0, 392, 393, 0, 394, 0, 0, 0, 0, 0, 394, 0, 0, 0, 0, 0, 0, 802816, 0, 0, 0, 0, 0, 578077, 578077,
  /* 40446 */ 578077, 578077, 578077, 578077, 578077, 578077, 676381, 578077, 578077, 399, 0, 0, 0, 0, 0, 366, 374, 402,
  /* 40464 */ 0, 0, 0, 0, 0, 366, 0, 0, 394, 0, 0, 0, 0, 349, 0, 0, 366, 0, 394, 0, 407, 409, 0, 0, 366, 374, 0, 45056,
  /* 40492 */ 49152, 0, 0, 0, 0, 425, 40960, 0, 0, 0, 0, 0, 1522, 0, 0, 0, 0, 0, 0, 0, 1529, 1530, 0, 0, 0, 0, 0, 1534,
  /* 40520 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1517, 0, 0, 0, 0, 0, 425, 425, 0, 425, 0, 409, 425, 448, 456, 0, 0, 0, 0, 0,
  /* 40550 */ 0, 0, 0, 2774, 0, 0, 0, 0, 0, 0, 0, 0, 2240, 0, 0, 0, 0, 0, 0, 0, 0, 791, 0, 0, 0, 0, 0, 0, 0, 0, 952, 0,
  /* 40582 */ 0, 0, 0, 0, 0, 0, 0, 953, 952, 952, 952, 952, 952, 952, 952, 831, 0, 0, 0, 0, 0, 0, 831, 831, 0, 407, 0,
  /* 40609 */ 497, 497, 0, 497, 497, 497, 497, 497, 497, 497, 497, 523, 523, 523, 523, 456, 456, 456, 531, 456, 532,
  /* 40630 */ 456, 456, 523, 537, 523, 523, 523, 523, 539, 578093, 578093, 578093, 57922, 578137, 578093, 57922, 578093,
  /* 40647 */ 578093, 57922, 57922, 57922, 578137, 578149, 578149, 578149, 578093, 578137, 578137, 578137, 578137,
  /* 40660 */ 578093, 57922, 578137, 578093, 578137, 578137, 578137, 578137, 578137, 578137, 578137, 578137, 578159,
  /* 40673 */ 57972, 578159, 578137, 578170, 1, 12290, 3, 0, 647168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 978944,
  /* 40697 */ 0, 0, 0, 0, 0, 692, 0, 0, 0, 0, 0, 363, 363, 363, 0, 0, 0, 0, 0, 0, 724, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40728 */ 2175675, 0, 0, 0, 0, 0, 647951, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36864, 0, 0, 0, 901120, 0, 0,
  /* 40757 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2463, 0, 0, 0, 0, 0, 0, 0, 0, 901120, 0, 0, 647951, 0, 0, 0, 0, 901120, 0,
  /* 40786 */ 0, 0, 0, 0, 0, 0, 901120, 0, 0, 0, 0, 0, 0, 647951, 0, 901120, 0, 0, 0, 0, 578077, 578077, 648004, 578077,
  /* 40810 */ 471603, 57907, 57907, 58287, 57907, 0, 471625, 578121, 578121, 578541, 578121, 53537, 62477, 0, 0, 0, 0,
  /* 40827 */ 0, 384, 0, 45056, 49152, 0, 0, 0, 0, 0, 40960, 0, 578121, 901705, 578121, 578121, 578121, 578121, 578121,
  /* 40846 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 648125, 578550, 578121, 648004, 578553, 578077,
  /* 40859 */ 578077, 0, 0, 0, 578121, 578077, 57907, 648125, 578077, 578077, 578077, 578077, 578077, 580220, 578077,
  /* 40874 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 580049, 578077, 578077, 580051,
  /* 40887 */ 578077, 578077, 578077, 0, 0, 0, 0, 1110, 0, 0, 0, 0, 0, 1116, 0, 1118, 0, 0, 0, 0, 0, 0, 753, 0, 0, 0, 0,
  /* 40914 */ 0, 0, 0, 0, 763, 1056, 1181, 0, 0, 0, 0, 0, 0, 1187, 0, 0, 0, 0, 1191, 0, 0, 0, 0, 0, 0, 868352, 0, 0, 0,
  /* 40943 */ 1081344, 0, 0, 0, 0, 0, 0, 0, 2631, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1071, 0, 0, 0, 1075, 0, 0, 0, 0, 0, 1191,
  /* 40972 */ 1198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 372736, 372736, 372736, 0, 372736, 58647, 57907, 57907, 57907,
  /* 40993 */ 58651, 57907, 57907, 58662, 57907, 57907, 58665, 57907, 57907, 57907, 57907, 57907, 57907, 58680, 57907,
  /* 41008 */ 58683, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59450, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 41023 */ 57907, 57907, 788512, 57907, 807475, 57907, 57907, 57907, 57907, 57907, 578121, 578121, 578924, 578121,
  /* 41037 */ 578121, 578935, 578121, 578121, 578938, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578977,
  /* 41050 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578077, 0, 0, 0, 0, 3066, 0, 3068, 0, 0,
  /* 41068 */ 0, 0, 1511, 1512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1175, 0, 0, 0, 0, 0, 0, 0, 1546, 0, 1548, 0, 0, 0, 1551,
  /* 41097 */ 0, 0, 0, 1555, 0, 0, 0, 0, 0, 0, 797, 0, 0, 0, 0, 0, 0, 0, 797, 0, 0, 0, 0, 578077, 578077, 578077,
  /* 41123 */ 578077, 1557, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 339968, 0, 0, 0, 0, 1512, 0, 0, 0, 0, 0, 0, 0,
  /* 41153 */ 0, 0, 0, 0, 401408, 401408, 401408, 0, 401408, 579188, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 41169 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579832, 579204, 578077, 578077,
  /* 41182 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 41195 */ 579844, 579340, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 41208 */ 578121, 578121, 578121, 578121, 580145, 579356, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 41221 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 819785, 0, 0, 1910, 970752, 0, 0, 0, 0, 0,
  /* 41239 */ 0, 0, 0, 0, 0, 0, 0, 2490, 0, 0, 0, 0, 0, 0, 548864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2643, 0, 0, 0, 0,
  /* 41271 */ 0, 0, 1957, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2777, 0, 0, 0, 0, 1970, 0, 0, 0, 0, 0, 0, 0, 0, 1978, 0,
  /* 41302 */ 0, 0, 0, 0, 0, 0, 2253, 0, 0, 0, 0, 0, 0, 2260, 0, 536576, 0, 0, 0, 0, 578077, 578077, 579537, 578077,
  /* 41326 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579839, 578077, 578077, 578077, 578077, 578077,
  /* 41339 */ 578077, 578077, 971293, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579581,
  /* 41352 */ 578077, 578077, 578077, 578077, 578077, 578077, 579860, 578077, 578077, 578077, 57907, 57907, 57907,
  /* 41365 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 60227, 60228, 60229, 57907, 578077, 578077, 578077,
  /* 41379 */ 578077, 579588, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 57907,
  /* 41392 */ 57907, 59673, 57907, 57907, 57907, 57907, 59404, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 41407 */ 57907, 57907, 57907, 57907, 57907, 57907, 1155635, 57907, 57907, 57907, 57907, 57907, 59448, 57907, 57907,
  /* 41422 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59455, 57907, 57907, 57907, 57907, 57907, 59105, 57907,
  /* 41437 */ 57907, 59108, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 0, 578121, 578121, 578121, 578121, 578121,
  /* 41452 */ 578121, 578121, 578121, 578077, 0, 0, 0, 0, 0, 3067, 0, 578121, 578121, 579705, 578121, 578121, 578121,
  /* 41469 */ 578121, 578121, 578121, 578121, 578121, 578121, 579712, 578121, 578121, 578121, 578121, 578928, 578121,
  /* 41482 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580142, 578121, 578121,
  /* 41495 */ 578121, 578121, 0, 1491, 0, 1497, 0, 1503, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1538, 1539, 1540, 0, 0, 0, 0, 0,
  /* 41521 */ 0, 229376, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102400, 0, 0, 0, 0, 0, 0, 2264, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41552 */ 0, 2272, 0, 0, 0, 0, 0, 1561, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1591, 0, 1593, 0, 0, 0, 0, 0, 0, 0, 262144, 0,
  /* 41582 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 578077, 578077, 578077, 578077, 580517, 578077, 578077, 578077, 57907, 57907,
  /* 41601 */ 59703, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 1065523,
  /* 41616 */ 57907, 57907, 57907, 2454, 0, 0, 0, 0, 2458, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1553, 0, 0, 0, 0, 0, 303104, 0,
  /* 41643 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2654, 2655, 578077, 578077, 578077, 1040925, 578077, 578077, 578077,
  /* 41664 */ 578077, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 58272, 57907,
  /* 41679 */ 0, 0, 2771, 0, 2853, 0, 0, 0, 479232, 0, 0, 0, 0, 0, 0, 507904, 578077, 580397, 578077, 578077, 580399,
  /* 41700 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 580050, 578077,
  /* 41713 */ 578077, 578077, 578077, 57907, 57907, 57907, 57907, 578121, 580427, 578121, 578121, 580429, 578121,
  /* 41726 */ 578121, 578121, 578121, 578121, 578121, 578121, 579349, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 41739 */ 578121, 578121, 579362, 579363, 579365, 578121, 578121, 578121, 578121, 579368, 968489, 578077, 578077,
  /* 41752 */ 578077, 580465, 578077, 580467, 578077, 578077, 578077, 578077, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 41766 */ 57907, 57907, 57907, 60226, 57907, 57907, 57907, 57907, 57907, 57907, 60288, 57907, 60290, 57907, 57907,
  /* 41781 */ 57907, 57907, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580433, 578121,
  /* 41794 */ 578121, 578121, 580495, 578121, 580497, 578121, 578121, 578121, 578121, 578077, 0, 0, 0, 0, 0, 0, 2771, 0,
  /* 41812 */ 0, 0, 0, 0, 0, 0, 0, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 0, 0, 580564, 578077,
  /* 41835 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 60384, 57907,
  /* 41848 */ 57907, 57907, 57907, 57907, 59408, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 41863 */ 60428, 57907, 578121, 578121, 578121, 578121, 578121, 0, 3069, 0, 578077, 578077, 578077, 578077, 578077,
  /* 41878 */ 578077, 578077, 578077, 578077, 580612, 578077, 578077, 57907, 57907, 58244, 57907, 57907, 57907, 57907,
  /* 41892 */ 58260, 57907, 57907, 57907, 57907, 988065, 58275, 580635, 578077, 578077, 578077, 578077, 57907, 729651,
  /* 41906 */ 60449, 57907, 57907, 57907, 57907, 578121, 729673, 580647, 578121, 578121, 578121, 579690, 578121, 578121,
  /* 41920 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579702, 408, 354, 0, 0, 0, 0, 0,
  /* 41937 */ 45056, 49152, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 1574, 0, 0, 0, 0, 0, 0, 0, 0, 1953, 0, 0, 0, 0, 0, 693,
  /* 41966 */ 0, 0, 0, 0, 363, 363, 363, 0, 0, 702, 473, 484, 473, 0, 0, 473, 0, 0, 0, 0, 0, 0, 0, 0, 524, 524, 528,
  /* 41993 */ 528, 528, 528, 473, 473, 473, 473, 473, 478, 473, 473, 528, 524, 528, 528, 528, 528, 540, 578094, 578094,
  /* 42013 */ 578094, 57923, 578138, 578094, 57923, 578094, 578094, 57923, 57923, 57923, 578138, 578094, 578094, 578094,
  /* 42027 */ 578094, 578138, 578138, 578138, 578138, 578094, 57923, 578138, 578094, 578138, 578138, 578138, 578138,
  /* 42040 */ 578138, 578138, 578138, 578138, 578160, 57973, 578160, 578138, 578171, 1, 12290, 3, 0, 0, 655360, 0, 0, 0,
  /* 42058 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 442368, 0, 0, 0, 736, 0, 0, 0, 655360, 736, 0, 742, 743, 655360, 0, 0, 0, 0,
  /* 42086 */ 0, 0, 790, 0, 0, 0, 0, 0, 0, 0, 0, 0, 598475, 598475, 598475, 598475, 598475, 598475, 598475, 0, 0,
  /* 42107 */ 856064, 0, 933888, 0, 0, 0, 0, 0, 0, 933888, 0, 0, 0, 0, 0, 655360, 0, 0, 0, 856064, 0, 933888, 0, 790, 0,
  /* 42132 */ 810, 0, 0, 0, 667, 0, 0, 0, 0, 810, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 417792, 0, 0, 0, 0, 40960, 0, 0,
  /* 42159 */ 655360, 0, 0, 0, 0, 0, 0, 0, 0, 790, 0, 0, 0, 0, 0, 0, 0, 2267, 0, 0, 0, 0, 0, 2271, 0, 0, 0, 0, 790, 790,
  /* 42189 */ 0, 655360, 0, 0, 790, 933888, 830, 0, 578077, 578077, 656197, 578077, 578077, 578077, 578077, 578785,
  /* 42205 */ 836125, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 580330, 578077,
  /* 42218 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578391, 856605, 578397, 934429, 578077,
  /* 42231 */ 578077, 578077, 578077, 578077, 578415, 578077, 578077, 578077, 578077, 578077, 864797, 578077, 578077,
  /* 42244 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579592, 578077, 578077, 578077, 578077,
  /* 42257 */ 57907, 57907, 58282, 57907, 57907, 57907, 57907, 57907, 0, 578121, 578121, 656318, 578121, 578121, 578121,
  /* 42272 */ 578121, 578512, 856649, 578518, 934473, 578121, 578121, 578121, 578121, 578121, 578536, 578121, 578121,
  /* 42285 */ 578121, 578121, 578121, 656318, 578121, 578121, 578121, 579706, 578121, 578121, 578121, 578121, 578121,
  /* 42298 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579699, 579700, 578121, 578121, 578121, 656197,
  /* 42311 */ 578077, 578077, 578555, 0, 0, 0, 578121, 578077, 57907, 656318, 578077, 578077, 578415, 578077, 578077,
  /* 42326 */ 578077, 578077, 578802, 578077, 578077, 578077, 578809, 578811, 578077, 578077, 578077, 578077, 578077,
  /* 42339 */ 578077, 579196, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579552, 578077,
  /* 42352 */ 578077, 578077, 578077, 578077, 578077, 0, 925696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1162, 0, 0, 0, 0, 0,
  /* 42376 */ 326, 0, 45056, 49152, 0, 0, 0, 0, 0, 40960, 0, 1057, 0, 0, 0, 1184, 0, 1186, 0, 0, 0, 0, 0, 0, 1192, 0, 0,
  /* 42403 */ 0, 0, 0, 329, 330, 331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1196, 0, 1199, 0,
  /* 42432 */ 1184, 1202, 0, 258048, 0, 0, 0, 0, 1086, 0, 0, 0, 0, 1211, 0, 0, 0, 0, 1211, 0, 0, 1105, 0, 578753, 832,
  /* 42457 */ 578755, 578077, 578077, 578077, 578759, 578077, 578077, 578077, 578077, 578765, 578077, 578077, 578077,
  /* 42470 */ 578077, 578077, 578077, 578828, 578829, 578077, 578077, 578077, 57907, 57907, 57907, 57907, 57907, 58254,
  /* 42484 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59436, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 42499 */ 57907, 57907, 60427, 57907, 57907, 578121, 578121, 578121, 578121, 578121, 578077, 578077, 578077, 578784,
  /* 42513 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578794, 578077, 578077, 926237, 578077, 578077,
  /* 42526 */ 578077, 578077, 578824, 578077, 578077, 578077, 578831, 578077, 578077, 57907, 57907, 57907, 57907, 57907,
  /* 42540 */ 57907, 57907, 762419, 57907, 57907, 57907, 57907, 57907, 60230, 57907, 57907, 57907, 57907, 58652, 57907,
  /* 42555 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 58671, 57907, 57907, 57907, 57907, 57907, 59421,
  /* 42570 */ 57907, 59423, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59461, 0, 0, 0, 0, 623177, 578121,
  /* 42587 */ 578121, 57907, 57907, 57907, 58696, 58698, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 42602 */ 57907, 57907, 60055, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 58719, 57907, 574817, 578753,
  /* 42617 */ 953, 578915, 578121, 578121, 578121, 578919, 578121, 578121, 578121, 578121, 580440, 578121, 578077,
  /* 42630 */ 578077, 57907, 578121, 0, 0, 0, 0, 0, 212992, 578121, 578121, 578925, 578121, 578121, 578121, 578121,
  /* 42646 */ 578121, 578121, 578121, 578121, 578121, 578944, 578121, 578121, 578121, 578121, 578929, 578121, 578121,
  /* 42659 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580281, 578121, 580283, 578121,
  /* 42672 */ 578121, 578121, 578969, 578971, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 42685 */ 578121, 578121, 578121, 578121, 942665, 578121, 578121, 578121, 578121, 578121, 578992, 578121, 578121,
  /* 42698 */ 578121, 578121, 578077, 578077, 578077, 578077, 0, 578121, 578077, 57907, 578121, 578121, 578121, 579717,
  /* 42712 */ 578121, 578121, 578121, 578121, 578121, 578121, 578077, 578077, 578077, 578077, 579672, 579548, 0, 0, 0,
  /* 42727 */ 1491, 0, 0, 0, 1497, 0, 0, 0, 1503, 0, 0, 0, 0, 0, 0, 0, 143360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1158, 0, 0, 0,
  /* 42757 */ 0, 0, 0, 0, 0, 0, 1089536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 913408, 0,
  /* 42787 */ 0, 0, 0, 0, 0, 0, 241664, 245760, 0, 0, 0, 0, 0, 1574, 0, 0, 0, 0, 0, 0, 0, 1146880, 0, 0, 0, 0, 0, 0,
  /* 42815 */ 2223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 446464, 0, 0, 0, 0, 0, 0, 685644, 1613, 0, 0, 1615, 0, 0, 0,
  /* 42842 */ 1619, 0, 0, 1622, 0, 0, 0, 0, 0, 345, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 733, 0, 796, 0, 0, 0, 0, 0, 0, 0,
  /* 42872 */ 1619, 0, 0, 0, 0, 0, 0, 0, 1632, 0, 1612, 685644, 578753, 0, 578077, 578077, 578077, 578077, 578077,
  /* 42891 */ 578077, 578077, 578077, 578077, 685679, 578077, 578077, 578077, 578077, 578077, 580326, 578077, 578077,
  /* 42904 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579827, 578077, 578077, 578077, 578077,
  /* 42917 */ 578077, 579189, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579199, 578077,
  /* 42930 */ 578077, 578077, 815645, 578077, 578077, 578077, 578077, 578825, 578077, 578077, 578077, 578077, 578077,
  /* 42943 */ 578077, 57907, 57907, 57907, 57907, 57907, 57907, 58259, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 42958 */ 58682, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59437, 57907, 57907, 57907, 57907, 57907,
  /* 42973 */ 57907, 57907, 578077, 578077, 579234, 1090077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 42986 */ 578077, 578077, 578077, 578077, 578077, 579853, 578077, 578077, 578077, 57907, 59116, 1090099, 57907,
  /* 42999 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 1086003, 57907, 57907,
  /* 43014 */ 57907, 574817, 0, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 685831, 578121,
  /* 43028 */ 578121, 578121, 578121, 578121, 580597, 578121, 580599, 578077, 0, 0, 0, 0, 0, 0, 0, 0, 2448, 2449, 0, 0,
  /* 43048 */ 0, 0, 0, 0, 579341, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579351,
  /* 43063 */ 578121, 578121, 578121, 815689, 578121, 578121, 578121, 579918, 578121, 578121, 578121, 578121, 578121,
  /* 43076 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580373, 578121, 578121, 578121, 578077, 578121,
  /* 43089 */ 578121, 579386, 1090121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 43102 */ 578121, 578121, 1065545, 578121, 578121, 578121, 57907, 59224, 57907, 57907, 578121, 579420, 578121,
  /* 43115 */ 578121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 618956, 618956, 618956, 618956, 618956, 618956, 618956, 618956, 618956,
  /* 43134 */ 0, 618956, 618956, 0, 0, 0, 0, 0, 1923, 0, 0, 0, 0, 1077248, 823296, 0, 1929, 225280, 0, 0, 0, 0, 0, 1602,
  /* 43158 */ 1603, 0, 1605, 1606, 1607, 0, 0, 0, 0, 0, 0, 0, 1146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1946, 0, 0, 0, 188416, 0,
  /* 43186 */ 0, 0, 0, 1951, 733184, 0, 0, 0, 0, 0, 0, 0, 2485, 0, 0, 0, 0, 0, 0, 0, 0, 0, 565248, 0, 0, 0, 0, 0, 0,
  /* 43215 */ 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 389120, 1097728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43244 */ 1990, 0, 0, 0, 0, 0, 0, 829, 0, 0, 0, 0, 0, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 43264 */ 579542, 578077, 578077, 578077, 0, 0, 0, 1998, 0, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 43280 */ 578077, 578077, 578077, 578077, 578077, 578077, 57907, 57907, 57907, 57907, 57907, 57907, 578077, 578077,
  /* 43294 */ 578077, 579546, 578077, 578077, 733725, 578077, 578077, 578077, 579553, 578077, 578077, 578077, 578077,
  /* 43307 */ 578077, 578077, 580060, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 580067, 578077,
  /* 43320 */ 578077, 578077, 823837, 578077, 578077, 579563, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 43333 */ 578077, 578077, 877085, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 1098269, 578077,
  /* 43346 */ 578077, 578077, 578077, 579590, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 57907, 57907,
  /* 43359 */ 57907, 57907, 578121, 578121, 578121, 578121, 62477, 1481, 0, 0, 733747, 57907, 57907, 57907, 59420,
  /* 43374 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 823859, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 43389 */ 574817, 578753, 953, 578121, 578121, 578121, 578121, 578121, 578920, 578121, 59430, 57907, 57907, 57907,
  /* 43403 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59915, 57907, 59457,
  /* 43418 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 0, 0, 2122, 0, 578121, 578121, 578121, 578121, 578930,
  /* 43434 */ 578121, 578121, 578121, 578121, 578939, 578121, 578121, 578121, 578121, 578121, 578121, 579694, 578121,
  /* 43447 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 1040969, 578121, 578121, 578121, 578121,
  /* 43460 */ 578121, 578077, 578121, 578121, 579677, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 43473 */ 823881, 578121, 578121, 579687, 578121, 578121, 578121, 579932, 578121, 578121, 578121, 578121, 578121,
  /* 43486 */ 579936, 578121, 578121, 578121, 578121, 578121, 983625, 0, 0, 2210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43509 */ 454656, 0, 0, 0, 0, 974848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 811008, 0, 0, 0, 0, 0, 0, 832, 0, 0, 0, 0, 0, 0, 0,
  /* 43539 */ 0, 0, 0, 475136, 0, 0, 0, 0, 0, 0, 0, 0, 344064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 578077, 578077, 578077,
  /* 43566 */ 580038, 578077, 578077, 578077, 578077, 579818, 578077, 578077, 578077, 578077, 578077, 578077, 579824,
  /* 43579 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 580062, 578077, 578077, 578077, 578077,
  /* 43592 */ 578077, 578077, 578077, 1081885, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 43605 */ 57907, 59672, 57907, 57907, 57907, 57907, 0, 2122, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 43620 */ 578121, 578121, 578121, 579947, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 57907, 57907,
  /* 43633 */ 59678, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 1102387,
  /* 43648 */ 57907, 57907, 57907, 57907, 811571, 57907, 57907, 59694, 57907, 868915, 881203, 57907, 57907, 57907,
  /* 43662 */ 57907, 57907, 57907, 57907, 57907, 59707, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 766515,
  /* 43677 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 1004083, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 43692 */ 57907, 57907, 57907, 1081907, 57907, 57907, 57907, 57907, 2373, 0, 578121, 578121, 578121, 578121, 578121,
  /* 43707 */ 578121, 578121, 578121, 578121, 578121, 579394, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 43720 */ 811593, 578121, 578121, 579934, 578121, 868937, 881225, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 43733 */ 578121, 579376, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578534, 578121, 578121,
  /* 43746 */ 578121, 578121, 578121, 578491, 578121, 578121, 1004105, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 43759 */ 578121, 578121, 578121, 578121, 1081929, 578121, 578121, 578121, 578121, 578952, 578121, 578121, 578121,
  /* 43772 */ 578121, 939406, 578121, 578960, 578121, 578121, 578963, 578121, 778240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43792 */ 0, 0, 0, 0, 401408, 0, 208896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1163264, 0, 0, 0, 0, 704512, 0,
  /* 43820 */ 2483, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1988, 0, 0, 0, 0, 0, 0, 0, 352256, 0, 0, 0, 0, 0, 578077, 578077,
  /* 43847 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 692765, 705053, 578077, 717341, 578077,
  /* 43860 */ 578077, 578077, 578077, 746013, 578077, 578077, 778781, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 43873 */ 580338, 578077, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 43888 */ 59069, 57907, 578077, 578077, 578077, 580071, 578077, 578077, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 43902 */ 57907, 57907, 705075, 57907, 57907, 57907, 57907, 57907, 59433, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 43917 */ 57907, 57907, 57907, 57907, 59082, 57907, 57907, 57907, 57907, 57907, 717363, 57907, 57907, 57907, 57907,
  /* 43932 */ 746035, 57907, 57907, 778803, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59895, 57907, 57907, 59897,
  /* 43947 */ 57907, 57907, 57907, 57907, 57907, 57907, 59917, 57907, 57907, 0, 0, 578121, 578121, 578121, 578121,
  /* 43962 */ 578121, 578121, 578121, 578121, 705097, 578121, 578121, 578121, 579943, 578121, 578121, 578121, 578121,
  /* 43975 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 930377, 578121, 578121, 578121, 717385,
  /* 43988 */ 578121, 578121, 578121, 578121, 746057, 578121, 578121, 778825, 578121, 578121, 578121, 578121, 578121,
  /* 44001 */ 578121, 578121, 579390, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578537, 578121,
  /* 44014 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580147, 578121, 578121, 580149, 580150, 578077,
  /* 44027 */ 578121, 578077, 57907, 578077, 578077, 57907, 57907, 578121, 578121, 0, 578077, 57907, 578121, 0, 578077,
  /* 44042 */ 57907, 578121, 3152, 580689, 60498, 580691, 0, 0, 0, 0, 0, 0, 196608, 0, 2639, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44065 */ 297, 0, 0, 0, 297, 0, 298, 0, 0, 0, 2645, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 503808, 0, 0, 2656, 2657,
  /* 44094 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 561152, 0, 0, 0, 0, 0, 772729, 578077, 578077, 578077, 578077,
  /* 44119 */ 578077, 578077, 578077, 580221, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 579224, 578077,
  /* 44132 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578810, 578077, 578077, 578077, 578077, 578077,
  /* 44145 */ 578077, 578077, 578077, 578077, 578077, 580231, 578077, 578077, 578077, 578077, 57907, 57907, 57907,
  /* 44158 */ 60043, 57907, 57907, 57907, 57907, 2373, 0, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 44172 */ 578121, 578121, 580119, 578121, 580262, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 44185 */ 578121, 578121, 772783, 578121, 578121, 578121, 578121, 578953, 578121, 578956, 578121, 578121, 578121,
  /* 44198 */ 578121, 578121, 578121, 578121, 578121, 578121, 579719, 578121, 578077, 579721, 578077, 578077, 578121,
  /* 44211 */ 578077, 0, 0, 0, 0, 2763, 0, 0, 0, 0, 0, 2766, 0, 0, 0, 0, 0, 0, 0, 2773, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1115,
  /* 44241 */ 0, 0, 0, 0, 1120, 0, 0, 0, 0, 0, 2781, 0, 0, 0, 892928, 483328, 0, 0, 0, 578077, 578077, 578077, 737821,
  /* 44264 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 1053213, 57907, 578077, 578077, 578077, 580324,
  /* 44277 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 893469, 578077, 578077, 578077,
  /* 44290 */ 578077, 578077, 1004061, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 44303 */ 1135133, 578077, 578077, 1147421, 1151517, 578077, 57907, 578077, 578077, 580335, 578077, 580336, 578077,
  /* 44316 */ 578077, 578077, 57907, 57907, 57907, 57907, 57907, 57907, 60150, 57907, 57907, 57907, 57907, 57907, 59460,
  /* 44331 */ 57907, 57907, 57907, 0, 0, 0, 0, 578121, 578121, 578121, 578121, 578121, 860745, 578121, 578121, 578121,
  /* 44347 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 643657, 578121, 578121, 643613, 578077, 578077,
  /* 44360 */ 578077, 578121, 578077, 57907, 57907, 57907, 578121, 578121, 578121, 578121, 578121, 578121, 580360,
  /* 44373 */ 578121, 578121, 578121, 578121, 578121, 578121, 579718, 578121, 578121, 578121, 578077, 578077, 578077,
  /* 44386 */ 578077, 578121, 578077, 578121, 578121, 578121, 893513, 578121, 578121, 578121, 578121, 580371, 578121,
  /* 44399 */ 580372, 578121, 578121, 578121, 578121, 578077, 578077, 578077, 578077, 578121, 578077, 57907, 578121,
  /* 44412 */ 578077, 578077, 578077, 579414, 0, 0, 2771, 0, 0, 0, 0, 360448, 0, 0, 0, 0, 2858, 0, 0, 0, 0, 0, 0, 1020,
  /* 44436 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 578077, 578077, 709149, 578077, 578077, 578077, 756529, 578077, 578077,
  /* 44455 */ 578077, 578077, 578077, 578077, 578077, 578077, 580409, 57907, 60232, 57907, 57907, 578121, 578121,
  /* 44468 */ 709193, 578121, 578121, 578121, 756559, 578121, 578121, 578121, 578121, 578121, 578932, 578121, 578936,
  /* 44481 */ 578121, 578121, 578940, 578121, 578942, 578121, 578121, 578121, 578121, 578121, 578121, 580439, 578121,
  /* 44494 */ 578121, 578077, 578077, 57907, 578121, 0, 0, 0, 0, 0, 0, 0, 678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57907,
  /* 44518 */ 57907, 737843, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 1053235, 578121, 578121, 578121, 737865,
  /* 44532 */ 578121, 578121, 578121, 579955, 578121, 578121, 578121, 578121, 578077, 578077, 578077, 578121, 578077,
  /* 44545 */ 57907, 578121, 578077, 578077, 578077, 578411, 0, 0, 0, 578121, 578077, 57907, 578121, 578077, 578077,
  /* 44560 */ 578411, 578077, 578077, 578077, 578077, 580638, 580639, 57907, 57907, 57907, 57907, 57907, 60452, 60453,
  /* 44574 */ 578121, 578121, 578121, 578121, 578121, 580627, 578121, 578077, 0, 0, 0, 0, 0, 0, 578077, 578077, 578077,
  /* 44591 */ 579538, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578805, 578077, 578077, 578077, 578077,
  /* 44604 */ 578077, 578077, 578077, 578077, 578763, 578077, 578077, 578077, 578077, 578077, 578077, 578777, 578121,
  /* 44617 */ 580650, 580651, 578077, 0, 3117, 0, 0, 0, 578077, 578077, 578077, 578077, 578077, 578077, 57907, 57907,
  /* 44633 */ 57907, 57907, 578121, 578121, 578121, 578121, 62477, 1482, 0, 0, 356, 357, 0, 0, 0, 0, 0, 0, 0, 363, 0,
  /* 44654 */ 61731, 0, 0, 0, 0, 0, 0, 0, 204800, 0, 0, 0, 0, 0, 0, 0, 0, 305, 305, 305, 0, 0, 0, 0, 0, 0, 0, 0, 390, 0,
  /* 44684 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397312, 0, 0, 0, 474, 474, 488, 0, 0, 488, 357, 357, 357, 510, 357, 357,
  /* 44711 */ 357, 357, 474, 474, 57924, 57924, 57924, 578139, 578095, 578095, 578095, 578095, 578139, 578139, 578139,
  /* 44726 */ 578139, 578095, 57924, 578139, 578095, 578139, 578139, 578139, 578139, 578139, 578139, 578139, 578139,
  /* 44739 */ 578095, 57924, 578095, 578139, 578139, 1, 12290, 3, 578077, 578077, 578077, 578392, 578077, 578077,
  /* 44753 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578419, 578077, 578077, 578077, 578077, 578077,
  /* 44766 */ 1118749, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 57907, 57907, 660019,
  /* 44779 */ 57907, 57907, 57907, 57907, 60151, 57907, 57907, 58286, 57907, 57907, 57907, 57907, 0, 578121, 578121,
  /* 44794 */ 578121, 578121, 578121, 578121, 578121, 578513, 57907, 57907, 58649, 57907, 57907, 57907, 58658, 57907,
  /* 44808 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 819763, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 44823 */ 578922, 578121, 578121, 578121, 578931, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 44836 */ 578121, 578121, 578121, 579695, 971337, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578978,
  /* 44849 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578988, 1486, 0, 0, 0, 1492, 0, 0, 0, 1498, 0, 0,
  /* 44868 */ 0, 1504, 0, 0, 0, 0, 0, 0, 1069, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 363, 1102, 0, 0, 0, 0, 0, 0, 0, 1600, 0,
  /* 44898 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 417792, 0, 0, 0, 578077, 578077, 578077, 578077, 579208, 578077, 578077,
  /* 44920 */ 578077, 578077, 578077, 578077, 578077, 578077, 579215, 578077, 578077, 578077, 578077, 578393, 578077,
  /* 44933 */ 578077, 578077, 578077, 988006, 578408, 578077, 578077, 578418, 578077, 578077, 578077, 578077, 578077,
  /* 44946 */ 901661, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 580471, 57907,
  /* 44959 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59090, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 44974 */ 57907, 57907, 59097, 57907, 57907, 57907, 57907, 57907, 57907, 59409, 57907, 57907, 57907, 696883, 57907,
  /* 44989 */ 57907, 57907, 57907, 57907, 0, 0, 0, 0, 0, 0, 578121, 578121, 578121, 578121, 578121, 578077, 0, 0, 0, 0,
  /* 45009 */ 3022, 0, 3024, 0, 0, 0, 0, 0, 0, 0, 1999, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 45028 */ 578077, 578077, 578077, 580470, 578077, 60280, 57907, 57907, 57907, 60284, 57907, 57907, 57907, 57907,
  /* 45042 */ 59419, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 580588, 578121,
  /* 45057 */ 578121, 578121, 578121, 578121, 579676, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 45070 */ 578121, 578121, 578121, 578121, 578121, 578121, 909897, 909853, 0, 0, 2275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 45091 */ 0, 0, 578077, 578077, 580037, 578077, 578077, 578077, 578077, 580042, 578077, 578077, 578077, 579821,
  /* 45105 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 889373,
  /* 45118 */ 578077, 578077, 578077, 0, 2465, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 565248, 0, 0, 0, 0, 2481, 0, 0,
  /* 45145 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 578077, 578077, 578077, 578077, 578077, 580044, 578077, 580045, 578077,
  /* 45165 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 930333, 578077,
  /* 45178 */ 578077, 578077, 57907, 59891, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 45193 */ 57907, 57907, 57907, 750131, 57907, 59688, 57907, 57907, 578121, 580121, 578121, 578121, 578121, 578121,
  /* 45207 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580125, 578121, 578121,
  /* 45220 */ 580127, 578121, 578121, 578121, 578121, 578121, 0, 0, 3070, 578077, 578077, 578077, 578077, 578077,
  /* 45234 */ 578077, 578077, 578077, 578077, 578077, 580613, 578077, 57907, 57907, 57907, 57907, 57907, 0, 578121,
  /* 45248 */ 578121, 578121, 578121, 578121, 53537, 0, 0, 0, 0, 0, 0, 0, 573440, 953, 0, 0, 0, 0, 0, 0, 0, 0, 341, 0,
  /* 45272 */ 0, 0, 0, 0, 0, 0, 0, 401, 0, 0, 0, 0, 0, 0, 0, 0, 458, 557531, 557531, 557531, 557531, 557531, 557531,
  /* 45295 */ 557531, 557531, 557531, 557531, 557531, 557531, 557531, 557531, 557531, 557531, 57907, 57907, 57907,
  /* 45308 */ 57907, 57907, 578121, 578121, 578121, 578121, 578121, 578121, 0, 0, 0, 3133, 578077, 578077, 578077,
  /* 45323 */ 578077, 579194, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 45336 */ 578769, 578077, 578077, 578077, 578077, 578077, 578077, 580671, 57907, 57907, 57907, 60481, 578121,
  /* 45349 */ 578121, 578121, 580675, 0, 0, 578077, 578077, 57907, 57907, 709171, 57907, 57907, 57907, 756544, 57907,
  /* 45364 */ 57907, 57907, 57907, 57907, 57907, 57907, 60293, 57907, 580487, 578121, 578121, 578121, 580491, 578121,
  /* 45378 */ 578121, 0, 0, 358, 0, 0, 0, 0, 0, 0, 363, 0, 61731, 0, 0, 0, 0, 0, 0, 0, 356352, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 45407 */ 0, 1618, 0, 0, 0, 0, 0, 0, 0, 0, 358, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 430080, 0, 0, 0, 358, 0, 368,
  /* 45438 */ 0, 0, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 917504, 0, 0, 57925, 57925, 57925, 578140, 578096,
  /* 45462 */ 578096, 578096, 578096, 578140, 578140, 578140, 578140, 578096, 57925, 578140, 578096, 578140, 578140,
  /* 45475 */ 578140, 578140, 578140, 578140, 578140, 578140, 578096, 57925, 578096, 578140, 578140, 1, 12290, 3,
  /* 45489 */ 578077, 578077, 578387, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 45502 */ 578077, 578077, 578077, 766493, 578077, 578077, 57907, 57907, 57907, 58697, 57907, 57907, 57907, 57907,
  /* 45516 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 930355, 57907, 57907, 57907, 57907, 578121,
  /* 45530 */ 578970, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 45543 */ 578121, 578121, 580501, 578077, 0, 0, 0, 2969, 0, 0, 2771, 1571, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 45569 */ 0, 578077, 0, 0, 0, 0, 0, 860160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2202, 2203, 0, 0, 0, 0, 57907, 57907,
  /* 45595 */ 57907, 57907, 860723, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 942643,
  /* 45610 */ 57907, 57907, 57907, 57907, 2849, 0, 2771, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 602112, 602112, 0, 0, 0,
  /* 45635 */ 0, 0, 359, 360, 361, 362, 0, 0, 363, 0, 61731, 0, 0, 0, 0, 0, 0, 0, 422502, 422502, 422502, 422502,
  /* 45657 */ 422349, 422349, 422349, 422502, 422349, 0, 360, 0, 359, 0, 0, 0, 45056, 49152, 0, 0, 0, 0, 426, 40960, 0,
  /* 45678 */ 0, 0, 0, 0, 1627, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 363, 114688, 0, 0, 0, 426, 426, 0, 426, 0, 360, 426,
  /* 45706 */ 0, 457, 0, 0, 0, 0, 0, 0, 0, 0, 86016, 86016, 86016, 0, 0, 2105630, 12290, 3, 0, 0, 0, 498, 498, 0, 505,
  /* 45731 */ 505, 505, 505, 511, 512, 505, 505, 525, 525, 525, 525, 457, 457, 457, 457, 457, 457, 457, 457, 525, 525,
  /* 45752 */ 525, 525, 525, 525, 525, 578097, 578097, 578097, 57926, 578141, 578097, 57926, 578097, 578097, 57926,
  /* 45767 */ 57926, 57926, 578141, 578097, 578097, 578097, 578097, 578141, 578141, 578141, 578141, 578097, 57926,
  /* 45780 */ 578141, 578097, 578141, 578141, 578141, 578141, 578141, 578141, 578141, 578141, 578161, 57974, 578161,
  /* 45793 */ 578141, 578172, 1, 12290, 3, 57907, 58283, 57907, 57907, 57907, 57907, 57907, 0, 578121, 578121, 578121,
  /* 45809 */ 578121, 578121, 578121, 578121, 578121, 692809, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 45822 */ 578121, 578077, 578077, 578077, 578121, 578077, 57907, 578121, 579963, 0, 0, 1167, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 45842 */ 0, 0, 0, 0, 0, 643072, 0, 0, 0, 0, 0, 0, 1949, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 782336, 0, 0, 0, 59403,
  /* 45872 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 45887 */ 979507, 0, 544768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1044480, 0, 0, 0, 578077, 578077, 578077,
  /* 45911 */ 579857, 578077, 578077, 578077, 578077, 578077, 578077, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 45925 */ 57907, 58261, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 59693, 57907, 57907, 57907, 57907,
  /* 45940 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 953086, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 45955 */ 57927, 57927, 57927, 578142, 578098, 578098, 578098, 578098, 578142, 578142, 578142, 578142, 578098,
  /* 45968 */ 57927, 578142, 578098, 578142, 578142, 578142, 578142, 578142, 578142, 578142, 578142, 578098, 57927,
  /* 45981 */ 578098, 578142, 578142, 1, 12290, 3, 0, 703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 409600, 0, 0, 0, 0,
  /* 46008 */ 578077, 578077, 578388, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 46021 */ 578077, 578077, 578077, 918045, 578077, 578077, 578820, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 46034 */ 578077, 578077, 578077, 578077, 57907, 57907, 57907, 57907, 57907, 60044, 57907, 57907, 0, 1488, 0, 0, 0,
  /* 46051 */ 1494, 0, 0, 0, 1500, 0, 0, 0, 0, 0, 0, 0, 695, 696, 0, 363, 363, 363, 0, 0, 0, 0, 1995, 0, 0, 0, 578077,
  /* 46078 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 580213, 578077, 578077,
  /* 46091 */ 57907, 57907, 57907, 877107, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 46106 */ 57907, 1077811, 57907, 57907, 1098291, 57907, 57907, 57907, 578121, 877129, 578121, 578121, 578121,
  /* 46119 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 1077833, 578121,
  /* 46132 */ 578121, 1098313, 578121, 578121, 578121, 578121, 579714, 57907, 57907, 57907, 57907, 57907, 59681, 57907,
  /* 46146 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 889395, 57907, 57907, 57907, 57907, 57907,
  /* 46161 */ 57907, 57907, 57907, 0, 0, 0, 0, 0, 471040, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2227, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46190 */ 471040, 0, 0, 0, 0, 0, 0, 741, 578077, 578077, 578077, 578077, 578077, 580337, 578077, 578077, 57907,
  /* 46207 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 46222 */ 58672, 57907, 57907, 58287, 57907, 57907, 57907, 57907, 0, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 46237 */ 578121, 578121, 579921, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580124,
  /* 46250 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 579683, 578121, 578121, 578121,
  /* 46263 */ 579686, 578121, 852553, 0, 151552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 578753, 832, 578077, 1102365,
  /* 46284 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 57907, 57907, 57907, 57907, 57907,
  /* 46298 */ 58255, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 676403, 57907, 57907, 57907, 57907, 57907,
  /* 46313 */ 57907, 57907, 57907, 795187, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 578077, 726646, 578077,
  /* 46327 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 46340 */ 1046798, 578077, 578077, 979485, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 46353 */ 578077, 578077, 578077, 578077, 578077, 578077, 580227, 726720, 57907, 57907, 57907, 57907, 57907, 57907,
  /* 46367 */ 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 1118771, 578121, 726798, 578121, 578121,
  /* 46381 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580138,
  /* 46394 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580600, 0, 0, 737280, 1052672, 0,
  /* 46409 */ 0, 0, 979529, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 46423 */ 578121, 578121, 578121, 578121, 1155657, 807453, 578077, 578077, 578077, 578077, 578077, 578077, 578077,
  /* 46436 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 1077789, 942621, 578077, 578077, 578077,
  /* 46449 */ 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 578077, 1155613,
  /* 46462 */ 57907, 57907, 57907, 57907, 1159731, 0, 0, 0, 0, 0, 0, 578121, 578121, 578121, 578121, 578121, 578933,
  /* 46479 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 1102409, 578121, 578121,
  /* 46492 */ 578121, 578121, 578121, 495616, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 835584, 0, 2625, 0, 0, 0, 0,
  /* 46518 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 417792, 417792, 417792, 0, 417792, 578121, 578121, 578121, 580263, 578121,
  /* 46538 */ 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 580500, 578121,
  /* 46551 */ 578077, 0, 0, 0, 0, 0, 0, 2771, 0, 0, 0, 0, 888832, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 442368, 442368,
  /* 46577 */ 442368, 0, 442368, 578121, 578121, 889417, 578121, 578121, 578121, 578121, 578121, 578121, 578121, 578121,
  /* 46591 */ 578121, 578121, 578121, 578121, 578077, 0, 0, 0, 0, 0, 0, 2771, 0, 0, 0, 0, 436, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46616 */ 0, 0, 0, 446926, 446926, 446926, 0, 446926, 0, 1163264, 1163264, 0, 0, 0, 0, 1163879, 1163879, 1163879,
  /* 46634 */ 1163879, 0, 1163264, 1163264, 1163879, 1163264, 0, 1163264, 0, 0, 0, 1163264, 1163678, 1163678, 0, 0, 0,
  /* 46651 */ 0, 0, 1163678, 0, 0, 0, 0, 0, 1891, 0, 0, 0, 0, 0, 1893, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 0, 0, 0, 348,
  /* 46679 */ 346, 40960, 0, 1163879, 1163879, 1163879, 1163879, 1163879, 1163879, 1163879, 1163879, 1163264, 1163264,
  /* 46692 */ 1163264, 1163879, 1163879, 1, 12290, 3, 557531, 557531, 557531, 458, 458, 557531, 458, 458, 458, 458, 458,
  /* 46709 */ 458, 458, 458, 557582, 557582, 557582, 557582, 557582, 557582, 557582, 557582, 557582, 557582, 557582,
  /* 46723 */ 557582, 557582, 557582, 557582, 557582, 0, 0, 0, 0, 0, 0, 0, 0, 0, 711, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 458,
  /* 46749 */ 0, 0, 0, 557582, 557582, 557582, 557531, 557582, 1, 12290, 3, 569344, 0, 0, 569344, 0, 569344, 569344, 0,
  /* 46768 */ 569344, 0, 569344, 569344, 569344, 569344, 569344, 569344, 569344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 788, 806, 0,
  /* 46789 */ 806, 801, 0, 0, 569344, 569344, 0, 569344, 569344, 0, 569344, 569344, 569344, 569344, 569344, 569344,
  /* 46805 */ 569344, 569344, 569344, 569344, 569344, 569344, 569344, 569344, 569344, 569344, 0, 0, 0, 0, 0, 569344,
  /* 46821 */ 569344, 0, 569344, 569344, 569344, 569344, 569344, 1, 12290, 3, 372736, 0, 372736, 372736, 0, 372736,
  /* 46837 */ 372736, 372736, 372736, 372736, 372736, 372736, 372736, 372736, 372736, 372736, 372736, 372736, 372736,
  /* 46850 */ 372736, 372736, 372736, 372736, 372736, 372736, 372736, 372736, 372736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 814, 0,
  /* 46870 */ 0, 0, 0, 0, 0, 372736, 0, 0, 0, 0, 0, 372736, 0, 372736, 372736, 372736, 372736, 372736, 0, 0, 0, 0, 0, 0,
  /* 46894 */ 1112, 0, 0, 0, 0, 0, 0, 0, 0, 1121
];

XQueryParser_t.EXPECTED =
[
  /*    0 */ 888, 894, 895, 892, 906, 899, 903, 910, 914, 918, 956, 953, 926, 2415, 956, 956, 956, 1004, 925, 2251, 930,
  /*   21 */ 931, 956, 935, 956, 956, 956, 981, 1082, 942, 956, 1257, 950, 956, 956, 2385, 961, 956, 956, 956, 1165,
  /*   41 */ 1082, 1082, 956, 956, 1266, 967, 956, 956, 974, 956, 956, 956, 1882, 1082, 1083, 956, 956, 1235, 980, 956,
  /*   61 */ 985, 956, 956, 1005, 1082, 990, 956, 2412, 956, 1841, 956, 2423, 1082, 995, 938, 956, 937, 956, 1081, 943,
  /*   81 */ 938, 1839, 956, 1081, 1018, 1001, 1004, 1009, 1003, 1013, 1881, 944, 2424, 1880, 1017, 1023, 1030, 1034,
  /*   99 */ 1074, 1163, 956, 1042, 2565, 1046, 1052, 2029, 1056, 1293, 955, 1353, 1066, 1070, 2050, 1078, 956, 956,
  /*  117 */ 956, 996, 1087, 1115, 1105, 1160, 2084, 1109, 956, 956, 956, 956, 956, 956, 1668, 1114, 2519, 1026, 1446,
  /*  136 */ 1119, 956, 956, 956, 956, 956, 956, 956, 956, 997, 1125, 1129, 1139, 1277, 956, 956, 956, 956, 956, 956,
  /*  156 */ 956, 1887, 1145, 1372, 2292, 956, 956, 956, 956, 956, 956, 1666, 1148, 1152, 956, 956, 956, 956, 2220,
  /*  175 */ 1716, 1446, 956, 956, 956, 2066, 1157, 956, 956, 1865, 1169, 956, 1250, 956, 2139, 956, 2451, 956, 1175,
  /*  194 */ 1180, 2546, 2199, 2365, 956, 1186, 1190, 1194, 1198, 1202, 1206, 1210, 1214, 2453, 1219, 1225, 1229, 2207,
  /*  212 */ 2771, 1233, 956, 956, 956, 956, 1286, 1346, 1256, 1239, 1244, 956, 956, 956, 956, 956, 956, 956, 956, 1248,
  /*  232 */ 1254, 1096, 2733, 956, 956, 956, 956, 956, 956, 956, 956, 956, 1575, 1261, 2350, 1240, 1265, 956, 956, 956,
  /*  252 */ 956, 956, 956, 956, 1019, 1270, 1274, 1858, 956, 956, 956, 956, 956, 956, 1678, 1283, 1872, 956, 956, 956,
  /*  272 */ 956, 2235, 1290, 1297, 956, 956, 956, 1570, 1302, 956, 956, 1505, 1309, 956, 1099, 956, 2666, 956, 1314,
  /*  291 */ 1141, 956, 1319, 1279, 956, 1323, 1787, 1327, 1331, 1900, 1336, 1340, 1344, 1350, 2166, 2485, 956, 2516,
  /*  309 */ 1361, 1366, 1379, 1383, 956, 2324, 1394, 1551, 2487, 2505, 2188, 1595, 1401, 956, 956, 956, 956, 956, 2430,
  /*  328 */ 1463, 2169, 956, 2472, 1362, 1408, 956, 956, 956, 956, 956, 956, 956, 1741, 956, 2462, 1305, 1860, 1369,
  /*  347 */ 956, 956, 956, 956, 956, 956, 956, 1418, 1589, 2159, 1428, 1432, 956, 956, 956, 956, 956, 1437, 1443, 1451,
  /*  367 */ 956, 956, 956, 956, 1632, 1455, 1460, 956, 956, 956, 1632, 2727, 1468, 956, 1456, 2788, 956, 1411, 956,
  /*  386 */ 956, 956, 956, 956, 956, 956, 956, 956, 2755, 1473, 1469, 1480, 1564, 1484, 1488, 1492, 1496, 1500, 956,
  /*  405 */ 1093, 1298, 1504, 1955, 1509, 1513, 1517, 1809, 2629, 1521, 991, 1528, 1533, 1475, 1539, 1543, 1389, 1549,
  /*  423 */ 956, 1555, 2643, 1561, 1568, 1848, 1464, 1315, 1574, 2124, 1389, 1390, 1651, 956, 2640, 2643, 2644, 1579,
  /*  441 */ 1587, 2233, 1593, 1476, 1386, 1389, 2127, 956, 956, 1599, 2643, 1601, 1605, 1612, 2479, 1618, 1389, 1648,
  /*  459 */ 956, 1893, 2643, 1557, 1622, 2471, 2464, 1389, 1636, 1924, 2643, 1641, 1135, 1645, 1663, 1735, 2643, 1656,
  /*  477 */ 1768, 1545, 2626, 1675, 1683, 2008, 1660, 1672, 1682, 1687, 1691, 1697, 1695, 1701, 1705, 1709, 986, 1713,
  /*  495 */ 956, 1720, 2242, 2304, 2307, 1727, 1730, 2096, 1734, 2133, 1739, 1745, 1749, 1755, 1759, 1763, 1628, 1772,
  /*  513 */ 1784, 2297, 2719, 1775, 1793, 1797, 1801, 945, 1807, 962, 1813, 2102, 957, 1819, 956, 1825, 1535, 1829,
  /*  531 */ 1833, 956, 963, 1837, 956, 1833, 956, 1424, 986, 1846, 2256, 2606, 1852, 1356, 956, 2417, 1864, 956, 1357,
  /*  550 */ 956, 1766, 1869, 2761, 2608, 2280, 1879, 1062, 956, 1911, 956, 1608, 2760, 2379, 2745, 2153, 2754, 2752,
  /*  568 */ 986, 1886, 1780, 1891, 1897, 2395, 1842, 1904, 1908, 1915, 1922, 1928, 1932, 1936, 1940, 1944, 1948, 1952,
  /*  586 */ 1959, 1963, 1967, 1971, 1975, 1047, 956, 1979, 2108, 1986, 1990, 1994, 1998, 2002, 2006, 976, 956, 2012,
  /*  604 */ 2016, 2020, 2033, 2037, 2041, 2048, 2054, 956, 2064, 2248, 1918, 2070, 2075, 2082, 2088, 2400, 2094, 2405,
  /*  622 */ 2100, 2106, 956, 2112, 2117, 2121, 1221, 2131, 2713, 956, 2113, 2137, 956, 2713, 956, 2143, 956, 2214,
  /*  640 */ 2148, 2071, 2152, 2330, 956, 2144, 2157, 956, 2331, 2776, 956, 2163, 2173, 2179, 946, 2059, 2674, 956,
  /*  658 */ 2700, 2494, 2706, 1134, 2185, 2023, 1433, 2028, 2026, 2192, 2196, 2205, 2027, 2057, 1625, 2211, 1375, 2218,
  /*  676 */ 2224, 2230, 1332, 1778, 1304, 2239, 2255, 2260, 1101, 2266, 2264, 2270, 2274, 2278, 956, 956, 2284, 2296,
  /*  694 */ 2301, 2782, 2311, 2315, 2319, 2323, 1803, 2364, 2328, 2078, 2335, 2339, 2343, 2347, 2354, 2358, 956, 2362,
  /*  712 */ 1421, 1751, 2369, 2373, 956, 2377, 1447, 2383, 1153, 2389, 2393, 1529, 2399, 2404, 2444, 2409, 956, 1397,
  /*  730 */ 2101, 956, 2421, 956, 1397, 2044, 2428, 2090, 2434, 956, 2438, 956, 1981, 2101, 1637, 2442, 956, 1982,
  /*  748 */ 2245, 921, 2448, 2798, 956, 2175, 2443, 2226, 956, 1404, 2460, 2287, 2060, 920, 2457, 2489, 1814, 2468,
  /*  766 */ 2476, 1815, 2488, 2493, 2498, 1855, 1132, 2503, 2509, 2499, 1439, 2513, 2523, 2527, 1723, 2531, 2535, 2539,
  /*  784 */ 2543, 2550, 2554, 2558, 2562, 956, 956, 2569, 2573, 2577, 2581, 2585, 2589, 2593, 956, 1821, 2600, 2604,
  /*  802 */ 2694, 2612, 2616, 2623, 2633, 1414, 2637, 956, 2648, 2655, 2290, 2659, 2181, 956, 2663, 2683, 2672, 2738,
  /*  820 */ 2678, 2682, 1652, 2687, 2691, 1121, 2698, 956, 1614, 2704, 956, 2710, 956, 1614, 2717, 956, 1048, 2651,
  /*  838 */ 2723, 2731, 956, 1874, 2737, 1310, 2742, 956, 1875, 956, 1171, 2749, 2725, 956, 2668, 2759, 1524, 956,
  /*  856 */ 1789, 956, 2765, 1072, 956, 2769, 2481, 956, 2483, 970, 1630, 1176, 1110, 2775, 2780, 2786, 1215, 1182,
  /*  874 */ 2201, 1583, 2619, 2596, 1582, 1059, 1038, 1090, 2792, 1037, 2796, 956, 956, 2802, 4418, 4823, 2807, 2810,
  /*  892 */ 2831, 2816, 2824, 2824, 2824, 2824, 2804, 2818, 2837, 2825, 2841, 2842, 2851, 2846, 2824, 2822, 2829, 2812,
  /*  910 */ 2849, 2853, 2857, 2861, 2865, 2868, 2833, 2872, 3083, 2880, 4883, 3089, 3089, 3089, 4974, 2947, 3089, 3089,
  /*  928 */ 3089, 2896, 3613, 3089, 3089, 3089, 2917, 3321, 2929, 2969, 3089, 3089, 3089, 2984, 2946, 2946, 3175, 3089,
  /*  946 */ 3089, 3089, 2922, 4691, 3173, 3609, 3612, 3089, 2887, 3088, 3089, 3089, 3089, 3089, 2892, 3789, 3089, 3089,
  /*  964 */ 3089, 2923, 4246, 3176, 2960, 2962, 3089, 2890, 3297, 5001, 4959, 2968, 3089, 3089, 2935, 4487, 2963, 3089,
  /*  982 */ 3089, 3089, 2940, 2971, 3089, 3089, 3089, 2955, 2948, 3089, 3089, 3089, 2956, 3176, 3089, 3089, 3089, 2972,
  /* 1000 */ 3412, 2977, 3089, 2970, 3089, 3089, 3174, 2946, 2946, 3176, 3089, 3089, 2950, 2946, 2950, 3089, 3787, 2946,
  /* 1018 */ 2949, 3089, 3089, 3089, 3035, 4275, 3176, 3089, 4063, 3089, 4550, 3016, 2948, 3089, 4276, 4063, 4262, 2982,
  /* 1036 */ 4066, 2952, 3089, 2951, 3089, 3091, 3089, 4517, 2995, 3783, 3022, 4129, 3089, 3089, 3089, 3043, 3026, 3030,
  /* 1054 */ 3034, 3040, 3049, 3052, 3089, 2954, 3090, 2951, 3089, 2923, 4296, 4305, 3867, 3170, 3089, 4144, 3077, 4129,
  /* 1072 */ 3089, 3089, 2954, 3089, 3089, 3411, 3397, 4052, 4301, 3089, 2946, 2946, 2946, 2946, 2950, 3412, 3089, 3087,
  /* 1090 */ 3089, 2952, 5335, 3089, 2956, 3851, 3089, 2964, 4564, 3089, 2966, 3867, 3089, 3089, 3331, 2996, 3784, 3089,
  /* 1108 */ 4066, 3703, 3089, 3089, 3089, 3090, 3221, 3089, 3089, 3089, 3096, 5168, 4549, 3089, 3089, 2954, 5247, 3100,
  /* 1126 */ 3089, 3089, 3367, 3073, 3089, 4274, 3089, 3007, 3089, 3089, 4644, 3089, 3089, 3107, 4644, 3089, 3089, 2965,
  /* 1144 */ 3089, 4668, 3089, 3089, 3111, 4883, 3786, 2899, 4645, 3089, 3089, 3089, 3131, 3141, 3158, 4129, 3089, 3014,
  /* 1162 */ 4644, 3089, 2988, 3089, 3089, 2945, 2946, 3165, 3344, 3089, 3089, 3089, 5296, 3168, 3089, 3089, 3089, 3145,
  /* 1180 */ 3089, 4890, 3089, 3089, 3089, 5341, 2922, 3761, 3185, 4833, 3189, 3196, 3089, 3615, 4934, 3211, 2883, 2991,
  /* 1198 */ 3218, 3225, 3229, 3236, 3240, 3244, 3246, 3250, 3254, 3257, 3274, 3259, 4078, 3263, 3267, 3271, 3278, 3089,
  /* 1216 */ 3089, 3089, 3160, 4067, 3290, 3881, 3089, 3232, 4626, 3415, 4937, 4063, 4062, 4407, 3089, 3089, 3296, 3301,
  /* 1234 */ 2930, 3089, 3089, 3172, 3177, 4562, 4566, 3089, 3089, 4884, 3089, 4884, 3335, 2930, 3128, 4830, 3089, 3089,
  /* 1252 */ 3181, 3089, 3416, 4938, 4173, 3089, 3089, 3089, 3169, 4511, 3089, 3089, 4898, 3114, 3089, 3089, 3089, 3171,
  /* 1270 */ 5022, 3089, 4897, 2921, 3782, 4524, 3390, 3089, 3018, 3089, 3089, 2966, 3089, 3362, 3089, 4685, 3089, 3035,
  /* 1288 */ 4067, 4832, 4059, 2964, 3372, 3089, 3056, 3129, 4544, 3784, 3089, 3089, 3089, 3206, 3389, 3089, 3867, 3089,
  /* 1306 */ 3089, 3089, 4646, 3865, 3089, 3089, 3089, 3213, 2933, 3089, 3089, 3089, 3318, 2967, 3089, 3089, 2932, 3394,
  /* 1324 */ 2919, 4439, 5001, 3401, 3089, 2919, 3615, 3408, 3089, 3089, 3089, 3330, 3435, 3439, 3443, 3447, 3450, 3452,
  /* 1342 */ 3456, 3460, 3463, 3467, 3089, 3089, 3309, 3327, 3471, 3474, 3478, 3089, 3071, 4881, 3089, 2925, 4281, 4292,
  /* 1360 */ 3089, 3490, 3202, 3089, 3089, 3427, 3712, 3429, 3089, 4538, 3561, 4503, 4883, 3866, 3481, 4126, 3089, 4848,
  /* 1378 */ 3343, 3497, 3507, 3512, 3427, 3516, 3520, 4906, 3089, 3080, 3855, 3890, 3890, 3890, 3890, 3950, 3530, 3534,
  /* 1396 */ 3538, 3089, 3089, 4942, 4946, 4489, 4377, 4883, 3089, 3089, 4987, 4947, 3561, 3507, 3515, 3089, 3089, 5076,
  /* 1414 */ 3089, 3089, 5185, 4191, 4537, 3572, 3574, 3089, 3089, 5200, 3089, 3089, 5262, 4254, 3579, 3089, 3427, 3595,
  /* 1432 */ 2996, 3089, 3089, 3089, 3541, 3192, 3602, 3089, 3089, 3319, 4550, 3378, 3089, 3089, 4646, 3089, 3089, 3089,
  /* 1450 */ 3130, 4699, 3205, 3426, 3586, 4621, 3089, 3089, 3089, 3601, 3202, 3089, 3592, 3575, 3089, 3089, 3089, 3404,
  /* 1468 */ 2902, 3089, 3089, 3089, 3617, 5002, 4844, 3089, 3089, 3320, 3377, 3089, 3606, 3621, 4904, 3625, 3640, 3636,
  /* 1486 */ 3719, 4539, 3644, 3648, 3652, 3656, 3660, 3664, 3668, 3672, 3675, 3679, 3683, 3687, 3691, 3695, 4063, 3700,
  /* 1504 */ 3716, 3089, 3089, 3089, 3706, 5177, 3089, 4084, 3788, 2969, 3726, 2935, 3739, 3747, 3754, 3890, 3891, 3770,
  /* 1522 */ 5021, 3777, 3089, 3089, 5310, 5318, 3817, 3089, 3089, 3089, 3750, 3089, 4432, 3089, 3089, 3340, 4226, 4505,
  /* 1540 */ 3089, 2969, 4504, 3869, 3735, 3890, 3890, 3858, 3089, 3949, 3793, 3089, 3089, 3343, 3089, 3799, 3875, 3876,
  /* 1558 */ 3876, 3823, 3895, 3803, 3834, 3840, 3089, 3089, 5330, 3633, 3810, 3778, 3089, 3089, 3368, 3383, 3375, 3089,
  /* 1576 */ 3089, 3089, 3760, 3832, 3838, 3772, 3089, 3089, 5335, 3089, 3089, 3811, 3844, 3089, 3089, 3379, 3089, 3089,
  /* 1594 */ 4643, 3089, 3089, 3428, 3551, 5219, 3873, 3876, 3876, 3828, 3833, 3839, 3773, 3845, 3089, 3089, 5343, 4072,
  /* 1612 */ 3089, 4749, 3089, 3089, 3486, 5266, 3880, 3089, 3566, 3887, 3998, 3089, 4208, 3089, 3090, 3543, 3089, 3118,
  /* 1630 */ 3089, 3091, 3089, 3089, 3722, 4883, 3910, 3089, 3089, 3089, 3926, 3914, 3924, 3089, 4270, 3931, 4185, 3948,
  /* 1648 */ 3890, 3890, 3908, 3378, 3089, 3089, 3089, 3781, 3914, 3924, 2955, 2934, 3961, 3089, 5336, 3890, 3890, 3909,
  /* 1666 */ 3089, 3126, 3089, 3089, 2973, 3413, 3756, 3089, 4156, 3876, 3940, 3997, 3089, 3128, 3089, 4897, 3957, 3089,
  /* 1684 */ 4119, 3890, 3756, 3972, 3089, 3980, 3876, 3986, 5337, 3890, 3758, 3890, 3972, 4155, 3876, 3957, 5336, 3985,
  /* 1702 */ 4120, 3973, 3981, 5337, 3972, 3991, 3567, 5220, 3995, 3943, 3943, 4003, 4007, 4206, 3089, 3135, 3089, 3483,
  /* 1720 */ 3089, 4706, 4013, 3089, 3153, 4550, 5032, 4042, 4044, 4046, 4479, 4479, 4479, 4050, 4076, 3089, 3089, 3089,
  /* 1738 */ 3937, 3089, 5175, 3089, 3089, 3571, 3588, 4088, 3629, 3090, 4323, 4095, 5243, 3089, 3089, 3615, 3089, 4102,
  /* 1756 */ 4108, 4116, 4124, 4135, 4308, 4149, 3116, 3120, 3089, 4160, 3089, 3207, 3089, 3089, 3880, 3947, 4167, 4171,
  /* 1774 */ 4177, 3089, 3315, 3628, 3089, 3329, 3089, 3090, 3341, 3129, 4207, 4004, 4008, 3089, 3342, 3089, 3089, 3282,
  /* 1792 */ 3147, 3338, 4754, 4181, 3863, 5242, 4189, 4195, 4582, 3486, 4201, 3089, 3089, 3749, 4808, 2875, 4205, 3089,
  /* 1810 */ 3089, 3766, 3876, 2876, 4206, 3089, 3089, 3089, 3966, 4005, 4009, 3089, 3089, 3779, 4730, 3089, 5176, 3089,
  /* 1828 */ 5000, 4184, 5242, 4232, 4580, 3485, 4498, 4242, 3556, 4250, 4206, 3089, 3089, 3788, 3089, 3089, 3089, 2964,
  /* 1846 */ 4259, 4267, 3089, 3089, 3815, 3614, 4804, 3128, 5242, 3089, 3347, 5009, 3089, 3355, 3089, 3089, 3204, 3089,
  /* 1864 */ 4291, 3089, 3089, 3089, 3976, 3597, 4006, 4883, 3089, 3366, 3089, 3089, 3214, 5287, 5292, 4314, 3089, 3089,
  /* 1882 */ 3089, 4063, 2946, 2946, 4343, 3089, 3089, 3089, 4145, 4331, 4352, 3089, 3089, 3898, 3821, 3089, 4358, 4353,
  /* 1900 */ 3089, 3420, 3933, 3424, 3304, 3089, 3089, 5034, 5189, 3525, 4363, 3089, 3485, 4334, 4312, 3089, 4371, 4375,
  /* 1918 */ 3089, 3508, 3089, 3500, 3526, 4364, 3089, 3089, 3902, 3876, 2931, 3305, 3089, 4574, 2913, 3089, 2912, 4366,
  /* 1936 */ 2911, 4365, 3089, 4381, 4920, 4658, 3320, 4388, 3089, 4659, 3089, 4394, 3319, 4389, 2964, 4660, 5138, 4390,
  /* 1954 */ 3384, 3318, 3312, 3780, 4142, 4630, 5154, 4661, 4629, 3089, 4400, 3385, 2964, 4299, 3385, 3321, 3430, 4970,
  /* 1972 */ 3431, 3089, 4405, 4644, 4126, 4411, 4396, 4015, 4620, 3089, 3089, 3927, 4946, 3425, 4415, 4422, 3089, 3427,
  /* 1990 */ 3122, 4430, 4427, 3503, 4436, 4443, 4451, 4450, 4446, 4455, 4459, 4460, 4464, 4468, 4470, 4474, 4478, 4483,
  /* 2008 */ 3089, 3089, 3955, 3876, 4493, 4502, 3089, 3426, 4509, 3089, 4515, 4593, 3089, 4847, 3868, 3089, 3540, 3544,
  /* 2026 */ 3089, 3541, 3545, 3089, 3089, 3089, 4577, 4521, 3089, 4528, 3795, 3415, 4532, 3999, 4536, 4543, 4548, 3065,
  /* 2044 */ 3425, 3089, 3089, 4957, 3089, 4559, 3089, 3089, 3974, 3089, 3067, 3089, 3968, 3089, 3542, 3546, 3089, 3089,
  /* 2062 */ 3089, 4552, 3089, 4571, 3089, 3089, 3975, 3089, 4592, 3089, 3089, 3883, 4130, 3089, 5040, 3729, 3089, 3616,
  /* 2080 */ 3089, 3785, 4815, 4599, 3089, 3089, 3975, 4719, 4603, 4636, 3089, 3089, 3987, 4963, 4607, 4612, 3089, 3089,
  /* 2098 */ 4056, 4071, 4608, 3425, 3089, 3089, 3089, 4212, 4846, 3883, 3089, 3089, 4065, 3036, 4619, 3089, 3089, 3089,
  /* 2116 */ 4215, 4112, 3089, 3089, 3427, 3089, 4707, 4667, 3089, 3734, 3889, 3890, 3890, 3890, 3951, 3089, 4816, 3089,
  /* 2134 */ 3089, 4082, 3089, 4651, 4655, 3089, 3089, 4091, 3089, 5236, 3089, 3089, 3089, 4317, 3089, 4537, 3089, 4665,
  /* 2152 */ 4626, 3089, 3089, 3089, 4333, 4672, 3231, 3089, 3089, 4128, 3089, 2919, 3089, 4110, 3089, 3741, 3089, 5188,
  /* 2170 */ 3089, 3089, 3555, 3089, 4401, 3089, 3089, 4131, 4989, 3883, 4367, 3344, 3089, 3062, 3089, 4846, 3089, 4705,
  /* 2188 */ 3089, 3760, 3089, 3204, 3696, 3089, 3089, 2920, 4711, 3089, 4127, 3089, 3846, 3089, 3089, 3161, 3089, 3882,
  /* 2206 */ 3358, 3089, 3089, 4143, 3089, 3696, 3089, 3089, 4698, 3089, 4063, 4713, 3089, 5208, 3089, 3089, 4144, 3089,
  /* 2224 */ 5253, 4717, 3089, 3089, 4218, 4222, 5209, 3089, 4723, 3089, 3850, 3089, 3089, 3413, 3414, 5259, 3089, 3330,
  /* 2242 */ 3089, 4019, 3786, 3089, 3169, 4066, 3089, 3169, 4588, 3089, 3171, 2941, 4584, 5260, 3089, 3089, 3089, 4701,
  /* 2260 */ 3331, 3089, 5261, 3090, 3089, 5260, 5258, 3089, 3330, 3089, 5260, 3089, 3785, 3866, 3786, 3784, 3785, 3786,
  /* 2278 */ 4728, 3866, 3089, 3089, 4285, 4289, 4736, 4964, 3089, 3121, 4346, 3089, 3742, 3523, 3089, 3089, 4647, 3089,
  /* 2296 */ 3059, 3089, 3089, 3089, 4724, 4740, 4744, 4753, 3089, 4023, 4027, 4031, 4031, 4035, 4038, 4769, 4765, 4773,
  /* 2314 */ 4777, 4780, 4782, 4786, 4788, 4790, 4800, 4797, 4794, 4803, 3089, 3089, 3089, 4834, 3089, 4814, 3089, 3089,
  /* 2332 */ 4318, 4673, 3089, 4820, 4827, 3089, 4838, 4852, 4856, 4841, 4862, 3861, 3920, 4846, 3137, 3089, 5016, 5020,
  /* 2350 */ 3089, 4062, 3089, 4684, 4866, 3089, 2997, 5018, 3199, 4870, 4875, 4163, 3748, 4879, 4642, 3089, 3089, 3089,
  /* 2368 */ 4858, 3089, 4871, 5039, 4888, 5321, 4894, 3059, 4902, 4384, 4953, 3089, 3089, 4322, 4329, 4913, 4918, 3089,
  /* 2386 */ 3089, 4348, 2929, 4914, 3425, 3089, 4263, 4700, 4732, 3089, 3089, 4359, 4354, 4810, 3089, 3089, 3089, 4908,
  /* 2404 */ 3547, 3089, 3089, 3089, 4909, 4931, 3089, 3709, 3089, 4064, 2978, 3089, 2909, 3089, 3089, 2924, 4280, 4951,
  /* 2422 */ 4221, 3089, 3089, 4567, 2946, 2949, 4732, 4833, 3089, 3089, 4595, 3573, 3378, 3089, 3089, 3743, 4871, 4927,
  /* 2440 */ 3089, 3709, 4945, 4968, 3089, 3089, 3089, 4925, 4642, 3089, 3742, 3089, 4090, 3089, 3089, 3089, 5328, 3089,
  /* 2458 */ 4993, 5009, 3089, 4104, 3089, 3089, 4622, 3089, 5145, 3890, 3345, 4994, 4206, 3089, 4126, 3089, 3089, 3761,
  /* 2476 */ 3089, 4594, 4998, 3089, 4129, 3089, 3089, 3493, 5314, 3089, 3089, 3557, 3089, 3089, 3089, 3345, 4994, 5007,
  /* 2494 */ 3089, 3089, 3089, 4981, 3346, 5008, 3089, 3089, 5027, 4550, 5013, 3089, 3089, 4644, 4555, 5026, 4845, 3089,
  /* 2512 */ 5248, 4554, 3089, 3153, 3089, 4129, 4125, 3089, 3072, 4882, 3864, 3152, 3089, 3151, 4206, 4921, 3964, 3089,
  /* 2530 */ 5031, 3319, 4553, 3150, 3154, 4097, 5033, 3151, 4206, 4552, 3150, 4554, 4098, 3089, 5038, 4551, 4550, 3778,
  /* 2548 */ 3089, 4889, 3564, 4098, 4550, 3564, 5056, 4236, 5057, 4234, 5044, 5045, 5049, 4238, 5053, 5061, 5061, 3089,
  /* 2566 */ 4141, 3001, 3011, 2905, 4423, 4504, 3045, 4503, 4983, 3617, 5065, 3004, 5069, 4747, 5073, 5083, 5087, 5091,
  /* 2584 */ 5095, 5099, 5103, 5107, 5111, 5115, 5117, 5121, 5129, 5123, 5133, 5125, 3089, 4152, 3089, 5335, 3581, 4614,
  /* 2602 */ 3089, 3322, 5301, 3762, 3089, 5002, 3089, 3338, 2936, 3413, 5137, 3089, 5142, 5149, 3089, 5153, 5158, 3089,
  /* 2620 */ 4154, 3089, 4153, 5162, 5166, 5172, 3089, 4155, 3875, 3876, 3905, 3806, 3917, 3103, 5187, 3089, 5181, 3102,
  /* 2638 */ 5193, 5194, 3089, 4197, 3821, 3876, 3876, 3876, 3876, 3827, 3779, 5174, 3582, 5198, 5003, 5206, 3413, 3089,
  /* 2656 */ 5204, 3092, 4228, 2952, 4325, 3367, 3778, 4496, 5213, 5217, 3089, 4272, 3089, 3089, 3280, 3284, 5224, 5229,
  /* 2674 */ 3089, 3089, 4677, 4681, 5225, 5230, 5234, 3732, 3740, 3089, 3089, 3089, 5078, 3292, 4615, 3089, 3323, 5302,
  /* 2692 */ 5241, 5000, 3524, 3089, 3090, 4324, 5252, 5257, 3089, 3089, 4689, 4693, 5270, 3205, 3089, 3089, 4697, 4110,
  /* 2710 */ 5274, 5278, 5282, 3089, 4316, 4634, 4640, 5270, 3759, 3089, 3089, 4699, 3089, 3522, 3089, 3089, 2952, 3089,
  /* 2728 */ 3089, 4700, 3089, 3089, 5252, 3089, 3089, 4706, 3351, 5292, 3089, 3089, 3089, 5079, 5286, 5291, 3205, 3089,
  /* 2746 */ 4332, 4338, 4307, 3089, 5300, 5306, 3089, 4333, 4339, 3089, 3089, 3089, 4138, 3149, 3089, 3089, 3089, 5174,
  /* 2764 */ 3089, 5296, 3089, 5325, 3742, 3492, 5313, 3089, 3089, 4706, 4255, 3285, 3089, 3089, 3089, 5237, 3143, 3286,
  /* 2782 */ 3089, 3089, 4758, 4762, 3089, 5334, 3089, 3089, 4833, 4143, 3091, 3089, 2953, 3090, 2953, 2951, 3089, 3089,
  /* 2800 */ 4871, 4978, 3089, 5347, 5455, 5387, 5408, 5402, 5389, 5438, 5402, 5391, 5402, 5402, 5399, 5402, 5396, 5392,
  /* 2818 */ 5402, 5402, 5402, 5393, 5986, 5437, 5402, 5402, 5402, 5402, 5392, 5395, 5395, 5402, 5402, 5402, 5404, 5402,
  /* 2836 */ 5403, 5398, 5402, 5402, 5401, 5437, 5437, 5408, 5408, 5407, 5408, 5438, 5437, 5402, 5404, 5408, 5408, 5408,
  /* 2854 */ 5408, 5405, 5438, 5431, 5430, 5407, 5409, 5985, 5433, 5434, 5438, 5435, 5436, 5402, 5402, 5437, 5451, 5453,
  /* 2872 */ 5451, 5454, 5439, 5368, 5974, 5988, 5726, 6283, 5422, 5799, 5361, 6003, 5361, 5571, 5572, 5361, 5887, 5457,
  /* 2890 */ 5361, 5357, 5361, 5361, 5650, 5652, 5361, 5659, 5481, 5458, 5525, 5545, 5361, 5357, 6084, 5361, 5361, 5658,
  /* 2908 */ 5482, 5361, 5492, 5361, 5361, 5349, 6009, 6035, 5991, 5627, 5628, 5361, 5361, 5350, 5361, 5361, 5361, 5502,
  /* 2926 */ 5368, 6014, 5657, 5647, 5424, 5361, 5361, 5361, 5369, 5361, 5361, 5361, 5370, 5545, 5361, 5499, 5500, 5500,
  /* 2944 */ 5361, 5499, 5500, 5500, 5500, 5500, 5469, 5361, 5361, 5361, 5363, 5361, 5361, 5361, 5364, 5361, 5422, 5422,
  /* 2962 */ 5422, 5422, 5361, 5361, 5361, 5373, 5361, 5361, 5361, 5375, 5361, 5361, 5361, 5372, 5424, 5361, 5499, 5469,
  /* 2980 */ 5361, 5361, 5499, 5361, 5499, 5361, 5500, 5361, 5361, 5857, 5495, 5361, 5361, 5659, 5586, 5517, 6084, 5361,
  /* 2998 */ 5361, 5361, 5413, 5361, 6086, 5499, 6086, 5771, 5515, 5361, 5361, 5659, 5952, 5520, 5361, 5646, 5424, 5548,
  /* 3016 */ 5558, 5544, 5361, 5361, 5350, 5444, 5361, 5424, 5361, 6297, 5636, 5792, 5646, 5530, 6095, 6097, 6096, 6097,
  /* 3034 */ 5532, 5361, 5361, 5361, 5427, 5364, 5361, 5857, 5857, 5636, 5361, 5365, 5357, 6086, 5361, 5364, 5364, 5440,
  /* 3052 */ 5440, 5365, 5361, 5440, 5361, 5425, 5646, 5361, 5361, 5666, 5361, 5361, 5667, 5361, 5361, 5670, 6101, 5446,
  /* 3070 */ 5361, 5361, 5506, 5978, 5920, 5514, 5643, 5535, 5525, 5545, 5361, 5361, 5687, 5417, 5356, 5545, 5478, 5793,
  /* 3088 */ 5799, 5361, 5361, 5361, 5361, 5362, 5361, 5659, 5977, 5786, 5953, 6186, 5361, 5949, 5361, 5361, 5361, 6278,
  /* 3106 */ 6280, 5361, 5657, 5525, 5545, 5361, 5977, 5920, 5514, 5474, 5361, 5361, 5362, 5940, 5737, 5361, 5361, 5361,
  /* 3124 */ 5659, 5427, 5361, 5646, 5361, 5427, 5361, 5361, 5361, 5441, 5415, 5567, 5514, 5643, 5361, 5575, 5381, 5953,
  /* 3142 */ 5575, 5361, 5361, 5362, 5508, 5859, 5954, 6292, 5361, 5361, 5361, 6209, 5697, 5444, 5361, 5361, 5458, 5999,
  /* 3160 */ 5361, 5361, 5362, 5509, 5361, 5580, 5582, 5361, 6012, 5361, 5361, 5361, 5469, 5361, 5361, 5500, 5500, 5500,
  /* 3178 */ 5361, 5361, 5422, 5361, 5582, 5361, 6012, 5361, 5984, 5361, 5559, 5361, 5921, 5572, 5361, 5361, 5790, 5543,
  /* 3196 */ 5580, 5577, 5572, 5361, 5361, 5803, 5361, 5361, 5857, 5666, 5361, 5361, 5361, 5538, 5522, 5361, 5584, 5361,
  /* 3214 */ 5361, 5362, 5650, 5423, 5588, 5361, 5869, 5361, 5361, 5857, 5799, 5683, 5659, 5599, 5600, 5580, 5361, 5600,
  /* 3232 */ 5361, 5361, 5361, 5861, 5361, 5603, 5361, 5610, 5592, 5593, 5591, 5590, 5595, 5594, 5595, 5595, 5595, 5595,
  /* 3250 */ 5596, 5597, 5613, 5613, 5612, 5615, 5617, 5617, 5619, 5619, 5619, 5620, 5361, 5921, 5568, 5676, 5568, 5678,
  /* 3268 */ 5595, 5589, 5680, 5682, 5682, 5680, 5619, 5623, 5618, 5625, 5685, 5626, 5361, 5361, 5362, 5651, 5656, 5508,
  /* 3286 */ 5859, 5954, 5361, 5361, 5998, 5628, 5636, 5361, 5364, 5892, 5696, 5361, 5606, 5361, 5501, 5361, 5627, 5699,
  /* 3304 */ 5661, 5468, 5862, 5361, 5361, 5506, 5361, 5458, 5361, 5361, 5868, 5361, 5361, 5919, 5361, 5361, 5921, 5361,
  /* 3322 */ 5361, 5361, 5606, 5361, 5373, 5370, 5486, 5361, 5361, 5362, 5661, 5361, 5361, 5361, 5514, 5894, 5361, 5361,
  /* 3340 */ 5946, 5921, 5361, 5361, 5545, 5361, 5361, 5361, 5464, 5774, 5950, 5361, 5784, 5937, 5474, 5789, 5482, 5424,
  /* 3358 */ 5361, 5361, 5949, 5545, 5350, 5361, 5361, 5472, 5794, 5361, 5361, 5361, 5506, 5361, 5707, 5361, 5606, 5361,
  /* 3376 */ 5361, 5949, 5572, 5361, 5361, 5361, 5572, 5442, 5361, 5361, 5373, 5862, 5527, 5707, 5361, 5510, 5361, 5361,
  /* 3394 */ 5467, 5361, 5467, 5361, 5361, 5980, 5578, 5361, 5711, 5444, 5361, 5361, 5984, 5527, 5713, 5361, 5422, 5372,
  /* 3412 */ 5424, 5659, 5361, 5361, 5361, 5412, 5361, 5653, 5365, 5716, 5361, 5600, 5361, 5446, 5361, 5361, 5361, 5514,
  /* 3430 */ 5361, 5361, 5361, 5526, 5361, 5361, 5720, 5361, 5490, 5364, 5365, 5731, 5730, 5573, 5742, 5741, 5741, 5739,
  /* 3448 */ 5742, 5740, 5739, 5739, 5739, 5739, 5749, 5748, 5750, 5749, 5750, 5752, 5758, 5758, 5753, 5754, 5754, 5755,
  /* 3466 */ 5759, 5756, 5759, 5756, 5746, 5761, 5763, 5739, 5743, 5744, 5765, 5744, 5745, 5756, 5767, 5361, 5361, 6012,
  /* 3484 */ 5544, 5361, 5361, 5362, 5441, 5374, 5361, 5488, 5361, 5361, 5362, 6037, 5509, 5361, 5944, 5799, 5361, 5361,
  /* 3502 */ 6066, 5361, 5361, 6072, 5922, 5580, 5361, 5784, 5361, 5443, 5361, 6077, 6000, 5361, 5361, 6084, 5361, 5361,
  /* 3520 */ 5784, 5514, 5627, 5361, 5705, 5361, 5361, 5361, 6030, 5795, 5784, 5790, 5859, 6084, 5361, 6023, 5643, 5493,
  /* 3538 */ 6023, 5643, 5361, 5361, 5362, 6117, 5460, 6122, 5554, 5361, 5361, 5361, 5886, 5361, 5784, 5944, 5799, 5361,
  /* 3556 */ 5565, 5361, 5361, 5361, 5565, 5361, 5784, 5892, 5938, 5444, 5361, 5361, 5632, 5417, 5350, 5784, 5790, 5883,
  /* 3574 */ 5643, 5771, 5643, 5361, 5361, 5361, 5776, 5361, 5361, 5364, 5892, 5361, 5892, 5979, 5771, 5643, 5771, 5643,
  /* 3592 */ 5361, 5784, 5361, 5893, 5799, 5361, 5361, 5364, 6019, 5361, 6084, 6084, 6084, 5361, 5374, 5372, 5661, 5361,
  /* 3610 */ 5361, 6088, 5422, 5422, 5372, 5361, 5361, 5361, 5365, 5361, 5361, 5361, 5541, 5542, 5863, 5444, 5576, 5444,
  /* 3628 */ 5361, 5361, 6119, 5361, 5361, 5541, 5383, 5361, 5575, 5866, 5546, 5479, 5382, 5444, 5361, 5781, 5546, 5570,
  /* 3646 */ 5806, 5811, 5807, 5808, 5811, 5808, 5812, 5809, 5809, 5814, 5813, 5813, 5814, 5817, 5816, 5818, 5818, 5819,
  /* 3664 */ 5818, 5821, 5821, 5821, 5824, 5824, 5824, 5823, 5827, 5826, 5827, 5826, 5829, 5833, 5352, 5830, 5833, 5837,
  /* 3682 */ 5831, 5839, 5841, 5843, 5850, 5845, 5844, 5849, 5849, 5847, 5848, 5852, 5854, 5856, 5361, 5361, 5361, 5576,
  /* 3700 */ 5524, 5361, 5575, 5444, 5373, 5375, 5361, 5361, 5709, 5361, 5361, 5722, 5361, 5361, 5769, 5983, 5865, 5361,
  /* 3718 */ 5361, 5783, 5802, 5361, 5790, 5779, 6085, 6085, 5361, 5504, 5447, 5361, 5361, 6179, 5370, 5361, 5370, 5361,
  /* 3736 */ 5417, 5689, 5873, 5556, 5370, 5361, 5361, 5361, 5628, 5361, 5361, 5449, 5361, 5361, 5370, 5648, 5467, 5509,
  /* 3754 */ 5417, 5834, 5417, 5417, 5417, 5666, 5361, 5361, 5659, 5361, 5361, 6118, 5361, 5506, 6261, 5353, 5371, 5637,
  /* 3772 */ 6261, 5871, 5361, 5361, 5524, 5524, 5631, 5361, 5361, 5361, 5472, 5361, 5361, 5361, 5482, 5361, 5361, 5361,
  /* 3790 */ 5420, 5361, 5361, 5694, 5572, 5361, 5361, 5410, 5672, 5361, 5484, 6256, 6165, 5880, 5875, 5417, 5419, 5608,
  /* 3808 */ 5485, 5358, 5998, 5524, 5524, 5524, 5524, 5364, 5361, 5361, 5374, 5372, 5361, 6259, 6261, 6261, 6261, 5417,
  /* 3826 */ 5885, 6261, 6261, 5879, 6261, 5876, 5876, 5418, 5485, 5637, 5417, 5462, 5417, 5462, 5361, 5371, 6261, 5871,
  /* 3844 */ 5524, 5524, 5361, 5361, 5361, 5631, 5364, 5361, 5373, 5421, 5361, 5688, 5690, 5692, 5417, 5417, 5777, 5361,
  /* 3862 */ 5361, 6186, 5361, 5361, 5361, 5661, 5361, 5361, 5361, 5442, 5361, 6256, 6258, 6260, 6261, 6261, 6261, 6261,
  /* 3880 */ 5711, 5361, 5361, 5361, 5643, 5361, 5361, 5417, 5835, 5691, 5417, 5417, 5417, 5417, 5351, 5350, 5485, 5350,
  /* 3898 */ 5637, 6261, 6261, 6164, 6261, 6258, 6260, 6261, 5359, 5354, 5417, 5417, 5417, 5996, 5572, 5361, 5485, 5885,
  /* 3916 */ 5350, 5417, 5461, 5463, 5361, 5361, 6181, 5575, 5361, 6261, 5361, 5361, 5423, 5416, 6091, 5361, 5572, 5361,
  /* 3934 */ 5361, 5428, 5717, 5361, 6258, 6260, 6261, 5485, 5639, 5350, 5360, 5350, 5360, 6215, 5692, 5417, 5417, 5417,
  /* 3952 */ 5551, 5996, 5572, 6255, 6261, 6261, 6261, 5419, 5361, 6261, 5639, 5637, 5361, 5361, 6207, 5444, 5575, 5361,
  /* 3970 */ 5643, 5361, 5417, 5877, 5361, 5361, 5361, 5646, 5361, 5361, 5361, 6255, 6261, 6261, 5638, 6261, 5638, 5361,
  /* 3988 */ 5361, 5361, 5648, 6254, 6261, 6261, 5360, 5632, 5350, 5637, 5360, 5361, 5361, 5361, 5644, 5369, 5652, 5482,
  /* 4006 */ 5632, 5469, 5882, 5954, 5577, 5444, 5361, 5889, 5643, 5361, 5361, 5442, 5796, 5955, 5361, 5892, 5575, 5661,
  /* 4024 */ 5932, 5628, 6022, 6120, 5891, 5732, 5896, 5898, 5898, 5898, 5898, 5899, 5902, 5901, 5902, 5902, 5903, 5904,
  /* 4042 */ 5908, 5906, 5906, 5906, 5905, 5906, 5906, 5910, 5910, 5910, 5361, 5361, 5444, 5981, 5361, 5650, 5425, 5653,
  /* 4060 */ 5687, 5361, 5658, 5361, 5361, 5361, 5499, 5361, 5361, 5361, 5379, 5661, 5468, 6087, 5862, 5917, 5917, 5565,
  /* 4078 */ 5361, 5361, 5445, 5572, 5361, 5700, 5361, 5361, 5448, 5361, 5546, 5919, 5361, 5361, 5458, 5631, 5361, 5926,
  /* 4096 */ 5929, 5361, 5361, 5458, 5938, 5444, 5361, 5528, 5361, 5361, 5469, 5469, 5928, 5446, 5361, 5361, 5469, 5649,
  /* 4114 */ 5361, 6063, 5361, 5621, 5931, 5361, 5361, 6216, 5417, 5417, 5445, 5445, 5361, 5361, 5361, 5527, 5361, 5361,
  /* 4132 */ 5361, 5425, 5475, 5361, 5934, 5446, 5361, 5361, 6263, 5361, 5361, 6086, 5361, 5361, 5361, 5424, 5659, 5936,
  /* 4150 */ 5370, 5445, 5361, 5361, 6294, 5361, 5361, 5361, 6254, 6261, 5361, 5942, 5736, 5959, 5361, 5971, 5959, 5363,
  /* 4168 */ 5361, 5361, 5734, 5735, 5942, 5361, 5361, 5469, 5658, 5943, 5361, 5361, 5943, 5966, 5361, 5361, 5664, 5361,
  /* 4186 */ 5361, 5361, 5690, 5361, 5970, 5361, 5361, 5471, 5361, 5361, 5733, 5361, 5361, 5484, 6257, 5975, 5725, 5727,
  /* 4204 */ 6284, 6283, 5444, 5361, 5361, 5361, 5650, 5361, 5361, 5723, 5724, 5361, 5362, 5503, 5423, 5476, 5635, 5798,
  /* 4222 */ 5554, 5673, 5384, 5361, 5361, 5990, 5361, 5361, 5487, 5361, 5361, 5982, 5361, 5361, 5496, 5361, 5361, 5938,
  /* 4240 */ 5361, 5938, 5540, 5788, 5993, 5728, 6006, 5657, 5483, 5962, 5787, 5893, 6282, 5577, 5961, 5361, 5361, 5361,
  /* 4258 */ 5700, 6011, 5482, 5632, 5469, 5361, 5499, 5361, 5469, 5882, 5954, 5382, 5361, 5364, 5369, 5361, 5482, 5361,
  /* 4276 */ 5361, 5499, 5500, 5469, 5657, 5483, 6017, 5859, 5791, 5362, 5441, 6031, 5483, 6021, 5509, 5791, 5893, 6282,
  /* 4294 */ 5382, 5361, 5660, 5947, 6090, 5862, 5527, 5361, 5361, 5537, 5361, 5793, 5993, 5728, 5361, 5361, 5361, 5701,
  /* 4312 */ 5791, 5893, 6282, 5643, 5361, 5361, 5502, 5421, 5656, 5460, 5362, 5924, 5361, 5361, 5361, 5654, 5545, 6082,
  /* 4330 */ 5659, 5361, 5361, 5502, 6031, 5483, 6021, 5509, 6021, 5509, 5791, 6025, 5728, 6019, 5632, 6009, 5514, 5952,
  /* 4348 */ 5361, 5361, 5606, 5607, 5795, 5508, 5862, 6282, 5361, 5361, 5361, 5502, 6031, 5795, 5508, 5795, 6009, 6035,
  /* 4366 */ 5991, 5361, 5361, 5361, 5705, 5362, 6019, 5468, 5862, 6078, 5921, 5361, 5361, 5514, 5771, 5373, 6009, 5514,
  /* 4384 */ 5361, 5364, 6191, 5465, 5361, 6037, 5862, 6205, 5361, 5361, 6037, 5862, 5361, 5361, 5527, 5527, 6041, 5514,
  /* 4402 */ 5361, 5361, 5995, 5995, 5361, 5361, 5995, 5545, 5361, 5361, 5527, 5361, 5527, 5636, 5361, 5499, 5441, 5349,
  /* 4420 */ 5356, 5545, 6043, 5361, 5636, 5361, 5771, 5636, 5444, 5361, 6093, 5444, 5361, 5361, 5538, 6204, 6071, 5641,
  /* 4438 */ 5640, 5361, 5365, 5425, 5412, 5642, 6045, 6048, 6048, 6046, 6051, 6052, 6049, 6048, 6048, 6048, 6048, 6054,
  /* 4456 */ 6055, 6054, 6054, 6057, 6058, 6058, 6058, 6059, 6058, 6059, 6058, 6058, 6061, 5912, 5912, 5912, 5913, 5910,
  /* 4474 */ 5911, 5910, 5911, 5912, 5911, 5910, 5910, 5910, 5910, 5910, 5912, 5913, 5914, 5632, 5776, 5921, 5361, 5514,
  /* 4492 */ 5361, 5469, 5659, 5365, 5361, 5367, 5374, 6007, 5473, 6033, 6063, 5361, 5361, 5361, 5771, 5361, 5361, 5361,
  /* 4510 */ 5444, 5361, 5361, 5559, 5361, 5361, 6065, 5361, 5506, 5498, 5513, 5361, 5800, 6068, 5361, 5373, 5421, 5799,
  /* 4528 */ 6070, 5361, 5444, 6074, 5948, 5361, 5411, 5645, 6076, 5361, 5361, 5361, 5784, 5361, 5361, 6081, 5361, 5361,
  /* 4546 */ 5361, 5793, 6099, 5443, 5361, 5361, 5361, 5458, 5496, 5361, 5361, 5361, 5446, 5669, 5671, 6102, 5361, 5373,
  /* 4564 */ 5703, 5361, 5606, 5361, 5361, 5361, 5500, 5361, 5442, 5877, 5921, 5361, 5545, 5361, 5364, 5440, 5361, 5361,
  /* 4582 */ 5662, 5668, 5361, 5361, 5486, 5555, 5649, 5361, 5458, 5572, 5506, 5379, 5361, 5361, 5361, 5773, 5790, 5361,
  /* 4600 */ 6274, 5361, 5663, 5361, 6104, 6006, 5549, 6007, 5550, 5508, 5862, 6111, 6111, 5446, 5361, 5361, 5562, 5361,
  /* 4618 */ 5361, 5632, 6003, 5361, 5361, 5361, 5711, 5361, 6001, 5361, 6176, 5361, 5373, 5862, 6205, 5361, 5648, 5459,
  /* 4636 */ 5468, 5509, 6110, 5674, 5954, 6114, 5571, 5361, 5361, 5361, 5995, 5361, 5361, 5361, 5443, 5656, 5460, 5508,
  /* 4654 */ 5862, 6113, 6115, 5572, 5361, 5373, 6009, 6039, 5921, 5361, 5361, 5892, 5527, 5984, 5361, 5361, 5361, 5799,
  /* 4672 */ 5460, 5508, 5954, 5938, 5600, 5362, 5731, 6015, 5468, 5785, 5553, 5545, 5361, 5374, 5705, 5361, 5606, 5361,
  /* 4690 */ 5502, 5426, 5460, 6038, 5938, 5554, 5361, 5361, 5632, 5361, 5361, 5361, 5857, 5361, 5361, 6001, 5361, 5361,
  /* 4708 */ 5361, 5892, 5527, 5361, 5499, 5659, 5365, 5458, 5361, 5693, 5545, 5361, 5361, 5564, 5424, 5576, 5361, 5361,
  /* 4726 */ 5361, 5915, 5361, 5661, 5361, 5661, 5857, 5361, 5857, 5361, 6094, 6032, 5350, 5984, 5361, 6128, 5361, 5466,
  /* 4744 */ 5628, 6186, 5361, 5427, 5771, 5361, 5365, 5374, 5361, 5506, 5361, 5361, 5361, 5964, 6130, 6296, 6295, 6133,
  /* 4762 */ 6296, 6132, 6135, 6139, 6139, 6140, 6137, 6140, 6138, 6139, 6144, 6139, 6143, 6142, 6146, 6149, 6148, 6149,
  /* 4780 */ 6149, 6150, 6151, 6151, 6152, 6154, 6153, 6151, 6151, 6151, 6156, 6156, 6156, 6156, 6160, 6160, 6158, 6156,
  /* 4798 */ 6157, 6157, 6160, 6160, 6157, 6160, 5361, 5361, 5361, 5990, 5361, 5509, 5514, 6187, 5571, 5361, 5886, 5361,
  /* 4816 */ 5361, 5361, 5997, 5361, 5511, 6122, 5444, 5361, 5378, 5477, 5386, 5361, 5714, 5643, 5361, 5379, 5559, 5857,
  /* 4834 */ 5361, 5361, 5361, 5489, 5376, 6162, 5631, 5361, 5380, 6173, 5361, 5382, 5361, 5361, 5361, 5575, 5361, 5361,
  /* 4852 */ 6167, 5361, 6169, 6171, 5361, 5601, 5361, 5361, 5571, 5444, 5658, 5361, 6175, 6178, 5414, 6193, 6195, 5959,
  /* 4870 */ 5804, 5361, 5361, 5361, 6008, 5361, 5972, 5361, 5971, 5467, 5509, 5514, 6187, 5643, 5361, 5361, 5361, 5357,
  /* 4888 */ 6183, 5361, 5361, 5361, 6012, 5361, 5361, 5721, 5643, 5361, 5412, 5653, 5370, 5486, 5361, 5505, 5361, 5361,
  /* 4906 */ 5575, 5575, 5361, 5361, 5362, 6105, 6007, 5415, 5881, 6091, 5956, 6196, 6196, 5446, 5361, 5361, 5580, 5361,
  /* 4924 */ 5361, 5361, 6008, 5496, 5361, 5361, 6201, 5361, 6089, 5643, 5361, 5412, 5857, 5653, 5361, 5687, 5487, 5361,
  /* 4942 */ 5370, 6107, 5881, 6091, 5797, 5553, 6079, 5569, 5446, 6198, 5465, 6090, 6092, 5957, 5384, 5469, 5499, 5361,
  /* 4960 */ 5361, 5606, 5424, 5633, 5862, 6186, 5952, 5572, 5569, 5446, 5361, 5361, 5606, 5527, 5646, 6203, 5514, 6187,
  /* 4978 */ 5496, 5361, 5425, 5643, 5643, 5361, 5361, 5562, 6086, 5425, 5475, 5634, 5797, 5553, 6079, 5464, 5542, 5798,
  /* 4996 */ 6083, 5569, 5771, 5921, 5361, 5361, 5627, 5361, 5361, 5361, 5510, 5774, 5950, 5569, 5444, 5361, 5361, 5496,
  /* 5014 */ 5361, 5643, 5361, 5413, 6192, 6194, 5958, 5361, 5361, 5361, 5998, 5361, 5361, 5464, 5798, 5952, 5382, 5458,
  /* 5032 */ 5938, 6004, 5361, 5361, 5361, 6028, 6209, 5496, 5361, 5361, 5425, 5604, 5937, 5496, 5361, 5937, 5496, 5361,
  /* 5050 */ 5949, 5361, 5938, 5949, 5949, 5949, 5949, 5444, 5361, 5937, 5496, 5552, 5552, 5552, 5552, 5361, 5858, 5361,
  /* 5068 */ 5515, 5363, 5361, 6086, 6212, 6214, 6086, 6212, 5951, 6086, 5361, 5361, 5366, 5368, 6006, 6086, 6189, 5967,
  /* 5086 */ 6188, 6218, 5967, 5361, 5968, 6230, 6231, 6231, 6220, 6232, 6231, 6223, 6234, 6231, 6221, 6233, 6223, 6225,
  /* 5104 */ 6229, 6228, 6227, 6236, 6227, 6227, 6238, 6240, 6240, 6240, 6248, 6241, 6243, 6245, 6240, 6247, 6250, 6251,
  /* 5122 */ 6251, 6265, 6266, 6265, 6265, 6253, 5361, 6252, 6266, 6251, 6252, 6265, 6265, 6265, 6265, 5605, 5361, 5361,
  /* 5140 */ 5361, 6037, 5630, 5361, 5518, 5361, 5417, 5690, 5692, 5361, 5533, 5361, 5718, 6268, 5361, 5361, 5361, 6041,
  /* 5158 */ 5605, 5361, 5998, 6269, 5361, 6199, 5605, 5629, 5361, 6271, 5361, 5361, 5632, 5487, 6273, 6276, 5361, 5361,
  /* 5176 */ 5636, 5361, 5361, 5361, 5653, 5470, 6279, 6281, 5666, 6278, 6280, 6026, 5361, 5361, 5361, 6082, 5361, 5994,
  /* 5194 */ 5470, 6286, 5361, 5361, 5937, 5424, 5361, 5361, 5637, 5628, 5361, 5510, 5361, 6037, 5361, 5362, 5460, 5554,
  /* 5212 */ 5361, 6163, 5521, 5540, 5561, 6078, 5666, 5361, 5361, 5637, 6261, 5360, 6006, 5657, 6262, 5539, 5560, 5560,
  /* 5230 */ 6210, 6002, 5361, 5361, 5361, 5668, 5361, 5361, 5643, 5575, 5361, 5361, 6087, 5361, 5361, 5361, 5665, 6288,
  /* 5248 */ 5361, 5361, 5361, 6108, 6290, 5361, 5361, 5361, 6124, 6082, 5361, 5361, 5361, 6126, 5361, 5361, 5361, 5960,
  /* 5266 */ 5655, 5657, 5507, 5523, 5859, 5788, 5938, 5554, 5361, 5502, 5368, 6106, 5656, 5976, 5521, 5525, 5787, 5893,
  /* 5284 */ 5553, 6002, 5423, 5656, 5507, 5478, 5859, 5859, 5791, 5893, 5553, 5666, 5361, 5892, 5361, 5979, 5510, 5373,
  /* 5302 */ 5469, 5361, 5363, 5659, 5363, 5427, 5361, 5860, 6030, 5426, 6008, 5509, 5542, 5893, 5361, 5361, 5542, 5893,
  /* 5320 */ 5666, 5361, 5420, 5361, 6185, 5510, 5373, 5469, 5362, 5365, 5361, 5427, 5427, 5361, 5606, 5362, 5361, 5361,
  /* 5338 */ 5361, 6215, 5417, 6294, 5510, 5361, 5361, 5650, 5661, 5361, 5443, 8, 4096, 0, -276824064, -276817920, 6144,
  /* 5355 */ -8384512, 16384, 2097152, 0, -8382464, 6144, 0, 0, 1, 0, 2, 0, 3, 4, 8, 0, 4, 32, 0, 8, 16, 0, 9, 2129920,
  /* 5379 */ 32768, 0, 11, 536870912, 0x80000000, 536870912, -1073741824, 4718592, 8454176, 67158016, 4751360, 67141632,
  /* 5391 */ 276889600, 545325056, 8454144, 656576, 8454144, 545325056, 545325056, 4327744, -2122252288, 545325056,
  /* 5401 */ 1073873488, 8454144, 8454144, -2139029504, 8454144, -1585381376, 277938176, 9502720, 9502720, 0, 12, 2048,
  /* 5413 */ 0, 15, 112, 384, 4096, 4096, 4097, 0, 16, 32, 32, 64, 0, 32, 128, 0, 33, 9502720, 276889600, -1585381376,
  /* 5433 */ 8462336, 8454144, 8462336, 9510912, 8454144, 9502720, 8454144, 2, 2, 4, 0, 0x80000000, 0, -1073741824, 0,
  /* 5448 */ -394264576, 0, -377487360, 9502720, 9510912, 8454144, 277938176, 8454144, 142868480, 134479872, 0, 256,
  /* 5460 */ 1536, 4096, 4100, 4128, 0, 384, 6144, 2048, 4096, 8192, 0, 511, 0, 512, 1024, 64, 384, 32768, 32768, 65536,
  /* 5480 */ -2147221504, 131136, 0, 1024, 2048, 6144, 4096, 16384, 0, 1152, 0, 1216, 1073741840, 0, 1920, 2097152,
  /* 5496 */ 8388608, 0x80000000, 4227072, 0, 8192, 8192, 1, 2, 16, 48, 0, 2048, 8192, 32768, 131072, 0, 2304,
  /* 5513 */ 268697600, 524288, 0, 8200, 71303168, 0, 11264, 71303168, 8192, 49152, 49152, 65536, 65536, 131072,
  /* 5527 */ 16777216, 0, 16576, 0, 1073762304, -1073721320, 0, 19456, 4, 768, 24, 0, 49152, 196608, 262144, 262144,
  /* 5543 */ 524288, 131072, 33554432, 0, 10, 4, 256, 3584, 4096, 8388608, 8388608, 16777216, 33554432, 32, 768, 512,
  /* 5559 */ 65536, 262144, 3670016, 4194304, 64, 20480, 1073741824, 0x80000000, 32768, 268435456, 268435456, 536870912,
  /* 5571 */ 268435456, 1073741824, 0, 65586, 0, 536870912, 536870912, 1073741824, 64, 0, 268435456, 524288, 536870912,
  /* 5584 */ 4100, 16640, 8192, 1049088, 0, 805306368, -1677721600, -1744830464, -1946157056, -1744830464, -1744830464,
  /* 5595 */ -1677721600, -1677721600, 1277165568, -1677721600, 805306368, 50331648, 0, 98304, 8388664, 131072,
  /* 5605 */ 41943040, 0, 131072, 64, 2146304, 1140850688, -1744830464, 1282146304, 1277952000, 1277952000, 1277953024,
  /* 5616 */ 1277952064, -872415232, -872415232, -603979776, -603979776, 0, 155840, -872415232, 1275068416, -872415232,
  /* 5626 */ 1543503872, 0, 262144, 0, 3072, 65536, 0, 4096, 32768, 786432, 1048576, 0, 6144, 4097, 4096, 34816, 34816,
  /* 5643 */ 536870912, 0, 44, 0, 64, 64, 128, 2, 8, 32, 256, 0, 96, 128, 256, 512, 0, 128, 1024, 0, 160, 0, 192,
  /* 5666 */ 67108864, 0, 224, 0, 255, 16128, 114688, 201326592, 268435456, -1073741824, 1342177280, 268435456,
  /* 5678 */ 805306368, 469762048, 872415232, 1879048192, 805306368, 805306368, 1049088, -603979776, 469762048, 4, 4096,
  /* 5689 */ 8392704, 16781312, 100667392, 1073745920, 4096, 16777216, 234881024, 56, 8388608, 268435456, 6815744,
  /* 5700 */ 2621440, 0, 263328, 48, 8388608, 32, 8388608, 16, 8388608, 8, 8388608, 0, 1073741824, 34, 32, 147456, 34,
  /* 5717 */ 34, 0, 327680, 35, 0, 393216, 0, 523264, 523264, 66584576, 67108864, 402653184, 536870912, -1005584384, 2,
  /* 5732 */ 32, 263168, 0, 524256, 524256, 536346624, -536870912, 588655, 588655, 588653, 588653, 588655, 165069,
  /* 5745 */ 165069, 672004991, 671742847, 588655, 283212658, 283212658, 333544306, 283212658, 671710071, 654207,
  /* 5755 */ 654207, 672004991, 672004991, 671710071, 671710071, 672004991, 33984, 33984, 33992, 33997, 230605, 165069,
  /* 5767 */ 589799, 672006135, 8, 768, 0, 134217728, 128, 524288, 6291456, 1048576, 67108864, 1073741824, 524288,
  /* 5780 */ 134217728, 122880, 65536, -1593835520, 0, 524288, 4194304, 262144, 1572864, 2097152, 524288, 524288,
  /* 5792 */ 1048576, 1048576, 2097152, 1024, 4096, 1048576, 6291456, 8388608, 0, 40, 66560, 0, 1040384, -536870912,
  /* 5806 */ -528480768, 138543488, 138543488, 138544512, 138543488, 138544512, 138805632, 138806656, 138544512,
  /* 5815 */ 138544512, -394263024, 139067776, -394263024, -394263024, -394262992, -394262620, -394262620, -389937280,
  /* 5824 */ -389937280, -389675136, -389937244, -389937244, -377485404, -389937244, -276819968, -276824064, -8382464,
  /* 5833 */ -276819968, -276819968, 4096, 16781312, -276758528, -276824064, -7860223, -7598079, -7860223, -274862016,
  /* 5843 */ -4327360, -133056, -272493184, -272497280, -132544, -132032, -133056, -133056, -272491136, -272492636,
  /* 5853 */ -272496732, -272492636, -4194880, -4194332, 0, 1048576, 131072, 262144, 32, 131072, 524288, 0x80000000,
  /* 5865 */ 57344, -2130706432, 0x80000000, -528482304, 0, 1049088, 6148, 6176, 234885120, 1073745920, 6144, 268439552,
  /* 5877 */ 4096, 67108864, 6144, 268441600, 6144, 16384, 131072, 134217728, 4097, 6144, 262144, 8650752, 2097184,
  /* 5890 */ 2621440, -2147220480, 0, 2097152, 4194304, 1024, 805308417, -1037826780, 67109056, 67109056, 67125440,
  /* 5901 */ 69886154, -1037827036, -1037827036, -970718172, -970718172, -970717980, -970717980, -970718044, -970718044,
  /* 5910 */ -1, -1, -536870913, -536870913, -1, 0, 2621440, 2097152, 536870912, 139264, 262144, 268435456, 0, 34816,
  /* 5924 */ 2048, 268435456, 4, 263456, 263200, 35651584, -1073741824, 69730304, 0, 2760714, 263200, 102760448, 263392,
  /* 5937 */ 0, 4194304, 8388608, 30, 524256, 1, 30, 0, 6291456, 1, 2048, 12288, 0, 8388608, 134217728, 134217728,
  /* 5953 */ 268435456, 524288, 2097152, 1048576, 14680064, 520093696, -536870912, 0, 61440, 61440, 196608, 4, 288,
  /* 5966 */ 35651584, 0, 8388640, 513, 155648, 0, 15728640, -536870912, 16, 480, 512, 2048, 32768, 4194304, 0, 20480,
  /* 5982 */ 0, 24576, 0, 32768, 8454144, 8454176, 512, 523264, 4, 33554432, 268435456, 4194304, 58720256, 0, 16777216,
  /* 5997 */ 100663296, 0, 65536, 33554432, 8388608, 33554432, 67108864, 268435456, 0x80000000, 16, 224, 256, 8192,
  /* 6010 */ 131072, 8, 256, 65536, 16, 128, 1536, 12288, 49152, 8, 1024, 12288, 16384, 262144, 134217728, 2097152,
  /* 6026 */ 58720256, 67108864, 1, 268435456, 1, 8, 128, 2048, 61440, 524288, 25165824, 8, 8192, 524288, 16777216, 8,
  /* 6042 */ 131072, 128, 1073742080, 67143684, 176373800, -1971109848, 176373800, 176373800, 176373802, 195256360,
  /* 6052 */ 201443340, 195260456, 201443340, 201443340, 201443372, 235128876, 243517484, 243517484, 244566188,
  /* 6061 */ -1903966164, -536870913, 256, 1073741824, 18874368, 0, 18874368, 81920, 176291840, 42, 0, 18882560,
  /* 6073 */ 18882560, 0, 195166208, 235012096, 0, 25165824, 33554432, 201326592, 243400704, 0, 33554432, 134217728,
  /* 6085 */ 536870912, 134217728, 0, 16384, 32, 16384, 32768, 917504, 1048576, 4, 64, 1073762304, -1073721344,
  /* 6098 */ 1073762304, 172, 244449280, 114688, 536739840, -1073741824, 1, 6, 16, 96, 384, 6291456, 524288, 132120576,
  /* 6112 */ 268435456, 2097152, 12582912, 117440512, 268435456, 2, 128, 16384, 263168, 2760714, 8192, 8388608, 1, 1536,
  /* 6126 */ 1, 1024, 0, 1073741888, 0, 268959744, 33792, 67239938, 268959872, -2139084544, 604127266, 1073807961,
  /* 6138 */ 134283801, 66073, 66073, 66077, 72217, 68121, 66073, 66201, 66073, 98841, 269058713, 604455467, 604455467,
  /* 6151 */ 604193339, 604193339, 604195387, 604193339, 604199483, -9217, -9217, -1025, -9217, -1025, -1025, 16, 512,
  /* 6164 */ 6144, 16783360, 234887168, 13, 640, 80, 2560, 6656, 9, 475136, 536870912, 622592, 0, 50331648, 475136, 0,
  /* 6180 */ 60817408, 48, 212992, 16384, 536870912, 80, 0, 67108864, 134217728, 2359296, 2359296, 4, 112, 7040,
  /* 6194 */ 1032192, 15728640, 520093696, 536870912, 4, 96, 1024, 32, 536870912, 128, 32768, 16777216, 268435456, 256,
  /* 6208 */ 8388608, 256, 4194304, 25165824, 2, 64, 134234240, 0, 67112960, 4096, 8388640, 8388640, 134286336, 68608,
  /* 6222 */ 134286336, 76808, 68608, 1117184, 134302848, 41943136, 41943136, 2427904, 41943136, 68608, 68608, 68610,
  /* 6234 */ 68608, 4262912, 41943136, 42008672, 42009696, 42009696, 42011744, 42011744, 42019944, 42011744, 43060320,
  /* 6245 */ 42011744, 176227426, 42011744, 176229472, 42011746, 176245984, 134217727, 134217727, 268435455, 0,
  /* 6255 */ 67115008, 6144, 8394752, 16783360, 100669440, 1073747968, 6144, 6144, 8192, 65536, 268435455, 268435455,
  /* 6267 */ 134217727, 96, 41943040, 41943040, 98, 104, 98, 0, 109051904, 224, 19456, 511, 65024, 458752, 7864320,
  /* 6282 */ 58720256, 402653184, 1610612736, 0x80000000, 65024, 58720256, 96, 33554432, 2048, 65536, 4194304, 67108864,
  /* 6294 */ 1, 32768, 67239938, 0, 33751812
];

XQueryParser_t.LOOKAHEAD =
[
  /*     0 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*    17 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*    34 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*    51 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1278, 1337, 1337, 1337, 1337, 1337,
  /*    68 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*    85 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1289, 1297, 1305, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*   102 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*   119 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1559, 1317, 1336, 1337, 1337, 1337, 1337, 1337,
  /*   136 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 4218,
  /*   153 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*   170 */ 1337, 1337, 1337, 2589, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*   187 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*   204 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*   221 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1470, 1346,
  /*   238 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 3926, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*   255 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1354, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*   272 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*   289 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*   306 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1538, 1337,
  /*   323 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*   340 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*   357 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*   374 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*   391 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1366,
  /*   408 */ 1374, 1382, 1337, 1337, 1337, 1337, 1337, 1337, 1394, 1402, 1410, 1337, 1337, 1337, 1358, 1337, 1337,
  /*   425 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 4214, 1337, 2737, 1422, 1430, 1337,
  /*   442 */ 1337, 1337, 1337, 4231, 1337, 4235, 1337, 1414, 1337, 1337, 1337, 1337, 1337, 1337, 2709, 1438, 1446,
  /*   459 */ 1337, 1337, 1337, 1337, 1454, 1337, 1337, 1337, 1490, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*   476 */ 1337, 1337, 1337, 1337, 1337, 1466, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*   493 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1500, 1337, 1337, 1337, 1337, 1337, 1337,
  /*   510 */ 1337, 1337, 1605, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*   527 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*   544 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
  /*   561 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 2697, 1337, 1337, 1337, 1337, 1478, 1337, 1337,
  /*   578 */ 1337, 1337, 1337, 1337, 1337, 1337, 1488, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1498, 1337,
  /*   595 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 3535, 1337, 1337, 1337, 1337,
  /*   612 */ 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1508, 1516, 1524, 1337, 1337, 1536,
  /*   629 */ 1281, 1337, 1337, 1546, 1337, 4131, 1337, 1337, 1337, 3930, 1337, 1337, 1337, 1337, 4164, 1337, 1337,
  /*   646 */ 1337, 1582, 1337, 1337, 1337, 1337, 4181, 1337, 1337, 1337, 1337, 1337, 1337, 1458, 1554, 1567, 1337,
  /*   663 */ 1337, 1579, 1338, 1337, 1337, 1337, 1337, 1590, 1337, 1337, 1337, 1480, 1337, 1337, 1602, 1337, 1613,
  /*   680 */ 1337, 3539, 1625, 1637, 1337, 1337, 1645, 2777, 3720, 1337, 1528, 1653, 1665, 1337, 1337, 1673, 2789,
  /*   697 */ 1324, 1337, 4135, 1681, 1693, 1337, 1337, 1337, 1337, 3120, 1337, 4168, 1701, 1713, 1337, 1337, 1721,
  /*   714 */ 2817, 3211, 1337, 4185, 1729, 1741, 1337, 1337, 1749, 2829, 3246, 1337, 1571, 1757, 1769, 1337, 1337,
  /*   731 */ 1777, 2857, 3610, 1337, 1594, 1785, 1797, 1337, 1337, 1805, 2869, 1813, 1337, 1617, 1825, 1837, 1337,
  /*   748 */ 1337, 1845, 2897, 1853, 1337, 1629, 1865, 1877, 1337, 1337, 1885, 2909, 1893, 1337, 3724, 1905, 1917,
  /*   765 */ 1337, 1337, 1925, 2937, 1933, 1337, 1657, 1945, 1957, 1337, 1337, 1965, 2957, 1973, 1337, 1328, 1985,
  /*   782 */ 1997, 1337, 1337, 2005, 2969, 2013, 1337, 1685, 2025, 2037, 1337, 1337, 2045, 2997, 2053, 1337, 3124,
  /*   799 */ 2065, 2077, 1337, 1337, 2085, 3009, 2093, 1337, 1705, 2105, 2117, 1337, 1337, 2125, 3037, 2133, 1337,
  /*   816 */ 3215, 2145, 2157, 1337, 1337, 2165, 3049, 2173, 1337, 1733, 2185, 2197, 1337, 1337, 2205, 3077, 2213,
  /*   833 */ 1337, 3250, 2225, 2237, 1337, 1337, 2245, 3089, 2253, 1337, 1761, 2265, 2277, 1337, 1337, 2285, 3136,
  /*   850 */ 2293, 1337, 3614, 2305, 2317, 1337, 1337, 2325, 3148, 2333, 1337, 1789, 2345, 2357, 1337, 1337, 2365,
  /*   867 */ 3176, 2373, 1337, 1817, 2385, 2397, 1337, 1337, 2405, 3188, 2413, 1337, 1829, 2425, 2437, 1337, 1337,
  /*   884 */ 2445, 3262, 2453, 1337, 1857, 2465, 2477, 1337, 1337, 2485, 3282, 2493, 1337, 1869, 2505, 2517, 1337,
  /*   901 */ 1337, 2525, 3294, 2533, 1337, 1897, 2545, 2557, 1337, 1337, 2565, 3322, 2573, 1337, 1909, 2585, 2597,
  /*   918 */ 1337, 1337, 2605, 3334, 2613, 1337, 1937, 2625, 2637, 1337, 1337, 2645, 3362, 2653, 1337, 1949, 2665,
  /*   935 */ 2677, 1337, 1337, 2685, 3374, 2693, 1337, 1977, 2705, 2717, 1337, 1337, 2725, 3402, 2733, 1337, 1989,
  /*   952 */ 2745, 2757, 1337, 1337, 2765, 3414, 2773, 1337, 2017, 2785, 2797, 1337, 1337, 2805, 3442, 2813, 1337,
  /*   969 */ 2029, 2825, 2837, 1337, 1337, 2845, 3454, 2853, 1337, 2057, 2865, 2877, 1337, 1337, 2885, 3482, 2893,
  /*   986 */ 1337, 2069, 2905, 2917, 1337, 1337, 2925, 3494, 2933, 1337, 1337, 1337, 1386, 1337, 1337, 2945, 3522,
  /*  1003 */ 2953, 1337, 2097, 2965, 2977, 1337, 1337, 2985, 3567, 2993, 1337, 2109, 3005, 3017, 1337, 1337, 3025,
  /*  1020 */ 3579, 3033, 1337, 2137, 3045, 3057, 1337, 1337, 3065, 3626, 3073, 1337, 2149, 3085, 3097, 1337, 1337,
  /*  1037 */ 3105, 3113, 3132, 1337, 2177, 3144, 3156, 1337, 1337, 3164, 3638, 3172, 1337, 2189, 3184, 3196, 1337,
  /*  1054 */ 1337, 1337, 1337, 1337, 1337, 2217, 3204, 3223, 1337, 1337, 3231, 3239, 3258, 1337, 1337, 1337, 1309,
  /*  1071 */ 1337, 1337, 3270, 3666, 3278, 1337, 2229, 3290, 3302, 1337, 1337, 3310, 3678, 3318, 1337, 2257, 3330,
  /*  1088 */ 3342, 1337, 1337, 3350, 3706, 3358, 1337, 2269, 3370, 3382, 1337, 1337, 3390, 3752, 3398, 1337, 2297,
  /*  1105 */ 3410, 3422, 1337, 1337, 3430, 3764, 3438, 1337, 2309, 3450, 3462, 1337, 1337, 3470, 3792, 3478, 1337,
  /*  1122 */ 2337, 3490, 3502, 1337, 1337, 3510, 3804, 3518, 1337, 2349, 3530, 3547, 1337, 1337, 3555, 3832, 3563,
  /*  1139 */ 1337, 2377, 3575, 3587, 1337, 1337, 3595, 3603, 3622, 1337, 2389, 3634, 3646, 1337, 1337, 3654, 3844,
  /*  1156 */ 3662, 1337, 2417, 3674, 3686, 1337, 1337, 3694, 3872, 3702, 1337, 2429, 3714, 3732, 1337, 1337, 3740,
  /*  1173 */ 3884, 3748, 1337, 2457, 3760, 3772, 1337, 1337, 3780, 3912, 3788, 1337, 2469, 3800, 3812, 1337, 1337,
  /*  1190 */ 3820, 3958, 3828, 1337, 2497, 3840, 3852, 1337, 1337, 3860, 3970, 3868, 1337, 2509, 3880, 3892, 1337,
  /*  1207 */ 1337, 3900, 3998, 3908, 1337, 2537, 3920, 3938, 1337, 1337, 3946, 4010, 3954, 1337, 2549, 3966, 3978,
  /*  1224 */ 1337, 1337, 3986, 4038, 3994, 1337, 2577, 4006, 4018, 1337, 1337, 4026, 4050, 4034, 1337, 2617, 4046,
  /*  1241 */ 4058, 1337, 1337, 4066, 4078, 4074, 1337, 2629, 4086, 4098, 1337, 1337, 4106, 4090, 4114, 1337, 2657,
  /*  1258 */ 4126, 4143, 1337, 1337, 4151, 4118, 4159, 1337, 2669, 4176, 4193, 1337, 1337, 4201, 2749, 4209, 1337,
  /*  1275 */ 1337, 4226, 4243, 4403, 4402, 4422, 4402, 4402, 4402, 4402, 4402, 4402, 4402, 8563, 4402, 9273, 5266,
  /*  1292 */ 4251, 4259, 4267, 4275, 4283, 4291, 4299, 4307, 4315, 4323, 4331, 4339, 4347, 4355, 4363, 4371, 4379,
  /*  1309 */ 4402, 4402, 4402, 4402, 4402, 4402, 4402, 9042, 4402, 4430, 4402, 4402, 4402, 4402, 6879, 4402, 4402,
  /*  1326 */ 4402, 7596, 4402, 4402, 4402, 4402, 4402, 4402, 5963, 4402, 4441, 4402, 4402, 4402, 4402, 4402, 4402,
  /*  1343 */ 4402, 4402, 7320, 4402, 4402, 7915, 4402, 4402, 4402, 4402, 4452, 4402, 4402, 4402, 7835, 4402, 4402,
  /*  1360 */ 4402, 4402, 4402, 4402, 4402, 9578, 4402, 9527, 4462, 4470, 4478, 4486, 4494, 4502, 4510, 4518, 4526,
  /*  1377 */ 4534, 4542, 4550, 4558, 4566, 4574, 4582, 4590, 4598, 4402, 4402, 4402, 4402, 4402, 4402, 4402, 9645,
  /*  1394 */ 4402, 9313, 5287, 4609, 4617, 4625, 4633, 4641, 4649, 4657, 4665, 4673, 4681, 4689, 4697, 4705, 4713,
  /*  1411 */ 4721, 4729, 4737, 4402, 4402, 4402, 4402, 4402, 4402, 4402, 9650, 4765, 4773, 4781, 4789, 4797, 4805,
  /*  1428 */ 4813, 4821, 4829, 4837, 4845, 4853, 4861, 4869, 4877, 4885, 4922, 4930, 4938, 4946, 4954, 4962, 4970,
  /*  1445 */ 4978, 4986, 4994, 5002, 5010, 5018, 5026, 5034, 5042, 4402, 4402, 4402, 9677, 4402, 4402, 4402, 4402,
  /*  1462 */ 4402, 4402, 5304, 4402, 4402, 4402, 4402, 8767, 4402, 4402, 4402, 4402, 4402, 4402, 5325, 4402, 4402,
  /*  1479 */ 5064, 4402, 4402, 4402, 4402, 4402, 4402, 4402, 7425, 4402, 5075, 4402, 4402, 4402, 4402, 4402, 4402,
  /*  1496 */ 4402, 7491, 4402, 5086, 4402, 4402, 4402, 4402, 4402, 4402, 4402, 7526, 4402, 5109, 5117, 5125, 5133,
  /*  1513 */ 5141, 5149, 5157, 5165, 5173, 5181, 5189, 5197, 5205, 5213, 5221, 5229, 5237, 5245, 5253, 4402, 4402,
  /*  1530 */ 4402, 4402, 4402, 4402, 5393, 4402, 4402, 5265, 4402, 4402, 4402, 4402, 4402, 4402, 4402, 8265, 4402,
  /*  1547 */ 4402, 5274, 4402, 5286, 5295, 4402, 4888, 6819, 7285, 4402, 4402, 5313, 4402, 4402, 4402, 4390, 4401,
  /*  1564 */ 4411, 5296, 4421, 8387, 4402, 5045, 8643, 4402, 4402, 4402, 4402, 4402, 4402, 5603, 4402, 4402, 4402,
  /*  1581 */ 6849, 4402, 4402, 4402, 4402, 4402, 4402, 4402, 8603, 4402, 4402, 4402, 9605, 4402, 4402, 4402, 4402,
  /*  1598 */ 4402, 4402, 5663, 4402, 4402, 4402, 5323, 4402, 4402, 4402, 4402, 4402, 4402, 4402, 8847, 4402, 4402,
  /*  1615 */ 4402, 8727, 4402, 4402, 4402, 4402, 4402, 4402, 5723, 4402, 5345, 5354, 4402, 5056, 4402, 4402, 4402,
  /*  1632 */ 4402, 4402, 4402, 5783, 4402, 5305, 4402, 5346, 4402, 4402, 4402, 4402, 8807, 4402, 4402, 5363, 4402,
  /*  1649 */ 5375, 5384, 4402, 5067, 5405, 5414, 4402, 5078, 4402, 4402, 4402, 4402, 4402, 4402, 5903, 4402, 5385,
  /*  1666 */ 4402, 5406, 4402, 4402, 4402, 4402, 9749, 4402, 4402, 5423, 4402, 5435, 5444, 4402, 5089, 5465, 5474,
  /*  1683 */ 4402, 9726, 4402, 4402, 4402, 4402, 4402, 4402, 6023, 4402, 5445, 4402, 5466, 4402, 4402, 4402, 4402,
  /*  1700 */ 7613, 5495, 5504, 4402, 4741, 4402, 4402, 4402, 4402, 4402, 4402, 6143, 4402, 5475, 4402, 5496, 4402,
  /*  1717 */ 4402, 4402, 4402, 9794, 4402, 4402, 5513, 4402, 5525, 5534, 4402, 9582, 5555, 5564, 4402, 7359, 4402,
  /*  1734 */ 4402, 4402, 4402, 4402, 4402, 6263, 4402, 5535, 4402, 5556, 4402, 4402, 4402, 4402, 8887, 4402, 4402,
  /*  1751 */ 5573, 4402, 5585, 5594, 4402, 7394, 5615, 5624, 8422, 9654, 4402, 4402, 4402, 4402, 4402, 4402, 6383,
  /*  1768 */ 4402, 5595, 4402, 5616, 4402, 4402, 4402, 4402, 9821, 4402, 4402, 5633, 4402, 5645, 5654, 4402, 9681,
  /*  1785 */ 5675, 5684, 6909, 7495, 4402, 4402, 4402, 4402, 4402, 4402, 6503, 4402, 5655, 4402, 5676, 4402, 4402,
  /*  1802 */ 4402, 4402, 9866, 4402, 4402, 5693, 4402, 5705, 5714, 4402, 8771, 4402, 4402, 4402, 8927, 4402, 4402,
  /*  1819 */ 4402, 4402, 4402, 4402, 6563, 4402, 5735, 5744, 4402, 7530, 4402, 4402, 4402, 4402, 4402, 4402, 6635,
  /*  1836 */ 4402, 5715, 4402, 5736, 4402, 4402, 4402, 4402, 7778, 4402, 4402, 5753, 4402, 5765, 5774, 4402, 8851,
  /*  1853 */ 4402, 4402, 4402, 9893, 4402, 4402, 4402, 4402, 4402, 4402, 6695, 4402, 5795, 5804, 4402, 5101, 4402,
  /*  1870 */ 4402, 4402, 4402, 4402, 4402, 6755, 4402, 5775, 4402, 5796, 4402, 4402, 4402, 4402, 7813, 4402, 4402,
  /*  1887 */ 5813, 4402, 5825, 5834, 4402, 5257, 4402, 4402, 4402, 8967, 4402, 4402, 4402, 4402, 4402, 4402, 6815,
  /*  1904 */ 4402, 5855, 5864, 4402, 8567, 4402, 4402, 4402, 4402, 4402, 4402, 6875, 4402, 5835, 4402, 5856, 4402,
  /*  1921 */ 4402, 4402, 4402, 7848, 4402, 4402, 5873, 4402, 5885, 5894, 4402, 5278, 4402, 4402, 4402, 9938, 4402,
  /*  1938 */ 4402, 4402, 4402, 4402, 4402, 6935, 4402, 5915, 5924, 4402, 7184, 4402, 4402, 4402, 4402, 4402, 4402,
  /*  1955 */ 6995, 4402, 5895, 4402, 5916, 4402, 4402, 4402, 4402, 7883, 4402, 4402, 5933, 4402, 5945, 5954, 4402,
  /*  1972 */ 9504, 4402, 4402, 4402, 9007, 4402, 4402, 4402, 4402, 4402, 4402, 7055, 4402, 5975, 5984, 6939, 7219,
  /*  1989 */ 4402, 4402, 4402, 4402, 4402, 4402, 7115, 4402, 5955, 4402, 5976, 4402, 4402, 4402, 4402, 7928, 4402,
  /*  2006 */ 4402, 5993, 4402, 6005, 6014, 8457, 8607, 4402, 4402, 4402, 9965, 4402, 4402, 4402, 4402, 4402, 4402,
  /*  2023 */ 7175, 4402, 6035, 6044, 4402, 7254, 4402, 4402, 4402, 4402, 4402, 4402, 7245, 4402, 6015, 4402, 6036,
  /*  2040 */ 4402, 4402, 4402, 4402, 9047, 4402, 4402, 6053, 4402, 6065, 6074, 4402, 7289, 4402, 4402, 4402, 7963,
  /*  2057 */ 4402, 4402, 4402, 4402, 4402, 4402, 7315, 4402, 6095, 6104, 6969, 8647, 4402, 4402, 4402, 4402, 4402,
  /*  2074 */ 4402, 7385, 4402, 6075, 4402, 6096, 4402, 4402, 4402, 4402, 10010, 4402, 4402, 6113, 4402, 6125, 6134,
  /*  2091 */ 4402, 7324, 4402, 4402, 4402, 7998, 4402, 4402, 4402, 4402, 4402, 4402, 7486, 4402, 6155, 6164, 9375,
  /*  2108 */ 9609, 4402, 4402, 4402, 4402, 4402, 4402, 7556, 4402, 6135, 4402, 6156, 4402, 4402, 4402, 4402, 9087,
  /*  2125 */ 4402, 4402, 6173, 4402, 6185, 6194, 4402, 7429, 4402, 4402, 4402, 8033, 4402, 4402, 4402, 4402, 4402,
  /*  2142 */ 4402, 7633, 4402, 6215, 6224, 6999, 8731, 4402, 4402, 4402, 4402, 4402, 4402, 7703, 4402, 6195, 4402,
  /*  2159 */ 6216, 4402, 4402, 4402, 4402, 10046, 4402, 4402, 6233, 4402, 6245, 6254, 4402, 5337, 4402, 4402, 4402,
  /*  2176 */ 8068, 4402, 4402, 4402, 4402, 4402, 4402, 7773, 4402, 6275, 6284, 4402, 8811, 4402, 4402, 4402, 4402,
  /*  2193 */ 4402, 4402, 7843, 4402, 6255, 4402, 6276, 4402, 4402, 4402, 4402, 9127, 4402, 4402, 6293, 4402, 6305,
  /*  2210 */ 6314, 4402, 5367, 4402, 4402, 4402, 8103, 4402, 4402, 4402, 4402, 4402, 4402, 7878, 4402, 6335, 6344,
  /*  2227 */ 4402, 7565, 4402, 4402, 4402, 4402, 4402, 4402, 7993, 4402, 6315, 4402, 6336, 4402, 4402, 4402, 4402,
  /*  2244 */ 10109, 4402, 4402, 6353, 4402, 6365, 6374, 4402, 5397, 4402, 4402, 4402, 8138, 4402, 4402, 4402, 4402,
  /*  2261 */ 4402, 4402, 8063, 4402, 6395, 6404, 4402, 9753, 4402, 4402, 4402, 4402, 4402, 4402, 8133, 4402, 6375,
  /*  2278 */ 4402, 6396, 4402, 4402, 4402, 4402, 10136, 4402, 4402, 6413, 4402, 6425, 6434, 4402, 5427, 4402, 4402,
  /*  2295 */ 4402, 8173, 4402, 4402, 4402, 4402, 4402, 4402, 8203, 4402, 6455, 6464, 4402, 7600, 4402, 4402, 4402,
  /*  2312 */ 4402, 4402, 4402, 8273, 4402, 6435, 4402, 6456, 4402, 4402, 4402, 4402, 9167, 4402, 4402, 6473, 4402,
  /*  2329 */ 6485, 6494, 4402, 5457, 4402, 4402, 4402, 8208, 4402, 4402, 4402, 4402, 4402, 4402, 8343, 4402, 6515,
  /*  2346 */ 6524, 4402, 7617, 4402, 4402, 4402, 4402, 4402, 4402, 8413, 4402, 6495, 4402, 6516, 4402, 4402, 4402,
  /*  2363 */ 4402, 10163, 4402, 4402, 6533, 4402, 6545, 6554, 4402, 7642, 4402, 4402, 4402, 8243, 4402, 4402, 4402,
  /*  2380 */ 4402, 4402, 4402, 8483, 4402, 6575, 6584, 4402, 5487, 4402, 4402, 4402, 4402, 4402, 4402, 8553, 4402,
  /*  2397 */ 6555, 4402, 6576, 4402, 4402, 4402, 4402, 6593, 4402, 4402, 6605, 6585, 6617, 6626, 4402, 9798, 4402,
  /*  2414 */ 4402, 4402, 10074, 4402, 4402, 4402, 4402, 4402, 4402, 8633, 4402, 6647, 6656, 4402, 5517, 4402, 4402,
  /*  2431 */ 4402, 4402, 4402, 4402, 8717, 4402, 6648, 4402, 6657, 4402, 4402, 4402, 4402, 8278, 4402, 4402, 6665,
  /*  2448 */ 4402, 6677, 6686, 4402, 7677, 4402, 4402, 4402, 9207, 4402, 4402, 4402, 4402, 4402, 4402, 8797, 4402,
  /*  2465 */ 6707, 6716, 4402, 5547, 4402, 4402, 4402, 4402, 4402, 4402, 8877, 4402, 6708, 4402, 6717, 4402, 4402,
  /*  2482 */ 4402, 4402, 8313, 4402, 4402, 6725, 4402, 6737, 6746, 4402, 8891, 4402, 4402, 4402, 9247, 4402, 4402,
  /*  2499 */ 4402, 4402, 4402, 4402, 8957, 4402, 6767, 6776, 4402, 5577, 4402, 4402, 4402, 4402, 4402, 4402, 9037,
  /*  2516 */ 4402, 6768, 4402, 6777, 4402, 4402, 4402, 4402, 8348, 4402, 4402, 6785, 4402, 6797, 6806, 4402, 7712,
  /*  2533 */ 4402, 4402, 4402, 9269, 4402, 4402, 4402, 4402, 4402, 4402, 9117, 4402, 6827, 6836, 4402, 5607, 4402,
  /*  2550 */ 4402, 4402, 4402, 4402, 4402, 9197, 4402, 6828, 4402, 6837, 4402, 4402, 4402, 4402, 8383, 4402, 4402,
  /*  2567 */ 6845, 4402, 6857, 6866, 4402, 9825, 4402, 4402, 4402, 9309, 4402, 4402, 4402, 4402, 4402, 4402, 9321,
  /*  2584 */ 4402, 6887, 6896, 4402, 5637, 4402, 4402, 4402, 4402, 4402, 4402, 9335, 4402, 6888, 4402, 6897, 4402,
  /*  2601 */ 4402, 4402, 4402, 8418, 4402, 4402, 6905, 4402, 6917, 6926, 8492, 7747, 4402, 4402, 4402, 9331, 4402,
  /*  2618 */ 4402, 4402, 4402, 4402, 4402, 9445, 4402, 6947, 6956, 7029, 5667, 4402, 4402, 4402, 4402, 4402, 4402,
  /*  2635 */ 9590, 4402, 6948, 4402, 6957, 4402, 4402, 4402, 4402, 8453, 4402, 4402, 6965, 4402, 6977, 6986, 4402,
  /*  2652 */ 9870, 4402, 4402, 4402, 9371, 4402, 4402, 4402, 4402, 4402, 4402, 9734, 4402, 7007, 7016, 4402, 5697,
  /*  2669 */ 4402, 4402, 4402, 4402, 4402, 4402, 9878, 4402, 7008, 4402, 7017, 4402, 4402, 4402, 4402, 8488, 4402,
  /*  2686 */ 4402, 7025, 4402, 7037, 7046, 4402, 8931, 4402, 4402, 4402, 9393, 4402, 4402, 4402, 4402, 4402, 5053,
  /*  2703 */ 4402, 4402, 7067, 7076, 4402, 5727, 4402, 4402, 4402, 4402, 4402, 7460, 4906, 4914, 7068, 4402, 7077,
  /*  2720 */ 4402, 4402, 4402, 4402, 8523, 4402, 4402, 7085, 4402, 7097, 7106, 4402, 7782, 4402, 4402, 4402, 9433,
  /*  2737 */ 4402, 4402, 4402, 4402, 4402, 8691, 4749, 4757, 7127, 7136, 4402, 5757, 4402, 4402, 4402, 4402, 4454,
  /*  2754 */ 4402, 4898, 4402, 7128, 4402, 7137, 4402, 4402, 4402, 4402, 9455, 4402, 4402, 7145, 4402, 7157, 7166,
  /*  2771 */ 4402, 9897, 4402, 4402, 4402, 8558, 4402, 4402, 4402, 4402, 5355, 4402, 5376, 4402, 7192, 7201, 9397,
  /*  2788 */ 5787, 4402, 4402, 4402, 4402, 5415, 4402, 5436, 4402, 7193, 4402, 7202, 4402, 4402, 4402, 4402, 9495,
  /*  2805 */ 4402, 4402, 7210, 4402, 7227, 7236, 4402, 7817, 4402, 4402, 4402, 8598, 4402, 4402, 4402, 4402, 5505,
  /*  2822 */ 4402, 5526, 4402, 7262, 7271, 4402, 5817, 4402, 4402, 4402, 4402, 5565, 4402, 5586, 4402, 7263, 4402,
  /*  2839 */ 7272, 4402, 4402, 4402, 4402, 9522, 4402, 4402, 7280, 4402, 7297, 7306, 7059, 8971, 4402, 4402, 4402,
  /*  2856 */ 8638, 4402, 4402, 4402, 4402, 5625, 4402, 5646, 4402, 7332, 7341, 4402, 5847, 4402, 4402, 4402, 4402,
  /*  2873 */ 5685, 4402, 5706, 4402, 7333, 4402, 7342, 4402, 4402, 4402, 4402, 9573, 4402, 4402, 7350, 4402, 7367,
  /*  2890 */ 7376, 4402, 7852, 4402, 4402, 4402, 8686, 4402, 4402, 4402, 4402, 5745, 4402, 5766, 4402, 7402, 7411,
  /*  2907 */ 4402, 5877, 4402, 4402, 4402, 4402, 5805, 4402, 5826, 4402, 7403, 4402, 7412, 4402, 4402, 4402, 4402,
  /*  2924 */ 9600, 4402, 4402, 7420, 4402, 7437, 7446, 4402, 9942, 4402, 4402, 4402, 8722, 4402, 4402, 4402, 4402,
  /*  2941 */ 5865, 4402, 5886, 4402, 4402, 4402, 7455, 4402, 7468, 7477, 4402, 5907, 4402, 4402, 4402, 9672, 4402,
  /*  2958 */ 4402, 4402, 4402, 5925, 4402, 5946, 4402, 7503, 7512, 4402, 7887, 4402, 4402, 4402, 4402, 5985, 4402,
  /*  2975 */ 6006, 4402, 7504, 4402, 7513, 4402, 4402, 4402, 8762, 9717, 4402, 4402, 7521, 4402, 7538, 7547, 4402,
  /*  2992 */ 5937, 4402, 4402, 4402, 8802, 4402, 4402, 4402, 4402, 6045, 4402, 6066, 4402, 7573, 7582, 4402, 9011,
  /*  3009 */ 4402, 4402, 4402, 4402, 6105, 4402, 6126, 4402, 7583, 4402, 7651, 4402, 4402, 4402, 4402, 9744, 4402,
  /*  3026 */ 4402, 7591, 4402, 7608, 7625, 4402, 5967, 4402, 4402, 4402, 8842, 4402, 4402, 4402, 4402, 6165, 4402,
  /*  3043 */ 6186, 4402, 7650, 7659, 4402, 7932, 4402, 4402, 4402, 4402, 6225, 4402, 6246, 4402, 7695, 4402, 7721,
  /*  3060 */ 4402, 4402, 4402, 4402, 9789, 4402, 4402, 7668, 4402, 7685, 7694, 4402, 5997, 4402, 4402, 4402, 8882,
  /*  3077 */ 4402, 4402, 4402, 4402, 6285, 4402, 6306, 4402, 7720, 7729, 4402, 9969, 4402, 4402, 4402, 4402, 6345,
  /*  3094 */ 4402, 6366, 4402, 7765, 4402, 7791, 4402, 4402, 4402, 4402, 9816, 4402, 4402, 7738, 4402, 7755, 7764,
  /*  3111 */ 4402, 6027, 4402, 4402, 9861, 4402, 7800, 4402, 7826, 4402, 4402, 4402, 7638, 4402, 4402, 4402, 4402,
  /*  3128 */ 4402, 4402, 6083, 4402, 4402, 4402, 4402, 8922, 4402, 4402, 4402, 4402, 6405, 4402, 6426, 4402, 7790,
  /*  3145 */ 7799, 8527, 9051, 4402, 4402, 4402, 4402, 6465, 4402, 6486, 4402, 9555, 4402, 7861, 4402, 4402, 4402,
  /*  3162 */ 4402, 9888, 4402, 4402, 7808, 4402, 7825, 7834, 4402, 6057, 4402, 4402, 4402, 8962, 4402, 4402, 4402,
  /*  3179 */ 4402, 6525, 4402, 6546, 4402, 7860, 7869, 4402, 7967, 4402, 4402, 4402, 4402, 6618, 4402, 6627, 4402,
  /*  3196 */ 7905, 4402, 7941, 4402, 4402, 4402, 4402, 9933, 7895, 7904, 4382, 6087, 4402, 4402, 4393, 4402, 4402,
  /*  3213 */ 4402, 7673, 4402, 4402, 4402, 4402, 4402, 4402, 6203, 4402, 7950, 4402, 7976, 7913, 4402, 4402, 4402,
  /*  3230 */ 9002, 4402, 4402, 7923, 4402, 7940, 7949, 4433, 10014, 4402, 4402, 4444, 4402, 7985, 4402, 8011, 4402,
  /*  3247 */ 4402, 4402, 7708, 4402, 4402, 4402, 4402, 4402, 4402, 6323, 4402, 4402, 4402, 4402, 9960, 4402, 4402,
  /*  3264 */ 4402, 4402, 6678, 4402, 6687, 4402, 4402, 4402, 7958, 4402, 7975, 7984, 4402, 6117, 4402, 4402, 4402,
  /*  3281 */ 10005, 4402, 4402, 4402, 4402, 6738, 4402, 6747, 4402, 8010, 8019, 7089, 8002, 4402, 4402, 4402, 4402,
  /*  3298 */ 6798, 4402, 6807, 4402, 8055, 4402, 8081, 4402, 4402, 4402, 4402, 9082, 4402, 4402, 8028, 4402, 8045,
  /*  3315 */ 8054, 4402, 6147, 4402, 4402, 4402, 10041, 4402, 4402, 4402, 4402, 6858, 4402, 6867, 4402, 8080, 8089,
  /*  3332 */ 4402, 9091, 4402, 4402, 4402, 4402, 6918, 4402, 6927, 4402, 8125, 4402, 8151, 4402, 4402, 4402, 4402,
  /*  3349 */ 9122, 4402, 4402, 8098, 4402, 8115, 8124, 4402, 6177, 4402, 4402, 4402, 10104, 4402, 4402, 4402, 4402,
  /*  3366 */ 6978, 4402, 6987, 4402, 8150, 8159, 9437, 8037, 4402, 4402, 4402, 4402, 7038, 4402, 7047, 4402, 8195,
  /*  3383 */ 4402, 8221, 4402, 4402, 4402, 4402, 10131, 4402, 4402, 8168, 4402, 8185, 8194, 4402, 6207, 4402, 4402,
  /*  3400 */ 4402, 9162, 4402, 4402, 4402, 4402, 7098, 4402, 7107, 4402, 8220, 8229, 4402, 10050, 4402, 4402, 4402,
  /*  3417 */ 4402, 7158, 4402, 7167, 4402, 8291, 4402, 8300, 4402, 4402, 4402, 4402, 10158, 4402, 4402, 8238, 4402,
  /*  3434 */ 8255, 8264, 4402, 6237, 4402, 4402, 4402, 10069, 4402, 4402, 4402, 4402, 7228, 4402, 7237, 4402, 8290,
  /*  3451 */ 8299, 4402, 8072, 4402, 4402, 4402, 4402, 7298, 4402, 7307, 4402, 8361, 4402, 8370, 4402, 4402, 4402,
  /*  3468 */ 4402, 9202, 4402, 4402, 8308, 4402, 8325, 8334, 4402, 6267, 4402, 4402, 4402, 9242, 4402, 4402, 4402,
  /*  3485 */ 4402, 7368, 4402, 7377, 4402, 8360, 8369, 4402, 9131, 4402, 4402, 4402, 4402, 7438, 4402, 7447, 4402,
  /*  3502 */ 8431, 4402, 8440, 4402, 4402, 4402, 4402, 9264, 4402, 4402, 8378, 4402, 8395, 8404, 4402, 6297, 4402,
  /*  3519 */ 4402, 4402, 9304, 4402, 4402, 4402, 4402, 7469, 4402, 7478, 4402, 8430, 8439, 4402, 8107, 4601, 4402,
  /*  3536 */ 4402, 4402, 5097, 4402, 4402, 4402, 4402, 4402, 4402, 5333, 4402, 8501, 4402, 8510, 4402, 4402, 4402,
  /*  3553 */ 4402, 9326, 4402, 4402, 8448, 4402, 8465, 8474, 7119, 6327, 4402, 4402, 4402, 9366, 4402, 4402, 4402,
  /*  3570 */ 4402, 7539, 4402, 7548, 4402, 8500, 8509, 4402, 10113, 4402, 4402, 4402, 4402, 7660, 4402, 7686, 4402,
  /*  3587 */ 8576, 4402, 8585, 4402, 4402, 4402, 4402, 9388, 4402, 4402, 8518, 4402, 8535, 8544, 4402, 6357, 4402,
  /*  3604 */ 4402, 9428, 4402, 8616, 4402, 8625, 4402, 4402, 4402, 7743, 4402, 4402, 4402, 4402, 4402, 4402, 6443,
  /*  3621 */ 4402, 4402, 4402, 4402, 9450, 4402, 4402, 4402, 4402, 7730, 4402, 7756, 4402, 8575, 8584, 4402, 8142,
  /*  3638 */ 4402, 4402, 4402, 4402, 7870, 4402, 7896, 4402, 8656, 4402, 8665, 4402, 4402, 4402, 4402, 9490, 4402,
  /*  3655 */ 4402, 8593, 4402, 8615, 8624, 4402, 6387, 4402, 4402, 4402, 9517, 4402, 4402, 4402, 4402, 8020, 4402,
  /*  3672 */ 8046, 4402, 8655, 8664, 4402, 10140, 4402, 4402, 4402, 4402, 8090, 4402, 8116, 4402, 8673, 4402, 8740,
  /*  3689 */ 4402, 4402, 4402, 4402, 9568, 4402, 4402, 8681, 4402, 8699, 8708, 4402, 6417, 4402, 4402, 4402, 9595,
  /*  3706 */ 4402, 4402, 4402, 4402, 8160, 4402, 8186, 4402, 8739, 8748, 4402, 8177, 4402, 9640, 4402, 4402, 4402,
  /*  3723 */ 7561, 4402, 4402, 4402, 4402, 4402, 4402, 5843, 4402, 8789, 4402, 8820, 4402, 4402, 4402, 4402, 9667,
  /*  3740 */ 4402, 4402, 8757, 4402, 8779, 8788, 4402, 6447, 4402, 4402, 4402, 9712, 4402, 4402, 4402, 4402, 8230,
  /*  3757 */ 4402, 8256, 4402, 8819, 8828, 4402, 9171, 4402, 4402, 4402, 4402, 8326, 4402, 8335, 4402, 8869, 4402,
  /*  3774 */ 8900, 4402, 4402, 4402, 4402, 9739, 4402, 4402, 8837, 8909, 8859, 8868, 4402, 6477, 4402, 4402, 4402,
  /*  3791 */ 9784, 4402, 4402, 4402, 4402, 8396, 4402, 8405, 4402, 8899, 8908, 4402, 8212, 4402, 4402, 4402, 4402,
  /*  3808 */ 8466, 4402, 8475, 4402, 8980, 4402, 8989, 4402, 4402, 4402, 9811, 9856, 4402, 4402, 8917, 4402, 8939,
  /*  3825 */ 8948, 4402, 6507, 4402, 4402, 4402, 9883, 4402, 4402, 4402, 4402, 8536, 4402, 8545, 4402, 8979, 8988,
  /*  3842 */ 4402, 10167, 4402, 4402, 4402, 4402, 8700, 4402, 8709, 4402, 9060, 4402, 9069, 4402, 4402, 4402, 4402,
  /*  3859 */ 9928, 4402, 4402, 8997, 4402, 9019, 9028, 4402, 6537, 4402, 4402, 4402, 9955, 4402, 4402, 4402, 4402,
  /*  3876 */ 8749, 4402, 8780, 4402, 9059, 9068, 4402, 8247, 4402, 4402, 4402, 4402, 8829, 4402, 8860, 4402, 9140,
  /*  3893 */ 4402, 9149, 4402, 4402, 4402, 4402, 10000, 4402, 4402, 9077, 4402, 9099, 9108, 4402, 6567, 4402, 4402,
  /*  3910 */ 4402, 10036, 4402, 4402, 4402, 4402, 8940, 4402, 8949, 4402, 9139, 9148, 4402, 6597, 4402, 10099, 4402,
  /*  3927 */ 4402, 4402, 7574, 4402, 4402, 4402, 4402, 4402, 4402, 4402, 9500, 9220, 4402, 9229, 4402, 4402, 4402,
  /*  3944 */ 4402, 10126, 4402, 4402, 9157, 4402, 9179, 9188, 4402, 6609, 4402, 4402, 10153, 10064, 4402, 4402, 4402,
  /*  3961 */ 4402, 9020, 4402, 9029, 4402, 9219, 9228, 4402, 10078, 4402, 4402, 4402, 4402, 9100, 4402, 9109, 4402,
  /*  3978 */ 9344, 4402, 9353, 4402, 4402, 4402, 4402, 9237, 4402, 4402, 9259, 4402, 9281, 9290, 4402, 6639, 4402,
  /*  3995 */ 4402, 4402, 9299, 4402, 4402, 4402, 4402, 9180, 4402, 9189, 4402, 9343, 9352, 4402, 8282, 4402, 4402,
  /*  4012 */ 4402, 4402, 9282, 4402, 9291, 4402, 9468, 4402, 9477, 4402, 4402, 4402, 4402, 9361, 4402, 4402, 9383,
  /*  4029 */ 4402, 9405, 9414, 9459, 6669, 4402, 4402, 4402, 9423, 4402, 4402, 4402, 4402, 9406, 4402, 9415, 4402,
  /*  4046 */ 9467, 9476, 4402, 9211, 4402, 4402, 4402, 4402, 9536, 4402, 9545, 4402, 9618, 4402, 9627, 4402, 4402,
  /*  4063 */ 4402, 4402, 9485, 4402, 4402, 9512, 4402, 9535, 9544, 4402, 6699, 4402, 4402, 4402, 9563, 4402, 4402,
  /*  4080 */ 4402, 4402, 9690, 4402, 9699, 9553, 9617, 9626, 7149, 8317, 4402, 4402, 4402, 4402, 9834, 4402, 9843,
  /*  4097 */ 4402, 9762, 4402, 9771, 4402, 4402, 4402, 4402, 9635, 4402, 4402, 9662, 4402, 9689, 9698, 4402, 6729,
  /*  4114 */ 4402, 4402, 4402, 9707, 4402, 4402, 4402, 4402, 9978, 4402, 9987, 4402, 9761, 9770, 4402, 9251, 4402,
  /*  4131 */ 4402, 4402, 4402, 7180, 4402, 4402, 4402, 4402, 4402, 4402, 5453, 4402, 9906, 4402, 9915, 4402, 4402,
  /*  4148 */ 4402, 4402, 9779, 4402, 4402, 9806, 4402, 9833, 9842, 4402, 6759, 4402, 4402, 4402, 9851, 4402, 4402,
  /*  4165 */ 4402, 4402, 7215, 4402, 4402, 4402, 4402, 4402, 4402, 5483, 4402, 9905, 9914, 4402, 8352, 4402, 4402,
  /*  4182 */ 4402, 4402, 7250, 4402, 4402, 4402, 4402, 4402, 4402, 5543, 4402, 10023, 4402, 4413, 4402, 4402, 4402,
  /*  4199 */ 4402, 9923, 4402, 4402, 9950, 4402, 9977, 9986, 4402, 6789, 4402, 4402, 4402, 9995, 4402, 4402, 4402,
  /*  4216 */ 4402, 7355, 4402, 4402, 4402, 4402, 4402, 4402, 4402, 9722, 10022, 10031, 4402, 10058, 4402, 4402, 4402,
  /*  4233 */ 4402, 7390, 4402, 4402, 4402, 4402, 4402, 4402, 4896, 4402, 5315, 4402, 10086, 4402, 4402, 10094, 10121,
  /*  4250 */ 10148, 437, 438, 439, 440, 0, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
  /*  4271 */ 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476,
  /*  4292 */ 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497,
  /*  4313 */ 498, 499, 500, 501, 502, 503, 504, 0, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 0, 517,
  /*  4335 */ 518, 0, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537,
  /*  4356 */ 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558,
  /*  4377 */ 559, 560, 561, 562, 563, 0, 0, 0, 0, 0, 0, 1687, 0, 0, 852, 853, 0, 0, 0, 0, 0, 0, 1689, 0, 854, 0, 0, 0,
  /*  4405 */ 0, 0, 0, 0, 0, 296, 0, 855, 0, 0, 0, 0, 0, 0, 0, 2076, 857, 0, 0, 0, 0, 0, 0, 0, 297, 0, 858, 859, 0, 0,
  /*  4435 */ 0, 0, 0, 0, 1699, 0, 0, 0, 863, 0, 0, 0, 0, 0, 0, 1701, 0, 1576, 1577, 0, 0, 0, 0, 0, 0, 0, 2083, 303, 0,
  /*  4464 */ 0, 0, 304, 305, 306, 307, 308, 309, 310, 311, 0, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
  /*  4486 */ 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343,
  /*  4507 */ 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364,
  /*  4528 */ 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 0, 376, 377, 378, 379, 380, 381, 382, 383, 384,
  /*  4549 */ 385, 386, 387, 0, 388, 389, 0, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404,
  /*  4571 */ 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425,
  /*  4592 */ 426, 427, 428, 429, 430, 431, 432, 433, 434, 0, 0, 0, 0, 0, 0, 1818, 0, 575, 576, 577, 578, 579, 580, 581,
  /*  4616 */ 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602,
  /*  4637 */ 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
  /*  4658 */ 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644,
  /*  4679 */ 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 0, 657, 658, 659, 660, 661, 662, 663, 664,
  /*  4700 */ 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
  /*  4721 */ 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 0, 0,
  /*  4743 */ 0, 0, 0, 1052, 0, 0, 713, 0, 0, 0, 714, 715, 716, 717, 718, 719, 720, 721, 0, 722, 723, 724, 725, 726,
  /*  4767 */ 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
  /*  4788 */ 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
  /*  4809 */ 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 0, 786, 787, 788,
  /*  4830 */ 789, 790, 791, 792, 793, 794, 795, 796, 797, 0, 798, 799, 0, 800, 801, 802, 803, 804, 805, 806, 807, 808,
  /*  4852 */ 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
  /*  4873 */ 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 0, 0, 0, 0, 0, 290, 0, 0, 0,
  /*  4897 */ 850, 0, 0, 0, 0, 0, 0, 0, 2084, 869, 0, 0, 0, 870, 871, 872, 873, 874, 875, 876, 877, 0, 878, 879, 880,
  /*  4922 */ 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
  /*  4943 */ 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
  /*  4964 */ 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 0, 942,
  /*  4985 */ 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 0, 954, 955, 0, 956, 957, 958, 959, 960, 961, 962,
  /*  5007 */ 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
  /*  5028 */ 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 0, 0, 0, 0, 0, 569,
  /*  5051 */ 0, 0, 0, 0, 1915, 0, 0, 0, 0, 0, 1010, 0, 0, 0, 0, 1916, 0, 0, 0, 0, 0, 1018, 0, 0, 0, 0, 1942, 0, 0, 0,
  /*  5081 */ 0, 0, 1026, 0, 0, 0, 0, 2069, 0, 0, 0, 0, 0, 1034, 0, 0, 0, 0, 0, 2098, 0, 0, 0, 0, 0, 1134, 0, 0, 0, 0,
  /*  5111 */ 0, 2099, 2100, 2101, 2102, 2103, 2104, 0, 0, 0, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 0, 2113,
  /*  5131 */ 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130,
  /*  5148 */ 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147,
  /*  5165 */ 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164,
  /*  5182 */ 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 0, 2177, 2178, 2179, 2180, 2181,
  /*  5200 */ 2182, 2183, 2184, 2185, 2186, 2187, 2188, 0, 2189, 2190, 0, 2191, 2192, 2193, 2194, 2195, 2196, 2197,
  /*  5218 */ 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214,
  /*  5235 */ 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231,
  /*  5252 */ 2232, 2233, 2234, 2235, 2236, 0, 0, 0, 0, 0, 1142, 0, 0, 284, 0, 0, 0, 0, 0, 0, 0, 436, 0, 0, 286, 287, 0,
  /*  5279 */ 0, 0, 0, 0, 1158, 0, 0, 288, 0, 0, 0, 0, 0, 0, 0, 574, 289, 0, 0, 0, 0, 0, 0, 0, 856, 564, 0, 0, 0, 0, 0,
  /*  5310 */ 0, 0, 1011, 0, 567, 0, 0, 0, 0, 0, 0, 0, 2090, 0, 848, 0, 0, 0, 0, 0, 0, 1574, 0, 0, 0, 1006, 1007, 0, 0,
  /*  5339 */ 0, 0, 0, 1260, 0, 0, 1008, 0, 0, 0, 0, 0, 0, 0, 1012, 1009, 0, 0, 0, 0, 0, 0, 0, 1019, 0, 0, 1014, 1015,
  /*  5367 */ 0, 0, 0, 0, 0, 1276, 0, 0, 1016, 0, 0, 0, 0, 0, 0, 0, 1020, 1017, 0, 0, 0, 0, 0, 0, 0, 1027, 0, 0, 1022,
  /*  5396 */ 1023, 0, 0, 0, 0, 0, 1292, 0, 0, 1024, 0, 0, 0, 0, 0, 0, 0, 1028, 1025, 0, 0, 0, 0, 0, 0, 0, 1035, 0, 0,
  /*  5425 */ 1030, 1031, 0, 0, 0, 0, 0, 1308, 0, 0, 1032, 0, 0, 0, 0, 0, 0, 0, 1036, 1033, 0, 0, 0, 0, 0, 0, 0, 1043,
  /*  5453 */ 0, 0, 1038, 1039, 0, 0, 0, 0, 0, 1324, 0, 0, 1040, 0, 0, 0, 0, 0, 0, 0, 1044, 1041, 0, 0, 0, 0, 0, 0, 0,
  /*  5482 */ 1053, 0, 0, 1048, 1049, 0, 0, 0, 0, 0, 1348, 0, 0, 1050, 0, 0, 0, 0, 0, 0, 0, 1054, 1051, 0, 0, 0, 0, 0,
  /*  5510 */ 0, 0, 1061, 0, 0, 1056, 1057, 0, 0, 0, 0, 0, 1366, 0, 0, 1058, 0, 0, 0, 0, 0, 0, 0, 1062, 1059, 0, 0, 0,
  /*  5538 */ 0, 0, 0, 0, 1069, 0, 0, 1064, 1065, 0, 0, 0, 0, 0, 1382, 0, 0, 1066, 0, 0, 0, 0, 0, 0, 0, 1070, 1067, 0,
  /*  5566 */ 0, 0, 0, 0, 0, 0, 1077, 0, 0, 1072, 1073, 0, 0, 0, 0, 0, 1398, 0, 0, 1074, 0, 0, 0, 0, 0, 0, 0, 1078,
  /*  5594 */ 1075, 0, 0, 0, 0, 0, 0, 0, 1086, 0, 0, 1080, 1081, 0, 0, 0, 0, 0, 1414, 0, 0, 1082, 0, 0, 0, 0, 0, 0, 0,
  /*  5623 */ 1087, 1083, 0, 0, 0, 0, 0, 0, 0, 1094, 0, 0, 1089, 1090, 0, 0, 0, 0, 0, 1430, 0, 0, 1091, 0, 0, 0, 0, 0,
  /*  5651 */ 0, 0, 1095, 1092, 0, 0, 0, 0, 0, 0, 0, 1103, 0, 0, 1097, 1098, 0, 0, 0, 0, 0, 1448, 0, 0, 1099, 0, 0, 0,
  /*  5679 */ 0, 0, 0, 0, 1104, 1100, 0, 0, 0, 0, 0, 0, 0, 1111, 0, 0, 1106, 1107, 0, 0, 0, 0, 0, 1464, 0, 0, 1108, 0,
  /*  5707 */ 0, 0, 0, 0, 0, 0, 1112, 1109, 0, 0, 0, 0, 0, 0, 0, 1119, 0, 0, 1114, 1115, 0, 0, 0, 0, 0, 1480, 0, 0,
  /*  5735 */ 1116, 0, 0, 0, 0, 0, 0, 0, 1120, 1117, 0, 0, 0, 0, 0, 0, 0, 1127, 0, 0, 1122, 1123, 0, 0, 0, 0, 0, 1496,
  /*  5763 */ 0, 0, 1124, 0, 0, 0, 0, 0, 0, 0, 1128, 1125, 0, 0, 0, 0, 0, 0, 0, 1135, 0, 0, 1130, 1131, 0, 0, 0, 0, 0,
  /*  5792 */ 1513, 0, 0, 1132, 0, 0, 0, 0, 0, 0, 0, 1136, 1133, 0, 0, 0, 0, 0, 0, 0, 1143, 0, 0, 1138, 1139, 0, 0, 0,
  /*  5820 */ 0, 0, 1529, 0, 0, 1140, 0, 0, 0, 0, 0, 0, 0, 1144, 1141, 0, 0, 0, 0, 0, 0, 0, 1151, 0, 0, 1146, 1147, 0,
  /*  5848 */ 0, 0, 0, 0, 1546, 0, 0, 1148, 0, 0, 0, 0, 0, 0, 0, 1152, 1149, 0, 0, 0, 0, 0, 0, 0, 1159, 0, 0, 1154,
  /*  5876 */ 1155, 0, 0, 0, 0, 0, 1562, 0, 0, 1156, 0, 0, 0, 0, 0, 0, 0, 1160, 1157, 0, 0, 0, 0, 0, 0, 0, 1168, 0, 0,
  /*  5905 */ 1163, 1164, 0, 0, 0, 0, 0, 1583, 0, 0, 1165, 0, 0, 0, 0, 0, 0, 0, 1169, 1166, 0, 0, 0, 0, 0, 0, 0, 1176,
  /*  5933 */ 0, 0, 1171, 1172, 0, 0, 0, 0, 0, 1600, 0, 0, 1173, 0, 0, 0, 0, 0, 0, 0, 1177, 1174, 0, 0, 0, 0, 0, 0, 0,
  /*  5962 */ 1185, 0, 0, 1179, 1180, 0, 0, 0, 0, 0, 1619, 0, 0, 1181, 0, 0, 0, 0, 0, 0, 0, 1186, 1182, 0, 0, 0, 0, 0,
  /*  5990 */ 0, 0, 1194, 0, 0, 1188, 1189, 0, 0, 0, 0, 0, 1635, 0, 0, 1190, 0, 0, 0, 0, 0, 0, 0, 1195, 1191, 0, 0, 0,
  /*  6018 */ 0, 0, 0, 0, 1202, 0, 0, 1197, 1198, 0, 0, 0, 0, 0, 1651, 0, 0, 1199, 0, 0, 0, 0, 0, 0, 0, 1203, 1200, 0,
  /*  6046 */ 0, 0, 0, 0, 0, 0, 1210, 0, 0, 1205, 1206, 0, 0, 0, 0, 0, 1671, 0, 0, 1207, 0, 0, 0, 0, 0, 0, 0, 1211,
  /*  6074 */ 1208, 0, 0, 0, 0, 0, 0, 0, 1219, 0, 0, 1213, 1214, 0, 0, 0, 0, 0, 1688, 0, 0, 1215, 0, 0, 0, 0, 0, 0, 0,
  /*  6103 */ 1220, 1216, 0, 0, 0, 0, 0, 0, 0, 1227, 0, 0, 1222, 1223, 0, 0, 0, 0, 0, 1710, 0, 0, 1224, 0, 0, 0, 0, 0,
  /*  6131 */ 0, 0, 1228, 1225, 0, 0, 0, 0, 0, 0, 0, 1236, 0, 0, 1230, 1231, 0, 0, 0, 0, 0, 1727, 0, 0, 1232, 0, 0, 0,
  /*  6159 */ 0, 0, 0, 0, 1237, 1233, 0, 0, 0, 0, 0, 0, 0, 1244, 0, 0, 1239, 1240, 0, 0, 0, 0, 0, 1743, 0, 0, 1241, 0,
  /*  6187 */ 0, 0, 0, 0, 0, 0, 1245, 1242, 0, 0, 0, 0, 0, 0, 0, 1253, 0, 0, 1247, 1248, 0, 0, 0, 0, 0, 1760, 0, 0,
  /*  6215 */ 1249, 0, 0, 0, 0, 0, 0, 0, 1254, 1250, 0, 0, 0, 0, 0, 0, 0, 1261, 0, 0, 1256, 1257, 0, 0, 0, 0, 0, 1777,
  /*  6243 */ 0, 0, 1258, 0, 0, 0, 0, 0, 0, 0, 1262, 1259, 0, 0, 0, 0, 0, 0, 0, 1269, 0, 0, 1264, 1265, 0, 0, 0, 0, 0,
  /*  6272 */ 1793, 0, 0, 1266, 0, 0, 0, 0, 0, 0, 0, 1270, 1267, 0, 0, 0, 0, 0, 0, 0, 1277, 0, 0, 1272, 1273, 0, 0, 0,
  /*  6300 */ 0, 0, 1809, 0, 0, 1274, 0, 0, 0, 0, 0, 0, 0, 1278, 1275, 0, 0, 0, 0, 0, 0, 0, 1285, 0, 0, 1280, 1281, 0,
  /*  6328 */ 0, 0, 0, 0, 1827, 0, 0, 1282, 0, 0, 0, 0, 0, 0, 0, 1286, 1283, 0, 0, 0, 0, 0, 0, 0, 1293, 0, 0, 1288,
  /*  6356 */ 1289, 0, 0, 0, 0, 0, 1843, 0, 0, 1290, 0, 0, 0, 0, 0, 0, 0, 1294, 1291, 0, 0, 0, 0, 0, 0, 0, 1301, 0, 0,
  /*  6385 */ 1296, 1297, 0, 0, 0, 0, 0, 1860, 0, 0, 1298, 0, 0, 0, 0, 0, 0, 0, 1302, 1299, 0, 0, 0, 0, 0, 0, 0, 1309,
  /*  6413 */ 0, 0, 1304, 1305, 0, 0, 0, 0, 0, 1877, 0, 0, 1306, 0, 0, 0, 0, 0, 0, 0, 1310, 1307, 0, 0, 0, 0, 0, 0, 0,
  /*  6442 */ 1317, 0, 0, 1312, 1313, 0, 0, 0, 0, 0, 1894, 0, 0, 1314, 0, 0, 0, 0, 0, 0, 0, 1318, 1315, 0, 0, 0, 0, 0,
  /*  6470 */ 0, 0, 1325, 0, 0, 1320, 1321, 0, 0, 0, 0, 0, 1911, 0, 0, 1322, 0, 0, 0, 0, 0, 0, 0, 1326, 1323, 0, 0, 0,
  /*  6498 */ 0, 0, 0, 0, 1333, 0, 0, 1328, 1329, 0, 0, 0, 0, 0, 1930, 0, 0, 1330, 0, 0, 0, 0, 0, 0, 0, 1334, 1331, 0,
  /*  6526 */ 0, 0, 0, 0, 0, 0, 1341, 0, 0, 1336, 1337, 0, 0, 0, 0, 0, 1947, 0, 0, 1338, 0, 0, 0, 0, 0, 0, 0, 1342,
  /*  6554 */ 1339, 0, 0, 0, 0, 0, 0, 0, 1349, 0, 0, 1344, 1345, 0, 0, 0, 0, 0, 1963, 0, 0, 1346, 0, 0, 0, 0, 0, 0, 0,
  /*  6583 */ 1350, 1347, 0, 0, 0, 0, 0, 0, 0, 1355, 0, 0, 1351, 1352, 0, 0, 0, 0, 0, 1971, 0, 0, 0, 0, 1353, 1354, 0,
  /*  6610 */ 0, 0, 0, 0, 1980, 0, 0, 1356, 0, 0, 0, 0, 0, 0, 0, 1359, 1357, 0, 0, 0, 0, 0, 0, 0, 1360, 0, 0, 1362,
  /*  6638 */ 1363, 0, 0, 0, 0, 0, 1997, 0, 0, 1364, 0, 0, 0, 0, 0, 0, 0, 1367, 1365, 0, 0, 0, 0, 0, 0, 0, 1368, 0, 0,
  /*  6667 */ 1370, 1371, 0, 0, 0, 0, 0, 2014, 0, 0, 1372, 0, 0, 0, 0, 0, 0, 0, 1375, 1373, 0, 0, 0, 0, 0, 0, 0, 1376,
  /*  6695 */ 0, 0, 1378, 1379, 0, 0, 0, 0, 0, 2030, 0, 0, 1380, 0, 0, 0, 0, 0, 0, 0, 1383, 1381, 0, 0, 0, 0, 0, 0, 0,
  /*  6724 */ 1384, 0, 0, 1386, 1387, 0, 0, 0, 0, 0, 2048, 0, 0, 1388, 0, 0, 0, 0, 0, 0, 0, 1391, 1389, 0, 0, 0, 0, 0,
  /*  6752 */ 0, 0, 1392, 0, 0, 1394, 1395, 0, 0, 0, 0, 0, 2065, 0, 0, 1396, 0, 0, 0, 0, 0, 0, 0, 1399, 1397, 0, 0, 0,
  /*  6780 */ 0, 0, 0, 0, 1400, 0, 0, 1402, 1403, 0, 0, 0, 0, 0, 2082, 0, 0, 1404, 0, 0, 0, 0, 0, 0, 0, 1407, 1405, 0,
  /*  6808 */ 0, 0, 0, 0, 0, 0, 1408, 0, 0, 1410, 1411, 0, 0, 0, 0, 565, 0, 0, 0, 1412, 0, 0, 0, 0, 0, 0, 0, 1415, 1413,
  /*  6837 */ 0, 0, 0, 0, 0, 0, 0, 1416, 0, 0, 1418, 1419, 0, 0, 0, 0, 571, 0, 0, 0, 1420, 0, 0, 0, 0, 0, 0, 0, 1423,
  /*  6866 */ 1421, 0, 0, 0, 0, 0, 0, 0, 1424, 0, 0, 1426, 1427, 0, 0, 0, 0, 860, 861, 862, 0, 1428, 0, 0, 0, 0, 0, 0,
  /*  6894 */ 0, 1431, 1429, 0, 0, 0, 0, 0, 0, 0, 1432, 0, 0, 1434, 1435, 0, 0, 0, 0, 1101, 0, 0, 0, 1436, 0, 0, 0, 0,
  /*  6922 */ 0, 0, 0, 1440, 1437, 0, 0, 0, 0, 0, 0, 0, 1441, 0, 0, 1443, 1444, 0, 0, 0, 0, 1183, 0, 0, 0, 1445, 0, 0,
  /*  6950 */ 0, 0, 0, 0, 0, 1449, 1446, 0, 0, 0, 0, 0, 0, 0, 1450, 0, 0, 1452, 1453, 0, 0, 0, 0, 1217, 0, 0, 0, 1454,
  /*  6978 */ 0, 0, 0, 0, 0, 0, 0, 1457, 1455, 0, 0, 0, 0, 0, 0, 0, 1458, 0, 0, 1460, 1461, 0, 0, 0, 0, 1251, 0, 0, 0,
  /*  7007 */ 1462, 0, 0, 0, 0, 0, 0, 0, 1465, 1463, 0, 0, 0, 0, 0, 0, 0, 1466, 0, 0, 1468, 1469, 0, 0, 0, 0, 1447, 0,
  /*  7035 */ 0, 0, 1470, 0, 0, 0, 0, 0, 0, 0, 1473, 1471, 0, 0, 0, 0, 0, 0, 0, 1474, 0, 0, 1476, 1477, 0, 0, 0, 0,
  /*  7063 */ 1537, 0, 0, 0, 1478, 0, 0, 0, 0, 0, 0, 0, 1481, 1479, 0, 0, 0, 0, 0, 0, 0, 1482, 0, 0, 1484, 1485, 0, 0,
  /*  7091 */ 0, 0, 1718, 0, 0, 0, 1486, 0, 0, 0, 0, 0, 0, 0, 1489, 1487, 0, 0, 0, 0, 0, 0, 0, 1490, 0, 0, 1492, 1493,
  /*  7119 */ 0, 0, 0, 0, 1826, 0, 0, 0, 1494, 0, 0, 0, 0, 0, 0, 0, 1497, 1495, 0, 0, 0, 0, 0, 0, 0, 1498, 0, 0, 1500,
  /*  7148 */ 1501, 0, 0, 0, 0, 2039, 0, 0, 0, 1502, 0, 0, 0, 0, 0, 0, 0, 1505, 1503, 0, 0, 0, 0, 0, 0, 0, 1506, 0, 0,
  /*  7177 */ 1508, 1509, 0, 0, 0, 0, 291, 0, 0, 0, 0, 0, 1167, 0, 0, 1510, 0, 0, 0, 0, 0, 0, 0, 1514, 1511, 0, 0, 0, 0,
  /*  7206 */ 0, 0, 0, 1515, 0, 0, 1517, 1518, 0, 0, 0, 0, 293, 0, 0, 0, 0, 0, 1184, 0, 0, 1519, 0, 0, 0, 0, 0, 0, 0,
  /*  7235 */ 1522, 1520, 0, 0, 0, 0, 0, 0, 0, 1523, 0, 0, 1525, 1526, 0, 0, 0, 0, 295, 0, 0, 0, 0, 0, 1201, 0, 0, 1527,
  /*  7263 */ 0, 0, 0, 0, 0, 0, 0, 1530, 1528, 0, 0, 0, 0, 0, 0, 0, 1531, 0, 0, 1533, 1534, 0, 0, 0, 0, 566, 0, 0, 0, 0,
  /*  7293 */ 0, 1209, 0, 0, 1535, 0, 0, 0, 0, 0, 0, 0, 1539, 1536, 0, 0, 0, 0, 0, 0, 0, 1540, 0, 0, 1542, 1543, 0, 0,
  /*  7321 */ 0, 0, 572, 0, 0, 0, 0, 0, 1226, 0, 0, 1544, 0, 0, 0, 0, 0, 0, 0, 1547, 1545, 0, 0, 0, 0, 0, 0, 0, 1548, 0,
  /*  7351 */ 0, 1550, 1551, 0, 0, 0, 0, 707, 0, 0, 0, 0, 0, 1068, 0, 0, 1552, 0, 0, 0, 0, 0, 0, 0, 1555, 1553, 0, 0, 0,
  /*  7380 */ 0, 0, 0, 0, 1556, 0, 0, 1558, 1559, 0, 0, 0, 0, 845, 0, 0, 0, 0, 0, 1076, 0, 0, 1560, 0, 0, 0, 0, 0, 0, 0,
  /*  7410 */ 1563, 1561, 0, 0, 0, 0, 0, 0, 0, 1564, 0, 0, 1566, 1567, 0, 0, 0, 0, 847, 0, 0, 0, 0, 0, 1243, 0, 0, 1568,
  /*  7438 */ 0, 0, 0, 0, 0, 0, 0, 1571, 1569, 0, 0, 0, 0, 0, 0, 0, 1572, 0, 0, 1579, 1580, 0, 0, 0, 0, 864, 865, 866,
  /*  7466 */ 867, 868, 1581, 0, 0, 0, 0, 0, 0, 0, 1584, 1582, 0, 0, 0, 0, 0, 0, 0, 1585, 0, 0, 1587, 1588, 0, 0, 0, 0,
  /*  7494 */ 1002, 0, 0, 0, 0, 0, 1102, 0, 0, 1589, 0, 0, 0, 0, 0, 0, 0, 1592, 1590, 0, 0, 0, 0, 0, 0, 0, 1593, 0, 0,
  /*  7523 */ 1596, 1597, 0, 0, 0, 0, 1005, 0, 0, 0, 0, 0, 1118, 0, 0, 1598, 0, 0, 0, 0, 0, 0, 0, 1601, 1599, 0, 0, 0,
  /*  7551 */ 0, 0, 0, 0, 1602, 0, 0, 1605, 1606, 0, 0, 0, 0, 1021, 0, 0, 0, 0, 0, 1284, 0, 0, 1607, 0, 0, 0, 0, 0, 0,
  /*  7580 */ 0, 1604, 1608, 0, 0, 0, 0, 0, 0, 0, 1610, 0, 0, 1613, 1614, 0, 0, 0, 0, 1037, 0, 0, 0, 0, 0, 1316, 0, 0,
  /*  7608 */ 1615, 0, 0, 0, 1616, 0, 0, 0, 1045, 0, 0, 0, 0, 0, 1332, 0, 0, 1617, 0, 0, 0, 0, 0, 0, 1618, 0, 0, 1623,
  /*  7636 */ 1624, 0, 0, 0, 0, 1047, 0, 0, 0, 0, 0, 1340, 0, 0, 1625, 0, 0, 0, 0, 0, 0, 0, 1611, 1626, 0, 0, 0, 0, 0,
  /*  7665 */ 0, 0, 1620, 0, 0, 1631, 1632, 0, 0, 0, 0, 1063, 0, 0, 0, 0, 0, 1374, 0, 0, 1633, 0, 0, 0, 0, 0, 0, 0,
  /*  7693 */ 1621, 1634, 0, 0, 0, 0, 0, 0, 0, 1628, 0, 0, 1639, 1640, 0, 0, 0, 0, 1079, 0, 0, 0, 0, 0, 1406, 0, 0,
  /*  7720 */ 1641, 0, 0, 0, 0, 0, 0, 0, 1629, 1642, 0, 0, 0, 0, 0, 0, 0, 1636, 0, 0, 1647, 1648, 0, 0, 0, 0, 1096, 0,
  /*  7748 */ 0, 0, 0, 0, 1439, 0, 0, 1649, 0, 0, 0, 0, 0, 0, 0, 1637, 1650, 0, 0, 0, 0, 0, 0, 0, 1644, 0, 0, 1657,
  /*  7776 */ 1658, 0, 0, 0, 0, 1121, 0, 0, 0, 0, 0, 1488, 0, 0, 1659, 0, 0, 0, 0, 0, 0, 0, 1645, 1660, 0, 0, 0, 0, 0,
  /*  7805 */ 0, 0, 1653, 0, 0, 1667, 1668, 0, 0, 0, 0, 1137, 0, 0, 0, 0, 0, 1521, 0, 0, 1669, 0, 0, 0, 0, 0, 0, 0,
  /*  7833 */ 1654, 1670, 0, 0, 0, 0, 0, 0, 0, 1656, 0, 0, 1675, 1676, 0, 0, 0, 0, 1153, 0, 0, 0, 0, 0, 1554, 0, 0,
  /*  7860 */ 1677, 0, 0, 0, 0, 0, 0, 0, 1665, 1678, 0, 0, 0, 0, 0, 0, 0, 1672, 0, 0, 1683, 1684, 0, 0, 0, 0, 1170, 0,
  /*  7888 */ 0, 0, 0, 0, 1591, 0, 0, 1685, 0, 0, 0, 0, 0, 0, 0, 1673, 1686, 0, 0, 0, 0, 0, 0, 0, 1680, 1692, 1693, 0,
  /*  7916 */ 0, 0, 0, 0, 0, 1575, 0, 0, 0, 1695, 1696, 0, 0, 0, 0, 1187, 0, 0, 0, 0, 0, 1627, 0, 0, 1697, 0, 0, 0, 0,
  /*  7945 */ 0, 0, 0, 1681, 1698, 0, 0, 0, 0, 0, 0, 0, 1690, 0, 0, 1706, 1707, 0, 0, 0, 0, 1212, 0, 0, 0, 0, 0, 1679,
  /*  7973 */ 0, 0, 1708, 0, 0, 0, 0, 0, 0, 0, 1691, 1709, 0, 0, 0, 0, 0, 0, 0, 1702, 0, 0, 1714, 1715, 0, 0, 0, 0,
  /*  8001 */ 1229, 0, 0, 0, 0, 0, 1719, 0, 0, 1716, 0, 0, 0, 0, 0, 0, 0, 1703, 1717, 0, 0, 0, 0, 0, 0, 0, 1711, 0, 0,
  /*  8030 */ 1723, 1724, 0, 0, 0, 0, 1246, 0, 0, 0, 0, 0, 1752, 0, 0, 1725, 0, 0, 0, 0, 0, 0, 0, 1712, 1726, 0, 0, 0,
  /*  8058 */ 0, 0, 0, 0, 1720, 0, 0, 1731, 1732, 0, 0, 0, 0, 1263, 0, 0, 0, 0, 0, 1785, 0, 0, 1733, 0, 0, 0, 0, 0, 0,
  /*  8087 */ 0, 1721, 1734, 0, 0, 0, 0, 0, 0, 0, 1728, 0, 0, 1739, 1740, 0, 0, 0, 0, 1279, 0, 0, 0, 0, 0, 1817, 0, 0,
  /*  8115 */ 1741, 0, 0, 0, 0, 0, 0, 0, 1729, 1742, 0, 0, 0, 0, 0, 0, 0, 1736, 0, 0, 1747, 1748, 0, 0, 0, 0, 1295, 0,
  /*  8143 */ 0, 0, 0, 0, 1852, 0, 0, 1749, 0, 0, 0, 0, 0, 0, 0, 1737, 1750, 0, 0, 0, 0, 0, 0, 0, 1744, 0, 0, 1756,
  /*  8171 */ 1757, 0, 0, 0, 0, 1311, 0, 0, 0, 0, 0, 1885, 0, 0, 1758, 0, 0, 0, 0, 0, 0, 0, 1745, 1759, 0, 0, 0, 0, 0,
  /*  8200 */ 0, 0, 1753, 0, 0, 1765, 1766, 0, 0, 0, 0, 1327, 0, 0, 0, 0, 0, 1921, 0, 0, 1767, 0, 0, 0, 0, 0, 0, 0,
  /*  8228 */ 1754, 1768, 0, 0, 0, 0, 0, 0, 0, 1761, 0, 0, 1773, 1774, 0, 0, 0, 0, 1343, 0, 0, 0, 0, 0, 1955, 0, 0,
  /*  8255 */ 1775, 0, 0, 0, 0, 0, 0, 0, 1762, 1776, 0, 0, 0, 0, 0, 0, 0, 1764, 0, 0, 1781, 1782, 0, 0, 0, 0, 1369, 0,
  /*  8283 */ 0, 0, 0, 0, 2005, 0, 0, 1783, 0, 0, 0, 0, 0, 0, 0, 1770, 1784, 0, 0, 0, 0, 0, 0, 0, 1771, 0, 0, 1789,
  /*  8311 */ 1790, 0, 0, 0, 0, 1385, 0, 0, 0, 0, 0, 2040, 0, 0, 1791, 0, 0, 0, 0, 0, 0, 0, 1778, 1792, 0, 0, 0, 0, 0,
  /*  8340 */ 0, 0, 1779, 0, 0, 1797, 1798, 0, 0, 0, 0, 1401, 0, 0, 0, 0, 0, 2074, 0, 0, 1799, 0, 0, 0, 0, 0, 0, 0,
  /*  8368 */ 1786, 1800, 0, 0, 0, 0, 0, 0, 0, 1787, 0, 0, 1805, 1806, 0, 0, 0, 0, 1417, 0, 0, 0, 0, 568, 0, 0, 0, 1807,
  /*  8396 */ 0, 0, 0, 0, 0, 0, 0, 1794, 1808, 0, 0, 0, 0, 0, 0, 0, 1795, 0, 0, 1813, 1814, 0, 0, 0, 0, 1433, 0, 0, 0,
  /*  8425 */ 0, 1084, 0, 0, 0, 1815, 0, 0, 0, 0, 0, 0, 0, 1802, 1816, 0, 0, 0, 0, 0, 0, 0, 1803, 0, 0, 1822, 1823, 0,
  /*  8453 */ 0, 0, 0, 1451, 0, 0, 0, 0, 1192, 0, 0, 0, 1824, 0, 0, 0, 0, 0, 0, 0, 1810, 1825, 0, 0, 0, 0, 0, 0, 0,
  /*  8482 */ 1811, 0, 0, 1831, 1832, 0, 0, 0, 0, 1467, 0, 0, 0, 0, 1438, 0, 0, 0, 1833, 0, 0, 0, 0, 0, 0, 0, 1819,
  /*  8509 */ 1834, 0, 0, 0, 0, 0, 0, 0, 1820, 0, 0, 1839, 1840, 0, 0, 0, 0, 1483, 0, 0, 0, 0, 1661, 0, 0, 0, 1841, 0,
  /*  8537 */ 0, 0, 0, 0, 0, 0, 1828, 1842, 0, 0, 0, 0, 0, 0, 0, 1829, 0, 0, 1848, 1849, 0, 0, 0, 0, 1507, 0, 0, 0, 0,
  /*  8566 */ 285, 0, 0, 0, 0, 0, 1150, 0, 0, 1850, 0, 0, 0, 0, 0, 0, 0, 1836, 1851, 0, 0, 0, 0, 0, 0, 0, 1837, 0, 0,
  /*  8595 */ 1856, 1857, 0, 0, 0, 0, 1524, 0, 0, 0, 0, 294, 0, 0, 0, 0, 0, 1193, 0, 0, 1858, 0, 0, 0, 0, 0, 0, 0, 1845,
  /*  8624 */ 1859, 0, 0, 0, 0, 0, 0, 0, 1846, 0, 0, 1864, 1865, 0, 0, 0, 0, 1541, 0, 0, 0, 0, 570, 0, 0, 0, 0, 0, 1218,
  /*  8653 */ 0, 0, 1866, 0, 0, 0, 0, 0, 0, 0, 1853, 1867, 0, 0, 0, 0, 0, 0, 0, 1854, 0, 1869, 0, 0, 0, 0, 0, 1870, 0,
  /*  8682 */ 0, 1873, 1874, 0, 0, 0, 0, 1557, 0, 0, 0, 0, 708, 709, 710, 711, 712, 1875, 0, 0, 0, 0, 0, 0, 0, 1861,
  /*  8708 */ 1876, 0, 0, 0, 0, 0, 0, 0, 1862, 0, 0, 1881, 1882, 0, 0, 0, 0, 1573, 0, 0, 0, 0, 849, 0, 0, 0, 0, 0, 1252,
  /*  8737 */ 0, 0, 1883, 0, 0, 0, 0, 0, 0, 0, 1871, 1884, 0, 0, 0, 0, 0, 0, 0, 1878, 0, 0, 1890, 1891, 0, 0, 0, 0,
  /*  8765 */ 1594, 0, 0, 0, 0, 1003, 0, 0, 0, 0, 0, 1110, 0, 0, 1892, 0, 0, 0, 0, 0, 0, 0, 1879, 1893, 0, 0, 0, 0, 0,
  /*  8794 */ 0, 0, 1887, 0, 0, 1898, 1899, 0, 0, 0, 0, 1603, 0, 0, 0, 0, 1013, 0, 0, 0, 0, 0, 1268, 0, 0, 1900, 0, 0,
  /*  8822 */ 0, 0, 0, 0, 0, 1888, 1901, 0, 0, 0, 0, 0, 0, 0, 1895, 0, 0, 1906, 1907, 0, 0, 0, 0, 1622, 0, 0, 0, 0,
  /*  8850 */ 1046, 0, 0, 0, 0, 0, 1126, 0, 0, 1909, 0, 0, 0, 0, 0, 0, 0, 1896, 1910, 0, 0, 0, 0, 0, 0, 0, 1903, 0, 0,
  /*  8879 */ 1917, 1918, 0, 0, 0, 0, 1638, 0, 0, 0, 0, 1071, 0, 0, 0, 0, 0, 1390, 0, 0, 1919, 0, 0, 0, 0, 0, 0, 0,
  /*  8907 */ 1904, 1920, 0, 0, 0, 0, 0, 0, 0, 1908, 0, 0, 1926, 1927, 0, 0, 0, 0, 1655, 0, 0, 0, 0, 1113, 0, 0, 0, 0,
  /*  8935 */ 0, 1472, 0, 0, 1928, 0, 0, 0, 0, 0, 0, 0, 1912, 1929, 0, 0, 0, 0, 0, 0, 0, 1913, 0, 0, 1934, 1935, 0, 0,
  /*  8963 */ 0, 0, 1674, 0, 0, 0, 0, 1145, 0, 0, 0, 0, 0, 1538, 0, 0, 1936, 0, 0, 0, 0, 0, 0, 0, 1922, 1937, 0, 0, 0,
  /*  8992 */ 0, 0, 0, 0, 1923, 0, 0, 1943, 1944, 0, 0, 0, 0, 1694, 0, 0, 0, 0, 1178, 0, 0, 0, 0, 0, 1609, 0, 0, 1945,
  /*  9020 */ 0, 0, 0, 0, 0, 0, 0, 1931, 1946, 0, 0, 0, 0, 0, 0, 0, 1932, 0, 0, 1951, 1952, 0, 0, 0, 0, 1705, 0, 0, 0,
  /*  9049 */ 0, 1204, 0, 0, 0, 0, 0, 1662, 0, 0, 1953, 0, 0, 0, 0, 0, 0, 0, 1939, 1954, 0, 0, 0, 0, 0, 0, 0, 1940, 0,
  /*  9078 */ 0, 1959, 1960, 0, 0, 0, 0, 1722, 0, 0, 0, 0, 1238, 0, 0, 0, 0, 0, 1735, 0, 0, 1961, 0, 0, 0, 0, 0, 0, 0,
  /*  9107 */ 1948, 1962, 0, 0, 0, 0, 0, 0, 0, 1949, 0, 0, 1967, 1968, 0, 0, 0, 0, 1738, 0, 0, 0, 0, 1271, 0, 0, 0, 0,
  /*  9135 */ 0, 1801, 0, 0, 1969, 0, 0, 0, 0, 0, 0, 0, 1956, 1970, 0, 0, 0, 0, 0, 0, 0, 1957, 0, 0, 1976, 1977, 0, 0,
  /*  9163 */ 0, 0, 1763, 0, 0, 0, 0, 1319, 0, 0, 0, 0, 0, 1902, 0, 0, 1978, 0, 0, 0, 0, 0, 0, 0, 1964, 1979, 0, 0, 0,
  /*  9192 */ 0, 0, 0, 0, 1965, 0, 0, 1985, 1986, 0, 0, 0, 0, 1788, 0, 0, 0, 0, 1377, 0, 0, 0, 0, 0, 2022, 0, 0, 1987,
  /*  9220 */ 0, 0, 0, 0, 0, 0, 0, 1973, 1988, 0, 0, 0, 0, 0, 0, 0, 1974, 0, 0, 0, 1992, 0, 0, 0, 0, 1796, 0, 0, 0, 0,
  /*  9250 */ 1393, 0, 0, 0, 0, 0, 2057, 0, 0, 0, 0, 1993, 1994, 0, 0, 0, 0, 1804, 0, 0, 0, 0, 1409, 0, 0, 0, 0, 435, 0,
  /*  9279 */ 0, 0, 1995, 0, 0, 0, 0, 0, 0, 0, 1981, 1996, 0, 0, 0, 0, 0, 0, 0, 1982, 0, 0, 0, 2000, 0, 0, 0, 0, 1812,
  /*  9308 */ 0, 0, 0, 0, 1425, 0, 0, 0, 0, 573, 0, 0, 0, 0, 0, 2001, 2002, 0, 0, 0, 0, 1821, 0, 0, 0, 0, 1442, 0, 0, 0,
  /*  9338 */ 0, 1162, 0, 0, 0, 2003, 0, 0, 0, 0, 0, 0, 0, 1990, 2004, 0, 0, 0, 0, 0, 0, 0, 1991, 0, 0, 0, 2008, 0, 0,
  /*  9367 */ 0, 0, 1830, 0, 0, 0, 0, 1459, 0, 0, 0, 0, 1234, 0, 0, 0, 0, 0, 2009, 2010, 0, 0, 0, 0, 1838, 0, 0, 0, 0,
  /*  9396 */ 1475, 0, 0, 0, 0, 1512, 0, 0, 0, 2011, 0, 0, 0, 0, 0, 0, 0, 1998, 2012, 0, 0, 0, 0, 0, 0, 0, 1999, 0, 0,
  /*  9425 */ 0, 2017, 0, 0, 0, 0, 1844, 0, 0, 0, 0, 1491, 0, 0, 0, 0, 1751, 0, 0, 0, 0, 0, 2018, 2019, 0, 0, 0, 0,
  /*  9453 */ 1847, 0, 0, 0, 0, 1499, 0, 0, 0, 0, 2013, 0, 0, 0, 2020, 0, 0, 0, 0, 0, 0, 0, 2006, 2021, 0, 0, 0, 0, 0,
  /*  9482 */ 0, 0, 2007, 0, 0, 0, 2025, 0, 0, 0, 0, 1855, 0, 0, 0, 0, 1516, 0, 0, 0, 0, 292, 0, 0, 0, 0, 0, 1175, 0, 0,
  /*  9512 */ 0, 0, 2026, 2027, 0, 0, 0, 0, 1863, 0, 0, 0, 0, 1532, 0, 0, 0, 0, 298, 299, 300, 301, 302, 2028, 0, 0, 0,
  /*  9539 */ 0, 0, 0, 0, 2015, 2029, 0, 0, 0, 0, 0, 0, 0, 2016, 0, 2033, 0, 0, 0, 0, 0, 0, 1663, 1664, 0, 0, 0, 2034,
  /*  9567 */ 0, 0, 0, 0, 1872, 0, 0, 0, 0, 1549, 0, 0, 0, 0, 706, 0, 0, 0, 0, 0, 1060, 0, 0, 0, 0, 2035, 2036, 0, 0, 0,
  /*  9597 */ 0, 1880, 0, 0, 0, 0, 1565, 0, 0, 0, 0, 846, 0, 0, 0, 0, 0, 1235, 0, 0, 2037, 0, 0, 0, 0, 0, 0, 0, 2023,
  /*  9626 */ 2038, 0, 0, 0, 0, 0, 0, 0, 2024, 0, 0, 0, 2043, 0, 0, 0, 0, 1886, 0, 0, 0, 0, 1578, 0, 0, 0, 0, 851, 0, 0,
  /*  9656 */ 0, 0, 0, 1085, 0, 0, 0, 0, 2044, 2045, 0, 0, 0, 0, 1889, 0, 0, 0, 0, 1586, 0, 0, 0, 0, 1001, 0, 0, 0, 0,
  /*  9685 */ 0, 1093, 0, 0, 2046, 0, 0, 0, 0, 0, 0, 0, 2031, 2047, 0, 0, 0, 0, 0, 0, 0, 2032, 0, 0, 2051, 2052, 0, 0,
  /*  9713 */ 0, 0, 1897, 0, 0, 0, 0, 1595, 0, 0, 0, 0, 1004, 0, 0, 0, 0, 0, 1042, 0, 0, 0, 0, 2053, 2054, 0, 0, 0, 0,
  /*  9742 */ 1905, 0, 0, 0, 0, 1612, 0, 0, 0, 0, 1029, 0, 0, 0, 0, 0, 1300, 0, 0, 2055, 0, 0, 0, 0, 0, 0, 0, 2041,
  /*  9770 */ 2056, 0, 0, 0, 0, 0, 0, 0, 2042, 0, 0, 0, 2060, 0, 0, 0, 0, 1914, 0, 0, 0, 0, 1630, 0, 0, 0, 0, 1055, 0,
  /*  9799 */ 0, 0, 0, 0, 1358, 0, 0, 0, 0, 2061, 2062, 0, 0, 0, 0, 1924, 0, 0, 0, 0, 1646, 0, 0, 0, 0, 1088, 0, 0, 0,
  /*  9828 */ 0, 0, 1422, 0, 0, 2063, 0, 0, 0, 0, 0, 0, 0, 2049, 2064, 0, 0, 0, 0, 0, 0, 0, 2050, 0, 0, 0, 2068, 0, 0,
  /*  9857 */ 0, 0, 1925, 0, 0, 0, 0, 1652, 0, 0, 0, 0, 1105, 0, 0, 0, 0, 0, 1456, 0, 0, 0, 0, 2070, 2071, 0, 0, 0, 0,
  /*  9886 */ 1933, 0, 0, 0, 0, 1666, 0, 0, 0, 0, 1129, 0, 0, 0, 0, 0, 1504, 0, 0, 2072, 0, 0, 0, 0, 0, 0, 0, 2058,
  /*  9914 */ 2073, 0, 0, 0, 0, 0, 0, 0, 2059, 0, 0, 0, 2077, 0, 0, 0, 0, 1941, 0, 0, 0, 0, 1682, 0, 0, 0, 0, 1161, 0,
  /*  9943 */ 0, 0, 0, 0, 1570, 0, 0, 0, 0, 2078, 2079, 0, 0, 0, 0, 1950, 0, 0, 0, 0, 1704, 0, 0, 0, 0, 1196, 0, 0, 0,
  /*  9972 */ 0, 0, 1643, 0, 0, 2080, 0, 0, 0, 0, 0, 0, 0, 2066, 2081, 0, 0, 0, 0, 0, 0, 0, 2067, 0, 0, 0, 2085, 0, 0,
  /* 10001 */ 0, 0, 1958, 0, 0, 0, 0, 1713, 0, 0, 0, 0, 1221, 0, 0, 0, 0, 0, 1700, 0, 0, 2086, 0, 0, 0, 0, 0, 0, 0,
  /* 10030 */ 2075, 0, 0, 0, 2087, 0, 0, 0, 0, 1966, 0, 0, 0, 0, 1730, 0, 0, 0, 0, 1255, 0, 0, 0, 0, 0, 1769, 0, 0, 0,
  /* 10059 */ 0, 0, 2088, 0, 2089, 0, 0, 0, 1984, 0, 0, 0, 0, 1780, 0, 0, 0, 0, 1361, 0, 0, 0, 0, 0, 1989, 0, 0, 0, 0,
  /* 10088 */ 2091, 0, 0, 0, 0, 2092, 0, 2093, 0, 0, 2094, 0, 0, 0, 1972, 0, 0, 0, 0, 1746, 0, 0, 0, 0, 1287, 0, 0, 0,
  /* 10116 */ 0, 0, 1835, 0, 0, 0, 2095, 0, 2096, 0, 0, 0, 0, 1975, 0, 0, 0, 0, 1755, 0, 0, 0, 0, 1303, 0, 0, 0, 0, 0,
  /* 10145 */ 1868, 0, 0, 0, 0, 0, 2097, 0, 0, 0, 0, 1983, 0, 0, 0, 0, 1772, 0, 0, 0, 0, 1335, 0, 0, 0, 0, 0, 1938, 0,
  /* 10174 */ 0
];

XQueryParser_t.CASEID =
[
  /*    0 */ 1505, 1505, 1505, 1505, 1100, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /*   18 */ 1505, 1505, 1505, 1504, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1516, 1505, 1505, 1505,
  /*   36 */ 1505, 1505, 2221, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /*   54 */ 1505, 1505, 1505, 1505, 1505, 1505, 1506, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /*   72 */ 1224, 1221, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1517, 1085, 2015, 1095,
  /*   90 */ 1505, 1505, 2217, 1505, 1505, 1661, 1505, 2016, 1778, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1727,
  /*  108 */ 1112, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1104, 1505,
  /*  126 */ 1505, 2162, 1505, 1505, 1527, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1115, 1505,
  /*  144 */ 1505, 1505, 1505, 1505, 1931, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1123, 1505, 1505, 1505,
  /*  162 */ 2014, 1644, 1930, 1505, 1565, 1505, 1505, 1505, 1505, 1741, 1505, 1505, 1505, 1505, 1505, 1614, 1505, 1505,
  /*  180 */ 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1644, 1505, 1505, 1505, 1505,
  /*  198 */ 1505, 1505, 1505, 2101, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1289, 1505, 1505, 1505,
  /*  216 */ 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 2374, 1085, 1138, 1150, 1505, 1505, 1505, 1505,
  /*  234 */ 1505, 1505, 1505, 1167, 2143, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1254, 1505, 1505, 1505,
  /*  252 */ 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  270 */ 1505, 1505, 1505, 1518, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1580, 1505, 1505, 1505, 1505,
  /*  288 */ 1565, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  306 */ 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1178, 1505, 1505, 1424, 1505, 1505, 1505, 1505,
  /*  324 */ 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1129, 1505, 1505,
  /*  342 */ 1505, 1505, 1505, 2011, 1505, 1643, 1505, 1505, 1505, 2148, 1187, 1195, 1203, 1505, 1505, 1505, 1505, 1505,
  /*  360 */ 1505, 1505, 1505, 1599, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  378 */ 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1215, 1232, 1240, 1248, 1505, 1427, 1713, 1715, 1265, 1273,
  /*  396 */ 1128, 1505, 1505, 1505, 1473, 1297, 1305, 1313, 1321, 1336, 1343, 1349, 1357, 1370, 1378, 1386, 1394, 1362,
  /*  414 */ 1328, 1402, 1410, 1418, 1505, 1505, 1505, 1505, 1435, 1602, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  432 */ 1505, 1447, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  450 */ 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1142, 2372, 1459, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  468 */ 1469, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  486 */ 1505, 1505, 1505, 1505, 1505, 1505, 1481, 2188, 1489, 1505, 1505, 1505, 1505, 1747, 1499, 1505, 1505, 1505,
  /*  504 */ 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  522 */ 1505, 1505, 1505, 1505, 1505, 1514, 2340, 1505, 1505, 1505, 1505, 1505, 1518, 1505, 1505, 1505, 1505, 1505,
  /*  540 */ 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  558 */ 1505, 1505, 1505, 1505, 1505, 1526, 1505, 1505, 1505, 1505, 1505, 2014, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  576 */ 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  594 */ 1505, 1505, 1535, 1547, 1555, 1563, 1505, 1505, 1505, 1505, 1573, 1593, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  612 */ 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  630 */ 1505, 1505, 1505, 1659, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  648 */ 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  666 */ 1207, 1610, 1130, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  684 */ 1505, 1505, 1515, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1518, 1505, 1505, 1505, 1505, 1505, 1505, 1087,
  /*  702 */ 1622, 2174, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  720 */ 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 2262, 1631, 1505, 1179, 1505, 1505, 1505, 1491, 1155,
  /*  738 */ 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  756 */ 1505, 1505, 1505, 1505, 1642, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 2073, 1652, 1669, 1677,
  /*  774 */ 1685, 1700, 1691, 1505, 1460, 1505, 1505, 1699, 1700, 1709, 1713, 1280, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  792 */ 1505, 1505, 1505, 1286, 1505, 1505, 1723, 1505, 1505, 1505, 1257, 1700, 1701, 1505, 1505, 1735, 1760, 1773,
  /*  810 */ 1505, 1505, 1505, 1451, 2342, 1765, 1811, 1505, 1786, 1505, 1752, 1797, 1820, 1832, 1845, 1850, 1804, 1824,
  /*  828 */ 1865, 1858, 1879, 1887, 1894, 1837, 1902, 1910, 1918, 1871, 1505, 2130, 1505, 1505, 2078, 1505, 1926, 1505,
  /*  846 */ 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1461, 1939, 1953, 1960, 1969, 2039, 1976, 1981, 1996,
  /*  864 */ 1989, 2004, 2024, 1961, 2032, 1945, 2047, 2055, 2063, 1505, 1505, 1505, 1505, 1505, 2086, 2099, 1505, 1505,
  /*  882 */ 1505, 1789, 1812, 2113, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  900 */ 1505, 1505, 1505, 1505, 2109, 1518, 1505, 2160, 1505, 1505, 1505, 1439, 1170, 2121, 2129, 1505, 1505, 1505,
  /*  918 */ 1634, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 2091, 1505,
  /*  936 */ 2138, 1505, 1505, 1505, 1505, 1539, 1505, 1505, 1505, 1505, 1505, 2156, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  954 */ 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /*  972 */ 2068, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 2170, 1505, 1505, 1505, 1505, 1505,
  /*  990 */ 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /* 1008 */ 1505, 1505, 1505, 1505, 1505, 1505, 1623, 1505, 1505, 1505, 1505, 2170, 1505, 1505, 1505, 1505, 1505, 1505,
  /* 1026 */ 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
  /* 1044 */ 1505, 1505, 1505, 1505, 1505, 1623, 1505, 2182, 2196, 2204, 2212, 1505, 1159, 2229, 2237, 2245, 2253, 2261,
  /* 1062 */ 1505, 1786, 1505, 1585, 2270, 2294, 2281, 2306, 2310, 2318, 2298, 2389, 2326, 2333, 2350, 2357, 2286, 2276,
  /* 1080 */ 2365, 2382, 2394, 1505, 2130, 2812, 2815, 2812, 2812, 2812, 2812, 2812, 2812, 2418, 2938, 2819, 2812, 2818,
  /* 1098 */ 2812, 2817, 2812, 2812, 2812, 2402, 2812, 2812, 2812, 2812, 2419, 2812, 2812, 2812, 2812, 2812, 3102, 2812,
  /* 1116 */ 2812, 2812, 2812, 2812, 2812, 2907, 2812, 2812, 2818, 2812, 2812, 2812, 2820, 2812, 2812, 2812, 2812, 2812,
  /* 1134 */ 2812, 2812, 2818, 2812, 2812, 2812, 2812, 2841, 2812, 2812, 2812, 2812, 2811, 2839, 3017, 2840, 2427, 2812,
  /* 1152 */ 2812, 2812, 2437, 2812, 2812, 2812, 2429, 2812, 2812, 2812, 2812, 2812, 2812, 3589, 3592, 2812, 2812, 2872,
  /* 1170 */ 2812, 2812, 2812, 2812, 2812, 2812, 2916, 2812, 2812, 2812, 2812, 2823, 2812, 2812, 2812, 2812, 2812, 2572,
  /* 1188 */ 3457, 2546, 3452, 2613, 2826, 2569, 2580, 2600, 2612, 2590, 3456, 2622, 3449, 3458, 2569, 2592, 2588, 3459,
  /* 1206 */ 2827, 2812, 2812, 2812, 2812, 2812, 2812, 3401, 2816, 2812, 2812, 2812, 2816, 3382, 2636, 2812, 2812, 2413,
  /* 1224 */ 2812, 2812, 2812, 2812, 2812, 2812, 2902, 2812, 2814, 3339, 2792, 2649, 2666, 2676, 2668, 2686, 2700, 2709,
  /* 1242 */ 2698, 2732, 2701, 2692, 2721, 2667, 2715, 2729, 2678, 2654, 2558, 3349, 2812, 2812, 2449, 2812, 2812, 2812,
  /* 1260 */ 2812, 2812, 2812, 2929, 3154, 2790, 2740, 2751, 2740, 3344, 2740, 2740, 2752, 2760, 2741, 2775, 2961, 2743,
  /* 1278 */ 2742, 2961, 2740, 2740, 2740, 2740, 2740, 2820, 2812, 2812, 2558, 2812, 2812, 2812, 2812, 2812, 2812, 3372,
  /* 1296 */ 2812, 2857, 2857, 3455, 3453, 3453, 3453, 2855, 2641, 3452, 2640, 2853, 2767, 2494, 2494, 2508, 2853, 2767,
  /* 1314 */ 2553, 2852, 2860, 2859, 2858, 2858, 2858, 3404, 3455, 2762, 2856, 2614, 2855, 2855, 2855, 2523, 2854, 2522,
  /* 1332 */ 2853, 2767, 3450, 2518, 3453, 3453, 2855, 2855, 2855, 3453, 3453, 2855, 3451, 2494, 2508, 2767, 2508, 2853,
  /* 1350 */ 2853, 2767, 2627, 2860, 2765, 2492, 2492, 2492, 2625, 2859, 2859, 2859, 2858, 2764, 2624, 3262, 2762, 3454,
  /* 1368 */ 2524, 2855, 3404, 3455, 3455, 3455, 2857, 2520, 2852, 3407, 3159, 2624, 3403, 3454, 3454, 3454, 2524, 2628,
  /* 1386 */ 2852, 2766, 2626, 3263, 3259, 3451, 2627, 2766, 2493, 2507, 2860, 2859, 2780, 2858, 2858, 2858, 3405, 2857,
  /* 1404 */ 2857, 3454, 3454, 2856, 2524, 2855, 2854, 3452, 2854, 2640, 2853, 2853, 2638, 2859, 3406, 2624, 3405, 3455,
  /* 1422 */ 2788, 2960, 2812, 2812, 2476, 2812, 2812, 2812, 2812, 2812, 2812, 2957, 2740, 2812, 2812, 2815, 2800, 2812,
  /* 1440 */ 2812, 2812, 2812, 2812, 2812, 3415, 2812, 2812, 2812, 3384, 3402, 2812, 2812, 2812, 2812, 2812, 2812, 3417,
  /* 1458 */ 3245, 2838, 2812, 2812, 2812, 2812, 2812, 2812, 2812, 2819, 2819, 2812, 2812, 3382, 2850, 2812, 2812, 2812,
  /* 1476 */ 2812, 2812, 2812, 3455, 2857, 2812, 2812, 2812, 2816, 2871, 2868, 2812, 3250, 2871, 2870, 2812, 2812, 2812,
  /* 1494 */ 2812, 2812, 2812, 2812, 3349, 2812, 2813, 2819, 2815, 3383, 2813, 2812, 2812, 2812, 2812, 2812, 2812, 2812,
  /* 1512 */ 2812, 2813, 2812, 2812, 2817, 2812, 2812, 2812, 2812, 2812, 2812, 2812, 2816, 2812, 3200, 2812, 2812, 2812,
  /* 1530 */ 2812, 2812, 2812, 2812, 2823, 2812, 2812, 2812, 3171, 2812, 2812, 2812, 2812, 2812, 2812, 3467, 2812, 2880,
  /* 1548 */ 2812, 3102, 2468, 3200, 3197, 2812, 3576, 2812, 3195, 2812, 2985, 2812, 3581, 3193, 3193, 3200, 3199, 2812,
  /* 1566 */ 2812, 2812, 2812, 2812, 2812, 2814, 2812, 2953, 2812, 2818, 2812, 3385, 2812, 3101, 2812, 2463, 2812, 2812,
  /* 1584 */ 2827, 2812, 2812, 2812, 2812, 2812, 3300, 2883, 2883, 2897, 2813, 2924, 2815, 3383, 2813, 2812, 2812, 2535,
  /* 1602 */ 2812, 2812, 2812, 2812, 2812, 2812, 2991, 2812, 2816, 2812, 2812, 3360, 2812, 2812, 2812, 2812, 2812, 2812,
  /* 1620 */ 3481, 2812, 3447, 2812, 2812, 2812, 2812, 2812, 2812, 2812, 2824, 2812, 2812, 2830, 2812, 2812, 2812, 2812,
  /* 1638 */ 2812, 2812, 3183, 2820, 2816, 2812, 2812, 2812, 2812, 2812, 2812, 2820, 2812, 2812, 2812, 2812, 2812, 2979,
  /* 1656 */ 2999, 3007, 3015, 2812, 2467, 2812, 2812, 2812, 2812, 2812, 2812, 2816, 2815, 3217, 3025, 3032, 3092, 3047,
  /* 1674 */ 3039, 3063, 3071, 3085, 3142, 3120, 3146, 3110, 3053, 3077, 3118, 3059, 3135, 3128, 3097, 2812, 2930, 3154,
  /* 1692 */ 3154, 3154, 3154, 3154, 3154, 3457, 2812, 2928, 3154, 3154, 3154, 3154, 3154, 3154, 3154, 3154, 3158, 3154,
  /* 1710 */ 3157, 2812, 2812, 2740, 2740, 2740, 2740, 2740, 2740, 2740, 2740, 2779, 3401, 2812, 2812, 2812, 2818, 2812,
  /* 1728 */ 2812, 2812, 2812, 2812, 2812, 3622, 2812, 2812, 2812, 3167, 2812, 3683, 3351, 2812, 2812, 2812, 2815, 2812,
  /* 1746 */ 2812, 2813, 2812, 2818, 2812, 3385, 2812, 2812, 2812, 2812, 2812, 3314, 3234, 3234, 2538, 3179, 3214, 2812,
  /* 1764 */ 3191, 2812, 2812, 2812, 2812, 2812, 3437, 2441, 2882, 2812, 3209, 2658, 3225, 3298, 2812, 2812, 2812, 2812,
  /* 1782 */ 2818, 2812, 2816, 2812, 2812, 3234, 3271, 2812, 2812, 2812, 2812, 2812, 2812, 3382, 2812, 3234, 3234, 3234,
  /* 1800 */ 3286, 3286, 3286, 3286, 3231, 3230, 3229, 3229, 3229, 3229, 3229, 3229, 2812, 2812, 2812, 2812, 2812, 2812,
  /* 1818 */ 2812, 2827, 3230, 3230, 3229, 3229, 3229, 3229, 3229, 3229, 3237, 3236, 3236, 3236, 3229, 3283, 3237, 3237,
  /* 1836 */ 3236, 3235, 3235, 3235, 3310, 3233, 3287, 3232, 3286, 3234, 3234, 3233, 3287, 3232, 3286, 3286, 3286, 3286,
  /* 1854 */ 3286, 3286, 3286, 3286, 3234, 3234, 3234, 3234, 2883, 3237, 3237, 3236, 3236, 3236, 3236, 3236, 3235, 3235,
  /* 1872 */ 3235, 2454, 3234, 2883, 3469, 3285, 2812, 2455, 3235, 3295, 3287, 3287, 3287, 3232, 3285, 3237, 3237, 3237,
  /* 1890 */ 3233, 2888, 3302, 3229, 3237, 3237, 3237, 3236, 2455, 3235, 3235, 3235, 3286, 3323, 3230, 3322, 3229, 3229,
  /* 1908 */ 3229, 3332, 3234, 3234, 2453, 3287, 3287, 3287, 3324, 3231, 3230, 3230, 3230, 3230, 3229, 3229, 3237, 3236,
  /* 1926 */ 2812, 2812, 2812, 2816, 2819, 2812, 2812, 2812, 2812, 2812, 2812, 2812, 2817, 2819, 2819, 2827, 2817, 2817,
  /* 1944 */ 2817, 2817, 2817, 2816, 2816, 2815, 2815, 2814, 2812, 2816, 2816, 2815, 2815, 2823, 2823, 2815, 2815, 2814,
  /* 1962 */ 2814, 2814, 2813, 2812, 2820, 2820, 2820, 2820, 2819, 2819, 2818, 2818, 2817, 2817, 2817, 2815, 2823, 2815,
  /* 1980 */ 2823, 2815, 2815, 2815, 2815, 2814, 2821, 2813, 2821, 2820, 2827, 2819, 2827, 2819, 2814, 2814, 2821, 2813,
  /* 1998 */ 2813, 2813, 2813, 2812, 2820, 2828, 2812, 2820, 2819, 2826, 2826, 2818, 2818, 2816, 2812, 2812, 2812, 2812,
  /* 2016 */ 2812, 2812, 2813, 2812, 2812, 2812, 2812, 2812, 2814, 2822, 2814, 2812, 2818, 2815, 2815, 2822, 2820, 2820,
  /* 2034 */ 2820, 2820, 2819, 2818, 2818, 2817, 2825, 2817, 2817, 2817, 2817, 2817, 2817, 2820, 2819, 2819, 2826, 2826,
  /* 2052 */ 2818, 2818, 2817, 2816, 2824, 2816, 2816, 2815, 2815, 2814, 2813, 2812, 2820, 2820, 2819, 2819, 2812, 2812,
  /* 2070 */ 2812, 2812, 2824, 2812, 2812, 2812, 2812, 2969, 2812, 2812, 2812, 2812, 2812, 3359, 2812, 2812, 2812, 3368,
  /* 2088 */ 3398, 2812, 3380, 2812, 2812, 2812, 2812, 3427, 3435, 2812, 2812, 2812, 3393, 2812, 2812, 2812, 2812, 2812,
  /* 2106 */ 2812, 2822, 2812, 2812, 2815, 2812, 2814, 2812, 2812, 2812, 2812, 2812, 2830, 2417, 2812, 2912, 2812, 2803,
  /* 2124 */ 2812, 2812, 2812, 2812, 3425, 2912, 2812, 2812, 2812, 2812, 2812, 2812, 2812, 2884, 2812, 2812, 2829, 2604,
  /* 2142 */ 3445, 2812, 2812, 2812, 2812, 3696, 2812, 2812, 2812, 2584, 2488, 2502, 2516, 2532, 2812, 2812, 2812, 2889,
  /* 2160 */ 2812, 2812, 2812, 2812, 2812, 2842, 2812, 2812, 2812, 2812, 2812, 2812, 2812, 3477, 2812, 2812, 2812, 2812,
  /* 2178 */ 2812, 2949, 2812, 2812, 2812, 2812, 2812, 3101, 2812, 3201, 2812, 2812, 2812, 2815, 2812, 3255, 2971, 2971,
  /* 2196 */ 2405, 3275, 3489, 3500, 3513, 3496, 3531, 3508, 3530, 3550, 3528, 3562, 3532, 3522, 3540, 3514, 3530, 3548,
  /* 2214 */ 3558, 3570, 3298, 2812, 2812, 2812, 2814, 2812, 2812, 2812, 2812, 2561, 2812, 2812, 2812, 3592, 3592, 3592,
  /* 2232 */ 3600, 3592, 3603, 3592, 3591, 3606, 3592, 3592, 3590, 3614, 3591, 3618, 3630, 3671, 3654, 3640, 3654, 3635,
  /* 2250 */ 3654, 3670, 3641, 3649, 3655, 3665, 3669, 3657, 3656, 3669, 3654, 3679, 2812, 2812, 2812, 2812, 2812, 2812,
  /* 2268 */ 2812, 2941, 2883, 2883, 3234, 2881, 2881, 2881, 2881, 2812, 2888, 2888, 2887, 2887, 2887, 2886, 2886, 2885,
  /* 2286 */ 2884, 2884, 2884, 2883, 2882, 2882, 2881, 2881, 2888, 2888, 2887, 2887, 2887, 2887, 2887, 2887, 2886, 2885,
  /* 2304 */ 2885, 2885, 2883, 2883, 2882, 2882, 2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881, 2812, 2888, 2887, 2887,
  /* 2322 */ 2887, 2887, 2887, 2887, 2883, 2883, 2883, 2883, 2883, 2886, 2886, 2885, 2884, 2882, 2882, 2882, 2882, 2881,
  /* 2340 */ 2812, 2480, 2812, 2812, 2812, 2812, 2812, 2812, 2812, 3697, 2886, 2886, 2886, 2882, 2812, 3231, 2887, 2886,
  /* 2358 */ 2886, 2886, 2885, 2885, 2884, 2884, 2884, 2883, 2883, 2883, 2882, 2882, 2882, 2881, 2812, 2800, 2812, 2812,
  /* 2376 */ 2812, 2812, 2812, 2812, 2812, 3101, 2888, 2888, 2888, 2888, 2887, 2887, 2886, 2885, 2885, 2885, 2885, 2885,
  /* 2394 */ 2884, 2884, 2884, 2883, 2883, 3691, 3285, 2812, 0, 0, 399, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 403, 0, 0, 0,
  /* 2420 */ 0, 0, 10, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 331, 0, 0, 0, 18, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 253,
  /* 2453 */ 0, 0, 0, 0, 0, 26, 0, 26, 26, 0, 0, 0, 0, 283, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 493, 0, 0, 0, 0, 0,
  /* 2485 */ 185, 0, 0, 4, 4, 4, 2, 4, 4, 4, 0, 0, 0, 4, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 2, 0, 2, 2, 4, 0, 4, 4,
  /* 2520 */ 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 2, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 379, 0, 0, 531, 0, 0, 0, 0, 2, 4,
  /* 2554 */ 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 389, 0, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 4, 0, 4, 4, 0, 0, 0, 4, 4, 0,
  /* 2589 */ 0, 4, 4, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 4, 4, 0, 4, 0, 0, 8, 10, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 4, 0, 4, 4,
  /* 2624 */ 0, 4, 4, 4, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 2, 2, 485, 489, 489, 485, 0, 485, 485,
  /* 2656 */ 485, 2, 0, 0, 0, 0, 0, 375, 0, 0, 565, 485, 485, 485, 485, 485, 485, 485, 485, 489, 485, 489, 485, 491,
  /* 2680 */ 485, 485, 485, 485, 485, 485, 489, 485, 485, 491, 485, 561, 485, 485, 0, 485, 485, 0, 485, 485, 477, 485,
  /* 2702 */ 485, 485, 485, 485, 485, 485, 563, 485, 489, 489, 485, 485, 485, 485, 485, 489, 485, 485, 485, 485, 485,
  /* 2723 */ 491, 485, 489, 489, 489, 563, 477, 491, 485, 485, 485, 485, 485, 477, 0, 485, 485, 2, 2, 2, 2, 2, 2, 2, 2,
  /* 2748 */ 0, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 4, 0, 4, 4, 2, 0, 2, 0, 2, 2, 2, 2, 0,
  /* 2784 */ 0, 0, 0, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 0, 485, 0, 481, 481, 0, 0, 0, 0, 0, 0, 469, 0, 487, 0, 0, 0, 0,
  /* 2816 */ 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 481, 0, 0, 0, 0, 0, 0, 0, 8, 0, 2,
  /* 2851 */ 2, 2, 2, 0, 0, 0, 2, 0, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 479, 0, 0, 0, 0, 0, 0, 0, 10, 12, 0, 0, 0, 0,
  /* 2885 */ 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 139, 0, 0, 0, 4, 14, 0, 0, 0, 0, 427, 0, 0, 0, 0, 421, 0, 0, 0, 0, 459,
  /* 2917 */ 0, 0, 0, 0, 0, 469, 0, 0, 2, 0, 14, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 2, 0, 0, 0, 8, 12, 0, 0, 0, 0, 0,
  /* 2951 */ 323, 0, 0, 0, 0, 14, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 519, 0, 0, 0, 0, 0, 0, 0, 479, 0, 0, 4, 0, 547,
  /* 2984 */ 497, 0, 0, 0, 0, 483, 45, 0, 0, 0, 0, 481, 481, 481, 0, 533, 0, 533, 529, 0, 0, 9, 3, 0, 0, 7, 0, 0, 0, 0,
  /* 3014 */ 551, 0, 113, 0, 0, 0, 0, 0, 0, 0, 481, 0, 0, 4, 373, 391, 385, 385, 385, 0, 499, 499, 385, 373, 567, 391,
  /* 3040 */ 397, 391, 407, 391, 391, 391, 401, 543, 391, 391, 391, 401, 391, 391, 391, 0, 391, 391, 45, 391, 391, 397,
  /* 3062 */ 391, 395, 391, 391, 391, 391, 391, 415, 397, 397, 391, 391, 407, 391, 537, 391, 391, 407, 391, 397, 397,
  /* 3083 */ 397, 539, 383, 391, 391, 391, 395, 391, 405, 391, 397, 397, 391, 45, 391, 391, 391, 555, 0, 0, 0, 0, 6, 0,
  /* 3107 */ 0, 0, 0, 391, 409, 391, 391, 391, 391, 391, 539, 411, 417, 391, 391, 391, 391, 391, 391, 415, 391, 391,
  /* 3129 */ 407, 391, 419, 391, 395, 391, 391, 407, 391, 391, 407, 391, 391, 391, 397, 397, 413, 391, 391, 391, 391,
  /* 3150 */ 383, 45, 391, 391, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 0, 0, 499, 499, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0,
  /* 3182 */ 393, 0, 0, 0, 0, 12, 2, 0, 0, 0, 387, 0, 0, 0, 0, 0, 0, 0, 483, 0, 0, 0, 0, 0, 0, 0, 22, 371, 0, 0, 0, 381,
  /* 3214 */ 0, 0, 371, 0, 0, 0, 0, 0, 0, 553, 0, 371, 0, 0, 555, 0, 26, 26, 26, 0, 0, 0, 0, 0, 0, 26, 26, 26, 0, 0, 0,
  /* 3245 */ 0, 22, 26, 0, 26, 0, 0, 0, 0, 479, 479, 0, 0, 479, 0, 2, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 26, 0, 26, 0, 0,
  /* 3277 */ 0, 0, 185, 2, 2, 2, 0, 26, 0, 26, 26, 0, 0, 0, 0, 0, 26, 26, 6, 0, 8, 0, 0, 0, 26, 26, 26, 26, 26, 0, 0, 0,
  /* 3309 */ 0, 0, 0, 10, 0, 0, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, 0, 12, 0, 0, 26, 0, 0, 26, 0, 0, 26, 26,
  /* 3339 */ 0, 0, 0, 0, 485, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 377, 535, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0, 0,
  /* 3371 */ 467, 0, 0, 0, 0, 345, 0, 0, 0, 0, 463, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 457, 0, 0, 0, 461, 0, 0, 457, 0, 0,
  /* 3403 */ 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 4, 0, 0, 22, 0, 0, 0, 0, 0, 0, 12, 12, 465, 471, 0, 0, 0, 0, 0, 0, 14, 16,
  /* 3435 */ 18, 20, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 6, 0, 4, 0, 0, 0, 0, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 4, 0, 10,
  /* 3469 */ 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 555, 0, 0, 0, 0, 351, 0, 0, 0, 2, 0, 4, 16, 8, 0, 0, 185, 185, 185, 187,
  /* 3500 */ 185, 185, 185, 185, 0, 185, 185, 185, 185, 185, 185, 279, 16, 509, 185, 185, 185, 185, 185, 185, 185, 16,
  /* 3522 */ 16, 185, 0, 16, 185, 0, 185, 185, 16, 185, 185, 185, 185, 185, 185, 185, 185, 517, 185, 185, 279, 185, 185,
  /* 3545 */ 185, 185, 515, 16, 187, 185, 185, 185, 185, 185, 16, 185, 185, 185, 279, 185, 185, 185, 185, 185, 185, 16,
  /* 3567 */ 0, 185, 185, 185, 185, 185, 555, 0, 26, 0, 0, 0, 0, 483, 483, 0, 0, 483, 0, 45, 0, 0, 0, 0, 0, 16, 16, 16,
  /* 3595 */ 16, 16, 16, 16, 16, 0, 16, 16, 16, 0, 16, 16, 16, 16, 0, 16, 0, 16, 16, 16, 0, 16, 16, 16, 16, 16, 16, 0,
  /* 3623 */ 0, 0, 0, 357, 0, 0, 0, 0, 0, 26, 0, 26, 10, 10, 10, 0, 0, 10, 10, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0,
  /* 3653 */ 0, 10, 10, 10, 10, 10, 10, 10, 10, 0, 0, 10, 10, 0, 10, 0, 10, 10, 10, 10, 10, 0, 10, 10, 10, 0, 10, 26,
  /* 3681 */ 26, 26, 0, 0, 0, 0, 377, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0
];

XQueryParser_t.TOKEN =
[
  "%ERROR",
  "PragmaContents",
  "DirCommentContents",
  "DirPIContents",
  "CDataSection",
  "URILiteral",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "NCName",
  "QName",
  "S",
  "S",
  "CharRef",
  "CommentContents",
  "'\"'",
  "'#'",
  "'#)'",
  "''''",
  "'(:'",
  "'*'",
  "'-->'",
  "'/>'",
  "':)'",
  "'::'",
  "':='",
  "'</'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'all'",
  "'any'",
  "'check'",
  "'collection'",
  "'content'",
  "'decimal-separator'",
  "'digit'",
  "'foreach'",
  "'foreign'",
  "'ftand'",
  "'ftnot'",
  "'ftor'",
  "'greatest'",
  "'grouping-separator'",
  "'infinity'",
  "'inherit'",
  "'insensitive'",
  "'json'",
  "'key'",
  "'least'",
  "'levels'",
  "'lowercase'",
  "'minus-sign'",
  "'most'",
  "'next'",
  "'no-inherit'",
  "'no-preserve'",
  "'not'",
  "'occurs'",
  "'of'",
  "'on'",
  "'paragraph'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'phrase'",
  "'position'",
  "'preserve'",
  "'previous'",
  "'relationship'",
  "'sensitive'",
  "'sentence'",
  "'skip'",
  "'strip'",
  "'then'",
  "'unique'",
  "'uppercase'",
  "'using'",
  "'weight'",
  "'when'",
  "'without'",
  "'word'",
  "'zero-digit'",
  "'{{'",
  "'}}'",
  "EOF",
  "'!='",
  "'('",
  "'(#'",
  "')'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'//'",
  "':'",
  "';'",
  "'<'",
  "'<!--'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'>'",
  "'>='",
  "'>>'",
  "'['",
  "']'",
  "'append'",
  "'by'",
  "'contains'",
  "'diacritics'",
  "'different'",
  "'distance'",
  "'entire'",
  "'exactly'",
  "'from'",
  "'language'",
  "'paragraphs'",
  "'same'",
  "'sentences'",
  "'stemming'",
  "'stop'",
  "'structured-item'",
  "'thesaurus'",
  "'times'",
  "'wildcards'",
  "'window'",
  "'words'",
  "'{|'",
  "'|'",
  "'||'",
  "'|}'",
  "'}'",
  "Wildcard",
  "EQName",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "'!'",
  "'$'",
  "'%'",
  "'.'",
  "'..'",
  "'/'",
  "'after'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'break'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'child'",
  "'collation'",
  "'comment'",
  "'constraint'",
  "'construction'",
  "'context'",
  "'continue'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'eq'",
  "'every'",
  "'except'",
  "'exit'",
  "'external'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'ft-option'",
  "'function'",
  "'ge'",
  "'group'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'index'",
  "'insert'",
  "'instance'",
  "'integrity'",
  "'intersect'",
  "'into'",
  "'is'",
  "'item'",
  "'json-item'",
  "'last'",
  "'lax'",
  "'le'",
  "'let'",
  "'loop'",
  "'lt'",
  "'mod'",
  "'modify'",
  "'module'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'no'",
  "'node'",
  "'nodes'",
  "'object'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'parent'",
  "'preceding'",
  "'preceding-sibling'",
  "'processing-instruction'",
  "'rename'",
  "'replace'",
  "'return'",
  "'returning'",
  "'revalidation'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'score'",
  "'self'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'strict'",
  "'switch'",
  "'text'",
  "'to'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unordered'",
  "'updating'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'where'",
  "'while'",
  "'with'",
  "'xquery'",
  "'{'"
];

                                                            // line 1123 "XQueryParser.ebnf"
                                                            });
                                                            // line 25786 "XQueryParser_t.js"
// End
