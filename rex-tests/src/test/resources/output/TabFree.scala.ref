// This file was generated on Sun Oct 27, 2024 20:10 (UTC+01) by REx v5.58 which is Copyright (c) 1979-2024 by Gunther Rademacher <grd@gmx.net>
// REx command line: -q TabFree.ebnf -scala -performance -tree

import java.io.File
import collection.mutable.ArrayBuffer

class TabFree {

  def this(string: String, eh: TabFree.EventHandler) = {
    this()
    initialize(string, eh)
  }

  def initialize(source: String, parsingEventHandler: TabFree.EventHandler): Unit = {
    eventHandler = parsingEventHandler
    input = source
    size = source.length
    reset(0, 0, 0)
  }

  def getInput: String = {
    return input
  }

  def getTokenOffset: Int = {
    return b0
  }

  def getTokenEnd: Int = {
    return e0
  }

  def reset(l: Int, b: Int, e: Int): Unit = {
    b0 = b; e0 = b
    l1 = l; b1 = b; e1 = e
    end = e
    eventHandler.reset(input)
  }

  def reset: Unit = {
    reset(0, 0, 0)
  }

  def parse_TabFree: Unit = {
    eventHandler.startNonterminal("TabFree", e0)
    lookahead1(1)                   // Line | LF | EOF
    if (l1 == 1) {                  // Line
      consume(1)                    // Line
    }
    var c1 = true
    while (c1) {
      lookahead1(0)                 // LF | EOF
      if (l1 != 2) {                // LF
        c1 = false
      }
      else {
        consume(2)                  // LF
        lookahead1(1)               // Line | LF | EOF
        if (l1 == 1) {              // Line
          consume(1)                // Line
        }
      }
    }
    consume(3)                      // EOF
    eventHandler.endNonterminal("TabFree", e0)
  }

  def getErrorMessage(e: TabFree.ParseException) = {
    var message = e.getMessage
    val tokenSet = TabFree.getExpectedTokenSet(e)
    val found = TabFree.getOffendingToken(e)
    val size = e.end - e.begin
    message += (if (found == null) "" else ", found " + found) + "\nwhile expecting " +
      (if (tokenSet.length == 1) tokenSet(0) else "[" + (tokenSet mkString ", ") + "]") + "\n" +
      (if (size == 0 || found != null) "" else "after successfully scanning " + size + " characters beginning ")
    val prefix = input.substring(0, e.begin)
    val line = prefix.replaceAll("[^\n]", "").length + 1
    val column = prefix.length - prefix.lastIndexOf('\n')
    message +
      "at line " + line + ", column " + column + ":\n..." +
      input.substring(e.begin, math.min(input.length, e.begin + 64)) + "..."
  }

  private def consume(t: Int): Unit = {
    if (l1 == t) {
      eventHandler.terminal(TabFree.TOKEN(l1), b1, e1)
      b0 = b1; e0 = e1; l1 = 0
    }
    else {
      error(b1, e1, 0, l1, t)
    }
  }

  private def lookahead1(tokenSetId: Int): Unit = {
    if (l1 == 0) {
      l1 = matcher(tokenSetId)
      b1 = begin
      e1 = end
    }
  }

  def error(b: Int, e: Int, s: Int, l: Int, t: Int): Int = {
    throw new TabFree.ParseException(b, e, s, l, t)
  }

  private def matcher(tokenSetId: Int) = {
    begin = end
    var current = end
    var result = TabFree.INITIAL(tokenSetId)
    var state = 0
    var code = result & 7

    while (code != 0) {
      var charclass = -1
      var c0: Int = if (current < size) input(current) else 0
      current += 1
      if (c0 < 0x80) {
        charclass = TabFree.MAP0(c0)
      }
      else if (c0 < 0xd800) {
        val c1 = c0 >> 5
        charclass = TabFree.MAP1((c0 & 31) + TabFree.MAP1((c1 & 31) + TabFree.MAP1(c1 >> 5)))
      }
      else {
        if (c0 < 0xdc00) {
          val c1 = if (current < size) input(current) else 0
          if (c1 >= 0xdc00 && c1 < 0xe000) {
            current += 1
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000
          }
        }

        var lo = 0
        var hi = 1
        var m = 1
        while (charclass < 0) {
          if (TabFree.MAP2(m) > c0) hi = m - 1
          else if (TabFree.MAP2(2 + m) < c0) lo = m + 1
          else charclass = TabFree.MAP2(4 + m)
          if (lo > hi) charclass = 0 else m = (hi + lo) >> 1
        }
      }

      state = code
      val i0 = (charclass << 2) + code - 1
      code = TabFree.TRANSITION((i0 & 1) + TabFree.TRANSITION(i0 >> 1))

      if (code > 7) {
        result = code
        code &= 7
        end = current
      }
    }

    result >>= 3
    if (result == 0) {
      end = current - 1
      val c1 = if (end < size) input(end) else 0
      if (c1 >= 0xdc00 && c1 < 0xe000) {
        end -= 1
      }
      error(begin, end, state, -1, -1)
    }
    else {
      if (end > size) end = size
      (result & 7) - 1
    }
  }

  var begin = 0
  var end = 0

  var b0 = 0
  var e0 = 0
  var l1 = 0
  var b1 = 0
  var e1 = 0
  var eventHandler: TabFree.EventHandler = null
  var input: String = null
  var size = 0
}

object TabFree {

  def getOffendingToken(e: ParseException) = {
    if (e.offending < 0) null else TOKEN(e.offending)
  }

  class ParseException(val begin: Int, val end: Int, val state: Int, val offending: Int, val expected: Int) extends RuntimeException {

    override def getMessage = {
      if (offending < 0) "lexical analysis failed" else "syntax error"
    }
  }

  def getExpectedTokenSet(e: ParseException) = {
    if (e.expected < 0) {
      getTokenSet(- e.state)
    }
    else {
      Array(TOKEN(e.expected))
    }
  }

  trait EventHandler {
    def reset(string: String): Unit
    def startNonterminal(name: String, begin: Int): Unit
    def endNonterminal(name: String, end: Int): Unit
    def terminal(name: String, begin: Int, end: Int): Unit
    def whitespace(begin: Int, end: Int): Unit
  }

  class TopDownTreeBuilder extends EventHandler {
    private var input: String = null
    private var stack = new ArrayBuffer[Nonterminal](64)
    private var top = -1

    override def reset(input: String): Unit = {
      this.input = input
      top = -1
    }

    override def startNonterminal(name: String, begin: Int): Unit = {
      val nonterminal = new Nonterminal(name, begin, begin, ArrayBuffer[Symbol]())
      if (top >= 0) addChild(nonterminal)
      top += 1
      if (top == stack.length) stack += nonterminal else stack(top) = nonterminal
    }

    override def endNonterminal(name: String, end: Int): Unit = {
      var nonterminal = stack(top)
      nonterminal.end = end
      if (top > 0) top -= 1
    }

    override def terminal(name: String, begin: Int, end: Int): Unit = {
      addChild(new Terminal(name, begin, end))
    }

    override def whitespace(begin: Int, end: Int): Unit = {
    }

    private def addChild(s: Symbol): Unit = {
      var current = stack(top)
      current.children += s
    }

    def serialize(e: EventHandler): Unit = {
      e.reset(input)
      stack(0).send(e)
    }
  }

  abstract class Symbol(n: String, b: Int, e: Int) {
    var name = n
    var begin = b
    var end = e

    def send(e: EventHandler): Unit
  }

  class Terminal(name: String, begin: Int, end: Int) extends Symbol(name, begin, end) {
    override def send(e: EventHandler): Unit = {
      e.terminal(name, begin, end)
    }
  }

  class Nonterminal(name: String, begin: Int, end: Int, c: ArrayBuffer[Symbol]) extends Symbol(name, begin, end) {
    var children = c

    override def send(e: EventHandler): Unit = {
      e.startNonterminal(name, begin)
      var pos = begin
      for (c <- children) {
        if (pos < c.begin) e.whitespace(pos, c.begin)
        c.send(e)
        pos = c.end
      }
      if (pos < end) e.whitespace(pos, end)
      e.endNonterminal(name, end)
    }
  }

  private class ContentCounter extends EventHandler {
    var length = 0
    def reset(string: String): Unit = {length = 0}
    def startNonterminal(name: String, begin: Int): Unit = {}
    def endNonterminal(name: String, end: Int): Unit = {}
    def terminal(name: String, begin: Int, end: Int): Unit = {length += end - begin}
    def whitespace(begin: Int, end: Int): Unit = {length += end - begin}
  }

  private class ParseJob(val name: String, val input: String) {
    var contentCounter = new ContentCounter
    var parser = new TabFree(input, contentCounter)
  }

  private def collectInput(name: String, content: String): Unit = {
    if (! quiet) println("loading " + name)
    parsers += new ParseJob(name, content)
  }

  private def findFiles(ending: String)(f: File): List[File] = {
    val files = f.listFiles.toList
    files.filter(_.getName.endsWith(ending)) ++
    files.filter(_.isDirectory).flatMap(findFiles(ending))
  }

  private var quiet = false
  private var parsed: Long = 0
  private var errorCount = 0
  private var parsers = ArrayBuffer[ParseJob]()

  def main(args: Array[String]): Unit = {
    if (args.length == 0) {
      println("Usage: scala TabFree [-q] [-r N] [-t N] ENDING...")
      println
      println("  parse all files that have names ending with ENDING, in current dir and below,")
      println("  and display performance summary.")
      println
      println("  -q     do not show file names")
      println("  -r N   repeat N times")
      println("  -t N   repeat until N seconds have elapsed")
    }
    else {
      var repeat = 1
      var timeout = 0
      var i = 0
      while (i < args.length && args(i).startsWith("-")) {
        val option = if (args(i).length == 2) args(i)(1) else ' '
        option match {
        case 'q' =>
          quiet = true
        case 'r' =>
          i += 1
          repeat = args(i).toInt
          timeout = 0
        case 't' =>
          repeat = 0
          i += 1
          timeout = 1000 * args(i).toInt
        case _ =>
          throw new IllegalArgumentException("invalid option: " + args(i))
        }
        i += 1
      }

      var start = System.currentTimeMillis

      while (i < args.length) {
        findFiles(args(i))(new File(".")) foreach (f => collectInput(f.getPath, read(f.getPath)))
        i += 1
      }

      if (! parsers.isEmpty) {

        var msec = System.currentTimeMillis - start

        if (! quiet) println
        println("loaded " + parsers.size + " file" +
                (if (parsers.size == 1) "" else "s") +
                " in " + msec + " msec")
        if (! quiet) println
        Console.flush

        start = System.currentTimeMillis
        i = 0
        var continue = true
        while (continue) {
          if (repeat != 0 && i >= repeat) {
            continue = false
          }
          else if (timeout != 0 && System.currentTimeMillis - start >= timeout) {
            continue = false
          }
          else {
            for (job <- parsers) {
              if (job.parser != null) {
                try {
                  if (! quiet) print("parsing " + job.name)
                  job.parser.reset(0, 0, 0)
                  job.parser.parse_TabFree
                  if (! quiet) println
                  if (job.contentCounter.length != job.input.length) {
                    throw new RuntimeException("content counter saw " + job.contentCounter.length + ", but input length is " + job.input.length);
                  }
                  parsed += job.input.length
                }
                catch {
                  case pe: ParseException =>
                    errorCount += 1
                    if (quiet) print("parsing " + job.name)
                    println(": error: " + job.parser.getErrorMessage(pe))
                    job.parser = null
                }
              }
            }
            i += 1
          }
        }

        msec = System.currentTimeMillis - start
        val mbPerSec = if (msec != 0) new java.text.DecimalFormat("0.##").format(parsed / 1024e0 / 1024e0 * 1000e0 / msec) else null

        if (! quiet) println
        print("parsed " + parsed + " byte" + (if (parsed == 1) "" else "s") +
              " in " + msec + " msec")
        if (mbPerSec != null) {
          print(" (" + mbPerSec + " MB/sec)")
        }
        println
        println("" + errorCount + " error" + (if (errorCount == 1) "" else "s"))
      }
    }
  }

  private def read(fileName: String) = {
    if (fileName(0) == '{' && fileName(fileName.length - 1) == '}') {
      fileName.substring(1, fileName.length - 1)
    }
    else {
      val file = io.Source.fromFile(fileName, "utf-8")
      val content = file.mkString
      file.close
      if (content(0) == '\ufeff') content.substring(1) else content
    }
  }

  private def getTokenSet(tokenSetId: Int) = {
    var expected = ArrayBuffer[String]()
    val s = if (tokenSetId < 0) - tokenSetId else INITIAL(tokenSetId) & 7
    var i = 0
    while (i < 4) {
      var j = i
      val i0 = (i >> 5) * 4 + s - 1
      var f = EXPECTED(i0)
      while (f != 0) {
        if ((f & 1) != 0) {
          expected += TOKEN(j)
        }
        f >>>= 1
        j += 1
      }
      i += 32
    }
    expected.toArray
  }

  private final val MAP0 = Array(
    /*   0 */ 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4,
    /*  35 */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    /*  70 */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    /* 105 */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
  )

  private final val MAP1 = Array(
    /*   0 */ 54, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
    /*  26 */ 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
    /*  52 */ 56, 56, 88, 120, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
    /*  74 */ 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    /* 100 */ 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    /* 135 */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
  )

  private final val MAP2 = Array(
    /* 0 */ 57344, 65536, 65533, 1114111, 4, 4
  )

  private final val INITIAL = Array(
    /* 0 */ 1, 2
  )

  private final val TRANSITION = Array(
    /*  0 */ 14, 14, 12, 13, 17, 14, 15, 15, 19, 19, 21, 14, 24, 24, 0, 0, 4, 3, 3, 0, 20, 32, 32
  )

  private final val EXPECTED = Array(
    /* 0 */ 12, 14, 4, 2
  )

  private final val TOKEN = Array(
    "(0)",
    "Line",
    "LF",
    "EOF"
  )
}

// End
