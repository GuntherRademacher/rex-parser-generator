// This file was generated on Sun Jun 6, 2021 17:04 (UTC+02) by REx v5.53 which is Copyright (c) 1979-2021 by Gunther Rademacher <grd@gmx.net>
// REx command line: -q xpath20.ebnf -javascript -smaller

function xpath20(string)
{
  init(string);

  var thisParser = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var begin = b;
    var end = e;
    var state = s;
    var offending = o;
    var expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};
    this.isAmbiguousInput = function() {return false;};

    this.getMessage = function()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    };
  };

  function init(source)
  {
    input = source;
    size = source.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  this.getTokenOffset = function()
  {
    return b0;
  };

  this.getTokenEnd = function()
  {
    return e0;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0; b2 = 0; e2 = 0;
    end = e;
  }

  this.reset = function(l, b, e)
  {
    reset(l, b, e);
  };

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? xpath20.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = xpath20.getTokenSet(- e.getState());
    }
    else
    {
      expected = [xpath20.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var message = e.getMessage();
    var found = this.getOffendingToken(e);
    var tokenSet = this.getExpectedTokenSet(e);
    var size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XPath = function()
  {
    lookahead1W(30);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
    parse_Expr();
    consume(2);                     // EOF
  };

  function parse_Expr()
  {
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 21)                 // ','
      {
        break;
      }
      consume(21);                  // ','
      lookahead1W(30);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
      parse_ExprSingle();
    }
  }

  function parse_ExprSingle()
  {
    switch (l1)
    {
    case 65:                        // 'if'
      lookahead2W(22);              // EOF | S^WhiteSpace | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' | 'cast' |
                                    // 'castable' | 'div' | 'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'return' |
                                    // 'satisfies' | 'to' | 'treat' | 'union' | '|'
      break;
    case 57:                        // 'every'
    case 61:                        // 'for'
    case 88:                        // 'some'
      lookahead2W(24);              // EOF | S^WhiteSpace | '!=' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                    // 'cast' | 'castable' | 'div' | 'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'return' |
                                    // 'satisfies' | 'to' | 'treat' | 'union' | '|'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1725:                      // 'for' '$'
      parse_ForExpr();
      break;
    case 1721:                      // 'every' '$'
    case 1752:                      // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 1857:                      // 'if' '('
      parse_IfExpr();
      break;
    default:
      parse_OrExpr();
    }
  }

  function parse_ForExpr()
  {
    parse_SimpleForClause();
    consume(83);                    // 'return'
    lookahead1W(30);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
    parse_ExprSingle();
  }

  function parse_SimpleForClause()
  {
    consume(61);                    // 'for'
    lookahead1W(1);                 // S^WhiteSpace | '$' | '(:'
    consume(13);                    // '$'
    lookahead1W(26);                // QName^Token | S^WhiteSpace | '(:' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'attribute' | 'cast' | 'castable' | 'child' | 'comment' | 'descendant' |
                                    // 'descendant-or-self' | 'div' | 'document-node' | 'element' | 'else' |
                                    // 'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' |
                                    // 'or' | 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union'
    parse_VarName();
    lookahead1W(6);                 // S^WhiteSpace | '(:' | 'in'
    consume(66);                    // 'in'
    lookahead1W(30);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 21)                 // ','
      {
        break;
      }
      consume(21);                  // ','
      lookahead1W(1);               // S^WhiteSpace | '$' | '(:'
      consume(13);                  // '$'
      lookahead1W(26);              // QName^Token | S^WhiteSpace | '(:' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'attribute' | 'cast' | 'castable' | 'child' | 'comment' | 'descendant' |
                                    // 'descendant-or-self' | 'div' | 'document-node' | 'element' | 'else' |
                                    // 'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' |
                                    // 'or' | 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union'
      parse_VarName();
      lookahead1W(6);               // S^WhiteSpace | '(:' | 'in'
      consume(66);                  // 'in'
      lookahead1W(30);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
      parse_ExprSingle();
    }
  }

  function parse_QuantifiedExpr()
  {
    switch (l1)
    {
    case 88:                        // 'some'
      consume(88);                  // 'some'
      break;
    default:
      consume(57);                  // 'every'
    }
    lookahead1W(1);                 // S^WhiteSpace | '$' | '(:'
    consume(13);                    // '$'
    lookahead1W(26);                // QName^Token | S^WhiteSpace | '(:' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'attribute' | 'cast' | 'castable' | 'child' | 'comment' | 'descendant' |
                                    // 'descendant-or-self' | 'div' | 'document-node' | 'element' | 'else' |
                                    // 'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' |
                                    // 'or' | 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union'
    parse_VarName();
    lookahead1W(6);                 // S^WhiteSpace | '(:' | 'in'
    consume(66);                    // 'in'
    lookahead1W(30);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 21)                 // ','
      {
        break;
      }
      consume(21);                  // ','
      lookahead1W(1);               // S^WhiteSpace | '$' | '(:'
      consume(13);                  // '$'
      lookahead1W(26);              // QName^Token | S^WhiteSpace | '(:' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'attribute' | 'cast' | 'castable' | 'child' | 'comment' | 'descendant' |
                                    // 'descendant-or-self' | 'div' | 'document-node' | 'element' | 'else' |
                                    // 'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' |
                                    // 'or' | 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union'
      parse_VarName();
      lookahead1W(6);               // S^WhiteSpace | '(:' | 'in'
      consume(66);                  // 'in'
      lookahead1W(30);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
      parse_ExprSingle();
    }
    consume(84);                    // 'satisfies'
    lookahead1W(30);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
    parse_ExprSingle();
  }

  function parse_IfExpr()
  {
    consume(65);                    // 'if'
    lookahead1W(2);                 // S^WhiteSpace | '(' | '(:'
    consume(14);                    // '('
    lookahead1W(30);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
    parse_Expr();
    consume(16);                    // ')'
    lookahead1W(8);                 // S^WhiteSpace | '(:' | 'then'
    consume(90);                    // 'then'
    lookahead1W(30);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
    parse_ExprSingle();
    consume(54);                    // 'else'
    lookahead1W(30);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
    parse_ExprSingle();
  }

  function parse_OrExpr()
  {
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 78)                 // 'or'
      {
        break;
      }
      consume(78);                  // 'or'
      lookahead1W(30);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
      parse_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    parse_ComparisonExpr();
    for (;;)
    {
      if (l1 != 42)                 // 'and'
      {
        break;
      }
      consume(42);                  // 'and'
      lookahead1W(30);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
      parse_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    parse_RangeExpr();
    if (l1 != 2                     // EOF
     && l1 != 16                    // ')'
     && l1 != 21                    // ','
     && l1 != 39                    // ']'
     && l1 != 42                    // 'and'
     && l1 != 54                    // 'else'
     && l1 != 78                    // 'or'
     && l1 != 83                    // 'return'
     && l1 != 84)                   // 'satisfies'
    {
      switch (l1)
      {
      case 56:                      // 'eq'
      case 62:                      // 'ge'
      case 63:                      // 'gt'
      case 71:                      // 'le'
      case 72:                      // 'lt'
      case 75:                      // 'ne'
        parse_ValueComp();
        break;
      case 30:                      // '<<'
      case 35:                      // '>>'
      case 69:                      // 'is'
        parse_NodeComp();
        break;
      default:
        parse_GeneralComp();
      }
      lookahead1W(30);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
      parse_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    parse_AdditiveExpr();
    if (l1 == 91)                   // 'to'
    {
      consume(91);                  // 'to'
      lookahead1W(30);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
      parse_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 19                  // '+'
       && l1 != 22)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 19:                      // '+'
        consume(19);                // '+'
        break;
      default:
        consume(22);                // '-'
      }
      lookahead1W(30);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
      parse_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 17                  // '*'
       && l1 != 51                  // 'div'
       && l1 != 64                  // 'idiv'
       && l1 != 73)                 // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 17:                      // '*'
        consume(17);                // '*'
        break;
      case 51:                      // 'div'
        consume(51);                // 'div'
        break;
      case 64:                      // 'idiv'
        consume(64);                // 'idiv'
        break;
      default:
        consume(73);                // 'mod'
      }
      lookahead1W(30);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
      parse_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 94                  // 'union'
       && l1 != 95)                 // '|'
      {
        break;
      }
      switch (l1)
      {
      case 94:                      // 'union'
        consume(94);                // 'union'
        break;
      default:
        consume(95);                // '|'
      }
      lookahead1W(30);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
      parse_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(14);              // EOF | S^WhiteSpace | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'div' | 'else' | 'eq' | 'except' |
                                    // 'ge' | 'gt' | 'idiv' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'return' | 'satisfies' | 'to' | 'union' | '|'
      if (l1 != 58                  // 'except'
       && l1 != 68)                 // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 68:                      // 'intersect'
        consume(68);                // 'intersect'
        break;
      default:
        consume(58);                // 'except'
      }
      lookahead1W(30);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
      parse_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    parse_TreatExpr();
    lookahead1W(15);                // EOF | S^WhiteSpace | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'div' | 'else' | 'eq' | 'except' |
                                    // 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' |
                                    // 'ne' | 'or' | 'return' | 'satisfies' | 'to' | 'union' | '|'
    if (l1 == 67)                   // 'instance'
    {
      consume(67);                  // 'instance'
      lookahead1W(7);               // S^WhiteSpace | '(:' | 'of'
      consume(77);                  // 'of'
      lookahead1W(26);              // QName^Token | S^WhiteSpace | '(:' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'attribute' | 'cast' | 'castable' | 'child' | 'comment' | 'descendant' |
                                    // 'descendant-or-self' | 'div' | 'document-node' | 'element' | 'else' |
                                    // 'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' |
                                    // 'or' | 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union'
      parse_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    parse_CastableExpr();
    lookahead1W(16);                // EOF | S^WhiteSpace | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'div' | 'else' | 'eq' | 'except' |
                                    // 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' |
                                    // 'ne' | 'or' | 'return' | 'satisfies' | 'to' | 'treat' | 'union' | '|'
    if (l1 == 92)                   // 'treat'
    {
      consume(92);                  // 'treat'
      lookahead1W(5);               // S^WhiteSpace | '(:' | 'as'
      consume(43);                  // 'as'
      lookahead1W(26);              // QName^Token | S^WhiteSpace | '(:' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'attribute' | 'cast' | 'castable' | 'child' | 'comment' | 'descendant' |
                                    // 'descendant-or-self' | 'div' | 'document-node' | 'element' | 'else' |
                                    // 'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' |
                                    // 'or' | 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union'
      parse_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    parse_CastExpr();
    lookahead1W(17);                // EOF | S^WhiteSpace | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'castable' | 'div' | 'else' |
                                    // 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'lt' | 'mod' | 'ne' | 'or' | 'return' | 'satisfies' | 'to' | 'treat' | 'union' |
                                    // '|'
    if (l1 == 46)                   // 'castable'
    {
      consume(46);                  // 'castable'
      lookahead1W(5);               // S^WhiteSpace | '(:' | 'as'
      consume(43);                  // 'as'
      lookahead1W(26);              // QName^Token | S^WhiteSpace | '(:' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'attribute' | 'cast' | 'castable' | 'child' | 'comment' | 'descendant' |
                                    // 'descendant-or-self' | 'div' | 'document-node' | 'element' | 'else' |
                                    // 'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' |
                                    // 'or' | 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union'
      parse_SingleType();
    }
  }

  function parse_CastExpr()
  {
    parse_UnaryExpr();
    if (l1 == 45)                   // 'cast'
    {
      consume(45);                  // 'cast'
      lookahead1W(5);               // S^WhiteSpace | '(:' | 'as'
      consume(43);                  // 'as'
      lookahead1W(26);              // QName^Token | S^WhiteSpace | '(:' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'attribute' | 'cast' | 'castable' | 'child' | 'comment' | 'descendant' |
                                    // 'descendant-or-self' | 'div' | 'document-node' | 'element' | 'else' |
                                    // 'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' |
                                    // 'or' | 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union'
      parse_SingleType();
    }
  }

  function parse_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(30);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
      if (l1 != 19                  // '+'
       && l1 != 22)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 22:                      // '-'
        consume(22);                // '-'
        break;
      default:
        consume(19);                // '+'
      }
    }
    parse_ValueExpr();
  }

  function parse_ValueExpr()
  {
    parse_PathExpr();
  }

  function parse_GeneralComp()
  {
    switch (l1)
    {
    case 32:                        // '='
      consume(32);                  // '='
      break;
    case 12:                        // '!='
      consume(12);                  // '!='
      break;
    case 29:                        // '<'
      consume(29);                  // '<'
      break;
    case 31:                        // '<='
      consume(31);                  // '<='
      break;
    case 33:                        // '>'
      consume(33);                  // '>'
      break;
    default:
      consume(34);                  // '>='
    }
  }

  function parse_ValueComp()
  {
    switch (l1)
    {
    case 56:                        // 'eq'
      consume(56);                  // 'eq'
      break;
    case 75:                        // 'ne'
      consume(75);                  // 'ne'
      break;
    case 72:                        // 'lt'
      consume(72);                  // 'lt'
      break;
    case 71:                        // 'le'
      consume(71);                  // 'le'
      break;
    case 63:                        // 'gt'
      consume(63);                  // 'gt'
      break;
    default:
      consume(62);                  // 'ge'
    }
  }

  function parse_NodeComp()
  {
    switch (l1)
    {
    case 69:                        // 'is'
      consume(69);                  // 'is'
      break;
    case 30:                        // '<<'
      consume(30);                  // '<<'
      break;
    default:
      consume(35);                  // '>>'
    }
  }

  function parse_PathExpr()
  {
    switch (l1)
    {
    case 25:                        // '/'
      consume(25);                  // '/'
      lookahead1W(32);              // EOF | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // Wildcard | QName^Token | S^WhiteSpace | '!=' | '$' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '@' | ']' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union' | '|'
      switch (l1)
      {
      case 2:                       // EOF
      case 12:                      // '!='
      case 16:                      // ')'
      case 17:                      // '*'
      case 19:                      // '+'
      case 21:                      // ','
      case 22:                      // '-'
      case 29:                      // '<'
      case 30:                      // '<<'
      case 31:                      // '<='
      case 32:                      // '='
      case 33:                      // '>'
      case 34:                      // '>='
      case 35:                      // '>>'
      case 39:                      // ']'
      case 95:                      // '|'
        break;
      default:
        parse_RelativePathExpr();
      }
      break;
    case 26:                        // '//'
      consume(26);                  // '//'
      lookahead1W(29);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '.' | '..' | '@' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' | 'child' |
                                    // 'comment' | 'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                    // 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' |
                                    // 'or' | 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union'
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    parse_StepExpr();
    for (;;)
    {
      if (l1 != 25                  // '/'
       && l1 != 26)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 25:                      // '/'
        consume(25);                // '/'
        break;
      default:
        consume(26);                // '//'
      }
      lookahead1W(29);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '.' | '..' | '@' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' | 'child' |
                                    // 'comment' | 'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                    // 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' |
                                    // 'or' | 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union'
      parse_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    switch (l1)
    {
    case 40:                        // 'ancestor'
    case 41:                        // 'ancestor-or-self'
    case 47:                        // 'child'
    case 49:                        // 'descendant'
    case 50:                        // 'descendant-or-self'
    case 59:                        // 'following'
    case 60:                        // 'following-sibling'
    case 74:                        // 'namespace'
    case 79:                        // 'parent'
    case 80:                        // 'preceding'
    case 81:                        // 'preceding-sibling'
    case 87:                        // 'self'
      lookahead2W(25);              // EOF | S^WhiteSpace | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '::' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                    // 'cast' | 'castable' | 'div' | 'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'return' |
                                    // 'satisfies' | 'to' | 'treat' | 'union' | '|'
      break;
    case 9:                         // QName^Token
    case 42:                        // 'and'
    case 45:                        // 'cast'
    case 46:                        // 'castable'
    case 51:                        // 'div'
    case 54:                        // 'else'
    case 56:                        // 'eq'
    case 57:                        // 'every'
    case 58:                        // 'except'
    case 61:                        // 'for'
    case 62:                        // 'ge'
    case 63:                        // 'gt'
    case 64:                        // 'idiv'
    case 67:                        // 'instance'
    case 68:                        // 'intersect'
    case 69:                        // 'is'
    case 71:                        // 'le'
    case 72:                        // 'lt'
    case 73:                        // 'mod'
    case 75:                        // 'ne'
    case 78:                        // 'or'
    case 83:                        // 'return'
    case 84:                        // 'satisfies'
    case 88:                        // 'some'
    case 91:                        // 'to'
    case 92:                        // 'treat'
    case 94:                        // 'union'
      lookahead2W(22);              // EOF | S^WhiteSpace | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' | 'cast' |
                                    // 'castable' | 'div' | 'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'return' |
                                    // 'satisfies' | 'to' | 'treat' | 'union' | '|'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 3:                         // IntegerLiteral
    case 4:                         // DecimalLiteral
    case 5:                         // DoubleLiteral
    case 6:                         // StringLiteral
    case 13:                        // '$'
    case 14:                        // '('
    case 23:                        // '.'
    case 1801:                      // QName^Token '('
    case 1832:                      // 'ancestor' '('
    case 1833:                      // 'ancestor-or-self' '('
    case 1834:                      // 'and' '('
    case 1837:                      // 'cast' '('
    case 1838:                      // 'castable' '('
    case 1839:                      // 'child' '('
    case 1841:                      // 'descendant' '('
    case 1842:                      // 'descendant-or-self' '('
    case 1843:                      // 'div' '('
    case 1846:                      // 'else' '('
    case 1848:                      // 'eq' '('
    case 1849:                      // 'every' '('
    case 1850:                      // 'except' '('
    case 1851:                      // 'following' '('
    case 1852:                      // 'following-sibling' '('
    case 1853:                      // 'for' '('
    case 1854:                      // 'ge' '('
    case 1855:                      // 'gt' '('
    case 1856:                      // 'idiv' '('
    case 1859:                      // 'instance' '('
    case 1860:                      // 'intersect' '('
    case 1861:                      // 'is' '('
    case 1863:                      // 'le' '('
    case 1864:                      // 'lt' '('
    case 1865:                      // 'mod' '('
    case 1866:                      // 'namespace' '('
    case 1867:                      // 'ne' '('
    case 1870:                      // 'or' '('
    case 1871:                      // 'parent' '('
    case 1872:                      // 'preceding' '('
    case 1873:                      // 'preceding-sibling' '('
    case 1875:                      // 'return' '('
    case 1876:                      // 'satisfies' '('
    case 1879:                      // 'self' '('
    case 1880:                      // 'some' '('
    case 1883:                      // 'to' '('
    case 1884:                      // 'treat' '('
    case 1886:                      // 'union' '('
      parse_FilterExpr();
      break;
    default:
      parse_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    switch (l1)
    {
    case 40:                        // 'ancestor'
    case 41:                        // 'ancestor-or-self'
    case 79:                        // 'parent'
    case 80:                        // 'preceding'
    case 81:                        // 'preceding-sibling'
      lookahead2W(23);              // EOF | S^WhiteSpace | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' | 'cast' |
                                    // 'castable' | 'div' | 'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'return' |
                                    // 'satisfies' | 'to' | 'treat' | 'union' | '|'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 24:                        // '..'
    case 3624:                      // 'ancestor' '::'
    case 3625:                      // 'ancestor-or-self' '::'
    case 3663:                      // 'parent' '::'
    case 3664:                      // 'preceding' '::'
    case 3665:                      // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(21);                // EOF | S^WhiteSpace | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' | 'cast' |
                                    // 'castable' | 'div' | 'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'return' |
                                    // 'satisfies' | 'to' | 'treat' | 'union' | '|'
    parse_PredicateList();
  }

  function parse_ForwardStep()
  {
    switch (l1)
    {
    case 44:                        // 'attribute'
      lookahead2W(25);              // EOF | S^WhiteSpace | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '::' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                    // 'cast' | 'castable' | 'div' | 'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'return' |
                                    // 'satisfies' | 'to' | 'treat' | 'union' | '|'
      break;
    case 47:                        // 'child'
    case 49:                        // 'descendant'
    case 50:                        // 'descendant-or-self'
    case 59:                        // 'following'
    case 60:                        // 'following-sibling'
    case 74:                        // 'namespace'
    case 87:                        // 'self'
      lookahead2W(23);              // EOF | S^WhiteSpace | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' | 'cast' |
                                    // 'castable' | 'div' | 'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'return' |
                                    // 'satisfies' | 'to' | 'treat' | 'union' | '|'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 3628:                      // 'attribute' '::'
    case 3631:                      // 'child' '::'
    case 3633:                      // 'descendant' '::'
    case 3634:                      // 'descendant-or-self' '::'
    case 3643:                      // 'following' '::'
    case 3644:                      // 'following-sibling' '::'
    case 3658:                      // 'namespace' '::'
    case 3671:                      // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(27);              // Wildcard | QName^Token | S^WhiteSpace | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' | 'descendant' |
                                    // 'descendant-or-self' | 'div' | 'document-node' | 'element' | 'else' |
                                    // 'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' |
                                    // 'or' | 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union'
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    switch (l1)
    {
    case 47:                        // 'child'
      consume(47);                  // 'child'
      lookahead1W(4);               // S^WhiteSpace | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 49:                        // 'descendant'
      consume(49);                  // 'descendant'
      lookahead1W(4);               // S^WhiteSpace | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 44:                        // 'attribute'
      consume(44);                  // 'attribute'
      lookahead1W(4);               // S^WhiteSpace | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 87:                        // 'self'
      consume(87);                  // 'self'
      lookahead1W(4);               // S^WhiteSpace | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 50:                        // 'descendant-or-self'
      consume(50);                  // 'descendant-or-self'
      lookahead1W(4);               // S^WhiteSpace | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 60:                        // 'following-sibling'
      consume(60);                  // 'following-sibling'
      lookahead1W(4);               // S^WhiteSpace | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 59:                        // 'following'
      consume(59);                  // 'following'
      lookahead1W(4);               // S^WhiteSpace | '(:' | '::'
      consume(28);                  // '::'
      break;
    default:
      consume(74);                  // 'namespace'
      lookahead1W(4);               // S^WhiteSpace | '(:' | '::'
      consume(28);                  // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    if (l1 == 37)                   // '@'
    {
      consume(37);                  // '@'
    }
    lookahead1W(27);                // Wildcard | QName^Token | S^WhiteSpace | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' | 'descendant' |
                                    // 'descendant-or-self' | 'div' | 'document-node' | 'element' | 'else' |
                                    // 'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' |
                                    // 'or' | 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union'
    parse_NodeTest();
  }

  function parse_ReverseStep()
  {
    switch (l1)
    {
    case 24:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(27);              // Wildcard | QName^Token | S^WhiteSpace | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' | 'descendant' |
                                    // 'descendant-or-self' | 'div' | 'document-node' | 'element' | 'else' |
                                    // 'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' |
                                    // 'or' | 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union'
      parse_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    switch (l1)
    {
    case 79:                        // 'parent'
      consume(79);                  // 'parent'
      lookahead1W(4);               // S^WhiteSpace | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 40:                        // 'ancestor'
      consume(40);                  // 'ancestor'
      lookahead1W(4);               // S^WhiteSpace | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 81:                        // 'preceding-sibling'
      consume(81);                  // 'preceding-sibling'
      lookahead1W(4);               // S^WhiteSpace | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 80:                        // 'preceding'
      consume(80);                  // 'preceding'
      lookahead1W(4);               // S^WhiteSpace | '(:' | '::'
      consume(28);                  // '::'
      break;
    default:
      consume(41);                  // 'ancestor-or-self'
      lookahead1W(4);               // S^WhiteSpace | '(:' | '::'
      consume(28);                  // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    consume(24);                    // '..'
  }

  function parse_NodeTest()
  {
    switch (l1)
    {
    case 44:                        // 'attribute'
    case 48:                        // 'comment'
    case 52:                        // 'document-node'
    case 53:                        // 'element'
    case 76:                        // 'node'
    case 82:                        // 'processing-instruction'
    case 85:                        // 'schema-attribute'
    case 86:                        // 'schema-element'
    case 89:                        // 'text'
      lookahead2W(22);              // EOF | S^WhiteSpace | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' | 'cast' |
                                    // 'castable' | 'div' | 'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'return' |
                                    // 'satisfies' | 'to' | 'treat' | 'union' | '|'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1836:                      // 'attribute' '('
    case 1840:                      // 'comment' '('
    case 1844:                      // 'document-node' '('
    case 1845:                      // 'element' '('
    case 1868:                      // 'node' '('
    case 1874:                      // 'processing-instruction' '('
    case 1877:                      // 'schema-attribute' '('
    case 1878:                      // 'schema-element' '('
    case 1881:                      // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
  }

  function parse_NameTest()
  {
    switch (l1)
    {
    case 7:                         // Wildcard
      consume(7);                   // Wildcard
      break;
    default:
      parse_QName();
    }
  }

  function parse_FilterExpr()
  {
    parse_PrimaryExpr();
    lookahead1W(21);                // EOF | S^WhiteSpace | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' | 'cast' |
                                    // 'castable' | 'div' | 'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'return' |
                                    // 'satisfies' | 'to' | 'treat' | 'union' | '|'
    parse_PredicateList();
  }

  function parse_PredicateList()
  {
    for (;;)
    {
      lookahead1W(21);              // EOF | S^WhiteSpace | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' | 'cast' |
                                    // 'castable' | 'div' | 'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'return' |
                                    // 'satisfies' | 'to' | 'treat' | 'union' | '|'
      if (l1 != 38)                 // '['
      {
        break;
      }
      parse_Predicate();
    }
  }

  function parse_Predicate()
  {
    consume(38);                    // '['
    lookahead1W(30);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
    parse_Expr();
    consume(39);                    // ']'
  }

  function parse_PrimaryExpr()
  {
    switch (l1)
    {
    case 3:                         // IntegerLiteral
    case 4:                         // DecimalLiteral
    case 5:                         // DoubleLiteral
    case 6:                         // StringLiteral
      parse_Literal();
      break;
    case 13:                        // '$'
      parse_VarRef();
      break;
    case 14:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 23:                        // '.'
      parse_ContextItemExpr();
      break;
    default:
      parse_FunctionCall();
    }
  }

  function parse_Literal()
  {
    switch (l1)
    {
    case 6:                         // StringLiteral
      consume(6);                   // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    switch (l1)
    {
    case 3:                         // IntegerLiteral
      consume(3);                   // IntegerLiteral
      break;
    case 4:                         // DecimalLiteral
      consume(4);                   // DecimalLiteral
      break;
    default:
      consume(5);                   // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    consume(13);                    // '$'
    lookahead1W(26);                // QName^Token | S^WhiteSpace | '(:' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'attribute' | 'cast' | 'castable' | 'child' | 'comment' | 'descendant' |
                                    // 'descendant-or-self' | 'div' | 'document-node' | 'element' | 'else' |
                                    // 'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' |
                                    // 'or' | 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union'
    parse_VarName();
  }

  function parse_VarName()
  {
    parse_QName();
  }

  function parse_ParenthesizedExpr()
  {
    consume(14);                    // '('
    lookahead1W(31);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | ')' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' |
                                    // 'cast' | 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' |
                                    // 'div' | 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                    // 'every' | 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' |
                                    // 'idiv' | 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
    if (l1 != 16)                   // ')'
    {
      parse_Expr();
    }
    consume(16);                    // ')'
  }

  function parse_ContextItemExpr()
  {
    consume(23);                    // '.'
  }

  function parse_FunctionCall()
  {
    parse_FunctionName();
    lookahead1W(2);                 // S^WhiteSpace | '(' | '(:'
    consume(14);                    // '('
    lookahead1W(31);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | ')' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' |
                                    // 'cast' | 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' |
                                    // 'div' | 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                    // 'every' | 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' |
                                    // 'idiv' | 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
    if (l1 != 16)                   // ')'
    {
      parse_ExprSingle();
      for (;;)
      {
        if (l1 != 21)               // ','
        {
          break;
        }
        consume(21);                // ','
        lookahead1W(30);            // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName^Token | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                    // 'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                    // 'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                    // 'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' | 'to' |
                                    // 'treat' | 'typeswitch' | 'union'
        parse_ExprSingle();
      }
    }
    consume(16);                    // ')'
  }

  function parse_SingleType()
  {
    parse_AtomicType();
    lookahead1W(19);                // EOF | S^WhiteSpace | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'and' | 'castable' | 'div' |
                                    // 'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'return' | 'satisfies' | 'to' |
                                    // 'treat' | 'union' | '|'
    if (l1 == 36)                   // '?'
    {
      consume(36);                  // '?'
    }
  }

  function parse_SequenceType()
  {
    switch (l1)
    {
    case 55:                        // 'empty-sequence'
      lookahead2W(20);              // EOF | S^WhiteSpace | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | '+' | ',' |
                                    // '-' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'and' | 'div' |
                                    // 'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'return' | 'satisfies' | 'to' |
                                    // 'union' | '|'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1847:                      // 'empty-sequence' '('
      consume(55);                  // 'empty-sequence'
      lookahead1W(2);               // S^WhiteSpace | '(' | '(:'
      consume(14);                  // '('
      lookahead1W(3);               // S^WhiteSpace | '(:' | ')'
      consume(16);                  // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(18);              // EOF | S^WhiteSpace | '!=' | '(:' | ')' | '*' | '*' | '+' | '+' | ',' | '-' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'and' | 'div' |
                                    // 'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'return' | 'satisfies' | 'to' |
                                    // 'union' | '|'
      if (l1 == 18                  // '*'
       || l1 == 20                  // '+'
       || l1 == 36)                 // '?'
      {
        parse_OccurrenceIndicator();
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 36:                        // '?'
      consume(36);                  // '?'
      break;
    case 18:                        // '*'
      consume(18);                  // '*'
      break;
    default:
      consume(20);                  // '+'
    }
  }

  function parse_ItemType()
  {
    switch (l1)
    {
    case 44:                        // 'attribute'
    case 48:                        // 'comment'
    case 52:                        // 'document-node'
    case 53:                        // 'element'
    case 70:                        // 'item'
    case 76:                        // 'node'
    case 82:                        // 'processing-instruction'
    case 85:                        // 'schema-attribute'
    case 86:                        // 'schema-element'
    case 89:                        // 'text'
      lookahead2W(20);              // EOF | S^WhiteSpace | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | '+' | ',' |
                                    // '-' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'and' | 'div' |
                                    // 'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'return' | 'satisfies' | 'to' |
                                    // 'union' | '|'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1836:                      // 'attribute' '('
    case 1840:                      // 'comment' '('
    case 1844:                      // 'document-node' '('
    case 1845:                      // 'element' '('
    case 1868:                      // 'node' '('
    case 1874:                      // 'processing-instruction' '('
    case 1877:                      // 'schema-attribute' '('
    case 1878:                      // 'schema-element' '('
    case 1881:                      // 'text' '('
      parse_KindTest();
      break;
    case 1862:                      // 'item' '('
      consume(70);                  // 'item'
      lookahead1W(2);               // S^WhiteSpace | '(' | '(:'
      consume(14);                  // '('
      lookahead1W(3);               // S^WhiteSpace | '(:' | ')'
      consume(16);                  // ')'
      break;
    default:
      parse_AtomicType();
    }
  }

  function parse_AtomicType()
  {
    parse_QName();
  }

  function parse_KindTest()
  {
    switch (l1)
    {
    case 52:                        // 'document-node'
      parse_DocumentTest();
      break;
    case 53:                        // 'element'
      parse_ElementTest();
      break;
    case 44:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 86:                        // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 85:                        // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 82:                        // 'processing-instruction'
      parse_PITest();
      break;
    case 48:                        // 'comment'
      parse_CommentTest();
      break;
    case 89:                        // 'text'
      parse_TextTest();
      break;
    default:
      parse_AnyKindTest();
    }
  }

  function parse_AnyKindTest()
  {
    consume(76);                    // 'node'
    lookahead1W(2);                 // S^WhiteSpace | '(' | '(:'
    consume(14);                    // '('
    lookahead1W(3);                 // S^WhiteSpace | '(:' | ')'
    consume(16);                    // ')'
  }

  function parse_DocumentTest()
  {
    consume(52);                    // 'document-node'
    lookahead1W(2);                 // S^WhiteSpace | '(' | '(:'
    consume(14);                    // '('
    lookahead1W(13);                // S^WhiteSpace | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 16)                   // ')'
    {
      switch (l1)
      {
      case 53:                      // 'element'
        parse_ElementTest();
        break;
      default:
        parse_SchemaElementTest();
      }
    }
    lookahead1W(3);                 // S^WhiteSpace | '(:' | ')'
    consume(16);                    // ')'
  }

  function parse_TextTest()
  {
    consume(89);                    // 'text'
    lookahead1W(2);                 // S^WhiteSpace | '(' | '(:'
    consume(14);                    // '('
    lookahead1W(3);                 // S^WhiteSpace | '(:' | ')'
    consume(16);                    // ')'
  }

  function parse_CommentTest()
  {
    consume(48);                    // 'comment'
    lookahead1W(2);                 // S^WhiteSpace | '(' | '(:'
    consume(14);                    // '('
    lookahead1W(3);                 // S^WhiteSpace | '(:' | ')'
    consume(16);                    // ')'
  }

  function parse_PITest()
  {
    consume(82);                    // 'processing-instruction'
    lookahead1W(2);                 // S^WhiteSpace | '(' | '(:'
    consume(14);                    // '('
    lookahead1W(12);                // StringLiteral | NCName | S^WhiteSpace | '(:' | ')'
    if (l1 != 16)                   // ')'
    {
      switch (l1)
      {
      case 8:                       // NCName
        consume(8);                 // NCName
        break;
      default:
        consume(6);                 // StringLiteral
      }
    }
    lookahead1W(3);                 // S^WhiteSpace | '(:' | ')'
    consume(16);                    // ')'
  }

  function parse_AttributeTest()
  {
    consume(44);                    // 'attribute'
    lookahead1W(2);                 // S^WhiteSpace | '(' | '(:'
    consume(14);                    // '('
    lookahead1W(28);                // QName^Token | S^WhiteSpace | '(:' | ')' | '*' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' | 'descendant' |
                                    // 'descendant-or-self' | 'div' | 'document-node' | 'element' | 'else' |
                                    // 'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' |
                                    // 'or' | 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union'
    if (l1 != 16)                   // ')'
    {
      parse_AttribNameOrWildcard();
      lookahead1W(10);              // S^WhiteSpace | '(:' | ')' | ','
      if (l1 == 21)                 // ','
      {
        consume(21);                // ','
        lookahead1W(26);            // QName^Token | S^WhiteSpace | '(:' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'attribute' | 'cast' | 'castable' | 'child' | 'comment' | 'descendant' |
                                    // 'descendant-or-self' | 'div' | 'document-node' | 'element' | 'else' |
                                    // 'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' |
                                    // 'or' | 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union'
        parse_TypeName();
      }
    }
    lookahead1W(3);                 // S^WhiteSpace | '(:' | ')'
    consume(16);                    // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 17:                        // '*'
      consume(17);                  // '*'
      break;
    default:
      parse_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    consume(85);                    // 'schema-attribute'
    lookahead1W(2);                 // S^WhiteSpace | '(' | '(:'
    consume(14);                    // '('
    lookahead1W(26);                // QName^Token | S^WhiteSpace | '(:' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'attribute' | 'cast' | 'castable' | 'child' | 'comment' | 'descendant' |
                                    // 'descendant-or-self' | 'div' | 'document-node' | 'element' | 'else' |
                                    // 'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' |
                                    // 'or' | 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union'
    parse_AttributeDeclaration();
    lookahead1W(3);                 // S^WhiteSpace | '(:' | ')'
    consume(16);                    // ')'
  }

  function parse_AttributeDeclaration()
  {
    parse_AttributeName();
  }

  function parse_ElementTest()
  {
    consume(53);                    // 'element'
    lookahead1W(2);                 // S^WhiteSpace | '(' | '(:'
    consume(14);                    // '('
    lookahead1W(28);                // QName^Token | S^WhiteSpace | '(:' | ')' | '*' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' | 'descendant' |
                                    // 'descendant-or-self' | 'div' | 'document-node' | 'element' | 'else' |
                                    // 'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' |
                                    // 'or' | 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union'
    if (l1 != 16)                   // ')'
    {
      parse_ElementNameOrWildcard();
      lookahead1W(10);              // S^WhiteSpace | '(:' | ')' | ','
      if (l1 == 21)                 // ','
      {
        consume(21);                // ','
        lookahead1W(26);            // QName^Token | S^WhiteSpace | '(:' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'attribute' | 'cast' | 'castable' | 'child' | 'comment' | 'descendant' |
                                    // 'descendant-or-self' | 'div' | 'document-node' | 'element' | 'else' |
                                    // 'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' |
                                    // 'or' | 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union'
        parse_TypeName();
        lookahead1W(11);            // S^WhiteSpace | '(:' | ')' | '?'
        if (l1 == 36)               // '?'
        {
          consume(36);              // '?'
        }
      }
    }
    lookahead1W(3);                 // S^WhiteSpace | '(:' | ')'
    consume(16);                    // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 17:                        // '*'
      consume(17);                  // '*'
      break;
    default:
      parse_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    consume(86);                    // 'schema-element'
    lookahead1W(2);                 // S^WhiteSpace | '(' | '(:'
    consume(14);                    // '('
    lookahead1W(26);                // QName^Token | S^WhiteSpace | '(:' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'attribute' | 'cast' | 'castable' | 'child' | 'comment' | 'descendant' |
                                    // 'descendant-or-self' | 'div' | 'document-node' | 'element' | 'else' |
                                    // 'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' |
                                    // 'or' | 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union'
    parse_ElementDeclaration();
    lookahead1W(3);                 // S^WhiteSpace | '(:' | ')'
    consume(16);                    // ')'
  }

  function parse_ElementDeclaration()
  {
    parse_ElementName();
  }

  function parse_AttributeName()
  {
    parse_QName();
  }

  function parse_ElementName()
  {
    parse_QName();
  }

  function parse_TypeName()
  {
    parse_QName();
  }

  function parse_QName()
  {
    switch (l1)
    {
    case 44:                        // 'attribute'
      consume(44);                  // 'attribute'
      break;
    case 48:                        // 'comment'
      consume(48);                  // 'comment'
      break;
    case 52:                        // 'document-node'
      consume(52);                  // 'document-node'
      break;
    case 53:                        // 'element'
      consume(53);                  // 'element'
      break;
    case 55:                        // 'empty-sequence'
      consume(55);                  // 'empty-sequence'
      break;
    case 65:                        // 'if'
      consume(65);                  // 'if'
      break;
    case 70:                        // 'item'
      consume(70);                  // 'item'
      break;
    case 76:                        // 'node'
      consume(76);                  // 'node'
      break;
    case 82:                        // 'processing-instruction'
      consume(82);                  // 'processing-instruction'
      break;
    case 85:                        // 'schema-attribute'
      consume(85);                  // 'schema-attribute'
      break;
    case 86:                        // 'schema-element'
      consume(86);                  // 'schema-element'
      break;
    case 89:                        // 'text'
      consume(89);                  // 'text'
      break;
    case 93:                        // 'typeswitch'
      consume(93);                  // 'typeswitch'
      break;
    default:
      parse_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    switch (l1)
    {
    case 9:                         // QName^Token
      consume(9);                   // QName^Token
      break;
    case 40:                        // 'ancestor'
      consume(40);                  // 'ancestor'
      break;
    case 41:                        // 'ancestor-or-self'
      consume(41);                  // 'ancestor-or-self'
      break;
    case 42:                        // 'and'
      consume(42);                  // 'and'
      break;
    case 45:                        // 'cast'
      consume(45);                  // 'cast'
      break;
    case 46:                        // 'castable'
      consume(46);                  // 'castable'
      break;
    case 47:                        // 'child'
      consume(47);                  // 'child'
      break;
    case 49:                        // 'descendant'
      consume(49);                  // 'descendant'
      break;
    case 50:                        // 'descendant-or-self'
      consume(50);                  // 'descendant-or-self'
      break;
    case 51:                        // 'div'
      consume(51);                  // 'div'
      break;
    case 54:                        // 'else'
      consume(54);                  // 'else'
      break;
    case 56:                        // 'eq'
      consume(56);                  // 'eq'
      break;
    case 57:                        // 'every'
      consume(57);                  // 'every'
      break;
    case 58:                        // 'except'
      consume(58);                  // 'except'
      break;
    case 59:                        // 'following'
      consume(59);                  // 'following'
      break;
    case 60:                        // 'following-sibling'
      consume(60);                  // 'following-sibling'
      break;
    case 61:                        // 'for'
      consume(61);                  // 'for'
      break;
    case 62:                        // 'ge'
      consume(62);                  // 'ge'
      break;
    case 63:                        // 'gt'
      consume(63);                  // 'gt'
      break;
    case 64:                        // 'idiv'
      consume(64);                  // 'idiv'
      break;
    case 67:                        // 'instance'
      consume(67);                  // 'instance'
      break;
    case 68:                        // 'intersect'
      consume(68);                  // 'intersect'
      break;
    case 69:                        // 'is'
      consume(69);                  // 'is'
      break;
    case 71:                        // 'le'
      consume(71);                  // 'le'
      break;
    case 72:                        // 'lt'
      consume(72);                  // 'lt'
      break;
    case 73:                        // 'mod'
      consume(73);                  // 'mod'
      break;
    case 74:                        // 'namespace'
      consume(74);                  // 'namespace'
      break;
    case 75:                        // 'ne'
      consume(75);                  // 'ne'
      break;
    case 78:                        // 'or'
      consume(78);                  // 'or'
      break;
    case 79:                        // 'parent'
      consume(79);                  // 'parent'
      break;
    case 80:                        // 'preceding'
      consume(80);                  // 'preceding'
      break;
    case 81:                        // 'preceding-sibling'
      consume(81);                  // 'preceding-sibling'
      break;
    case 83:                        // 'return'
      consume(83);                  // 'return'
      break;
    case 84:                        // 'satisfies'
      consume(84);                  // 'satisfies'
      break;
    case 87:                        // 'self'
      consume(87);                  // 'self'
      break;
    case 88:                        // 'some'
      consume(88);                  // 'some'
      break;
    case 91:                        // 'to'
      consume(91);                  // 'to'
      break;
    case 92:                        // 'treat'
      consume(92);                  // 'treat'
      break;
    default:
      consume(94);                  // 'union'
    }
  }

  function try_WhiteSpace()
  {
    for (;;)
    {
      switch (l1)
      {
      case 10:                      // S^WhiteSpace
        consume(10);                // S^WhiteSpace
        break;
      default:
        try_Comment();
      }
      lookahead1(0);                // END | S^WhiteSpace | '(:'
      if (l1 == 1)                  // END
      {
        break;
      }
    }
  }

  function try_Comment()
  {
    consume(15);                    // '(:'
    for (;;)
    {
      lookahead1(9);                // CommentContents | '(:' | ':)'
      if (l1 == 27)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 11:                      // CommentContents
        consume(11);                // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    consume(27);                    // ':)'
  }

  function consume(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_WhiteSpace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function matchW(tokenSetId)
  {
    var code;
    for (;;)
    {
      code = match(tokenSetId);
      if (code != 10)               // S^WhiteSpace
      {
        if (code != 15)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = matchW(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(tokenSetId)
  {
    if (l2 == 0)
    {
      l2 = matchW(tokenSetId);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 7) | l1;
  }

  function lookahead1(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = match(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function error(b, e, s, l, t)
  {
    throw new thisParser.ParseException(b, e, s, l, t);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;

  var input;
  var size;

  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = xpath20.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 1023; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = xpath20.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = xpath20.MAP1[(c0 & 15) + xpath20.MAP1[(c1 & 31) + xpath20.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }

        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (xpath20.MAP2[m] > c0) hi = m - 1;
          else if (xpath20.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = xpath20.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = 744 * charclass + code - 1;
      var i1 = i0 >> 2;
      code = xpath20.TRANSITION[(i0 & 3) + xpath20.TRANSITION[(i1 & 7) + xpath20.TRANSITION[i1 >> 3]]];

      if (code > 1023)
      {
        result = code;
        code &= 1023;
        end = current;
      }
    }

    result >>= 10;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 7; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 7;
    }

    if (end > size) end = size;
    return (result & 127) - 1;
  }

}

xpath20.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : xpath20.INITIAL[tokenSetId] & 1023;
  for (var i = 0; i < 96; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 744 + s - 1;
    var i1 = i0 >> 1;
    var f = xpath20.EXPECTED[(i0 & 1) + xpath20.EXPECTED[(i1 & 3) + xpath20.EXPECTED[i1 >> 2]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(xpath20.TOKEN[j]);
      }
    }
  }
  return set;
};

xpath20.MAP0 =
[
  /*   0 */ 51, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 4, 17, 18, 19, 20, 21,
  /*  65 */ 22, 22, 22, 22, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 24,
  /*  92 */ 4, 25, 4, 22, 4, 26, 27, 28, 29, 30, 31, 32, 33, 34, 22, 22, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
  /* 120 */ 47, 48, 22, 4, 49, 4, 4, 4
];

xpath20.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 331, 370, 386, 423, 423, 423, 415, 354, 346, 354, 346, 354, 354,
  /* 126 */ 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 315, 354, 354, 354, 354, 354, 354, 354, 354, 399, 423, 423, 424, 422, 423, 423, 354, 354, 354, 354, 354,
  /* 168 */ 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 353, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
  /* 231 */ 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 423, 51, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 4, 4, 6, 7, 8, 9, 10, 11, 12,
  /* 291 */ 13, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 4, 17, 18, 19, 20, 21, 22, 22, 22, 22, 23, 22, 22, 22,
  /* 318 */ 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 4, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 24, 4, 25, 4,
  /* 346 */ 22, 22, 22, 22, 22, 22, 22, 4, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 4, 26, 27,
  /* 373 */ 28, 29, 30, 31, 32, 33, 34, 22, 22, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 22, 4, 49, 4, 4,
  /* 401 */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 22, 22, 4, 4, 4, 4, 4, 4, 4, 4, 4, 50, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  /* 436 */ 4, 4, 4, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50
];

xpath20.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 4, 22, 4, 22, 22, 4
];

xpath20.INITIAL =
[
  /*  0 */ 2049, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
  /* 29 */ 30, 31, 32, 33
];

xpath20.TRANSITION =
[
  /*    0 */ 2052, 2052, 2052, 2052, 2052, 2052, 2052, 2052, 2052, 2052, 2052, 2052, 2052, 2052, 2052, 2052, 2052, 2052,
  /*   18 */ 2052, 2052, 2052, 2052, 2052, 1372, 1378, 1272, 1280, 1288, 1296, 1304, 1312, 1320, 1319, 1434, 1442, 1450,
  /*   36 */ 1458, 1466, 1474, 1482, 1490, 1498, 1506, 1514, 1522, 1530, 1538, 1209, 1270, 1278, 1286, 1294, 1302, 1310,
  /*   54 */ 1318, 1346, 1432, 1440, 1448, 1456, 1464, 1472, 1480, 1488, 1496, 1504, 1512, 1520, 1528, 1536, 1223, 1268,
  /*   72 */ 1276, 1328, 1292, 1300, 1308, 1316, 1344, 1430, 1438, 1446, 1454, 1462, 1470, 1478, 1486, 1494, 1502, 1510,
  /*   90 */ 1518, 1526, 1534, 1785, 2851, 1274, 1282, 1290, 1298, 1306, 1314, 1342, 1428, 1436, 1444, 1452, 1460, 1468,
  /*  108 */ 1476, 1484, 1492, 1500, 1508, 1516, 1524, 1532, 1354, 1366, 1272, 1280, 1288, 1296, 1304, 1312, 1320, 1319,
  /*  126 */ 1434, 1442, 1450, 1458, 1466, 1474, 1482, 1490, 1498, 1506, 1514, 1522, 1530, 1413, 3016, 1270, 1278, 1421,
  /*  144 */ 1294, 1302, 1310, 1318, 1346, 1432, 1440, 1448, 1456, 1464, 1472, 1480, 1488, 1496, 1504, 1512, 1520, 1528,
  /*  162 */ 1546, 1554, 1581, 1276, 1589, 1292, 1300, 1308, 1316, 1344, 1430, 1438, 1446, 1454, 1462, 1470, 1478, 1486,
  /*  180 */ 1494, 1502, 1510, 1518, 1526, 1534, 1597, 1605, 1274, 2009, 1290, 1298, 1306, 1314, 1342, 1428, 1436, 1444,
  /*  198 */ 1452, 1460, 1468, 1476, 1484, 1492, 1500, 1508, 1516, 1524, 1532, 1623, 1631, 1272, 1280, 1288, 1645, 1304,
  /*  216 */ 1312, 1320, 1319, 1434, 1442, 1450, 1458, 1466, 1474, 1482, 1490, 1498, 1506, 1514, 1522, 1530, 1653, 1661,
  /*  234 */ 1270, 1278, 1286, 1294, 1302, 1669, 1318, 1346, 1432, 1440, 1448, 1456, 1464, 1472, 1480, 1488, 1496, 1504,
  /*  252 */ 1512, 1520, 1528, 1536, 1681, 2853, 1276, 1284, 1292, 1300, 1308, 1316, 1344, 1430, 1438, 1446, 1454, 1462,
  /*  270 */ 1470, 1478, 1486, 1494, 1502, 1510, 1518, 1526, 1534, 1694, 1702, 3085, 2757, 1611, 1388, 2115, 3502, 3488,
  /*  288 */ 3981, 1402, 3102, 3551, 2328, 1714, 3615, 3280, 1739, 1759, 2776, 3800, 1767, 1775, 1783, 1688, 1804, 2878,
  /*  306 */ 1609, 1615, 3104, 1793, 1405, 3104, 1803, 2540, 3520, 2973, 2968, 2532, 2540, 2548, 2556, 3677, 3685, 3693,
  /*  324 */ 1773, 1781, 2847, 2761, 1278, 1286, 1294, 1302, 1310, 1318, 1346, 1432, 1440, 1448, 1456, 1464, 1472, 1480,
  /*  342 */ 1488, 1496, 1504, 1512, 1520, 1528, 1536, 1358, 1704, 3087, 1812, 1613, 1390, 3767, 3504, 3490, 3011, 1404,
  /*  360 */ 3105, 1402, 2964, 2972, 2536, 2544, 2552, 3673, 3681, 3689, 1769, 1777, 1230, 1822, 2024, 2030, 1334, 1834,
  /*  378 */ 1849, 1673, 1857, 1841, 1865, 1894, 1909, 1886, 1924, 1901, 1916, 1932, 1940, 1872, 1879, 1948, 1956, 1964,
  /*  396 */ 1972, 1272, 1280, 1288, 1296, 1304, 1312, 1320, 1319, 1434, 1442, 1450, 1458, 1466, 1474, 1482, 1490, 1498,
  /*  414 */ 1506, 1514, 1522, 1530, 1987, 1995, 2003, 1278, 1286, 1294, 1302, 1310, 1318, 1346, 1432, 1440, 1448, 1456,
  /*  432 */ 1464, 1472, 1480, 1488, 1496, 1504, 1512, 1520, 1528, 1536, 2017, 1215, 1276, 1284, 1292, 1300, 1308, 1316,
  /*  450 */ 1344, 1430, 1438, 1446, 1454, 1462, 1470, 1478, 1486, 1494, 1502, 1510, 1518, 1526, 1534, 2938, 2851, 1274,
  /*  468 */ 1282, 1290, 1298, 1306, 1314, 1342, 1428, 1436, 1444, 1452, 1460, 1468, 1476, 1484, 1492, 1500, 1508, 1516,
  /*  486 */ 1524, 1532, 4085, 2246, 1272, 1280, 1288, 1296, 1304, 1312, 1320, 1319, 1434, 1442, 1450, 1458, 1466, 1474,
  /*  504 */ 1482, 1490, 1498, 1506, 1514, 1522, 1530, 2038, 2153, 1706, 3089, 3865, 1614, 3352, 3498, 3506, 3492, 1398,
  /*  522 */ 3873, 3518, 2324, 2966, 2974, 2538, 2546, 2554, 3675, 3683, 3691, 1771, 1779, 2151, 1704, 3087, 2050, 3871,
  /*  540 */ 3350, 3834, 3504, 3490, 1396, 1404, 3105, 1402, 2964, 2972, 2536, 2544, 2552, 3673, 3681, 3689, 1769, 1777,
  /*  558 */ 1637, 2851, 1274, 1282, 1290, 1298, 1306, 1314, 1342, 1428, 1436, 1444, 1452, 1460, 1468, 1476, 1484, 1492,
  /*  576 */ 1500, 1508, 1516, 1524, 1532, 2061, 2069, 1272, 1280, 1288, 1296, 1304, 1312, 1320, 1319, 1434, 1442, 1450,
  /*  594 */ 1458, 1466, 1474, 1482, 1490, 1498, 1506, 1514, 1522, 1530, 2083, 2091, 2231, 2105, 3865, 1614, 3352, 2264,
  /*  612 */ 3506, 2113, 2123, 2138, 2165, 2958, 3893, 2180, 3336, 2195, 2554, 3675, 3683, 3691, 1771, 1779, 2151, 1704,
  /*  630 */ 3087, 3863, 3871, 3350, 3496, 3504, 3490, 1396, 1404, 3105, 3738, 2203, 2972, 2536, 2544, 2552, 3673, 3681,
  /*  648 */ 2213, 1769, 1777, 2042, 2226, 3898, 2239, 3294, 3643, 2260, 1795, 2130, 3474, 1402, 3102, 3522, 2975, 2272,
  /*  666 */ 2290, 2304, 2395, 3671, 3679, 2318, 3695, 2832, 2336, 2344, 2693, 2352, 1250, 3755, 1260, 3500, 1405, 3104,
  /*  684 */ 2650, 2891, 3520, 2529, 2360, 2278, 2540, 2548, 2556, 3943, 3798, 3693, 1773, 3381, 2379, 1979, 2403, 2411,
  /*  702 */ 2430, 2445, 2460, 2475, 2483, 2491, 2499, 3732, 2507, 3145, 2515, 2566, 2574, 2582, 2798, 2590, 2598, 3566,
  /*  720 */ 1779, 2612, 1704, 2620, 3863, 3871, 3350, 3496, 3504, 2634, 2646, 1404, 3105, 2918, 3995, 2972, 2536, 2544,
  /*  738 */ 2552, 3673, 3681, 3689, 2604, 2218, 2944, 2658, 3085, 3861, 3869, 3348, 3494, 3502, 3488, 1394, 1402, 3102,
  /*  756 */ 3522, 2975, 2970, 2534, 2542, 2671, 2679, 3679, 3687, 3695, 3375, 2147, 2687, 2663, 2707, 3867, 3586, 3354,
  /*  774 */ 3500, 1405, 3104, 1400, 2540, 3520, 2973, 2968, 2532, 2540, 2548, 3395, 2729, 3685, 3693, 1773, 2987, 2743,
  /*  792 */ 3323, 3857, 3423, 3621, 2751, 2911, 1751, 3492, 2769, 3741, 3518, 2324, 3074, 2784, 2792, 2806, 2554, 3675,
  /*  810 */ 2814, 2626, 2828, 1244, 2840, 2861, 2873, 3863, 2886, 2904, 3198, 3963, 2422, 1396, 1404, 3105, 1402, 2964,
  /*  828 */ 2926, 2536, 4039, 2952, 3673, 3681, 2820, 3369, 2983, 2252, 2995, 1237, 3861, 3001, 3024, 3031, 3039, 3054,
  /*  846 */ 3062, 1384, 3070, 3082, 2975, 2970, 2534, 2542, 2550, 2558, 3097, 3687, 3695, 1775, 3113, 3121, 2721, 3129,
  /*  864 */ 3867, 3507, 3104, 2522, 1405, 3104, 1727, 3141, 3153, 3161, 3169, 3330, 3183, 2310, 3191, 3210, 3046, 3693,
  /*  882 */ 3218, 2452, 3230, 3445, 3238, 3865, 3625, 3352, 3246, 3506, 3254, 3264, 3276, 3288, 2324, 2205, 1256, 2538,
  /*  900 */ 2546, 2896, 3823, 3302, 3691, 1771, 3957, 3316, 1704, 3087, 3863, 3344, 3887, 4051, 3504, 3490, 2638, 3639,
  /*  918 */ 3362, 3268, 1721, 2972, 2536, 2544, 2552, 3673, 3681, 3689, 1769, 1777, 2149, 4001, 1561, 3861, 3869, 3348,
  /*  936 */ 3494, 3502, 3488, 1394, 1402, 3102, 3522, 2975, 2970, 2534, 2542, 3389, 3671, 3679, 3687, 3695, 1775, 3409,
  /*  954 */ 3417, 3431, 3439, 3867, 3453, 3467, 3202, 3486, 3515, 3530, 3541, 3549, 2973, 2968, 4026, 3006, 2548, 2556,
  /*  972 */ 3559, 3608, 3693, 1568, 2187, 3574, 2172, 2699, 2467, 3582, 3459, 3498, 3506, 3492, 3478, 3175, 3594, 4021,
  /*  990 */ 3633, 3651, 2538, 3659, 3667, 3913, 2735, 3401, 3703, 1779, 3711, 2097, 3726, 3133, 3749, 3763, 3775, 3601,
  /* 1008 */ 2437, 3783, 1731, 3256, 3791, 3808, 3816, 2282, 3842, 3850, 3881, 3681, 3308, 3906, 3222, 2075, 3921, 3085,
  /* 1026 */ 3861, 3869, 3348, 3494, 4007, 2296, 2371, 1402, 3102, 3522, 2975, 3929, 2534, 2542, 2550, 3937, 3679, 3687,
  /* 1044 */ 3951, 1573, 2147, 2155, 2865, 3971, 1826, 3507, 3979, 1745, 2418, 3830, 1400, 2540, 3520, 2973, 2968, 2532,
  /* 1062 */ 2540, 2548, 2556, 3677, 3685, 3693, 1773, 2145, 2153, 1706, 3089, 3865, 1614, 3352, 3498, 3506, 3492, 1398,
  /* 1080 */ 3873, 3518, 3989, 4015, 2974, 2538, 2546, 2554, 3675, 3683, 3691, 1771, 1779, 2151, 2385, 4034, 3863, 3871,
  /* 1098 */ 4047, 2932, 3504, 3490, 1396, 1404, 3105, 1402, 2964, 2972, 2536, 2544, 2552, 3673, 3681, 3689, 1769, 1777,
  /* 1116 */ 2149, 2157, 3533, 4059, 3869, 3348, 3494, 3502, 3488, 1394, 2390, 2366, 3522, 2975, 2970, 2534, 2542, 2550,
  /* 1134 */ 3671, 3679, 3687, 3695, 1775, 4067, 4075, 1272, 1280, 1288, 1296, 1304, 1312, 1320, 1319, 1434, 1442, 1450,
  /* 1152 */ 1458, 1466, 1474, 1482, 1490, 1498, 1506, 1514, 1522, 1530, 4083, 1814, 1706, 3089, 2053, 1614, 1392, 3498,
  /* 1170 */ 3506, 3492, 1398, 3873, 3518, 2324, 2966, 2974, 2538, 2546, 2554, 3675, 3683, 3691, 1771, 1779, 2714, 3718,
  /* 1188 */ 1276, 4093, 1292, 1300, 1308, 1316, 1344, 1430, 1438, 1446, 1454, 1462, 1470, 1478, 1486, 1494, 1502, 1510,
  /* 1206 */ 1518, 1526, 1534, 4382, 4382, 4155, 4171, 4156, 4171, 4115, 4111, 5607, 4171, 4171, 4171, 4171, 5992, 4439,
  /* 1224 */ 4550, 4171, 4171, 4171, 4547, 4550, 4171, 4133, 5657, 4171, 4171, 4172, 4132, 4171, 4240, 4952, 4241, 4241,
  /* 1242 */ 5221, 4932, 4513, 4241, 4513, 4243, 5645, 4180, 4171, 4171, 5075, 4171, 5170, 5081, 4241, 4241, 4241, 6663,
  /* 1260 */ 4513, 4513, 4513, 4513, 4513, 5112, 5118, 4513, 4125, 4111, 4171, 4171, 4171, 4171, 4171, 5992, 4164, 4164,
  /* 1278 */ 4164, 5994, 4164, 4164, 4164, 4164, 4119, 4123, 4171, 4959, 4129, 4138, 4142, 4151, 4171, 4164, 4164, 4277,
  /* 1296 */ 4315, 4319, 4323, 4327, 4164, 4164, 4163, 5991, 4164, 4164, 4279, 4317, 4321, 4325, 4329, 4164, 4161, 4188,
  /* 1314 */ 4915, 4170, 4176, 4171, 5996, 4164, 4186, 4164, 4192, 4378, 4164, 4164, 4164, 4367, 4119, 4123, 4550, 4959,
  /* 1332 */ 4129, 4138, 4142, 4151, 4171, 4774, 4774, 4686, 4723, 4562, 4192, 4378, 4164, 4164, 4164, 4367, 4164, 4186,
  /* 1350 */ 4164, 4192, 4378, 4164, 4164, 4360, 4386, 4171, 4439, 4171, 4171, 4171, 4171, 5851, 4539, 4171, 4387, 4392,
  /* 1368 */ 4387, 4171, 4115, 4111, 4171, 4171, 4103, 4103, 4101, 4103, 4103, 4103, 4105, 4171, 4115, 4111, 4171, 4171,
  /* 1386 */ 4240, 5434, 4241, 4241, 4241, 4241, 4241, 4473, 4513, 4513, 4513, 4513, 4513, 4513, 4247, 4171, 4171, 4171,
  /* 1404 */ 4240, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4479, 4364, 4371, 4164, 4360, 4171, 4171, 4439, 4860, 4859,
  /* 1422 */ 4959, 4129, 4138, 4142, 4151, 4171, 4164, 4192, 4378, 4164, 4164, 4164, 4295, 6208, 4198, 4171, 4203, 4164,
  /* 1440 */ 4208, 4339, 4214, 4164, 6720, 4219, 4204, 4164, 4209, 4340, 4215, 4164, 6721, 5993, 4171, 4224, 5992, 4228,
  /* 1458 */ 4301, 4164, 4164, 4234, 4252, 4228, 4301, 4164, 4164, 4234, 4259, 4263, 5992, 4164, 4269, 4352, 4275, 4164,
  /* 1476 */ 4164, 4269, 4352, 4275, 4284, 5990, 4166, 4255, 4164, 4164, 4165, 4254, 4164, 4164, 4237, 4292, 4299, 4305,
  /* 1494 */ 4164, 4230, 4299, 4305, 4164, 4331, 4335, 4307, 4311, 4164, 4337, 4309, 4313, 4374, 4164, 4220, 4376, 4164,
  /* 1512 */ 4344, 4164, 4164, 4164, 4164, 5995, 4164, 4164, 4164, 4164, 4346, 4164, 4164, 4350, 4210, 4271, 4210, 4271,
  /* 1530 */ 4210, 4164, 4164, 4164, 4358, 4356, 4280, 4364, 4364, 4371, 4164, 4360, 4171, 4171, 4439, 4153, 4280, 4364,
  /* 1548 */ 4364, 4371, 4164, 4360, 4408, 4406, 4404, 4406, 4406, 4410, 4416, 4414, 4420, 4171, 4240, 4989, 4241, 4241,
  /* 1566 */ 5221, 5007, 4513, 4241, 6187, 5648, 4241, 4243, 4513, 4241, 6649, 5651, 4241, 4513, 4243, 4427, 4111, 4171,
  /* 1584 */ 4171, 4171, 4171, 4171, 5992, 4119, 4425, 4171, 4959, 4129, 4138, 4142, 4151, 5108, 4171, 5209, 4431, 4431,
  /* 1602 */ 4431, 5211, 4434, 5212, 4171, 6099, 4111, 4171, 4171, 4171, 4171, 4171, 4241, 4241, 4241, 4241, 4241, 4241,
  /* 1620 */ 4241, 4241, 4473, 4164, 4360, 4171, 4171, 4439, 5298, 4443, 4445, 5300, 4449, 4452, 4171, 4115, 4111, 4171,
  /* 1638 */ 4171, 4439, 4171, 4171, 4883, 4885, 4171, 4315, 4319, 4323, 4327, 4164, 4164, 4163, 6718, 4364, 4371, 4164,
  /* 1656 */ 4360, 4171, 4171, 4439, 5321, 4457, 4459, 5323, 5321, 5324, 4171, 4115, 4111, 4329, 4164, 4161, 4194, 4915,
  /* 1674 */ 4170, 4176, 4171, 4606, 4774, 4817, 4774, 5101, 5425, 4463, 4463, 5427, 4171, 5428, 4171, 4518, 4521, 4171,
  /* 1692 */ 4115, 5168, 4171, 4171, 4439, 5440, 4467, 4467, 5442, 5440, 5443, 4171, 4115, 5168, 4171, 4171, 4171, 4171,
  /* 1710 */ 4171, 4240, 4241, 4241, 6645, 4171, 4240, 4241, 4241, 4241, 5692, 4244, 4513, 4513, 6178, 4513, 4513, 4247,
  /* 1728 */ 4171, 4171, 5855, 4240, 4241, 4241, 4241, 4241, 4241, 4241, 6479, 6005, 4241, 4241, 6388, 6554, 4513, 4513,
  /* 1746 */ 4246, 4171, 4522, 4171, 4171, 5219, 4241, 4241, 4241, 4241, 4241, 4241, 5864, 4240, 4991, 4491, 4242, 4513,
  /* 1764 */ 4497, 4513, 5800, 6461, 4513, 4245, 4241, 4241, 4513, 4513, 4241, 4243, 4513, 4241, 4243, 4513, 4241, 4513,
  /* 1782 */ 4243, 4180, 4180, 4171, 4171, 4439, 4171, 4171, 4171, 4171, 4171, 4513, 5654, 4171, 4171, 4171, 4171, 5219,
  /* 1800 */ 4241, 5001, 4241, 5206, 4171, 4171, 4171, 4240, 4241, 4241, 4241, 5221, 4538, 4113, 4171, 4171, 4171, 4171,
  /* 1818 */ 4171, 4171, 4115, 5168, 5242, 4171, 4558, 4111, 4171, 4171, 4171, 4171, 5170, 4241, 6522, 4241, 4566, 4573,
  /* 1836 */ 4774, 4774, 4577, 5761, 4583, 4583, 4616, 4838, 4583, 4583, 4583, 4761, 6208, 4582, 4588, 4592, 4596, 4600,
  /* 1854 */ 4583, 4735, 5763, 4610, 4801, 4774, 4774, 4774, 4569, 4583, 4808, 4198, 4171, 4622, 4774, 4626, 4729, 4632,
  /* 1872 */ 4774, 4637, 4792, 4583, 4783, 4774, 4774, 4583, 4772, 4774, 4775, 4583, 4583, 4785, 4774, 4711, 4670, 4675,
  /* 1890 */ 4648, 4583, 4583, 4741, 4717, 4636, 4602, 4583, 4641, 4646, 4652, 4583, 4836, 4698, 4696, 4826, 4906, 4628,
  /* 1908 */ 4702, 4660, 4778, 4171, 4224, 4773, 4664, 4692, 4774, 4774, 4584, 4810, 4583, 4583, 4655, 4708, 4680, 4263,
  /* 1926 */ 4773, 4774, 4684, 4714, 4690, 4777, 4721, 4727, 4774, 4612, 4733, 4739, 4583, 4779, 4745, 4704, 4754, 4775,
  /* 1944 */ 4758, 4765, 4769, 4795, 4776, 4789, 4671, 4666, 4578, 4618, 4676, 4774, 4776, 4583, 4799, 4805, 4642, 4814,
  /* 1962 */ 4823, 4833, 4748, 4750, 4171, 4171, 4439, 5544, 4842, 4842, 5546, 4171, 5547, 4171, 4115, 4111, 4846, 4171,
  /* 1980 */ 4534, 5162, 5174, 4171, 4240, 5183, 5020, 4364, 4371, 4164, 4360, 4171, 4171, 4439, 5554, 4852, 4852, 5556,
  /* 1998 */ 4171, 5557, 4171, 4115, 4111, 4856, 4171, 4171, 4171, 4171, 5992, 4164, 4164, 4119, 4438, 4171, 4959, 4129,
  /* 2016 */ 4138, 4439, 5580, 4865, 4865, 5582, 4171, 5583, 4171, 4773, 4774, 4774, 4774, 4819, 4583, 4583, 4119, 4555,
  /* 2034 */ 4171, 4959, 4129, 4138, 4364, 4371, 4164, 4360, 4171, 4171, 4439, 5169, 6218, 5270, 5272, 5274, 6067, 4113,
  /* 2052 */ 4171, 4171, 4171, 4171, 4171, 4171, 4171, 4171, 4241, 4164, 4360, 4171, 4171, 4439, 5986, 4891, 4891, 5988,
  /* 2070 */ 4171, 5989, 4171, 4115, 4111, 4171, 4171, 4439, 6595, 6597, 6597, 6599, 6601, 4364, 4371, 4164, 4360, 4171,
  /* 2088 */ 4145, 4439, 4895, 4897, 4897, 4899, 4901, 4905, 4171, 4115, 5168, 4171, 5659, 6370, 4171, 4171, 6325, 5196,
  /* 2106 */ 5221, 5946, 4513, 6142, 6683, 4171, 4113, 5687, 4479, 4513, 4513, 4513, 4513, 4513, 4513, 4513, 5883, 4513,
  /* 2124 */ 6057, 4247, 4171, 4171, 6373, 6376, 4241, 4241, 5834, 4241, 4241, 4479, 4513, 5006, 4241, 5449, 4241, 4241,
  /* 2142 */ 4241, 4241, 6665, 4513, 4243, 4180, 4180, 4171, 4171, 4439, 5169, 4171, 4171, 4178, 4244, 4247, 4171, 4115,
  /* 2160 */ 5168, 4171, 4171, 4171, 4171, 4513, 6189, 4513, 4513, 4513, 4245, 4914, 4171, 4861, 4171, 4171, 6222, 4240,
  /* 2178 */ 4241, 6229, 4241, 6631, 4241, 4244, 4513, 4513, 4925, 4513, 4243, 4180, 4180, 4171, 4171, 4439, 6193, 4513,
  /* 2196 */ 6414, 4247, 4239, 4241, 4241, 4241, 4243, 4182, 4513, 4513, 4513, 4513, 4513, 4247, 4171, 6541, 4241, 6405,
  /* 2214 */ 4940, 4879, 4946, 4240, 4241, 4243, 4513, 5463, 5468, 4243, 4180, 4180, 4958, 4171, 4115, 4963, 4171, 4171,
  /* 2232 */ 4171, 4171, 6049, 4848, 4910, 4241, 4974, 4513, 6692, 4171, 4113, 4171, 4171, 4967, 4171, 4869, 4872, 4171,
  /* 2250 */ 4115, 4111, 4171, 4171, 4439, 5749, 5751, 5751, 5753, 5755, 5517, 4513, 4513, 4513, 4513, 4513, 4513, 4246,
  /* 2268 */ 4171, 4171, 4171, 5032, 4247, 5558, 4240, 4241, 5612, 4241, 4241, 4244, 5134, 4513, 4513, 4513, 4247, 4238,
  /* 2286 */ 6508, 6517, 4241, 5839, 4513, 6256, 4513, 4513, 5720, 4238, 4241, 4241, 4241, 6614, 4241, 4479, 4513, 5894,
  /* 2304 */ 5011, 4241, 4513, 4513, 6528, 4513, 4247, 4239, 5908, 4241, 5914, 4243, 5920, 4513, 4513, 6302, 5036, 4242,
  /* 2322 */ 5203, 4513, 4240, 4241, 4241, 4241, 4241, 4241, 4244, 4513, 4485, 4513, 4513, 4513, 4180, 4180, 4171, 4171,
  /* 2340 */ 4439, 5042, 5044, 5044, 5046, 5048, 5052, 4171, 4115, 5168, 4171, 4551, 4513, 4997, 4513, 4513, 4171, 4113,
  /* 2358 */ 4171, 5069, 5128, 4513, 4247, 4171, 4240, 6617, 4241, 4241, 4513, 4513, 6689, 4513, 4513, 4513, 4513, 6623,
  /* 2376 */ 4513, 4247, 4171, 5148, 5148, 5150, 5152, 5156, 4171, 4115, 5168, 4171, 6046, 4171, 4171, 4171, 4240, 4241,
  /* 2394 */ 5745, 4241, 4241, 4241, 5024, 4513, 4513, 4513, 5030, 6633, 5187, 4927, 6015, 6585, 5200, 6067, 6097, 6069,
  /* 2412 */ 4171, 4171, 4171, 4171, 4171, 5217, 4241, 4241, 5866, 4241, 4241, 4241, 4241, 4479, 5784, 4513, 4513, 5696,
  /* 2430 */ 4241, 5225, 4241, 4241, 5229, 4241, 5820, 4241, 4241, 6485, 4479, 6433, 4513, 6439, 5789, 5727, 4877, 4513,
  /* 2448 */ 5398, 5234, 4513, 5574, 4513, 4243, 4180, 5962, 4171, 4199, 4439, 5971, 5511, 4513, 5697, 5315, 6051, 6215,
  /* 2466 */ 5240, 4171, 4887, 4171, 4171, 4171, 5444, 6129, 5038, 6360, 4241, 4241, 5246, 4241, 5250, 5254, 5344, 5260,
  /* 2484 */ 5264, 4513, 4513, 5278, 4513, 5282, 5286, 6026, 5292, 4247, 5296, 4171, 4171, 4240, 6488, 5304, 4241, 4241,
  /* 2502 */ 6383, 4241, 4241, 4513, 5309, 4240, 5491, 4241, 4241, 4241, 4241, 4244, 6157, 4241, 5329, 4241, 4244, 4513,
  /* 2520 */ 4513, 5334, 4513, 4246, 5848, 4171, 4171, 4171, 5219, 4241, 4241, 6520, 4241, 4244, 4513, 4513, 4513, 4513,
  /* 2538 */ 4247, 4238, 4241, 4241, 4241, 4241, 4513, 4513, 4513, 4513, 4247, 4239, 4241, 4241, 4241, 4243, 4513, 4513,
  /* 2556 */ 4513, 4246, 4240, 4241, 4241, 4242, 4513, 4513, 4513, 5793, 5098, 5339, 5348, 5939, 5354, 5359, 6578, 6393,
  /* 2574 */ 5368, 6534, 4247, 4265, 4241, 5876, 4241, 6548, 4513, 6624, 4513, 6651, 4240, 4241, 4241, 5374, 5193, 4241,
  /* 2592 */ 6109, 4513, 4513, 5386, 5391, 4242, 5396, 4513, 6709, 5402, 6251, 5407, 4245, 4241, 4241, 4513, 4513, 5458,
  /* 2610 */ 6280, 4513, 4439, 5169, 4171, 4171, 4286, 4288, 5423, 4528, 4241, 5433, 4241, 5221, 4513, 5026, 4513, 4513,
  /* 2628 */ 4240, 4241, 4243, 4513, 4245, 6162, 4241, 5403, 4241, 4479, 4513, 4513, 4513, 4513, 4247, 4134, 4171, 4171,
  /* 2646 */ 4513, 4513, 5844, 4513, 4247, 4171, 4171, 4171, 4240, 5123, 4241, 4241, 5483, 4171, 4115, 5168, 4171, 4171,
  /* 2664 */ 4171, 4171, 6303, 4241, 4241, 4241, 5221, 4241, 5490, 5495, 4243, 4513, 5500, 5505, 4246, 4240, 4241, 6135,
  /* 2682 */ 4242, 4513, 4513, 5510, 6302, 4178, 4244, 4247, 4248, 4115, 5168, 4171, 4171, 5058, 4240, 4241, 5064, 4241,
  /* 2700 */ 5221, 4513, 5130, 4513, 4513, 4171, 4113, 5965, 4513, 4513, 4513, 4171, 4113, 4453, 4171, 5176, 6702, 6702,
  /* 2718 */ 5178, 4171, 5179, 4171, 5213, 5826, 5682, 4241, 5838, 4241, 6363, 4513, 5526, 4241, 4241, 4513, 4513, 6301,
  /* 2736 */ 4241, 4241, 4513, 4513, 4986, 4241, 6147, 5534, 5534, 5536, 5538, 5542, 4171, 4115, 5168, 5305, 4877, 5572,
  /* 2754 */ 4513, 4513, 5967, 4513, 4513, 4471, 4113, 4171, 4171, 4171, 4171, 4873, 5992, 4164, 4164, 5588, 4513, 4247,
  /* 2772 */ 4171, 4171, 4171, 5817, 4241, 4501, 4506, 5095, 6452, 4241, 4241, 4512, 5910, 5636, 5916, 5600, 4513, 6441,
  /* 2790 */ 6285, 6447, 5605, 4238, 4241, 4241, 4241, 5611, 4513, 4513, 4475, 6302, 5380, 4241, 4481, 4513, 4513, 5616,
  /* 2808 */ 4247, 4239, 4241, 4241, 4241, 4243, 6301, 6084, 5622, 4513, 5631, 6302, 4241, 4242, 4513, 4513, 4240, 5724,
  /* 2826 */ 4243, 6366, 5635, 5948, 5640, 4241, 4243, 4513, 4241, 4243, 4513, 6230, 4921, 4243, 4439, 5663, 5665, 5665,
  /* 2844 */ 5667, 5669, 5673, 4171, 5486, 4532, 5485, 4171, 4171, 4115, 4111, 4171, 4171, 4171, 4171, 4171, 5992, 4115,
  /* 2862 */ 5679, 4171, 5984, 4171, 4171, 4171, 4240, 5014, 4241, 4241, 5221, 5832, 4241, 4241, 5221, 4514, 4513, 4513,
  /* 2880 */ 4513, 4513, 4526, 4113, 4171, 4171, 5170, 4241, 4241, 4241, 5342, 4241, 4241, 4241, 4241, 5888, 4513, 4513,
  /* 2898 */ 4513, 4246, 6608, 4241, 4241, 6079, 4241, 5685, 4241, 4877, 4513, 4513, 5501, 4513, 4513, 4513, 5578, 4171,
  /* 2916 */ 4171, 4540, 4171, 5438, 4240, 4241, 4241, 4241, 4241, 5448, 5701, 4241, 4241, 4241, 4241, 5715, 4513, 4513,
  /* 2934 */ 4513, 4513, 6674, 4246, 4171, 4171, 5104, 4171, 5675, 5107, 4171, 4171, 4439, 5473, 5475, 5475, 5477, 5479,
  /* 2952 */ 4241, 5714, 4513, 4513, 4513, 5719, 4240, 4241, 4241, 4241, 4241, 6561, 4244, 4513, 4513, 4513, 4513, 4513,
  /* 2970 */ 4247, 4171, 4240, 4241, 4241, 4241, 4241, 4244, 4513, 4513, 4513, 4513, 4513, 5743, 4493, 4513, 4241, 4513,
  /* 2988 */ 4243, 4180, 4180, 4171, 4107, 4439, 5531, 5759, 4171, 4115, 5168, 4171, 4171, 4171, 4171, 5170, 4241, 5767,
  /* 3006 */ 4241, 4241, 4241, 4241, 6166, 4513, 4513, 4513, 4513, 4544, 4171, 4171, 4171, 5165, 4860, 4171, 4115, 4396,
  /* 3024 */ 4241, 5772, 4241, 5256, 4241, 4877, 5370, 4513, 4513, 4513, 5590, 4513, 4513, 5777, 4246, 6206, 4171, 4171,
  /* 3042 */ 4171, 5219, 5330, 5355, 4241, 4508, 4513, 5937, 4241, 5943, 4513, 5952, 4241, 6334, 4241, 4241, 4241, 4479,
  /* 3060 */ 5739, 5778, 4513, 4513, 5782, 4513, 4513, 4513, 4247, 6322, 6427, 4241, 4513, 6090, 4513, 4513, 4513, 4513,
  /* 3078 */ 4247, 5077, 4240, 4241, 5788, 4245, 4171, 4171, 4240, 4241, 4241, 4241, 5221, 4513, 4513, 4513, 4513, 4171,
  /* 3096 */ 4113, 4241, 6496, 4513, 4513, 5799, 4241, 4241, 4513, 4513, 4513, 4513, 4513, 4513, 4513, 4513, 4245, 4180,
  /* 3114 */ 4180, 4171, 4171, 4439, 5804, 5806, 5806, 5808, 5810, 5814, 5858, 4115, 5168, 4157, 4388, 5843, 5114, 4513,
  /* 3132 */ 5454, 4171, 4113, 4171, 4171, 4171, 6400, 5429, 6397, 4241, 5870, 4241, 5464, 4513, 4513, 4513, 4513, 4247,
  /* 3150 */ 5319, 4240, 4241, 6020, 4513, 4513, 6296, 5548, 5071, 4240, 6482, 5875, 6511, 5563, 4241, 4244, 5880, 5887,
  /* 3168 */ 5892, 6183, 4513, 4247, 4171, 4240, 6513, 4241, 4241, 4954, 4241, 6249, 6336, 6255, 4513, 4241, 5768, 5773,
  /* 3186 */ 4241, 4513, 4513, 5898, 5903, 5926, 4246, 4240, 5932, 4241, 4242, 6676, 4513, 4513, 4513, 5641, 4513, 4246,
  /* 3204 */ 4171, 4171, 4171, 4171, 5219, 6151, 4513, 6302, 4241, 4241, 4513, 4513, 6301, 6236, 4513, 6274, 4243, 5956,
  /* 3222 */ 4241, 4243, 4513, 4241, 4513, 6591, 4180, 4180, 5973, 5973, 5975, 5977, 5981, 4171, 4115, 5168, 5002, 6009,
  /* 3240 */ 6012, 6019, 6024, 6030, 4171, 4113, 5601, 4513, 4513, 4246, 4171, 4171, 4171, 6037, 4241, 6055, 4513, 4513,
  /* 3258 */ 4513, 4513, 4513, 4513, 4513, 6451, 4513, 4513, 6061, 4171, 4171, 4171, 4240, 4241, 4241, 5522, 4241, 4241,
  /* 3276 */ 4241, 6003, 4241, 4241, 4241, 4241, 4513, 4513, 4513, 4513, 4247, 5158, 4513, 6073, 4513, 4513, 4513, 4245,
  /* 3294 */ 4171, 4171, 5170, 4973, 5082, 4241, 4978, 4241, 6301, 6083, 4241, 6088, 4513, 6302, 4241, 4242, 4513, 4513,
  /* 3312 */ 6558, 4241, 6567, 4513, 4439, 5169, 4171, 4171, 4398, 4400, 6094, 4171, 5552, 4171, 4171, 4171, 4240, 5562,
  /* 3330 */ 4241, 4244, 6435, 4513, 4513, 4513, 4247, 4238, 5734, 4241, 4241, 5627, 4513, 4931, 5170, 4241, 4241, 6386,
  /* 3348 */ 4241, 4241, 4241, 4241, 4241, 4877, 4513, 4513, 4513, 4513, 4513, 4513, 4513, 5618, 4513, 4513, 5899, 4513,
  /* 3366 */ 4513, 4513, 4513, 4245, 5733, 4241, 5738, 4513, 4241, 4243, 4513, 6309, 4243, 5515, 4241, 4513, 4243, 4180,
  /* 3384 */ 4180, 4171, 4171, 4439, 5146, 5871, 4241, 4241, 4243, 6466, 4513, 4513, 4246, 4240, 4241, 4241, 5364, 4513,
  /* 3402 */ 4513, 4240, 6152, 4243, 4513, 6300, 6307, 4180, 4180, 4171, 4171, 4439, 6113, 6115, 6115, 6117, 6119, 6123,
  /* 3420 */ 4171, 4115, 5168, 4171, 4171, 5325, 4171, 4171, 4147, 5170, 5065, 4421, 4171, 6064, 4240, 4241, 4241, 6133,
  /* 3438 */ 6139, 4513, 4513, 5136, 6587, 4171, 4113, 4171, 4171, 6040, 4828, 4829, 5387, 6000, 6563, 5362, 4241, 4241,
  /* 3456 */ 4241, 6146, 4241, 4241, 4877, 6240, 5409, 4513, 4513, 6244, 4513, 4513, 4513, 5506, 4513, 4513, 4513, 5596,
  /* 3474 */ 4513, 4513, 4513, 5958, 4513, 4513, 4247, 4171, 4656, 4171, 6403, 4241, 4241, 5415, 4241, 4241, 4241, 4241,
  /* 3492 */ 4241, 4479, 4513, 4513, 4513, 4513, 4513, 4513, 4513, 4246, 4171, 4171, 4171, 4171, 5219, 4241, 4241, 4241,
  /* 3510 */ 4241, 4241, 4241, 4241, 4877, 6156, 4513, 5922, 4513, 4513, 4513, 4513, 4513, 4245, 4171, 4171, 4240, 4241,
  /* 3528 */ 4241, 4241, 4247, 4171, 6357, 4171, 4240, 4241, 4241, 4241, 6680, 4513, 4513, 6161, 5459, 4241, 4241, 4513,
  /* 3546 */ 4513, 4513, 5904, 4513, 6262, 4513, 4245, 4171, 4171, 4240, 4241, 6459, 4241, 4513, 4949, 4241, 6171, 6177,
  /* 3564 */ 4487, 6301, 4241, 4513, 4513, 5413, 5419, 6685, 4241, 4243, 6195, 6195, 6197, 6199, 6203, 6212, 4115, 5168,
  /* 3582 */ 6494, 6234, 4241, 6619, 4241, 4241, 4241, 4241, 4241, 5521, 4241, 4877, 4513, 4513, 6260, 6074, 4513, 6266,
  /* 3600 */ 5060, 4171, 6225, 6424, 6328, 4241, 6331, 5392, 4241, 4513, 4513, 6268, 4241, 4242, 6182, 4513, 4513, 4513,
  /* 3618 */ 6290, 4247, 4238, 4241, 4241, 4241, 5567, 4241, 4241, 4241, 4241, 4241, 4241, 5625, 4241, 4513, 6315, 6420,
  /* 3636 */ 4513, 4247, 4171, 4240, 4241, 4241, 6108, 4241, 4241, 4241, 4241, 4241, 4983, 4513, 4995, 6272, 4241, 6278,
  /* 3654 */ 4244, 4513, 6284, 4513, 6289, 4513, 4513, 6104, 4239, 4241, 4241, 6610, 4243, 4513, 4513, 6639, 4246, 4240,
  /* 3672 */ 4241, 4241, 4242, 4513, 4513, 4513, 6302, 4241, 4241, 4513, 4513, 6301, 4241, 4241, 4513, 4513, 6302, 4241,
  /* 3690 */ 4242, 4513, 4513, 4240, 4241, 4243, 4513, 4245, 4241, 4241, 4513, 4513, 4241, 4241, 6313, 4513, 4241, 4243,
  /* 3708 */ 4513, 4241, 4243, 6319, 6340, 6344, 6346, 6348, 6350, 6354, 4171, 6706, 4171, 4171, 4171, 4171, 4171, 5992,
  /* 3726 */ 4502, 6380, 4241, 5221, 6392, 6033, 4513, 4513, 4513, 5313, 4513, 4245, 4171, 4171, 4936, 4241, 4241, 4241,
  /* 3744 */ 4241, 4241, 4241, 5594, 4513, 5170, 6491, 4241, 4241, 4241, 5142, 4241, 4241, 5124, 5822, 4241, 4241, 4241,
  /* 3762 */ 5086, 5729, 4241, 4241, 6409, 4513, 4513, 4513, 4513, 4513, 5288, 4171, 4171, 6413, 4513, 4513, 6418, 4513,
  /* 3780 */ 4246, 4171, 4171, 4513, 4513, 4513, 6445, 4247, 4171, 4171, 5054, 6473, 4171, 6476, 4241, 5496, 4241, 6456,
  /* 3798 */ 4241, 5190, 4513, 6302, 4241, 4242, 4513, 4513, 5829, 4241, 6576, 4513, 6167, 4513, 6465, 4513, 6470, 4171,
  /* 3816 */ 4240, 6500, 4241, 4241, 4241, 4244, 6504, 4513, 4513, 4513, 6302, 6078, 4241, 5092, 4513, 4513, 4513, 5928,
  /* 3834 */ 4513, 4513, 4513, 4513, 4513, 5315, 4171, 4171, 6526, 6532, 4513, 4513, 6538, 4239, 4241, 6543, 5933, 4243,
  /* 3852 */ 4513, 6569, 6656, 4246, 5527, 4241, 5221, 6694, 4513, 4513, 4513, 4171, 4113, 4171, 4171, 4171, 4171, 4171,
  /* 3870 */ 4171, 5170, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4513, 4513, 4241, 6547, 6552, 4513, 5089, 6302, 4241,
  /* 3888 */ 4241, 5350, 4877, 4513, 5469, 4513, 4513, 4513, 4919, 4247, 4171, 4240, 4241, 4241, 4979, 5221, 4513, 4513,
  /* 3906 */ 5267, 4241, 6573, 4513, 6582, 4241, 4243, 4513, 4513, 4513, 6302, 6173, 4241, 4513, 6294, 6605, 4171, 4115,
  /* 3924 */ 5168, 4171, 4171, 4171, 4171, 4247, 4171, 5861, 4241, 4241, 4241, 4241, 4942, 4240, 6628, 4241, 4242, 6670,
  /* 3942 */ 4513, 4513, 6302, 4241, 4241, 4513, 4513, 6301, 5140, 6637, 4513, 6643, 4241, 4241, 4513, 4513, 4241, 4513,
  /* 3960 */ 4243, 5376, 4180, 4171, 4171, 5219, 5382, 4241, 4241, 5691, 4241, 5119, 4513, 4513, 4513, 4171, 4113, 4171,
  /* 3978 */ 6126, 4513, 6655, 4513, 4513, 4513, 4513, 4513, 4513, 5206, 4171, 4240, 4241, 4241, 6660, 4241, 5568, 4244,
  /* 3996 */ 4513, 4513, 4513, 4513, 5453, 4247, 4171, 4115, 5168, 4171, 6043, 4171, 4171, 4969, 4171, 5219, 4241, 6711,
  /* 4014 */ 4241, 4513, 6669, 4513, 6245, 4247, 4171, 4240, 4241, 4241, 6429, 5795, 4241, 4244, 4513, 4513, 4513, 4513,
  /* 4032 */ 4247, 5584, 5017, 4241, 4241, 5221, 5335, 4513, 4513, 4513, 4513, 5705, 4239, 4241, 4241, 4241, 5230, 4241,
  /* 4050 */ 4877, 4513, 4513, 4513, 4513, 4513, 6103, 4171, 4171, 4513, 5236, 4171, 4113, 4171, 4171, 4171, 4171, 4180,
  /* 4068 */ 4180, 4171, 4171, 4439, 5707, 6698, 6698, 5709, 4171, 5710, 4171, 4115, 4111, 4171, 4171, 4364, 4371, 4164,
  /* 4086 */ 4360, 4171, 4171, 4439, 4171, 4171, 4171, 4119, 6715, 4171, 4959, 4129, 4138, 4142, 4151, 11298, 41, 11298,
  /* 4104 */ 11298, 11298, 11298, 0, 0, 38, 0, 45, 140288, 0, 0, 41, 41, 41, 44, 0, 135168, 176128, 199680, 210944, 0,
  /* 4125 */ 41, 41, 41, 7281, 0, 195584, 196608, 0, 36, 0, 0, 0, 394, 0, 202752, 204800, 205824, 0, 208896, 211968, 0,
  /* 4146 */ 37, 0, 0, 237, 0, 0, 225280, 0, 0, 49, 49, 0, 0, 0, 117, 141312, 141312, 225280, 141312, 141312, 141312,
  /* 4167 */ 141312, 181248, 141312, 184320, 0, 0, 0, 0, 36, 0, 206848, 0, 0, 70, 88, 70, 88, 479, 480, 141312, 184320,
  /* 4188 */ 141312, 141312, 136192, 0, 141312, 194560, 141312, 141312, 136192, 314, 197632, 0, 0, 0, 39, 178176,
  /* 4204 */ 141312, 141312, 178176, 141312, 141312, 187392, 141312, 141312, 141312, 220160, 141312, 203776, 141312,
  /* 4217 */ 209920, 141312, 223232, 141312, 141312, 141312, 227328, 0, 228352, 0, 226304, 180224, 141312, 141312,
  /* 4231 */ 141312, 173056, 141312, 141312, 141312, 226304, 141312, 0, 0, 0, 70, 70, 70, 70, 88, 88, 88, 0, 0, 0, 110,
  /* 4252 */ 228352, 141312, 141312, 141312, 186368, 141312, 141312, 228352, 0, 0, 191488, 0, 217088, 0, 0, 70, 579,
  /* 4269 */ 141312, 191488, 141312, 141312, 188416, 141312, 141312, 217088, 141312, 141312, 189440, 141312, 141312,
  /* 4282 */ 141312, 219136, 141312, 186368, 0, 0, 75, 93, 93, 93, 200704, 179200, 173056, 141312, 0, 137216, 224256,
  /* 4299 */ 179200, 141312, 141312, 141312, 190464, 141312, 141312, 200704, 141312, 141312, 192512, 201728, 207872,
  /* 4312 */ 214016, 141312, 218112, 141312, 141312, 195584, 196608, 141312, 198656, 141312, 202752, 141312, 204800,
  /* 4325 */ 205824, 141312, 141312, 208896, 141312, 211968, 141312, 141312, 0, 201728, 218112, 141312, 177152, 141312,
  /* 4339 */ 141312, 141312, 197632, 141312, 141312, 141312, 227328, 0, 141312, 141312, 185344, 185344, 141312, 141312,
  /* 4353 */ 141312, 212992, 141312, 141312, 219136, 174080, 141312, 141312, 141312, 216064, 216064, 141312, 193536,
  /* 4366 */ 215040, 141312, 0, 141312, 175104, 183296, 141312, 183296, 141312, 0, 141312, 182272, 141312, 141312,
  /* 4380 */ 206848, 141312, 49, 49, 49, 49, 0, 14336, 0, 0, 0, 125, 0, 14336, 14336, 14336, 7282, 140288, 0, 0, 82,
  /* 4401 */ 100, 100, 100, 35, 42, 35, 35, 35, 35, 15395, 35, 15395, 35, 35, 15395, 15395, 15395, 35, 35, 15395, 0, 0,
  /* 4423 */ 0, 131, 210944, 0, 143471, 143471, 143471, 44, 17408, 17408, 17408, 17408, 0, 0, 17408, 210944, 0, 41, 0,
  /* 4442 */ 0, 18432, 18432, 19456, 18432, 18432, 18432, 18432, 8279, 8279, 8279, 0, 0, 0, 227, 20480, 20480, 21504,
  /* 4460 */ 20480, 20480, 20480, 22528, 22528, 22528, 22528, 23552, 23552, 23552, 23552, 0, 135168, 0, 0, 88, 88, 88,
  /* 4478 */ 625, 70, 8470, 88, 88, 88, 640, 88, 485, 88, 88, 88, 644, 70, 612, 70, 70, 88, 729, 621, 88, 88, 622, 634,
  /* 4502 */ 70, 70, 70, 156, 88, 638, 88, 88, 88, 659, 656, 88, 88, 88, 88, 191, 0, 24681, 24681, 24681, 0, 0, 0, 321,
  /* 4526 */ 25600, 135391, 0, 0, 109, 0, 26692, 26692, 0, 0, 122, 0, 223, 106, 0, 0, 0, 324, 88, 315, 315, 0, 44, 44,
  /* 4550 */ 44, 0, 0, 0, 124, 210944, 0, 0, 143472, 16384, 143472, 44, 141452, 198796, 141452, 202892, 141452, 204940,
  /* 4568 */ 205964, 141452, 0, 141494, 175286, 141452, 209036, 141452, 212108, 225420, 141452, 141452, 141452, 220300,
  /* 4582 */ 189622, 141494, 141494, 141494, 141494, 181430, 195766, 196790, 141494, 198838, 141494, 202934, 141494,
  /* 4595 */ 204982, 206006, 141494, 141494, 209078, 141494, 212150, 141494, 141494, 178358, 141494, 0, 141312, 141452,
  /* 4609 */ 175244, 141452, 194700, 141452, 141452, 173238, 141494, 141494, 194742, 141494, 141494, 188598, 141494,
  /* 4622 */ 178176, 141452, 141452, 178316, 141452, 187532, 141452, 141452, 181388, 141452, 141452, 203916, 141452,
  /* 4635 */ 210060, 223372, 141452, 141452, 141452, 227468, 187574, 141494, 141494, 141494, 219318, 141494, 197814,
  /* 4648 */ 141494, 141494, 190646, 141494, 203958, 141494, 210102, 141494, 0, 0, 0, 397, 141494, 221366, 222390,
  /* 4663 */ 223414, 180364, 141452, 141452, 141452, 188556, 141452, 228492, 141494, 141494, 141494, 220160, 180406,
  /* 4676 */ 141494, 141494, 141494, 220342, 228534, 0, 0, 191488, 141452, 191628, 141452, 141452, 189580, 141452,
  /* 4690 */ 141452, 217228, 141452, 141452, 190604, 141452, 141494, 217270, 141494, 141494, 213174, 141494, 141452,
  /* 4703 */ 186508, 141452, 141452, 192652, 201868, 200704, 179200, 173196, 141452, 141452, 226444, 141452, 141452,
  /* 4716 */ 213132, 141452, 141452, 221324, 222348, 179340, 141452, 141452, 141452, 195724, 196748, 141452, 200844,
  /* 4729 */ 141452, 141452, 197772, 141452, 179382, 141494, 141494, 141494, 225462, 141494, 141494, 200886, 141494,
  /* 4742 */ 141494, 226486, 141494, 218112, 141452, 177292, 141452, 141494, 141452, 141494, 216204, 216246, 208012,
  /* 4755 */ 214156, 141452, 218252, 177334, 141494, 141494, 141494, 0, 137216, 224256, 192694, 201910, 208054, 214198,
  /* 4769 */ 141494, 218294, 141494, 141494, 0, 141452, 141452, 141452, 141452, 141494, 141494, 141494, 0, 201728,
  /* 4783 */ 141494, 227510, 0, 141452, 141452, 185484, 185526, 141494, 141494, 141494, 182454, 141494, 141494, 0,
  /* 4797 */ 141452, 182412, 174220, 141452, 141452, 141452, 206988, 141452, 141452, 219276, 174262, 141494, 184502,
  /* 4810 */ 141494, 141494, 186550, 141494, 141452, 193676, 215180, 141452, 184460, 141452, 141452, 181, 141494,
  /* 4823 */ 141494, 193718, 215222, 141494, 186368, 0, 0, 134, 0, 0, 183436, 141452, 183478, 141494, 191670, 141494,
  /* 4839 */ 141494, 207030, 141494, 30770, 30770, 30770, 30770, 0, 31744, 0, 0, 138, 0, 33792, 33792, 33792, 33792,
  /* 4856 */ 13312, 32768, 35840, 0, 45, 0, 0, 0, 126, 34867, 34867, 34867, 34867, 0, 38912, 38912, 38912, 0, 0, 0,
  /* 4876 */ 27648, 8470, 242, 88, 88, 88, 679, 0, 39936, 39936, 39936, 0, 0, 230, 0, 40960, 40960, 40960, 40960, 46, 0,
  /* 4897 */ 52, 52, 52, 52, 71, 89, 89, 89, 89, 0, 0, 0, 141452, 139, 70, 70, 143, 451, 0, 0, 0, 175104, 88, 496, 88,
  /* 4922 */ 88, 88, 736, 88, 532, 88, 88, 188, 88, 562, 88, 88, 88, 192, 457, 70, 459, 460, 70, 673, 70, 88, 522, 88,
  /* 4946 */ 680, 88, 682, 88, 0, 628, 70, 150, 70, 70, 416, 70, 90, 0, 0, 0, 189440, 45, 46, 0, 116, 231, 0, 0, 0, 323,
  /* 4972 */ 0, 243, 70, 70, 70, 165, 256, 70, 70, 70, 173, 8470, 242, 279, 88, 0, 666, 70, 151, 70, 70, 611, 70, 88,
  /* 4996 */ 287, 88, 88, 199, 88, 335, 70, 70, 70, 175, 366, 88, 88, 88, 193, 70, 551, 552, 70, 152, 70, 70, 153, 70,
  /* 5020 */ 70, 162, 70, 166, 70, 591, 88, 88, 200, 88, 88, 605, 0, 0, 327, 0, 70, 669, 70, 70, 246, 70, 46, 0, 53, 53,
  /* 5046 */ 53, 53, 73, 91, 91, 91, 91, 0, 0, 0, 400, 0, 124, 0, 0, 0, 453, 0, 157, 70, 70, 70, 247, 228, 0, 0, 0, 456,
  /* 5074 */ 0, 234, 0, 0, 0, 501, 0, 244, 70, 70, 70, 251, 8470, 242, 280, 88, 88, 624, 88, 88, 639, 88, 88, 643, 88,
  /* 5099 */ 0, 538, 0, 41, 22528, 0, 41, 0, 37888, 0, 0, 0, 17408, 88, 299, 88, 88, 201, 88, 301, 88, 88, 88, 194, 405,
  /* 5124 */ 70, 70, 70, 263, 88, 492, 88, 88, 202, 88, 88, 525, 88, 88, 210, 212, 70, 649, 70, 70, 261, 70, 46, 47, 54,
  /* 5149 */ 54, 54, 54, 74, 92, 92, 92, 92, 0, 0, 0, 578, 70, 127, 0, 130, 0, 45, 45, 45, 46, 0, 0, 0, 242, 132, 0, 0,
  /* 5177 */ 0, 3072, 3072, 0, 0, 0, 146, 70, 70, 155, 176, 70, 0, 88, 88, 658, 88, 88, 646, 70, 169, 70, 172, 213, 216,
  /* 5202 */ 218, 88, 88, 678, 88, 0, 137216, 0, 41, 17408, 17408, 0, 0, 0, 135, 239, 0, 0, 242, 70, 70, 0, 88, 252, 70,
  /* 5227 */ 70, 255, 262, 70, 70, 70, 274, 88, 291, 88, 88, 221, 88, 322, 0, 0, 0, 16384, 29696, 338, 70, 70, 341, 345,
  /* 5251 */ 70, 70, 347, 348, 349, 70, 70, 273, 70, 356, 70, 70, 359, 70, 8470, 361, 88, 88, 700, 0, 69, 69, 69, 72,
  /* 5275 */ 90, 90, 90, 369, 88, 88, 372, 376, 88, 88, 378, 379, 380, 88, 88, 223, 315, 387, 88, 88, 390, 392, 0, 0, 0,
  /* 5300 */ 18432, 18432, 0, 8279, 409, 70, 70, 70, 277, 430, 431, 88, 433, 442, 443, 88, 88, 224, 0, 500, 0, 0, 0,
  /* 5323 */ 20480, 20480, 0, 0, 0, 232, 514, 70, 70, 70, 334, 531, 88, 88, 88, 195, 540, 541, 542, 70, 257, 70, 70,
  /* 5346 */ 354, 70, 70, 545, 70, 70, 276, 70, 550, 70, 70, 70, 337, 70, 555, 557, 70, 258, 70, 70, 616, 88, 88, 566,
  /* 5370 */ 88, 88, 284, 88, 70, 615, 70, 88, 741, 742, 70, 631, 70, 70, 333, 70, 664, 0, 70, 70, 145, 668, 70, 70, 70,
  /* 5395 */ 344, 88, 677, 88, 88, 288, 88, 687, 70, 70, 70, 355, 88, 695, 88, 88, 289, 88, 70, 714, 70, 70, 340, 70,
  /* 5419 */ 70, 718, 88, 720, 93, 0, 0, 0, 22528, 22528, 0, 0, 0, 235, 158, 70, 70, 70, 408, 455, 0, 0, 0, 23552,
  /* 5443 */ 23552, 0, 0, 0, 238, 475, 70, 70, 70, 414, 495, 88, 88, 88, 222, 713, 70, 70, 70, 420, 733, 70, 70, 70,
  /* 5467 */ 425, 735, 88, 88, 88, 290, 46, 0, 55, 55, 55, 55, 76, 94, 94, 94, 94, 0, 0, 0, 26692, 26692, 26692, 583,
  /* 5491 */ 70, 70, 70, 463, 586, 70, 70, 70, 466, 597, 88, 88, 88, 293, 600, 88, 88, 88, 294, 623, 88, 88, 88, 303,
  /* 5515 */ 730, 731, 88, 88, 292, 88, 271, 70, 70, 70, 470, 626, 0, 70, 70, 608, 46, 0, 56, 65, 65, 65, 65, 77, 95,
  /* 5540 */ 95, 95, 95, 0, 0, 0, 30770, 30770, 0, 0, 0, 454, 118, 0, 0, 0, 33792, 33792, 0, 0, 0, 502, 147, 70, 70, 70,
  /* 5566 */ 474, 259, 70, 70, 70, 477, 88, 283, 88, 88, 298, 88, 88, 313, 0, 0, 34867, 34867, 0, 0, 0, 543, 88, 384,
  /* 5590 */ 88, 88, 300, 88, 88, 427, 88, 88, 302, 88, 520, 88, 88, 88, 304, 537, 0, 0, 0, 36864, 0, 554, 70, 70, 70,
  /* 5615 */ 513, 88, 570, 88, 88, 307, 88, 652, 653, 654, 70, 268, 70, 70, 556, 70, 660, 661, 662, 663, 704, 70, 70,
  /* 5638 */ 70, 516, 710, 88, 88, 88, 308, 739, 740, 70, 88, 88, 723, 88, 88, 732, 88, 88, 136192, 0, 43, 0, 0, 123, 0,
  /* 5663 */ 46, 0, 57, 57, 57, 57, 78, 96, 96, 96, 96, 0, 0, 0, 37888, 37888, 45, 46, 115, 0, 70, 141, 70, 272, 70, 70,
  /* 5689 */ 358, 70, 342, 70, 70, 70, 519, 373, 88, 88, 88, 311, 503, 70, 70, 506, 88, 575, 0, 0, 98304, 98304, 0, 0,
  /* 5713 */ 0, 590, 70, 88, 88, 523, 604, 88, 0, 0, 539, 70, 688, 689, 70, 275, 70, 70, 269, 270, 701, 70, 70, 70, 546,
  /* 5738 */ 707, 88, 88, 88, 365, 70, 725, 70, 70, 410, 411, 46, 0, 58, 58, 58, 58, 79, 97, 97, 97, 97, 0, 0, 0,
  /* 5763 */ 141494, 141494, 136192, 0, 248, 70, 70, 70, 549, 264, 70, 70, 70, 553, 309, 88, 88, 88, 368, 88, 377, 88,
  /* 5785 */ 88, 364, 88, 446, 88, 88, 88, 375, 88, 627, 70, 70, 473, 70, 645, 88, 0, 70, 629, 46, 0, 59, 59, 59, 59,
  /* 5810 */ 80, 98, 98, 98, 98, 0, 0, 0, 70, 403, 70, 267, 70, 70, 265, 70, 136, 0, 0, 0, 70, 686, 70, 149, 70, 70,
  /* 5836 */ 350, 351, 159, 70, 70, 70, 558, 183, 88, 88, 88, 386, 316, 0, 0, 0, 106, 106, 106, 398, 0, 0, 0, 108, 0, 0,
  /* 5862 */ 70, 505, 70, 353, 70, 70, 343, 70, 417, 70, 70, 70, 582, 464, 70, 70, 70, 585, 88, 481, 482, 88, 88,
  /* 5885 */ 136192, 314, 484, 88, 88, 88, 429, 88, 488, 88, 88, 367, 88, 565, 88, 88, 88, 436, 569, 88, 88, 88, 439,
  /* 5908 */ 70, 580, 70, 70, 512, 70, 70, 587, 70, 70, 518, 70, 88, 594, 88, 88, 371, 88, 88, 601, 88, 88, 374, 88,
  /* 5932 */ 609, 70, 70, 70, 589, 88, 665, 70, 70, 548, 70, 672, 70, 674, 88, 185, 88, 88, 88, 709, 88, 681, 88, 683,
  /* 5956 */ 721, 722, 88, 88, 381, 382, 743, 744, 70, 88, 186, 88, 88, 295, 88, 46, 0, 60, 60, 60, 60, 81, 99, 99, 99,
  /* 5981 */ 99, 0, 0, 0, 119, 0, 0, 40960, 40960, 0, 0, 0, 141312, 141312, 141312, 0, 141312, 141312, 175104, 148, 70,
  /* 6002 */ 154, 70, 413, 70, 70, 581, 70, 177, 70, 0, 88, 187, 190, 88, 197, 88, 204, 196, 88, 88, 88, 441, 206, 209,
  /* 6026 */ 88, 88, 385, 88, 88, 217, 219, 88, 198, 203, 205, 325, 0, 0, 0, 129, 0, 0, 120, 0, 0, 121, 0, 0, 133, 0, 0,
  /* 6053 */ 318, 0, 360, 8470, 88, 88, 389, 88, 391, 0, 0, 0, 137, 0, 0, 224, 0, 0, 226, 0, 437, 88, 88, 88, 445, 630,
  /* 6079 */ 70, 70, 70, 617, 648, 70, 70, 70, 651, 88, 657, 88, 88, 432, 88, 100, 0, 0, 0, 225, 41, 41, 28672, 44, 312,
  /* 6104 */ 88, 0, 0, 577, 412, 70, 70, 70, 655, 46, 0, 61, 61, 61, 61, 83, 101, 101, 101, 101, 0, 0, 0, 229, 0, 0,
  /* 6130 */ 240, 241, 242, 168, 170, 70, 70, 613, 70, 178, 70, 0, 88, 207, 88, 211, 266, 70, 70, 70, 675, 331, 70, 70,
  /* 6154 */ 70, 690, 362, 88, 88, 88, 483, 415, 70, 70, 70, 703, 559, 88, 88, 88, 486, 70, 635, 70, 70, 632, 633, 637,
  /* 6178 */ 88, 88, 88, 490, 676, 88, 88, 88, 494, 717, 70, 88, 88, 438, 88, 46, 48, 62, 62, 62, 62, 84, 102, 102, 102,
  /* 6203 */ 102, 0, 0, 0, 317, 0, 0, 187392, 0, 107, 0, 0, 0, 319, 320, 0, 67, 0, 67, 126, 0, 0, 0, 326, 0, 328, 160,
  /* 6230 */ 70, 70, 70, 734, 253, 70, 70, 70, 650, 70, 282, 88, 88, 285, 296, 88, 88, 88, 497, 421, 70, 70, 70, 693,
  /* 6254 */ 88, 426, 88, 88, 88, 530, 88, 440, 88, 88, 444, 88, 88, 448, 88, 0, 70, 667, 511, 70, 70, 70, 715, 716,
  /* 6278 */ 517, 70, 70, 70, 719, 88, 528, 88, 88, 88, 533, 534, 88, 88, 88, 536, 641, 642, 88, 88, 449, 450, 698, 88,
  /* 6302 */ 88, 0, 70, 70, 144, 70, 702, 70, 70, 726, 727, 88, 708, 88, 88, 489, 88, 40, 41, 0, 0, 393, 0, 0, 70, 142,
  /* 6328 */ 70, 332, 70, 70, 339, 70, 70, 346, 70, 70, 424, 70, 46, 0, 63, 63, 66, 66, 63, 66, 66, 66, 85, 103, 103,
  /* 6353 */ 103, 103, 0, 0, 0, 395, 396, 0, 242, 330, 70, 180, 0, 88, 88, 696, 697, 128, 0, 0, 0, 399, 0, 401, 70, 70,
  /* 6379 */ 404, 161, 163, 70, 70, 418, 419, 70, 254, 70, 70, 592, 88, 184, 88, 88, 88, 564, 236, 0, 0, 233, 0, 0, 0,
  /* 6404 */ 402, 70, 70, 670, 671, 8470, 242, 88, 281, 297, 88, 88, 88, 572, 305, 306, 88, 88, 493, 88, 329, 242, 70,
  /* 6427 */ 70, 422, 70, 70, 469, 70, 88, 363, 88, 88, 526, 88, 88, 370, 88, 88, 529, 88, 88, 388, 88, 88, 535, 88,
  /* 6451 */ 447, 88, 88, 0, 647, 471, 70, 70, 70, 465, 70, 70, 88, 694, 491, 88, 88, 88, 596, 88, 498, 0, 0, 452, 0, 0,
  /* 6477 */ 458, 70, 70, 423, 70, 70, 461, 462, 70, 357, 70, 70, 406, 407, 70, 245, 70, 70, 249, 70, 70, 636, 70, 507,
  /* 6501 */ 70, 70, 510, 524, 88, 88, 527, 544, 70, 70, 70, 468, 70, 70, 509, 70, 547, 70, 70, 70, 472, 70, 70, 250,
  /* 6525 */ 70, 88, 560, 88, 88, 567, 568, 88, 563, 88, 88, 571, 573, 574, 0, 576, 0, 504, 70, 70, 584, 70, 614, 70,
  /* 6549 */ 70, 88, 593, 88, 618, 88, 88, 595, 88, 684, 70, 70, 70, 476, 70, 70, 164, 167, 70, 692, 88, 88, 598, 88,
  /* 6573 */ 70, 705, 706, 70, 478, 88, 88, 561, 88, 88, 711, 712, 88, 208, 88, 88, 220, 88, 70, 737, 88, 738, 46, 0,
  /* 6597 */ 64, 64, 64, 64, 86, 104, 104, 104, 104, 0, 0, 0, 607, 70, 70, 588, 70, 352, 70, 70, 70, 508, 70, 70, 260,
  /* 6622 */ 70, 383, 88, 88, 88, 599, 70, 610, 70, 70, 515, 70, 70, 171, 174, 691, 70, 88, 88, 602, 88, 88, 699, 88, 0,
  /* 6647 */ 499, 0, 728, 70, 88, 88, 606, 0, 286, 88, 88, 88, 603, 467, 70, 70, 70, 521, 88, 88, 428, 88, 487, 88, 88,
  /* 6672 */ 88, 620, 88, 310, 88, 88, 619, 88, 179, 70, 0, 88, 214, 88, 88, 88, 724, 88, 434, 435, 88, 215, 88, 88,
  /* 6696 */ 189, 88, 98304, 98304, 98304, 98304, 3072, 3072, 3072, 3072, 0, 140288, 0, 0, 685, 70, 70, 336, 70, 210944,
  /* 6716 */ 0, 0, 0, 8192, 141312, 141312, 221184, 222208, 223232
];

xpath20.EXPECTED =
[
  /*   0 */ 279, 283, 286, 290, 294, 300, 308, 309, 662, 345, 346, 668, 668, 315, 319, 309, 309, 343, 345, 345, 345,
  /*  21 */ 345, 347, 668, 668, 668, 668, 324, 309, 309, 344, 345, 345, 345, 367, 668, 668, 668, 668, 328, 309, 344,
  /*  42 */ 345, 345, 345, 668, 668, 668, 375, 309, 344, 345, 345, 374, 668, 668, 334, 344, 345, 358, 668, 668, 341,
  /*  63 */ 345, 345, 668, 668, 351, 345, 665, 668, 669, 344, 357, 668, 376, 345, 668, 365, 666, 376, 357, 668, 344,
  /*  84 */ 667, 377, 666, 355, 667, 665, 355, 362, 371, 509, 695, 381, 384, 388, 528, 393, 309, 397, 401, 309, 400,
  /* 105 */ 309, 389, 676, 405, 309, 412, 416, 424, 309, 309, 639, 415, 423, 309, 309, 309, 428, 407, 435, 439, 447,
  /* 126 */ 309, 296, 437, 445, 309, 309, 529, 407, 452, 456, 309, 309, 466, 441, 309, 472, 481, 476, 497, 309, 502,
  /* 147 */ 497, 309, 480, 489, 470, 500, 468, 309, 486, 490, 309, 494, 471, 408, 506, 330, 506, 309, 520, 482, 521,
  /* 168 */ 704, 526, 525, 535, 605, 595, 533, 537, 536, 606, 625, 625, 596, 597, 598, 613, 615, 309, 320, 431, 541,
  /* 189 */ 544, 548, 558, 448, 553, 557, 304, 563, 303, 562, 549, 702, 588, 567, 527, 309, 311, 572, 577, 582, 309,
  /* 210 */ 310, 571, 576, 581, 586, 592, 309, 309, 514, 630, 419, 309, 512, 516, 417, 602, 610, 309, 512, 619, 655,
  /* 231 */ 309, 459, 629, 418, 634, 309, 336, 648, 638, 336, 648, 643, 309, 337, 622, 335, 647, 692, 309, 462, 309,
  /* 252 */ 652, 659, 336, 673, 336, 680, 684, 689, 685, 699, 729, 716, 708, 714, 722, 734, 710, 709, 715, 723, 714,
  /* 273 */ 727, 733, 717, 718, 738, 742, 750, 746, 748, 749, 752, 754, 756, 759, 758, 761, 763, 765, 767, 769, 771,
  /* 294 */ 773, 780, 776, 776, 776, 847, 941, 793, 879, 776, 776, 776, 938, 943, 844, 776, 776, 776, 776, 778, 976,
  /* 315 */ 808, 776, 776, 856, 794, 776, 776, 776, 783, 806, 806, 806, 810, 804, 790, 776, 776, 776, 859, 800, 776,
  /* 336 */ 776, 776, 786, 965, 962, 800, 776, 776, 801, 802, 802, 802, 802, 799, 806, 800, 776, 776, 802, 806, 806,
  /* 357 */ 802, 802, 802, 803, 806, 806, 806, 802, 806, 801, 802, 802, 798, 806, 803, 803, 803, 803, 806, 806, 806,
  /* 378 */ 800, 802, 802, 813, 815, 817, 818, 820, 821, 822, 824, 776, 775, 776, 776, 776, 837, 952, 845, 776, 850,
  /* 399 */ 861, 839, 841, 898, 776, 776, 885, 887, 776, 776, 776, 862, 859, 862, 861, 843, 881, 864, 866, 980, 895,
  /* 420 */ 908, 934, 776, 895, 897, 886, 776, 776, 828, 851, 872, 785, 776, 830, 925, 861, 847, 860, 882, 865, 902,
  /* 441 */ 905, 896, 827, 776, 905, 896, 892, 776, 776, 776, 791, 889, 860, 882, 901, 903, 906, 826, 776, 776, 777,
  /* 462 */ 877, 852, 875, 973, 859, 881, 864, 902, 921, 827, 776, 776, 776, 828, 858, 849, 882, 901, 828, 825, 776,
  /* 483 */ 776, 776, 801, 828, 776, 776, 858, 849, 864, 902, 891, 859, 863, 901, 920, 896, 827, 776, 776, 846, 849,
  /* 504 */ 882, 901, 900, 911, 827, 776, 776, 855, 776, 776, 776, 959, 878, 833, 961, 853, 801, 914, 911, 827, 776,
  /* 525 */ 916, 911, 781, 776, 776, 776, 829, 884, 911, 781, 776, 801, 875, 912, 776, 776, 927, 926, 926, 927, 929,
  /* 546 */ 929, 929, 931, 776, 782, 784, 776, 939, 857, 866, 933, 936, 776, 776, 776, 830, 943, 945, 835, 947, 776,
  /* 567 */ 940, 951, 954, 975, 976, 795, 797, 774, 849, 849, 957, 866, 980, 895, 895, 955, 974, 776, 776, 785, 873,
  /* 588 */ 776, 777, 789, 796, 832, 866, 948, 781, 776, 776, 918, 781, 776, 918, 934, 825, 830, 776, 776, 918, 911,
  /* 609 */ 781, 964, 866, 948, 781, 776, 923, 776, 854, 854, 878, 848, 962, 871, 979, 909, 776, 776, 918, 912, 967,
  /* 630 */ 961, 853, 866, 980, 873, 969, 971, 949, 934, 776, 776, 776, 843, 934, 873, 969, 876, 965, 962, 871, 979,
  /* 651 */ 908, 786, 965, 853, 979, 981, 907, 974, 893, 978, 787, 776, 825, 801, 802, 802, 802, 806, 806, 806, 806,
  /* 672 */ 776, 853, 902, 983, 776, 829, 834, 894, 853, 902, 983, 831, 867, 776, 776, 788, 852, 852, 875, 903, 909,
  /* 693 */ 831, 876, 776, 788, 828, 812, 875, 903, 893, 776, 830, 776, 776, 776, 916, 983, 873, 776, 776, 869, 903,
  /* 714 */ 869, 903, 776, 776, 868, 919, 776, 869, 868, 919, 904, 776, 776, 869, 903, 776, 868, 919, 983, 919, 776,
  /* 735 */ 868, 919, 873, 776, 869, 874, 874, 870, 870, 870, 870, 50176, 99328, 268469248, 33792, 33792, 41984, 33792,
  /* 753 */ 134252544, 2196480, 99328, 99648, 99328, -529165308, -529820668, -529820668, -529148924, -429157372,
  /* 763 */ -429140988, -160721916, -429132796, -160705532, 34304, 34432, 230912, 25224952, 130606840, 130672376,
  /* 773 */ -504760580, 1024, 2048, 0, 0, 1, 2, 32768, 268435456, 0, 4, 8192, 67108864, 0, 8, 0, 16, 32, 0, 49,
  /* 793 */ 134219776, 64, 64, 128, 256, 512, 128, 640, 0, 512, 512, 640, 32, 640, 640, 16777264, 56, 48, 32,
  /* 812 */ -985135985, -985135985, -985119601, -985135969, -985119585, -985135969, -985111345, -985111345, -2304,
  /* 821 */ -2304, -2272, -2272, -2129, 0, 67108864, 402653184, 0, 2097152, 0, 4194304, 16, 512, 1024, 524288, 32505856,
  /* 837 */ 12, 1024, 5888, 122880, 1966080, 132120576, 1792, 4096, -1073741824, 0, 768, 1024, 4096, 16384, 0, 1024,
  /* 853 */ 196608, 262144, 0, 2048, 2048, 16384, 768, 4096, 24576, 0, 16384, 65536, 393216, 524288, 1048576, 0, 131072,
  /* 870 */ 262144, 262144, 524288, 4194304, 0, 262144, 1048576, 8, 16, 64, 256, 24576, 32768, 65536, 4194304, 67108864,
  /* 886 */ 1073741824, 0x80000000, 0, 24576, 768, 8388608, 402653184, 536870912, 4194304, 16777216, 33554432, 67108864,
  /* 898 */ 939524096, -1073741824, 16384, 393216, 1048576, 2097152, 4194304, 4194304, 8388608, 33554432, 268435456,
  /* 909 */ 536870912, 0, 1048576, 8388608, 268435456, 4096, 393216, 512, 393216, 512, 262144, 2097152, 8388608,
  /* 922 */ 67108864, 262144, 268435456, -937931855, -937931847, -669496391, -669496391, 2080366587, 2080366587,
  /* 931 */ -67117061, 0, 134217728, 1073741824, 0, 57, 402653184, 123, 384, 512, 2048, 34816, 512, 7168, 16384, 491520,
  /* 947 */ 973078528, 1073741824, 8, 268435456, 16384, 524288, 88080384, 1048576, 134217728, 268435456, 32768, 458752,
  /* 959 */ 1, 8, 4096, 32768, 196608, 1, 16, 1024, 64, 1024, 16, 524288, 1048576, 1073741824, 6291456, 536870912,
  /* 975 */ 1073741824, 24, 32, 16, 1048576, 6291456, 8388608, 16777216, 4194304, 536870912
];

xpath20.TOKEN =
[
  "(0)",
  "END",
  "EOF",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "Wildcard",
  "NCName",
  "QName",
  "S",
  "CommentContents",
  "'!='",
  "'$'",
  "'('",
  "'(:'",
  "')'",
  "'*'",
  "'*'",
  "'+'",
  "'+'",
  "','",
  "'-'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "':)'",
  "'::'",
  "'<'",
  "'<<'",
  "'<='",
  "'='",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'@'",
  "'['",
  "']'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'as'",
  "'attribute'",
  "'cast'",
  "'castable'",
  "'child'",
  "'comment'",
  "'descendant'",
  "'descendant-or-self'",
  "'div'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty-sequence'",
  "'eq'",
  "'every'",
  "'except'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'ge'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'in'",
  "'instance'",
  "'intersect'",
  "'is'",
  "'item'",
  "'le'",
  "'lt'",
  "'mod'",
  "'namespace'",
  "'ne'",
  "'node'",
  "'of'",
  "'or'",
  "'parent'",
  "'preceding'",
  "'preceding-sibling'",
  "'processing-instruction'",
  "'return'",
  "'satisfies'",
  "'schema-attribute'",
  "'schema-element'",
  "'self'",
  "'some'",
  "'text'",
  "'then'",
  "'to'",
  "'treat'",
  "'typeswitch'",
  "'union'",
  "'|'"
];

// End
