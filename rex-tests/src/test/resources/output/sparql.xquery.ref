xquery version "1.0" encoding "UTF-8";

(: This file was generated on Thu Dec 26, 2024 06:57 (UTC+01) by REx v6.1-SNAPSHOT which is Copyright (c) 1979-2024 by Gunther Rademacher <grd@gmx.net> :)
(: REx command line: -q sparql.ebnf -tree -xquery -a xquery :)

                                                                      (: line 2 "sparql.ebnf" :)
                                                                      declare namespace p="sparql";
                                                                      (: line 9 "sparql.xquery" :)
(:~
 : The index of the lexer state for accessing the combined
 : (i.e. level > 1) lookahead code.
 :)
declare variable $p:lk as xs:integer := 1;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the begin of the token that has been consumed.
 :)
declare variable $p:b0 as xs:integer := 2;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the end of the token that has been consumed.
 :)
declare variable $p:e0 as xs:integer := 3;

(:~
 : The index of the lexer state for accessing the code of the
 : level-1-lookahead token.
 :)
declare variable $p:l1 as xs:integer := 4;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the begin of the level-1-lookahead token.
 :)
declare variable $p:b1 as xs:integer := 5;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the end of the level-1-lookahead token.
 :)
declare variable $p:e1 as xs:integer := 6;

(:~
 : The index of the lexer state for accessing the token code that
 : was expected when an error was found.
 :)
declare variable $p:error as xs:integer := 7;

(:~
 : The index of the lexer state that points to the first entry
 : used for collecting action results.
 :)
declare variable $p:result as xs:integer := 8;

(:~
 : The codepoint to charclass mapping for 7 bit codepoints.
 :)
declare variable $p:MAP0 as xs:integer+ :=
(
  70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 5, 6, 5, 7,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 34, 41, 42, 43, 44, 34, 45, 46, 47, 34, 48, 49, 50, 51, 52, 53, 54,
  55, 34, 34, 56, 57, 34, 34, 58, 34, 34, 59, 60, 55, 34, 34, 34, 61, 62, 63, 64, 34, 34, 34, 34, 34, 65, 66, 67, 5, 5
);

(:~
 : The codepoint to charclass mapping for codepoints below the surrogate block.
 :)
declare variable $p:MAP1 as xs:integer+ :=
(
  108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181, 181, 214,
  215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 247, 261, 277, 293, 309, 325, 341,
  356, 392, 392, 392, 384, 440, 432, 440, 432, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440,
  440, 440, 409, 409, 409, 409, 409, 409, 409, 425, 440, 440, 440, 440, 440, 440, 440, 440, 370, 392, 392, 393, 391,
  392, 392, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 392, 392, 392,
  392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
  392, 392, 392, 392, 392, 392, 439, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440,
  440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 392, 70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2,
  0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 5, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
  38, 39, 40, 34, 41, 42, 43, 44, 34, 45, 46, 47, 34, 48, 49, 50, 51, 52, 53, 54, 55, 34, 34, 56, 57, 34, 34, 58, 34,
  34, 59, 60, 55, 34, 34, 61, 62, 63, 64, 34, 34, 34, 34, 34, 65, 66, 67, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 69, 69, 5,
  5, 5, 5, 5, 5, 5, 68, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
  68, 68, 68, 68, 68, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 5, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
  69, 69, 69, 69, 69, 69
);

(:~
 : The codepoint to charclass mapping for codepoints above the surrogate block.
 :)
declare variable $p:MAP2 as xs:integer+ :=
(
  57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 5, 69, 5, 69, 69, 5
);

(:~
 : The token-set-id to DFA-initial-state mapping.
 :)
declare variable $p:INITIAL as xs:integer+ :=
(
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
  33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
);

(:~
 : The DFA transition table.
 :)
declare variable $p:TRANSITION as xs:integer+ :=
(
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2272, 2272, 2276, 2728, 2896, 2897,
  2292, 2896, 2896, 2886, 2896, 2896, 4169, 2896, 2896, 2312, 4169, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2272, 2272, 2276, 2728, 2896, 2896, 2694, 2896, 2896, 2896, 2896, 2896,
  4169, 2896, 2896, 2312, 4169, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2731, 2332, 2896, 2896, 2897, 2396, 2896, 2896, 2886, 2896, 2896, 4169, 2896, 2896, 2312, 4169, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2582, 2896, 2896,
  4611, 2895, 2896, 2896, 6328, 2896, 2896, 4790, 2896, 2896, 2420, 5494, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 4189, 2896, 2896, 2897, 2396, 2896, 2896, 2886, 2896,
  2896, 4169, 2896, 2896, 2312, 4169, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 5195, 4476, 4490, 2896, 2896, 2897, 2396, 2896, 2896, 2886, 2896, 2896, 4169, 2896, 2896, 2312, 4169,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 3994, 2441, 2896,
  2896, 2877, 2396, 2896, 2896, 2886, 2896, 2896, 4169, 2896, 2896, 2312, 4169, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2623, 2896, 2896, 2897, 2482, 2896, 2896, 6267,
  2896, 2896, 2968, 2896, 2896, 2507, 3377, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 6481, 3408, 2528, 2896, 2896, 2897, 2396, 2896, 2896, 2886, 2896, 2896, 4169, 2896, 2896, 2312,
  4169, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 3348, 2296, 2569,
  3991, 2896, 2897, 2396, 2896, 2896, 2886, 2896, 2896, 4169, 2896, 2896, 2312, 4169, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 6192, 4162, 2610, 2896, 2896, 2897, 2396, 2896, 2896,
  2886, 2896, 2896, 4169, 2896, 2896, 2312, 4169, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2316, 2652, 2896, 2896, 2897, 2396, 2896, 2896, 3544, 2896, 2896, 5721, 2896, 2896,
  2312, 4169, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 6112,
  2681, 2896, 2896, 2897, 2396, 2896, 2896, 2886, 2896, 2896, 4169, 2896, 2896, 2312, 4169, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2698, 2714, 2763, 3133, 3108, 2747, 3061,
  3138, 2594, 3900, 3136, 2553, 3903, 3139, 2779, 5710, 6510, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 6290, 2665, 3271, 3483, 2945, 2803, 2831, 3488, 2852, 2913, 3486, 2932, 2916,
  3489, 2961, 2866, 2984, 2995, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 3015, 2896, 2896, 2897, 2396, 2896, 2896, 2886, 2896, 2896, 4169, 2896, 2896, 2312, 4169, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 4442, 2896, 3518, 3056, 3133, 2466, 3044,
  3061, 3138, 3082, 5450, 3136, 2358, 3124, 5236, 3155, 5710, 6510, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 3179, 3201, 3215, 3185, 6012, 3245, 3261, 3309, 6017, 5992, 3306, 6015, 3325,
  6003, 6018, 3370, 3337, 3393, 3404, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2787, 3066, 2896, 2896, 2897, 2396, 2896, 2896, 2886, 2896, 2896, 4169, 2896, 2896, 2312, 4169, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2404, 3643, 3657, 2896, 2896, 2897,
  2895, 2896, 2896, 2886, 2896, 2896, 4169, 2896, 2896, 2312, 4169, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 4931, 3424, 2896, 2896, 3869, 3473, 2896, 2896, 2886, 2896, 2896,
  4169, 2896, 2896, 2312, 4169, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2999, 3505, 2896, 2896, 2897, 3534, 2896, 2896, 2886, 2896, 2896, 4169, 2896, 2896, 2312, 4169, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 3612, 4562, 4576, 2896, 2896,
  2897, 2396, 2896, 2896, 2886, 2896, 2896, 4169, 2896, 2896, 2312, 4169, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2425, 2896, 2896, 2897, 2396, 2896, 2896, 2886, 2896,
  2896, 4169, 2896, 2896, 2312, 4169, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2757, 4877, 4891, 6257, 3229, 4818, 3560, 3588, 6064, 4355, 5187, 2345, 5649, 3124, 6229, 3604, 6359,
  3628, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 4386, 3963, 3977, 3056,
  3133, 3108, 3560, 3061, 5096, 4355, 5187, 3136, 5649, 3124, 3139, 3604, 5807, 6510, 4927, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2757, 4120, 4767, 3056, 3133, 3108, 3560, 3061, 3138, 4074,
  5267, 3136, 5405, 3685, 3139, 3604, 5980, 5546, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2757, 3713, 3727, 3056, 3133, 3108, 3560, 3743, 6390, 4355, 5187, 3136, 5649, 3769, 6501, 3604,
  5923, 6510, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2757, 4400, 4767,
  4959, 3794, 3813, 3829, 3857, 6223, 3885, 3919, 2636, 5776, 3935, 4010, 4035, 6469, 3457, 6188, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 4672, 4849, 4657, 4062, 3281, 5347, 4090, 3061, 6541,
  4355, 6158, 3136, 5649, 3124, 3139, 3604, 5710, 6510, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2757, 3949, 4738, 3056, 3133, 3108, 3560, 3061, 5593, 4355, 5187, 3697, 5649, 3124, 3139,
  3604, 5710, 6510, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2757, 4400,
  4767, 6318, 6491, 3108, 3560, 3061, 3138, 4355, 5187, 3136, 5649, 4106, 2371, 3604, 5710, 6510, 4185, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2757, 4400, 4767, 4205, 3437, 5861, 3560, 3061,
  5172, 4355, 4278, 4905, 4304, 4333, 6395, 4371, 5710, 6510, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2757, 4400, 4767, 3056, 3133, 3108, 3560, 3061, 3138, 4355, 5187, 3136, 5649, 3124,
  3139, 3604, 5710, 6510, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2757,
  4400, 4767, 3056, 3133, 3108, 3560, 4461, 3138, 4355, 5187, 3136, 5649, 3124, 3139, 3604, 5710, 3097, 4927, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 4220, 4531, 4547, 3056, 3133, 3108, 3560,
  4627, 6143, 4355, 5187, 3797, 5649, 3124, 3139, 3604, 5710, 2380, 4703, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2757, 4400, 4767, 3056, 3133, 3108, 4723, 4783, 4806, 4355, 4834, 5280, 5649,
  3124, 6072, 3604, 5710, 6510, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  5822, 4400, 4767, 3056, 3133, 3108, 4947, 4975, 5637, 4355, 5187, 4503, 5649, 3124, 3139, 5020, 5081, 6510, 4927,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 4753, 5127, 5157, 3572, 3778, 3108,
  3560, 5211, 5234, 4355, 5187, 3136, 4515, 5252, 3448, 3604, 5710, 6510, 4927, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2757, 4234, 4767, 3056, 5732, 3108, 3560, 3061, 3138, 4355, 5187, 5308,
  5649, 3124, 3139, 3604, 5710, 5336, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2757, 5363, 5377, 6423, 5393, 3108, 3560, 3061, 5436, 4355, 5421, 2454, 5474, 5510, 5537, 5562, 5578, 5850,
  4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2757, 4248, 4262, 3841, 3133,
  5292, 3560, 5622, 3138, 3669, 5665, 2541, 5649, 3124, 3139, 3604, 5710, 6510, 5487, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2757, 4400, 4767, 3056, 3133, 5748, 3560, 3061, 5764, 4355, 5792,
  5838, 5649, 5877, 3290, 5893, 5965, 4687, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2757, 4400, 4642, 3056, 3133, 3108, 3560, 3061, 5680, 4355, 5695, 3136, 5649, 3124, 3139, 3604, 5908,
  6510, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 6173, 4990, 4767, 3056,
  3133, 3108, 3560, 3061, 3138, 4355, 5187, 3136, 5649, 3124, 3139, 3604, 5710, 6510, 4927, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2757, 4400, 4767, 3056, 3133, 3108, 3560, 3061, 3138, 4355,
  5187, 3136, 5649, 3124, 6548, 6034, 5710, 6510, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2757, 4400, 5141, 3056, 3133, 3108, 3560, 3061, 3138, 4355, 5187, 3136, 5649, 3124, 3139, 3604,
  6454, 6510, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 5936,
  2896, 2896, 2897, 2396, 2896, 2896, 2886, 2896, 2896, 4169, 2896, 2896, 2312, 4169, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 6089, 6088, 2896, 2896,
  3753, 2896, 2896, 5218, 2896, 2896, 6105, 5218, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 5458, 2836, 2896, 2896, 2897, 6128, 2896, 2896, 2886, 2896, 2896, 4169, 2896, 2896,
  2312, 4169, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2512, 2896, 2896, 2897, 6208, 2896, 2896, 2886, 2896, 2896, 4169, 2896, 2896, 2312, 4169, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 3028, 3056, 3133, 3108, 6245, 3061,
  3138, 4355, 5450, 3136, 5649, 3903, 3139, 6283, 5710, 6510, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2897, 2895, 2896, 2896, 2886, 2896, 2896, 4169, 2896,
  2896, 2312, 4169, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2757,
  4863, 5004, 3056, 3133, 5606, 6306, 3061, 3138, 4355, 5187, 3136, 5649, 3124, 3139, 3604, 5710, 6510, 4927, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2757, 4400, 4767, 3056, 3133, 3108, 3560,
  3061, 3138, 2815, 5187, 3136, 5649, 3124, 3139, 6344, 5710, 6510, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2757, 4400, 4767, 3056, 3133, 3108, 3829, 3061, 3138, 3885, 5187, 3136, 4317,
  3124, 3139, 6375, 6049, 6510, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2757, 4400, 5035, 3056, 3133, 3108, 3560, 3061, 3138, 2815, 5187, 3136, 5649, 3124, 3139, 6344, 5710, 6510, 4927,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2757, 4414, 4428, 3056, 3133, 3108,
  3560, 3061, 3138, 4355, 5187, 3136, 5649, 3124, 3139, 3604, 5710, 6510, 4927, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2757, 4400, 4767, 3056, 3133, 3108, 3560, 3061, 3138, 5521, 5187, 3136,
  5649, 3124, 3139, 3604, 5710, 6510, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2757, 4400, 4767, 3056, 3133, 3108, 3560, 3061, 5065, 4355, 5187, 3136, 5649, 3124, 3139, 3604, 5710, 4019,
  4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2757, 4400, 4767, 3056, 3133,
  3108, 6411, 3061, 3138, 2815, 5187, 3136, 5649, 3124, 3139, 6344, 5710, 4916, 4927, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2757, 4134, 4148, 3056, 3133, 5111, 3560, 3061, 3138, 4355, 5187,
  3136, 5320, 3124, 3139, 3604, 5710, 6510, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2757, 4400, 5050, 3056, 3133, 3108, 3560, 3061, 3138, 2815, 5187, 3136, 5649, 3124, 3139, 6344, 5710,
  6510, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2757, 4400, 4767, 3056,
  3133, 3108, 3560, 3061, 3138, 4355, 6439, 3136, 5649, 3124, 3139, 3604, 5710, 6510, 4927, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2491, 5949, 4288, 2896, 2896, 2897, 2895, 2896, 2896, 2886,
  2896, 2896, 4169, 2896, 2896, 2312, 4169, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 4445, 6526, 2896, 2896, 3354, 2895, 2896, 2896, 2886, 2896, 2896, 4169, 2896, 2896, 2312,
  4169, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 3163, 4046,
  2896, 2896, 2897, 2895, 2896, 2896, 2886, 2896, 2896, 4169, 2896, 2896, 2312, 4169, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 4707, 2763, 3133, 3108, 6245, 3061, 3138,
  4344, 5450, 3136, 5649, 3903, 3139, 6283, 5710, 6510, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2757, 4400, 4767, 3056, 3133, 3108, 6245, 3061, 3138, 4355, 5450, 3136, 5649, 3903, 3139,
  6283, 5710, 6510, 4927, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 4589, 4600,
  4609, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
  2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 11776, 11776, 11776, 11776, 11776, 11776, 11776,
  11776, 11776, 11776, 11776, 11776, 11776, 11776, 11776, 11776, 0, 0, 0, 0, 154, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 15360, 0, 0, 202, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16471, 0, 85, 0, 85, 0, 0, 0, 0, 0,
  0, 0, 13312, 85, 45, 0, 0, 0, 55, 55, 55, 55, 55, 55, 55, 55, 55, 232, 55, 55, 55, 55, 6853, 7408, 8391, 8945, 55,
  202, 203, 5836, 2765, 55, 55, 55, 55, 28215, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 0, 0, 0, 31232, 31287, 55, 55,
  55, 55, 0, 154, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 45, 0, 266, 202, 203, 203, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 45, 0, 0, 0, 86, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 86, 45, 0, 0, 0, 55, 55, 55, 55, 227,
  55, 55, 55, 55, 55, 55, 55, 55, 0, 0, 6290, 7828, 0, 0, 0, 55, 55, 55, 55, 151, 9371, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0,
  0, 0, 0, 0, 0, 41472, 0, 0, 0, 0, 0, 0, 41472, 0, 0, 202, 202, 267, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
  0, 0, 0, 14848, 14899, 14899, 14899, 14899, 14899, 14899, 14899, 14848, 14848, 14899, 45, 0, 0, 0, 55, 55, 225, 55,
  55, 55, 55, 55, 55, 55, 55, 55, 55, 0, 240, 0, 241, 55, 202, 203, 0, 2765, 55, 55, 55, 15360, 0, 15360, 0, 15360, 0,
  0, 0, 0, 0, 0, 15360, 45, 0, 0, 0, 96, 96, 96, 96, 96, 96, 96, 96, 96, 0, 0, 0, 0, 55, 55, 151, 0, 0, 154, 0, 0, 0,
  204, 0, 55, 15872, 0, 15872, 0, 0, 0, 0, 0, 0, 0, 0, 15872, 45, 0, 0, 0, 97, 97, 97, 97, 97, 97, 97, 97, 97, 45, 0, 0,
  0, 55, 55, 55, 226, 55, 55, 55, 55, 55, 55, 55, 234, 55, 16471, 0, 16471, 87, 87, 87, 87, 87, 87, 87, 16471, 16471,
  45, 0, 0, 0, 98, 98, 98, 98, 18018, 18018, 98, 98, 18018, 45, 108, 0, 0, 16896, 0, 16896, 0, 0, 0, 0, 0, 0, 0, 0,
  16896, 45, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17496, 0, 17496, 0, 17496, 88, 88, 88, 88, 88, 88,
  88, 17496, 17496, 45, 46, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 154, 0, 0, 0, 0, 55, 55, 55, 45,
  0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 202, 0, 203, 0, 55, 55, 209, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 18944, 0, 0, 18944, 0, 0, 0, 154, 0, 5277, 0, 0, 114, 114, 114, 45, 0, 0, 108, 0, 0, 0, 0, 55, 55, 151, 0,
  151, 154, 0, 154, 0, 0, 2765, 55, 113, 114, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36352, 45, 0, 0, 0, 0, 6853,
  0, 8391, 114, 114, 151, 0, 0, 154, 0, 0, 0, 0, 0, 114, 114, 114, 114, 114, 114, 114, 114, 202, 203, 0, 0, 0, 0, 0,
  14336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 114, 114, 0, 0,
  0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 114, 114, 114, 114, 0, 0, 0, 0, 114, 202, 203, 0, 205, 114, 114, 114,
  114, 0, 0, 145, 147, 0, 0, 0, 114, 114, 114, 114, 151, 0, 202, 0, 203, 0, 114, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
  244, 0, 0, 0, 0, 0, 114, 114, 114, 114, 114, 114, 0, 0, 0, 0, 114, 114, 114, 114, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 21082, 0, 18432, 0, 18432, 0, 0, 0, 0, 0, 0, 0, 0, 18432, 45, 0, 0, 0, 101, 101, 101, 101, 101, 101, 0, 0,
  101, 45, 46, 0, 0, 154, 5277, 4707, 0, 0, 55, 55, 55, 45, 0, 0, 46, 3693, 3182, 0, 0, 0, 2161, 55, 0, 0, 55, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 18944, 45, 0, 0, 0, 6853, 6290, 8391, 7828, 55, 55, 151, 0, 0, 154, 0, 0, 5277, 5836, 2765,
  55, 55, 55, 38455, 55, 55, 0, 0, 0, 0, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 55, 55, 55, 55, 151, 4344, 0, 0, 0,
  55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 0, 8945, 202, 0, 203, 0,
  55, 55, 4344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42496, 0, 42496, 42496, 0, 0, 0, 0, 1536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1590,
  0, 0, 1590, 0, 0, 0, 0, 0, 0, 0, 1590, 0, 0, 0, 1590, 1590, 0, 0, 0, 1590, 1590, 1590, 1590, 0, 1590, 0, 1590, 1590,
  1590, 1590, 1590, 1590, 1590, 1590, 1590, 45, 1536, 0, 0, 126, 0, 0, 0, 55, 55, 55, 55, 55, 55, 55, 55, 139, 140,
  1590, 1590, 1590, 1590, 0, 0, 0, 0, 0, 0, 0, 1590, 1590, 1590, 1590, 151, 154, 0, 0, 0, 159, 1590, 1590, 1590, 45, 0,
  0, 0, 0, 0, 0, 0, 114, 0, 0, 114, 0, 0, 0, 0, 0, 0, 55, 55, 132, 55, 55, 55, 55, 55, 55, 55, 261, 55, 55, 55, 55, 264,
  55, 265, 0, 1590, 1590, 0, 0, 0, 0, 0, 1590, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1590, 1590, 1590, 1590, 0, 0, 0, 0,
  1590, 202, 203, 0, 0, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 202, 203, 0, 0, 0, 0, 0, 15360, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 41984, 0, 0, 0, 0, 151, 0, 202, 0, 203, 0, 1590, 1590, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 10240, 0, 0, 0,
  0, 0, 1590, 1590, 1590, 1590, 1590, 1590, 0, 0, 0, 0, 1590, 1590, 1590, 1590, 1590, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 14848, 0, 14848, 20480, 0, 20480, 0, 0, 0, 0, 0, 0, 0, 0, 20480, 45, 0, 0, 0, 127, 0, 0, 55, 131, 55, 55, 135,
  55, 55, 55, 55, 55, 260, 55, 55, 55, 55, 55, 55, 55, 55, 55, 0, 0, 26112, 0, 55, 25143, 55, 55, 55, 0, 154, 0, 0, 0,
  0, 0, 0, 0, 20013, 0, 0, 0, 0, 0, 0, 0, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 0,
  21082, 0, 21082, 0, 0, 0, 0, 0, 0, 0, 0, 21082, 1024, 0, 0, 0, 4707, 4707, 4707, 4707, 4707, 4707, 4707, 4707, 4707,
  45, 46, 4655, 0, 154, 0, 0, 0, 0, 0, 0, 0, 1024, 0, 0, 0, 0, 0, 0, 0, 151, 0, 0, 154, 0, 0, 0, 204, 0, 0, 154, 0, 0,
  0, 0, 55, 55, 55, 45, 4259, 0, 46, 3693, 3182, 0, 0, 0, 2161, 55, 0, 0, 55, 0, 0, 0, 0, 122, 0, 2161, 55, 0, 0, 55, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 0, 202, 0, 203, 0, 55, 55, 4344, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 50, 0, 0,
  283, 55, 55, 55, 55, 55, 0, 0, 0, 0, 55, 55, 55, 290, 55, 0, 45, 0, 0, 0, 45, 45, 0, 0, 0, 45, 45, 45, 45, 19545, 45,
  19545, 45, 45, 45, 45, 45, 45, 45, 45, 19561, 0, 0, 0, 0, 55, 201, 151, 0, 0, 154, 0, 0, 0, 0, 2765, 55, 4344, 0, 0,
  0, 55, 0, 0, 251, 0, 0, 0, 255, 0, 0, 0, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 28905, 55, 55, 0, 55, 60, 0, 64, 55,
  55, 64, 0, 0, 55, 55, 55, 79, 0, 93, 0, 55, 55, 55, 55, 55, 55, 79, 79, 55, 45, 46, 0, 0, 2161, 55, 0, 0, 55, 169, 0,
  171, 0, 0, 0, 0, 0, 0, 0, 0, 153, 0, 151, 156, 0, 154, 0, 0, 0, 0, 4344, 0, 0, 0, 30263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  55, 55, 55, 55, 55, 55, 55, 138, 55, 55, 0, 125, 0, 0, 0, 0, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 235, 141,
  55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 55, 150, 55, 55, 151, 154, 0, 158, 0, 0, 55, 55, 55, 45, 4259, 0, 46, 3693, 3182, 0,
  0, 0, 2161, 55, 0, 0, 55, 0, 0, 0, 121, 0, 0, 2161, 55, 0, 167, 55, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 13824, 0, 0, 0,
  19968, 21504, 0, 0, 0, 0, 0, 151, 0, 198, 0, 200, 55, 55, 151, 0, 0, 154, 0, 0, 158, 0, 2765, 55, 55, 209, 0, 0, 0, 0,
  55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 55, 55, 4259, 0, 0, 0, 0, 213, 214, 0, 0, 0, 0, 0, 220, 23040, 4344, 0, 249,
  35328, 55, 0, 0, 0, 0, 0, 0, 0, 256, 0, 0, 55, 0, 0, 0, 55, 55, 0, 0, 69, 55, 76, 76, 55, 0, 55, 0, 0, 0, 55, 55, 67,
  0, 0, 55, 55, 55, 78, 0, 78, 0, 55, 55, 55, 55, 55, 55, 78, 78, 55, 45, 46, 0, 0, 11264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 86, 0, 258, 55, 35383, 259, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 0, 0, 0, 0, 55, 55, 55, 55, 40503,
  0, 0, 202, 0, 203, 0, 55, 55, 4344, 0, 0, 269, 0, 0, 0, 0, 0, 42496, 42496, 42496, 42496, 0, 0, 42496, 0, 0, 0, 0,
  3693, 3182, 0, 0, 112, 2161, 55, 0, 0, 55, 112, 0, 0, 0, 0, 0, 22071, 55, 151, 0, 0, 154, 0, 0, 0, 0, 2765, 55, 154,
  0, 0, 0, 0, 55, 55, 55, 45, 4259, 0, 46, 3693, 3182, 0, 165, 4344, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 28160, 0, 55,
  0, 0, 63, 55, 55, 63, 0, 0, 55, 55, 55, 55, 0, 55, 0, 0, 0, 55, 55, 0, 0, 0, 55, 55, 55, 84, 0, 84, 0, 55, 55, 55, 55,
  55, 55, 84, 84, 55, 45, 46, 0, 0, 15872, 0, 0, 15872, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 203, 0, 0, 0, 0, 0, 291, 55,
  55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 3693, 3182, 0, 111, 0, 2161, 55, 0, 0, 55, 0, 119, 0, 0, 0,
  0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 55, 0, 0, 55, 0, 0, 65, 55, 55, 65, 0, 0, 55, 55, 55, 55, 0, 55, 0, 0, 66, 55,
  55, 66, 0, 0, 55, 55, 55, 82, 0, 82, 0, 55, 55, 55, 55, 55, 55, 82, 82, 55, 45, 46, 0, 0, 55, 208, 4259, 210, 0, 0, 0,
  55, 0, 0, 0, 0, 0, 0, 0, 0, 41472, 41472, 41472, 0, 0, 41472, 0, 0, 0, 0, 55, 237, 55, 55, 0, 0, 0, 0, 55, 202, 203,
  0, 2765, 55, 55, 55, 239, 198, 0, 200, 0, 55, 202, 203, 0, 2765, 55, 41015, 55, 4344, 0, 0, 0, 55, 0, 250, 0, 0, 0,
  254, 0, 0, 0, 0, 55, 55, 151, 0, 0, 154, 0, 0, 0, 0, 0, 55, 55, 151, 0, 0, 154, 0, 0, 0, 0, 2765, 55, 0, 202, 0, 203,
  0, 55, 55, 4344, 0, 0, 0, 0, 271, 0, 0, 0, 46, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 55, 0, 0, 55, 0, 0, 0, 55, 55, 0, 0, 0,
  55, 55, 55, 55, 0, 55, 0, 0, 0, 55, 55, 0, 0, 0, 55, 55, 55, 83, 0, 83, 0, 55, 55, 55, 55, 55, 55, 83, 83, 55, 45, 46,
  0, 0, 4655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 0, 2161, 55, 0, 0, 55, 0, 0, 0, 22528, 0, 0, 0, 0, 0, 0, 0,
  49, 49, 49, 0, 49, 49, 0, 0, 0, 49, 49, 49, 0, 0, 49, 0, 49, 49, 49, 49, 49, 49, 49, 49, 49, 45, 0, 0, 0, 55, 55, 55,
  55, 55, 55, 55, 55, 231, 55, 55, 55, 55, 0, 0, 0, 0, 55, 202, 203, 0, 2765, 55, 55, 247, 52, 55, 0, 0, 0, 55, 55, 0,
  52, 0, 72, 55, 55, 80, 0, 80, 0, 94, 0, 55, 55, 55, 55, 55, 55, 80, 80, 55, 45, 46, 0, 0, 50, 50, 50, 0, 50, 50, 0, 0,
  0, 50, 50, 50, 0, 0, 50, 0, 50, 50, 50, 50, 50, 50, 50, 50, 50, 45, 0, 0, 0, 12800, 0, 0, 0, 0, 0, 0, 12800, 12800, 0,
  0, 0, 0, 0, 0, 0, 12800, 0, 12800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9880, 2161, 55, 0, 0, 55, 0, 0, 0, 0,
  0, 0, 0, 175, 0, 177, 0, 55, 0, 55, 55, 55, 55, 55, 104, 55, 55, 55, 45, 46, 0, 0, 55, 0, 55, 55, 55, 75, 75, 75, 55,
  55, 75, 45, 46, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 56, 55, 55, 285, 55, 55, 55, 26624, 0, 0, 0, 55, 55,
  55, 55, 55, 24576, 55, 39479, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 46, 0, 0, 154, 0, 0, 0, 0, 55, 55, 55,
  45, 4259, 0, 46, 3693, 3182, 164, 0, 55, 0, 55, 55, 55, 76, 76, 76, 55, 55, 76, 45, 46, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 53, 55, 0, 0, 55, 0, 55, 55, 55, 55, 55, 55, 55, 55, 55, 45, 46, 0, 0, 2161, 55, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 242, 203, 0, 0, 0, 0, 0, 0, 55, 181, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0,
  0, 55, 139, 140, 55, 151, 55, 55, 4259, 0, 0, 27648, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 56, 0, 55, 55, 0, 56, 68,
  71, 75, 75, 55, 0, 55, 0, 0, 0, 55, 37431, 0, 0, 0, 55, 37431, 37431, 55, 0, 55, 0, 0, 62, 55, 55, 62, 0, 0, 55, 55,
  55, 55, 0, 92, 0, 55, 55, 55, 55, 55, 55, 55, 55, 55, 45, 46, 0, 0, 223, 55, 224, 55, 55, 55, 55, 55, 230, 55, 55, 55,
  55, 55, 287, 0, 0, 0, 0, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20480, 0, 154, 0, 0, 0, 0, 55,
  55, 162, 45, 4259, 0, 46, 3693, 3182, 0, 0, 0, 2161, 55, 0, 0, 55, 0, 0, 120, 0, 0, 123, 2161, 55, 0, 0, 55, 0, 0, 0,
  0, 172, 0, 0, 0, 0, 0, 0, 55, 0, 57, 0, 55, 55, 0, 57, 0, 74, 55, 55, 55, 0, 55, 0, 55, 55, 55, 55, 55, 55, 55, 55,
  37431, 45, 46, 0, 0, 0, 202, 0, 203, 0, 55, 34871, 4344, 0, 268, 0, 0, 0, 0, 0, 0, 55, 0, 102, 102, 102, 102, 102,
  102, 102, 102, 102, 45, 46, 0, 0, 55, 0, 103, 103, 103, 103, 103, 103, 103, 103, 103, 45, 46, 0, 0, 55, 55, 55, 55,
  55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 196, 272, 55, 55, 273, 55, 55, 276, 55, 55, 202, 203, 0, 0, 0, 0, 0, 55, 55,
  55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 192, 55, 55, 143, 55, 0, 0, 0, 0, 0, 0, 0, 55, 55, 55, 55, 151, 59, 55, 0,
  0, 0, 55, 55, 0, 59, 70, 73, 77, 77, 55, 0, 55, 0, 55, 55, 55, 55, 55, 55, 55, 55, 55, 45, 46, 0, 24064, 0, 95, 0, 55,
  55, 55, 77, 77, 77, 55, 55, 77, 45, 46, 0, 0, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 193, 55, 55, 4259,
  0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 49, 0, 0, 2161, 55, 166, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 243, 245, 0, 0, 0, 0, 0, 0, 180, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 7408, 4344, 0, 0, 0,
  55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 257, 55, 55, 4259, 0, 0, 0, 0, 55, 0, 0, 0, 0, 218, 0, 0, 0, 27703, 55, 55, 55, 55, 55,
  55, 55, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 149, 55, 55, 55, 151, 0, 222, 0, 55, 55, 55, 55, 55, 55, 229, 55, 55,
  55, 55, 55, 55, 0, 0, 0, 0, 55, 202, 203, 0, 2765, 246, 55, 55, 55, 284, 55, 55, 55, 55, 0, 0, 0, 0, 55, 55, 55, 55,
  55, 0, 0, 0, 0, 0, 0, 0, 55, 55, 55, 132, 151, 0, 55, 61, 0, 0, 55, 55, 0, 0, 0, 55, 55, 55, 81, 0, 81, 0, 55, 55, 55,
  55, 55, 55, 81, 81, 55, 45, 46, 0, 0, 124, 0, 0, 0, 128, 0, 130, 55, 133, 55, 55, 136, 55, 55, 55, 55, 0, 0, 0, 0,
  25655, 202, 203, 0, 2765, 55, 55, 55, 55, 55, 4259, 0, 0, 0, 212, 55, 0, 0, 0, 0, 0, 0, 0, 0, 55, 55, 55, 55, 55, 55,
  55, 55, 55, 55, 55, 55, 34359, 55, 55, 0, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36352, 0, 0, 36352, 0, 0, 0, 236,
  55, 238, 55, 0, 0, 0, 0, 55, 202, 203, 0, 2765, 55, 55, 55, 29239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10752, 203, 0,
  0, 0, 0, 0, 4344, 0, 0, 0, 55, 31744, 0, 0, 0, 253, 0, 0, 0, 0, 0, 55, 55, 151, 0, 0, 154, 0, 0, 0, 0, 2765, 206, 55,
  31799, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 0, 288, 0, 0, 55, 55, 289, 55, 55, 0, 0, 202, 0, 203, 0,
  55, 55, 4344, 0, 0, 0, 270, 0, 0, 0, 27136, 0, 55, 27191, 55, 55, 55, 55, 55, 55, 202, 203, 0, 0, 0, 0, 0, 55, 55, 55,
  55, 55, 55, 55, 55, 55, 55, 55, 191, 55, 55, 55, 144, 0, 0, 0, 0, 0, 0, 0, 55, 55, 55, 55, 151, 2161, 55, 0, 0, 55, 0,
  170, 0, 0, 0, 173, 0, 0, 176, 0, 0, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 190, 55, 55, 55, 55, 0, 0, 0, 0, 55, 202,
  203, 0, 2765, 55, 55, 55, 55, 55, 4259, 0, 211, 0, 0, 55, 0, 0, 0, 217, 0, 0, 0, 0, 55, 55, 55, 55, 55, 55, 55, 55,
  188, 55, 55, 55, 55, 195, 55, 55, 4259, 0, 0, 0, 0, 55, 0, 0, 216, 0, 0, 0, 0, 0, 55, 55, 55, 55, 55, 55, 55, 55, 202,
  203, 0, 0, 0, 0, 0, 240, 0, 241, 0, 202, 203, 0, 0, 0, 0, 0, 129, 55, 55, 55, 55, 55, 55, 137, 55, 55, 55, 55, 142,
  55, 55, 0, 0, 0, 0, 0, 0, 0, 55, 55, 55, 55, 151, 179, 55, 55, 55, 55, 55, 55, 55, 187, 55, 189, 55, 55, 55, 55, 55,
  198, 0, 200, 0, 55, 202, 203, 0, 2765, 55, 55, 55, 55, 55, 4259, 0, 0, 0, 0, 55, 0, 215, 0, 0, 0, 0, 0, 0, 55, 55, 55,
  55, 55, 55, 55, 55, 202, 203, 0, 0, 0, 281, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 58, 221, 0, 0, 55, 55, 55,
  55, 55, 228, 55, 55, 55, 55, 55, 55, 55, 286, 55, 0, 0, 0, 0, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 55, 55, 131,
  55, 151, 4344, 29696, 0, 0, 55, 0, 0, 0, 252, 0, 0, 0, 0, 0, 0, 29751, 0, 202, 0, 203, 0, 55, 55, 4344, 30720, 0, 0,
  0, 0, 0, 33792, 0, 55, 55, 55, 55, 55, 55, 55, 55, 202, 203, 0, 0, 280, 0, 0, 55, 55, 55, 55, 55, 55, 55, 55, 202,
  203, 0, 32768, 0, 0, 0, 35940, 35940, 35940, 35940, 35940, 35940, 0, 0, 35940, 45, 0, 0, 0, 41472, 0, 0, 0, 0, 41472,
  41472, 41472, 41472, 41472, 0, 0, 0, 0, 30775, 55, 55, 55, 55, 55, 55, 55, 202, 203, 0, 0, 0, 0, 0, 55, 55, 55, 55,
  55, 55, 55, 55, 202, 203, 279, 0, 0, 0, 0, 1590, 1590, 151, 0, 0, 154, 0, 0, 0, 0, 0, 1590, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 0, 0, 202, 0, 203, 0, 55,
  55, 4344, 0, 0, 0, 0, 0, 32256, 0, 0, 55, 55, 55, 55, 55, 55, 55, 278, 202, 203, 0, 0, 0, 0, 0, 55, 55, 55, 55, 55,
  55, 186, 55, 55, 55, 55, 55, 55, 55, 55, 262, 55, 55, 55, 55, 55, 55, 0, 156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 153, 0, 243, 202, 245, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16896, 0, 0, 0, 0, 16896, 0, 154, 0, 0, 12288, 0,
  0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 55, 55, 55, 55, 55, 185, 55, 55, 55, 55, 55, 55, 55, 194, 55, 55, 4259, 0, 0, 0, 0,
  55, 0, 0, 0, 0, 0, 219, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 57, 55, 55, 292, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 15872, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36864, 0, 0, 0, 0, 0, 55, 55, 55, 55, 184, 55, 55, 55, 55,
  55, 55, 55, 55, 55, 55, 263, 55, 55, 55, 55, 0, 154, 0, 0, 0, 0, 55, 55, 55, 45, 0, 0, 46, 3693, 3182, 0, 0, 0, 2161,
  55, 0, 0, 117, 0, 0, 0, 0, 0, 0, 151, 0, 151, 9216, 203, 154, 0, 0, 0, 0, 0, 202, 0, 203, 0, 55, 55, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 17920, 0, 17920, 17920, 0, 0, 0, 154, 0, 0, 0, 0, 160, 55, 55, 45, 4259, 0, 46, 3693, 3182, 0, 0, 0, 2161,
  55, 0, 116, 55, 0, 0, 0, 0, 0, 0, 9728, 202, 151, 154, 0, 154, 0, 0, 0, 0, 0, 202, 202, 203, 203, 55, 55, 4344, 0, 0,
  0, 0, 0, 0, 0, 0, 55, 55, 55, 55, 275, 55, 55, 55, 202, 203, 0, 0, 0, 0, 282, 0, 202, 0, 203, 0, 37943, 55, 4344, 0,
  0, 0, 0, 0, 0, 0, 0, 55, 55, 55, 183, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 38967, 55, 39991, 55, 0, 154, 0, 0,
  0, 0, 55, 161, 55, 45, 4259, 0, 46, 3693, 3182, 0, 0, 0, 2161, 55, 115, 0, 55, 118, 0, 0, 0, 0, 0, 207, 55, 4259, 0,
  0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 55, 55, 55, 274, 55, 55, 55, 55, 202, 203, 0, 0, 0, 0, 0, 55, 55, 55, 55, 55, 55,
  277, 55, 202, 203, 0, 0, 0, 0, 0, 14848, 0, 0, 0, 0, 14899, 0, 0, 0, 0, 0, 0, 55, 55, 55, 134, 55, 55, 55, 55, 55, 55,
  23607, 55, 55, 55, 55, 55, 55, 55, 55, 0, 0, 0, 0, 55, 55, 55, 55, 55, 0, 91, 0, 91, 0, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0,
  0, 0, 55, 55, 182, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 33335, 55, 55, 55, 55, 55, 0
);

(:~
 : The DFA-state to expected-token-set mapping.
 :)
declare variable $p:EXPECTED as xs:integer+ :=
(
  219, 229, 236, 243, 239, 232, 222, 225, 247, 254, 250, 470, 258, 337, 372, 340, 340, 346, 308, 308, 308, 476, 345,
  268, 272, 307, 276, 280, 338, 339, 340, 340, 347, 308, 308, 308, 288, 292, 301, 305, 320, 345, 340, 340, 345, 308,
  308, 308, 308, 313, 324, 307, 516, 339, 340, 345, 308, 308, 308, 309, 316, 319, 340, 340, 347, 308, 334, 340, 308,
  349, 346, 348, 308, 340, 330, 283, 473, 353, 357, 361, 365, 369, 261, 264, 329, 282, 402, 420, 379, 383, 296, 388,
  392, 340, 340, 396, 400, 340, 340, 407, 283, 403, 413, 380, 384, 297, 452, 392, 340, 340, 327, 340, 340, 282, 418,
  414, 382, 295, 450, 390, 424, 340, 340, 328, 340, 284, 413, 381, 447, 451, 391, 439, 340, 340, 340, 431, 444, 456,
  438, 374, 433, 437, 375, 435, 463, 460, 340, 440, 340, 529, 528, 467, 480, 484, 486, 490, 494, 340, 340, 340, 520,
  340, 343, 340, 519, 340, 498, 340, 535, 340, 340, 510, 514, 340, 517, 340, 340, 344, 340, 519, 340, 498, 340, 340,
  340, 521, 512, 518, 340, 342, 340, 517, 340, 426, 502, 340, 340, 510, 517, 340, 341, 340, 518, 340, 427, 503, 340,
  507, 340, 342, 340, 409, 527, 340, 408, 526, 340, 525, 533, 4194306, 4194308, 4194560, 20971520, 4194304, 20971630,
  4194414, 272629774, -1404962816, 272629870, 272629760, 541065216, 4194304, 4194304, 1077936238, 4194414, 4194304,
  4194400, 274726912, 20971520, 20971520, 4194414, 1077936224, 4194400, 4194318, 1077936224, 4194304, 4194318,
  -331220992, 289407086, -60688384, 285212542, 274726766, -1839202450, -50331650, 822083454, 285212542, 285212542,
  285212542, 64, 32, 2097152, 0, 0, 273678336, 273678340, 25239552, 25239554, 273679359, 12, 12, 12, 1310720, 655360,
  1536, 1792, 8388608, 2, 128, 0, 4, 64, 32, 0, 0, 0, 33554432, 134217728, 0, 12288, 14336, 98304, 114688, 12, 12,
  262144, 1048576, 4194304, 268435456, 2097152, 33554432, 134217728, 262144, 131072, 524288, 131072, 1536, 1024, 16, 12,
  12, 12, 12, 8192, 12288, 8192, 98304, 65536, 1048576, 1048576, 524288, 12, 12, 128, 0, 12, 1048576, 524288, 1024,
  131072, 0, 0, 0, 16384, 0, 12, 1048576, 524288, 0, 8, 12, 0, 0, 0, 0, 2, 0, 0, 0, 12, 12, 12, 0, 0, 704643072, 0,
  -2146959360, 2097152, 1074038784, 0, 0, 1074042880, 706740224, 273678357, 706740224, 273678340, 273678356, 25239552,
  995, 25371648, 1003, 193143808, 1003, 0, 12, 0, 0, 0, 524288, 32768, -2147483648, 2048, 32768, 262144, 1073741824, 0,
  4096, 1048576, 4194304, 671088640, 0, 1048576, 4194304, 268435456, 8192, 65536, 25165824, 64, 512, 0, 1024, 196608,
  58720256, 134217728, 0, 0, 2097152, 0, 64, 0, 0, 0, 1024, 4096, 67108864, 536870912, 524288, -2147483648, 32768,
  134217728, 2097152, 0, 67108864, 671088640, 524288, 65536, 25165824, 0, 0, 1, 1024, 2048, 134217728, 524288,
  -2147483648, 32768, 262144, 268435456, 268435456, 65536, 16777216, 0, 0, 0, 65536, 262144, 1073741824, 0, 1048576,
  4194304, 268435456, 33554432, 134217728, 536870912, 0, 1048576, 4194304, 268435456, 134217728, 1048576, 268435456,
  16777216, 0, 16777216, 16777216, 0, 0, 32768, 2, 0, 256, 2, 4, 256, 0, 0, 2097152, 67108864, 134217728, 14336, 114688,
  65552, 327744, 65552, 327936, 328000, 31749, 131072, 31749, 131072, 33312, 33312, 295456, 360992, 360992, 361000,
  65029, 65029, 492512, 1, 4, 15360, 16384, 2048, 4096, 8192, 16384, 0, 0, 512, 8, 0, 512, 32768, 8, 0, 0, 128, 0, 0, 0,
  16, 0, 0, 0, 512, 0, 4096, 16384, 0, 0, 0, 65552, 0, 0, 4096, 0, 0, 131072, 0
);

(:~
 : The token-string table.
 :)
declare variable $p:TOKEN as xs:string+ :=
(
  "%ERROR",
  "IRI_REF",
  "PNAME_NS",
  "PNAME_LN",
  "BLANK_NODE_LABEL",
  "VAR1",
  "VAR2",
  "LANGTAG",
  "INTEGER",
  "DECIMAL",
  "DOUBLE",
  "INTEGER_POSITIVE",
  "DECIMAL_POSITIVE",
  "DOUBLE_POSITIVE",
  "INTEGER_NEGATIVE",
  "DECIMAL_NEGATIVE",
  "DOUBLE_NEGATIVE",
  "STRING_LITERAL1",
  "STRING_LITERAL2",
  "STRING_LITERAL_LONG1",
  "STRING_LITERAL_LONG2",
  "'()'",
  "WS",
  "'[]'",
  "EOF",
  "'!'",
  "'!='",
  "'&amp;&amp;'",
  "'('",
  "')'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'.'",
  "'/'",
  "';'",
  "'<'",
  "'<='",
  "'='",
  "'>'",
  "'>='",
  "'ASC'",
  "'ASK'",
  "'BASE'",
  "'BOUND'",
  "'BY'",
  "'CONSTRUCT'",
  "'DATATYPE'",
  "'DESC'",
  "'DESCRIBE'",
  "'DISTINCT'",
  "'FILTER'",
  "'FROM'",
  "'GRAPH'",
  "'LANG'",
  "'LANGMATCHES'",
  "'LIMIT'",
  "'NAMED'",
  "'OFFSET'",
  "'OPTIONAL'",
  "'ORDER'",
  "'PREFIX'",
  "'REDUCED'",
  "'REGEX'",
  "'SELECT'",
  "'STR'",
  "'UNION'",
  "'WHERE'",
  "'['",
  "']'",
  "'^^'",
  "'a'",
  "'false'",
  "'isBLANK'",
  "'isIRI'",
  "'isLITERAL'",
  "'isURI'",
  "'sameTerm'",
  "'true'",
  "'{'",
  "'||'",
  "'}'"
);

(:~
 : Match next token in input string, starting at given index, using
 : the DFA entry state for the set of tokens that are expected in
 : the current context.
 :
 : @param $input the input string.
 : @param $begin the index where to start in input string.
 : @param $token-set the expected token set id.
 : @return a sequence of three: the token code of the result token,
 : with input string begin and end positions. If there is no valid
 : token, return the negative id of the DFA state that failed, along
 : with begin and end positions of the longest viable prefix.
 :)
declare function p:match($input as xs:string,
                         $begin as xs:integer,
                         $token-set as xs:integer) as xs:integer+
{
  let $result := $p:INITIAL[1 + $token-set]
  return p:transition($input,
                      $begin,
                      $begin,
                      $begin,
                      $result,
                      $result mod 512,
                      0)
};

(:~
 : The DFA state transition function. If we are in a valid DFA state, save
 : it's result annotation, consume one input codepoint, calculate the next
 : state, and use tail recursion to do the same again. Otherwise, return
 : any valid result or a negative DFA state id in case of an error.
 :
 : @param $input the input string.
 : @param $begin the begin index of the current token in the input string.
 : @param $current the index of the current position in the input string.
 : @param $end the end index of the result in the input string.
 : @param $result the result code.
 : @param $current-state the current DFA state.
 : @param $previous-state the  previous DFA state.
 : @return a sequence of three: the token code of the result token,
 : with input string begin and end positions. If there is no valid
 : token, return the negative id of the DFA state that failed, along
 : with begin and end positions of the longest viable prefix.
 :)
declare function p:transition($input as xs:string,
                              $begin as xs:integer,
                              $current as xs:integer,
                              $end as xs:integer,
                              $result as xs:integer,
                              $current-state as xs:integer,
                              $previous-state as xs:integer)
{
  if ($current-state eq 0) then
    let $result := $result idiv 512
    let $end := if ($end gt string-length($input)) then string-length($input) + 1 else $end
    return
      if ($result ne 0) then
      (
        $result - 1,
        $begin,
        $end
      )
      else
      (
        - $previous-state,
        $begin,
        $current - 1
      )
  else
    let $c0 := (string-to-codepoints(substring($input, $current, 1)), 0)[1]
    let $c1 :=
      if ($c0 < 128) then
        $p:MAP0[1 + $c0]
      else if ($c0 < 55296) then
        let $c1 := $c0 idiv 16
        let $c2 := $c1 idiv 32
        return $p:MAP1[1 + $c0 mod 16 + $p:MAP1[1 + $c1 mod 32 + $p:MAP1[1 + $c2]]]
      else
        p:map2($c0, 1, 6)
    let $current := $current + 1
    let $i0 := 512 * $c1 + $current-state - 1
    let $i1 := $i0 idiv 16
    let $next-state := $p:TRANSITION[$i0 mod 16 + $p:TRANSITION[$i1 + 1] + 1]
    return
      if ($next-state > 511) then
        p:transition($input, $begin, $current, $current, $next-state, $next-state mod 512, $current-state)
      else
        p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
};

(:~
 : Recursively translate one 32-bit chunk of an expected token bitset
 : to the corresponding sequence of token strings.
 :
 : @param $result the result of previous recursion levels.
 : @param $chunk the 32-bit chunk of the expected token bitset.
 : @param $base-token-code the token code of bit 0 in the current chunk.
 : @return the set of token strings.
 :)
declare function p:token($result as xs:string*,
                         $chunk as xs:integer,
                         $base-token-code as xs:integer)
{
  if ($chunk = 0) then
    $result
  else
    p:token
    (
      ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
      if ($chunk < 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
      $base-token-code + 1
    )
};

(:~
 : Calculate expected token set for a given DFA state as a sequence
 : of strings.
 :
 : @param $state the DFA state.
 : @return the set of token strings.
 :)
declare function p:expected-token-set($state as xs:integer) as xs:string*
{
  if ($state > 0) then
    for $t in 0 to 2
    let $i0 := $t * 292 + $state - 1
    let $i1 := $i0 idiv 4
    return p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 + 1] + 1], $t * 32 + 1)
  else
    ()
};

(:~
 : Classify codepoint by doing a tail recursive binary search for a
 : matching codepoint range entry in MAP2, the codepoint to charclass
 : map for codepoints above the surrogate block.
 :
 : @param $c the codepoint.
 : @param $lo the binary search lower bound map index.
 : @param $hi the binary search upper bound map index.
 : @return the character class.
 :)
declare function p:map2($c as xs:integer, $lo as xs:integer, $hi as xs:integer) as xs:integer
{
  if ($lo > $hi) then
    0
  else
    let $m := ($hi + $lo) idiv 2
    return
      if ($p:MAP2[$m] > $c) then
        p:map2($c, $lo, $m - 1)
      else if ($p:MAP2[6 + $m] < $c) then
        p:map2($c, $m + 1, $hi)
      else
        $p:MAP2[12 + $m]
};

(:~
 : Parse the 1st loop of production AskQuery (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AskQuery-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(14, $input, $state)         (: WS | 'FROM' | 'WHERE' | '{' :)
    return
      if ($state[$p:l1] != 53) then                         (: 'FROM' :)
        $state
      else
        let $state := p:whitespace($input, $state)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-DatasetClause($input, $state)
        return p:parse-AskQuery-1($input, $state)
};

(:~
 : Parse AskQuery.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AskQuery($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(43, $input, $state)               (: 'ASK' :)
  let $state := p:parse-AskQuery-1($input, $state)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-WhereClause($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "AskQuery", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production DescribeQuery (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DescribeQuery-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:whitespace($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-VarOrIRIref($input, $state)
    let $state := p:lookahead1W(26, $input, $state)         (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | WS | EOF |
                                                               'FROM' | 'LIMIT' | 'OFFSET' | 'ORDER' | 'WHERE' | '{' :)
    return
      if ($state[$p:l1] != 1                                (: IRI_REF :)
      and $state[$p:l1] != 2                                (: PNAME_NS :)
      and $state[$p:l1] != 3                                (: PNAME_LN :)
      and $state[$p:l1] != 5                                (: VAR1 :)
      and $state[$p:l1] != 6) then                          (: VAR2 :)
        $state
      else
        p:parse-DescribeQuery-1($input, $state)
};

(:~
 : Parse the 2nd loop of production DescribeQuery (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DescribeQuery-2($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(24, $input, $state)         (: WS | EOF | 'FROM' | 'LIMIT' | 'OFFSET' | 'ORDER' |
                                                               'WHERE' | '{' :)
    return
      if ($state[$p:l1] != 53) then                         (: 'FROM' :)
        $state
      else
        let $state := p:whitespace($input, $state)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-DatasetClause($input, $state)
        return p:parse-DescribeQuery-2($input, $state)
};

(:~
 : Parse DescribeQuery.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DescribeQuery($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(50, $input, $state)               (: 'DESCRIBE' :)
  let $state := p:lookahead1W(21, $input, $state)           (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | WS | '*' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 30) then                       (: '*' :)
      let $state := p:consume(30, $input, $state)           (: '*' :)
      return $state
    else
      let $state := p:parse-DescribeQuery-1($input, $state)
      return $state
  let $state := p:parse-DescribeQuery-2($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 68                             (: 'WHERE' :)
          or $state[$p:l1] = 80) then                       (: '{' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-WhereClause($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(16, $input, $state)           (: WS | EOF | 'LIMIT' | 'OFFSET' | 'ORDER' :)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-SolutionModifier($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "DescribeQuery", $count, $begin, $end)
};

(:~
 : Parse ConstructTriples.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ConstructTriples($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-TriplesSameSubject($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 34) then                       (: '.' :)
      let $state := p:consume(34, $input, $state)           (: '.' :)
      let $state := p:lookahead1W(37, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 |
                                                               VAR2 | INTEGER | DECIMAL | DOUBLE | INTEGER_POSITIVE |
                                                               DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                                               DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                                               STRING_LITERAL2 | STRING_LITERAL_LONG1 |
                                                               STRING_LITERAL_LONG2 | NIL | WS | ANON | '(' | '[' |
                                                               'false' | 'true' | '}' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] != 82) then                  (: '}' :)
          let $state := p:whitespace($input, $state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-ConstructTriples($input, $state)
          return $state
        else
          $state
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ConstructTriples", $count, $begin, $end)
};

(:~
 : Parse ConstructTemplate.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ConstructTemplate($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(80, $input, $state)               (: '{' :)
  let $state := p:lookahead1W(37, $input, $state)           (: IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 |
                                                               VAR2 | INTEGER | DECIMAL | DOUBLE | INTEGER_POSITIVE |
                                                               DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                                               DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                                               STRING_LITERAL2 | STRING_LITERAL_LONG1 |
                                                               STRING_LITERAL_LONG2 | NIL | WS | ANON | '(' | '[' |
                                                               'false' | 'true' | '}' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 82) then                      (: '}' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-ConstructTriples($input, $state)
      return $state
    else
      $state
  let $state := p:consume(82, $input, $state)               (: '}' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "ConstructTemplate", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production ConstructQuery (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ConstructQuery-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(14, $input, $state)         (: WS | 'FROM' | 'WHERE' | '{' :)
    return
      if ($state[$p:l1] != 53) then                         (: 'FROM' :)
        $state
      else
        let $state := p:whitespace($input, $state)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-DatasetClause($input, $state)
        return p:parse-ConstructQuery-1($input, $state)
};

(:~
 : Parse ConstructQuery.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ConstructQuery($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(47, $input, $state)               (: 'CONSTRUCT' :)
  let $state := p:lookahead1W(7, $input, $state)            (: WS | '{' :)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-ConstructTemplate($input, $state)
  let $state := p:parse-ConstructQuery-1($input, $state)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-WhereClause($input, $state)
  let $state := p:lookahead1W(16, $input, $state)           (: WS | EOF | 'LIMIT' | 'OFFSET' | 'ORDER' :)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-SolutionModifier($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "ConstructQuery", $count, $begin, $end)
};

(:~
 : Parse OffsetClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-OffsetClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(59, $input, $state)               (: 'OFFSET' :)
  let $state := p:lookahead1W(2, $input, $state)            (: INTEGER | WS :)
  let $state := p:consume(8, $input, $state)                (: INTEGER :)
  let $end := $state[$p:e0]
  return p:reduce($state, "OffsetClause", $count, $begin, $end)
};

(:~
 : Parse LimitClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-LimitClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(57, $input, $state)               (: 'LIMIT' :)
  let $state := p:lookahead1W(2, $input, $state)            (: INTEGER | WS :)
  let $state := p:consume(8, $input, $state)                (: INTEGER :)
  let $end := $state[$p:e0]
  return p:reduce($state, "LimitClause", $count, $begin, $end)
};

(:~
 : Parse LimitOffsetClauses.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-LimitOffsetClauses($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 57) then                       (: 'LIMIT' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-LimitClause($input, $state)
      let $state := p:lookahead1W(11, $input, $state)       (: WS | EOF | 'OFFSET' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 59) then                   (: 'OFFSET' :)
          let $state := p:whitespace($input, $state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-OffsetClause($input, $state)
          return $state
        else
          $state
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-OffsetClause($input, $state)
      let $state := p:lookahead1W(10, $input, $state)       (: WS | EOF | 'LIMIT' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 57) then                   (: 'LIMIT' :)
          let $state := p:whitespace($input, $state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-LimitClause($input, $state)
          return $state
        else
          $state
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "LimitOffsetClauses", $count, $begin, $end)
};

(:~
 : Parse OrderCondition.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-OrderCondition($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 42                             (: 'ASC' :)
          or $state[$p:l1] = 49) then                       (: 'DESC' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 42) then                   (: 'ASC' :)
          let $state := p:consume(42, $input, $state)       (: 'ASC' :)
          return $state
        else
          let $state := p:consume(49, $input, $state)       (: 'DESC' :)
          return $state
      let $state := p:lookahead1W(4, $input, $state)        (: WS | '(' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-BrackettedExpression($input, $state)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 5                          (: VAR1 :)
              or $state[$p:l1] = 6) then                    (: VAR2 :)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-Var($input, $state)
          return $state
        else
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-Constraint($input, $state)
          return $state
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "OrderCondition", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production OrderClause (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-OrderClause-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(31, $input, $state)         (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | WS | '(' |
                                                               'ASC' | 'BOUND' | 'DATATYPE' | 'DESC' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'isBLANK' | 'isIRI' |
                                                               'isLITERAL' | 'isURI' | 'sameTerm' :)
    let $state := p:whitespace($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-OrderCondition($input, $state)
    let $state := p:lookahead1W(33, $input, $state)         (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | WS | EOF |
                                                               '(' | 'ASC' | 'BOUND' | 'DATATYPE' | 'DESC' | 'LANG' |
                                                               'LANGMATCHES' | 'LIMIT' | 'OFFSET' | 'REGEX' | 'STR' |
                                                               'isBLANK' | 'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' :)
    return
      if ($state[$p:l1] = 24                                (: EOF :)
       or $state[$p:l1] = 57                                (: 'LIMIT' :)
       or $state[$p:l1] = 59) then                          (: 'OFFSET' :)
        $state
      else
        p:parse-OrderClause-1($input, $state)
};

(:~
 : Parse OrderClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-OrderClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(61, $input, $state)               (: 'ORDER' :)
  let $state := p:lookahead1W(6, $input, $state)            (: WS | 'BY' :)
  let $state := p:consume(46, $input, $state)               (: 'BY' :)
  let $state := p:parse-OrderClause-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "OrderClause", $count, $begin, $end)
};

(:~
 : Parse SolutionModifier.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SolutionModifier($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 61) then                       (: 'ORDER' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-OrderClause($input, $state)
      return $state
    else
      $state
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 24) then                      (: EOF :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-LimitOffsetClauses($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "SolutionModifier", $count, $begin, $end)
};

(:~
 : Parse FunctionCall.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FunctionCall($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-IRIref($input, $state)
  let $state := p:lookahead1W(9, $input, $state)            (: NIL | WS | '(' :)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-ArgList($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "FunctionCall", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production ArgList (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ArgList-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 32) then                           (: ',' :)
      $state
    else
      let $state := p:consume(32, $input, $state)           (: ',' :)
      let $state := p:lookahead1W(42, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Expression($input, $state)
      return p:parse-ArgList-1($input, $state)
};

(:~
 : Parse ArgList.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ArgList($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 21) then                       (: NIL :)
      let $state := p:consume(21, $input, $state)           (: NIL :)
      return $state
    else
      let $state := p:consume(28, $input, $state)           (: '(' :)
      let $state := p:lookahead1W(42, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Expression($input, $state)
      let $state := p:parse-ArgList-1($input, $state)
      let $state := p:consume(29, $input, $state)           (: ')' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ArgList", $count, $begin, $end)
};

(:~
 : Parse IRIrefOrFunction.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-IRIrefOrFunction($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-IRIref($input, $state)
  let $state := p:lookahead1W(34, $input, $state)           (: INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                                               INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE |
                                                               NIL | WS | '!=' | '&&' | '(' | ')' | '*' | '+' | ',' |
                                                               '-' | '/' | '<' | '<=' | '=' | '>' | '>=' | '||' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 21                             (: NIL :)
          or $state[$p:l1] = 28) then                       (: '(' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-ArgList($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "IRIrefOrFunction", $count, $begin, $end)
};

(:~
 : Parse RegexExpression.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-RegexExpression($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(64, $input, $state)               (: 'REGEX' :)
  let $state := p:lookahead1W(4, $input, $state)            (: WS | '(' :)
  let $state := p:consume(28, $input, $state)               (: '(' :)
  let $state := p:lookahead1W(42, $input, $state)           (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-Expression($input, $state)
  let $state := p:consume(32, $input, $state)               (: ',' :)
  let $state := p:lookahead1W(42, $input, $state)           (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-Expression($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 32) then                       (: ',' :)
      let $state := p:consume(32, $input, $state)           (: ',' :)
      let $state := p:lookahead1W(42, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Expression($input, $state)
      return $state
    else
      $state
  let $state := p:consume(29, $input, $state)               (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "RegexExpression", $count, $begin, $end)
};

(:~
 : Parse BuiltInCall.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-BuiltInCall($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 66) then                       (: 'STR' :)
      let $state := p:consume(66, $input, $state)           (: 'STR' :)
      let $state := p:lookahead1W(4, $input, $state)        (: WS | '(' :)
      let $state := p:consume(28, $input, $state)           (: '(' :)
      let $state := p:lookahead1W(42, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Expression($input, $state)
      let $state := p:consume(29, $input, $state)           (: ')' :)
      return $state
    else if ($state[$p:l1] = 55) then                       (: 'LANG' :)
      let $state := p:consume(55, $input, $state)           (: 'LANG' :)
      let $state := p:lookahead1W(4, $input, $state)        (: WS | '(' :)
      let $state := p:consume(28, $input, $state)           (: '(' :)
      let $state := p:lookahead1W(42, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Expression($input, $state)
      let $state := p:consume(29, $input, $state)           (: ')' :)
      return $state
    else if ($state[$p:l1] = 56) then                       (: 'LANGMATCHES' :)
      let $state := p:consume(56, $input, $state)           (: 'LANGMATCHES' :)
      let $state := p:lookahead1W(4, $input, $state)        (: WS | '(' :)
      let $state := p:consume(28, $input, $state)           (: '(' :)
      let $state := p:lookahead1W(42, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Expression($input, $state)
      let $state := p:consume(32, $input, $state)           (: ',' :)
      let $state := p:lookahead1W(42, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Expression($input, $state)
      let $state := p:consume(29, $input, $state)           (: ')' :)
      return $state
    else if ($state[$p:l1] = 48) then                       (: 'DATATYPE' :)
      let $state := p:consume(48, $input, $state)           (: 'DATATYPE' :)
      let $state := p:lookahead1W(4, $input, $state)        (: WS | '(' :)
      let $state := p:consume(28, $input, $state)           (: '(' :)
      let $state := p:lookahead1W(42, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Expression($input, $state)
      let $state := p:consume(29, $input, $state)           (: ')' :)
      return $state
    else if ($state[$p:l1] = 45) then                       (: 'BOUND' :)
      let $state := p:consume(45, $input, $state)           (: 'BOUND' :)
      let $state := p:lookahead1W(4, $input, $state)        (: WS | '(' :)
      let $state := p:consume(28, $input, $state)           (: '(' :)
      let $state := p:lookahead1W(8, $input, $state)        (: VAR1 | VAR2 | WS :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Var($input, $state)
      let $state := p:lookahead1W(5, $input, $state)        (: WS | ')' :)
      let $state := p:consume(29, $input, $state)           (: ')' :)
      return $state
    else if ($state[$p:l1] = 78) then                       (: 'sameTerm' :)
      let $state := p:consume(78, $input, $state)           (: 'sameTerm' :)
      let $state := p:lookahead1W(4, $input, $state)        (: WS | '(' :)
      let $state := p:consume(28, $input, $state)           (: '(' :)
      let $state := p:lookahead1W(42, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Expression($input, $state)
      let $state := p:consume(32, $input, $state)           (: ',' :)
      let $state := p:lookahead1W(42, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Expression($input, $state)
      let $state := p:consume(29, $input, $state)           (: ')' :)
      return $state
    else if ($state[$p:l1] = 75) then                       (: 'isIRI' :)
      let $state := p:consume(75, $input, $state)           (: 'isIRI' :)
      let $state := p:lookahead1W(4, $input, $state)        (: WS | '(' :)
      let $state := p:consume(28, $input, $state)           (: '(' :)
      let $state := p:lookahead1W(42, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Expression($input, $state)
      let $state := p:consume(29, $input, $state)           (: ')' :)
      return $state
    else if ($state[$p:l1] = 77) then                       (: 'isURI' :)
      let $state := p:consume(77, $input, $state)           (: 'isURI' :)
      let $state := p:lookahead1W(4, $input, $state)        (: WS | '(' :)
      let $state := p:consume(28, $input, $state)           (: '(' :)
      let $state := p:lookahead1W(42, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Expression($input, $state)
      let $state := p:consume(29, $input, $state)           (: ')' :)
      return $state
    else if ($state[$p:l1] = 74) then                       (: 'isBLANK' :)
      let $state := p:consume(74, $input, $state)           (: 'isBLANK' :)
      let $state := p:lookahead1W(4, $input, $state)        (: WS | '(' :)
      let $state := p:consume(28, $input, $state)           (: '(' :)
      let $state := p:lookahead1W(42, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Expression($input, $state)
      let $state := p:consume(29, $input, $state)           (: ')' :)
      return $state
    else if ($state[$p:l1] = 76) then                       (: 'isLITERAL' :)
      let $state := p:consume(76, $input, $state)           (: 'isLITERAL' :)
      let $state := p:lookahead1W(4, $input, $state)        (: WS | '(' :)
      let $state := p:consume(28, $input, $state)           (: '(' :)
      let $state := p:lookahead1W(42, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Expression($input, $state)
      let $state := p:consume(29, $input, $state)           (: ')' :)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-RegexExpression($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "BuiltInCall", $count, $begin, $end)
};

(:~
 : Parse PrimaryExpression.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-PrimaryExpression($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 28) then                       (: '(' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-BrackettedExpression($input, $state)
      return $state
    else if ($state[$p:l1] = 1                              (: IRI_REF :)
          or $state[$p:l1] = 2                              (: PNAME_NS :)
          or $state[$p:l1] = 3) then                        (: PNAME_LN :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-IRIrefOrFunction($input, $state)
      return $state
    else if ($state[$p:l1] = 17                             (: STRING_LITERAL1 :)
          or $state[$p:l1] = 18                             (: STRING_LITERAL2 :)
          or $state[$p:l1] = 19                             (: STRING_LITERAL_LONG1 :)
          or $state[$p:l1] = 20) then                       (: STRING_LITERAL_LONG2 :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-RDFLiteral($input, $state)
      return $state
    else if ($state[$p:l1] = 8                              (: INTEGER :)
          or $state[$p:l1] = 9                              (: DECIMAL :)
          or $state[$p:l1] = 10                             (: DOUBLE :)
          or $state[$p:l1] = 11                             (: INTEGER_POSITIVE :)
          or $state[$p:l1] = 12                             (: DECIMAL_POSITIVE :)
          or $state[$p:l1] = 13                             (: DOUBLE_POSITIVE :)
          or $state[$p:l1] = 14                             (: INTEGER_NEGATIVE :)
          or $state[$p:l1] = 15                             (: DECIMAL_NEGATIVE :)
          or $state[$p:l1] = 16) then                       (: DOUBLE_NEGATIVE :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-NumericLiteral($input, $state)
      return $state
    else if ($state[$p:l1] = 73                             (: 'false' :)
          or $state[$p:l1] = 79) then                       (: 'true' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-BooleanLiteral($input, $state)
      return $state
    else if ($state[$p:l1] = 5                              (: VAR1 :)
          or $state[$p:l1] = 6) then                        (: VAR2 :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Var($input, $state)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-BuiltInCall($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "PrimaryExpression", $count, $begin, $end)
};

(:~
 : Parse UnaryExpression.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-UnaryExpression($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 25) then                       (: '!' :)
      let $state := p:consume(25, $input, $state)           (: '!' :)
      let $state := p:lookahead1W(41, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '(' |
                                                               'BOUND' | 'DATATYPE' | 'LANG' | 'LANGMATCHES' | 'REGEX' |
                                                               'STR' | 'false' | 'isBLANK' | 'isIRI' | 'isLITERAL' |
                                                               'isURI' | 'sameTerm' | 'true' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-PrimaryExpression($input, $state)
      return $state
    else if ($state[$p:l1] = 31) then                       (: '+' :)
      let $state := p:consume(31, $input, $state)           (: '+' :)
      let $state := p:lookahead1W(41, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '(' |
                                                               'BOUND' | 'DATATYPE' | 'LANG' | 'LANGMATCHES' | 'REGEX' |
                                                               'STR' | 'false' | 'isBLANK' | 'isIRI' | 'isLITERAL' |
                                                               'isURI' | 'sameTerm' | 'true' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-PrimaryExpression($input, $state)
      return $state
    else if ($state[$p:l1] = 33) then                       (: '-' :)
      let $state := p:consume(33, $input, $state)           (: '-' :)
      let $state := p:lookahead1W(41, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '(' |
                                                               'BOUND' | 'DATATYPE' | 'LANG' | 'LANGMATCHES' | 'REGEX' |
                                                               'STR' | 'false' | 'isBLANK' | 'isIRI' | 'isLITERAL' |
                                                               'isURI' | 'sameTerm' | 'true' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-PrimaryExpression($input, $state)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-PrimaryExpression($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "UnaryExpression", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production MultiplicativeExpression (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-MultiplicativeExpression-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(32, $input, $state)         (: INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                                               INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE |
                                                               WS | '!=' | '&&' | ')' | '*' | '+' | ',' | '-' | '/' |
                                                               '<' | '<=' | '=' | '>' | '>=' | '||' :)
    return
      if ($state[$p:l1] != 30                               (: '*' :)
      and $state[$p:l1] != 35) then                         (: '/' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 30) then                 (: '*' :)
            let $state := p:consume(30, $input, $state)     (: '*' :)
            let $state := p:lookahead1W(42, $input, $state) (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
            let $state := p:whitespace($input, $state)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-UnaryExpression($input, $state)
            return $state
          else
            let $state := p:consume(35, $input, $state)     (: '/' :)
            let $state := p:lookahead1W(42, $input, $state) (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
            let $state := p:whitespace($input, $state)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-UnaryExpression($input, $state)
            return $state
        return p:parse-MultiplicativeExpression-1($input, $state)
};

(:~
 : Parse MultiplicativeExpression.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-MultiplicativeExpression($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-UnaryExpression($input, $state)
  let $state := p:parse-MultiplicativeExpression-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "MultiplicativeExpression", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production AdditiveExpression (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AdditiveExpression-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(30, $input, $state)         (: INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                                               INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE |
                                                               WS | '!=' | '&&' | ')' | '+' | ',' | '-' | '<' | '<=' |
                                                               '=' | '>' | '>=' | '||' :)
    return
      if ($state[$p:l1] != 11                               (: INTEGER_POSITIVE :)
      and $state[$p:l1] != 12                               (: DECIMAL_POSITIVE :)
      and $state[$p:l1] != 13                               (: DOUBLE_POSITIVE :)
      and $state[$p:l1] != 14                               (: INTEGER_NEGATIVE :)
      and $state[$p:l1] != 15                               (: DECIMAL_NEGATIVE :)
      and $state[$p:l1] != 16                               (: DOUBLE_NEGATIVE :)
      and $state[$p:l1] != 31                               (: '+' :)
      and $state[$p:l1] != 33) then                         (: '-' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 31) then                 (: '+' :)
            let $state := p:consume(31, $input, $state)     (: '+' :)
            let $state := p:lookahead1W(42, $input, $state) (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
            let $state := p:whitespace($input, $state)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-MultiplicativeExpression($input, $state)
            return $state
          else if ($state[$p:l1] = 33) then                 (: '-' :)
            let $state := p:consume(33, $input, $state)     (: '-' :)
            let $state := p:lookahead1W(42, $input, $state) (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
            let $state := p:whitespace($input, $state)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-MultiplicativeExpression($input, $state)
            return $state
          else if ($state[$p:l1] = 11                       (: INTEGER_POSITIVE :)
                or $state[$p:l1] = 12                       (: DECIMAL_POSITIVE :)
                or $state[$p:l1] = 13) then                 (: DOUBLE_POSITIVE :)
            let $state := p:whitespace($input, $state)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-NumericLiteralPositive($input, $state)
            return $state
          else
            let $state := p:whitespace($input, $state)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-NumericLiteralNegative($input, $state)
            return $state
        return p:parse-AdditiveExpression-1($input, $state)
};

(:~
 : Parse AdditiveExpression.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AdditiveExpression($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-MultiplicativeExpression($input, $state)
  let $state := p:parse-AdditiveExpression-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "AdditiveExpression", $count, $begin, $end)
};

(:~
 : Parse NumericExpression.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-NumericExpression($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-AdditiveExpression($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "NumericExpression", $count, $begin, $end)
};

(:~
 : Parse RelationalExpression.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-RelationalExpression($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-NumericExpression($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 27                            (: '&&' :)
         and $state[$p:l1] != 29                            (: ')' :)
         and $state[$p:l1] != 32                            (: ',' :)
         and $state[$p:l1] != 81) then                      (: '||' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 39) then                   (: '=' :)
          let $state := p:consume(39, $input, $state)       (: '=' :)
          let $state := p:lookahead1W(42, $input, $state)   (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
          let $state := p:whitespace($input, $state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-NumericExpression($input, $state)
          return $state
        else if ($state[$p:l1] = 26) then                   (: '!=' :)
          let $state := p:consume(26, $input, $state)       (: '!=' :)
          let $state := p:lookahead1W(42, $input, $state)   (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
          let $state := p:whitespace($input, $state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-NumericExpression($input, $state)
          return $state
        else if ($state[$p:l1] = 37) then                   (: '<' :)
          let $state := p:consume(37, $input, $state)       (: '<' :)
          let $state := p:lookahead1W(42, $input, $state)   (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
          let $state := p:whitespace($input, $state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-NumericExpression($input, $state)
          return $state
        else if ($state[$p:l1] = 40) then                   (: '>' :)
          let $state := p:consume(40, $input, $state)       (: '>' :)
          let $state := p:lookahead1W(42, $input, $state)   (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
          let $state := p:whitespace($input, $state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-NumericExpression($input, $state)
          return $state
        else if ($state[$p:l1] = 38) then                   (: '<=' :)
          let $state := p:consume(38, $input, $state)       (: '<=' :)
          let $state := p:lookahead1W(42, $input, $state)   (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
          let $state := p:whitespace($input, $state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-NumericExpression($input, $state)
          return $state
        else
          let $state := p:consume(41, $input, $state)       (: '>=' :)
          let $state := p:lookahead1W(42, $input, $state)   (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
          let $state := p:whitespace($input, $state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-NumericExpression($input, $state)
          return $state
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "RelationalExpression", $count, $begin, $end)
};

(:~
 : Parse ValueLogical.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ValueLogical($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-RelationalExpression($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "ValueLogical", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production ConditionalAndExpression (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ConditionalAndExpression-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 27) then                           (: '&&' :)
      $state
    else
      let $state := p:consume(27, $input, $state)           (: '&&' :)
      let $state := p:lookahead1W(42, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-ValueLogical($input, $state)
      return p:parse-ConditionalAndExpression-1($input, $state)
};

(:~
 : Parse ConditionalAndExpression.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ConditionalAndExpression($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-ValueLogical($input, $state)
  let $state := p:parse-ConditionalAndExpression-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "ConditionalAndExpression", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production ConditionalOrExpression (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ConditionalOrExpression-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 81) then                           (: '||' :)
      $state
    else
      let $state := p:consume(81, $input, $state)           (: '||' :)
      let $state := p:lookahead1W(42, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-ConditionalAndExpression($input, $state)
      return p:parse-ConditionalOrExpression-1($input, $state)
};

(:~
 : Parse ConditionalOrExpression.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ConditionalOrExpression($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-ConditionalAndExpression($input, $state)
  let $state := p:parse-ConditionalOrExpression-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "ConditionalOrExpression", $count, $begin, $end)
};

(:~
 : Parse Expression.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Expression($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-ConditionalOrExpression($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "Expression", $count, $begin, $end)
};

(:~
 : Parse BrackettedExpression.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-BrackettedExpression($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(28, $input, $state)               (: '(' :)
  let $state := p:lookahead1W(42, $input, $state)           (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER |
                                                               DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                                               DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                                               DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' |
                                                               '(' | '+' | '-' | 'BOUND' | 'DATATYPE' | 'LANG' |
                                                               'LANGMATCHES' | 'REGEX' | 'STR' | 'false' | 'isBLANK' |
                                                               'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' | 'true' :)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-Expression($input, $state)
  let $state := p:consume(29, $input, $state)               (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "BrackettedExpression", $count, $begin, $end)
};

(:~
 : Parse Constraint.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Constraint($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 28) then                       (: '(' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-BrackettedExpression($input, $state)
      return $state
    else if ($state[$p:l1] = 1                              (: IRI_REF :)
          or $state[$p:l1] = 2                              (: PNAME_NS :)
          or $state[$p:l1] = 3) then                        (: PNAME_LN :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-FunctionCall($input, $state)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-BuiltInCall($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "Constraint", $count, $begin, $end)
};

(:~
 : Parse Filter.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Filter($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(52, $input, $state)               (: 'FILTER' :)
  let $state := p:lookahead1W(29, $input, $state)           (: IRI_REF | PNAME_NS | PNAME_LN | WS | '(' | 'BOUND' |
                                                               'DATATYPE' | 'LANG' | 'LANGMATCHES' | 'REGEX' | 'STR' |
                                                               'isBLANK' | 'isIRI' | 'isLITERAL' | 'isURI' | 'sameTerm' :)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-Constraint($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "Filter", $count, $begin, $end)
};

(:~
 : Parse GraphGraphPattern.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-GraphGraphPattern($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(54, $input, $state)               (: 'GRAPH' :)
  let $state := p:lookahead1W(17, $input, $state)           (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | WS :)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-VarOrIRIref($input, $state)
  let $state := p:lookahead1W(7, $input, $state)            (: WS | '{' :)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-GroupGraphPattern($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "GraphGraphPattern", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production GroupOrUnionGraphPattern (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-GroupOrUnionGraphPattern-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(40, $input, $state)         (: IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 |
                                                               VAR2 | INTEGER | DECIMAL | DOUBLE | INTEGER_POSITIVE |
                                                               DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                                               DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                                               STRING_LITERAL2 | STRING_LITERAL_LONG1 |
                                                               STRING_LITERAL_LONG2 | NIL | WS | ANON | '(' | '.' |
                                                               'FILTER' | 'GRAPH' | 'OPTIONAL' | 'UNION' | '[' |
                                                               'false' | 'true' | '{' | '}' :)
    return
      if ($state[$p:l1] != 67) then                         (: 'UNION' :)
        $state
      else
        let $state := p:consume(67, $input, $state)         (: 'UNION' :)
        let $state := p:lookahead1W(7, $input, $state)      (: WS | '{' :)
        let $state := p:whitespace($input, $state)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-GroupGraphPattern($input, $state)
        return p:parse-GroupOrUnionGraphPattern-1($input, $state)
};

(:~
 : Parse GroupOrUnionGraphPattern.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-GroupOrUnionGraphPattern($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-GroupGraphPattern($input, $state)
  let $state := p:parse-GroupOrUnionGraphPattern-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "GroupOrUnionGraphPattern", $count, $begin, $end)
};

(:~
 : Parse OptionalGraphPattern.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-OptionalGraphPattern($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(60, $input, $state)               (: 'OPTIONAL' :)
  let $state := p:lookahead1W(7, $input, $state)            (: WS | '{' :)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-GroupGraphPattern($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "OptionalGraphPattern", $count, $begin, $end)
};

(:~
 : Parse GraphPatternNotTriples.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-GraphPatternNotTriples($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 60) then                       (: 'OPTIONAL' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-OptionalGraphPattern($input, $state)
      return $state
    else if ($state[$p:l1] = 80) then                       (: '{' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-GroupOrUnionGraphPattern($input, $state)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-GraphGraphPattern($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "GraphPatternNotTriples", $count, $begin, $end)
};

(:~
 : Parse PropertyList.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-PropertyList($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 1                              (: IRI_REF :)
          or $state[$p:l1] = 2                              (: PNAME_NS :)
          or $state[$p:l1] = 3                              (: PNAME_LN :)
          or $state[$p:l1] = 5                              (: VAR1 :)
          or $state[$p:l1] = 6                              (: VAR2 :)
          or $state[$p:l1] = 72) then                       (: 'a' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-PropertyListNotEmpty($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "PropertyList", $count, $begin, $end)
};

(:~
 : Parse BlankNodePropertyList.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-BlankNodePropertyList($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(69, $input, $state)               (: '[' :)
  let $state := p:lookahead1W(22, $input, $state)           (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | WS | 'a' :)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-PropertyListNotEmpty($input, $state)
  let $state := p:consume(70, $input, $state)               (: ']' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "BlankNodePropertyList", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production Collection (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Collection-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(35, $input, $state)         (: IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 |
                                                               VAR2 | INTEGER | DECIMAL | DOUBLE | INTEGER_POSITIVE |
                                                               DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                                               DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                                               STRING_LITERAL2 | STRING_LITERAL_LONG1 |
                                                               STRING_LITERAL_LONG2 | NIL | WS | ANON | '(' | '[' |
                                                               'false' | 'true' :)
    let $state := p:whitespace($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-GraphNode($input, $state)
    let $state := p:lookahead1W(36, $input, $state)         (: IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 |
                                                               VAR2 | INTEGER | DECIMAL | DOUBLE | INTEGER_POSITIVE |
                                                               DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                                               DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                                               STRING_LITERAL2 | STRING_LITERAL_LONG1 |
                                                               STRING_LITERAL_LONG2 | NIL | WS | ANON | '(' | ')' |
                                                               '[' | 'false' | 'true' :)
    return
      if ($state[$p:l1] = 29) then                          (: ')' :)
        $state
      else
        p:parse-Collection-1($input, $state)
};

(:~
 : Parse Collection.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Collection($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(28, $input, $state)               (: '(' :)
  let $state := p:parse-Collection-1($input, $state)
  let $state := p:consume(29, $input, $state)               (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "Collection", $count, $begin, $end)
};

(:~
 : Parse TriplesNode.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-TriplesNode($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 28) then                       (: '(' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Collection($input, $state)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-BlankNodePropertyList($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "TriplesNode", $count, $begin, $end)
};

(:~
 : Parse GraphNode.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-GraphNode($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 28                             (: '(' :)
          or $state[$p:l1] = 69) then                       (: '[' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-TriplesNode($input, $state)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-VarOrTerm($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "GraphNode", $count, $begin, $end)
};

(:~
 : Parse Object.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Object($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-GraphNode($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "Object", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production ObjectList (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ObjectList-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(25, $input, $state)         (: WS | ',' | '.' | ';' | 'FILTER' | 'GRAPH' | 'OPTIONAL' |
                                                               ']' | '{' | '}' :)
    return
      if ($state[$p:l1] != 32) then                         (: ',' :)
        $state
      else
        let $state := p:consume(32, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(35, $input, $state)     (: IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 |
                                                               VAR2 | INTEGER | DECIMAL | DOUBLE | INTEGER_POSITIVE |
                                                               DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                                               DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                                               STRING_LITERAL2 | STRING_LITERAL_LONG1 |
                                                               STRING_LITERAL_LONG2 | NIL | WS | ANON | '(' | '[' |
                                                               'false' | 'true' :)
        let $state := p:whitespace($input, $state)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Object($input, $state)
        return p:parse-ObjectList-1($input, $state)
};

(:~
 : Parse ObjectList.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ObjectList($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-Object($input, $state)
  let $state := p:parse-ObjectList-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "ObjectList", $count, $begin, $end)
};

(:~
 : Parse VarOrIRIref.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-VarOrIRIref($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 5                              (: VAR1 :)
          or $state[$p:l1] = 6) then                        (: VAR2 :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Var($input, $state)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-IRIref($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "VarOrIRIref", $count, $begin, $end)
};

(:~
 : Parse Verb.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Verb($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 72) then                       (: 'a' :)
      let $state := p:consume(72, $input, $state)           (: 'a' :)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-VarOrIRIref($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "Verb", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production PropertyListNotEmpty (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-PropertyListNotEmpty-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 36) then                           (: ';' :)
      $state
    else
      let $state := p:consume(36, $input, $state)           (: ';' :)
      let $state := p:lookahead1W(28, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | WS | '.' |
                                                               ';' | 'FILTER' | 'GRAPH' | 'OPTIONAL' | ']' | 'a' | '{' |
                                                               '}' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 1                          (: IRI_REF :)
              or $state[$p:l1] = 2                          (: PNAME_NS :)
              or $state[$p:l1] = 3                          (: PNAME_LN :)
              or $state[$p:l1] = 5                          (: VAR1 :)
              or $state[$p:l1] = 6                          (: VAR2 :)
              or $state[$p:l1] = 72) then                   (: 'a' :)
          let $state := p:whitespace($input, $state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-Verb($input, $state)
          let $state := p:lookahead1W(35, $input, $state)   (: IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 |
                                                               VAR2 | INTEGER | DECIMAL | DOUBLE | INTEGER_POSITIVE |
                                                               DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                                               DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                                               STRING_LITERAL2 | STRING_LITERAL_LONG1 |
                                                               STRING_LITERAL_LONG2 | NIL | WS | ANON | '(' | '[' |
                                                               'false' | 'true' :)
          let $state := p:whitespace($input, $state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-ObjectList($input, $state)
          return $state
        else
          $state
      return p:parse-PropertyListNotEmpty-1($input, $state)
};

(:~
 : Parse PropertyListNotEmpty.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-PropertyListNotEmpty($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-Verb($input, $state)
  let $state := p:lookahead1W(35, $input, $state)           (: IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 |
                                                               VAR2 | INTEGER | DECIMAL | DOUBLE | INTEGER_POSITIVE |
                                                               DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                                               DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                                               STRING_LITERAL2 | STRING_LITERAL_LONG1 |
                                                               STRING_LITERAL_LONG2 | NIL | WS | ANON | '(' | '[' |
                                                               'false' | 'true' :)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-ObjectList($input, $state)
  let $state := p:parse-PropertyListNotEmpty-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "PropertyListNotEmpty", $count, $begin, $end)
};

(:~
 : Parse BlankNode.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-BlankNode($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 4) then                        (: BLANK_NODE_LABEL :)
      let $state := p:consume(4, $input, $state)            (: BLANK_NODE_LABEL :)
      return $state
    else
      let $state := p:consume(23, $input, $state)           (: ANON :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "BlankNode", $count, $begin, $end)
};

(:~
 : Parse BooleanLiteral.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-BooleanLiteral($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 79) then                       (: 'true' :)
      let $state := p:consume(79, $input, $state)           (: 'true' :)
      return $state
    else
      let $state := p:consume(73, $input, $state)           (: 'false' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "BooleanLiteral", $count, $begin, $end)
};

(:~
 : Parse NumericLiteralNegative.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-NumericLiteralNegative($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 14) then                       (: INTEGER_NEGATIVE :)
      let $state := p:consume(14, $input, $state)           (: INTEGER_NEGATIVE :)
      return $state
    else if ($state[$p:l1] = 15) then                       (: DECIMAL_NEGATIVE :)
      let $state := p:consume(15, $input, $state)           (: DECIMAL_NEGATIVE :)
      return $state
    else
      let $state := p:consume(16, $input, $state)           (: DOUBLE_NEGATIVE :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "NumericLiteralNegative", $count, $begin, $end)
};

(:~
 : Parse NumericLiteralPositive.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-NumericLiteralPositive($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 11) then                       (: INTEGER_POSITIVE :)
      let $state := p:consume(11, $input, $state)           (: INTEGER_POSITIVE :)
      return $state
    else if ($state[$p:l1] = 12) then                       (: DECIMAL_POSITIVE :)
      let $state := p:consume(12, $input, $state)           (: DECIMAL_POSITIVE :)
      return $state
    else
      let $state := p:consume(13, $input, $state)           (: DOUBLE_POSITIVE :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "NumericLiteralPositive", $count, $begin, $end)
};

(:~
 : Parse NumericLiteralUnsigned.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-NumericLiteralUnsigned($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 8) then                        (: INTEGER :)
      let $state := p:consume(8, $input, $state)            (: INTEGER :)
      return $state
    else if ($state[$p:l1] = 9) then                        (: DECIMAL :)
      let $state := p:consume(9, $input, $state)            (: DECIMAL :)
      return $state
    else
      let $state := p:consume(10, $input, $state)           (: DOUBLE :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "NumericLiteralUnsigned", $count, $begin, $end)
};

(:~
 : Parse NumericLiteral.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-NumericLiteral($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 8                              (: INTEGER :)
          or $state[$p:l1] = 9                              (: DECIMAL :)
          or $state[$p:l1] = 10) then                       (: DOUBLE :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-NumericLiteralUnsigned($input, $state)
      return $state
    else if ($state[$p:l1] = 11                             (: INTEGER_POSITIVE :)
          or $state[$p:l1] = 12                             (: DECIMAL_POSITIVE :)
          or $state[$p:l1] = 13) then                       (: DOUBLE_POSITIVE :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-NumericLiteralPositive($input, $state)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-NumericLiteralNegative($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "NumericLiteral", $count, $begin, $end)
};

(:~
 : Parse String.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-String($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 17) then                       (: STRING_LITERAL1 :)
      let $state := p:consume(17, $input, $state)           (: STRING_LITERAL1 :)
      return $state
    else if ($state[$p:l1] = 18) then                       (: STRING_LITERAL2 :)
      let $state := p:consume(18, $input, $state)           (: STRING_LITERAL2 :)
      return $state
    else if ($state[$p:l1] = 19) then                       (: STRING_LITERAL_LONG1 :)
      let $state := p:consume(19, $input, $state)           (: STRING_LITERAL_LONG1 :)
      return $state
    else
      let $state := p:consume(20, $input, $state)           (: STRING_LITERAL_LONG2 :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "String", $count, $begin, $end)
};

(:~
 : Parse RDFLiteral.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-RDFLiteral($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-String($input, $state)
  let $state := p:lookahead1W(43, $input, $state)           (: IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 |
                                                               VAR2 | LANGTAG | INTEGER | DECIMAL | DOUBLE |
                                                               INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                                               INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE |
                                                               STRING_LITERAL1 | STRING_LITERAL2 |
                                                               STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | NIL | WS |
                                                               ANON | '!=' | '&&' | '(' | ')' | '*' | '+' | ',' | '-' |
                                                               '.' | '/' | ';' | '<' | '<=' | '=' | '>' | '>=' |
                                                               'FILTER' | 'GRAPH' | 'OPTIONAL' | '[' | ']' | '^^' |
                                                               'a' | 'false' | 'true' | '{' | '||' | '}' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7                              (: LANGTAG :)
          or $state[$p:l1] = 71) then                       (: '^^' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 7) then                    (: LANGTAG :)
          let $state := p:consume(7, $input, $state)        (: LANGTAG :)
          return $state
        else
          let $state := p:consume(71, $input, $state)       (: '^^' :)
          let $state := p:lookahead1W(12, $input, $state)   (: IRI_REF | PNAME_NS | PNAME_LN | WS :)
          let $state := p:whitespace($input, $state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-IRIref($input, $state)
          return $state
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "RDFLiteral", $count, $begin, $end)
};

(:~
 : Parse GraphTerm.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-GraphTerm($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 1                              (: IRI_REF :)
          or $state[$p:l1] = 2                              (: PNAME_NS :)
          or $state[$p:l1] = 3) then                        (: PNAME_LN :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-IRIref($input, $state)
      return $state
    else if ($state[$p:l1] = 17                             (: STRING_LITERAL1 :)
          or $state[$p:l1] = 18                             (: STRING_LITERAL2 :)
          or $state[$p:l1] = 19                             (: STRING_LITERAL_LONG1 :)
          or $state[$p:l1] = 20) then                       (: STRING_LITERAL_LONG2 :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-RDFLiteral($input, $state)
      return $state
    else if ($state[$p:l1] = 73                             (: 'false' :)
          or $state[$p:l1] = 79) then                       (: 'true' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-BooleanLiteral($input, $state)
      return $state
    else if ($state[$p:l1] = 4                              (: BLANK_NODE_LABEL :)
          or $state[$p:l1] = 23) then                       (: ANON :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-BlankNode($input, $state)
      return $state
    else if ($state[$p:l1] = 21) then                       (: NIL :)
      let $state := p:consume(21, $input, $state)           (: NIL :)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-NumericLiteral($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "GraphTerm", $count, $begin, $end)
};

(:~
 : Parse VarOrTerm.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-VarOrTerm($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 5                              (: VAR1 :)
          or $state[$p:l1] = 6) then                        (: VAR2 :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Var($input, $state)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-GraphTerm($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "VarOrTerm", $count, $begin, $end)
};

(:~
 : Parse TriplesSameSubject.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-TriplesSameSubject($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 28                             (: '(' :)
          or $state[$p:l1] = 69) then                       (: '[' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-TriplesNode($input, $state)
      let $state := p:lookahead1W(27, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | WS | '.' |
                                                               'FILTER' | 'GRAPH' | 'OPTIONAL' | 'a' | '{' | '}' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-PropertyList($input, $state)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-VarOrTerm($input, $state)
      let $state := p:lookahead1W(22, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | WS | 'a' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-PropertyListNotEmpty($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "TriplesSameSubject", $count, $begin, $end)
};

(:~
 : Parse TriplesBlock.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-TriplesBlock($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-TriplesSameSubject($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 34) then                       (: '.' :)
      let $state := p:consume(34, $input, $state)           (: '.' :)
      let $state := p:lookahead1W(38, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 |
                                                               VAR2 | INTEGER | DECIMAL | DOUBLE | INTEGER_POSITIVE |
                                                               DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                                               DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                                               STRING_LITERAL2 | STRING_LITERAL_LONG1 |
                                                               STRING_LITERAL_LONG2 | NIL | WS | ANON | '(' | 'FILTER' |
                                                               'GRAPH' | 'OPTIONAL' | '[' | 'false' | 'true' | '{' | '}' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] != 52                        (: 'FILTER' :)
             and $state[$p:l1] != 54                        (: 'GRAPH' :)
             and $state[$p:l1] != 60                        (: 'OPTIONAL' :)
             and $state[$p:l1] != 80                        (: '{' :)
             and $state[$p:l1] != 82) then                  (: '}' :)
          let $state := p:whitespace($input, $state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-TriplesBlock($input, $state)
          return $state
        else
          $state
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "TriplesBlock", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production GroupGraphPattern (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-GroupGraphPattern-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] = 82) then                            (: '}' :)
      $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 52) then                   (: 'FILTER' :)
          let $state := p:whitespace($input, $state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-Filter($input, $state)
          return $state
        else
          let $state := p:whitespace($input, $state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-GraphPatternNotTriples($input, $state)
          return $state
      let $state := p:lookahead1W(39, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 |
                                                               VAR2 | INTEGER | DECIMAL | DOUBLE | INTEGER_POSITIVE |
                                                               DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                                               DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                                               STRING_LITERAL2 | STRING_LITERAL_LONG1 |
                                                               STRING_LITERAL_LONG2 | NIL | WS | ANON | '(' | '.' |
                                                               'FILTER' | 'GRAPH' | 'OPTIONAL' | '[' | 'false' |
                                                               'true' | '{' | '}' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 34) then                   (: '.' :)
          let $state := p:consume(34, $input, $state)       (: '.' :)
          return $state
        else
          $state
      let $state := p:lookahead1W(38, $input, $state)       (: IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 |
                                                               VAR2 | INTEGER | DECIMAL | DOUBLE | INTEGER_POSITIVE |
                                                               DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                                               DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                                               STRING_LITERAL2 | STRING_LITERAL_LONG1 |
                                                               STRING_LITERAL_LONG2 | NIL | WS | ANON | '(' | 'FILTER' |
                                                               'GRAPH' | 'OPTIONAL' | '[' | 'false' | 'true' | '{' | '}' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] != 52                        (: 'FILTER' :)
             and $state[$p:l1] != 54                        (: 'GRAPH' :)
             and $state[$p:l1] != 60                        (: 'OPTIONAL' :)
             and $state[$p:l1] != 80                        (: '{' :)
             and $state[$p:l1] != 82) then                  (: '}' :)
          let $state := p:whitespace($input, $state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-TriplesBlock($input, $state)
          return $state
        else
          $state
      return p:parse-GroupGraphPattern-1($input, $state)
};

(:~
 : Parse GroupGraphPattern.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-GroupGraphPattern($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(80, $input, $state)               (: '{' :)
  let $state := p:lookahead1W(38, $input, $state)           (: IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 |
                                                               VAR2 | INTEGER | DECIMAL | DOUBLE | INTEGER_POSITIVE |
                                                               DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                                               DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                                               STRING_LITERAL2 | STRING_LITERAL_LONG1 |
                                                               STRING_LITERAL_LONG2 | NIL | WS | ANON | '(' | 'FILTER' |
                                                               'GRAPH' | 'OPTIONAL' | '[' | 'false' | 'true' | '{' | '}' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 52                            (: 'FILTER' :)
         and $state[$p:l1] != 54                            (: 'GRAPH' :)
         and $state[$p:l1] != 60                            (: 'OPTIONAL' :)
         and $state[$p:l1] != 80                            (: '{' :)
         and $state[$p:l1] != 82) then                      (: '}' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-TriplesBlock($input, $state)
      return $state
    else
      $state
  let $state := p:parse-GroupGraphPattern-1($input, $state)
  let $state := p:consume(82, $input, $state)               (: '}' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "GroupGraphPattern", $count, $begin, $end)
};

(:~
 : Parse WhereClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-WhereClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 68) then                       (: 'WHERE' :)
      let $state := p:consume(68, $input, $state)           (: 'WHERE' :)
      return $state
    else
      $state
  let $state := p:lookahead1W(7, $input, $state)            (: WS | '{' :)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-GroupGraphPattern($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "WhereClause", $count, $begin, $end)
};

(:~
 : Parse NamedGraphClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-NamedGraphClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(58, $input, $state)               (: 'NAMED' :)
  let $state := p:lookahead1W(12, $input, $state)           (: IRI_REF | PNAME_NS | PNAME_LN | WS :)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-SourceSelector($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "NamedGraphClause", $count, $begin, $end)
};

(:~
 : Parse PrefixedName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-PrefixedName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 3) then                        (: PNAME_LN :)
      let $state := p:consume(3, $input, $state)            (: PNAME_LN :)
      return $state
    else
      let $state := p:consume(2, $input, $state)            (: PNAME_NS :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "PrefixedName", $count, $begin, $end)
};

(:~
 : Parse IRIref.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-IRIref($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 1) then                        (: IRI_REF :)
      let $state := p:consume(1, $input, $state)            (: IRI_REF :)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-PrefixedName($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "IRIref", $count, $begin, $end)
};

(:~
 : Parse SourceSelector.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SourceSelector($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-IRIref($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "SourceSelector", $count, $begin, $end)
};

(:~
 : Parse DefaultGraphClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DefaultGraphClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-SourceSelector($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "DefaultGraphClause", $count, $begin, $end)
};

(:~
 : Parse DatasetClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DatasetClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(53, $input, $state)               (: 'FROM' :)
  let $state := p:lookahead1W(15, $input, $state)           (: IRI_REF | PNAME_NS | PNAME_LN | WS | 'NAMED' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 58) then                       (: 'NAMED' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-NamedGraphClause($input, $state)
      return $state
    else
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-DefaultGraphClause($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "DatasetClause", $count, $begin, $end)
};

(:~
 : Parse Var.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Var($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 5) then                        (: VAR1 :)
      let $state := p:consume(5, $input, $state)            (: VAR1 :)
      return $state
    else
      let $state := p:consume(6, $input, $state)            (: VAR2 :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "Var", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production SelectQuery (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SelectQuery-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:whitespace($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Var($input, $state)
    let $state := p:lookahead1W(19, $input, $state)         (: VAR1 | VAR2 | WS | 'FROM' | 'WHERE' | '{' :)
    return
      if ($state[$p:l1] != 5                                (: VAR1 :)
      and $state[$p:l1] != 6) then                          (: VAR2 :)
        $state
      else
        p:parse-SelectQuery-1($input, $state)
};

(:~
 : Parse the 2nd loop of production SelectQuery (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SelectQuery-2($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(14, $input, $state)         (: WS | 'FROM' | 'WHERE' | '{' :)
    return
      if ($state[$p:l1] != 53) then                         (: 'FROM' :)
        $state
      else
        let $state := p:whitespace($input, $state)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-DatasetClause($input, $state)
        return p:parse-SelectQuery-2($input, $state)
};

(:~
 : Parse SelectQuery.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SelectQuery($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(65, $input, $state)               (: 'SELECT' :)
  let $state := p:lookahead1W(18, $input, $state)           (: VAR1 | VAR2 | WS | '*' | 'DISTINCT' | 'REDUCED' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 51                             (: 'DISTINCT' :)
          or $state[$p:l1] = 63) then                       (: 'REDUCED' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 51) then                   (: 'DISTINCT' :)
          let $state := p:consume(51, $input, $state)       (: 'DISTINCT' :)
          return $state
        else
          let $state := p:consume(63, $input, $state)       (: 'REDUCED' :)
          return $state
      return $state
    else
      $state
  let $state := p:lookahead1W(13, $input, $state)           (: VAR1 | VAR2 | WS | '*' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 30) then                       (: '*' :)
      let $state := p:consume(30, $input, $state)           (: '*' :)
      return $state
    else
      let $state := p:parse-SelectQuery-1($input, $state)
      return $state
  let $state := p:parse-SelectQuery-2($input, $state)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-WhereClause($input, $state)
  let $state := p:lookahead1W(16, $input, $state)           (: WS | EOF | 'LIMIT' | 'OFFSET' | 'ORDER' :)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-SolutionModifier($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "SelectQuery", $count, $begin, $end)
};

(:~
 : Parse PrefixDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-PrefixDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(62, $input, $state)               (: 'PREFIX' :)
  let $state := p:lookahead1W(1, $input, $state)            (: PNAME_NS | WS :)
  let $state := p:consume(2, $input, $state)                (: PNAME_NS :)
  let $state := p:lookahead1W(0, $input, $state)            (: IRI_REF | WS :)
  let $state := p:consume(1, $input, $state)                (: IRI_REF :)
  let $end := $state[$p:e0]
  return p:reduce($state, "PrefixDecl", $count, $begin, $end)
};

(:~
 : Parse BaseDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-BaseDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(44, $input, $state)               (: 'BASE' :)
  let $state := p:lookahead1W(0, $input, $state)            (: IRI_REF | WS :)
  let $state := p:consume(1, $input, $state)                (: IRI_REF :)
  let $end := $state[$p:e0]
  return p:reduce($state, "BaseDecl", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production Prologue (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Prologue-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(20, $input, $state)         (: WS | 'ASK' | 'CONSTRUCT' | 'DESCRIBE' | 'PREFIX' |
                                                               'SELECT' :)
    return
      if ($state[$p:l1] != 62) then                         (: 'PREFIX' :)
        $state
      else
        let $state := p:whitespace($input, $state)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-PrefixDecl($input, $state)
        return p:parse-Prologue-1($input, $state)
};

(:~
 : Parse Prologue.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Prologue($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 44) then                       (: 'BASE' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-BaseDecl($input, $state)
      return $state
    else
      $state
  let $state := p:parse-Prologue-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "Prologue", $count, $begin, $end)
};

(:~
 : Parse Query.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Query($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:lookahead1W(23, $input, $state)           (: WS | 'ASK' | 'BASE' | 'CONSTRUCT' | 'DESCRIBE' |
                                                               'PREFIX' | 'SELECT' :)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-Prologue($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 65) then                       (: 'SELECT' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-SelectQuery($input, $state)
      return $state
    else if ($state[$p:l1] = 47) then                       (: 'CONSTRUCT' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-ConstructQuery($input, $state)
      return $state
    else if ($state[$p:l1] = 50) then                       (: 'DESCRIBE' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-DescribeQuery($input, $state)
      return $state
    else
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-AskQuery($input, $state)
      return $state
  let $state := p:lookahead1W(3, $input, $state)            (: WS | EOF :)
  let $state := p:consume(24, $input, $state)               (: EOF :)
  let $end := $state[$p:e0]
  return p:reduce($state, "Query", $count, $begin, $end)
};

(:~
 : Create a textual error message from a parsing error.
 :
 : @param $input the input string.
 : @param $error the parsing error descriptor.
 : @return the error message.
 :)
declare function p:error-message($input as xs:string, $error as element(error)) as xs:string
{
  let $begin := xs:integer($error/@b)
  let $context := string-to-codepoints(substring($input, 1, $begin - 1))
  let $linefeeds := index-of($context, 10)
  let $line := count($linefeeds) + 1
  let $column := ($begin - $linefeeds[last()], $begin)[1]
  return
    string-join
    (
      (
        if ($error/@o) then
          ("syntax error, found ", $p:TOKEN[$error/@o + 1])
        else
          "lexical analysis failed",
        "&#10;",
        "while expecting ",
        if ($error/@x) then
          $p:TOKEN[$error/@x + 1]
        else
          let $expected := p:expected-token-set($error/@s)
          return
          (
            "["[exists($expected[2])],
            string-join($expected, ", "),
            "]"[exists($expected[2])]
          ),
        "&#10;",
        if ($error/@o or $error/@e = $begin) then
          ()
        else
          ("after successfully scanning ", string($error/@e - $begin), " characters beginning "),
        "at line ", string($line), ", column ", string($column), ":&#10;",
        "...", substring($input, $begin, 64), "..."
      ),
      ""
    )
};

(:~
 : Consume one token, i.e. compare lookahead token 1 with expected
 : token and in case of a match, shift lookahead tokens down such that
 : l1 becomes the current token, and higher lookahead tokens move down.
 : When lookahead token 1 does not match the expected token, raise an
 : error by saving the expected token code in the error field of the
 : lexer state.
 :
 : @param $code the expected token.
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:consume($code as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else if ($state[$p:l1] eq $code) then
  (
    subsequence($state, $p:l1, 3),
    0, 0, 0,
    subsequence($state, 7),
    let $begin := $state[$p:e0]
    let $end := $state[$p:b1]
    where $begin ne $end
    return
      text
      {
        substring($input, $begin, $end - $begin)
      },
    let $token := $p:TOKEN[1 + $state[$p:l1]]
    let $name := if (starts-with($token, "'")) then "TOKEN" else $token
    let $begin := $state[$p:b1]
    let $end := $state[$p:e1]
    return
      element {$name}
      {
        substring($input, $begin, $end - $begin)
      }
  )
  else
  (
    subsequence($state, 1, $p:error - 1),
    element error
    {
      attribute b {$state[$p:b1]},
      attribute e {$state[$p:e1]},
      if ($state[$p:l1] lt 0) then
        attribute s {- $state[$p:l1]}
      else
        (attribute o {$state[$p:l1]}, attribute x {$code})
    },
    subsequence($state, $p:error + 1)
  )
};

(:~
 : Consume whitespace.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:whitespace($input as xs:string,
                              $state as item()+) as item()+
{
  if ($state[$p:e0] = $state[$p:b1]) then
    $state
  else
    let $begin := $state[$p:e0]
    let $end := $state[$p:b1]
    return
    (
      0,
      $state[$p:b0],
      $end,
      subsequence($state, $p:e0 + 1),
      text
      {
        substring($input, $begin, $end - $begin)
      }
    )
};

(:~
 : Use p:match to fetch the next token, but skip any leading
 : whitespace.
 :
 : @param $input the input string.
 : @param $begin the index where to start.
 : @param $token-set the valid token set id.
 : @return a sequence of three values: the token code of the result
 : token, with input string positions of token begin and end.
 :)
declare function p:matchW($input as xs:string,
                          $begin as xs:integer,
                          $token-set as xs:integer)
{
  let $match := p:match($input, $begin, $token-set)
  return
    if ($match[1] = 22) then                                (: WS :)
      p:matchW($input, $match[3], $token-set)
    else
      $match
};

(:~
 : Lookahead one token on level 1 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:lookahead1W($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:l1] ne 0) then
    $state
  else
    let $match :=
        p:matchW($input, $state[$p:e0], $set)
    return
    (
      $match[1],
      subsequence($state, $p:b0, 2),
      $match,
      subsequence($state, 7)
    )
};

(:~
 : Reduce the result stack, creating a nonterminal element. Pop
 : $count elements off the stack, wrap them in a new element
 : named $name, and push the new element.
 :
 : @param $state lexer state, error indicator, and result stack.
 : @param $name the name of the result node.
 : @param $count the number of child nodes.
 : @param $begin the input index where the nonterminal begins.
 : @param $end the input index where the nonterminal ends.
 : @return the updated state.
 :)
declare function p:reduce($state as item()+, $name as xs:string, $count as xs:integer, $begin as xs:integer, $end as xs:integer) as item()+
{
  subsequence($state, 1, $count),
  element {$name}
  {
    subsequence($state, $count + 1)
  }
};

(:~
 : Parse start symbol Query from given string.
 :
 : @param $s the string to be parsed.
 : @return the result as generated by parser actions.
 :)
declare function p:parse-Query($s as xs:string) as item()*
{
  let $state := (0, 1, 1, 0, 0, 0, false())
  let $state := p:parse-Query($s, $state)
  let $error := $state[$p:error]
  return
    if ($error) then
      element ERROR {$error/@*, p:error-message($s, $error)}
    else
      subsequence($state, $p:result)
};

                                                                      (: line 132 "sparql.ebnf" :)
                                                                      declare variable $input external;
                                                                      if (matches($input, "^\{.*\}$")) then
                                                                        p:parse-Query(substring($input, 2, string-length($input) - 2))
                                                                      else
                                                                        p:parse-Query(collection(concat(".?select=", $input, ";unparsed=yes")))
                                                                      (: line 4247 "sparql.xquery" :)
(: End :)
