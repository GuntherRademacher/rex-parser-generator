// This file was generated on Thu Dec 26, 2024 06:57 (UTC+01) by REx v6.1-SNAPSHOT which is Copyright (c) 1979-2024 by Gunther Rademacher <grd@gmx.net>
// REx command line: -q strongLL4.ebnf -java -ll 4 -a java

                                                            // line 3 "strongLL4.ebnf"
                                                            class strongLL4
                                                            {
                                                              public strongLL4(String string)
                                                              {
                                                                initialize(string);
                                                              }

                                                              public static void main(String args[])
                                                              {
                                                                new strongLL4("XYQY").parse_S();
                                                                new strongLL4("XYYQYY").parse_S();
                                                                new strongLL4("XYYYQYYY").parse_S();
                                                                new strongLL4("XYYYYQYYYY").parse_S();
                                                                new strongLL4("XYYZ").parse_S();
                                                                new strongLL4("XXYYZ").parse_S();
                                                                new strongLL4("XXXYYZ").parse_S();
                                                                try
                                                                {
                                                                  new strongLL4("XXXYQYY").parse_S();
                                                                  System.out.println("fail");
                                                                }
                                                                catch (strongLL4.ParseException e)
                                                                {
                                                                  System.out.println("pass");
                                                                }
                                                              }
                                                            // line 32 "strongLL4.java"

  public static class ParseException extends RuntimeException
  {
    private static final long serialVersionUID = 1L;
    private int begin, end, offending, expected, state;

    public ParseException(int b, int e, int s, int o, int x)
    {
      begin = b;
      end = e;
      state = s;
      offending = o;
      expected = x;
    }

    @Override
    public String getMessage()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    }

    public int getBegin() {return begin;}
    public int getEnd() {return end;}
    public int getState() {return state;}
    public int getOffending() {return offending;}
    public int getExpected() {return expected;}
    public boolean isAmbiguousInput() {return false;}
  }

  public void initialize(CharSequence source)
  {
    input = source;
    size = source.length();
    reset(0, 0, 0);
  }

  public CharSequence getInput()
  {
    return input;
  }

  public int getTokenOffset()
  {
    return b0;
  }

  public int getTokenEnd()
  {
    return e0;
  }

  public final void reset(int l, int b, int e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0; b2 = 0; e2 = 0;
    l3 = 0; b3 = 0; e3 = 0;
    l4 = 0; b4 = 0; e4 = 0;
    end = e;
  }

  public void reset()
  {
    reset(0, 0, 0);
  }

  public static String getOffendingToken(ParseException e)
  {
    return e.getOffending() < 0 ? null : TOKEN[e.getOffending()];
  }

  public static String[] getExpectedTokenSet(ParseException e)
  {
    String[] expected;
    if (e.getExpected() >= 0)
    {
      expected = new String[]{TOKEN[e.getExpected()]};
    }
    else
    {
      expected = getTokenSet(- e.getState());
    }
    return expected;
  }

  public String getErrorMessage(ParseException e)
  {
    String message = e.getMessage();
    String[] tokenSet = getExpectedTokenSet(e);
    String found = getOffendingToken(e);
    int size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : java.util.Arrays.toString(tokenSet))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    String prefix = input.subSequence(0, e.getBegin()).toString();
    int line = prefix.replaceAll("[^\n]", "").length() + 1;
    int column = prefix.length() - prefix.lastIndexOf('\n');
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.subSequence(e.getBegin(), Math.min(input.length(), e.getBegin() + 64))
         + "...";
  }

  public void parse_S()
  {
    lookahead1(1);                  // 'X'
    switch (l1)
    {
    case 3:                         // 'X'
      lookahead2(6);                // 'Q' | 'X' | 'Y'
      switch (lk)
      {
      case 67:                      // 'X' 'Y'
        lookahead3(4);              // 'Q' | 'Y'
        switch (lk)
        {
        case 1091:                  // 'X' 'Y' 'Y'
          lookahead4(7);            // 'Q' | 'Y' | 'Z'
          break;
        }
        break;
      }
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 51:                        // 'X' 'X'
    case 21571:                     // 'X' 'Y' 'Y' 'Z'
      parse_XS();
      lookahead1(2);                // 'Y'
      consume(4);                   // 'Y'
      lookahead1(2);                // 'Y'
      consume(4);                   // 'Y'
      lookahead1(3);                // 'Z'
      consume(5);                   // 'Z'
      lookahead1(0);                // EOF
      consume(1);                   // EOF
      break;
    default:
      consume(3);                   // 'X'
      parse_c();
    }
  }

  private void parse_XS()
  {
    lookahead1(1);                  // 'X'
    switch (l1)
    {
    case 3:                         // 'X'
      lookahead2(5);                // 'X' | 'Y'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 67:                        // 'X' 'Y'
      consume(3);                   // 'X'
      break;
    default:
      consume(3);                   // 'X'
      parse_XS();
    }
  }

  private void parse_c()
  {
    lookahead1(4);                  // 'Q' | 'Y'
    switch (l1)
    {
    case 4:                         // 'Y'
      consume(4);                   // 'Y'
      parse_c();
      lookahead1(2);                // 'Y'
      consume(4);                   // 'Y'
      break;
    default:
      consume(2);                   // 'Q'
    }
  }

  private void consume(int t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = l3; if (l2 != 0) {
      b2 = b3; e2 = e3; l3 = l4; if (l3 != 0) {
      b3 = b4; e3 = e4; l4 = 0; }}}
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  private void lookahead1(int tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = match(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  private void lookahead2(int tokenSetId)
  {
    if (l2 == 0)
    {
      l2 = match(tokenSetId);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 4) | l1;
  }

  private void lookahead3(int tokenSetId)
  {
    if (l3 == 0)
    {
      l3 = match(tokenSetId);
      b3 = begin;
      e3 = end;
    }
    lk |= l3 << 8;
  }

  private void lookahead4(int tokenSetId)
  {
    if (l4 == 0)
    {
      l4 = match(tokenSetId);
      b4 = begin;
      e4 = end;
    }
    lk |= l4 << 12;
  }

  private int error(int b, int e, int s, int l, int t)
  {
    throw new ParseException(b, e, s, l, t);
  }

  private int lk, b0, e0;
  private int l1, b1, e1;
  private int l2, b2, e2;
  private int l3, b3, e3;
  private int l4, b4, e4;
  private CharSequence input = null;
  private int size = 0;
  private int begin = 0;
  private int end = 0;

  private int match(int tokenSetId)
  {
    begin = end;
    int current = end;
    int result = INITIAL[tokenSetId];
    int state = 0;

    for (int code = result & 15; code != 0; )
    {
      int charclass;
      int c0 = current < size ? input.charAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        int c1 = c0 >> 5;
        charclass = MAP1[(c0 & 31) + MAP1[(c1 & 31) + MAP1[c1 >> 5]]];
      }
      else
      {
        charclass = 0;
      }

      state = code;
      int i0 = (charclass << 3) + code - 1;
      code = TRANSITION[(i0 & 3) + TRANSITION[i0 >> 2]];

      if (code > 15)
      {
        result = code;
        code &= 15;
        end = current;
      }
    }

    result >>= 4;
    if (result == 0)
    {
      end = current - 1;
      int c1 = end < size ? input.charAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000)
      {
        --end;
      }
      return error(begin, end, state, -1, -1);
    }

    if (end > size) end = size;
    return (result & 7) - 1;
  }

  private static String[] getTokenSet(int tokenSetId)
  {
    java.util.ArrayList<String> expected = new java.util.ArrayList<>();
    int s = tokenSetId < 0 ? - tokenSetId : INITIAL[tokenSetId] & 15;
    for (int i = 0; i < 6; i += 32)
    {
      int j = i;
      int i0 = (i >> 5) * 8 + s - 1;
      int f = EXPECTED[i0];
      for ( ; f != 0; f >>>= 1, ++j)
      {
        if ((f & 1) != 0)
        {
          expected.add(TOKEN[j]);
        }
      }
    }
    return expected.toArray(new String[]{});
  }

  private static final int[] MAP0 =
  {
    /*   0 */ 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /*  35 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /*  70 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 105 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  };

  private static final int[] MAP1 =
  {
    /*   0 */ 54, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
    /*  26 */ 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
    /*  52 */ 57, 57, 89, 90, 122, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
    /*  78 */ 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 110 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    /* 145 */ 0, 2, 3, 4, 0, 0, 0, 0, 0
  };

  private static final int[] INITIAL =
  {
    /* 0 */ 1, 2, 3, 4, 5, 6, 7, 8
  };

  private static final int[] TRANSITION =
  {
    /*  0 */ 30, 30, 30, 12, 19, 16, 21, 25, 31, 31, 29, 30, 48, 0, 48, 48, 0, 64, 64, 0, 64, 0, 0, 80, 0, 80, 80, 80,
    /* 28 */ 80, 32, 0, 0, 0, 0, 96
  };

  private static final int[] EXPECTED =
  {
    /* 0 */ 2, 8, 16, 32, 20, 24, 28, 52
  };

  private static final String[] TOKEN =
  {
    "%ERROR",
    "EOF",
    "'Q'",
    "'X'",
    "'Y'",
    "'Z'"
  };
}

// End
