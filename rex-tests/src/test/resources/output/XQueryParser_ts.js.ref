// This file was generated on Thu Dec 26, 2024 07:00 (UTC+01) by REx v6.1-SNAPSHOT which is Copyright (c) 1979-2024 by Gunther Rademacher <grd@gmx.net>
// REx command line: -q XQueryParser.ebnf -ll 2 -backtrack -tree -javascript -a xquery.rex -t -smaller -name XQueryParser_ts

                                                            // line 2 "XQueryParser.ebnf"
                                                            /* ***** BEGIN LICENSE BLOCK *****
                                                             * Distributed under the BSD license:
                                                             *
                                                             * Copyright (c) 2010, Ajax.org B.V.
                                                             * All rights reserved.
                                                             *
                                                             * Redistribution and use in source and binary forms, with or without
                                                             * modification, are permitted provided that the following conditions are met:
                                                             *     * Redistributions of source code must retain the above copyright
                                                             *       notice, this list of conditions and the following disclaimer.
                                                             *     * Redistributions in binary form must reproduce the above copyright
                                                             *       notice, this list of conditions and the following disclaimer in the
                                                             *       documentation and/or other materials provided with the distribution.
                                                             *     * Neither the name of Ajax.org B.V. nor the
                                                             *       names of its contributors may be used to endorse or promote products
                                                             *       derived from this software without specific prior written permission.
                                                             *
                                                             * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
                                                             * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                             * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                                                             * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
                                                             * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                                                             * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
                                                             * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
                                                             * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                                                             * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                                                             * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                                             *
                                                             * ***** END LICENSE BLOCK ***** */

                                                            define(function(require, exports, module)
                                                            {
                                                              var XQueryParser = exports.XQueryParser = function XQueryParser(string, parsingEventHandler)
                                                              {
                                                                init(string, parsingEventHandler);
                                                            // line 41 "XQueryParser_ts.js"
  var thisParser = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var begin = b;
    var end = e;
    var state = s;
    var offending = o;
    var expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};
    this.isAmbiguousInput = function() {return false;};

    this.getMessage = function()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    };
  };

  function init(source, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = source;
    size = source.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  this.getTokenOffset = function()
  {
    return b0;
  };

  this.getTokenEnd = function()
  {
    return e0;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0; b2 = 0; e2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.reset = function(l, b, e)
  {
    reset(l, b, e);
  };

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? XQueryParser_ts.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = XQueryParser_ts.getTokenSet(- e.getState());
    }
    else
    {
      expected = [XQueryParser_ts.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var message = e.getMessage();
    var found = this.getOffendingToken(e);
    var tokenSet = this.getExpectedTokenSet(e);
    var size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(272);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Module();
    consume(90);                    // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    lk = predict(0);
    if (lk == 1)
    {
      whitespace();
      parse_VersionDecl();
    }
    lookahead1W(272);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    lk = predict(1);
    switch (lk)
    {
    case 1:
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    consume(282);                   // 'xquery'
    lookahead1W(116);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 193:                       // 'encoding'
      consume(193);                 // 'encoding'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(144);                 // StringLiteral
      break;
    default:
      consume(278);                 // 'version'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(144);                 // StringLiteral
      lookahead1W(109);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 193)                // 'encoding'
      {
        consume(193);               // 'encoding'
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        consume(144);               // StringLiteral
      }
    }
    lookahead1W(28);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(138);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    consume(230);                   // 'module'
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consume(231);                   // 'namespace'
    lookahead1W(250);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(29);                // S^WS | '(:' | '='
    consume(107);                   // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(5);                     // URILiteral
    lookahead1W(28);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(272);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      lk = predict(2);
      if (lk != 1)
      {
        break;
      }
      lk = predict(3);
      if (lk == 5)
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 2:
        whitespace();
        parse_NamespaceDecl();
        break;
      case 3:
        whitespace();
        parse_Import();
        break;
      case 4:
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(28);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(272);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      lk = predict(4);
      if (lk != 1)
      {
        break;
      }
      lk = predict(5);
      switch (lk)
      {
      case 1:
        whitespace();
        parse_ContextItemDecl();
        break;
      case 2:
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(28);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    consume(101);                   // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    lk = predict(6);
    if (lk == 9)
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 1:
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 3:
      parse_BaseURIDecl();
      break;
    case 4:
      parse_ConstructionDecl();
      break;
    case 5:
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 7:
      parse_RevalidationDecl();
      break;
    case 8:
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(33);                // S^WS | '(:' | 'boundary-space'
    consume(163);                   // 'boundary-space'
    lookahead1W(133);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 72:                        // 'preserve'
      consume(72);                  // 'preserve'
      break;
    default:
      consume(78);                  // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(181);                   // 'default'
    lookahead1W(38);                // S^WS | '(:' | 'collation'
    consume(170);                   // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(5);                     // URILiteral
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function try_DefaultCollationDecl()
  {
    consumeT(180);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(181);                  // 'default'
    lookahead1W(38);                // S^WS | '(:' | 'collation'
    consumeT(170);                  // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consumeT(5);                    // URILiteral
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(32);                // S^WS | '(:' | 'base-uri'
    consume(161);                   // 'base-uri'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(5);                     // URILiteral
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'construction'
    consume(173);                   // 'construction'
    lookahead1W(133);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 78:                        // 'strip'
      consume(78);                  // 'strip'
      break;
    default:
      consume(72);                  // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(68);                // S^WS | '(:' | 'ordering'
    consume(243);                   // 'ordering'
    lookahead1W(131);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 242:                       // 'ordered'
      consume(242);                 // 'ordered'
      break;
    default:
      consume(273);                 // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(181);                   // 'default'
    lookahead1W(67);                // S^WS | '(:' | 'order'
    consume(241);                   // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(191);                   // 'empty'
    lookahead1W(121);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 47:                        // 'greatest'
      consume(47);                  // 'greatest'
      break;
    default:
      consume(54);                  // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function try_EmptyOrderDecl()
  {
    consumeT(180);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(181);                  // 'default'
    lookahead1W(67);                // S^WS | '(:' | 'order'
    consumeT(241);                  // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(191);                  // 'empty'
    lookahead1W(121);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 47:                        // 'greatest'
      consumeT(47);                 // 'greatest'
      break;
    default:
      consumeT(54);                 // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'copy-namespaces'
    consume(177);                   // 'copy-namespaces'
    lookahead1W(128);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(25);                // S^WS | '(:' | ','
    consume(97);                    // ','
    lookahead1W(123);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 72:                        // 'preserve'
      consume(72);                  // 'preserve'
      break;
    default:
      consume(61);                  // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 50:                        // 'inherit'
      consume(50);                  // 'inherit'
      break;
    default:
      consume(60);                  // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(114);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 179:                       // 'decimal-format'
      consume(179);                 // 'decimal-format'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      consume(181);                 // 'default'
      lookahead1W(45);              // S^WS | '(:' | 'decimal-format'
      consume(179);                 // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(180);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'grouping-separator' | 'infinity' | 'minus-sign' | 'pattern-separator' |
                                    // 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 101)                // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(29);              // S^WS | '(:' | '='
      consume(107);                 // '='
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(144);                 // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 40:                        // 'decimal-separator'
      consume(40);                  // 'decimal-separator'
      break;
    case 48:                        // 'grouping-separator'
      consume(48);                  // 'grouping-separator'
      break;
    case 49:                        // 'infinity'
      consume(49);                  // 'infinity'
      break;
    case 57:                        // 'minus-sign'
      consume(57);                  // 'minus-sign'
      break;
    case 34:                        // 'NaN'
      consume(34);                  // 'NaN'
      break;
    case 69:                        // 'percent'
      consume(69);                  // 'percent'
      break;
    case 68:                        // 'per-mille'
      consume(68);                  // 'per-mille'
      break;
    case 87:                        // 'zero-digit'
      consume(87);                  // 'zero-digit'
      break;
    case 41:                        // 'digit'
      consume(41);                  // 'digit'
      break;
    default:
      consume(67);                  // 'pattern-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    lk = predict(7);
    switch (lk)
    {
    case 1:
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    consume(211);                   // 'import'
    lookahead1W(73);                // S^WS | '(:' | 'schema'
    consume(254);                   // 'schema'
    lookahead1W(137);               // URILiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 5)                    // URILiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(5);                     // URILiteral
    lookahead1W(108);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 159)                  // 'at'
    {
      consume(159);                 // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(5);                   // URILiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ',' | ';'
        if (l1 != 97)               // ','
        {
          break;
        }
        consume(97);                // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        consume(5);                 // URILiteral
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 231:                       // 'namespace'
      consume(231);                 // 'namespace'
      lookahead1W(250);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(29);              // S^WS | '(:' | '='
      consume(107);                 // '='
      break;
    default:
      consume(181);                 // 'default'
      lookahead1W(47);              // S^WS | '(:' | 'element'
      consume(189);                 // 'element'
      lookahead1W(61);              // S^WS | '(:' | 'namespace'
      consume(231);                 // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    consume(211);                   // 'import'
    lookahead1W(60);                // S^WS | '(:' | 'module'
    consume(230);                   // 'module'
    lookahead1W(90);                // URILiteral | S^WS | '(:' | 'namespace'
    if (l1 == 231)                  // 'namespace'
    {
      consume(231);                 // 'namespace'
      lookahead1W(250);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(29);              // S^WS | '(:' | '='
      consume(107);                 // '='
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(5);                     // URILiteral
    lookahead1W(108);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 159)                  // 'at'
    {
      consume(159);                 // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(5);                   // URILiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ',' | ';'
        if (l1 != 97)               // ','
        {
          break;
        }
        consume(97);                // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        consume(5);                 // URILiteral
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consume(231);                   // 'namespace'
    lookahead1W(250);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(29);                // S^WS | '(:' | '='
    consume(107);                   // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(5);                     // URILiteral
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(181);                   // 'default'
    lookahead1W(115);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 189:                       // 'element'
      consume(189);                 // 'element'
      break;
    default:
      consume(205);                 // 'function'
    }
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consume(231);                   // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(5);                     // URILiteral
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function try_DefaultNamespaceDecl()
  {
    consumeT(180);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(181);                  // 'default'
    lookahead1W(115);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 189:                       // 'element'
      consumeT(189);                // 'element'
      break;
    default:
      consumeT(205);                // 'function'
    }
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consumeT(231);                  // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consumeT(5);                    // URILiteral
  }

  function parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(52);                // S^WS | '(:' | 'ft-option'
    consume(204);                   // 'ft-option'
    lookahead1W(81);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    consume(180);                   // 'declare'
    for (;;)
    {
      lookahead1W(170);             // S^WS | '%' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
      if (l1 != 147                 // '%'
       && l1 != 274)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 274:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 277:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    case 205:                       // 'function'
      whitespace();
      parse_FunctionDecl();
      break;
    case 38:                        // 'collection'
      whitespace();
      parse_CollectionDecl();
      break;
    case 213:                       // 'index'
      whitespace();
      parse_IndexDecl();
      break;
    default:
      whitespace();
      parse_ICDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    consume(274);                   // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    consume(147);                   // '%'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(171);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 92)                   // '('
    {
      consume(92);                  // '('
      lookahead1W(154);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 97)               // ','
        {
          break;
        }
        consume(97);                // ','
        lookahead1W(154);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      consume(94);                  // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    consumeT(147);                  // '%'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(171);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 92)                   // '('
    {
      consumeT(92);                 // '('
      lookahead1W(154);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 97)               // ','
        {
          break;
        }
        consumeT(97);               // ','
        lookahead1W(154);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      consumeT(94);                 // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    consume(277);                   // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(147);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 157)                  // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(106);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 29:                        // ':='
      consume(29);                  // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(199);                 // 'external'
      lookahead1W(104);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 29)                 // ':='
      {
        consume(29);                // ':='
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(43);                // S^WS | '(:' | 'context'
    consume(174);                   // 'context'
    lookahead1W(55);                // S^WS | '(:' | 'item'
    consume(220);                   // 'item'
    lookahead1W(147);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 157)                  // 'as'
    {
      consume(157);                 // 'as'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(106);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 29:                        // ':='
      consume(29);                  // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(199);                 // 'external'
      lookahead1W(104);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 29)                 // ':='
      {
        consume(29);                // ':='
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 != 97)                 // ','
      {
        break;
      }
      consume(97);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 != 97)                 // ','
      {
        break;
      }
      consumeT(97);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(143);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 157)                  // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(143);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 157)                  // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    consume(283);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(138);                   // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    consumeT(283);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(138);                  // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(66);                // S^WS | '(:' | 'option'
    consume(239);                   // 'option'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consume(144);                   // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consume(97);                  // ','
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consumeT(97);                 // ','
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 250)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 250)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    lk = predict(8);
    switch (lk)
    {
    case 1:
      parse_ForClause();
      break;
    case 2:
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    lk = predict(8);
    switch (lk)
    {
    case 1:
      try_ForClause();
      break;
    case 2:
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 203:                       // 'for'
    case 225:                       // 'let'
      parse_InitialClause();
      break;
    case 279:                       // 'where'
      parse_WhereClause();
      break;
    case 207:                       // 'group'
      parse_GroupByClause();
      break;
    case 178:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 203:                       // 'for'
    case 225:                       // 'let'
      try_InitialClause();
      break;
    case 279:                       // 'where'
      try_WhereClause();
      break;
    case 207:                       // 'group'
      try_GroupByClause();
      break;
    case 178:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    consume(203);                   // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consume(97);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    consumeT(203);                  // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consumeT(97);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(164);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 157)                  // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(158);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 152)                  // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(150);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 159)                  // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(122);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 257)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(212);                   // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(164);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 157)                  // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(158);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 152)                  // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(150);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 159)                  // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(122);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 257)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(212);                  // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    consume(152);                   // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(191);                   // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    consumeT(152);                  // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(191);                  // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    consume(159);                   // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    consumeT(159);                  // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    consume(257);                   // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  function try_FTScoreVar()
  {
    consumeT(257);                  // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    consume(225);                   // 'let'
    lookahead1W(96);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consume(97);                  // ','
      lookahead1W(96);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    consumeT(225);                  // 'let'
    lookahead1W(96);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consumeT(97);                 // ','
      lookahead1W(96);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 146:                       // '$'
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(105);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 157)                // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(27);                // S^WS | '(:' | ':='
    consume(29);                    // ':='
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    switch (l1)
    {
    case 146:                       // '$'
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(105);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 157)                // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(27);                // S^WS | '(:' | ':='
    consumeT(29);                   // ':='
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    consume(203);                   // 'for'
    lookahead1W(135);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 269:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    consumeT(203);                  // 'for'
    lookahead1W(135);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 269:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    consume(269);                   // 'tumbling'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consume(132);                   // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 157)                  // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(212);                   // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    if (l1 == 194                   // 'end'
     || l1 == 238)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    consumeT(269);                  // 'tumbling'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consumeT(132);                  // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 157)                  // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(212);                  // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    if (l1 == 194                   // 'end'
     || l1 == 238)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    consume(259);                   // 'sliding'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consume(132);                   // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 157)                  // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(212);                   // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    consumeT(259);                  // 'sliding'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consumeT(132);                  // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 157)                  // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(212);                  // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    consume(262);                   // 'start'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consume(84);                    // 'when'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    consumeT(262);                  // 'start'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consumeT(84);                   // 'when'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 238)                  // 'only'
    {
      consume(238);                 // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consume(194);                   // 'end'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consume(84);                    // 'when'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 238)                  // 'only'
    {
      consumeT(238);                // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consumeT(194);                  // 'end'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consumeT(84);                   // 'when'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 146)                  // '$'
    {
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 159)                  // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(153);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 73)                   // 'previous'
    {
      consume(73);                  // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(127);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 59)                   // 'next'
    {
      consume(59);                  // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 146)                  // '$'
    {
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_CurrentItem();
    }
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 159)                  // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(153);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 73)                   // 'previous'
    {
      consumeT(73);                 // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_PreviousItem();
    }
    lookahead1W(127);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 59)                   // 'next'
    {
      consumeT(59);                 // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    consume(178);                   // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    consumeT(178);                  // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    consume(279);                   // 'where'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    consumeT(279);                  // 'where'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    consume(207);                   // 'group'
    lookahead1W(34);                // S^WS | '(:' | 'by'
    consume(114);                   // 'by'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    consumeT(207);                  // 'group'
    lookahead1W(34);                // S^WS | '(:' | 'by'
    consumeT(114);                  // 'by'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 97)                 // ','
      {
        break;
      }
      consume(97);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 97)                 // ','
      {
        break;
      }
      consumeT(97);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(182);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 29                    // ':='
     || l1 == 157)                  // 'as'
    {
      if (l1 == 157)                // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(27);              // S^WS | '(:' | ':='
      consume(29);                  // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    if (l1 == 170)                  // 'collation'
    {
      consume(170);                 // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(5);                   // URILiteral
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(182);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 29                    // ':='
     || l1 == 157)                  // 'as'
    {
      if (l1 == 157)                // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(27);              // S^WS | '(:' | ':='
      consumeT(29);                 // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    if (l1 == 170)                  // 'collation'
    {
      consumeT(170);                // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consumeT(5);                  // URILiteral
    }
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 241:                       // 'order'
      consume(241);                 // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consume(114);                 // 'by'
      break;
    default:
      consume(261);                 // 'stable'
      lookahead1W(67);              // S^WS | '(:' | 'order'
      consume(241);                 // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consume(114);                 // 'by'
    }
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 241:                       // 'order'
      consumeT(241);                // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consumeT(114);                // 'by'
      break;
    default:
      consumeT(261);                // 'stable'
      lookahead1W(67);              // S^WS | '(:' | 'order'
      consumeT(241);                // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consumeT(114);                // 'by'
    }
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 97)                 // ','
      {
        break;
      }
      consume(97);                  // ','
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 97)                 // ','
      {
        break;
      }
      consumeT(97);                 // ','
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 158                   // 'ascending'
     || l1 == 185)                  // 'descending'
    {
      switch (l1)
      {
      case 158:                     // 'ascending'
        consume(158);               // 'ascending'
        break;
      default:
        consume(185);               // 'descending'
      }
    }
    lookahead1W(179);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 191)                  // 'empty'
    {
      consume(191);                 // 'empty'
      lookahead1W(121);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 47:                      // 'greatest'
        consume(47);                // 'greatest'
        break;
      default:
        consume(54);                // 'least'
      }
    }
    lookahead1W(177);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 170)                  // 'collation'
    {
      consume(170);                 // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(5);                   // URILiteral
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 158                   // 'ascending'
     || l1 == 185)                  // 'descending'
    {
      switch (l1)
      {
      case 158:                     // 'ascending'
        consumeT(158);              // 'ascending'
        break;
      default:
        consumeT(185);              // 'descending'
      }
    }
    lookahead1W(179);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 191)                  // 'empty'
    {
      consumeT(191);                // 'empty'
      lookahead1W(121);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 47:                      // 'greatest'
        consumeT(47);               // 'greatest'
        break;
      default:
        consumeT(54);               // 'least'
      }
    }
    lookahead1W(177);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 170)                  // 'collation'
    {
      consumeT(170);                // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consumeT(5);                  // URILiteral
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 260:                       // 'some'
      consume(260);                 // 'some'
      break;
    default:
      consume(196);                 // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 157)                  // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(212);                   // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consume(97);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(110);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 157)                // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consume(212);                 // 'in'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    consume(253);                   // 'satisfies'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 260:                       // 'some'
      consumeT(260);                // 'some'
      break;
    default:
      consumeT(196);                // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 157)                  // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(212);                  // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consumeT(97);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(110);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 157)                // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consumeT(212);                // 'in'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    consumeT(253);                  // 'satisfies'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    consume(264);                   // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(94);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consume(181);                   // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    consumeT(264);                  // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(94);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consumeT(181);                  // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      consume(165);                 // 'case'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      consumeT(165);                // 'case'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    consume(271);                   // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(94);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consume(181);                   // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 146)                  // '$'
    {
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    consumeT(271);                  // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(94);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_CaseClause();
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consumeT(181);                  // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 146)                  // '$'
    {
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    consume(165);                   // 'case'
    lookahead1W(261);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 146)                  // '$'
    {
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(157);                 // 'as'
    }
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    consumeT(165);                  // 'case'
    lookahead1W(261);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 146)                  // '$'
    {
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(157);                // 'as'
    }
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceTypeUnion();
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(134);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 135)                // '|'
      {
        break;
      }
      consume(135);                 // '|'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(134);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 135)                // '|'
      {
        break;
      }
      consumeT(135);                // '|'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    consume(210);                   // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(94);                    // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consume(79);                    // 'then'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(190);                   // 'else'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    consumeT(210);                  // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(94);                   // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consumeT(79);                   // 'then'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(190);                  // 'else'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(184);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
      if (l1 != 168)                // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(184);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
      if (l1 != 168)                // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    consume(268);                   // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(283);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_TryTargetExpr();
    consume(138);                   // '}'
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    consumeT(268);                  // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(283);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_TryTargetExpr();
    consumeT(138);                  // '}'
  }

  function parse_TryTargetExpr()
  {
    eventHandler.startNonterminal("TryTargetExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("TryTargetExpr", e0);
  }

  function try_TryTargetExpr()
  {
    try_Expr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    consume(168);                   // 'catch'
    lookahead1W(251);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_CatchErrorList();
    consume(283);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(138);                   // '}'
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    consumeT(168);                  // 'catch'
    lookahead1W(251);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_CatchErrorList();
    consumeT(283);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(138);                  // '}'
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | '{' | '|'
      if (l1 != 135)                // '|'
      {
        break;
      }
      consume(135);                 // '|'
      lookahead1W(251);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | '{' | '|'
      if (l1 != 135)                // '|'
      {
        break;
      }
      consumeT(135);                // '|'
      lookahead1W(251);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 240)                // 'or'
      {
        break;
      }
      consume(240);                 // 'or'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      if (l1 != 240)                // 'or'
      {
        break;
      }
      consumeT(240);                // 'or'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      if (l1 != 155)                // 'and'
      {
        break;
      }
      consume(155);                 // 'and'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      if (l1 != 155)                // 'and'
      {
        break;
      }
      consumeT(155);                // 'and'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    if (l1 == 91                    // '!='
     || l1 == 102                   // '<'
     || l1 == 104                   // '<<'
     || l1 == 105                   // '<='
     || l1 == 107                   // '='
     || l1 == 108                   // '>'
     || l1 == 109                   // '>='
     || l1 == 110                   // '>>'
     || l1 == 195                   // 'eq'
     || l1 == 206                   // 'ge'
     || l1 == 208                   // 'gt'
     || l1 == 219                   // 'is'
     || l1 == 224                   // 'le'
     || l1 == 227                   // 'lt'
     || l1 == 233)                  // 'ne'
    {
      switch (l1)
      {
      case 195:                     // 'eq'
      case 206:                     // 'ge'
      case 208:                     // 'gt'
      case 224:                     // 'le'
      case 227:                     // 'lt'
      case 233:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 104:                     // '<<'
      case 110:                     // '>>'
      case 219:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_FTContainsExpr();
    if (l1 == 91                    // '!='
     || l1 == 102                   // '<'
     || l1 == 104                   // '<<'
     || l1 == 105                   // '<='
     || l1 == 107                   // '='
     || l1 == 108                   // '>'
     || l1 == 109                   // '>='
     || l1 == 110                   // '>>'
     || l1 == 195                   // 'eq'
     || l1 == 206                   // 'ge'
     || l1 == 208                   // 'gt'
     || l1 == 219                   // 'is'
     || l1 == 224                   // 'le'
     || l1 == 227                   // 'lt'
     || l1 == 233)                  // 'ne'
    {
      switch (l1)
      {
      case 195:                     // 'eq'
      case 206:                     // 'ge'
      case 208:                     // 'gt'
      case 224:                     // 'le'
      case 227:                     // 'lt'
      case 233:                     // 'ne'
        try_ValueComp();
        break;
      case 104:                     // '<<'
      case 110:                     // '>>'
      case 219:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_FTContainsExpr();
    }
  }

  function parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    if (l1 == 115)                  // 'contains'
    {
      consume(115);                 // 'contains'
      lookahead1W(76);              // S^WS | '(:' | 'text'
      consume(265);                 // 'text'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 85)                 // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  function try_FTContainsExpr()
  {
    try_StringConcatExpr();
    if (l1 == 115)                  // 'contains'
    {
      consumeT(115);                // 'contains'
      lookahead1W(76);              // S^WS | '(:' | 'text'
      consumeT(265);                // 'text'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 85)                 // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 136)                // '||'
      {
        break;
      }
      consume(136);                 // '||'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 136)                // '||'
      {
        break;
      }
      consumeT(136);                // '||'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    if (l1 == 266)                  // 'to'
    {
      consume(266);                 // 'to'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    if (l1 == 266)                  // 'to'
    {
      consumeT(266);                // 'to'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 96                  // '+'
       && l1 != 98)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 96:                      // '+'
        consume(96);                // '+'
        break;
      default:
        consume(98);                // '-'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 96                  // '+'
       && l1 != 98)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 96:                      // '+'
        consumeT(96);               // '+'
        break;
      default:
        consumeT(98);               // '-'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 95                  // '*'
       && l1 != 186                 // 'div'
       && l1 != 209                 // 'idiv'
       && l1 != 228)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 95:                      // '*'
        consume(95);                // '*'
        break;
      case 186:                     // 'div'
        consume(186);               // 'div'
        break;
      case 209:                     // 'idiv'
        consume(209);               // 'idiv'
        break;
      default:
        consume(228);               // 'mod'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      if (l1 != 95                  // '*'
       && l1 != 186                 // 'div'
       && l1 != 209                 // 'idiv'
       && l1 != 228)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 95:                      // '*'
        consumeT(95);               // '*'
        break;
      case 186:                     // 'div'
        consumeT(186);              // 'div'
        break;
      case 209:                     // 'idiv'
        consumeT(209);              // 'idiv'
        break;
      default:
        consumeT(228);              // 'mod'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 272                 // 'union'
       && l1 != 135)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 272:                     // 'union'
        consume(272);               // 'union'
        break;
      default:
        consume(135);               // '|'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 272                 // 'union'
       && l1 != 135)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 272:                     // 'union'
        consumeT(272);              // 'union'
        break;
      default:
        consumeT(135);              // '|'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(222);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 197                 // 'except'
       && l1 != 217)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 217:                     // 'intersect'
        consume(217);               // 'intersect'
        break;
      default:
        consume(197);               // 'except'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(222);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 197                 // 'except'
       && l1 != 217)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 217:                     // 'intersect'
        consumeT(217);              // 'intersect'
        break;
      default:
        consumeT(197);              // 'except'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(223);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 215)                  // 'instance'
    {
      consume(215);                 // 'instance'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consume(64);                  // 'of'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(223);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 215)                  // 'instance'
    {
      consumeT(215);                // 'instance'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consumeT(64);                 // 'of'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 267)                  // 'treat'
    {
      consume(267);                 // 'treat'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(157);                 // 'as'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 267)                  // 'treat'
    {
      consumeT(267);                // 'treat'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(157);                // 'as'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 167)                  // 'castable'
    {
      consume(167);                 // 'castable'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(157);                 // 'as'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 167)                  // 'castable'
    {
      consumeT(167);                // 'castable'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(157);                // 'as'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_UnaryExpr();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 166)                  // 'cast'
    {
      consume(166);                 // 'cast'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(157);                 // 'as'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_UnaryExpr();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 166)                  // 'cast'
    {
      consumeT(166);                // 'cast'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(157);                // 'as'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_SingleType();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      if (l1 != 96                  // '+'
       && l1 != 98)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 98:                      // '-'
        consume(98);                // '-'
        break;
      default:
        consume(96);                // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      if (l1 != 96                  // '+'
       && l1 != 98)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 98:                      // '-'
        consumeT(98);               // '-'
        break;
      default:
        consumeT(96);               // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    lk = predict(9);
    switch (lk)
    {
    case 1:
      parse_ValidateExpr();
      break;
    case 2:
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    lk = predict(9);
    switch (lk)
    {
    case 1:
      try_ValidateExpr();
      break;
    case 2:
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 145)                // '!'
      {
        break;
      }
      consume(145);                 // '!'
      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 145)                // '!'
      {
        break;
      }
      consumeT(145);                // '!'
      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_PathExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 107:                       // '='
      consume(107);                 // '='
      break;
    case 91:                        // '!='
      consume(91);                  // '!='
      break;
    case 102:                       // '<'
      consume(102);                 // '<'
      break;
    case 105:                       // '<='
      consume(105);                 // '<='
      break;
    case 108:                       // '>'
      consume(108);                 // '>'
      break;
    default:
      consume(109);                 // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 107:                       // '='
      consumeT(107);                // '='
      break;
    case 91:                        // '!='
      consumeT(91);                 // '!='
      break;
    case 102:                       // '<'
      consumeT(102);                // '<'
      break;
    case 105:                       // '<='
      consumeT(105);                // '<='
      break;
    case 108:                       // '>'
      consumeT(108);                // '>'
      break;
    default:
      consumeT(109);                // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 195:                       // 'eq'
      consume(195);                 // 'eq'
      break;
    case 233:                       // 'ne'
      consume(233);                 // 'ne'
      break;
    case 227:                       // 'lt'
      consume(227);                 // 'lt'
      break;
    case 224:                       // 'le'
      consume(224);                 // 'le'
      break;
    case 208:                       // 'gt'
      consume(208);                 // 'gt'
      break;
    default:
      consume(206);                 // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 195:                       // 'eq'
      consumeT(195);                // 'eq'
      break;
    case 233:                       // 'ne'
      consumeT(233);                // 'ne'
      break;
    case 227:                       // 'lt'
      consumeT(227);                // 'lt'
      break;
    case 224:                       // 'le'
      consumeT(224);                // 'le'
      break;
    case 208:                       // 'gt'
      consumeT(208);                // 'gt'
      break;
    default:
      consumeT(206);                // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 219:                       // 'is'
      consume(219);                 // 'is'
      break;
    case 104:                       // '<<'
      consume(104);                 // '<<'
      break;
    default:
      consume(110);                 // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 219:                       // 'is'
      consumeT(219);                // 'is'
      break;
    case 104:                       // '<<'
      consumeT(104);                // '<<'
      break;
    default:
      consumeT(110);                // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    consume(275);                   // 'validate'
    lookahead1W(160);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 283)                  // '{'
    {
      switch (l1)
      {
      case 270:                     // 'type'
        consume(270);               // 'type'
        lookahead1W(249);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(283);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(138);                   // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    consumeT(275);                  // 'validate'
    lookahead1W(160);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 283)                  // '{'
    {
      switch (l1)
      {
      case 270:                     // 'type'
        consumeT(270);              // 'type'
        lookahead1W(249);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(283);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(138);                  // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 223:                       // 'lax'
      consume(223);                 // 'lax'
      break;
    default:
      consume(263);                 // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 223:                       // 'lax'
      consumeT(223);                // 'lax'
      break;
    default:
      consumeT(263);                // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 93)                 // '(#'
      {
        break;
      }
    }
    consume(283);                   // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 138)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(138);                   // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 93)                 // '(#'
      {
        break;
      }
    }
    consumeT(283);                  // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 138)                  // '}'
    {
      try_Expr();
    }
    consumeT(138);                  // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    consume(93);                    // '(#'
    lookahead1(248);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 == 15)                   // S
    {
      consume(15);                  // S
    }
    parse_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 15)                   // S
    {
      consume(15);                  // S
      lookahead1(0);                // PragmaContents
      consume(1);                   // PragmaContents
    }
    lookahead1(5);                  // '#)'
    consume(21);                    // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    consumeT(93);                   // '(#'
    lookahead1(248);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 == 15)                   // S
    {
      consumeT(15);                 // S
    }
    try_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 15)                   // S
    {
      consumeT(15);                 // S
      lookahead1(0);                // PragmaContents
      consumeT(1);                  // PragmaContents
    }
    lookahead1(5);                  // '#)'
    consumeT(21);                   // '#)'
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 150:                       // '/'
      consume(150);                 // '/'
      lookahead1W(284);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' |
                                    // '=' | '>' | '>=' | '>>' | '@' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '{|' | '|' | '||' |
                                    // '|}' | '}'
      switch (l1)
      {
      case 90:                      // EOF
      case 145:                     // '!'
      case 91:                      // '!='
      case 94:                      // ')'
      case 95:                      // '*'
      case 96:                      // '+'
      case 97:                      // ','
      case 98:                      // '-'
      case 100:                     // ':'
      case 101:                     // ';'
      case 104:                     // '<<'
      case 105:                     // '<='
      case 107:                     // '='
      case 108:                     // '>'
      case 109:                     // '>='
      case 110:                     // '>>'
      case 112:                     // ']'
      case 114:                     // 'by'
      case 115:                     // 'contains'
      case 123:                     // 'paragraphs'
      case 125:                     // 'sentences'
      case 130:                     // 'times'
      case 133:                     // 'words'
      case 135:                     // '|'
      case 136:                     // '||'
      case 137:                     // '|}'
      case 138:                     // '}'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 99:                        // '//'
      consume(99);                  // '//'
      lookahead1W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    switch (l1)
    {
    case 150:                       // '/'
      consumeT(150);                // '/'
      lookahead1W(284);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' |
                                    // '=' | '>' | '>=' | '>>' | '@' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '{|' | '|' | '||' |
                                    // '|}' | '}'
      switch (l1)
      {
      case 90:                      // EOF
      case 145:                     // '!'
      case 91:                      // '!='
      case 94:                      // ')'
      case 95:                      // '*'
      case 96:                      // '+'
      case 97:                      // ','
      case 98:                      // '-'
      case 100:                     // ':'
      case 101:                     // ';'
      case 104:                     // '<<'
      case 105:                     // '<='
      case 107:                     // '='
      case 108:                     // '>'
      case 109:                     // '>='
      case 110:                     // '>>'
      case 112:                     // ']'
      case 114:                     // 'by'
      case 115:                     // 'contains'
      case 123:                     // 'paragraphs'
      case 125:                     // 'sentences'
      case 130:                     // 'times'
      case 133:                     // 'words'
      case 135:                     // '|'
      case 136:                     // '||'
      case 137:                     // '|}'
      case 138:                     // '}'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 99:                        // '//'
      consumeT(99);                 // '//'
      lookahead1W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      lk = predict(10);
      if (lk == 0)
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 150:               // '/'
              consumeT(150);        // '/'
              break;
            case 99:                // '//'
              consumeT(99);         // '//'
              break;
            default:
              consumeT(145);        // '!'
            }
            lookahead1W(264);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
            try_StepExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0, lk);
        }
      }
      if (lk != -1
       && lk != 1)
      {
        break;
      }
      switch (l1)
      {
      case 150:                     // '/'
        consume(150);               // '/'
        break;
      case 99:                      // '//'
        consume(99);                // '//'
        break;
      default:
        consume(145);               // '!'
      }
      lookahead1W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      lk = predict(10);
      if (lk == 0)
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 150:               // '/'
              consumeT(150);        // '/'
              break;
            case 99:                // '//'
              consumeT(99);         // '//'
              break;
            default:
              consumeT(145);        // '!'
            }
            lookahead1W(264);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
            try_StepExpr();
            memoize(2, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(2, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 1)
      {
        break;
      }
      switch (l1)
      {
      case 150:                     // '/'
        consumeT(150);              // '/'
        break;
      case 99:                      // '//'
        consumeT(99);               // '//'
        break;
      default:
        consumeT(145);              // '!'
      }
      lookahead1W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    lk = predict(11);
    if (lk == 2)
    {
      lk = memoized(3, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(3, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 1:
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    lk = predict(11);
    if (lk == 2)
    {
      lk = memoized(3, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(3, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 1:
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    lk = predict(12);
    switch (lk)
    {
    case 1:
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(236);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  function try_AxisStep()
  {
    lk = predict(12);
    switch (lk)
    {
    case 1:
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(236);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    lk = predict(13);
    switch (lk)
    {
    case 1:
      parse_ForwardAxis();
      lookahead1W(259);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  function try_ForwardStep()
  {
    lk = predict(13);
    switch (lk)
    {
    case 1:
      try_ForwardAxis();
      lookahead1W(259);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 169:                       // 'child'
      consume(169);                 // 'child'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 183:                       // 'descendant'
      consume(183);                 // 'descendant'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 160:                       // 'attribute'
      consume(160);                 // 'attribute'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 258:                       // 'self'
      consume(258);                 // 'self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 184:                       // 'descendant-or-self'
      consume(184);                 // 'descendant-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 202:                       // 'following-sibling'
      consume(202);                 // 'following-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
      break;
    default:
      consume(201);                 // 'following'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 169:                       // 'child'
      consumeT(169);                // 'child'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
      break;
    case 183:                       // 'descendant'
      consumeT(183);                // 'descendant'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
      break;
    case 160:                       // 'attribute'
      consumeT(160);                // 'attribute'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
      break;
    case 258:                       // 'self'
      consumeT(258);                // 'self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
      break;
    case 184:                       // 'descendant-or-self'
      consumeT(184);                // 'descendant-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
      break;
    case 202:                       // 'following-sibling'
      consumeT(202);                // 'following-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
      break;
    default:
      consumeT(201);                // 'following'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 33)                   // '@'
    {
      consume(33);                  // '@'
    }
    lookahead1W(259);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 33)                   // '@'
    {
      consumeT(33);                 // '@'
    }
    lookahead1W(259);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 149:                       // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(259);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 149:                       // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(259);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 244:                       // 'parent'
      consume(244);                 // 'parent'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 153:                       // 'ancestor'
      consume(153);                 // 'ancestor'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 246:                       // 'preceding-sibling'
      consume(246);                 // 'preceding-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
      break;
    case 245:                       // 'preceding'
      consume(245);                 // 'preceding'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
      break;
    default:
      consume(154);                 // 'ancestor-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(28);                  // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 244:                       // 'parent'
      consumeT(244);                // 'parent'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
      break;
    case 153:                       // 'ancestor'
      consumeT(153);                // 'ancestor'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
      break;
    case 246:                       // 'preceding-sibling'
      consumeT(246);                // 'preceding-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
      break;
    case 245:                       // 'preceding'
      consumeT(245);                // 'preceding'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
      break;
    default:
      consumeT(154);                // 'ancestor-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(28);                 // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    consume(149);                   // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  function try_AbbrevReverseStep()
  {
    consumeT(149);                  // '..'
  }

  function parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    lk = predict(14);
    switch (lk)
    {
    case 1:
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  function try_NodeTest()
  {
    lk = predict(14);
    switch (lk)
    {
    case 1:
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 139:                       // Wildcard
      consume(139);                 // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 139:                       // Wildcard
      consumeT(139);                // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(239);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 92                  // '('
       && l1 != 111)                // '['
      {
        break;
      }
      switch (l1)
      {
      case 111:                     // '['
        whitespace();
        parse_Predicate();
        break;
      default:
        whitespace();
        parse_ArgumentList();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(239);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 92                  // '('
       && l1 != 111)                // '['
      {
        break;
      }
      switch (l1)
      {
      case 111:                     // '['
        try_Predicate();
        break;
      default:
        try_ArgumentList();
      }
    }
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    consume(92);                    // '('
    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 94)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 97)               // ','
        {
          break;
        }
        consume(97);                // ','
        lookahead1W(274);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_Argument();
      }
    }
    consume(94);                    // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    consumeT(92);                   // '('
    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 94)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 97)               // ','
        {
          break;
        }
        consumeT(97);               // ','
        lookahead1W(274);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        try_Argument();
      }
    }
    consumeT(94);                   // ')'
  }

  function parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(236);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 111)                // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(236);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 111)                // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    consume(111);                   // '['
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(112);                   // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    consumeT(111);                  // '['
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(112);                  // ']'
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 144:                       // StringLiteral
      consume(144);                 // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 144:                       // StringLiteral
      consumeT(144);                // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 141:                       // IntegerLiteral
      consume(141);                 // IntegerLiteral
      break;
    case 142:                       // DecimalLiteral
      consume(142);                 // DecimalLiteral
      break;
    default:
      consume(143);                 // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 141:                       // IntegerLiteral
      consumeT(141);                // IntegerLiteral
      break;
    case 142:                       // DecimalLiteral
      consumeT(142);                // DecimalLiteral
      break;
    default:
      consumeT(143);                // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    consume(92);                    // '('
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 94)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    consume(94);                    // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    consumeT(92);                   // '('
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 94)                   // ')'
    {
      try_Expr();
    }
    consumeT(94);                   // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    consume(148);                   // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    consumeT(148);                  // '.'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    consume(242);                   // 'ordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(283);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(138);                   // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    consumeT(242);                  // 'ordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(283);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(138);                  // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    consume(273);                   // 'unordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(283);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(138);                   // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    consumeT(273);                  // 'unordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(283);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(138);                  // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 31:                        // '?'
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 31:                        // '?'
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    consume(31);                    // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    consumeT(31);                   // '?'
  }

  function parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 102:                       // '<'
    case 103:                       // '<!--'
    case 106:                       // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 102:                       // '<'
    case 103:                       // '<!--'
    case 106:                       // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 102:                       // '<'
      parse_DirElemConstructor();
      break;
    case 103:                       // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 102:                       // '<'
      try_DirElemConstructor();
      break;
    case 103:                       // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    consume(102);                   // '<'
    lookahead1(4);                  // QName
    consume(14);                    // QName
    parse_DirAttributeList();
    switch (l1)
    {
    case 26:                        // '/>'
      consume(26);                  // '/>'
      break;
    default:
      consume(108);                 // '>'
      for (;;)
      {
        lookahead1(174);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 30)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      consume(30);                  // '</'
      lookahead1(4);                // QName
      consume(14);                  // QName
      lookahead1(12);               // S | '>'
      if (l1 == 15)                 // S
      {
        consume(15);                // S
      }
      lookahead1(8);                // '>'
      consume(108);                 // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    consumeT(102);                  // '<'
    lookahead1(4);                  // QName
    consumeT(14);                   // QName
    try_DirAttributeList();
    switch (l1)
    {
    case 26:                        // '/>'
      consumeT(26);                 // '/>'
      break;
    default:
      consumeT(108);                // '>'
      for (;;)
      {
        lookahead1(174);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 30)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      consumeT(30);                 // '</'
      lookahead1(4);                // QName
      consumeT(14);                 // QName
      lookahead1(12);               // S | '>'
      if (l1 == 15)                 // S
      {
        consumeT(15);               // S
      }
      lookahead1(8);                // '>'
      consumeT(108);                // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 15)                 // S
      {
        break;
      }
      consume(15);                  // S
      lookahead1(91);               // QName | S | '/>' | '>'
      if (l1 == 14)                 // QName
      {
        consume(14);                // QName
        lookahead1(11);             // S | '='
        if (l1 == 15)               // S
        {
          consume(15);              // S
        }
        lookahead1(7);              // '='
        consume(107);               // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 15)               // S
        {
          consume(15);              // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 15)                 // S
      {
        break;
      }
      consumeT(15);                 // S
      lookahead1(91);               // QName | S | '/>' | '>'
      if (l1 == 14)                 // QName
      {
        consumeT(14);               // QName
        lookahead1(11);             // S | '='
        if (l1 == 15)               // S
        {
          consumeT(15);             // S
        }
        lookahead1(7);              // '='
        consumeT(107);              // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 15)               // S
        {
          consumeT(15);             // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 19:                        // '"'
      consume(19);                  // '"'
      for (;;)
      {
        lookahead1(167);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 19)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          consume(7);               // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      consume(19);                  // '"'
      break;
    default:
      consume(22);                  // "'"
      for (;;)
      {
        lookahead1(168);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 22)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          consume(8);               // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      consume(22);                  // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 19:                        // '"'
      consumeT(19);                 // '"'
      for (;;)
      {
        lookahead1(167);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 19)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          consumeT(7);              // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      consumeT(19);                 // '"'
      break;
    default:
      consumeT(22);                 // "'"
      for (;;)
      {
        lookahead1(168);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 22)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          consumeT(8);              // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      consumeT(22);                 // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      consume(10);                  // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      consumeT(10);                 // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      consume(11);                  // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      consumeT(11);                 // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 102:                       // '<'
    case 103:                       // '<!--'
    case 106:                       // '<?'
      parse_DirectConstructor();
      break;
    case 4:                         // CDataSection
      consume(4);                   // CDataSection
      break;
    case 9:                         // ElementContentChar
      consume(9);                   // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 102:                       // '<'
    case 103:                       // '<!--'
    case 106:                       // '<?'
      try_DirectConstructor();
      break;
    case 4:                         // CDataSection
      consumeT(4);                  // CDataSection
      break;
    case 9:                         // ElementContentChar
      consumeT(9);                  // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    consume(103);                   // '<!--'
    lookahead1(1);                  // DirCommentContents
    consume(2);                     // DirCommentContents
    lookahead1(6);                  // '-->'
    consume(25);                    // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    consumeT(103);                  // '<!--'
    lookahead1(1);                  // DirCommentContents
    consumeT(2);                    // DirCommentContents
    lookahead1(6);                  // '-->'
    consumeT(25);                   // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    consume(106);                   // '<?'
    lookahead1(3);                  // PITarget
    consume(12);                    // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 15)                   // S
    {
      consume(15);                  // S
      lookahead1(2);                // DirPIContents
      consume(3);                   // DirPIContents
    }
    lookahead1(9);                  // '?>'
    consume(32);                    // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    consumeT(106);                  // '<?'
    lookahead1(3);                  // PITarget
    consumeT(12);                   // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 15)                   // S
    {
      consumeT(15);                 // S
      lookahead1(2);                // DirPIContents
      consumeT(3);                  // DirPIContents
    }
    lookahead1(9);                  // '?>'
    consumeT(32);                   // '?>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 187:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 189:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 160:                       // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 231:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 265:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 171:                       // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 187:                       // 'document'
      try_CompDocConstructor();
      break;
    case 189:                       // 'element'
      try_CompElemConstructor();
      break;
    case 160:                       // 'attribute'
      try_CompAttrConstructor();
      break;
    case 231:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 265:                       // 'text'
      try_CompTextConstructor();
      break;
    case 171:                       // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    consume(189);                   // 'element'
    lookahead1W(252);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 283:                       // '{'
      consume(283);                 // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(138);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(283);                   // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 138)                  // '}'
    {
      whitespace();
      parse_ContentExpr();
    }
    consume(138);                   // '}'
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    consumeT(189);                  // 'element'
    lookahead1W(252);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 283:                       // '{'
      consumeT(283);                // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(138);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(283);                  // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 138)                  // '}'
    {
      try_ContentExpr();
    }
    consumeT(138);                  // '}'
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    consume(231);                   // 'namespace'
    lookahead1W(253);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 283:                       // '{'
      consume(283);                 // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_PrefixExpr();
      consume(138);                 // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(283);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_URIExpr();
    consume(138);                   // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    consumeT(231);                  // 'namespace'
    lookahead1W(253);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 283:                       // '{'
      consumeT(283);                // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_PrefixExpr();
      consumeT(138);                // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(283);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_URIExpr();
    consumeT(138);                  // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    lk = predict(15);
    switch (lk)
    {
    case 1:
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    lk = predict(15);
    switch (lk)
    {
    case 1:
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    consume(20);                    // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    consume(141);                   // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    consumeT(20);                   // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    consumeT(141);                  // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 147)                // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(205);                   // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 146)                  // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(94);                    // ')'
    lookahead1W(111);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 157)                  // 'as'
    {
      consume(157);                 // 'as'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 147)                // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(205);                  // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 146)                  // '$'
    {
      try_ParamList();
    }
    consumeT(94);                   // ')'
    lookahead1W(111);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 157)                  // 'as'
    {
      consumeT(157);                // 'as'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 31)                   // '?'
    {
      consume(31);                  // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 31)                   // '?'
    {
      consumeT(31);                 // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    consume(157);                   // 'as'
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    consumeT(157);                  // 'as'
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    lk = predict(16);
    switch (lk)
    {
    case 1:
      consume(192);                 // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consume(92);                  // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consume(94);                  // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(237);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 24:                      // '*'
      case 96:                      // '+'
      case 31:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    lk = predict(16);
    switch (lk)
    {
    case 1:
      consumeT(192);                // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consumeT(92);                 // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consumeT(94);                 // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(237);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 24:                      // '*'
      case 96:                      // '+'
      case 31:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 31:                        // '?'
      consume(31);                  // '?'
      break;
    case 24:                        // '*'
      consume(24);                  // '*'
      break;
    default:
      consume(96);                  // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 31:                        // '?'
      consumeT(31);                 // '?'
      break;
    case 24:                        // '*'
      consumeT(24);                 // '*'
      break;
    default:
      consumeT(96);                 // '+'
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    lk = predict(17);
    if (lk == 7)
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_KindTest();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -6;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(4, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 1:
      parse_KindTest();
      break;
    case 2:
      consume(220);                 // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consume(92);                  // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consume(94);                  // ')'
      break;
    case 3:
      parse_FunctionTest();
      break;
    case 4:
      parse_ParenthesizedItemType();
      break;
    case -6:
      parse_JSONTest();
      break;
    case 6:
      parse_StructuredItemTest();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    lk = predict(17);
    if (lk == 7)
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_KindTest();
          memoize(4, e0A, -1);
          lk = -8;
        }
        catch (p1A)
        {
          lk = -6;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(4, e0A, -6);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 1:
      try_KindTest();
      break;
    case 2:
      consumeT(220);                // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consumeT(92);                 // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consumeT(94);                 // ')'
      break;
    case 3:
      try_FunctionTest();
      break;
    case 4:
      try_ParenthesizedItemType();
      break;
    case -6:
      try_JSONTest();
      break;
    case 6:
      try_StructuredItemTest();
      break;
    case -8:
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_JSONTest()
  {
    eventHandler.startNonterminal("JSONTest", e0);
    switch (l1)
    {
    case 221:                       // 'json-item'
      parse_JSONItemTest();
      break;
    case 237:                       // 'object'
      parse_JSONObjectTest();
      break;
    default:
      parse_JSONArrayTest();
    }
    eventHandler.endNonterminal("JSONTest", e0);
  }

  function try_JSONTest()
  {
    switch (l1)
    {
    case 221:                       // 'json-item'
      try_JSONItemTest();
      break;
    case 237:                       // 'object'
      try_JSONObjectTest();
      break;
    default:
      try_JSONArrayTest();
    }
  }

  function parse_StructuredItemTest()
  {
    eventHandler.startNonterminal("StructuredItemTest", e0);
    consume(128);                   // 'structured-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("StructuredItemTest", e0);
  }

  function try_StructuredItemTest()
  {
    consumeT(128);                  // 'structured-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_JSONItemTest()
  {
    eventHandler.startNonterminal("JSONItemTest", e0);
    consume(221);                   // 'json-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("JSONItemTest", e0);
  }

  function try_JSONItemTest()
  {
    consumeT(221);                  // 'json-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_JSONObjectTest()
  {
    eventHandler.startNonterminal("JSONObjectTest", e0);
    consume(237);                   // 'object'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("JSONObjectTest", e0);
  }

  function try_JSONObjectTest()
  {
    consumeT(237);                  // 'object'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_JSONArrayTest()
  {
    eventHandler.startNonterminal("JSONArrayTest", e0);
    consume(156);                   // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("JSONArrayTest", e0);
  }

  function try_JSONArrayTest()
  {
    consumeT(156);                  // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 188:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 189:                       // 'element'
      parse_ElementTest();
      break;
    case 160:                       // 'attribute'
      parse_AttributeTest();
      break;
    case 256:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 255:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 247:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 171:                       // 'comment'
      parse_CommentTest();
      break;
    case 265:                       // 'text'
      parse_TextTest();
      break;
    case 232:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    case 235:                       // 'node'
      parse_AnyKindTest();
      break;
    default:
      parse_JSONTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 188:                       // 'document-node'
      try_DocumentTest();
      break;
    case 189:                       // 'element'
      try_ElementTest();
      break;
    case 160:                       // 'attribute'
      try_AttributeTest();
      break;
    case 256:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 255:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 247:                       // 'processing-instruction'
      try_PITest();
      break;
    case 171:                       // 'comment'
      try_CommentTest();
      break;
    case 265:                       // 'text'
      try_TextTest();
      break;
    case 232:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    case 235:                       // 'node'
      try_AnyKindTest();
      break;
    default:
      try_JSONTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    consume(235);                   // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    consumeT(235);                  // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    consume(188);                   // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(144);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 94)                   // ')'
    {
      switch (l1)
      {
      case 189:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    consumeT(188);                  // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(144);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 94)                   // ')'
    {
      switch (l1)
      {
      case 189:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    consume(265);                   // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    consumeT(265);                  // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    consume(171);                   // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    consumeT(171);                  // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    consume(232);                   // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    consumeT(232);                  // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    consume(247);                   // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(256);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 94)                   // ')'
    {
      switch (l1)
      {
      case 144:                     // StringLiteral
        consume(144);               // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    consumeT(247);                  // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(256);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 94)                   // ')'
    {
      switch (l1)
      {
      case 144:                     // StringLiteral
        consumeT(144);              // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    consume(160);                   // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 94)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 97)                 // ','
      {
        consume(97);                // ','
        lookahead1W(249);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    consumeT(160);                  // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 94)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 97)                 // ','
      {
        consumeT(97);               // ','
        lookahead1W(249);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 95:                        // '*'
      consume(95);                  // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 95:                        // '*'
      consumeT(95);                 // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    consume(255);                   // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    consumeT(255);                  // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    consume(189);                   // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 94)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 97)                 // ','
      {
        consume(97);                // ','
        lookahead1W(249);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(102);           // S^WS | '(:' | ')' | '?'
        if (l1 == 31)               // '?'
        {
          consume(31);              // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    consumeT(189);                  // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 94)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 97)                 // ','
      {
        consumeT(97);               // ','
        lookahead1W(249);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
        lookahead1W(102);           // S^WS | '(:' | ')' | '?'
        if (l1 == 31)               // '?'
        {
          consumeT(31);             // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 95:                        // '*'
      consume(95);                  // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 95:                        // '*'
      consumeT(95);                 // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    consume(256);                   // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    consumeT(256);                  // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 147)                // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    lk = predict(18);
    lk = memoized(5, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(5, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 147)                // '%'
      {
        break;
      }
      try_Annotation();
    }
    lk = predict(18);
    lk = memoized(5, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(5, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    consume(205);                   // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    consume(95);                    // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    consumeT(205);                  // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    consumeT(95);                   // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    consume(205);                   // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 != 94)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 97)               // ','
        {
          break;
        }
        consume(97);                // ','
        lookahead1W(260);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    consume(94);                    // ')'
    lookahead1W(30);                // S^WS | '(:' | 'as'
    consume(157);                   // 'as'
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    consumeT(205);                  // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 != 94)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 97)               // ','
        {
          break;
        }
        consumeT(97);               // ','
        lookahead1W(260);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        try_SequenceType();
      }
    }
    consumeT(94);                   // ')'
    lookahead1W(30);                // S^WS | '(:' | 'as'
    consumeT(157);                  // 'as'
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    consume(92);                    // '('
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(94);                    // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    consumeT(92);                   // '('
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(94);                   // ')'
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    consume(180);                   // 'declare'
    lookahead1W(72);                // S^WS | '(:' | 'revalidation'
    consume(252);                   // 'revalidation'
    lookahead1W(152);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 263:                       // 'strict'
      consume(263);                 // 'strict'
      break;
    case 223:                       // 'lax'
      consume(223);                 // 'lax'
      break;
    default:
      consume(77);                  // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 151:                       // 'after'
      consume(151);                 // 'after'
      break;
    case 162:                       // 'before'
      consume(162);                 // 'before'
      break;
    default:
      if (l1 == 157)                // 'as'
      {
        consume(157);               // 'as'
        lookahead1W(119);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 200:                   // 'first'
          consume(200);             // 'first'
          break;
        default:
          consume(222);             // 'last'
        }
      }
      lookahead1W(54);              // S^WS | '(:' | 'into'
      consume(218);                 // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 151:                       // 'after'
      consumeT(151);                // 'after'
      break;
    case 162:                       // 'before'
      consumeT(162);                // 'before'
      break;
    default:
      if (l1 == 157)                // 'as'
      {
        consumeT(157);              // 'as'
        lookahead1W(119);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 200:                   // 'first'
          consumeT(200);            // 'first'
          break;
        default:
          consumeT(222);            // 'last'
        }
      }
      lookahead1W(54);              // S^WS | '(:' | 'into'
      consumeT(218);                // 'into'
    }
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    consume(214);                   // 'insert'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 235:                       // 'node'
      consume(235);                 // 'node'
      break;
    default:
      consume(236);                 // 'nodes'
    }
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_SourceExpr();
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    consumeT(214);                  // 'insert'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 235:                       // 'node'
      consumeT(235);                // 'node'
      break;
    default:
      consumeT(236);                // 'nodes'
    }
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_SourceExpr();
    try_InsertExprTargetChoice();
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    consume(182);                   // 'delete'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 235:                       // 'node'
      consume(235);                 // 'node'
      break;
    default:
      consume(236);                 // 'nodes'
    }
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    consumeT(182);                  // 'delete'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 235:                       // 'node'
      consumeT(235);                // 'node'
      break;
    default:
      consumeT(236);                // 'nodes'
    }
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    consume(249);                   // 'replace'
    lookahead1W(130);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 276)                  // 'value'
    {
      consume(276);                 // 'value'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consume(64);                  // 'of'
    }
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(235);                   // 'node'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    consume(281);                   // 'with'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    consumeT(249);                  // 'replace'
    lookahead1W(130);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 276)                  // 'value'
    {
      consumeT(276);                // 'value'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consumeT(64);                 // 'of'
    }
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consumeT(235);                  // 'node'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_TargetExpr();
    consumeT(281);                  // 'with'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    consume(248);                   // 'rename'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(235);                   // 'node'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    consume(157);                   // 'as'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    consumeT(248);                  // 'rename'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consumeT(235);                  // 'node'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_TargetExpr();
    consumeT(157);                  // 'as'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_TransformExpr()
  {
    eventHandler.startNonterminal("TransformExpr", e0);
    consume(176);                   // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consume(29);                    // ':='
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consume(97);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(27);              // S^WS | '(:' | ':='
      consume(29);                  // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    consume(229);                   // 'modify'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformExpr", e0);
  }

  function try_TransformExpr()
  {
    consumeT(176);                  // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consumeT(29);                   // ':='
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consumeT(97);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(27);              // S^WS | '(:' | ':='
      consumeT(29);                 // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    consumeT(229);                  // 'modify'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      lk = predict(19);
      if (lk != 1)
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  function try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      lk = predict(19);
      if (lk != 1)
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  function parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    consume(83);                    // 'weight'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(283);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(138);                   // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  function try_FTWeight()
  {
    consumeT(83);                   // 'weight'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(283);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(138);                  // '}'
  }

  function parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 46)                 // 'ftor'
      {
        break;
      }
      consume(46);                  // 'ftor'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  function try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 46)                 // 'ftor'
      {
        break;
      }
      consumeT(46);                 // 'ftor'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  function parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 44)                 // 'ftand'
      {
        break;
      }
      consume(44);                  // 'ftand'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  function try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 44)                 // 'ftand'
      {
        break;
      }
      consumeT(44);                 // 'ftand'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  function parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(212);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
      if (l1 != 62)                 // 'not'
      {
        break;
      }
      consume(62);                  // 'not'
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consume(212);                 // 'in'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  function try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(212);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
      if (l1 != 62)                 // 'not'
      {
        break;
      }
      consumeT(62);                 // 'not'
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consumeT(212);                // 'in'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  function parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 45)                   // 'ftnot'
    {
      consume(45);                  // 'ftnot'
    }
    lookahead1W(155);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  function try_FTUnaryNot()
  {
    if (l1 == 45)                   // 'ftnot'
    {
      consumeT(45);                 // 'ftnot'
    }
    lookahead1W(155);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  function parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 82)                   // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 83)                   // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  function try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 82)                   // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 83)                   // 'weight'
    {
      try_FTWeight();
    }
  }

  function parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 92:                        // '('
      consume(92);                  // '('
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      consume(94);                  // ')'
      break;
    case 93:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 63)                 // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  function try_FTPrimary()
  {
    switch (l1)
    {
    case 92:                        // '('
      consumeT(92);                 // '('
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      consumeT(94);                 // ')'
      break;
    case 93:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 63)                 // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  function parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(221);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 35                    // 'all'
     || l1 == 36                    // 'any'
     || l1 == 70)                   // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  function try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(221);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 35                    // 'all'
     || l1 == 36                    // 'any'
     || l1 == 70)                   // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  function parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 144:                       // StringLiteral
      consume(144);                 // StringLiteral
      break;
    default:
      consume(283);                 // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(138);                 // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  function try_FTWordsValue()
  {
    switch (l1)
    {
    case 144:                       // StringLiteral
      consumeT(144);                // StringLiteral
      break;
    default:
      consumeT(283);                // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(138);                // '}'
    }
  }

  function parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 93)                 // '(#'
      {
        break;
      }
    }
    consume(283);                   // '{'
    lookahead1W(166);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 138)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    consume(138);                   // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  function try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 93)                 // '(#'
      {
        break;
      }
    }
    consumeT(283);                  // '{'
    lookahead1W(166);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 138)                  // '}'
    {
      try_FTSelection();
    }
    consumeT(138);                  // '}'
  }

  function parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 36:                        // 'any'
      consume(36);                  // 'any'
      lookahead1W(218);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
      if (l1 == 86)                 // 'word'
      {
        consume(86);                // 'word'
      }
      break;
    case 35:                        // 'all'
      consume(35);                  // 'all'
      lookahead1W(219);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
      if (l1 == 133)                // 'words'
      {
        consume(133);               // 'words'
      }
      break;
    default:
      consume(70);                  // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  function try_FTAnyallOption()
  {
    switch (l1)
    {
    case 36:                        // 'any'
      consumeT(36);                 // 'any'
      lookahead1W(218);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
      if (l1 == 86)                 // 'word'
      {
        consumeT(86);               // 'word'
      }
      break;
    case 35:                        // 'all'
      consumeT(35);                 // 'all'
      lookahead1W(219);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
      if (l1 == 133)                // 'words'
      {
        consumeT(133);              // 'words'
      }
      break;
    default:
      consumeT(70);                 // 'phrase'
    }
  }

  function parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    consume(63);                    // 'occurs'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    consume(130);                   // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  function try_FTTimes()
  {
    consumeT(63);                   // 'occurs'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    consumeT(130);                  // 'times'
  }

  function parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 120:                       // 'exactly'
      consume(120);                 // 'exactly'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      break;
    case 159:                       // 'at'
      consume(159);                 // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 54:                      // 'least'
        consume(54);                // 'least'
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        consume(58);                // 'most'
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      consume(121);                 // 'from'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      consume(266);                 // 'to'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  function try_FTRange()
  {
    switch (l1)
    {
    case 120:                       // 'exactly'
      consumeT(120);                // 'exactly'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_AdditiveExpr();
      break;
    case 159:                       // 'at'
      consumeT(159);                // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 54:                      // 'least'
        consumeT(54);               // 'least'
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        try_AdditiveExpr();
        break;
      default:
        consumeT(58);               // 'most'
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        try_AdditiveExpr();
      }
      break;
    default:
      consumeT(121);                // 'from'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_AdditiveExpr();
      consumeT(266);                // 'to'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 242:                       // 'ordered'
      parse_FTOrder();
      break;
    case 132:                       // 'window'
      parse_FTWindow();
      break;
    case 118:                       // 'distance'
      parse_FTDistance();
      break;
    case 117:                       // 'different'
    case 124:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  function try_FTPosFilter()
  {
    switch (l1)
    {
    case 242:                       // 'ordered'
      try_FTOrder();
      break;
    case 132:                       // 'window'
      try_FTWindow();
      break;
    case 118:                       // 'distance'
      try_FTDistance();
      break;
    case 117:                       // 'different'
    case 124:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  function parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    consume(242);                   // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  function try_FTOrder()
  {
    consumeT(242);                  // 'ordered'
  }

  function parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    consume(132);                   // 'window'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  function try_FTWindow()
  {
    consumeT(132);                  // 'window'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_AdditiveExpr();
    try_FTUnit();
  }

  function parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    consume(118);                   // 'distance'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  function try_FTDistance()
  {
    consumeT(118);                  // 'distance'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  function parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 133:                       // 'words'
      consume(133);                 // 'words'
      break;
    case 125:                       // 'sentences'
      consume(125);                 // 'sentences'
      break;
    default:
      consume(123);                 // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  function try_FTUnit()
  {
    switch (l1)
    {
    case 133:                       // 'words'
      consumeT(133);                // 'words'
      break;
    case 125:                       // 'sentences'
      consumeT(125);                // 'sentences'
      break;
    default:
      consumeT(123);                // 'paragraphs'
    }
  }

  function parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 124:                       // 'same'
      consume(124);                 // 'same'
      break;
    default:
      consume(117);                 // 'different'
    }
    lookahead1W(132);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  function try_FTScope()
  {
    switch (l1)
    {
    case 124:                       // 'same'
      consumeT(124);                // 'same'
      break;
    default:
      consumeT(117);                // 'different'
    }
    lookahead1W(132);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  function parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 76:                        // 'sentence'
      consume(76);                  // 'sentence'
      break;
    default:
      consume(66);                  // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  function try_FTBigUnit()
  {
    switch (l1)
    {
    case 76:                        // 'sentence'
      consumeT(76);                 // 'sentence'
      break;
    default:
      consumeT(66);                 // 'paragraph'
    }
  }

  function parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 159:                       // 'at'
      consume(159);                 // 'at'
      lookahead1W(117);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 262:                     // 'start'
        consume(262);               // 'start'
        break;
      default:
        consume(194);               // 'end'
      }
      break;
    default:
      consume(119);                 // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consume(39);                  // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  function try_FTContent()
  {
    switch (l1)
    {
    case 159:                       // 'at'
      consumeT(159);                // 'at'
      lookahead1W(117);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 262:                     // 'start'
        consumeT(262);              // 'start'
        break;
      default:
        consumeT(194);              // 'end'
      }
      break;
    default:
      consumeT(119);                // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consumeT(39);                 // 'content'
    }
  }

  function parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      consume(82);                  // 'using'
      lookahead1W(181);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      whitespace();
      parse_FTMatchOption();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 82)                 // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  function try_FTMatchOptions()
  {
    for (;;)
    {
      consumeT(82);                 // 'using'
      lookahead1W(181);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      try_FTMatchOption();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 82)                 // 'using'
      {
        break;
      }
    }
  }

  function parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    lk = predict(20);
    switch (lk)
    {
    case 1:
      parse_FTLanguageOption();
      break;
    case 2:
      parse_FTWildCardOption();
      break;
    case 3:
      parse_FTThesaurusOption();
      break;
    case 4:
      parse_FTStemOption();
      break;
    case 5:
      parse_FTDiacriticsOption();
      break;
    case 6:
      parse_FTStopWordOption();
      break;
    case 7:
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  function try_FTMatchOption()
  {
    lk = predict(20);
    switch (lk)
    {
    case 1:
      try_FTLanguageOption();
      break;
    case 2:
      try_FTWildCardOption();
      break;
    case 3:
      try_FTThesaurusOption();
      break;
    case 4:
      try_FTStemOption();
      break;
    case 5:
      try_FTDiacriticsOption();
      break;
    case 6:
      try_FTStopWordOption();
      break;
    case 7:
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  function parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 165:                       // 'case'
      consume(165);                 // 'case'
      lookahead1W(124);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 51:                      // 'insensitive'
        consume(51);                // 'insensitive'
        break;
      default:
        consume(75);                // 'sensitive'
      }
      break;
    case 56:                        // 'lowercase'
      consume(56);                  // 'lowercase'
      break;
    default:
      consume(81);                  // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  function try_FTCaseOption()
  {
    switch (l1)
    {
    case 165:                       // 'case'
      consumeT(165);                // 'case'
      lookahead1W(124);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 51:                      // 'insensitive'
        consumeT(51);               // 'insensitive'
        break;
      default:
        consumeT(75);               // 'sensitive'
      }
      break;
    case 56:                        // 'lowercase'
      consumeT(56);                 // 'lowercase'
      break;
    default:
      consumeT(81);                 // 'uppercase'
    }
  }

  function parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    consume(116);                   // 'diacritics'
    lookahead1W(124);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 51:                        // 'insensitive'
      consume(51);                  // 'insensitive'
      break;
    default:
      consume(75);                  // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  function try_FTDiacriticsOption()
  {
    consumeT(116);                  // 'diacritics'
    lookahead1W(124);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 51:                        // 'insensitive'
      consumeT(51);                 // 'insensitive'
      break;
    default:
      consumeT(75);                 // 'sensitive'
    }
  }

  function parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 126:                       // 'stemming'
      consume(126);                 // 'stemming'
      break;
    default:
      consume(234);                 // 'no'
      lookahead1W(74);              // S^WS | '(:' | 'stemming'
      consume(126);                 // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  function try_FTStemOption()
  {
    switch (l1)
    {
    case 126:                       // 'stemming'
      consumeT(126);                // 'stemming'
      break;
    default:
      consumeT(234);                // 'no'
      lookahead1W(74);              // S^WS | '(:' | 'stemming'
      consumeT(126);                // 'stemming'
    }
  }

  function parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 129:                       // 'thesaurus'
      consume(129);                 // 'thesaurus'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 159:                     // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 181:                     // 'default'
        consume(181);               // 'default'
        break;
      default:
        consume(92);                // '('
        lookahead1W(112);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 159:                   // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          consume(181);             // 'default'
        }
        for (;;)
        {
          lookahead1W(101);         // S^WS | '(:' | ')' | ','
          if (l1 != 97)             // ','
          {
            break;
          }
          consume(97);              // ','
          lookahead1W(31);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        consume(94);                // ')'
      }
      break;
    default:
      consume(234);                 // 'no'
      lookahead1W(78);              // S^WS | '(:' | 'thesaurus'
      consume(129);                 // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  function try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 129:                       // 'thesaurus'
      consumeT(129);                // 'thesaurus'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 159:                     // 'at'
        try_FTThesaurusID();
        break;
      case 181:                     // 'default'
        consumeT(181);              // 'default'
        break;
      default:
        consumeT(92);               // '('
        lookahead1W(112);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 159:                   // 'at'
          try_FTThesaurusID();
          break;
        default:
          consumeT(181);            // 'default'
        }
        for (;;)
        {
          lookahead1W(101);         // S^WS | '(:' | ')' | ','
          if (l1 != 97)             // ','
          {
            break;
          }
          consumeT(97);             // ','
          lookahead1W(31);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        consumeT(94);               // ')'
      }
      break;
    default:
      consumeT(234);                // 'no'
      lookahead1W(78);              // S^WS | '(:' | 'thesaurus'
      consumeT(129);                // 'thesaurus'
    }
  }

  function parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    consume(159);                   // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(5);                     // URILiteral
    lookahead1W(220);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 74)                   // 'relationship'
    {
      consume(74);                  // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(144);                 // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    lk = predict(21);
    if (lk == 1)
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(58);              // S^WS | '(:' | 'levels'
      consume(55);                  // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  function try_FTThesaurusID()
  {
    consumeT(159);                  // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consumeT(5);                    // URILiteral
    lookahead1W(220);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 74)                   // 'relationship'
    {
      consumeT(74);                 // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consumeT(144);                // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    lk = predict(21);
    if (lk == 1)
    {
      try_FTLiteralRange();
      lookahead1W(58);              // S^WS | '(:' | 'levels'
      consumeT(55);                 // 'levels'
    }
  }

  function parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 120:                       // 'exactly'
      consume(120);                 // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consume(141);                 // IntegerLiteral
      break;
    case 159:                       // 'at'
      consume(159);                 // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 54:                      // 'least'
        consume(54);                // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consume(141);               // IntegerLiteral
        break;
      default:
        consume(58);                // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consume(141);               // IntegerLiteral
      }
      break;
    default:
      consume(121);                 // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consume(141);                 // IntegerLiteral
      lookahead1W(79);              // S^WS | '(:' | 'to'
      consume(266);                 // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consume(141);                 // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  function try_FTLiteralRange()
  {
    switch (l1)
    {
    case 120:                       // 'exactly'
      consumeT(120);                // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consumeT(141);                // IntegerLiteral
      break;
    case 159:                       // 'at'
      consumeT(159);                // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 54:                      // 'least'
        consumeT(54);               // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consumeT(141);              // IntegerLiteral
        break;
      default:
        consumeT(58);               // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consumeT(141);              // IntegerLiteral
      }
      break;
    default:
      consumeT(121);                // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consumeT(141);                // IntegerLiteral
      lookahead1W(79);              // S^WS | '(:' | 'to'
      consumeT(266);                // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consumeT(141);                // IntegerLiteral
    }
  }

  function parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 127:                       // 'stop'
      consume(127);                 // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consume(133);                 // 'words'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 181:                     // 'default'
        consume(181);               // 'default'
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 197             // 'except'
           && l1 != 272)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 197             // 'except'
           && l1 != 272)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consume(234);                 // 'no'
      lookahead1W(75);              // S^WS | '(:' | 'stop'
      consume(127);                 // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consume(133);                 // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  function try_FTStopWordOption()
  {
    switch (l1)
    {
    case 127:                       // 'stop'
      consumeT(127);                // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consumeT(133);                // 'words'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 181:                     // 'default'
        consumeT(181);              // 'default'
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 197             // 'except'
           && l1 != 272)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 197             // 'except'
           && l1 != 272)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consumeT(234);                // 'no'
      lookahead1W(75);              // S^WS | '(:' | 'stop'
      consumeT(127);                // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consumeT(133);                // 'words'
    }
  }

  function parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 159:                       // 'at'
      consume(159);                 // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(5);                   // URILiteral
      break;
    default:
      consume(92);                  // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(144);                 // StringLiteral
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 97)               // ','
        {
          break;
        }
        consume(97);                // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        consume(144);               // StringLiteral
      }
      consume(94);                  // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  function try_FTStopWords()
  {
    switch (l1)
    {
    case 159:                       // 'at'
      consumeT(159);                // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consumeT(5);                  // URILiteral
      break;
    default:
      consumeT(92);                 // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consumeT(144);                // StringLiteral
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 97)               // ','
        {
          break;
        }
        consumeT(97);               // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        consumeT(144);              // StringLiteral
      }
      consumeT(94);                 // ')'
    }
  }

  function parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 272:                       // 'union'
      consume(272);                 // 'union'
      break;
    default:
      consume(197);                 // 'except'
    }
    lookahead1W(99);                // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  function try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 272:                       // 'union'
      consumeT(272);                // 'union'
      break;
    default:
      consumeT(197);                // 'except'
    }
    lookahead1W(99);                // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  function parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    consume(122);                   // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consume(144);                   // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  function try_FTLanguageOption()
  {
    consumeT(122);                  // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consumeT(144);                  // StringLiteral
  }

  function parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 131:                       // 'wildcards'
      consume(131);                 // 'wildcards'
      break;
    default:
      consume(234);                 // 'no'
      lookahead1W(84);              // S^WS | '(:' | 'wildcards'
      consume(131);                 // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  function try_FTWildCardOption()
  {
    switch (l1)
    {
    case 131:                       // 'wildcards'
      consumeT(131);                // 'wildcards'
      break;
    default:
      consumeT(234);                // 'no'
      lookahead1W(84);              // S^WS | '(:' | 'wildcards'
      consumeT(131);                // 'wildcards'
    }
  }

  function parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    consume(239);                   // 'option'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consume(144);                   // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  function try_FTExtensionOption()
  {
    consumeT(239);                  // 'option'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consumeT(144);                  // StringLiteral
  }

  function parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    consume(85);                    // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consume(39);                    // 'content'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  function try_FTIgnoreOption()
  {
    consumeT(85);                   // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consumeT(39);                   // 'content'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_UnionExpr();
  }

  function parse_CollectionDecl()
  {
    eventHandler.startNonterminal("CollectionDecl", e0);
    consume(38);                    // 'collection'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(107);               // S^WS | '(:' | ';' | 'as'
    if (l1 == 157)                  // 'as'
    {
      whitespace();
      parse_CollectionTypeDecl();
    }
    eventHandler.endNonterminal("CollectionDecl", e0);
  }

  function parse_CollectionTypeDecl()
  {
    eventHandler.startNonterminal("CollectionTypeDecl", e0);
    consume(157);                   // 'as'
    lookahead1W(183);               // S^WS | '(:' | 'array' | 'attribute' | 'comment' | 'document-node' | 'element' |
                                    // 'json-item' | 'namespace-node' | 'node' | 'object' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'text'
    whitespace();
    parse_KindTest();
    lookahead1W(156);               // S^WS | '(:' | '*' | '+' | ';' | '?'
    if (l1 != 101)                  // ';'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("CollectionTypeDecl", e0);
  }

  function parse_IndexName()
  {
    eventHandler.startNonterminal("IndexName", e0);
    parse_EQName();
    eventHandler.endNonterminal("IndexName", e0);
  }

  function parse_IndexDomainExpr()
  {
    eventHandler.startNonterminal("IndexDomainExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexDomainExpr", e0);
  }

  function parse_IndexKeySpec()
  {
    eventHandler.startNonterminal("IndexKeySpec", e0);
    parse_IndexKeyExpr();
    if (l1 == 157)                  // 'as'
    {
      whitespace();
      parse_IndexKeyTypeDecl();
    }
    lookahead1W(146);               // S^WS | '(:' | ',' | ';' | 'collation'
    if (l1 == 170)                  // 'collation'
    {
      whitespace();
      parse_IndexKeyCollation();
    }
    eventHandler.endNonterminal("IndexKeySpec", e0);
  }

  function parse_IndexKeyExpr()
  {
    eventHandler.startNonterminal("IndexKeyExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexKeyExpr", e0);
  }

  function parse_IndexKeyTypeDecl()
  {
    eventHandler.startNonterminal("IndexKeyTypeDecl", e0);
    consume(157);                   // 'as'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_AtomicType();
    lookahead1W(169);               // S^WS | '(:' | '*' | '+' | ',' | ';' | '?' | 'collation'
    if (l1 == 24                    // '*'
     || l1 == 96                    // '+'
     || l1 == 31)                   // '?'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("IndexKeyTypeDecl", e0);
  }

  function parse_AtomicType()
  {
    eventHandler.startNonterminal("AtomicType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicType", e0);
  }

  function parse_IndexKeyCollation()
  {
    eventHandler.startNonterminal("IndexKeyCollation", e0);
    consume(170);                   // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(5);                     // URILiteral
    eventHandler.endNonterminal("IndexKeyCollation", e0);
  }

  function parse_IndexDecl()
  {
    eventHandler.startNonterminal("IndexDecl", e0);
    consume(213);                   // 'index'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_IndexName();
    lookahead1W(65);                // S^WS | '(:' | 'on'
    consume(65);                    // 'on'
    lookahead1W(63);                // S^WS | '(:' | 'nodes'
    consume(236);                   // 'nodes'
    lookahead1W(265);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexDomainExpr();
    consume(114);                   // 'by'
    lookahead1W(265);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexKeySpec();
    for (;;)
    {
      lookahead1W(103);             // S^WS | '(:' | ',' | ';'
      if (l1 != 97)                 // ','
      {
        break;
      }
      consume(97);                  // ','
      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_IndexKeySpec();
    }
    eventHandler.endNonterminal("IndexDecl", e0);
  }

  function parse_ICDecl()
  {
    eventHandler.startNonterminal("ICDecl", e0);
    consume(216);                   // 'integrity'
    lookahead1W(40);                // S^WS | '(:' | 'constraint'
    consume(172);                   // 'constraint'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(120);               // S^WS | '(:' | 'foreign' | 'on'
    switch (l1)
    {
    case 65:                        // 'on'
      whitespace();
      parse_ICCollection();
      break;
    default:
      whitespace();
      parse_ICForeignKey();
    }
    eventHandler.endNonterminal("ICDecl", e0);
  }

  function parse_ICCollection()
  {
    eventHandler.startNonterminal("ICCollection", e0);
    consume(65);                    // 'on'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    consume(38);                    // 'collection'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(140);               // S^WS | '$' | '(:' | 'foreach' | 'node'
    switch (l1)
    {
    case 146:                       // '$'
      whitespace();
      parse_ICCollSequence();
      break;
    case 235:                       // 'node'
      whitespace();
      parse_ICCollSequenceUnique();
      break;
    default:
      whitespace();
      parse_ICCollNode();
    }
    eventHandler.endNonterminal("ICCollection", e0);
  }

  function parse_ICCollSequence()
  {
    eventHandler.startNonterminal("ICCollSequence", e0);
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    consume(37);                    // 'check'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollSequence", e0);
  }

  function parse_ICCollSequenceUnique()
  {
    eventHandler.startNonterminal("ICCollSequenceUnique", e0);
    consume(235);                   // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    consume(37);                    // 'check'
    lookahead1W(80);                // S^WS | '(:' | 'unique'
    consume(80);                    // 'unique'
    lookahead1W(57);                // S^WS | '(:' | 'key'
    consume(53);                    // 'key'
    lookahead1W(265);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICCollSequenceUnique", e0);
  }

  function parse_ICCollNode()
  {
    eventHandler.startNonterminal("ICCollNode", e0);
    consume(42);                    // 'foreach'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(235);                   // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    consume(37);                    // 'check'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollNode", e0);
  }

  function parse_ICForeignKey()
  {
    eventHandler.startNonterminal("ICForeignKey", e0);
    consume(43);                    // 'foreign'
    lookahead1W(57);                // S^WS | '(:' | 'key'
    consume(53);                    // 'key'
    lookahead1W(51);                // S^WS | '(:' | 'from'
    whitespace();
    parse_ICForeignKeySource();
    whitespace();
    parse_ICForeignKeyTarget();
    eventHandler.endNonterminal("ICForeignKey", e0);
  }

  function parse_ICForeignKeySource()
  {
    eventHandler.startNonterminal("ICForeignKeySource", e0);
    consume(121);                   // 'from'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeySource", e0);
  }

  function parse_ICForeignKeyTarget()
  {
    eventHandler.startNonterminal("ICForeignKeyTarget", e0);
    consume(266);                   // 'to'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeyTarget", e0);
  }

  function parse_ICForeignKeyValues()
  {
    eventHandler.startNonterminal("ICForeignKeyValues", e0);
    consume(38);                    // 'collection'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(235);                   // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(57);                // S^WS | '(:' | 'key'
    consume(53);                    // 'key'
    lookahead1W(265);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICForeignKeyValues", e0);
  }

  function try_Comment()
  {
    consumeT(23);                   // '(:'
    for (;;)
    {
      lookahead1(89);               // CommentContents | '(:' | ':)'
      if (l1 == 27)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 18:                      // CommentContents
        consumeT(18);               // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    consumeT(27);                   // ':)'
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 16:                        // S^WS
      consumeT(16);                 // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(247);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 160:                       // 'attribute'
      consume(160);                 // 'attribute'
      break;
    case 171:                       // 'comment'
      consume(171);                 // 'comment'
      break;
    case 188:                       // 'document-node'
      consume(188);                 // 'document-node'
      break;
    case 189:                       // 'element'
      consume(189);                 // 'element'
      break;
    case 192:                       // 'empty-sequence'
      consume(192);                 // 'empty-sequence'
      break;
    case 205:                       // 'function'
      consume(205);                 // 'function'
      break;
    case 210:                       // 'if'
      consume(210);                 // 'if'
      break;
    case 220:                       // 'item'
      consume(220);                 // 'item'
      break;
    case 232:                       // 'namespace-node'
      consume(232);                 // 'namespace-node'
      break;
    case 235:                       // 'node'
      consume(235);                 // 'node'
      break;
    case 247:                       // 'processing-instruction'
      consume(247);                 // 'processing-instruction'
      break;
    case 255:                       // 'schema-attribute'
      consume(255);                 // 'schema-attribute'
      break;
    case 256:                       // 'schema-element'
      consume(256);                 // 'schema-element'
      break;
    case 264:                       // 'switch'
      consume(264);                 // 'switch'
      break;
    case 265:                       // 'text'
      consume(265);                 // 'text'
      break;
    case 271:                       // 'typeswitch'
      consume(271);                 // 'typeswitch'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(247);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 160:                       // 'attribute'
      consumeT(160);                // 'attribute'
      break;
    case 171:                       // 'comment'
      consumeT(171);                // 'comment'
      break;
    case 188:                       // 'document-node'
      consumeT(188);                // 'document-node'
      break;
    case 189:                       // 'element'
      consumeT(189);                // 'element'
      break;
    case 192:                       // 'empty-sequence'
      consumeT(192);                // 'empty-sequence'
      break;
    case 205:                       // 'function'
      consumeT(205);                // 'function'
      break;
    case 210:                       // 'if'
      consumeT(210);                // 'if'
      break;
    case 220:                       // 'item'
      consumeT(220);                // 'item'
      break;
    case 232:                       // 'namespace-node'
      consumeT(232);                // 'namespace-node'
      break;
    case 235:                       // 'node'
      consumeT(235);                // 'node'
      break;
    case 247:                       // 'processing-instruction'
      consumeT(247);                // 'processing-instruction'
      break;
    case 255:                       // 'schema-attribute'
      consumeT(255);                // 'schema-attribute'
      break;
    case 256:                       // 'schema-element'
      consumeT(256);                // 'schema-element'
      break;
    case 264:                       // 'switch'
      consumeT(264);                // 'switch'
      break;
    case 265:                       // 'text'
      consumeT(265);                // 'text'
      break;
    case 271:                       // 'typeswitch'
      consumeT(271);                // 'typeswitch'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 140:                       // EQName^Token
      consume(140);                 // EQName^Token
      break;
    case 151:                       // 'after'
      consume(151);                 // 'after'
      break;
    case 153:                       // 'ancestor'
      consume(153);                 // 'ancestor'
      break;
    case 154:                       // 'ancestor-or-self'
      consume(154);                 // 'ancestor-or-self'
      break;
    case 155:                       // 'and'
      consume(155);                 // 'and'
      break;
    case 157:                       // 'as'
      consume(157);                 // 'as'
      break;
    case 158:                       // 'ascending'
      consume(158);                 // 'ascending'
      break;
    case 162:                       // 'before'
      consume(162);                 // 'before'
      break;
    case 165:                       // 'case'
      consume(165);                 // 'case'
      break;
    case 166:                       // 'cast'
      consume(166);                 // 'cast'
      break;
    case 167:                       // 'castable'
      consume(167);                 // 'castable'
      break;
    case 169:                       // 'child'
      consume(169);                 // 'child'
      break;
    case 170:                       // 'collation'
      consume(170);                 // 'collation'
      break;
    case 176:                       // 'copy'
      consume(176);                 // 'copy'
      break;
    case 178:                       // 'count'
      consume(178);                 // 'count'
      break;
    case 180:                       // 'declare'
      consume(180);                 // 'declare'
      break;
    case 181:                       // 'default'
      consume(181);                 // 'default'
      break;
    case 182:                       // 'delete'
      consume(182);                 // 'delete'
      break;
    case 183:                       // 'descendant'
      consume(183);                 // 'descendant'
      break;
    case 184:                       // 'descendant-or-self'
      consume(184);                 // 'descendant-or-self'
      break;
    case 185:                       // 'descending'
      consume(185);                 // 'descending'
      break;
    case 186:                       // 'div'
      consume(186);                 // 'div'
      break;
    case 187:                       // 'document'
      consume(187);                 // 'document'
      break;
    case 190:                       // 'else'
      consume(190);                 // 'else'
      break;
    case 191:                       // 'empty'
      consume(191);                 // 'empty'
      break;
    case 194:                       // 'end'
      consume(194);                 // 'end'
      break;
    case 195:                       // 'eq'
      consume(195);                 // 'eq'
      break;
    case 196:                       // 'every'
      consume(196);                 // 'every'
      break;
    case 197:                       // 'except'
      consume(197);                 // 'except'
      break;
    case 200:                       // 'first'
      consume(200);                 // 'first'
      break;
    case 201:                       // 'following'
      consume(201);                 // 'following'
      break;
    case 202:                       // 'following-sibling'
      consume(202);                 // 'following-sibling'
      break;
    case 203:                       // 'for'
      consume(203);                 // 'for'
      break;
    case 206:                       // 'ge'
      consume(206);                 // 'ge'
      break;
    case 207:                       // 'group'
      consume(207);                 // 'group'
      break;
    case 208:                       // 'gt'
      consume(208);                 // 'gt'
      break;
    case 209:                       // 'idiv'
      consume(209);                 // 'idiv'
      break;
    case 211:                       // 'import'
      consume(211);                 // 'import'
      break;
    case 214:                       // 'insert'
      consume(214);                 // 'insert'
      break;
    case 215:                       // 'instance'
      consume(215);                 // 'instance'
      break;
    case 217:                       // 'intersect'
      consume(217);                 // 'intersect'
      break;
    case 218:                       // 'into'
      consume(218);                 // 'into'
      break;
    case 219:                       // 'is'
      consume(219);                 // 'is'
      break;
    case 222:                       // 'last'
      consume(222);                 // 'last'
      break;
    case 224:                       // 'le'
      consume(224);                 // 'le'
      break;
    case 225:                       // 'let'
      consume(225);                 // 'let'
      break;
    case 227:                       // 'lt'
      consume(227);                 // 'lt'
      break;
    case 228:                       // 'mod'
      consume(228);                 // 'mod'
      break;
    case 229:                       // 'modify'
      consume(229);                 // 'modify'
      break;
    case 230:                       // 'module'
      consume(230);                 // 'module'
      break;
    case 231:                       // 'namespace'
      consume(231);                 // 'namespace'
      break;
    case 233:                       // 'ne'
      consume(233);                 // 'ne'
      break;
    case 238:                       // 'only'
      consume(238);                 // 'only'
      break;
    case 240:                       // 'or'
      consume(240);                 // 'or'
      break;
    case 241:                       // 'order'
      consume(241);                 // 'order'
      break;
    case 242:                       // 'ordered'
      consume(242);                 // 'ordered'
      break;
    case 244:                       // 'parent'
      consume(244);                 // 'parent'
      break;
    case 245:                       // 'preceding'
      consume(245);                 // 'preceding'
      break;
    case 246:                       // 'preceding-sibling'
      consume(246);                 // 'preceding-sibling'
      break;
    case 248:                       // 'rename'
      consume(248);                 // 'rename'
      break;
    case 249:                       // 'replace'
      consume(249);                 // 'replace'
      break;
    case 250:                       // 'return'
      consume(250);                 // 'return'
      break;
    case 253:                       // 'satisfies'
      consume(253);                 // 'satisfies'
      break;
    case 258:                       // 'self'
      consume(258);                 // 'self'
      break;
    case 260:                       // 'some'
      consume(260);                 // 'some'
      break;
    case 261:                       // 'stable'
      consume(261);                 // 'stable'
      break;
    case 262:                       // 'start'
      consume(262);                 // 'start'
      break;
    case 266:                       // 'to'
      consume(266);                 // 'to'
      break;
    case 267:                       // 'treat'
      consume(267);                 // 'treat'
      break;
    case 268:                       // 'try'
      consume(268);                 // 'try'
      break;
    case 272:                       // 'union'
      consume(272);                 // 'union'
      break;
    case 273:                       // 'unordered'
      consume(273);                 // 'unordered'
      break;
    case 275:                       // 'validate'
      consume(275);                 // 'validate'
      break;
    case 279:                       // 'where'
      consume(279);                 // 'where'
      break;
    case 281:                       // 'with'
      consume(281);                 // 'with'
      break;
    case 282:                       // 'xquery'
      consume(282);                 // 'xquery'
      break;
    case 152:                       // 'allowing'
      consume(152);                 // 'allowing'
      break;
    case 159:                       // 'at'
      consume(159);                 // 'at'
      break;
    case 161:                       // 'base-uri'
      consume(161);                 // 'base-uri'
      break;
    case 163:                       // 'boundary-space'
      consume(163);                 // 'boundary-space'
      break;
    case 164:                       // 'break'
      consume(164);                 // 'break'
      break;
    case 168:                       // 'catch'
      consume(168);                 // 'catch'
      break;
    case 173:                       // 'construction'
      consume(173);                 // 'construction'
      break;
    case 174:                       // 'context'
      consume(174);                 // 'context'
      break;
    case 175:                       // 'continue'
      consume(175);                 // 'continue'
      break;
    case 177:                       // 'copy-namespaces'
      consume(177);                 // 'copy-namespaces'
      break;
    case 179:                       // 'decimal-format'
      consume(179);                 // 'decimal-format'
      break;
    case 193:                       // 'encoding'
      consume(193);                 // 'encoding'
      break;
    case 198:                       // 'exit'
      consume(198);                 // 'exit'
      break;
    case 199:                       // 'external'
      consume(199);                 // 'external'
      break;
    case 204:                       // 'ft-option'
      consume(204);                 // 'ft-option'
      break;
    case 212:                       // 'in'
      consume(212);                 // 'in'
      break;
    case 213:                       // 'index'
      consume(213);                 // 'index'
      break;
    case 216:                       // 'integrity'
      consume(216);                 // 'integrity'
      break;
    case 223:                       // 'lax'
      consume(223);                 // 'lax'
      break;
    case 236:                       // 'nodes'
      consume(236);                 // 'nodes'
      break;
    case 239:                       // 'option'
      consume(239);                 // 'option'
      break;
    case 243:                       // 'ordering'
      consume(243);                 // 'ordering'
      break;
    case 252:                       // 'revalidation'
      consume(252);                 // 'revalidation'
      break;
    case 254:                       // 'schema'
      consume(254);                 // 'schema'
      break;
    case 257:                       // 'score'
      consume(257);                 // 'score'
      break;
    case 259:                       // 'sliding'
      consume(259);                 // 'sliding'
      break;
    case 263:                       // 'strict'
      consume(263);                 // 'strict'
      break;
    case 269:                       // 'tumbling'
      consume(269);                 // 'tumbling'
      break;
    case 270:                       // 'type'
      consume(270);                 // 'type'
      break;
    case 274:                       // 'updating'
      consume(274);                 // 'updating'
      break;
    case 276:                       // 'value'
      consume(276);                 // 'value'
      break;
    case 277:                       // 'variable'
      consume(277);                 // 'variable'
      break;
    case 278:                       // 'version'
      consume(278);                 // 'version'
      break;
    case 280:                       // 'while'
      consume(280);                 // 'while'
      break;
    case 172:                       // 'constraint'
      consume(172);                 // 'constraint'
      break;
    case 226:                       // 'loop'
      consume(226);                 // 'loop'
      break;
    default:
      consume(251);                 // 'returning'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 140:                       // EQName^Token
      consumeT(140);                // EQName^Token
      break;
    case 151:                       // 'after'
      consumeT(151);                // 'after'
      break;
    case 153:                       // 'ancestor'
      consumeT(153);                // 'ancestor'
      break;
    case 154:                       // 'ancestor-or-self'
      consumeT(154);                // 'ancestor-or-self'
      break;
    case 155:                       // 'and'
      consumeT(155);                // 'and'
      break;
    case 157:                       // 'as'
      consumeT(157);                // 'as'
      break;
    case 158:                       // 'ascending'
      consumeT(158);                // 'ascending'
      break;
    case 162:                       // 'before'
      consumeT(162);                // 'before'
      break;
    case 165:                       // 'case'
      consumeT(165);                // 'case'
      break;
    case 166:                       // 'cast'
      consumeT(166);                // 'cast'
      break;
    case 167:                       // 'castable'
      consumeT(167);                // 'castable'
      break;
    case 169:                       // 'child'
      consumeT(169);                // 'child'
      break;
    case 170:                       // 'collation'
      consumeT(170);                // 'collation'
      break;
    case 176:                       // 'copy'
      consumeT(176);                // 'copy'
      break;
    case 178:                       // 'count'
      consumeT(178);                // 'count'
      break;
    case 180:                       // 'declare'
      consumeT(180);                // 'declare'
      break;
    case 181:                       // 'default'
      consumeT(181);                // 'default'
      break;
    case 182:                       // 'delete'
      consumeT(182);                // 'delete'
      break;
    case 183:                       // 'descendant'
      consumeT(183);                // 'descendant'
      break;
    case 184:                       // 'descendant-or-self'
      consumeT(184);                // 'descendant-or-self'
      break;
    case 185:                       // 'descending'
      consumeT(185);                // 'descending'
      break;
    case 186:                       // 'div'
      consumeT(186);                // 'div'
      break;
    case 187:                       // 'document'
      consumeT(187);                // 'document'
      break;
    case 190:                       // 'else'
      consumeT(190);                // 'else'
      break;
    case 191:                       // 'empty'
      consumeT(191);                // 'empty'
      break;
    case 194:                       // 'end'
      consumeT(194);                // 'end'
      break;
    case 195:                       // 'eq'
      consumeT(195);                // 'eq'
      break;
    case 196:                       // 'every'
      consumeT(196);                // 'every'
      break;
    case 197:                       // 'except'
      consumeT(197);                // 'except'
      break;
    case 200:                       // 'first'
      consumeT(200);                // 'first'
      break;
    case 201:                       // 'following'
      consumeT(201);                // 'following'
      break;
    case 202:                       // 'following-sibling'
      consumeT(202);                // 'following-sibling'
      break;
    case 203:                       // 'for'
      consumeT(203);                // 'for'
      break;
    case 206:                       // 'ge'
      consumeT(206);                // 'ge'
      break;
    case 207:                       // 'group'
      consumeT(207);                // 'group'
      break;
    case 208:                       // 'gt'
      consumeT(208);                // 'gt'
      break;
    case 209:                       // 'idiv'
      consumeT(209);                // 'idiv'
      break;
    case 211:                       // 'import'
      consumeT(211);                // 'import'
      break;
    case 214:                       // 'insert'
      consumeT(214);                // 'insert'
      break;
    case 215:                       // 'instance'
      consumeT(215);                // 'instance'
      break;
    case 217:                       // 'intersect'
      consumeT(217);                // 'intersect'
      break;
    case 218:                       // 'into'
      consumeT(218);                // 'into'
      break;
    case 219:                       // 'is'
      consumeT(219);                // 'is'
      break;
    case 222:                       // 'last'
      consumeT(222);                // 'last'
      break;
    case 224:                       // 'le'
      consumeT(224);                // 'le'
      break;
    case 225:                       // 'let'
      consumeT(225);                // 'let'
      break;
    case 227:                       // 'lt'
      consumeT(227);                // 'lt'
      break;
    case 228:                       // 'mod'
      consumeT(228);                // 'mod'
      break;
    case 229:                       // 'modify'
      consumeT(229);                // 'modify'
      break;
    case 230:                       // 'module'
      consumeT(230);                // 'module'
      break;
    case 231:                       // 'namespace'
      consumeT(231);                // 'namespace'
      break;
    case 233:                       // 'ne'
      consumeT(233);                // 'ne'
      break;
    case 238:                       // 'only'
      consumeT(238);                // 'only'
      break;
    case 240:                       // 'or'
      consumeT(240);                // 'or'
      break;
    case 241:                       // 'order'
      consumeT(241);                // 'order'
      break;
    case 242:                       // 'ordered'
      consumeT(242);                // 'ordered'
      break;
    case 244:                       // 'parent'
      consumeT(244);                // 'parent'
      break;
    case 245:                       // 'preceding'
      consumeT(245);                // 'preceding'
      break;
    case 246:                       // 'preceding-sibling'
      consumeT(246);                // 'preceding-sibling'
      break;
    case 248:                       // 'rename'
      consumeT(248);                // 'rename'
      break;
    case 249:                       // 'replace'
      consumeT(249);                // 'replace'
      break;
    case 250:                       // 'return'
      consumeT(250);                // 'return'
      break;
    case 253:                       // 'satisfies'
      consumeT(253);                // 'satisfies'
      break;
    case 258:                       // 'self'
      consumeT(258);                // 'self'
      break;
    case 260:                       // 'some'
      consumeT(260);                // 'some'
      break;
    case 261:                       // 'stable'
      consumeT(261);                // 'stable'
      break;
    case 262:                       // 'start'
      consumeT(262);                // 'start'
      break;
    case 266:                       // 'to'
      consumeT(266);                // 'to'
      break;
    case 267:                       // 'treat'
      consumeT(267);                // 'treat'
      break;
    case 268:                       // 'try'
      consumeT(268);                // 'try'
      break;
    case 272:                       // 'union'
      consumeT(272);                // 'union'
      break;
    case 273:                       // 'unordered'
      consumeT(273);                // 'unordered'
      break;
    case 275:                       // 'validate'
      consumeT(275);                // 'validate'
      break;
    case 279:                       // 'where'
      consumeT(279);                // 'where'
      break;
    case 281:                       // 'with'
      consumeT(281);                // 'with'
      break;
    case 282:                       // 'xquery'
      consumeT(282);                // 'xquery'
      break;
    case 152:                       // 'allowing'
      consumeT(152);                // 'allowing'
      break;
    case 159:                       // 'at'
      consumeT(159);                // 'at'
      break;
    case 161:                       // 'base-uri'
      consumeT(161);                // 'base-uri'
      break;
    case 163:                       // 'boundary-space'
      consumeT(163);                // 'boundary-space'
      break;
    case 164:                       // 'break'
      consumeT(164);                // 'break'
      break;
    case 168:                       // 'catch'
      consumeT(168);                // 'catch'
      break;
    case 173:                       // 'construction'
      consumeT(173);                // 'construction'
      break;
    case 174:                       // 'context'
      consumeT(174);                // 'context'
      break;
    case 175:                       // 'continue'
      consumeT(175);                // 'continue'
      break;
    case 177:                       // 'copy-namespaces'
      consumeT(177);                // 'copy-namespaces'
      break;
    case 179:                       // 'decimal-format'
      consumeT(179);                // 'decimal-format'
      break;
    case 193:                       // 'encoding'
      consumeT(193);                // 'encoding'
      break;
    case 198:                       // 'exit'
      consumeT(198);                // 'exit'
      break;
    case 199:                       // 'external'
      consumeT(199);                // 'external'
      break;
    case 204:                       // 'ft-option'
      consumeT(204);                // 'ft-option'
      break;
    case 212:                       // 'in'
      consumeT(212);                // 'in'
      break;
    case 213:                       // 'index'
      consumeT(213);                // 'index'
      break;
    case 216:                       // 'integrity'
      consumeT(216);                // 'integrity'
      break;
    case 223:                       // 'lax'
      consumeT(223);                // 'lax'
      break;
    case 236:                       // 'nodes'
      consumeT(236);                // 'nodes'
      break;
    case 239:                       // 'option'
      consumeT(239);                // 'option'
      break;
    case 243:                       // 'ordering'
      consumeT(243);                // 'ordering'
      break;
    case 252:                       // 'revalidation'
      consumeT(252);                // 'revalidation'
      break;
    case 254:                       // 'schema'
      consumeT(254);                // 'schema'
      break;
    case 257:                       // 'score'
      consumeT(257);                // 'score'
      break;
    case 259:                       // 'sliding'
      consumeT(259);                // 'sliding'
      break;
    case 263:                       // 'strict'
      consumeT(263);                // 'strict'
      break;
    case 269:                       // 'tumbling'
      consumeT(269);                // 'tumbling'
      break;
    case 270:                       // 'type'
      consumeT(270);                // 'type'
      break;
    case 274:                       // 'updating'
      consumeT(274);                // 'updating'
      break;
    case 276:                       // 'value'
      consumeT(276);                // 'value'
      break;
    case 277:                       // 'variable'
      consumeT(277);                // 'variable'
      break;
    case 278:                       // 'version'
      consumeT(278);                // 'version'
      break;
    case 280:                       // 'while'
      consumeT(280);                // 'while'
      break;
    case 172:                       // 'constraint'
      consumeT(172);                // 'constraint'
      break;
    case 226:                       // 'loop'
      consumeT(226);                // 'loop'
      break;
    default:
      consumeT(251);                // 'returning'
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 13:                        // NCName^Token
      consume(13);                  // NCName^Token
      break;
    case 151:                       // 'after'
      consume(151);                 // 'after'
      break;
    case 155:                       // 'and'
      consume(155);                 // 'and'
      break;
    case 157:                       // 'as'
      consume(157);                 // 'as'
      break;
    case 158:                       // 'ascending'
      consume(158);                 // 'ascending'
      break;
    case 162:                       // 'before'
      consume(162);                 // 'before'
      break;
    case 165:                       // 'case'
      consume(165);                 // 'case'
      break;
    case 166:                       // 'cast'
      consume(166);                 // 'cast'
      break;
    case 167:                       // 'castable'
      consume(167);                 // 'castable'
      break;
    case 170:                       // 'collation'
      consume(170);                 // 'collation'
      break;
    case 178:                       // 'count'
      consume(178);                 // 'count'
      break;
    case 181:                       // 'default'
      consume(181);                 // 'default'
      break;
    case 185:                       // 'descending'
      consume(185);                 // 'descending'
      break;
    case 186:                       // 'div'
      consume(186);                 // 'div'
      break;
    case 190:                       // 'else'
      consume(190);                 // 'else'
      break;
    case 191:                       // 'empty'
      consume(191);                 // 'empty'
      break;
    case 194:                       // 'end'
      consume(194);                 // 'end'
      break;
    case 195:                       // 'eq'
      consume(195);                 // 'eq'
      break;
    case 197:                       // 'except'
      consume(197);                 // 'except'
      break;
    case 203:                       // 'for'
      consume(203);                 // 'for'
      break;
    case 206:                       // 'ge'
      consume(206);                 // 'ge'
      break;
    case 207:                       // 'group'
      consume(207);                 // 'group'
      break;
    case 208:                       // 'gt'
      consume(208);                 // 'gt'
      break;
    case 209:                       // 'idiv'
      consume(209);                 // 'idiv'
      break;
    case 215:                       // 'instance'
      consume(215);                 // 'instance'
      break;
    case 217:                       // 'intersect'
      consume(217);                 // 'intersect'
      break;
    case 218:                       // 'into'
      consume(218);                 // 'into'
      break;
    case 219:                       // 'is'
      consume(219);                 // 'is'
      break;
    case 224:                       // 'le'
      consume(224);                 // 'le'
      break;
    case 225:                       // 'let'
      consume(225);                 // 'let'
      break;
    case 227:                       // 'lt'
      consume(227);                 // 'lt'
      break;
    case 228:                       // 'mod'
      consume(228);                 // 'mod'
      break;
    case 229:                       // 'modify'
      consume(229);                 // 'modify'
      break;
    case 233:                       // 'ne'
      consume(233);                 // 'ne'
      break;
    case 238:                       // 'only'
      consume(238);                 // 'only'
      break;
    case 240:                       // 'or'
      consume(240);                 // 'or'
      break;
    case 241:                       // 'order'
      consume(241);                 // 'order'
      break;
    case 250:                       // 'return'
      consume(250);                 // 'return'
      break;
    case 253:                       // 'satisfies'
      consume(253);                 // 'satisfies'
      break;
    case 261:                       // 'stable'
      consume(261);                 // 'stable'
      break;
    case 262:                       // 'start'
      consume(262);                 // 'start'
      break;
    case 266:                       // 'to'
      consume(266);                 // 'to'
      break;
    case 267:                       // 'treat'
      consume(267);                 // 'treat'
      break;
    case 272:                       // 'union'
      consume(272);                 // 'union'
      break;
    case 279:                       // 'where'
      consume(279);                 // 'where'
      break;
    case 281:                       // 'with'
      consume(281);                 // 'with'
      break;
    case 153:                       // 'ancestor'
      consume(153);                 // 'ancestor'
      break;
    case 154:                       // 'ancestor-or-self'
      consume(154);                 // 'ancestor-or-self'
      break;
    case 160:                       // 'attribute'
      consume(160);                 // 'attribute'
      break;
    case 169:                       // 'child'
      consume(169);                 // 'child'
      break;
    case 171:                       // 'comment'
      consume(171);                 // 'comment'
      break;
    case 176:                       // 'copy'
      consume(176);                 // 'copy'
      break;
    case 180:                       // 'declare'
      consume(180);                 // 'declare'
      break;
    case 182:                       // 'delete'
      consume(182);                 // 'delete'
      break;
    case 183:                       // 'descendant'
      consume(183);                 // 'descendant'
      break;
    case 184:                       // 'descendant-or-self'
      consume(184);                 // 'descendant-or-self'
      break;
    case 187:                       // 'document'
      consume(187);                 // 'document'
      break;
    case 188:                       // 'document-node'
      consume(188);                 // 'document-node'
      break;
    case 189:                       // 'element'
      consume(189);                 // 'element'
      break;
    case 192:                       // 'empty-sequence'
      consume(192);                 // 'empty-sequence'
      break;
    case 196:                       // 'every'
      consume(196);                 // 'every'
      break;
    case 200:                       // 'first'
      consume(200);                 // 'first'
      break;
    case 201:                       // 'following'
      consume(201);                 // 'following'
      break;
    case 202:                       // 'following-sibling'
      consume(202);                 // 'following-sibling'
      break;
    case 205:                       // 'function'
      consume(205);                 // 'function'
      break;
    case 210:                       // 'if'
      consume(210);                 // 'if'
      break;
    case 211:                       // 'import'
      consume(211);                 // 'import'
      break;
    case 214:                       // 'insert'
      consume(214);                 // 'insert'
      break;
    case 220:                       // 'item'
      consume(220);                 // 'item'
      break;
    case 222:                       // 'last'
      consume(222);                 // 'last'
      break;
    case 230:                       // 'module'
      consume(230);                 // 'module'
      break;
    case 231:                       // 'namespace'
      consume(231);                 // 'namespace'
      break;
    case 232:                       // 'namespace-node'
      consume(232);                 // 'namespace-node'
      break;
    case 235:                       // 'node'
      consume(235);                 // 'node'
      break;
    case 242:                       // 'ordered'
      consume(242);                 // 'ordered'
      break;
    case 244:                       // 'parent'
      consume(244);                 // 'parent'
      break;
    case 245:                       // 'preceding'
      consume(245);                 // 'preceding'
      break;
    case 246:                       // 'preceding-sibling'
      consume(246);                 // 'preceding-sibling'
      break;
    case 247:                       // 'processing-instruction'
      consume(247);                 // 'processing-instruction'
      break;
    case 248:                       // 'rename'
      consume(248);                 // 'rename'
      break;
    case 249:                       // 'replace'
      consume(249);                 // 'replace'
      break;
    case 255:                       // 'schema-attribute'
      consume(255);                 // 'schema-attribute'
      break;
    case 256:                       // 'schema-element'
      consume(256);                 // 'schema-element'
      break;
    case 258:                       // 'self'
      consume(258);                 // 'self'
      break;
    case 260:                       // 'some'
      consume(260);                 // 'some'
      break;
    case 264:                       // 'switch'
      consume(264);                 // 'switch'
      break;
    case 265:                       // 'text'
      consume(265);                 // 'text'
      break;
    case 268:                       // 'try'
      consume(268);                 // 'try'
      break;
    case 271:                       // 'typeswitch'
      consume(271);                 // 'typeswitch'
      break;
    case 273:                       // 'unordered'
      consume(273);                 // 'unordered'
      break;
    case 275:                       // 'validate'
      consume(275);                 // 'validate'
      break;
    case 277:                       // 'variable'
      consume(277);                 // 'variable'
      break;
    case 282:                       // 'xquery'
      consume(282);                 // 'xquery'
      break;
    case 152:                       // 'allowing'
      consume(152);                 // 'allowing'
      break;
    case 159:                       // 'at'
      consume(159);                 // 'at'
      break;
    case 161:                       // 'base-uri'
      consume(161);                 // 'base-uri'
      break;
    case 163:                       // 'boundary-space'
      consume(163);                 // 'boundary-space'
      break;
    case 164:                       // 'break'
      consume(164);                 // 'break'
      break;
    case 168:                       // 'catch'
      consume(168);                 // 'catch'
      break;
    case 173:                       // 'construction'
      consume(173);                 // 'construction'
      break;
    case 174:                       // 'context'
      consume(174);                 // 'context'
      break;
    case 175:                       // 'continue'
      consume(175);                 // 'continue'
      break;
    case 177:                       // 'copy-namespaces'
      consume(177);                 // 'copy-namespaces'
      break;
    case 179:                       // 'decimal-format'
      consume(179);                 // 'decimal-format'
      break;
    case 193:                       // 'encoding'
      consume(193);                 // 'encoding'
      break;
    case 198:                       // 'exit'
      consume(198);                 // 'exit'
      break;
    case 199:                       // 'external'
      consume(199);                 // 'external'
      break;
    case 204:                       // 'ft-option'
      consume(204);                 // 'ft-option'
      break;
    case 212:                       // 'in'
      consume(212);                 // 'in'
      break;
    case 213:                       // 'index'
      consume(213);                 // 'index'
      break;
    case 216:                       // 'integrity'
      consume(216);                 // 'integrity'
      break;
    case 223:                       // 'lax'
      consume(223);                 // 'lax'
      break;
    case 236:                       // 'nodes'
      consume(236);                 // 'nodes'
      break;
    case 239:                       // 'option'
      consume(239);                 // 'option'
      break;
    case 243:                       // 'ordering'
      consume(243);                 // 'ordering'
      break;
    case 252:                       // 'revalidation'
      consume(252);                 // 'revalidation'
      break;
    case 254:                       // 'schema'
      consume(254);                 // 'schema'
      break;
    case 257:                       // 'score'
      consume(257);                 // 'score'
      break;
    case 259:                       // 'sliding'
      consume(259);                 // 'sliding'
      break;
    case 263:                       // 'strict'
      consume(263);                 // 'strict'
      break;
    case 269:                       // 'tumbling'
      consume(269);                 // 'tumbling'
      break;
    case 270:                       // 'type'
      consume(270);                 // 'type'
      break;
    case 274:                       // 'updating'
      consume(274);                 // 'updating'
      break;
    case 276:                       // 'value'
      consume(276);                 // 'value'
      break;
    case 278:                       // 'version'
      consume(278);                 // 'version'
      break;
    case 280:                       // 'while'
      consume(280);                 // 'while'
      break;
    case 172:                       // 'constraint'
      consume(172);                 // 'constraint'
      break;
    case 226:                       // 'loop'
      consume(226);                 // 'loop'
      break;
    default:
      consume(251);                 // 'returning'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 13:                        // NCName^Token
      consumeT(13);                 // NCName^Token
      break;
    case 151:                       // 'after'
      consumeT(151);                // 'after'
      break;
    case 155:                       // 'and'
      consumeT(155);                // 'and'
      break;
    case 157:                       // 'as'
      consumeT(157);                // 'as'
      break;
    case 158:                       // 'ascending'
      consumeT(158);                // 'ascending'
      break;
    case 162:                       // 'before'
      consumeT(162);                // 'before'
      break;
    case 165:                       // 'case'
      consumeT(165);                // 'case'
      break;
    case 166:                       // 'cast'
      consumeT(166);                // 'cast'
      break;
    case 167:                       // 'castable'
      consumeT(167);                // 'castable'
      break;
    case 170:                       // 'collation'
      consumeT(170);                // 'collation'
      break;
    case 178:                       // 'count'
      consumeT(178);                // 'count'
      break;
    case 181:                       // 'default'
      consumeT(181);                // 'default'
      break;
    case 185:                       // 'descending'
      consumeT(185);                // 'descending'
      break;
    case 186:                       // 'div'
      consumeT(186);                // 'div'
      break;
    case 190:                       // 'else'
      consumeT(190);                // 'else'
      break;
    case 191:                       // 'empty'
      consumeT(191);                // 'empty'
      break;
    case 194:                       // 'end'
      consumeT(194);                // 'end'
      break;
    case 195:                       // 'eq'
      consumeT(195);                // 'eq'
      break;
    case 197:                       // 'except'
      consumeT(197);                // 'except'
      break;
    case 203:                       // 'for'
      consumeT(203);                // 'for'
      break;
    case 206:                       // 'ge'
      consumeT(206);                // 'ge'
      break;
    case 207:                       // 'group'
      consumeT(207);                // 'group'
      break;
    case 208:                       // 'gt'
      consumeT(208);                // 'gt'
      break;
    case 209:                       // 'idiv'
      consumeT(209);                // 'idiv'
      break;
    case 215:                       // 'instance'
      consumeT(215);                // 'instance'
      break;
    case 217:                       // 'intersect'
      consumeT(217);                // 'intersect'
      break;
    case 218:                       // 'into'
      consumeT(218);                // 'into'
      break;
    case 219:                       // 'is'
      consumeT(219);                // 'is'
      break;
    case 224:                       // 'le'
      consumeT(224);                // 'le'
      break;
    case 225:                       // 'let'
      consumeT(225);                // 'let'
      break;
    case 227:                       // 'lt'
      consumeT(227);                // 'lt'
      break;
    case 228:                       // 'mod'
      consumeT(228);                // 'mod'
      break;
    case 229:                       // 'modify'
      consumeT(229);                // 'modify'
      break;
    case 233:                       // 'ne'
      consumeT(233);                // 'ne'
      break;
    case 238:                       // 'only'
      consumeT(238);                // 'only'
      break;
    case 240:                       // 'or'
      consumeT(240);                // 'or'
      break;
    case 241:                       // 'order'
      consumeT(241);                // 'order'
      break;
    case 250:                       // 'return'
      consumeT(250);                // 'return'
      break;
    case 253:                       // 'satisfies'
      consumeT(253);                // 'satisfies'
      break;
    case 261:                       // 'stable'
      consumeT(261);                // 'stable'
      break;
    case 262:                       // 'start'
      consumeT(262);                // 'start'
      break;
    case 266:                       // 'to'
      consumeT(266);                // 'to'
      break;
    case 267:                       // 'treat'
      consumeT(267);                // 'treat'
      break;
    case 272:                       // 'union'
      consumeT(272);                // 'union'
      break;
    case 279:                       // 'where'
      consumeT(279);                // 'where'
      break;
    case 281:                       // 'with'
      consumeT(281);                // 'with'
      break;
    case 153:                       // 'ancestor'
      consumeT(153);                // 'ancestor'
      break;
    case 154:                       // 'ancestor-or-self'
      consumeT(154);                // 'ancestor-or-self'
      break;
    case 160:                       // 'attribute'
      consumeT(160);                // 'attribute'
      break;
    case 169:                       // 'child'
      consumeT(169);                // 'child'
      break;
    case 171:                       // 'comment'
      consumeT(171);                // 'comment'
      break;
    case 176:                       // 'copy'
      consumeT(176);                // 'copy'
      break;
    case 180:                       // 'declare'
      consumeT(180);                // 'declare'
      break;
    case 182:                       // 'delete'
      consumeT(182);                // 'delete'
      break;
    case 183:                       // 'descendant'
      consumeT(183);                // 'descendant'
      break;
    case 184:                       // 'descendant-or-self'
      consumeT(184);                // 'descendant-or-self'
      break;
    case 187:                       // 'document'
      consumeT(187);                // 'document'
      break;
    case 188:                       // 'document-node'
      consumeT(188);                // 'document-node'
      break;
    case 189:                       // 'element'
      consumeT(189);                // 'element'
      break;
    case 192:                       // 'empty-sequence'
      consumeT(192);                // 'empty-sequence'
      break;
    case 196:                       // 'every'
      consumeT(196);                // 'every'
      break;
    case 200:                       // 'first'
      consumeT(200);                // 'first'
      break;
    case 201:                       // 'following'
      consumeT(201);                // 'following'
      break;
    case 202:                       // 'following-sibling'
      consumeT(202);                // 'following-sibling'
      break;
    case 205:                       // 'function'
      consumeT(205);                // 'function'
      break;
    case 210:                       // 'if'
      consumeT(210);                // 'if'
      break;
    case 211:                       // 'import'
      consumeT(211);                // 'import'
      break;
    case 214:                       // 'insert'
      consumeT(214);                // 'insert'
      break;
    case 220:                       // 'item'
      consumeT(220);                // 'item'
      break;
    case 222:                       // 'last'
      consumeT(222);                // 'last'
      break;
    case 230:                       // 'module'
      consumeT(230);                // 'module'
      break;
    case 231:                       // 'namespace'
      consumeT(231);                // 'namespace'
      break;
    case 232:                       // 'namespace-node'
      consumeT(232);                // 'namespace-node'
      break;
    case 235:                       // 'node'
      consumeT(235);                // 'node'
      break;
    case 242:                       // 'ordered'
      consumeT(242);                // 'ordered'
      break;
    case 244:                       // 'parent'
      consumeT(244);                // 'parent'
      break;
    case 245:                       // 'preceding'
      consumeT(245);                // 'preceding'
      break;
    case 246:                       // 'preceding-sibling'
      consumeT(246);                // 'preceding-sibling'
      break;
    case 247:                       // 'processing-instruction'
      consumeT(247);                // 'processing-instruction'
      break;
    case 248:                       // 'rename'
      consumeT(248);                // 'rename'
      break;
    case 249:                       // 'replace'
      consumeT(249);                // 'replace'
      break;
    case 255:                       // 'schema-attribute'
      consumeT(255);                // 'schema-attribute'
      break;
    case 256:                       // 'schema-element'
      consumeT(256);                // 'schema-element'
      break;
    case 258:                       // 'self'
      consumeT(258);                // 'self'
      break;
    case 260:                       // 'some'
      consumeT(260);                // 'some'
      break;
    case 264:                       // 'switch'
      consumeT(264);                // 'switch'
      break;
    case 265:                       // 'text'
      consumeT(265);                // 'text'
      break;
    case 268:                       // 'try'
      consumeT(268);                // 'try'
      break;
    case 271:                       // 'typeswitch'
      consumeT(271);                // 'typeswitch'
      break;
    case 273:                       // 'unordered'
      consumeT(273);                // 'unordered'
      break;
    case 275:                       // 'validate'
      consumeT(275);                // 'validate'
      break;
    case 277:                       // 'variable'
      consumeT(277);                // 'variable'
      break;
    case 282:                       // 'xquery'
      consumeT(282);                // 'xquery'
      break;
    case 152:                       // 'allowing'
      consumeT(152);                // 'allowing'
      break;
    case 159:                       // 'at'
      consumeT(159);                // 'at'
      break;
    case 161:                       // 'base-uri'
      consumeT(161);                // 'base-uri'
      break;
    case 163:                       // 'boundary-space'
      consumeT(163);                // 'boundary-space'
      break;
    case 164:                       // 'break'
      consumeT(164);                // 'break'
      break;
    case 168:                       // 'catch'
      consumeT(168);                // 'catch'
      break;
    case 173:                       // 'construction'
      consumeT(173);                // 'construction'
      break;
    case 174:                       // 'context'
      consumeT(174);                // 'context'
      break;
    case 175:                       // 'continue'
      consumeT(175);                // 'continue'
      break;
    case 177:                       // 'copy-namespaces'
      consumeT(177);                // 'copy-namespaces'
      break;
    case 179:                       // 'decimal-format'
      consumeT(179);                // 'decimal-format'
      break;
    case 193:                       // 'encoding'
      consumeT(193);                // 'encoding'
      break;
    case 198:                       // 'exit'
      consumeT(198);                // 'exit'
      break;
    case 199:                       // 'external'
      consumeT(199);                // 'external'
      break;
    case 204:                       // 'ft-option'
      consumeT(204);                // 'ft-option'
      break;
    case 212:                       // 'in'
      consumeT(212);                // 'in'
      break;
    case 213:                       // 'index'
      consumeT(213);                // 'index'
      break;
    case 216:                       // 'integrity'
      consumeT(216);                // 'integrity'
      break;
    case 223:                       // 'lax'
      consumeT(223);                // 'lax'
      break;
    case 236:                       // 'nodes'
      consumeT(236);                // 'nodes'
      break;
    case 239:                       // 'option'
      consumeT(239);                // 'option'
      break;
    case 243:                       // 'ordering'
      consumeT(243);                // 'ordering'
      break;
    case 252:                       // 'revalidation'
      consumeT(252);                // 'revalidation'
      break;
    case 254:                       // 'schema'
      consumeT(254);                // 'schema'
      break;
    case 257:                       // 'score'
      consumeT(257);                // 'score'
      break;
    case 259:                       // 'sliding'
      consumeT(259);                // 'sliding'
      break;
    case 263:                       // 'strict'
      consumeT(263);                // 'strict'
      break;
    case 269:                       // 'tumbling'
      consumeT(269);                // 'tumbling'
      break;
    case 270:                       // 'type'
      consumeT(270);                // 'type'
      break;
    case 274:                       // 'updating'
      consumeT(274);                // 'updating'
      break;
    case 276:                       // 'value'
      consumeT(276);                // 'value'
      break;
    case 278:                       // 'version'
      consumeT(278);                // 'version'
      break;
    case 280:                       // 'while'
      consumeT(280);                // 'while'
      break;
    case 172:                       // 'constraint'
      consumeT(172);                // 'constraint'
      break;
    case 226:                       // 'loop'
      consumeT(226);                // 'loop'
      break;
    default:
      consumeT(251);                // 'returning'
    }
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_Program();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_Program()
  {
    eventHandler.startNonterminal("Program", e0);
    parse_StatementsAndOptionalExpr();
    eventHandler.endNonterminal("Program", e0);
  }

  function parse_Statements()
  {
    eventHandler.startNonterminal("Statements", e0);
    for (;;)
    {
      lookahead1W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      lk = predict(22);
      if (lk == 0)
      {
        lk = memoized(6, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(6, e0, lk);
        }
      }
      if (lk != -1
       && lk != 1)
      {
        break;
      }
      whitespace();
      parse_Statement();
    }
    eventHandler.endNonterminal("Statements", e0);
  }

  function try_Statements()
  {
    for (;;)
    {
      lookahead1W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      lk = predict(22);
      if (lk == 0)
      {
        lk = memoized(6, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            memoize(6, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(6, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 1)
      {
        break;
      }
      try_Statement();
    }
  }

  function parse_StatementsAndExpr()
  {
    eventHandler.startNonterminal("StatementsAndExpr", e0);
    parse_Statements();
    whitespace();
    parse_Expr();
    eventHandler.endNonterminal("StatementsAndExpr", e0);
  }

  function try_StatementsAndExpr()
  {
    try_Statements();
    try_Expr();
  }

  function parse_StatementsAndOptionalExpr()
  {
    eventHandler.startNonterminal("StatementsAndOptionalExpr", e0);
    parse_Statements();
    if (l1 != 90                    // EOF
     && l1 != 138)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    eventHandler.endNonterminal("StatementsAndOptionalExpr", e0);
  }

  function try_StatementsAndOptionalExpr()
  {
    try_Statements();
    if (l1 != 90                    // EOF
     && l1 != 138)                  // '}'
    {
      try_Expr();
    }
  }

  function parse_Statement()
  {
    eventHandler.startNonterminal("Statement", e0);
    lk = predict(23);
    if (lk == 13)
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            lk = -2;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              lk = -3;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                lk = -12;
              }
              catch (p12A)
              {
                lk = -13;
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(7, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
      parse_AssignStatement();
      break;
    case -3:
      parse_BlockStatement();
      break;
    case 3:
      parse_BreakStatement();
      break;
    case 4:
      parse_ContinueStatement();
      break;
    case 5:
      parse_ExitStatement();
      break;
    case 6:
      parse_FLWORStatement();
      break;
    case 7:
      parse_IfStatement();
      break;
    case 8:
      parse_SwitchStatement();
      break;
    case 9:
      parse_TryCatchStatement();
      break;
    case 10:
      parse_TypeswitchStatement();
      break;
    case -12:
    case 11:
      parse_VarDeclStatement();
      break;
    case -13:
      parse_WhileStatement();
      break;
    default:
      parse_ApplyStatement();
    }
    eventHandler.endNonterminal("Statement", e0);
  }

  function try_Statement()
  {
    lk = predict(23);
    if (lk == 13)
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          memoize(7, e0A, -1);
          lk = -14;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            memoize(7, e0A, -2);
            lk = -14;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              memoize(7, e0A, -3);
              lk = -14;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                memoize(7, e0A, -12);
                lk = -14;
              }
              catch (p12A)
              {
                lk = -13;
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(7, e0A, -13);
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -2:
      try_AssignStatement();
      break;
    case -3:
      try_BlockStatement();
      break;
    case 3:
      try_BreakStatement();
      break;
    case 4:
      try_ContinueStatement();
      break;
    case 5:
      try_ExitStatement();
      break;
    case 6:
      try_FLWORStatement();
      break;
    case 7:
      try_IfStatement();
      break;
    case 8:
      try_SwitchStatement();
      break;
    case 9:
      try_TryCatchStatement();
      break;
    case 10:
      try_TypeswitchStatement();
      break;
    case -12:
    case 11:
      try_VarDeclStatement();
      break;
    case -13:
      try_WhileStatement();
      break;
    case -14:
      break;
    default:
      try_ApplyStatement();
    }
  }

  function parse_ApplyStatement()
  {
    eventHandler.startNonterminal("ApplyStatement", e0);
    parse_ExprSimple();
    consume(101);                   // ';'
    eventHandler.endNonterminal("ApplyStatement", e0);
  }

  function try_ApplyStatement()
  {
    try_ExprSimple();
    consumeT(101);                  // ';'
  }

  function parse_AssignStatement()
  {
    eventHandler.startNonterminal("AssignStatement", e0);
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consume(29);                    // ':='
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(101);                   // ';'
    eventHandler.endNonterminal("AssignStatement", e0);
  }

  function try_AssignStatement()
  {
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consumeT(29);                   // ':='
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(101);                  // ';'
  }

  function parse_BlockStatement()
  {
    eventHandler.startNonterminal("BlockStatement", e0);
    consume(283);                   // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    whitespace();
    parse_Statements();
    consume(138);                   // '}'
    eventHandler.endNonterminal("BlockStatement", e0);
  }

  function try_BlockStatement()
  {
    consumeT(283);                  // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    try_Statements();
    consumeT(138);                  // '}'
  }

  function parse_BreakStatement()
  {
    eventHandler.startNonterminal("BreakStatement", e0);
    consume(164);                   // 'break'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consume(226);                   // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consume(101);                   // ';'
    eventHandler.endNonterminal("BreakStatement", e0);
  }

  function try_BreakStatement()
  {
    consumeT(164);                  // 'break'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consumeT(226);                  // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consumeT(101);                  // ';'
  }

  function parse_ContinueStatement()
  {
    eventHandler.startNonterminal("ContinueStatement", e0);
    consume(175);                   // 'continue'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consume(226);                   // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consume(101);                   // ';'
    eventHandler.endNonterminal("ContinueStatement", e0);
  }

  function try_ContinueStatement()
  {
    consumeT(175);                  // 'continue'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consumeT(226);                  // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consumeT(101);                  // ';'
  }

  function parse_ExitStatement()
  {
    eventHandler.startNonterminal("ExitStatement", e0);
    consume(198);                   // 'exit'
    lookahead1W(71);                // S^WS | '(:' | 'returning'
    consume(251);                   // 'returning'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(101);                   // ';'
    eventHandler.endNonterminal("ExitStatement", e0);
  }

  function try_ExitStatement()
  {
    consumeT(198);                  // 'exit'
    lookahead1W(71);                // S^WS | '(:' | 'returning'
    consumeT(251);                  // 'returning'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(101);                  // ';'
  }

  function parse_FLWORStatement()
  {
    eventHandler.startNonterminal("FLWORStatement", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 250)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnStatement();
    eventHandler.endNonterminal("FLWORStatement", e0);
  }

  function try_FLWORStatement()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 250)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnStatement();
  }

  function parse_ReturnStatement()
  {
    eventHandler.startNonterminal("ReturnStatement", e0);
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("ReturnStatement", e0);
  }

  function try_ReturnStatement()
  {
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_IfStatement()
  {
    eventHandler.startNonterminal("IfStatement", e0);
    consume(210);                   // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(94);                    // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consume(79);                    // 'then'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consume(190);                   // 'else'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("IfStatement", e0);
  }

  function try_IfStatement()
  {
    consumeT(210);                  // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(94);                   // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consumeT(79);                   // 'then'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consumeT(190);                  // 'else'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_SwitchStatement()
  {
    eventHandler.startNonterminal("SwitchStatement", e0);
    consume(264);                   // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(94);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consume(181);                   // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchStatement", e0);
  }

  function try_SwitchStatement()
  {
    consumeT(264);                  // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(94);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_SwitchCaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consumeT(181);                  // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_SwitchCaseStatement()
  {
    eventHandler.startNonterminal("SwitchCaseStatement", e0);
    for (;;)
    {
      consume(165);                 // 'case'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchCaseStatement", e0);
  }

  function try_SwitchCaseStatement()
  {
    for (;;)
    {
      consumeT(165);                // 'case'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_TryCatchStatement()
  {
    eventHandler.startNonterminal("TryCatchStatement", e0);
    consume(268);                   // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockStatement();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      consume(168);                 // 'catch'
      lookahead1W(251);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_CatchErrorList();
      whitespace();
      parse_BlockStatement();
      lookahead1W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      lk = predict(24);
      if (lk == 2)
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(36);        // S^WS | '(:' | 'catch'
            consumeT(168);          // 'catch'
            lookahead1W(251);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
            try_CatchErrorList();
            try_BlockStatement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(8, e0, lk);
        }
      }
      if (lk != -1
       && lk != 1)
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchStatement", e0);
  }

  function try_TryCatchStatement()
  {
    consumeT(268);                  // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockStatement();
    lookahead1W(36);                // S^WS | '(:' | 'catch'
    consumeT(168);                  // 'catch'
    lookahead1W(251);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_CatchErrorList();
    try_BlockStatement();
    for (;;)
    {
      lookahead1W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      lk = predict(24);
      if (lk == 2)
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(36);        // S^WS | '(:' | 'catch'
            consumeT(168);          // 'catch'
            lookahead1W(251);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
            try_CatchErrorList();
            try_BlockStatement();
            memoize(8, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(8, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 1)
      {
        break;
      }
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      consumeT(168);                // 'catch'
      lookahead1W(251);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_CatchErrorList();
      try_BlockStatement();
    }
  }

  function parse_TypeswitchStatement()
  {
    eventHandler.startNonterminal("TypeswitchStatement", e0);
    consume(271);                   // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(94);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consume(181);                   // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 146)                  // '$'
    {
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("TypeswitchStatement", e0);
  }

  function try_TypeswitchStatement()
  {
    consumeT(271);                  // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(94);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_CaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 165)                // 'case'
      {
        break;
      }
    }
    consumeT(181);                  // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 146)                  // '$'
    {
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_CaseStatement()
  {
    eventHandler.startNonterminal("CaseStatement", e0);
    consume(165);                   // 'case'
    lookahead1W(261);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 146)                  // '$'
    {
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(157);                 // 'as'
    }
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(250);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("CaseStatement", e0);
  }

  function try_CaseStatement()
  {
    consumeT(165);                  // 'case'
    lookahead1W(261);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 146)                  // '$'
    {
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(157);                // 'as'
    }
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceType();
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(250);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_VarDeclStatement()
  {
    eventHandler.startNonterminal("VarDeclStatement", e0);
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 147)                // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(277);                   // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(146);                   // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(157);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 157)                  // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(145);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 29)                   // ':='
    {
      consume(29);                  // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consume(97);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(146);                 // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(157);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 157)                // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(145);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 29)                 // ':='
      {
        consume(29);                // ':='
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(101);                   // ';'
    eventHandler.endNonterminal("VarDeclStatement", e0);
  }

  function try_VarDeclStatement()
  {
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 147)                // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(277);                  // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(146);                  // '$'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(157);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 157)                  // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(145);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 29)                   // ':='
    {
      consumeT(29);                 // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 97)                 // ','
      {
        break;
      }
      consumeT(97);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(146);                // '$'
      lookahead1W(249);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(157);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 157)                // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(145);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 29)                 // ':='
      {
        consumeT(29);               // ':='
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        try_ExprSingle();
      }
    }
    consumeT(101);                  // ';'
  }

  function parse_WhileStatement()
  {
    eventHandler.startNonterminal("WhileStatement", e0);
    consume(280);                   // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(94);                    // ')'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("WhileStatement", e0);
  }

  function try_WhileStatement()
  {
    consumeT(280);                  // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(92);                   // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(94);                   // ')'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    lk = predict(25);
    switch (lk)
    {
    case 1:
      parse_FLWORExpr();
      break;
    case 2:
      parse_IfExpr();
      break;
    case 3:
      parse_SwitchExpr();
      break;
    case 4:
      parse_TryCatchExpr();
      break;
    case 5:
      parse_TypeswitchExpr();
      break;
    default:
      parse_ExprSimple();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    lk = predict(25);
    switch (lk)
    {
    case 1:
      try_FLWORExpr();
      break;
    case 2:
      try_IfExpr();
      break;
    case 3:
      try_SwitchExpr();
      break;
    case 4:
      try_TryCatchExpr();
      break;
    case 5:
      try_TypeswitchExpr();
      break;
    default:
      try_ExprSimple();
    }
  }

  function parse_ExprSimple()
  {
    eventHandler.startNonterminal("ExprSimple", e0);
    lk = predict(26);
    switch (lk)
    {
    case 1:
      parse_QuantifiedExpr();
      break;
    case 2:
      parse_InsertExpr();
      break;
    case 3:
      parse_DeleteExpr();
      break;
    case 4:
      parse_RenameExpr();
      break;
    case 5:
      parse_ReplaceExpr();
      break;
    case 6:
      parse_TransformExpr();
      break;
    case 7:
      parse_JSONDeleteExpr();
      break;
    case 8:
      parse_JSONInsertExpr();
      break;
    case 9:
      parse_JSONRenameExpr();
      break;
    case 10:
      parse_JSONReplaceExpr();
      break;
    case 11:
      parse_JSONAppendExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSimple", e0);
  }

  function try_ExprSimple()
  {
    lk = predict(26);
    switch (lk)
    {
    case 1:
      try_QuantifiedExpr();
      break;
    case 2:
      try_InsertExpr();
      break;
    case 3:
      try_DeleteExpr();
      break;
    case 4:
      try_RenameExpr();
      break;
    case 5:
      try_ReplaceExpr();
      break;
    case 6:
      try_TransformExpr();
      break;
    case 7:
      try_JSONDeleteExpr();
      break;
    case 8:
      try_JSONInsertExpr();
      break;
    case 9:
      try_JSONRenameExpr();
      break;
    case 10:
      try_JSONReplaceExpr();
      break;
    case 11:
      try_JSONAppendExpr();
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_JSONDeleteExpr()
  {
    eventHandler.startNonterminal("JSONDeleteExpr", e0);
    consume(182);                   // 'delete'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(52);                    // 'json'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    eventHandler.endNonterminal("JSONDeleteExpr", e0);
  }

  function try_JSONDeleteExpr()
  {
    consumeT(182);                  // 'delete'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(52);                   // 'json'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_PostfixExpr();
  }

  function parse_JSONInsertExpr()
  {
    eventHandler.startNonterminal("JSONInsertExpr", e0);
    consume(214);                   // 'insert'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(52);                    // 'json'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(218);                   // 'into'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    lk = predict(27);
    if (lk == 2)
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(159);            // 'at'
          lookahead1W(69);          // S^WS | '(:' | 'position'
          consumeT(71);             // 'position'
          lookahead1W(270);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
          try_ExprSingle();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(9, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(159);                 // 'at'
      lookahead1W(69);              // S^WS | '(:' | 'position'
      consume(71);                  // 'position'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("JSONInsertExpr", e0);
  }

  function try_JSONInsertExpr()
  {
    consumeT(214);                  // 'insert'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(52);                   // 'json'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(218);                  // 'into'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    lk = predict(27);
    if (lk == 2)
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(159);            // 'at'
          lookahead1W(69);          // S^WS | '(:' | 'position'
          consumeT(71);             // 'position'
          lookahead1W(270);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
          try_ExprSingle();
          memoize(9, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(9, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(159);                // 'at'
      lookahead1W(69);              // S^WS | '(:' | 'position'
      consumeT(71);                 // 'position'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_JSONRenameExpr()
  {
    eventHandler.startNonterminal("JSONRenameExpr", e0);
    consume(248);                   // 'rename'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(52);                    // 'json'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    consume(157);                   // 'as'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONRenameExpr", e0);
  }

  function try_JSONRenameExpr()
  {
    consumeT(248);                  // 'rename'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(52);                   // 'json'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_PostfixExpr();
    consumeT(157);                  // 'as'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONReplaceExpr()
  {
    eventHandler.startNonterminal("JSONReplaceExpr", e0);
    consume(249);                   // 'replace'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(52);                    // 'json'
    lookahead1W(82);                // S^WS | '(:' | 'value'
    consume(276);                   // 'value'
    lookahead1W(64);                // S^WS | '(:' | 'of'
    consume(64);                    // 'of'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    consume(281);                   // 'with'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONReplaceExpr", e0);
  }

  function try_JSONReplaceExpr()
  {
    consumeT(249);                  // 'replace'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(52);                   // 'json'
    lookahead1W(82);                // S^WS | '(:' | 'value'
    consumeT(276);                  // 'value'
    lookahead1W(64);                // S^WS | '(:' | 'of'
    consumeT(64);                   // 'of'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_PostfixExpr();
    consumeT(281);                  // 'with'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONAppendExpr()
  {
    eventHandler.startNonterminal("JSONAppendExpr", e0);
    consume(113);                   // 'append'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(52);                    // 'json'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(218);                   // 'into'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONAppendExpr", e0);
  }

  function try_JSONAppendExpr()
  {
    consumeT(113);                  // 'append'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(52);                   // 'json'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(218);                  // 'into'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      consume(6);                   // PredefinedEntityRef
      break;
    case 17:                        // CharRef
      consume(17);                  // CharRef
      break;
    case 88:                        // '{{'
      consume(88);                  // '{{'
      break;
    case 89:                        // '}}'
      consume(89);                  // '}}'
      break;
    default:
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      consumeT(6);                  // PredefinedEntityRef
      break;
    case 17:                        // CharRef
      consumeT(17);                 // CharRef
      break;
    case 88:                        // '{{'
      consumeT(88);                 // '{{'
      break;
    case 89:                        // '}}'
      consumeT(89);                 // '}}'
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_ContentExpr()
  {
    eventHandler.startNonterminal("ContentExpr", e0);
    parse_StatementsAndExpr();
    eventHandler.endNonterminal("ContentExpr", e0);
  }

  function try_ContentExpr()
  {
    try_StatementsAndExpr();
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    consume(187);                   // 'document'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    consumeT(187);                  // 'document'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    consume(160);                   // 'attribute'
    lookahead1W(252);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 283:                       // '{'
      consume(283);                 // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(138);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    lk = predict(28);
    if (lk == 2)
    {
      lk = memoized(10, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(283);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(138);            // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(10, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      consume(283);                 // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consume(138);                 // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    consumeT(160);                  // 'attribute'
    lookahead1W(252);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 283:                       // '{'
      consumeT(283);                // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(138);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    lk = predict(28);
    if (lk == 2)
    {
      lk = memoized(10, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(283);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(138);            // '}'
          memoize(10, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(10, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(283);                // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consumeT(138);                // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    consume(247);                   // 'processing-instruction'
    lookahead1W(253);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 283:                       // '{'
      consume(283);                 // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(138);                 // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    lk = predict(29);
    if (lk == 2)
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(283);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(138);            // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(11, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      consume(283);                 // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consume(138);                 // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    consumeT(247);                  // 'processing-instruction'
    lookahead1W(253);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 283:                       // '{'
      consumeT(283);                // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(138);                // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    lk = predict(29);
    if (lk == 2)
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(283);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(138);            // '}'
          memoize(11, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(11, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(283);                // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consumeT(138);                // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    consume(171);                   // 'comment'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    consumeT(171);                  // 'comment'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    consume(265);                   // 'text'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    consumeT(265);                  // 'text'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    lk = predict(30);
    if (lk == 13)
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          lk = -10;
        }
        catch (p10A)
        {
          lk = -11;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(12, e0, lk);
      }
    }
    switch (lk)
    {
    case 1:
      parse_Literal();
      break;
    case 2:
      parse_VarRef();
      break;
    case 3:
      parse_ParenthesizedExpr();
      break;
    case 4:
      parse_ContextItemExpr();
      break;
    case 5:
      parse_FunctionCall();
      break;
    case 6:
      parse_OrderedExpr();
      break;
    case 7:
      parse_UnorderedExpr();
      break;
    case 8:
      parse_FunctionItemExpr();
      break;
    case -10:
      parse_BlockExpr();
      break;
    case -11:
      parse_ObjectConstructor();
      break;
    case 11:
      parse_ArrayConstructor();
      break;
    case 12:
      parse_JSONSimpleObjectUnion();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    lk = predict(30);
    if (lk == 13)
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          memoize(12, e0A, -10);
          lk = -14;
        }
        catch (p10A)
        {
          lk = -11;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(12, e0A, -11);
        }
      }
    }
    switch (lk)
    {
    case 1:
      try_Literal();
      break;
    case 2:
      try_VarRef();
      break;
    case 3:
      try_ParenthesizedExpr();
      break;
    case 4:
      try_ContextItemExpr();
      break;
    case 5:
      try_FunctionCall();
      break;
    case 6:
      try_OrderedExpr();
      break;
    case 7:
      try_UnorderedExpr();
      break;
    case 8:
      try_FunctionItemExpr();
      break;
    case -10:
      try_BlockExpr();
      break;
    case -11:
      try_ObjectConstructor();
      break;
    case 11:
      try_ArrayConstructor();
      break;
    case 12:
      try_JSONSimpleObjectUnion();
      break;
    case -14:
      break;
    default:
      try_Constructor();
    }
  }

  function parse_JSONSimpleObjectUnion()
  {
    eventHandler.startNonterminal("JSONSimpleObjectUnion", e0);
    consume(134);                   // '{|'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '|}'
    if (l1 != 137)                  // '|}'
    {
      whitespace();
      parse_Expr();
    }
    consume(137);                   // '|}'
    eventHandler.endNonterminal("JSONSimpleObjectUnion", e0);
  }

  function try_JSONSimpleObjectUnion()
  {
    consumeT(134);                  // '{|'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '|}'
    if (l1 != 137)                  // '|}'
    {
      try_Expr();
    }
    consumeT(137);                  // '|}'
  }

  function parse_ObjectConstructor()
  {
    eventHandler.startNonterminal("ObjectConstructor", e0);
    consume(283);                   // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 138)                  // '}'
    {
      whitespace();
      parse_PairConstructor();
      for (;;)
      {
        if (l1 != 97)               // ','
        {
          break;
        }
        consume(97);                // ','
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_PairConstructor();
      }
    }
    consume(138);                   // '}'
    eventHandler.endNonterminal("ObjectConstructor", e0);
  }

  function try_ObjectConstructor()
  {
    consumeT(283);                  // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 138)                  // '}'
    {
      try_PairConstructor();
      for (;;)
      {
        if (l1 != 97)               // ','
        {
          break;
        }
        consumeT(97);               // ','
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        try_PairConstructor();
      }
    }
    consumeT(138);                  // '}'
  }

  function parse_PairConstructor()
  {
    eventHandler.startNonterminal("PairConstructor", e0);
    parse_ExprSingle();
    consume(100);                   // ':'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("PairConstructor", e0);
  }

  function try_PairConstructor()
  {
    try_ExprSingle();
    consumeT(100);                  // ':'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    consume(111);                   // '['
    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 112)                  // ']'
    {
      whitespace();
      parse_Expr();
    }
    consume(112);                   // ']'
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    consumeT(111);                  // '['
    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 112)                  // ']'
    {
      try_Expr();
    }
    consumeT(112);                  // ']'
  }

  function parse_BlockExpr()
  {
    eventHandler.startNonterminal("BlockExpr", e0);
    consume(283);                   // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    whitespace();
    parse_StatementsAndOptionalExpr();
    consume(138);                   // '}'
    eventHandler.endNonterminal("BlockExpr", e0);
  }

  function try_BlockExpr()
  {
    consumeT(283);                  // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    try_StatementsAndOptionalExpr();
    consumeT(138);                  // '}'
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    consume(205);                   // 'function'
    lookahead1W(249);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(92);                    // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 146)                  // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(94);                    // ')'
    lookahead1W(148);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 157)                  // 'as'
    {
      consume(157);                 // 'as'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(118);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 283:                       // '{'
      consume(283);                 // '{'
      lookahead1W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      whitespace();
      parse_StatementsAndOptionalExpr();
      consume(138);                 // '}'
      break;
    default:
      consume(199);                 // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function consume(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(XQueryParser_ts.TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function consumeT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  function matchW(tokenSetId)
  {
    var code;
    for (;;)
    {
      code = match(tokenSetId);
      if (code != 16)               // S^WS
      {
        if (code != 23)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = matchW(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead1(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = match(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function error(b, e, s, l, t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new thisParser.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 4) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 4) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;

  var begin;
  var end;

  function predict(dpi)
  {
    var d = dpi;
    var j10 = 2237 * d + l1;
    var j11 = j10 >> 2;
    var j12 = j11 >> 2;
    var action = XQueryParser_ts.CASEID[(j10 & 3) + XQueryParser_ts.CASEID[(j11 & 3) + XQueryParser_ts.CASEID[(j12 & 7) + XQueryParser_ts.CASEID[j12 >> 3]]]];
    if ((action & 1) == 0)
      return action >> 1;
    if (l2 == 0)
    {
      l2 = matchW(action >> 1);
      b2 = begin;
      e2 = end;
    }
    var i20 = 284 * l2 + l1;
    var i21 = i20 >> 2;
    var i22 = i21 >> 2;
    var matchCode = XQueryParser_ts.LOOKAHEAD[(i20 & 3) + XQueryParser_ts.LOOKAHEAD[(i21 & 3) + XQueryParser_ts.LOOKAHEAD[(i22 & 7) + XQueryParser_ts.LOOKAHEAD[i22 >> 3]]]];
    if (matchCode != 0)
    {
      var j20 = 2237 * d + matchCode;
      var j21 = j20 >> 2;
      var j22 = j21 >> 2;
      action = XQueryParser_ts.CASEID[(j20 & 3) + XQueryParser_ts.CASEID[(j21 & 3) + XQueryParser_ts.CASEID[(j22 & 7) + XQueryParser_ts.CASEID[j22 >> 3]]]];
      return action >> 1;
    }
    return 0;
  }

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = XQueryParser_ts.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 4095; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = XQueryParser_ts.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = XQueryParser_ts.MAP1[(c0 & 15) + XQueryParser_ts.MAP1[(c1 & 31) + XQueryParser_ts.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }

        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (XQueryParser_ts.MAP2[m] > c0) hi = m - 1;
          else if (XQueryParser_ts.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = XQueryParser_ts.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = 3155 * charclass + code - 1;
      var i1 = i0 >> 2;
      code = XQueryParser_ts.TRANSITION[(i0 & 3) + XQueryParser_ts.TRANSITION[(i1 & 7) + XQueryParser_ts.TRANSITION[i1 >> 3]]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 9; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 9;
    }

    if (end > size) end = size;
    return (result & 511) - 1;
  }

}

XQueryParser_ts.XmlSerializer = function(log, indent)
{
  var input = null;
  var delayedTag = null;
  var hasChildElement = false;
  var depth = 0;

  this.reset = function(string)
  {
    log("<?xml version=\"1.0\" encoding=\"UTF-8\"?" + ">");
    input = string;
    delayedTag = null;
    hasChildElement = false;
    depth = 0;
  };

  this.startNonterminal = function(tag, begin)
  {
    if (delayedTag != null)
    {
      log("<");
      log(delayedTag);
      log(">");
    }
    delayedTag = tag;
    if (indent)
    {
      log("\n");
      for (var i = 0; i < depth; ++i)
      {
        log("  ");
      }
    }
    hasChildElement = false;
    ++depth;
  };

  this.endNonterminal = function(tag, end)
  {
    --depth;
    if (delayedTag != null)
    {
      delayedTag = null;
      log("<");
      log(tag);
      log("/>");
    }
    else
    {
      if (indent)
      {
        if (hasChildElement)
        {
          log("\n");
          for (var i = 0; i < depth; ++i)
          {
            log("  ");
          }
        }
      }
      log("</");
      log(tag);
      log(">");
    }
    hasChildElement = true;
  };

  this.terminal = function(tag, begin, end)
  {
    if (tag.charAt(0) == '\'') tag = "TOKEN";
    this.startNonterminal(tag, begin);
    characters(begin, end);
    this.endNonterminal(tag, end);
  };

  this.whitespace = function(begin, end)
  {
    characters(begin, end);
  };

  function characters(begin, end)
  {
    if (begin < end)
    {
      if (delayedTag != null)
      {
        log("<");
        log(delayedTag);
        log(">");
        delayedTag = null;
      }
      log(input.substring(begin, end)
               .replace(/&/g, "&amp;")
               .replace(/</g, "&lt;")
               .replace(/>/g, "&gt;"));
    }
  }
};

XQueryParser_ts.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : XQueryParser_ts.INITIAL[tokenSetId] & 4095;
  for (var i = 0; i < 284; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 3155 + s - 1;
    var i1 = i0 >> 1;
    var i2 = i1 >> 2;
    var f = XQueryParser_ts.EXPECTED[(i0 & 1) + XQueryParser_ts.EXPECTED[(i1 & 3) + XQueryParser_ts.EXPECTED[(i2 & 3) + XQueryParser_ts.EXPECTED[i2 >> 2]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(XQueryParser_ts.TOKEN[j]);
      }
    }
  }
  return set;
};

XQueryParser_ts.TopDownTreeBuilder = function()
{
  var input = null;
  var stack = null;

  this.reset = function(i)
  {
    input = i;
    stack = [];
  };

  this.startNonterminal = function(name, begin)
  {
    var nonterminal = new XQueryParser_ts.Nonterminal(name, begin, begin, []);
    if (stack.length > 0) addChild(nonterminal);
    stack.push(nonterminal);
  };

  this.endNonterminal = function(name, end)
  {
    stack[stack.length - 1].end = end;
    if (stack.length > 1) stack.pop();
  };

  this.terminal = function(name, begin, end)
  {
    addChild(new XQueryParser_ts.Terminal(name, begin, end));
  };

  this.whitespace = function(begin, end)
  {
  };

  function addChild(s)
  {
    var current = stack[stack.length - 1];
    current.children.push(s);
  }

  this.serialize = function(e)
  {
    e.reset(input);
    stack[0].send(e);
  };
};

XQueryParser_ts.Terminal = function(name, begin, end)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.terminal(name, begin, end);
  };
};

XQueryParser_ts.Nonterminal = function(name, begin, end, children)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.startNonterminal(name, begin);
    var pos = begin;
    children.forEach
    (
      function(c)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
    );
    if (pos < end) e.whitespace(pos, end);
    e.endNonterminal(name, end);
  };
};

XQueryParser_ts.MAP0 =
[
  /*   0 */ 70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,
  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,
  /*  91 */ 37, 38, 39, 38, 30, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
  /* 118 */ 61, 62, 63, 64, 65, 66, 67, 68, 38, 38
];

XQueryParser_ts.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 70, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,
  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30,
  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30,
  /* 371 */ 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
  /* 398 */ 66, 67, 68, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 69, 38, 38,
  /* 425 */ 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
  /* 452 */ 69, 69, 69, 69
];

XQueryParser_ts.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30,
  /* 17 */ 38
];

XQueryParser_ts.INITIAL =
[
  /*   0 */ 1, 12290, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
  /*  82 */ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
  /* 107 */ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
  /* 128 */ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
  /* 149 */ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
  /* 170 */ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
  /* 191 */ 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
  /* 212 */ 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
  /* 233 */ 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
  /* 254 */ 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
  /* 275 */ 276, 277, 278, 279, 280, 281, 282, 283, 284, 285
];

XQueryParser_ts.TRANSITION =
[
  /*     0 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*    17 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*    34 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*    51 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*    68 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*    85 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8256, 7001, 7012, 7025,
  /*   102 */ 7012, 7003, 7011, 7012, 7020, 7029, 7450, 8842, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   119 */ 8850, 15330, 8850, 8850, 8850, 12202, 8850, 8850, 8850, 14346, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   136 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   153 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   170 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 10946, 8850,
  /*   187 */ 10942, 8850, 15304, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 14559, 8850, 15309, 8850, 8850, 16637, 7037,
  /*   204 */ 7044, 8422, 7052, 8850, 10322, 8850, 13104, 8850, 8850, 8850, 8850, 8850, 13404, 8850, 15309, 10972, 8850,
  /*   221 */ 8850, 8850, 17410, 8850, 8850, 11388, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   238 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   255 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   272 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 11743, 8850, 8850, 8520, 8850, 10946,
  /*   289 */ 8850, 8850, 8850, 8850, 8850, 8850, 7124, 7069, 8850, 9629, 8850, 7080, 7088, 8850, 13521, 7098, 7122,
  /*   306 */ 8850, 8371, 8454, 8850, 8850, 8850, 8850, 8850, 8850, 15959, 8850, 8526, 8850, 8850, 8850, 10680, 8850,
  /*   323 */ 8850, 8850, 11416, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   340 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   357 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   374 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 19937, 8850, 19933, 8850, 11743, 8850, 8850, 8850, 8850,
  /*   391 */ 8850, 8850, 8850, 17649, 7134, 8850, 7143, 7246, 20091, 7154, 7178, 7161, 7186, 8850, 9667, 8850, 9346,
  /*   408 */ 8850, 8850, 8850, 8850, 8850, 8850, 12524, 8850, 8537, 8850, 8850, 8850, 18671, 8850, 8850, 8850, 13178,
  /*   425 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 13100, 8850, 8850, 8850, 8850, 14552, 8850, 8850, 8850, 8850,
  /*   442 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   459 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   476 */ 8850, 8850, 8850, 8850, 15301, 8850, 8850, 15305, 8850, 19937, 8850, 8850, 8850, 8850, 8850, 8850, 15334,
  /*   493 */ 7201, 8850, 15630, 8850, 7223, 7235, 7254, 7266, 7277, 7447, 8850, 8847, 8850, 8850, 8850, 8850, 8850,
  /*   510 */ 8850, 8850, 8850, 8850, 15327, 8850, 8850, 8850, 7286, 8850, 8850, 8850, 14343, 8850, 8850, 8850, 8850,
  /*   527 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   544 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   561 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   578 */ 8850, 10943, 8850, 8850, 10947, 15301, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 14556, 8850, 8850, 9712,
  /*   595 */ 8850, 14562, 7285, 7294, 8218, 7304, 8850, 10319, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   612 */ 8850, 10969, 8850, 8850, 8850, 17407, 8850, 8850, 8850, 13159, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   629 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   646 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   663 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8521, 8850,
  /*   680 */ 11744, 8850, 10943, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 7168, 8850, 10973, 8850, 8850, 14846, 8850,
  /*   697 */ 8850, 8850, 7312, 8850, 8368, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8523, 8850, 8850,
  /*   714 */ 8850, 8850, 7325, 8850, 8850, 14349, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   731 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   748 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   765 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 19934, 8850, 8850, 19938, 8850, 8521,
  /*   782 */ 8850, 8850, 8850, 8850, 8850, 8850, 7452, 7335, 8850, 8081, 8850, 7346, 7354, 8850, 7616, 7364, 7382,
  /*   799 */ 8850, 8694, 7672, 8850, 8850, 8850, 8850, 8850, 8850, 7733, 8850, 8534, 8850, 8850, 8850, 10170, 8850,
  /*   816 */ 8850, 8850, 18350, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   833 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   850 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   867 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 15306, 8850, 15302, 8850, 19934, 8850, 8850, 8850, 8850,
  /*   884 */ 8850, 8850, 8850, 7748, 7392, 7393, 7408, 7412, 7401, 7420, 7428, 7436, 7444, 8850, 9360, 8850, 8850,
  /*   901 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 7460, 8850, 8850, 8850, 12204, 8850, 8850, 8850, 14348,
  /*   918 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   935 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   952 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*   969 */ 8850, 8850, 8850, 8850, 10940, 8850, 8850, 10944, 8850, 15306, 8850, 8850, 8850, 8850, 8850, 8850, 8851,
  /*   986 */ 7104, 8850, 20154, 7470, 16319, 7480, 12146, 7494, 7502, 7518, 8850, 10054, 8850, 8850, 8850, 8850, 8850,
  /*  1003 */ 8850, 8850, 8850, 8850, 11382, 8850, 8850, 8850, 7356, 8850, 8850, 8850, 11390, 8850, 8850, 8850, 8850,
  /*  1020 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  1037 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  1054 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  1071 */ 8850, 11745, 8850, 8850, 8522, 10940, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 7126, 7529, 8850, 9757,
  /*  1088 */ 8850, 16483, 7540, 7547, 7554, 7562, 8850, 8365, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  1105 */ 8850, 8528, 8850, 8850, 8850, 10682, 8850, 8850, 8850, 10113, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  1122 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  1139 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  1156 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 19939, 8850,
  /*  1173 */ 19935, 8850, 11745, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 9636, 8850, 10982, 8850, 8850, 7570, 7578,
  /*  1190 */ 10861, 10858, 7601, 8850, 8691, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8531, 8850, 7614,
  /*  1207 */ 8850, 8850, 18673, 8850, 8850, 19866, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  1224 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  1241 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  1258 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 15303, 8850, 8850, 15307, 8850, 19939,
  /*  1275 */ 8850, 8850, 8850, 8850, 8850, 8850, 8255, 17216, 8850, 20241, 8850, 7624, 7656, 7663, 7668, 7680, 7449,
  /*  1292 */ 8850, 8849, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 15329, 8850, 8850, 8850, 12201, 8850,
  /*  1309 */ 8850, 8850, 14345, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  1326 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  1343 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  1360 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 10945, 8850, 10941, 8850, 15303, 8850, 8850, 8850, 8850,
  /*  1377 */ 8850, 8850, 8850, 8076, 8850, 8850, 11387, 8850, 11199, 7698, 7709, 7706, 7717, 8850, 10321, 8850, 8850,
  /*  1394 */ 8850, 8850, 8850, 7845, 13752, 9097, 15957, 7731, 7741, 8865, 8850, 8850, 17803, 7756, 14313, 18820, 7766,
  /*  1411 */ 8119, 7784, 8850, 8850, 8850, 17425, 8850, 16532, 18811, 18813, 18820, 18820, 17110, 8119, 9070, 19861,
  /*  1427 */ 7798, 8850, 8850, 7812, 15620, 18811, 8915, 13767, 18820, 7823, 8119, 9943, 13085, 8850, 17382, 16425,
  /*  1443 */ 16001, 7847, 14048, 17684, 11455, 17763, 8850, 10302, 7842, 15758, 18820, 11774, 11458, 7864, 12385,
  /*  1458 */ 19323, 18037, 8901, 7773, 15772, 7897, 7919, 10606, 18930, 7927, 7951, 7968, 7992, 8000, 8023, 15881,
  /*  1474 */ 8983, 8040, 10158, 9011, 15897, 8850, 8850, 19904, 8850, 14247, 9021, 8850, 8850, 8061, 13508, 8850, 8370,
  /*  1491 */ 17534, 8850, 8850, 8850, 16425, 18816, 7983, 8069, 8850, 8525, 8850, 8850, 8850, 8668, 18811, 7758, 18820,
  /*  1508 */ 14211, 8119, 14228, 9050, 8850, 8850, 8850, 8850, 14754, 18811, 18811, 8896, 18820, 19674, 8119, 8119,
  /*  1524 */ 16272, 8107, 8850, 8850, 8850, 8850, 17947, 18811, 7849, 18820, 15827, 8119, 8119, 8126, 8850, 8850, 8850,
  /*  1541 */ 19478, 18811, 18818, 18820, 8117, 8119, 13070, 8850, 8850, 17663, 18815, 18820, 18461, 15714, 8850, 14021,
  /*  1557 */ 18811, 8097, 16746, 15714, 8850, 7844, 8097, 13044, 13908, 18816, 9119, 9460, 8141, 17921, 9129, 16195,
  /*  1573 */ 7830, 10436, 14811, 9140, 8150, 8168, 8850, 8177, 8850, 20090, 8200, 8189, 8196, 8208, 8850, 8688, 8850,
  /*  1590 */ 15775, 9349, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8536, 8850, 8850, 8850, 18670, 8850, 8850, 8850,
  /*  1607 */ 13177, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  1624 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  1641 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  1658 */ 8850, 8850, 8850, 8850, 8850, 8850, 15308, 8850, 15304, 8850, 19936, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  1675 */ 8850, 8226, 8850, 15913, 8850, 8539, 13585, 8850, 8850, 14654, 12173, 8850, 8846, 14393, 8850, 8850, 8850,
  /*  1692 */ 14021, 8093, 14897, 8244, 8850, 15326, 8850, 8252, 8850, 8850, 8264, 8892, 18820, 18641, 8119, 13824,
  /*  1708 */ 16799, 8850, 8850, 14639, 8850, 8850, 7591, 18811, 7847, 18820, 18820, 10344, 8119, 8122, 8273, 8850,
  /*  1724 */ 8850, 12942, 8850, 8281, 18811, 8895, 18820, 8099, 8119, 8119, 16273, 16079, 8850, 8850, 18376, 18811,
  /*  1740 */ 8095, 18820, 8291, 8119, 10630, 8850, 8850, 13737, 8092, 18820, 9931, 15559, 11069, 8850, 17663, 18817,
  /*  1756 */ 17888, 15559, 11069, 19712, 18817, 13944, 12608, 10386, 7939, 8049, 15539, 19254, 14688, 11227, 9230,
  /*  1771 */ 9238, 9246, 10014, 17191, 13144, 8850, 7804, 8303, 8312, 8325, 10520, 8333, 8345, 8353, 8850, 8363, 8850,
  /*  1788 */ 8850, 8850, 8850, 16509, 8463, 7374, 8379, 8850, 17852, 8850, 8850, 8850, 10461, 8432, 8392, 8850, 7370,
  /*  1805 */ 8442, 8401, 8383, 8850, 8850, 8850, 8850, 9061, 8432, 8432, 8589, 8850, 19941, 8442, 8442, 8409, 8850,
  /*  1822 */ 8850, 8850, 8850, 7960, 8432, 8432, 12697, 8850, 19124, 8442, 8442, 8417, 8850, 8850, 8850, 8430, 8432,
  /*  1839 */ 8850, 8850, 8441, 8443, 8451, 8850, 13180, 8432, 8462, 19940, 8442, 8471, 8850, 9061, 8433, 8850, 8485,
  /*  1856 */ 8471, 8850, 8568, 8722, 8488, 8496, 8502, 8516, 8547, 8555, 8393, 8563, 8576, 12693, 8584, 8508, 8600,
  /*  1873 */ 8606, 8637, 8850, 8617, 12764, 8631, 8647, 8648, 16415, 8656, 8850, 8367, 8850, 8850, 8850, 8850, 8850,
  /*  1890 */ 8850, 8850, 8850, 8850, 8850, 8530, 8850, 8850, 8850, 12714, 8850, 8850, 8850, 8667, 8850, 8850, 8850,
  /*  1907 */ 8850, 7384, 8676, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 20018, 8686, 8850, 7242, 8850,
  /*  1924 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 7686, 8850, 8850, 17551, 8850, 8850, 8850, 19344, 8850,
  /*  1941 */ 8850, 8850, 8850, 18670, 8850, 8850, 11417, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  1958 */ 8850, 19933, 8850, 8850, 19937, 8850, 8520, 8850, 8850, 8850, 8850, 8850, 8850, 7451, 8850, 8850, 11324,
  /*  1975 */ 8850, 8850, 11246, 11252, 11256, 8702, 13995, 8850, 8693, 8850, 8850, 11379, 8850, 8850, 8850, 8850, 9590,
  /*  1992 */ 8850, 8533, 8850, 8850, 8850, 10169, 8850, 8850, 8850, 18349, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  2009 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  2026 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  2043 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 15305, 8850,
  /*  2060 */ 15301, 8850, 19933, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 19301, 18495, 8850, 20151, 8850, 20176,
  /*  2076 */ 11642, 11644, 8730, 8738, 8850, 8843, 8850, 8850, 9493, 8850, 8850, 8850, 8850, 8850, 8746, 8850, 15331,
  /*  2093 */ 8850, 8850, 8850, 12203, 8850, 8850, 8850, 14347, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  2110 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  2127 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  2144 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 10947, 8850, 10943, 8850,
  /*  2161 */ 15305, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8756, 8850, 15310, 8850, 8850, 8317, 8770, 8772, 15159,
  /*  2178 */ 8780, 8850, 10323, 8850, 8850, 15267, 8850, 8850, 8850, 8850, 8850, 8793, 8591, 8850, 8850, 8850, 8850,
  /*  2195 */ 17411, 8850, 8850, 11389, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  2212 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  2229 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  2246 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 11744, 8850, 8850, 8521, 8850, 8802, 8850, 8850,
  /*  2263 */ 8850, 8850, 8850, 8850, 17094, 8811, 8850, 16155, 8850, 14178, 7089, 16218, 8820, 16160, 13510, 15309,
  /*  2279 */ 15333, 11835, 8850, 8850, 8850, 8850, 8850, 13162, 8830, 8850, 8527, 8850, 8850, 8850, 10681, 8850, 8850,
  /*  2296 */ 8850, 11417, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  2313 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  2330 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  2347 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 19938, 8850, 19934, 8850, 11744, 8850, 8850, 8850, 8850, 8850,
  /*  2364 */ 8850, 8850, 9635, 8850, 8850, 8841, 8850, 20092, 8850, 8850, 12438, 8859, 8850, 8690, 8850, 8850, 8850,
  /*  2381 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8538, 8850, 8850, 8850, 18672, 8850, 8850, 8850, 13179, 8850,
  /*  2398 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  2415 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  2432 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  2449 */ 8850, 8850, 8850, 15302, 8850, 8850, 15306, 8850, 19938, 8850, 8850, 8850, 8850, 8850, 8850, 15335, 8850,
  /*  2466 */ 8850, 17198, 8850, 8850, 13587, 8850, 11211, 9209, 7448, 8850, 8848, 8850, 8850, 8850, 8850, 14023, 8095,
  /*  2483 */ 14899, 13555, 8850, 15328, 8850, 8850, 8850, 12400, 18811, 8894, 18820, 19392, 8119, 13826, 10317, 8850,
  /*  2499 */ 8850, 18362, 8850, 10057, 18811, 18811, 7849, 18820, 19154, 8119, 8119, 8124, 8873, 8850, 8850, 12944,
  /*  2515 */ 8850, 18811, 18811, 8897, 18820, 7854, 8119, 8119, 8882, 8850, 18235, 8850, 8089, 18811, 8097, 18820,
  /*  2531 */ 14117, 8119, 10632, 8850, 8850, 8891, 8094, 18821, 10345, 15561, 7510, 16424, 18811, 18819, 19262, 15561,
  /*  2547 */ 8850, 8912, 14376, 9071, 12610, 16130, 7941, 8051, 15541, 19256, 14690, 11229, 9232, 9240, 9248, 10016,
  /*  2563 */ 8923, 8850, 8850, 15323, 8850, 11198, 8850, 8850, 8933, 8947, 8850, 10320, 8850, 8850, 8850, 8850, 8850,
  /*  2580 */ 7844, 13751, 9096, 8958, 8850, 10970, 8850, 8850, 8850, 19080, 18811, 8096, 18820, 15556, 8119, 8970,
  /*  2596 */ 8850, 8850, 8850, 12943, 8850, 16531, 18811, 18812, 18820, 18820, 17109, 8119, 8119, 19642, 19650, 8850,
  /*  2612 */ 18736, 8850, 14024, 18811, 8914, 18820, 18820, 10655, 8119, 13045, 10670, 8850, 8850, 8822, 18811, 7758,
  /*  2628 */ 18820, 18547, 8119, 17762, 11069, 8850, 14006, 18811, 7851, 13354, 8119, 10720, 8850, 19712, 8894, 8900,
  /*  2644 */ 8119, 10720, 14022, 8894, 17888, 18929, 15798, 14379, 18767, 17924, 8047, 15537, 15880, 8982, 8996, 10157,
  /*  2660 */ 9010, 15896, 15911, 8850, 10974, 8850, 8850, 9020, 8850, 14073, 9329, 13507, 8850, 8369, 8850, 8850, 8850,
  /*  2677 */ 8850, 16424, 18815, 7982, 9030, 8850, 8524, 8850, 8850, 8850, 14511, 9040, 7757, 18820, 15183, 8119,
  /*  2693 */ 14227, 9049, 8850, 8850, 18735, 9059, 8850, 7214, 18811, 8895, 18820, 18820, 9069, 8119, 16271, 9079,
  /*  2709 */ 8850, 8850, 10994, 8850, 17946, 18811, 7848, 18820, 15826, 8119, 8119, 13781, 8720, 8850, 8850, 11082,
  /*  2725 */ 18811, 18817, 18820, 9091, 8119, 13069, 8850, 8850, 11144, 18814, 18820, 11159, 15713, 8108, 8850, 18810,
  /*  2741 */ 8096, 16745, 15713, 8108, 7843, 8096, 9306, 13907, 9106, 9118, 9459, 14381, 17920, 9128, 16194, 7829,
  /*  2757 */ 10435, 14810, 9139, 13956, 8850, 8850, 15032, 8850, 20089, 7355, 8850, 15274, 9401, 7605, 8523, 10972,
  /*  2773 */ 8850, 8850, 8850, 8850, 19712, 12015, 16876, 9152, 8850, 8535, 8850, 8850, 8850, 11129, 18811, 18816,
  /*  2789 */ 18820, 9843, 8119, 13647, 13561, 8850, 8850, 10993, 8850, 10724, 18811, 18811, 8097, 18820, 14722, 8119,
  /*  2805 */ 8119, 17001, 9162, 8850, 8678, 9174, 16425, 18811, 18811, 18819, 18820, 16958, 8119, 9070, 9183, 8850,
  /*  2821 */ 8850, 8961, 18810, 8892, 18820, 19381, 8119, 14119, 19901, 8850, 8962, 18811, 8897, 11693, 8119, 19775,
  /*  2837 */ 8850, 14324, 7757, 18820, 13945, 19775, 8850, 17664, 16743, 7776, 9444, 11867, 17908, 19257, 9455, 13939,
  /*  2853 */ 14359, 16650, 9195, 8028, 9472, 9483, 9571, 8850, 8850, 17203, 8850, 13584, 8850, 14322, 9206, 9219, 8850,
  /*  2870 */ 8845, 10700, 8850, 8850, 8850, 8850, 9532, 14896, 17059, 13560, 8850, 15333, 11321, 8850, 8850, 19755,
  /*  2886 */ 18811, 8899, 13770, 8119, 9070, 10314, 8850, 8850, 8677, 8850, 8850, 7590, 18811, 7758, 18820, 18820,
  /*  2902 */ 10343, 8119, 8121, 18482, 10355, 8850, 12941, 8850, 19478, 18811, 8894, 18820, 18820, 8118, 8119, 16272,
  /*  2918 */ 16078, 8850, 8850, 8086, 18811, 8094, 18820, 14114, 8119, 10629, 8850, 8850, 13736, 8914, 18820, 9930,
  /*  2934 */ 15558, 11068, 8850, 17662, 18816, 17887, 15558, 11068, 19711, 18816, 13943, 12607, 10385, 7938, 10395,
  /*  2949 */ 15538, 19253, 14687, 11226, 9229, 9237, 9245, 10013, 10449, 8850, 8850, 19654, 8850, 8850, 9256, 8850,
  /*  2965 */ 13311, 8938, 7519, 8850, 9267, 8850, 8850, 8850, 8850, 14324, 7849, 9277, 9286, 8850, 10967, 8850, 8850,
  /*  2982 */ 8850, 12457, 18811, 8093, 18820, 7910, 8119, 16374, 7788, 8850, 8850, 8850, 8850, 14664, 18811, 18811,
  /*  2998 */ 18817, 18820, 10615, 8119, 8119, 20188, 19865, 8850, 8850, 8850, 14021, 18811, 18811, 8096, 18820, 13686,
  /*  3014 */ 8119, 8119, 17614, 8850, 8850, 8850, 17662, 18811, 7851, 16986, 9295, 8119, 17698, 8850, 8850, 17947,
  /*  3030 */ 7848, 17071, 8119, 15729, 8850, 19709, 18811, 8899, 9305, 15729, 8850, 9317, 17885, 9308, 12576, 11853,
  /*  3046 */ 12320, 17921, 10735, 8052, 19218, 14983, 8987, 9001, 10753, 10921, 10771, 8850, 8850, 10979, 8850, 17386,
  /*  3062 */ 8850, 8850, 9326, 9339, 8850, 8366, 8850, 8850, 8850, 8850, 8850, 12190, 7979, 10836, 9357, 8850, 8529,
  /*  3079 */ 8850, 8850, 8850, 16015, 18811, 7850, 18820, 13610, 8119, 12736, 8850, 8850, 8850, 8850, 8850, 7211,
  /*  3095 */ 18811, 8892, 18820, 18820, 19678, 8119, 8119, 16887, 8850, 8850, 8850, 8850, 14325, 18811, 7757, 18820,
  /*  3111 */ 18820, 9368, 8119, 8122, 8130, 8850, 8850, 19709, 18811, 18814, 18820, 16975, 8119, 16259, 19865, 8850,
  /*  3127 */ 16426, 18811, 18819, 18457, 8119, 15718, 8850, 14025, 8093, 16742, 8119, 15718, 14323, 8093, 8903, 18168,
  /*  3143 */ 13912, 17888, 9377, 13940, 10031, 17925, 15858, 19240, 7834, 10440, 14815, 9144, 18861, 8850, 10357, 8850,
  /*  3159 */ 8850, 9386, 8850, 15271, 9398, 13994, 8850, 8692, 8850, 8850, 8850, 8850, 19709, 8895, 9412, 16341, 8850,
  /*  3176 */ 8532, 8850, 8850, 8850, 7521, 18811, 18813, 18820, 17445, 8119, 9278, 12989, 8850, 8850, 8850, 8850, 8850,
  /*  3193 */ 19030, 18811, 8094, 18820, 18820, 13043, 8119, 16998, 13085, 8850, 8850, 8850, 8850, 17663, 18811, 18816,
  /*  3209 */ 18820, 16955, 8119, 8119, 20189, 8850, 8850, 8850, 14025, 18811, 8897, 18820, 9422, 8119, 11488, 8850,
  /*  3225 */ 8850, 8912, 8894, 18820, 9431, 9543, 8850, 8850, 17947, 7850, 13942, 9543, 8850, 12189, 7850, 16748, 9441,
  /*  3242 */ 8895, 19597, 19254, 9452, 9460, 14382, 13378, 13203, 13885, 9469, 9480, 9568, 8850, 8850, 17200, 8850,
  /*  3258 */ 20175, 9491, 8850, 11213, 9211, 7450, 8842, 8850, 8850, 8850, 8850, 8850, 14025, 14893, 17056, 12233,
  /*  3274 */ 8850, 15330, 8850, 9501, 8850, 19752, 18811, 8896, 18820, 19394, 8119, 13828, 8850, 8850, 8850, 8850,
  /*  3290 */ 8850, 12273, 18811, 18811, 7851, 18820, 12282, 8119, 8119, 8126, 8850, 8850, 8850, 8850, 19710, 18811,
  /*  3306 */ 18811, 8899, 18820, 7856, 8119, 9307, 16888, 8850, 8850, 8850, 17947, 8914, 18820, 16207, 8119, 16749,
  /*  3322 */ 10634, 8850, 14022, 18811, 8096, 10901, 8119, 15563, 8850, 16426, 18813, 18820, 19264, 15563, 8850, 18813,
  /*  3338 */ 14378, 12330, 12612, 16132, 7943, 8053, 15543, 19258, 14692, 11231, 9234, 9242, 10010, 14879, 8925, 8850,
  /*  3354 */ 15309, 15325, 8850, 11200, 8850, 7135, 9512, 9520, 8850, 10322, 8850, 8850, 8850, 8850, 8850, 7846, 13753,
  /*  3371 */ 9098, 8960, 15309, 10972, 8850, 8850, 8850, 19082, 18811, 8098, 14051, 8119, 9307, 8972, 8850, 8850, 8850,
  /*  3388 */ 8850, 8850, 16533, 18811, 18814, 18820, 18820, 17111, 8119, 20185, 19862, 8850, 8850, 8850, 8850, 9530,
  /*  3404 */ 18811, 8093, 18820, 16986, 10657, 8119, 16999, 13086, 8850, 8850, 16426, 18811, 7848, 18820, 17685, 8119,
  /*  3420 */ 17764, 8850, 8850, 7843, 7757, 18820, 9540, 19398, 13073, 8850, 8912, 8896, 8902, 19398, 13073, 14024,
  /*  3436 */ 8896, 19262, 18931, 15800, 12317, 18769, 17926, 8049, 15539, 15882, 8984, 8998, 10159, 9012, 15898, 8850,
  /*  3452 */ 8850, 10976, 8850, 8850, 9022, 8850, 14075, 9331, 13509, 8850, 8371, 8850, 8850, 8850, 8850, 16426, 18817,
  /*  3469 */ 7984, 9032, 8850, 8526, 8850, 8850, 8850, 14513, 18811, 7847, 18820, 12724, 8119, 14229, 9051, 8850, 8850,
  /*  3486 */ 8850, 8850, 14755, 18811, 18811, 8897, 18820, 19675, 8119, 8119, 16273, 8108, 8850, 8850, 8850, 14322,
  /*  3502 */ 18811, 18811, 7850, 18820, 15828, 8119, 8119, 8127, 8850, 8850, 8850, 8912, 18811, 18819, 17071, 8118,
  /*  3518 */ 8119, 13071, 19358, 8850, 7592, 18816, 14824, 8119, 15715, 8850, 14022, 18811, 8098, 16747, 15715, 8850,
  /*  3534 */ 17946, 16359, 14900, 13909, 9108, 9120, 9461, 8142, 17922, 9130, 16196, 7831, 10437, 14812, 9141, 9552,
  /*  3550 */ 8850, 8850, 18871, 8850, 20091, 8850, 8850, 15276, 9403, 8850, 8689, 8850, 8850, 8850, 8850, 8850, 19479,
  /*  3567 */ 12017, 16878, 9154, 8850, 8537, 8850, 8850, 8850, 11131, 18811, 18818, 18820, 14131, 8119, 12986, 8850,
  /*  3583 */ 8850, 8850, 8850, 8850, 10726, 18811, 8914, 18820, 18820, 14724, 8119, 8119, 17615, 8850, 8850, 8850,
  /*  3599 */ 8850, 12188, 18811, 18813, 18820, 18820, 16960, 8119, 20186, 19863, 8850, 8850, 14022, 18811, 8894, 18820,
  /*  3615 */ 11021, 8119, 16785, 8108, 8850, 19711, 18811, 8899, 16730, 8119, 10209, 8850, 7843, 7847, 14377, 8119,
  /*  3631 */ 10209, 16425, 7847, 16745, 19954, 19713, 8903, 19251, 19259, 9457, 13941, 14361, 16652, 9197, 8030, 13388,
  /*  3647 */ 9565, 7509, 8850, 15914, 8850, 8850, 7630, 7636, 9580, 9598, 7447, 8850, 8847, 8850, 8850, 8850, 8850,
  /*  3664 */ 8850, 8850, 8850, 8850, 8850, 15327, 8850, 15487, 8850, 7286, 8850, 8850, 8850, 14343, 8850, 8850, 8850,
  /*  3681 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  3698 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  3715 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 11744, 8850,
  /*  3732 */ 8850, 8850, 10943, 8850, 8850, 10947, 15301, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 14556, 8850, 8850,
  /*  3749 */ 11385, 8850, 11197, 9258, 8850, 8850, 11293, 8850, 10319, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  3766 */ 8850, 8850, 10969, 8850, 8850, 8850, 17407, 8850, 8850, 8850, 13159, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  3783 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  3800 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  3817 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8521,
  /*  3834 */ 8850, 11744, 8850, 10943, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 7168, 8850, 10973, 8850, 8850, 17388,
  /*  3851 */ 9646, 9606, 9656, 9624, 8850, 8368, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8523, 8850,
  /*  3868 */ 8850, 8850, 8850, 12715, 8850, 8850, 8133, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  3885 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  3902 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  3919 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 16323, 8850, 8850, 9644, 8850,
  /*  3936 */ 9654, 8850, 8850, 8850, 8850, 8850, 8850, 10949, 8337, 8850, 14856, 9664, 9675, 9683, 9689, 9697, 9705,
  /*  3953 */ 8214, 12113, 9726, 15391, 9734, 9742, 9750, 9768, 9776, 9784, 9792, 8850, 16768, 12643, 9800, 19436, 9818,
  /*  3970 */ 18811, 11667, 18820, 9842, 10346, 10198, 7958, 9851, 7486, 7642, 14244, 9865, 9880, 10593, 9892, 12447,
  /*  3986 */ 9909, 9939, 17745, 9951, 11612, 20079, 12928, 8850, 9959, 16946, 9971, 9983, 11767, 12556, 10003, 10024,
  /*  4002 */ 12678, 10040, 15523, 10065, 10077, 17806, 10091, 16857, 12219, 11778, 10106, 10124, 14577, 16448, 17718,
  /*  4017 */ 10137, 10150, 18431, 10167, 19555, 10178, 12058, 10193, 10206, 8850, 17663, 16742, 7775, 9443, 11866,
  /*  4032 */ 17907, 19256, 12785, 10218, 10226, 10234, 13936, 10257, 9471, 9482, 9570, 7110, 8850, 17202, 8850, 7889,
  /*  4048 */ 10271, 10279, 10287, 10295, 8850, 8844, 8850, 8850, 14636, 8850, 8850, 9531, 14895, 13551, 13559, 8850,
  /*  4064 */ 15332, 8850, 8850, 8850, 19754, 18811, 8898, 18820, 19396, 8119, 10313, 8850, 8850, 18217, 10331, 15063,
  /*  4080 */ 7589, 18811, 14978, 18820, 19850, 10342, 8119, 11182, 18481, 10354, 8850, 12940, 8850, 19712, 18811, 8893,
  /*  4096 */ 18820, 18820, 9899, 8119, 16271, 16077, 15404, 12803, 10366, 10374, 9975, 18820, 15006, 8119, 11048, 8850,
  /*  4112 */ 8850, 13735, 18811, 8098, 9929, 8119, 11067, 8850, 12189, 18815, 17886, 8119, 11067, 19710, 18815, 13942,
  /*  4128 */ 12606, 10384, 16745, 10394, 15537, 10403, 19260, 12032, 10414, 9236, 9244, 10012, 10448, 15300, 10458,
  /*  4143 */ 19653, 7057, 13846, 10469, 10475, 10483, 10491, 9522, 12653, 14961, 20014, 13511, 8850, 9810, 15675,
  /*  4158 */ 10888, 10499, 10513, 15981, 8592, 18963, 19787, 10528, 17302, 10547, 19032, 10565, 14053, 10577, 16373,
  /*  4173 */ 8974, 8850, 20203, 17836, 15056, 14663, 15173, 10588, 12305, 10601, 10614, 15020, 10624, 20187, 19646,
  /*  4188 */ 7606, 17204, 10939, 10642, 18810, 7593, 8095, 18820, 10651, 8119, 13629, 10666, 10678, 16931, 16412,
  /*  4203 */ 18033, 13433, 7850, 14717, 18551, 15202, 17697, 12856, 8109, 10690, 7847, 13680, 13358, 19400, 10698,
  /*  4218 */ 11719, 13300, 10708, 11037, 10716, 10116, 9530, 10185, 19059, 12575, 7848, 12319, 17920, 10734, 8051,
  /*  4233 */ 15229, 10744, 8986, 9000, 10752, 10762, 10770, 17412, 8850, 10978, 10780, 7072, 10788, 10795, 10801,
  /*  4248 */ 10809, 8850, 8365, 8850, 8850, 8850, 10821, 16817, 16442, 19570, 10835, 15968, 16498, 8528, 10844, 8850,
  /*  4264 */ 10852, 10869, 10882, 11950, 10896, 10914, 10930, 12735, 8850, 14063, 13422, 10938, 8850, 16597, 18811,
  /*  4279 */ 18381, 8899, 13814, 19677, 8119, 17464, 10957, 9083, 13455, 10990, 8850, 11002, 11010, 20136, 11030,
  /*  4294 */ 18820, 11056, 13626, 19167, 8716, 8850, 13465, 11078, 11093, 18630, 18820, 11103, 8119, 11111, 11119,
  /*  4309 */ 16814, 11140, 14782, 17045, 11155, 11169, 15717, 11195, 14024, 8092, 16741, 8119, 15717, 11208, 8283,
  /*  4324 */ 18426, 15026, 13911, 9110, 11221, 13939, 14217, 10083, 9916, 11239, 7833, 10439, 14814, 9143, 18860,
  /*  4339 */ 17287, 10356, 9718, 18246, 16913, 11264, 11272, 11280, 11288, 11301, 11309, 11317, 19736, 11332, 11340,
  /*  4354 */ 11348, 11356, 11364, 13708, 11372, 11398, 19296, 11406, 8850, 11425, 14089, 11434, 11442, 11466, 11474,
  /*  4369 */ 18657, 12988, 11497, 11505, 11513, 11521, 17566, 11529, 11537, 11545, 11553, 11561, 11585, 11593, 11601,
  /*  4384 */ 11609, 17644, 11620, 18026, 11628, 11652, 11660, 11677, 11690, 11701, 19576, 17468, 18986, 9187, 11709,
  /*  4399 */ 11727, 11753, 11911, 11786, 11794, 11802, 11826, 19729, 19440, 11834, 11843, 11862, 11875, 10142, 19771,
  /*  4414 */ 18580, 11896, 11904, 12549, 11919, 11927, 11935, 11943, 11958, 11966, 11986, 11085, 12001, 12009, 12025,
  /*  4429 */ 12051, 12066, 12084, 12098, 12106, 8032, 12121, 9567, 8850, 9807, 7317, 10535, 12134, 12142, 12154, 12160,
  /*  4445 */ 12168, 7449, 12198, 8849, 8850, 17275, 8304, 15345, 7648, 14095, 12212, 12232, 14340, 20061, 8850, 12529,
  /*  4461 */ 12242, 12401, 12261, 18385, 18820, 18792, 8119, 13827, 10318, 8850, 8850, 18363, 8850, 12272, 18811,
  /*  4476 */ 11147, 7850, 18820, 12281, 8119, 10580, 8125, 8874, 8850, 7090, 8850, 12290, 18811, 13028, 8898, 15822,
  /*  4492 */ 7855, 13946, 8119, 8883, 8850, 8850, 19179, 8090, 16005, 8098, 14110, 14118, 19214, 10633, 8850, 13087,
  /*  4508 */ 18811, 8095, 18822, 8119, 15562, 8850, 16425, 18812, 18820, 19263, 11818, 8850, 12301, 12313, 12329,
  /*  4523 */ 12611, 16131, 7942, 8052, 15542, 19257, 14691, 11230, 9233, 9241, 12338, 15291, 8924, 8850, 8850, 15324,
  /*  4539 */ 12346, 12390, 12355, 12363, 12371, 12379, 8850, 10321, 8850, 12398, 8850, 8850, 8850, 7845, 13752, 9097,
  /*  4555 */ 16764, 8850, 10971, 8850, 12409, 8850, 19081, 18811, 8097, 18820, 15557, 8119, 8971, 8850, 8850, 8850,
  /*  4571 */ 14531, 8812, 12871, 18811, 18813, 18820, 18820, 12418, 8119, 9070, 19861, 8850, 18346, 12429, 11426,
  /*  4586 */ 18807, 16717, 8092, 18820, 12446, 10656, 19095, 13046, 12455, 19979, 8850, 16425, 18811, 7847, 18820,
  /*  4601 */ 17684, 8119, 17763, 8850, 12466, 14325, 10376, 18820, 12484, 17083, 12496, 19114, 7723, 13349, 12504,
  /*  4616 */ 11888, 12519, 12542, 14285, 12564, 12572, 12585, 12599, 18768, 17925, 8048, 15538, 15881, 8983, 8997,
  /*  4631 */ 10158, 12620, 12628, 15912, 8850, 10975, 8850, 8850, 9021, 8850, 14074, 9330, 8659, 19914, 12640, 8850,
  /*  4647 */ 12651, 12661, 18601, 11993, 16852, 12671, 12686, 8850, 19538, 12707, 8850, 20076, 14512, 18811, 11850,
  /*  4662 */ 18820, 12723, 8119, 12732, 9050, 8850, 8850, 8850, 11070, 7207, 18811, 18811, 16951, 18820, 13866, 8119,
  /*  4678 */ 8119, 16674, 12744, 8850, 8850, 8850, 20165, 18844, 18811, 17675, 18820, 15827, 12752, 8119, 8126, 8850,
  /*  4694 */ 12762, 8850, 19478, 17948, 18818, 17325, 8117, 14734, 13070, 7146, 8850, 17663, 18815, 18820, 18461,
  /*  4709 */ 15714, 8850, 14021, 18811, 8097, 16746, 15714, 17530, 20133, 8097, 10658, 12772, 11015, 12793, 9460, 8141,
  /*  4725 */ 17921, 9129, 16195, 7830, 10436, 14811, 9140, 13957, 8850, 12801, 15033, 10047, 12811, 12819, 12827,
  /*  4740 */ 12834, 12842, 8850, 15066, 12854, 12945, 12864, 12882, 12897, 15996, 12905, 17601, 12913, 8850, 12925,
  /*  4755 */ 12936, 8850, 8623, 18999, 12953, 14502, 12961, 12969, 12977, 12985, 15785, 12997, 13005, 9616, 8762,
  /*  4770 */ 10725, 13013, 13021, 12038, 14999, 13039, 13054, 13062, 13081, 8850, 16170, 13095, 9586, 9166, 14592,
  /*  4785 */ 10557, 13112, 13665, 13124, 8119, 13132, 13140, 13152, 13170, 13188, 13031, 14680, 12043, 13196, 19099,
  /*  4800 */ 13212, 13220, 13234, 13242, 15088, 13250, 13258, 18304, 17159, 16228, 13266, 10874, 13274, 13287, 19776,
  /*  4815 */ 13308, 7758, 16744, 12224, 13320, 13328, 13342, 19258, 13294, 13366, 13374, 16651, 9196, 10505, 13387,
  /*  4830 */ 12126, 9572, 7472, 9259, 8850, 8850, 13397, 14851, 8709, 13412, 9220, 8850, 8846, 8850, 8850, 8850, 8850,
  /*  4847 */ 14021, 8093, 14897, 17060, 13561, 15326, 8850, 8850, 17848, 8850, 19756, 8892, 18820, 13771, 8119, 13612,
  /*  4863 */ 10315, 8850, 8850, 8850, 8850, 8850, 7591, 18811, 7847, 18820, 18820, 10344, 8119, 8122, 8130, 8850, 8850,
  /*  4880 */ 8850, 8850, 8912, 18811, 8895, 18820, 7852, 8119, 8119, 16273, 8108, 8850, 8850, 14325, 18811, 8095,
  /*  4896 */ 18820, 10097, 8119, 10630, 8850, 8850, 9530, 8092, 18820, 10905, 15559, 11069, 8850, 17663, 18817, 17888,
  /*  4912 */ 15559, 11069, 19712, 18817, 13944, 12608, 10386, 7939, 8049, 15539, 19254, 14688, 11227, 9230, 9238, 9246,
  /*  4928 */ 10014, 10450, 8850, 12434, 19655, 8850, 11196, 9257, 8850, 13312, 8939, 7520, 8850, 9268, 13420, 8850,
  /*  4944 */ 8850, 8850, 14325, 13749, 9094, 9287, 8850, 10968, 8850, 8850, 8850, 12458, 18811, 8094, 18820, 7911,
  /*  4960 */ 8119, 16375, 7789, 8850, 8850, 8850, 8850, 14665, 18811, 18811, 18818, 18820, 10616, 8119, 8119, 20189,
  /*  4976 */ 16692, 8850, 8850, 8850, 14022, 13430, 18811, 13441, 18820, 18277, 8119, 8119, 17615, 8850, 8850, 8850,
  /*  4992 */ 17663, 18811, 18820, 16987, 10345, 9070, 17699, 8850, 14322, 18811, 7849, 17072, 8119, 15730, 8850, 19710,
  /*  5008 */ 8892, 18820, 9306, 15730, 8850, 9318, 17886, 9309, 12577, 11854, 12321, 17922, 10736, 8053, 19219, 14984,
  /*  5024 */ 8988, 9002, 10754, 10922, 10772, 8850, 13453, 10980, 13463, 13473, 13481, 13489, 13497, 13505, 16505,
  /*  5039 */ 8367, 16091, 13519, 17547, 10334, 13529, 13537, 13545, 13570, 13578, 9269, 8530, 10827, 7790, 14262,
  /*  5054 */ 13595, 16602, 11760, 13603, 13620, 13637, 16625, 17403, 8850, 7874, 8850, 8850, 12889, 15755, 13655,
  /*  5069 */ 13673, 15103, 13694, 16782, 13702, 16888, 16898, 13716, 13725, 8850, 7843, 12874, 13745, 18820, 13761,
  /*  5084 */ 9369, 11978, 13779, 13789, 8850, 13804, 19710, 16714, 18815, 13813, 16976, 13822, 16260, 13836, 19742,
  /*  5099 */ 13854, 8265, 13862, 13874, 9414, 15719, 7879, 14026, 8094, 13882, 17903, 18724, 14324, 16355, 13894,
  /*  5114 */ 13905, 13913, 17889, 9378, 13941, 10032, 17926, 15859, 19241, 13921, 13929, 15216, 13954, 10981, 19665,
  /*  5129 */ 10358, 19017, 8850, 13965, 13972, 13979, 13987, 13995, 14020, 8693, 14003, 8850, 14020, 14014, 14034,
  /*  5144 */ 14042, 18925, 16342, 8803, 8533, 16117, 14061, 14071, 14083, 9872, 17041, 14103, 14127, 14140, 14160,
  /*  5159 */ 14168, 14186, 8850, 8850, 19120, 15075, 14776, 14194, 16241, 14205, 19687, 14146, 14225, 16999, 13086,
  /*  5174 */ 14237, 16180, 14255, 14270, 14278, 9884, 11669, 14293, 14301, 17459, 15198, 20190, 8850, 8850, 8850, 9530,
  /*  5190 */ 18811, 8898, 18820, 9423, 8119, 11489, 8850, 8850, 8913, 8895, 18820, 14118, 9544, 14321, 14322, 17339,
  /*  5206 */ 7975, 13279, 9544, 18873, 17662, 7933, 12754, 9442, 8896, 19598, 10406, 14333, 17138, 14357, 13379, 13204,
  /*  5222 */ 13886, 14370, 9481, 9569, 8850, 11125, 14390, 11635, 11734, 14401, 14409, 14416, 14424, 12476, 14432,
  /*  5237 */ 14445, 17629, 12917, 14463, 14471, 14479, 14487, 14495, 12234, 14510, 14521, 14539, 14547, 14570, 14585,
  /*  5252 */ 17316, 17177, 14603, 14621, 9834, 14629, 19748, 14647, 8850, 11412, 14662, 14673, 14700, 18811, 14712,
  /*  5267 */ 18820, 16038, 14732, 8119, 14742, 8850, 13562, 14753, 14764, 14790, 18811, 14804, 14823, 15702, 9830,
  /*  5282 */ 9297, 10245, 14833, 14841, 14864, 14872, 17821, 14888, 14909, 14917, 14930, 14938, 14946, 14954, 14972,
  /*  5297 */ 19144, 14992, 15014, 15041, 15049, 15074, 15083, 15096, 15115, 9995, 15123, 8785, 15137, 15145, 15153,
  /*  5312 */ 15167, 15191, 15210, 15224, 15237, 15245, 15253, 15261, 9235, 9243, 15285, 14880, 15299, 8850, 15318,
  /*  5327 */ 12699, 15343, 15353, 15360, 15368, 15376, 8950, 15384, 15416, 15424, 15436, 15444, 15452, 15460, 15468,
  /*  5342 */ 15476, 15495, 12663, 15503, 7258, 15511, 15519, 16928, 17309, 15531, 11682, 15551, 8295, 15571, 8973,
  /*  5357 */ 7884, 12253, 13226, 17165, 18052, 15579, 19835, 17580, 15815, 19877, 15587, 15595, 19637, 15606, 15614,
  /*  5372 */ 15628, 8850, 7269, 9317, 18689, 8094, 17788, 13684, 19265, 17759, 17000, 8850, 15638, 8850, 17713, 18811,
  /*  5388 */ 19378, 18820, 15646, 8119, 15658, 15671, 8850, 15683, 15695, 17783, 15710, 15727, 15738, 8850, 15749,
  /*  5403 */ 19499, 16362, 15766, 15783, 14025, 8897, 19263, 15793, 15808, 15836, 15844, 15852, 15867, 15875, 15883,
  /*  5418 */ 8985, 8999, 18520, 15891, 15906, 8850, 8639, 10977, 7227, 17027, 15922, 15428, 15934, 15942, 13510, 10964,
  /*  5434 */ 15333, 15741, 13731, 8748, 13842, 16427, 15950, 13334, 15967, 15977, 8527, 8477, 15989, 8850, 16013,
  /*  5449 */ 16023, 17732, 16031, 16063, 11176, 16071, 16087, 16099, 7690, 16113, 8850, 14756, 18811, 16125, 8898,
  /*  5464 */ 18452, 19676, 8119, 16140, 10249, 16150, 16168, 17364, 16178, 16188, 14595, 18811, 7851, 16205, 11568,
  /*  5479 */ 19623, 8120, 8128, 16215, 8850, 16226, 16236, 18514, 18820, 16249, 8119, 16257, 13072, 8850, 16424, 18811,
  /*  5495 */ 18817, 14825, 8119, 15716, 8155, 18499, 8914, 18820, 16268, 16050, 8850, 8091, 8901, 14901, 13910, 9109,
  /*  5511 */ 11187, 16282, 16290, 17923, 9131, 16197, 7832, 10438, 14813, 9142, 18859, 8850, 8850, 18872, 8850, 20092,
  /*  5527 */ 8850, 14021, 15277, 9404, 8850, 8690, 8850, 16298, 9760, 16314, 16308, 16331, 11882, 16339, 15483, 8850,
  /*  5543 */ 8538, 8850, 8850, 8850, 11132, 18811, 18819, 17443, 14132, 8120, 12987, 8850, 11715, 8850, 8850, 8850,
  /*  5559 */ 16350, 18811, 8092, 18820, 18820, 16370, 8119, 13044, 17616, 8850, 8850, 8850, 8850, 12189, 18811, 18814,
  /*  5575 */ 18820, 18820, 16961, 8119, 20187, 19864, 8850, 8850, 14023, 18811, 8895, 18820, 11022, 8119, 16786, 8850,
  /*  5591 */ 8850, 19712, 8892, 18820, 16731, 18462, 10210, 8850, 7844, 7848, 14378, 18462, 10210, 16426, 16383, 16391,
  /*  5607 */ 19955, 19714, 8904, 19252, 19260, 9458, 14380, 14362, 16653, 9198, 8031, 13389, 9566, 8850, 8850, 16405,
  /*  5623 */ 8850, 16423, 16435, 16456, 16462, 16470, 7448, 16478, 14437, 14174, 16491, 16517, 16525, 16541, 16549,
  /*  5638 */ 16557, 16565, 8850, 15926, 16590, 16610, 8850, 16618, 8005, 16645, 16661, 16669, 11481, 16682, 16690,
  /*  5653 */ 8850, 16700, 12347, 15129, 7585, 16708, 12264, 16725, 16739, 16757, 16776, 18554, 16794, 8132, 8160,
  /*  5668 */ 16807, 12534, 16825, 16839, 16847, 17778, 16865, 14613, 12421, 16873, 16886, 16896, 16906, 16921, 16939,
  /*  5683 */ 17866, 16969, 16984, 14922, 16995, 17009, 17022, 8850, 17035, 18694, 19804, 17053, 11063, 12178, 10643,
  /*  5698 */ 18811, 17069, 17080, 17480, 17091, 8912, 14376, 9071, 12610, 16130, 12488, 17102, 17119, 19256, 17132,
  /*  5713 */ 17152, 17173, 9240, 12090, 17185, 8923, 8850, 8609, 17212, 17224, 17232, 17240, 17248, 17256, 17264, 7532,
  /*  5729 */ 14455, 8850, 17272, 17283, 17295, 19423, 17333, 17350, 19700, 17358, 17376, 17396, 8850, 8794, 17420,
  /*  5744 */ 17433, 19138, 18534, 17441, 17453, 17476, 8970, 7869, 17492, 17488, 8850, 8850, 17500, 10552, 11095,
  /*  5759 */ 17508, 18820, 17516, 11573, 11161, 17524, 8850, 17542, 12076, 17559, 17574, 9041, 19201, 18820, 17588,
  /*  5774 */ 17596, 13897, 17609, 17624, 17637, 8850, 17657, 7215, 17672, 13116, 17683, 9433, 17693, 15663, 17707,
  /*  5789 */ 17726, 19372, 7904, 17740, 17753, 10720, 16831, 17772, 8894, 8900, 8119, 17796, 17814, 18848, 19055,
  /*  5804 */ 17829, 17860, 17897, 17916, 17934, 17942, 15537, 17956, 17964, 12779, 17972, 9010, 15896, 15911, 8850,
  /*  5819 */ 9857, 8850, 12249, 17980, 17987, 17995, 18003, 10813, 18011, 15398, 18019, 18045, 18060, 18068, 18076,
  /*  5834 */ 18084, 18092, 18100, 13796, 18108, 8850, 18116, 18124, 18132, 18140, 18148, 18156, 18176, 18184, 18192,
  /*  5849 */ 18205, 18213, 18225, 18233, 18243, 18254, 18262, 19493, 18270, 18292, 14608, 18312, 11973, 18320, 18328,
  /*  5864 */ 18339, 18358, 18371, 19349, 18393, 18414, 18439, 18447, 18470, 19890, 9901, 18478, 18490, 18615, 9557,
  /*  5879 */ 18507, 18528, 18542, 18562, 18570, 18588, 12511, 18596, 18609, 18623, 14197, 18638, 18650, 15650, 16055,
  /*  5894 */ 18665, 18682, 18702, 18710, 18718, 18732, 18744, 18752, 18760, 18777, 18785, 18800, 9459, 14381, 17920,
  /*  5909 */ 9128, 16194, 18284, 18830, 18838, 9139, 18856, 8850, 8850, 18869, 9504, 20102, 18881, 18895, 18887, 18903,
  /*  5925 */ 7605, 8523, 18911, 8850, 8850, 17368, 14528, 12293, 18919, 18939, 18952, 8850, 8535, 9175, 18960, 8850,
  /*  5941 */ 18971, 18811, 8015, 18820, 18979, 8119, 19591, 18994, 19007, 8850, 16582, 19015, 19025, 14796, 19040,
  /*  5956 */ 10263, 19048, 19613, 14152, 19067, 16397, 8850, 19075, 8850, 16578, 7815, 17871, 18811, 9923, 18820,
  /*  5971 */ 18299, 19090, 9070, 19107, 12183, 8850, 9390, 19132, 8892, 19152, 11019, 19162, 14119, 19175, 10069,
  /*  5986 */ 19187, 19195, 18420, 10569, 19209, 18576, 19227, 14324, 7757, 18820, 13945, 19775, 8850, 17664, 16743,
  /*  6001 */ 7776, 17124, 19236, 19249, 19257, 9455, 13939, 14359, 16650, 19273, 14308, 9472, 19281, 9571, 8850, 8355,
  /*  6017 */ 19289, 9613, 16631, 17014, 20207, 19309, 19317, 8850, 8845, 8850, 8850, 8850, 8850, 8850, 19331, 11449,
  /*  6033 */ 17059, 13560, 19339, 15333, 8850, 8850, 19357, 19366, 8010, 13661, 19389, 10240, 16045, 10314, 8850, 8850,
  /*  6049 */ 18331, 8850, 19975, 7590, 17876, 7758, 13445, 18820, 10343, 11043, 8121, 8129, 8850, 8850, 8850, 8850,
  /*  6065 */ 19478, 18811, 8894, 18820, 18820, 8118, 8119, 16272, 8107, 8850, 8850, 14324, 18811, 8094, 18820, 10096,
  /*  6081 */ 8119, 10629, 19923, 8850, 14025, 8914, 18820, 10904, 15558, 19408, 8850, 17662, 18816, 17887, 15558,
  /*  6096 */ 11068, 19711, 18816, 13943, 19416, 10385, 7938, 10395, 15538, 19253, 14687, 11226, 9229, 9237, 9245,
  /*  6111 */ 10013, 10449, 8850, 8850, 17842, 16300, 10539, 19431, 16105, 19448, 19456, 7519, 8850, 9267, 8850, 8850,
  /*  6127 */ 8850, 8850, 14324, 10428, 19464, 19472, 8850, 10967, 8850, 20027, 8850, 12457, 18811, 8093, 18820, 7910,
  /*  6143 */ 8119, 16374, 7788, 8850, 8850, 8850, 8850, 14664, 18811, 18811, 18817, 18820, 10615, 8119, 8119, 20188,
  /*  6159 */ 19865, 8850, 20036, 8850, 14021, 19487, 18811, 17322, 18820, 17144, 8119, 8119, 17614, 7338, 8850, 8850,
  /*  6175 */ 17662, 19507, 12591, 15107, 19515, 16142, 17698, 8850, 8850, 17947, 7848, 17071, 8119, 15729, 8850, 19709,
  /*  6191 */ 18811, 8899, 9305, 15729, 8850, 9317, 17885, 9308, 12576, 11853, 12320, 17921, 10735, 8052, 19218, 14983,
  /*  6207 */ 8987, 9001, 10753, 10921, 12632, 8850, 8850, 10979, 8850, 17386, 8850, 8850, 19523, 19531, 8850, 8833,
  /*  6223 */ 7296, 8850, 18674, 12073, 19550, 19563, 19584, 10836, 15969, 7170, 19542, 16572, 8850, 8850, 16015, 18406,
  /*  6239 */ 7850, 19606, 13610, 19631, 18197, 19663, 8850, 8850, 8850, 8850, 7211, 18811, 8892, 18820, 18820, 19678,
  /*  6255 */ 8119, 8119, 16887, 8850, 8850, 7114, 8850, 14770, 17342, 7757, 18820, 19673, 9990, 11813, 8122, 14745,
  /*  6271 */ 8850, 8850, 19709, 18400, 18814, 19686, 16975, 19695, 16259, 19865, 8850, 16426, 18811, 18819, 18457,
  /*  6286 */ 8119, 15718, 8850, 14025, 8093, 16742, 8119, 15718, 14323, 8093, 8903, 18168, 13912, 17888, 9377, 13940,
  /*  6302 */ 10031, 17925, 15858, 19240, 7834, 10440, 14815, 9144, 18861, 8850, 10357, 8850, 8850, 9386, 8850, 15271,
  /*  6318 */ 9398, 12846, 8850, 8692, 14964, 8850, 8850, 19708, 15408, 17881, 19722, 18944, 12410, 8532, 8850, 8850,
  /*  6334 */ 8850, 10129, 18811, 14704, 18820, 19764, 8119, 13644, 12989, 19784, 8850, 8850, 8169, 8850, 19795, 19839,
  /*  6350 */ 8094, 19812, 18820, 19618, 11577, 16998, 13085, 14451, 8850, 7327, 8850, 19820, 19828, 18816, 19847,
  /*  6365 */ 16955, 15598, 8119, 19858, 8850, 8850, 10305, 14025, 15687, 19801, 19874, 19885, 11808, 19898, 8850,
  /*  6380 */ 19913, 8912, 8894, 18820, 9431, 9543, 19922, 19931, 10421, 15179, 18163, 9543, 7061, 9963, 9824, 19949,
  /*  6396 */ 9441, 8895, 19597, 19254, 9452, 9460, 14382, 13378, 13203, 13885, 9469, 9480, 9568, 8850, 8850, 17200,
  /*  6412 */ 8850, 20175, 11741, 8850, 11213, 9211, 7450, 8842, 8850, 8850, 8850, 8850, 8850, 14025, 14893, 17056,
  /*  6428 */ 12233, 8850, 15330, 8850, 8850, 8850, 19752, 18811, 8896, 18820, 19394, 8119, 13828, 8850, 8850, 8850,
  /*  6444 */ 8850, 8850, 12273, 18811, 18811, 7851, 18820, 12282, 8119, 8119, 8126, 8850, 8850, 8850, 8850, 19710,
  /*  6460 */ 18811, 18811, 8899, 18820, 7856, 8119, 9307, 16888, 8850, 8850, 8850, 17947, 8914, 18820, 16207, 8119,
  /*  6476 */ 16749, 10634, 8850, 14022, 18811, 8096, 10901, 8119, 15563, 8850, 16426, 18813, 18820, 19264, 15563, 8850,
  /*  6492 */ 18813, 14378, 12330, 12612, 16132, 7943, 8053, 15543, 19258, 14692, 11231, 9234, 9242, 10010, 14879,
  /*  6507 */ 17195, 8850, 7462, 19963, 19993, 19987, 19969, 7193, 20001, 20009, 8850, 10322, 8850, 20026, 8850, 8850,
  /*  6523 */ 8850, 18673, 14345, 8850, 8850, 15309, 10972, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  6540 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  6557 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  6574 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  6591 */ 8850, 8850, 11743, 8850, 8850, 8520, 8850, 10946, 8850, 8850, 8850, 8850, 8850, 8850, 7124, 8850, 8850,
  /*  6608 */ 19905, 13805, 20035, 20044, 20049, 20057, 20069, 13509, 8850, 8371, 8850, 8850, 8231, 8850, 20087, 8850,
  /*  6624 */ 13717, 8850, 8850, 8526, 8850, 8850, 8850, 10680, 8850, 8850, 8850, 11416, 8850, 8850, 8850, 8850, 8850,
  /*  6641 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  6658 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  6675 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  6692 */ 19937, 8850, 19933, 8850, 11743, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 9634, 8850, 8850, 20100, 8850,
  /*  6709 */ 8236, 20110, 20118, 20126, 20144, 8850, 8689, 8850, 20162, 8181, 8850, 8180, 8850, 8850, 8850, 8850, 8850,
  /*  6726 */ 8537, 8850, 8850, 8850, 12473, 8850, 8850, 8850, 20173, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  6743 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  6760 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  6777 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 15301, 8850, 8850, 15305,
  /*  6794 */ 8850, 19937, 8850, 8850, 8850, 8850, 8850, 8850, 15334, 7509, 8850, 15914, 8850, 8850, 13586, 8850, 8850,
  /*  6811 */ 10948, 9221, 8850, 8847, 8850, 8850, 8850, 8850, 14022, 8094, 14898, 17061, 8850, 15327, 8850, 8850, 8850,
  /*  6828 */ 8384, 18811, 8893, 18820, 18642, 8119, 13825, 10316, 8850, 8850, 8850, 8850, 14511, 7592, 18811, 7848,
  /*  6844 */ 18820, 19153, 10345, 8119, 8123, 8131, 8850, 8850, 8850, 8850, 8913, 18811, 8896, 18820, 7853, 8119, 8119,
  /*  6861 */ 16274, 8850, 8850, 8850, 7843, 18811, 8096, 18820, 10098, 8119, 10631, 8850, 8850, 9317, 8093, 18820,
  /*  6877 */ 10906, 15560, 8850, 8850, 7592, 18818, 19261, 15560, 8850, 19478, 18818, 20184, 12609, 8094, 7940, 8050,
  /*  6893 */ 15540, 19255, 14689, 11228, 9231, 9239, 9247, 10015, 20198, 8850, 8850, 8850, 19228, 8850, 20215, 20229,
  /*  6909 */ 20221, 20237, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  6926 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  6943 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  6960 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  6977 */ 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850, 8850,
  /*  6994 */ 8850, 8850, 8850, 8850, 8850, 8850, 7110, 20249, 20260, 20265, 20265, 20265, 20265, 20265, 20265, 20267,
  /*  7010 */ 20265, 20263, 20265, 20265, 20265, 20265, 20265, 20265, 20265, 20265, 20265, 20265, 20251, 20265, 20265,
  /*  7025 */ 20265, 20265, 20265, 20257, 20265, 20265, 20265, 20265, 20315, 20318, 20273, 20405, 20280, 20280, 20280,
  /*  7040 */ 20280, 20280, 20280, 20285, 20290, 20290, 20286, 20280, 20281, 20281, 20280, 20295, 29008, 20316, 20318,
  /*  7055 */ 20402, 20406, 20318, 20318, 20318, 20301, 20318, 20318, 20318, 20318, 20318, 30486, 20318, 20318, 20318,
  /*  7070 */ 27313, 20276, 20318, 20318, 20318, 20318, 20318, 20318, 27305, 26273, 20411, 20318, 20318, 20318, 24584,
  /*  7085 */ 23242, 24584, 24584, 20311, 20658, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 21012, 23270, 24584,
  /*  7100 */ 23269, 23270, 23242, 20324, 20317, 20318, 20318, 20318, 20318, 24432, 20318, 20318, 20296, 22061, 20318,
  /*  7115 */ 20318, 20318, 20318, 20318, 30312, 20318, 20318, 20332, 20338, 20318, 20318, 20318, 20318, 20318, 20318,
  /*  7130 */ 20314, 20318, 20318, 20318, 20367, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 21274, 20318, 20486,
  /*  7145 */ 20366, 20318, 20318, 20318, 20318, 20318, 20318, 27386, 20318, 20318, 20356, 20364, 20363, 20364, 20364,
  /*  7160 */ 20364, 20365, 20318, 27347, 20358, 20318, 27346, 20359, 20318, 20314, 20318, 20318, 20318, 20318, 20318,
  /*  7175 */ 20318, 20318, 30283, 27348, 20318, 20318, 20318, 20364, 20364, 27347, 27347, 20318, 20365, 20372, 20318,
  /*  7190 */ 20318, 20404, 20408, 20318, 20318, 20318, 30199, 30196, 30196, 30196, 30199, 20316, 20318, 20318, 20318,
  /*  7205 */ 20318, 29024, 20318, 20318, 20318, 22914, 20318, 20318, 20318, 28441, 29748, 29748, 29748, 29748, 29748,
  /*  7220 */ 29748, 29748, 28723, 20318, 20318, 29016, 29024, 20318, 20318, 20318, 20318, 20318, 26532, 26706, 20318,
  /*  7235 */ 29017, 27303, 20318, 20660, 20318, 20318, 29017, 20318, 20318, 20318, 30400, 20318, 20318, 20318, 20318,
  /*  7250 */ 20318, 27346, 20318, 20318, 29019, 29024, 29016, 29018, 20318, 20318, 20318, 20318, 20318, 26944, 20318,
  /*  7265 */ 20318, 20318, 20432, 29024, 20318, 20318, 20318, 20318, 20318, 20318, 27767, 20318, 20318, 20434, 29023,
  /*  7280 */ 20433, 20429, 29022, 29020, 20315, 20438, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 21459, 20318,
  /*  7295 */ 20439, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 30272, 20443, 20445, 20447, 29035, 20316, 20318,
  /*  7310 */ 20402, 20406, 20313, 20317, 20318, 28514, 28537, 20318, 20318, 20318, 20318, 25335, 20318, 20963, 20318,
  /*  7325 */ 20318, 20459, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 30398, 20318, 30425, 23262, 20318, 20318,
  /*  7340 */ 20318, 20318, 20318, 20318, 28077, 20318, 20416, 20318, 20318, 20318, 20422, 20318, 21463, 20455, 20472,
  /*  7355 */ 20659, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 21460, 20425, 21463, 20424, 20424, 21462, 20477,
  /*  7370 */ 20318, 20318, 20318, 23355, 21115, 21115, 21115, 21115, 21115, 21116, 21450, 21120, 20491, 20497, 20318,
  /*  7385 */ 20318, 20318, 20318, 20318, 20318, 20318, 30400, 20513, 20515, 20515, 20515, 20515, 20515, 20515, 20515,
  /*  7400 */ 20515, 20515, 20523, 20515, 20524, 20528, 20517, 20534, 20515, 20508, 20515, 20536, 20515, 20515, 20515,
  /*  7415 */ 20515, 20515, 20517, 20513, 20515, 20515, 20519, 20511, 20540, 20540, 20540, 20540, 20542, 20514, 20515,
  /*  7430 */ 20515, 20516, 20540, 20541, 20517, 20540, 20550, 20515, 20515, 20518, 20540, 20548, 20546, 20560, 20561,
  /*  7445 */ 20540, 20315, 20318, 20410, 20405, 20409, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 20315, 20318,
  /*  7460 */ 20318, 20567, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 30497, 24430, 24433, 20318, 20318, 20318,
  /*  7475 */ 20318, 20318, 20318, 20368, 20318, 20318, 27304, 20318, 20661, 20318, 24431, 20318, 20318, 20318, 23461,
  /*  7490 */ 20318, 20318, 20318, 21622, 20580, 20580, 20580, 20580, 20580, 24433, 20318, 20573, 20318, 24433, 20318,
  /*  7505 */ 24430, 20318, 20579, 20575, 20316, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 26665, 20584, 20402,
  /*  7520 */ 20406, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 21492, 20318, 20318, 27657, 20318, 20318, 20318,
  /*  7535 */ 20318, 20318, 20318, 29042, 20318, 20318, 20318, 28540, 20624, 20624, 20624, 20624, 20624, 27656, 20318,
  /*  7550 */ 27655, 20624, 20624, 20624, 28542, 20624, 20318, 20605, 27658, 20605, 20610, 20615, 20617, 20611, 20623,
  /*  7565 */ 20619, 20317, 20318, 20403, 20407, 20637, 20318, 27302, 20636, 20659, 20318, 20318, 25491, 20643, 20643,
  /*  7580 */ 20643, 20643, 20643, 25492, 20651, 20318, 20318, 20318, 30528, 20318, 20318, 28439, 28443, 29748, 29748,
  /*  7595 */ 29748, 29748, 29748, 29748, 29748, 26422, 20646, 20318, 20318, 20404, 20408, 20318, 20318, 20318, 20318,
  /*  7610 */ 20318, 20318, 20318, 24661, 20318, 24817, 20318, 20318, 20318, 20318, 20318, 20318, 20409, 21462, 20318,
  /*  7625 */ 23000, 20595, 20318, 20318, 23004, 20318, 27303, 20318, 20660, 20318, 20318, 27942, 27942, 27942, 27942,
  /*  7640 */ 21327, 21328, 20318, 20318, 20318, 23697, 20318, 21627, 20318, 20318, 20318, 24066, 28249, 26683, 29748,
  /*  7655 */ 24071, 23004, 26275, 23002, 23001, 23003, 20593, 20594, 20667, 20667, 20667, 20667, 20667, 20667, 20667,
  /*  7670 */ 20667, 20595, 20318, 20318, 20318, 20318, 20318, 27240, 20318, 20318, 20593, 23002, 20318, 22999, 20667,
  /*  7685 */ 20315, 20318, 20410, 23239, 21464, 20318, 20318, 20318, 20318, 20318, 27453, 20318, 20318, 27744, 20676,
  /*  7700 */ 20676, 20676, 20676, 20676, 20676, 20681, 20684, 20318, 20318, 20318, 20318, 20676, 20676, 20676, 20676,
  /*  7715 */ 20676, 20676, 20676, 20677, 23050, 23055, 20402, 20406, 20318, 20318, 20318, 24313, 29748, 29748, 29748,
  /*  7730 */ 24318, 20318, 20689, 20318, 20318, 20318, 20318, 20318, 20318, 20415, 21463, 20484, 24583, 20318, 20318,
  /*  7745 */ 22223, 20318, 20694, 20318, 20318, 20319, 20316, 20318, 20318, 20504, 20503, 20699, 29748, 29748, 29748,
  /*  7760 */ 29748, 29748, 29748, 29748, 20858, 20858, 23467, 20890, 20890, 20890, 20890, 20890, 28838, 20890, 20793,
  /*  7775 */ 20890, 20890, 20890, 20890, 20890, 20834, 23436, 28127, 20318, 29747, 21507, 25201, 28252, 28126, 20795,
  /*  7790 */ 20318, 20318, 20318, 20318, 20318, 20318, 20318, 25410, 20318, 20318, 26956, 20318, 20318, 20715, 20318,
  /*  7805 */ 20318, 20318, 24434, 20318, 20318, 20318, 26999, 20720, 20318, 27676, 20318, 20318, 20318, 20318, 20318,
  /*  7820 */ 20318, 29969, 29748, 28254, 28361, 20890, 20738, 20890, 24482, 20890, 20890, 20836, 20318, 20318, 29748,
  /*  7835 */ 29748, 29748, 20858, 20858, 20858, 20890, 20890, 29434, 20318, 20318, 20318, 28250, 29748, 29748, 29748,
  /*  7850 */ 29748, 29748, 20858, 20858, 20858, 20858, 20858, 20858, 20858, 20318, 20890, 20890, 20890, 20890, 28446,
  /*  7865 */ 28252, 20865, 20318, 20782, 20318, 20318, 20318, 20318, 26077, 20318, 20318, 20318, 20318, 26619, 20318,
  /*  7880 */ 20318, 20318, 20318, 26934, 20318, 20318, 20318, 20318, 26986, 20318, 20318, 20318, 20318, 27303, 20695,
  /*  7895 */ 20660, 26843, 20802, 20318, 29670, 20318, 20318, 28719, 28554, 29748, 20858, 20858, 20858, 20858, 26670,
  /*  7910 */ 20858, 20858, 20858, 20858, 28324, 20890, 20890, 20890, 20890, 28607, 29748, 29748, 29748, 21651, 20810,
  /*  7925 */ 20858, 20816, 20318, 20840, 28250, 29748, 29748, 20846, 29748, 20858, 20858, 20858, 20858, 20858, 20858,
  /*  7940 */ 28125, 20890, 20890, 20890, 20890, 25202, 20866, 20318, 26996, 20318, 28250, 20858, 26691, 20857, 28126,
  /*  7955 */ 20890, 20890, 20871, 20890, 20797, 20318, 20318, 20318, 20318, 20318, 20318, 21447, 21110, 23437, 20318,
  /*  7970 */ 20318, 26997, 29993, 28443, 28826, 29748, 20858, 20858, 27065, 20858, 20858, 20858, 20858, 20858, 20863,
  /*  7985 */ 20890, 20890, 20890, 20890, 20890, 29746, 29750, 20878, 20858, 20883, 27607, 28125, 20890, 20889, 25767,
  /*  8000 */ 27596, 20318, 26996, 20318, 22014, 29748, 29748, 29748, 22851, 27825, 29748, 29748, 29748, 23517, 29748,
  /*  8015 */ 29748, 29748, 29748, 23776, 20858, 21997, 23079, 20858, 26295, 20858, 20858, 20858, 20895, 20890, 20890,
  /*  8030 */ 20834, 20318, 28250, 29748, 28253, 20858, 20890, 20834, 20318, 23998, 20900, 29748, 28253, 20906, 20858,
  /*  8045 */ 22189, 20912, 20890, 20835, 20318, 26996, 20318, 28250, 29748, 29748, 29748, 28253, 20858, 20858, 20858,
  /*  8060 */ 20890, 20318, 20920, 29079, 20925, 20921, 20931, 20927, 20480, 29750, 20945, 29747, 28252, 28254, 20890,
  /*  8075 */ 20741, 20318, 20318, 20320, 20317, 20671, 20318, 20318, 20318, 20318, 25487, 20318, 20318, 20318, 20318,
  /*  8090 */ 25802, 28250, 29748, 29748, 29748, 29748, 29748, 29748, 28253, 20858, 20858, 20858, 20858, 20858, 20858,
  /*  8105 */ 20858, 21041, 22189, 20866, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 22473, 28255, 20318, 20890,
  /*  8120 */ 20890, 20890, 20890, 20890, 20890, 20890, 20890, 20834, 28444, 25200, 23436, 28125, 20864, 20318, 20318,
  /*  8135 */ 20318, 20318, 20318, 20318, 20318, 21548, 20858, 28126, 20890, 20890, 20890, 20836, 20318, 26997, 20318,
  /*  8150 */ 20777, 20777, 20777, 20777, 20315, 20318, 20318, 20318, 20318, 27519, 20318, 20318, 20318, 20318, 27929,
  /*  8165 */ 27933, 20318, 20318, 21550, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 22680, 20318, 20318, 30499,
  /*  8180 */ 20318, 20318, 20318, 20318, 20318, 20318, 30586, 20318, 20318, 20955, 20959, 20318, 20318, 20318, 20950,
  /*  8195 */ 20950, 20953, 20955, 20318, 20318, 20318, 20318, 20954, 20950, 20950, 20950, 20950, 20950, 20950, 20950,
  /*  8210 */ 20955, 20314, 20318, 20318, 20404, 20408, 20841, 20933, 20318, 20318, 20318, 20318, 20318, 29034, 20445,
  /*  8225 */ 20448, 20319, 20316, 20318, 20318, 21436, 20318, 20318, 20318, 20318, 28092, 20318, 20318, 20318, 20318,
  /*  8240 */ 28180, 21579, 21577, 20318, 20890, 29748, 22320, 25200, 29748, 20858, 21519, 20739, 20318, 20976, 24831,
  /*  8255 */ 20318, 20318, 20318, 20318, 20318, 20319, 20316, 20318, 20253, 23433, 29748, 29748, 29748, 29748, 29748,
  /*  8270 */ 29748, 29748, 25567, 23436, 28125, 20891, 28131, 21017, 23038, 24301, 21030, 20318, 21036, 29748, 29748,
  /*  8285 */ 29748, 29748, 29748, 29748, 22871, 20858, 20858, 20858, 21052, 27151, 20890, 20890, 20890, 20890, 22888,
  /*  8300 */ 20890, 27878, 20890, 21059, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 22921, 20318, 26998, 23942,
  /*  8315 */ 20318, 26998, 20318, 20318, 27304, 20318, 20661, 20318, 27895, 21224, 20318, 20661, 20318, 21064, 20318,
  /*  8330 */ 20318, 20318, 23484, 21079, 21071, 21075, 21066, 20318, 20318, 20318, 20318, 20318, 27308, 20318, 20318,
  /*  8345 */ 20318, 23483, 20318, 20852, 21083, 20316, 21087, 20402, 30447, 21092, 20318, 20318, 20318, 20318, 20318,
  /*  8360 */ 20318, 20462, 20318, 21098, 30445, 20318, 20318, 20318, 20318, 20318, 20318, 20484, 24582, 20318, 20318,
  /*  8375 */ 20318, 20318, 20318, 20318, 21121, 21450, 20318, 21114, 21473, 20318, 20318, 20318, 20318, 20318, 20318,
  /*  8390 */ 20318, 23433, 21110, 21110, 21110, 21110, 21452, 20318, 20318, 20318, 21115, 21115, 21115, 21115, 21109,
  /*  8405 */ 21124, 21121, 21451, 21471, 21115, 21115, 21108, 21130, 21121, 21451, 21471, 21473, 21110, 21132, 21110,
  /*  8420 */ 20318, 21115, 20318, 20318, 20318, 20318, 29007, 20294, 20318, 29006, 20318, 21449, 21110, 21110, 21110,
  /*  8435 */ 21110, 21110, 21110, 21110, 21110, 21451, 21114, 21115, 21115, 21115, 21115, 21115, 21115, 21115, 21115,
  /*  8450 */ 21108, 21131, 21122, 21472, 20318, 20318, 20318, 20318, 20318, 20351, 20318, 20318, 21110, 21110, 21110,
  /*  8465 */ 20318, 20318, 20318, 20318, 20318, 21106, 21115, 21115, 21116, 21131, 21451, 21473, 20318, 20318, 20318,
  /*  8480 */ 24590, 20318, 20318, 27373, 27379, 20318, 21115, 21115, 21115, 21115, 21115, 21115, 21115, 21109, 21119,
  /*  8495 */ 21474, 20318, 20318, 26997, 20318, 20318, 21448, 21110, 21110, 20318, 20318, 20318, 20318, 21471, 21115,
  /*  8510 */ 21118, 21447, 21110, 21452, 21470, 21115, 21115, 21115, 21115, 21123, 20318, 20318, 26997, 20318, 20318,
  /*  8525 */ 20318, 20318, 20318, 20318, 20318, 20804, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 20805, 20318,
  /*  8540 */ 20318, 20318, 20318, 20318, 20318, 20318, 20970, 21449, 21110, 21110, 21110, 20318, 20318, 20318, 21470,
  /*  8555 */ 21115, 21115, 21115, 21117, 20318, 26996, 20318, 21448, 21115, 21115, 21116, 20318, 20318, 21447, 21110,
  /*  8570 */ 21110, 21110, 21110, 21110, 21110, 21451, 21110, 20318, 20318, 20318, 21114, 21115, 21115, 21117, 21114,
  /*  8585 */ 21115, 21115, 21118, 20318, 21110, 21450, 20318, 20318, 20318, 20318, 20318, 20318, 20484, 24583, 22317,
  /*  8600 */ 21474, 21449, 21452, 21114, 21136, 21119, 21140, 21140, 21153, 20318, 20318, 20318, 20318, 20318, 20449,
  /*  8615 */ 28343, 20318, 20485, 20318, 20318, 20318, 21168, 21167, 20318, 20318, 20318, 24655, 24660, 20318, 20318,
  /*  8630 */ 24665, 20318, 22021, 20318, 20318, 26826, 20658, 20318, 21160, 20318, 20318, 20318, 20318, 20318, 20318,
  /*  8645 */ 20653, 20318, 21166, 21172, 21172, 21172, 21172, 21172, 21172, 21172, 21172, 21166, 21174, 20317, 20318,
  /*  8660 */ 20403, 20407, 20318, 20318, 28799, 20318, 20318, 21548, 20318, 20318, 20318, 20318, 20318, 20318, 20318,
  /*  8675 */ 23435, 30314, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 23698, 20318, 23260, 21462, 20318, 20318,
  /*  8690 */ 20318, 20318, 20318, 20318, 20804, 24583, 20318, 20318, 20318, 20318, 20318, 20318, 27761, 21192, 21183,
  /*  8705 */ 21191, 21191, 21187, 21196, 20318, 20318, 20368, 25269, 20318, 20318, 28250, 25200, 23436, 28125, 23470,
  /*  8720 */ 24298, 24516, 20318, 20318, 20318, 20318, 20318, 20318, 21114, 21115, 21145, 21147, 20318, 20318, 20318,
  /*  8735 */ 20318, 21143, 21200, 20318, 27889, 21145, 20315, 20318, 20410, 20405, 21465, 20318, 21210, 20318, 20318,
  /*  8750 */ 20318, 20318, 20318, 20318, 21006, 22547, 20313, 20317, 21203, 21203, 20318, 21204, 20318, 20318, 20318,
  /*  8765 */ 24745, 20318, 20318, 20318, 26869, 21224, 21224, 21224, 21224, 21224, 21224, 21224, 21224, 21229, 20318,
  /*  8780 */ 20327, 27353, 20402, 20406, 21237, 20318, 20318, 20318, 20318, 29758, 26538, 20318, 29748, 21242, 20318,
  /*  8795 */ 20318, 20318, 20318, 20318, 20318, 20318, 23738, 21247, 20318, 20318, 20318, 20318, 20318, 20318, 20318,
  /*  8810 */ 23930, 20396, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 24281, 22549, 22549, 20318, 20318, 20318,
  /*  8825 */ 20318, 20318, 20318, 21047, 28443, 20318, 20318, 27883, 20318, 20318, 20318, 20318, 20318, 20484, 24582,
  /*  8840 */ 21935, 20486, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 24580, 20318, 20318, 20318, 20318, 20318,
  /*  8855 */ 20318, 20318, 20318, 20313, 27368, 21258, 20318, 20318, 20404, 20408, 20318, 20318, 20318, 24819, 20318,
  /*  8870 */ 20318, 20318, 24931, 20864, 28131, 24297, 20318, 24301, 24528, 20318, 20318, 20318, 20890, 29747, 28446,
  /*  8885 */ 29747, 28253, 22189, 23472, 24514, 20318, 21940, 29748, 29748, 29748, 29748, 29748, 29748, 29748, 28252,
  /*  8900 */ 20858, 20858, 20858, 20858, 20858, 20858, 20858, 20890, 20890, 20890, 20890, 29746, 20318, 20318, 29748,
  /*  8915 */ 29748, 29748, 29748, 29748, 29748, 29748, 28253, 25062, 30048, 30048, 30048, 24626, 21156, 20318, 20318,
  /*  8930 */ 20318, 20318, 20318, 20318, 28443, 24623, 28252, 25201, 21819, 25256, 21263, 20890, 25256, 21264, 20479,
  /*  8945 */ 20483, 20402, 20890, 25256, 21264, 20479, 20483, 20402, 20406, 20318, 21629, 20978, 26767, 20858, 20863,
  /*  8960 */ 20914, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 25801, 29748, 20890, 29747, 28492, 25201, 28252,
  /*  8975 */ 28126, 20795, 20318, 20318, 20318, 20318, 26039, 20858, 20858, 22189, 20890, 20890, 20835, 20318, 20318,
  /*  8990 */ 28443, 29748, 29748, 28253, 20858, 20858, 28443, 29748, 29748, 28253, 20858, 20858, 22189, 20890, 20890,
  /*  9005 */ 20836, 20318, 29748, 23436, 20858, 20836, 28249, 29748, 28253, 28125, 20890, 20866, 28443, 28253, 22189,
  /*  9020 */ 20318, 20318, 27305, 20658, 20318, 20318, 20318, 20318, 20318, 20318, 29746, 29750, 28363, 29747, 28252,
  /*  9035 */ 28254, 20890, 20915, 20318, 20318, 23435, 29748, 29748, 29748, 29748, 29748, 29748, 29748, 28640, 29747,
  /*  9050 */ 28253, 22189, 20796, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 21269, 20318, 20318, 20318, 20318,
  /*  9065 */ 20318, 20318, 21110, 21110, 28117, 20890, 20890, 20890, 20890, 20890, 20890, 20890, 29746, 28252, 28253,
  /*  9080 */ 22189, 28129, 20318, 23475, 24513, 20318, 24517, 27017, 20318, 20318, 20318, 20858, 21281, 20318, 20890,
  /*  9095 */ 20890, 20890, 20890, 20890, 20834, 29749, 28362, 25201, 23436, 20858, 20863, 28443, 29748, 29748, 29748,
  /*  9110 */ 23436, 20858, 20858, 20858, 20858, 22189, 20890, 20890, 20858, 22189, 20890, 20890, 20890, 20834, 23438,
  /*  9125 */ 20318, 26994, 20318, 20858, 28125, 20890, 20890, 20890, 20835, 20318, 20318, 28250, 29748, 29748, 20858,
  /*  9140 */ 28126, 20890, 20318, 29748, 20858, 20890, 28250, 28126, 20777, 20777, 20777, 20777, 29748, 28253, 21518,
  /*  9155 */ 20890, 20916, 20318, 20318, 20318, 20318, 20318, 24296, 20318, 24300, 24527, 20318, 20318, 20318, 20318,
  /*  9170 */ 20318, 28443, 24835, 29748, 27578, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 24896, 28445, 25201,
  /*  9185 */ 28252, 28126, 23471, 24299, 24517, 20318, 20318, 20318, 23584, 20318, 20318, 28249, 29748, 29748, 23436,
  /*  9200 */ 20858, 20858, 28125, 20890, 20890, 20834, 25200, 28449, 24622, 28444, 20834, 21262, 20890, 20834, 23873,
  /*  9215 */ 20478, 20482, 20410, 20405, 23873, 20478, 20482, 20410, 20405, 20409, 20318, 20318, 20318, 20318, 28126,
  /*  9230 */ 20890, 20890, 20834, 20318, 20318, 28250, 29748, 29748, 28252, 20858, 20858, 28126, 20890, 20890, 20835,
  /*  9245 */ 20318, 28443, 29748, 20858, 28125, 20890, 20835, 20318, 29748, 28252, 20858, 27304, 20318, 20661, 20318,
  /*  9260 */ 20318, 20318, 20318, 20318, 20318, 20318, 25335, 20318, 24581, 20318, 20318, 20318, 20318, 20318, 20318,
  /*  9275 */ 20318, 25401, 21519, 20890, 20890, 20890, 20890, 20890, 20834, 29749, 24624, 28362, 25201, 23436, 20858,
  /*  9290 */ 20863, 20914, 20318, 20318, 20318, 20318, 20863, 20890, 20890, 20890, 20890, 20890, 20890, 25157, 20890,
  /*  9305 */ 20858, 20858, 20890, 20890, 20890, 20890, 20890, 20890, 20890, 29747, 24621, 20866, 20318, 28249, 29748,
  /*  9320 */ 29748, 29748, 29748, 29748, 29748, 28252, 20318, 23436, 28447, 28253, 29747, 23874, 24624, 23874, 20890,
  /*  9335 */ 28447, 21265, 20480, 20318, 20890, 28447, 21265, 20480, 20318, 20403, 20407, 20318, 20318, 20382, 20318,
  /*  9350 */ 20318, 20318, 20318, 20318, 20318, 27756, 20318, 28254, 20890, 21971, 20318, 20318, 20318, 20318, 20318,
  /*  9365 */ 20565, 20318, 20318, 20858, 28255, 27151, 20890, 20890, 20890, 20890, 20890, 20890, 20834, 23438, 20318,
  /*  9380 */ 26994, 20318, 20318, 29748, 29748, 29748, 20318, 27302, 27306, 20659, 20318, 20318, 20318, 20318, 20318,
  /*  9395 */ 28811, 20318, 20318, 28125, 29748, 20890, 25200, 20890, 20890, 23872, 24627, 20481, 20318, 20404, 20408,
  /*  9410 */ 20318, 20318, 20858, 28254, 20890, 20890, 20890, 20890, 20890, 20890, 26580, 29746, 20858, 28256, 28361,
  /*  9425 */ 20890, 20890, 20890, 20890, 20890, 20890, 20858, 27151, 20890, 20890, 20890, 20890, 20890, 20890, 28745,
  /*  9440 */ 20890, 23436, 28127, 20318, 20318, 26995, 20318, 20318, 20318, 29748, 29748, 29748, 20858, 20858, 22189,
  /*  9455 */ 20890, 20890, 20890, 29751, 26994, 20318, 20318, 29748, 29748, 29748, 23436, 20858, 20858, 20858, 29748,
  /*  9470 */ 28253, 20858, 20890, 20834, 20318, 28443, 23436, 20858, 22189, 20864, 20858, 22189, 20864, 28249, 23436,
  /*  9485 */ 28125, 20864, 28251, 28127, 23438, 23438, 20660, 20798, 20318, 20318, 20318, 20318, 20318, 20318, 21208,
  /*  9500 */ 21219, 20318, 20318, 30473, 20318, 20318, 20318, 20318, 20318, 20685, 20318, 20318, 21287, 21276, 21311,
  /*  9515 */ 21313, 21323, 21321, 21318, 21323, 21314, 20479, 20483, 20402, 20406, 20318, 20318, 20318, 20318, 20318,
  /*  9530 */ 20318, 20318, 28249, 29748, 29748, 29748, 29748, 29748, 28253, 20858, 20858, 20858, 28255, 20890, 20890,
  /*  9545 */ 20890, 20890, 20890, 21818, 28448, 28126, 20318, 20777, 20777, 20777, 20647, 20483, 20318, 20318, 20318,
  /*  9560 */ 20318, 29881, 20318, 20318, 29438, 28125, 20864, 28251, 28127, 23438, 23438, 23438, 24625, 21155, 20318,
  /*  9575 */ 20318, 20318, 20318, 20318, 20318, 27939, 27942, 27942, 27941, 27941, 21327, 20318, 20318, 20318, 24829,
  /*  9590 */ 20318, 20318, 20318, 20318, 21023, 20318, 20318, 20318, 20318, 27940, 27942, 27942, 27942, 27942, 27942,
  /*  9605 */ 20315, 21344, 21344, 21344, 21344, 21344, 21344, 21344, 20318, 20318, 20462, 20318, 20318, 20318, 20318,
  /*  9620 */ 20318, 24741, 20318, 20318, 21348, 20317, 20318, 20403, 20407, 20318, 20318, 20318, 20318, 30134, 20318,
  /*  9635 */ 20318, 20318, 20315, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 27163, 20318, 20318, 20318, 20318,
  /*  9650 */ 20318, 20318, 21333, 21344, 20318, 21352, 20318, 20318, 20318, 20318, 20318, 20318, 21336, 21343, 25894,
  /*  9665 */ 21358, 21363, 20318, 20318, 20318, 20318, 20318, 20804, 24583, 20377, 20318, 20663, 27307, 21361, 20318,
  /*  9680 */ 25896, 20662, 21368, 27306, 20659, 20318, 20468, 21372, 21373, 21373, 21373, 21374, 21384, 21386, 21381,
  /*  9695 */ 21386, 21386, 21386, 21378, 21378, 21387, 21403, 21401, 21391, 21398, 21413, 21407, 21417, 21417, 21410,
  /*  9710 */ 21394, 20481, 20318, 20318, 20484, 20318, 29033, 20448, 20318, 20318, 20318, 22926, 26011, 23243, 22905,
  /*  9725 */ 20318, 20804, 20487, 20318, 21054, 20318, 20318, 20318, 22313, 20318, 21431, 22773, 21440, 20318, 21446,
  /*  9740 */ 22867, 21270, 20318, 21329, 20318, 20318, 20318, 21421, 22454, 21457, 28593, 20318, 21469, 21457, 20318,
  /*  9755 */ 20318, 20932, 20318, 20318, 20485, 20318, 20318, 20318, 20318, 20318, 20318, 29313, 20318, 21479, 20318,
  /*  9770 */ 21486, 20318, 21489, 20728, 21499, 21991, 21504, 21566, 28252, 21513, 21738, 22523, 22715, 21524, 22190,
  /*  9785 */ 21529, 22007, 21534, 21571, 20890, 29747, 21545, 21554, 21564, 21764, 20734, 21570, 20916, 21575, 21585,
  /*  9800 */ 20318, 20318, 24920, 20318, 20318, 20318, 21596, 20318, 20318, 20499, 20318, 20318, 20318, 20318, 20318,
  /*  9815 */ 21422, 20318, 20318, 21607, 20318, 20318, 20318, 20318, 21613, 29748, 29748, 20858, 20858, 20858, 29165,
  /*  9830 */ 20858, 20858, 20318, 24472, 20890, 20890, 20890, 20890, 26097, 20890, 20890, 20890, 26895, 20858, 20858,
  /*  9845 */ 28322, 23469, 20890, 20890, 20890, 20890, 26127, 20318, 20318, 20318, 20318, 23248, 20318, 20318, 20318,
  /*  9860 */ 24914, 28921, 20318, 20485, 20483, 21639, 20318, 20318, 20318, 21645, 20318, 21649, 29748, 22112, 29748,
  /*  9875 */ 29748, 29748, 29748, 29748, 25735, 24325, 29748, 29748, 21655, 29748, 29748, 29748, 29748, 26308, 25509,
  /*  9890 */ 29748, 29748, 21671, 29748, 28253, 20858, 28878, 20858, 24632, 20858, 20318, 20890, 20890, 20890, 20890,
  /*  9905 */ 20890, 20890, 29417, 20890, 21683, 20858, 25039, 20858, 21688, 20858, 21693, 20890, 20835, 20318, 27196,
  /*  9920 */ 28250, 29748, 29141, 23436, 20858, 20858, 20858, 20858, 25382, 20858, 20858, 20858, 20859, 20863, 20890,
  /*  9935 */ 20890, 20890, 20890, 20890, 23918, 20890, 20890, 21699, 20890, 20890, 20890, 20890, 23109, 20745, 24624,
  /*  9950 */ 29748, 21715, 20890, 21721, 21727, 24624, 21732, 21737, 21742, 25327, 27684, 27682, 21768, 20318, 20318,
  /*  9965 */ 20318, 28443, 29748, 29748, 29748, 30492, 25034, 29748, 29748, 25465, 29748, 29748, 29748, 29748, 27408,
  /*  9980 */ 28253, 22148, 22153, 26493, 23436, 20858, 20858, 21785, 20858, 25251, 20858, 20753, 27151, 20890, 20890,
  /*  9995 */ 20890, 20890, 20890, 27191, 26517, 27715, 26523, 20890, 21806, 20890, 21812, 20890, 20890, 20890, 24865,
  /* 10010 */ 20890, 20835, 20318, 29748, 28252, 20858, 20890, 20865, 28250, 28252, 28126, 20865, 28252, 20775, 20890,
  /* 10025 */ 25093, 20890, 20890, 20890, 20890, 25852, 20890, 20836, 20318, 26997, 20318, 28443, 29748, 29748, 29748,
  /* 10040 */ 20318, 25552, 20318, 20318, 20318, 21823, 21828, 20318, 20318, 20569, 24511, 20318, 20318, 21442, 20318,
  /* 10055 */ 20318, 20590, 20318, 20318, 20318, 20318, 20318, 20318, 28439, 28443, 28702, 20318, 20318, 21844, 20318,
  /* 10070 */ 20318, 20318, 20318, 20318, 29991, 20318, 20318, 25801, 28249, 29748, 21850, 29748, 21856, 29748, 29748,
  /* 10085 */ 20858, 27224, 20858, 28125, 20890, 22881, 28252, 20858, 21868, 20858, 21873, 20858, 20858, 20858, 20318,
  /* 10100 */ 27151, 20890, 20890, 20890, 20890, 20890, 28444, 25200, 24621, 20866, 21907, 21913, 29000, 20318, 20318,
  /* 10115 */ 20628, 20318, 20318, 20318, 20318, 20318, 20318, 29664, 20318, 20318, 21922, 20318, 20318, 21927, 20318,
  /* 10130 */ 20318, 20318, 20318, 30337, 20318, 20318, 21492, 26904, 20858, 26228, 20858, 20858, 20858, 20858, 20862,
  /* 10145 */ 20890, 20890, 20890, 23719, 20890, 20890, 26055, 26676, 20890, 26238, 20890, 30461, 20890, 20836, 20318,
  /* 10160 */ 29748, 23436, 20858, 28126, 20890, 20836, 28249, 20318, 21977, 20318, 20318, 20318, 20318, 20318, 20318,
  /* 10175 */ 21458, 20318, 20318, 29748, 27567, 29748, 29748, 29748, 28185, 21989, 29748, 22538, 20858, 20858, 20858,
  /* 10190 */ 20858, 20858, 27465, 20858, 28126, 20890, 20890, 27082, 20890, 20890, 20890, 20834, 23512, 24624, 29748,
  /* 10205 */ 20858, 27925, 22005, 20890, 21818, 28448, 28126, 20318, 20318, 20318, 20318, 20318, 20318, 22025, 29748,
  /* 10220 */ 29748, 23436, 22029, 20858, 20858, 26558, 22036, 20890, 20890, 20836, 22042, 20318, 28443, 22046, 29748,
  /* 10235 */ 28252, 22051, 20858, 28125, 27920, 20890, 20890, 20890, 30101, 20890, 20890, 20890, 20890, 26237, 20890,
  /* 10250 */ 20890, 29747, 28446, 29747, 28253, 22189, 23440, 28125, 20890, 20890, 20834, 30274, 28250, 29748, 28253,
  /* 10265 */ 20858, 20858, 20858, 20858, 24078, 20858, 20710, 20318, 20318, 20318, 20318, 20318, 20318, 20711, 22067,
  /* 10280 */ 22068, 22068, 22068, 22068, 22069, 22073, 22073, 22076, 22084, 22082, 22089, 22078, 22094, 22085, 22093,
  /* 10295 */ 22098, 22102, 20478, 20482, 20410, 20405, 20409, 20318, 20318, 20757, 20318, 20318, 20318, 20318, 20318,
  /* 10310 */ 20318, 30423, 20318, 29746, 28491, 25200, 23436, 28125, 20794, 20318, 20318, 20318, 20318, 20318, 20318,
  /* 10325 */ 20318, 24581, 20318, 20318, 20318, 20318, 23698, 20318, 20964, 20318, 20318, 20318, 20318, 20318, 20991,
  /* 10340 */ 20318, 20318, 20858, 20858, 28115, 20863, 20890, 20890, 20890, 20890, 20890, 20890, 20890, 23197, 24301,
  /* 10355 */ 24528, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 25334, 20318, 20318, 20318, 22126, 20318, 20318,
  /* 10370 */ 20318, 25802, 28250, 22132, 22142, 29748, 29748, 29748, 29748, 29748, 29748, 29748, 24270, 29748, 20318,
  /* 10385 */ 20318, 28249, 29748, 29748, 29748, 29748, 28253, 20858, 20858, 25202, 20866, 20318, 26996, 20318, 28250,
  /* 10400 */ 29748, 29748, 29748, 20834, 20318, 26995, 20318, 28249, 29748, 29748, 29748, 25868, 20858, 20858, 22181,
  /* 10415 */ 22188, 20890, 22194, 22198, 20318, 20318, 28250, 27443, 29748, 29748, 29748, 29748, 29748, 29748, 22558,
  /* 10430 */ 29748, 20858, 20858, 20858, 21879, 20858, 20858, 20858, 20890, 20890, 20890, 29751, 28249, 29748, 28252,
  /* 10445 */ 20858, 22189, 20890, 28126, 20865, 28252, 20775, 30048, 30048, 30048, 24626, 21156, 20318, 22243, 22207,
  /* 10460 */ 22211, 20318, 20318, 20318, 20318, 20318, 21128, 21110, 21110, 20318, 20556, 22227, 22231, 22241, 22234,
  /* 10475 */ 22237, 22237, 22237, 22237, 22247, 22251, 22251, 22255, 22258, 22263, 22259, 22259, 22263, 22266, 22272,
  /* 10490 */ 22268, 22275, 22277, 22288, 22285, 22279, 22281, 22292, 20479, 20858, 21519, 20890, 20890, 20890, 28120,
  /* 10505 */ 20890, 20834, 20318, 28250, 25231, 28253, 25249, 29288, 22144, 28362, 25201, 22345, 23077, 28119, 20914,
  /* 10520 */ 20318, 20318, 20853, 21078, 21078, 21078, 21078, 21078, 20318, 22328, 20318, 22336, 20318, 20318, 25504,
  /* 10535 */ 20318, 20318, 20961, 20972, 20318, 20318, 20318, 20318, 20473, 20318, 25190, 25164, 22341, 29748, 22846,
  /* 10550 */ 22351, 22355, 29748, 29748, 29748, 24751, 29748, 29748, 29748, 29748, 24846, 29748, 29748, 25627, 23436,
  /* 10565 */ 20858, 24376, 22479, 22366, 20858, 20858, 20858, 20858, 20858, 20858, 27151, 30013, 22754, 28232, 22371,
  /* 10580 */ 20890, 20890, 20890, 20890, 20890, 24113, 20890, 20890, 22409, 29748, 29748, 29748, 24848, 29748, 29748,
  /* 10595 */ 29748, 24877, 21660, 29748, 29748, 21666, 24642, 20858, 20858, 20858, 22417, 20858, 20858, 20858, 20822,
  /* 10610 */ 20828, 20890, 20833, 20890, 22422, 20858, 20858, 20858, 20858, 20858, 20858, 28116, 20890, 20890, 22434,
  /* 10625 */ 20890, 20890, 20890, 24703, 20890, 20890, 20890, 20834, 28445, 25201, 28126, 20318, 20318, 20318, 20318,
  /* 10640 */ 20318, 20318, 22441, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 27281, 20858, 20858, 22446, 20858,
  /* 10655 */ 20858, 28254, 28361, 20890, 20890, 20890, 20890, 20890, 20890, 20890, 28725, 20890, 25591, 26634, 24624,
  /* 10670 */ 29748, 20858, 20890, 23473, 24515, 20318, 20318, 20318, 24515, 25460, 20318, 20318, 20318, 20318, 20318,
  /* 10685 */ 20318, 21461, 20318, 20318, 20318, 26217, 21941, 29748, 29748, 29748, 29748, 29748, 27144, 26254, 26412,
  /* 10700 */ 20318, 20318, 20318, 20318, 20318, 20318, 21475, 20318, 29748, 28252, 20858, 27060, 20858, 20858, 20858,
  /* 10715 */ 22520, 27505, 22533, 20890, 20890, 20834, 28446, 28252, 20865, 20318, 20318, 20318, 20318, 20318, 28442,
  /* 10730 */ 29748, 29748, 29748, 29748, 20858, 28125, 20890, 20890, 20890, 20835, 20318, 26996, 20318, 28250, 22556,
  /* 10745 */ 22566, 29748, 22572, 27739, 20858, 22581, 29185, 23436, 20858, 28126, 20890, 20836, 28249, 29748, 28253,
  /* 10760 */ 28125, 20890, 28125, 20890, 20866, 28443, 28253, 22189, 21557, 22585, 22594, 20776, 20776, 20776, 24627,
  /* 10775 */ 20482, 20318, 20318, 20318, 20318, 24036, 20318, 20318, 20318, 20318, 20318, 20307, 20306, 20606, 27774,
  /* 10790 */ 22600, 22602, 22602, 22602, 22602, 22602, 22606, 22609, 22610, 22614, 22614, 22614, 22614, 22619, 22631,
  /* 10805 */ 22634, 22618, 22623, 22628, 22623, 22624, 22631, 22638, 20480, 20318, 20403, 20407, 29195, 20318, 20318,
  /* 10820 */ 20318, 20318, 22642, 20318, 20318, 20318, 21354, 20318, 20318, 20318, 25405, 20318, 20318, 20318, 21635,
  /* 10835 */ 21903, 20890, 20890, 20890, 29746, 29750, 28363, 29747, 28252, 22662, 20318, 20318, 20318, 20318, 20318,
  /* 10850 */ 20318, 22687, 22739, 20318, 22392, 29871, 22674, 22693, 20318, 20318, 20318, 25490, 20643, 20643, 20643,
  /* 10865 */ 20643, 20643, 25492, 20318, 22390, 22677, 20318, 28439, 21495, 29748, 29748, 29748, 25133, 29748, 29748,
  /* 10880 */ 20858, 25139, 30027, 29748, 29748, 22697, 22702, 23506, 29748, 29748, 22343, 29748, 20858, 20858, 20858,
  /* 10895 */ 21869, 20858, 22749, 20858, 22712, 26321, 20858, 20858, 20858, 20858, 20858, 28254, 20863, 20890, 20890,
  /* 10910 */ 20890, 20890, 20890, 20890, 27708, 28115, 28325, 22723, 20890, 20890, 29857, 20890, 20866, 28443, 28253,
  /* 10925 */ 22189, 22323, 24621, 20776, 20776, 20890, 29178, 29595, 22728, 20890, 20890, 20890, 23654, 20318, 23696,
  /* 10940 */ 20318, 20318, 20318, 20318, 20318, 20318, 20318, 26996, 20318, 20318, 20318, 20318, 20318, 20318, 20318,
  /* 10955 */ 20478, 20483, 20890, 29747, 28446, 29747, 22748, 22753, 22758, 20318, 20318, 21007, 20318, 20318, 20318,
  /* 10970 */ 20318, 20484, 24583, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 20485, 20483, 20318, 20318, 20318,
  /* 10985 */ 20318, 20318, 20318, 20318, 20486, 20318, 24737, 20318, 20318, 20318, 23697, 20318, 20318, 20318, 20318,
  /* 11000 */ 20318, 20318, 20318, 20318, 30488, 20318, 20318, 28250, 29748, 22777, 22783, 29748, 29748, 29748, 22789,
  /* 11015 */ 29748, 29748, 29748, 26553, 20858, 20858, 20858, 20858, 20858, 20858, 28256, 28361, 20890, 20890, 20890,
  /* 11030 */ 20858, 25377, 28655, 20858, 20858, 20858, 23538, 20858, 20858, 20858, 20890, 20890, 22527, 20890, 20890,
  /* 11045 */ 20890, 30122, 20890, 20890, 20890, 20890, 26591, 20834, 28445, 25201, 28126, 22800, 20858, 28255, 27151,
  /* 11060 */ 20890, 22804, 22810, 20890, 20890, 27092, 20890, 28445, 28449, 28127, 20318, 20318, 20318, 20318, 20318,
  /* 11075 */ 20318, 20318, 22911, 20318, 28714, 20318, 20318, 20318, 20318, 25800, 20318, 29748, 29748, 29748, 29748,
  /* 11090 */ 23883, 20858, 20858, 28294, 29748, 29748, 29748, 29748, 29748, 29748, 29748, 25301, 23436, 25835, 20858,
  /* 11105 */ 20858, 20858, 20858, 21281, 20318, 23994, 25758, 20890, 20890, 20890, 20890, 20890, 29747, 28364, 28252,
  /* 11120 */ 20865, 20318, 20318, 20318, 21215, 20318, 20318, 20318, 25888, 20318, 20318, 20318, 20318, 21492, 29748,
  /* 11135 */ 29748, 29748, 29748, 29748, 29748, 20318, 20318, 26138, 20318, 20318, 25800, 28443, 29748, 29748, 29748,
  /* 11150 */ 29748, 29748, 24108, 29748, 29748, 20858, 22855, 26329, 20858, 20858, 20861, 20890, 20890, 20890, 20890,
  /* 11165 */ 20890, 20890, 24811, 20890, 20890, 26098, 20890, 20890, 20890, 22860, 27071, 20890, 20890, 27427, 20890,
  /* 11180 */ 20890, 23393, 20890, 20890, 24155, 20890, 22116, 20890, 20890, 20834, 20778, 27532, 26994, 27538, 20318,
  /* 11195 */ 22865, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 27304, 20318, 20661, 20318, 20318, 22895, 20318,
  /* 11210 */ 20318, 20318, 20318, 20318, 20318, 28250, 25200, 28449, 24622, 28444, 20834, 20890, 28586, 23438, 20318,
  /* 11225 */ 26994, 20318, 20318, 29748, 29748, 29748, 28253, 20858, 20858, 28126, 20890, 20890, 20834, 20318, 20858,
  /* 11240 */ 27857, 20858, 20890, 20890, 22887, 20836, 20318, 20318, 21020, 20318, 20318, 21178, 21186, 21186, 21186,
  /* 11255 */ 21186, 21186, 21186, 21186, 21186, 21179, 20318, 20318, 20318, 22937, 22937, 22938, 22937, 22937, 22942,
  /* 11270 */ 22945, 22949, 22953, 22955, 22955, 22955, 22960, 22960, 22956, 22976, 22974, 22964, 22971, 22984, 22977,
  /* 11285 */ 22984, 22984, 22981, 22967, 20481, 20318, 20404, 20408, 20318, 20318, 20318, 20319, 20316, 20318, 20402,
  /* 11300 */ 20406, 20318, 22988, 20318, 20318, 22994, 20318, 20318, 29677, 21013, 20318, 20318, 20804, 24583, 21048,
  /* 11315 */ 23009, 26845, 22307, 23014, 21060, 23485, 20318, 20318, 23160, 20318, 20318, 20318, 20318, 20318, 20486,
  /* 11330 */ 20318, 20318, 20318, 23019, 20318, 20318, 20318, 27795, 23025, 29713, 23027, 23023, 20318, 26013, 27797,
  /* 11345 */ 29876, 30144, 23032, 23155, 23037, 26015, 23427, 20318, 20318, 23042, 23047, 20789, 27845, 23059, 23066,
  /* 11360 */ 23070, 28252, 23074, 23083, 23087, 23093, 23099, 23875, 23661, 23104, 23113, 23117, 20916, 20318, 20318,
  /* 11375 */ 21623, 20318, 20318, 23130, 20318, 20318, 21025, 20318, 20318, 20318, 20318, 20318, 20484, 20318, 20318,
  /* 11390 */ 20318, 20318, 20318, 20318, 20318, 21547, 20318, 20318, 23136, 20318, 20318, 20318, 23141, 23147, 23153,
  /* 11405 */ 20805, 20318, 23159, 23141, 20318, 20318, 22442, 20318, 20318, 20318, 26142, 20318, 20318, 20318, 20318,
  /* 11420 */ 21548, 20318, 20318, 20318, 20318, 22840, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 27522, 23170,
  /* 11435 */ 29748, 23171, 29748, 29748, 23175, 29748, 23181, 20858, 22149, 20858, 22448, 24791, 20858, 22872, 20858,
  /* 11450 */ 20858, 20858, 21518, 20890, 24019, 20890, 20890, 26177, 20890, 20890, 20890, 20890, 20890, 20773, 20890,
  /* 11465 */ 20834, 20858, 22835, 20858, 20858, 23187, 24012, 28322, 23469, 20890, 27876, 20890, 23192, 20890, 20890,
  /* 11480 */ 29864, 20890, 20890, 27867, 20890, 20890, 20890, 23377, 20890, 20890, 28444, 25200, 24621, 20866, 20318,
  /* 11495 */ 20318, 20318, 23207, 20318, 20318, 20318, 23211, 23226, 26144, 23216, 20318, 23220, 20318, 20318, 20318,
  /* 11510 */ 23225, 26212, 23230, 20318, 23234, 20318, 23495, 23247, 30113, 23697, 23840, 23252, 20318, 20318, 20318,
  /* 11525 */ 26832, 20318, 23257, 23266, 23284, 28200, 23288, 29970, 29748, 29748, 23292, 23298, 23304, 29748, 26685,
  /* 11540 */ 23308, 24763, 24837, 29748, 24072, 21852, 29748, 26292, 29748, 29748, 23314, 23318, 23979, 20858, 20858,
  /* 11555 */ 23325, 23330, 23335, 20858, 29230, 23344, 23349, 23359, 20858, 24488, 30009, 20858, 23365, 20858, 20858,
  /* 11570 */ 20858, 21525, 27151, 20890, 20890, 20890, 24391, 20890, 20890, 20890, 20890, 30393, 20890, 20890, 20890,
  /* 11585 */ 25145, 28005, 23371, 29658, 20890, 20890, 23375, 23381, 23387, 20890, 24083, 23391, 23415, 28168, 20890,
  /* 11600 */ 24104, 21717, 20890, 30033, 20890, 20890, 23397, 25431, 20946, 23401, 23361, 23410, 28130, 24296, 20318,
  /* 11615 */ 24300, 24527, 20318, 20318, 21747, 20318, 23444, 23449, 20318, 20318, 20318, 23454, 23460, 27670, 25125,
  /* 11630 */ 20318, 23489, 20318, 27023, 23494, 20318, 20318, 21094, 21249, 25911, 20318, 29837, 20318, 20318, 21145,
  /* 11645 */ 21145, 21145, 21145, 21145, 21145, 21145, 21145, 25397, 20318, 28443, 29748, 29748, 25743, 23499, 24942,
  /* 11660 */ 23504, 29748, 29748, 29748, 29748, 29748, 23510, 29748, 23523, 29748, 29748, 23436, 20858, 20858, 20858,
  /* 11675 */ 20858, 25822, 23516, 29748, 29748, 23521, 23527, 20858, 20858, 20858, 20858, 20858, 30378, 20858, 26977,
  /* 11690 */ 23533, 20858, 23542, 20858, 20858, 20858, 20858, 20858, 20858, 20862, 20890, 30482, 20858, 29938, 20858,
  /* 11705 */ 20858, 30279, 30351, 28256, 27515, 20318, 20318, 23589, 23594, 23598, 20318, 20318, 20318, 26150, 20318,
  /* 11720 */ 20318, 20318, 20318, 22500, 20318, 29538, 20318, 29911, 20318, 20318, 20318, 25714, 20318, 27777, 20318,
  /* 11735 */ 20318, 21214, 21212, 21212, 27303, 20318, 20660, 20705, 20318, 20318, 20318, 20318, 20318, 20318, 26997,
  /* 11750 */ 20318, 20318, 20318, 20318, 23603, 20344, 25801, 28249, 29748, 23610, 29748, 23536, 20858, 22154, 25440,
  /* 11765 */ 20858, 25069, 20858, 20858, 20858, 21789, 20858, 20858, 21795, 20858, 20767, 20858, 28255, 20890, 20890,
  /* 11780 */ 20890, 20890, 21901, 20890, 26525, 20890, 21858, 29748, 23638, 28252, 28473, 20858, 20858, 28776, 23643,
  /* 11795 */ 20858, 20858, 20858, 23649, 29641, 20858, 23340, 26346, 20858, 21282, 28361, 20890, 23653, 20890, 20890,
  /* 11810 */ 20890, 30451, 20890, 20890, 20890, 20890, 29499, 20890, 20890, 20890, 20890, 28445, 28449, 28127, 20318,
  /* 11825 */ 24138, 23658, 20890, 20890, 20890, 23667, 23673, 23678, 21723, 23688, 20318, 20318, 20318, 20318, 20318,
  /* 11840 */ 20318, 20318, 27883, 26200, 23695, 25801, 29748, 29748, 29748, 28906, 29748, 23611, 29748, 29748, 29748,
  /* 11855 */ 29748, 20858, 20858, 20858, 20858, 28126, 20890, 29748, 27363, 29748, 23702, 29748, 29748, 28252, 20858,
  /* 11870 */ 20858, 20858, 20858, 20890, 20890, 20858, 20858, 23708, 20858, 20858, 23713, 29699, 20858, 20858, 20858,
  /* 11885 */ 21797, 20890, 29277, 20890, 20890, 24344, 20890, 24349, 20890, 24355, 20834, 23734, 20318, 20318, 20318,
  /* 11900 */ 23742, 29532, 23736, 23748, 21296, 23752, 29748, 23758, 23763, 23768, 30405, 29748, 23615, 29748, 29748,
  /* 11915 */ 29748, 23622, 23628, 23633, 23784, 20858, 26505, 26575, 23790, 20890, 23796, 23801, 23806, 29981, 20890,
  /* 11930 */ 20890, 23812, 23818, 23822, 29604, 23829, 20318, 23833, 23839, 27476, 20318, 20318, 20341, 23844, 29719,
  /* 11945 */ 20318, 20318, 30050, 29748, 23848, 29748, 23754, 29748, 28862, 20858, 20858, 20858, 22706, 23961, 29748,
  /* 11960 */ 29748, 28912, 27418, 20858, 20858, 23853, 20858, 28125, 23859, 27275, 20890, 20890, 23865, 20890, 20890,
  /* 11975 */ 29281, 29287, 20890, 20890, 20890, 20890, 24981, 20890, 20890, 25586, 25480, 20834, 23870, 28127, 20318,
  /* 11990 */ 20318, 23879, 29892, 20318, 20318, 21232, 20318, 20318, 20318, 28443, 27722, 20858, 27556, 20890, 20890,
  /* 12005 */ 20890, 20890, 23888, 23439, 27454, 23894, 23900, 28249, 29748, 29074, 29748, 28252, 20858, 20858, 20858,
  /* 12020 */ 20858, 28254, 20890, 20890, 20890, 20858, 23905, 20858, 22189, 20890, 23911, 20890, 29751, 20318, 27213,
  /* 12035 */ 29748, 29916, 22177, 28253, 20858, 20858, 20858, 23970, 20858, 20858, 20858, 20858, 24952, 24957, 20858,
  /* 12050 */ 26233, 30129, 20318, 20318, 29748, 29748, 29748, 29126, 20858, 20858, 20858, 21995, 20858, 20858, 20858,
  /* 12065 */ 22001, 20858, 20858, 23916, 20890, 20890, 20890, 23922, 20318, 20318, 21337, 20318, 20318, 20318, 20318,
  /* 12080 */ 20318, 24889, 20318, 20318, 23928, 28443, 29922, 29748, 28252, 29057, 20858, 28125, 20890, 20835, 30285,
  /* 12095 */ 29748, 28320, 28029, 20890, 23934, 20890, 23939, 20318, 23948, 23952, 23958, 20700, 23968, 23974, 28225,
  /* 12110 */ 23983, 23989, 29271, 20318, 20318, 21421, 20318, 20318, 20318, 20318, 29899, 25240, 24011, 24016, 29949,
  /* 12125 */ 28249, 23436, 28125, 20864, 28251, 28127, 24687, 25261, 23438, 29752, 20318, 20318, 24025, 20318, 20318,
  /* 12140 */ 26805, 26824, 25891, 24030, 24033, 27006, 20318, 20318, 20318, 20318, 20573, 20580, 20580, 20580, 20318,
  /* 12155 */ 20318, 25903, 24040, 24044, 25906, 25907, 25907, 25907, 27009, 24050, 24048, 24055, 27011, 24062, 24051,
  /* 12170 */ 24061, 24062, 24059, 20478, 20482, 20410, 20334, 20409, 20318, 20318, 20318, 20318, 28218, 20318, 20318,
  /* 12185 */ 20318, 20318, 28316, 20318, 20318, 20318, 20318, 28443, 29748, 29748, 29748, 29748, 23436, 20318, 20318,
  /* 12200 */ 28530, 20318, 20318, 20318, 20318, 20318, 21459, 20318, 20318, 20318, 20318, 20318, 22588, 20890, 24082,
  /* 12215 */ 20890, 20890, 22588, 26684, 28361, 20890, 21889, 20890, 21895, 20890, 20890, 20890, 20834, 23436, 28127,
  /* 12230 */ 29764, 25170, 26110, 29748, 20858, 21519, 20739, 20797, 20318, 20318, 20318, 26066, 20318, 26711, 24087,
  /* 12245 */ 20318, 20318, 20318, 22877, 20318, 20318, 21435, 21433, 20318, 20318, 20318, 20318, 23450, 20318, 20318,
  /* 12260 */ 20318, 22516, 29748, 29748, 29748, 29748, 29748, 29748, 29748, 24109, 24150, 29748, 24228, 20318, 20318,
  /* 12275 */ 20318, 20318, 28439, 28443, 29748, 29748, 29932, 20858, 20858, 20858, 20858, 28115, 20863, 20890, 20890,
  /* 12290 */ 24118, 20318, 20318, 20318, 20318, 20318, 20318, 29748, 21656, 29748, 29748, 20318, 29748, 29748, 24144,
  /* 12305 */ 29748, 29748, 29748, 23436, 20858, 20858, 30040, 20858, 20858, 27423, 20858, 20858, 20858, 20858, 28126,
  /* 12320 */ 20890, 20890, 20890, 20890, 23437, 20318, 20318, 26997, 20318, 28214, 20890, 20890, 20890, 20890, 29746,
  /* 12335 */ 28252, 20865, 20318, 28125, 20890, 20835, 20318, 24149, 29631, 20858, 24154, 20672, 20318, 20318, 20318,
  /* 12350 */ 20318, 20318, 20318, 20318, 27888, 24177, 24180, 24180, 24180, 24180, 24180, 24180, 24183, 24187, 24187,
  /* 12365 */ 24187, 24187, 24187, 24187, 24187, 24187, 24190, 24196, 24192, 24199, 24201, 24211, 24209, 24206, 24211,
  /* 12380 */ 24202, 20479, 20483, 20402, 20406, 20318, 20318, 20318, 26782, 22901, 20318, 20318, 20318, 20318, 27304,
  /* 12395 */ 24820, 24174, 27294, 20318, 22502, 20318, 20318, 20318, 20318, 20318, 20318, 21493, 29748, 24092, 22643,
  /* 12410 */ 20318, 20318, 20318, 20318, 20318, 20318, 20318, 27974, 20858, 20858, 28309, 20890, 20890, 20890, 20890,
  /* 12425 */ 20890, 28038, 24708, 28044, 24221, 20318, 20318, 20318, 27521, 20318, 20318, 20318, 20378, 20318, 20318,
  /* 12440 */ 20318, 20318, 21254, 27369, 21253, 21253, 24232, 20858, 20858, 20858, 20858, 20858, 20858, 20858, 21677,
  /* 12455 */ 24242, 24247, 20318, 20318, 20318, 20318, 20318, 20318, 21494, 29748, 29748, 20318, 24258, 20318, 20318,
  /* 12470 */ 20318, 20318, 24264, 20318, 20318, 21447, 20318, 20318, 20318, 20318, 20318, 25972, 25976, 20318, 20858,
  /* 12485 */ 30003, 20858, 28255, 20890, 20890, 20890, 20890, 25202, 20866, 28248, 26996, 28446, 28252, 20865, 20318,
  /* 12500 */ 20318, 24275, 24280, 27786, 29400, 20858, 29493, 20858, 30303, 24333, 24339, 20890, 20890, 29520, 24624,
  /* 12515 */ 28252, 20865, 29524, 29530, 28446, 28252, 20865, 20318, 29906, 20318, 20318, 20318, 20387, 20394, 20318,
  /* 12530 */ 20318, 20318, 20318, 25009, 20318, 20318, 20318, 20318, 25014, 27951, 20318, 20318, 29544, 20318, 20318,
  /* 12545 */ 29190, 20318, 28249, 24359, 29748, 23774, 23780, 20858, 29171, 29388, 27122, 20858, 20858, 20858, 21801,
  /* 12560 */ 28256, 20863, 20890, 24871, 20858, 24373, 20858, 24380, 20890, 20890, 29283, 30215, 24389, 20890, 29747,
  /* 12575 */ 24621, 20866, 20318, 20318, 26997, 20318, 20318, 28250, 29748, 29748, 20318, 24395, 28250, 29748, 24399,
  /* 12590 */ 29235, 29748, 20858, 20858, 20858, 20858, 20858, 20858, 30225, 28831, 20858, 24405, 28126, 20890, 24411,
  /* 12605 */ 28577, 20890, 20890, 29746, 28252, 20865, 20318, 20318, 26996, 20318, 20318, 28249, 29748, 29748, 29748,
  /* 12620 */ 28249, 29748, 28253, 28125, 20890, 20866, 27528, 29725, 24417, 22323, 24621, 20776, 20776, 20776, 20776,
  /* 12635 */ 24627, 30242, 20318, 20318, 20318, 21037, 20484, 24582, 20318, 20318, 20318, 20318, 20318, 21591, 20318,
  /* 12650 */ 20318, 20318, 21231, 20318, 20318, 20318, 20318, 20318, 20318, 21770, 20318, 20318, 21232, 20318, 20318,
  /* 12665 */ 20318, 20318, 20318, 20318, 21824, 21829, 21791, 20863, 23413, 20890, 20890, 20890, 28166, 29746, 26879,
  /* 12680 */ 21817, 28252, 28126, 23471, 24299, 21032, 29750, 24421, 29747, 29228, 21679, 20890, 24425, 20318, 20318,
  /* 12695 */ 21449, 21110, 21110, 21452, 20318, 20318, 20318, 20318, 20318, 20318, 20601, 20318, 20318, 24444, 20318,
  /* 12710 */ 20318, 20318, 20318, 24450, 20318, 20318, 21461, 20318, 20318, 20318, 20318, 20318, 20318, 23367, 20858,
  /* 12725 */ 20858, 20858, 28115, 28325, 20890, 20890, 20890, 24461, 20890, 20890, 20890, 20890, 29748, 28363, 29747,
  /* 12740 */ 28253, 22189, 20796, 20318, 22189, 20866, 20318, 20318, 20318, 20318, 20318, 29207, 20890, 24481, 20890,
  /* 12755 */ 20890, 20890, 20890, 20890, 20890, 29589, 23436, 20318, 26487, 20318, 20318, 20318, 20318, 20318, 20318,
  /* 12770 */ 22020, 20318, 24497, 20318, 20318, 26994, 20318, 20318, 27133, 28443, 29748, 29451, 28253, 20858, 28023,
  /* 12785 */ 22189, 20890, 20890, 20890, 21560, 26994, 22011, 20318, 24506, 20890, 20890, 20890, 24021, 23438, 20318,
  /* 12800 */ 26994, 20318, 27297, 20318, 20318, 20318, 20318, 20318, 20318, 22121, 20318, 20318, 20552, 20318, 20552,
  /* 12815 */ 20318, 20554, 24522, 30339, 20318, 24526, 24532, 24533, 24533, 24533, 24533, 24533, 24537, 24540, 24542,
  /* 12830 */ 24544, 24550, 24550, 24550, 24548, 24551, 24567, 24565, 24555, 24562, 24575, 24568, 24575, 24575, 24572,
  /* 12845 */ 24558, 20481, 20318, 20404, 20408, 20318, 30324, 20318, 20318, 20318, 21985, 20318, 20318, 20318, 20318,
  /* 12860 */ 20318, 20318, 22468, 20318, 24588, 24594, 20318, 20318, 20318, 20318, 24599, 20318, 20318, 21540, 29748,
  /* 12875 */ 29748, 29748, 29748, 29748, 25436, 29748, 29748, 24611, 20318, 20318, 20318, 20318, 20318, 23132, 20318,
  /* 12890 */ 20318, 21541, 29748, 29748, 27724, 29748, 25464, 24604, 24610, 24605, 23149, 20318, 24611, 22457, 24616,
  /* 12905 */ 24620, 20818, 24631, 20858, 20858, 23352, 20890, 23825, 24641, 24646, 22529, 20916, 20318, 20318, 20318,
  /* 12920 */ 20318, 20996, 26021, 20318, 25991, 24254, 20318, 20805, 20318, 20318, 20318, 20318, 20318, 21758, 20318,
  /* 12935 */ 23698, 20318, 24446, 20318, 24726, 20318, 20318, 20318, 20318, 21012, 20318, 20318, 20318, 20318, 20318,
  /* 12950 */ 20318, 20318, 22689, 22790, 29748, 24670, 29748, 29748, 29748, 29748, 24676, 20858, 24691, 20858, 20858,
  /* 12965 */ 20858, 23331, 23645, 23709, 24099, 28322, 23469, 20890, 22534, 20890, 20890, 24696, 22883, 20890, 20890,
  /* 12980 */ 20890, 20890, 24701, 24707, 24712, 24718, 20834, 29749, 24624, 29748, 20858, 20890, 20797, 20318, 20318,
  /* 12995 */ 20318, 20318, 20318, 20318, 24730, 24736, 20318, 20318, 20318, 23445, 20318, 20318, 26260, 20318, 20318,
  /* 13010 */ 26540, 20318, 23590, 23639, 29748, 29748, 29748, 29748, 29748, 29748, 24749, 24755, 29748, 24937, 29748,
  /* 13025 */ 24761, 29748, 24948, 29748, 24123, 29748, 29748, 29748, 29748, 29748, 29748, 24935, 27246, 29748, 24783,
  /* 13040 */ 20858, 24788, 20858, 28118, 20890, 20890, 20890, 20890, 20890, 20890, 20890, 29748, 24624, 24237, 23802,
  /* 13055 */ 20890, 20890, 20890, 20890, 20890, 20890, 24797, 24803, 20890, 24720, 20890, 24809, 20890, 24799, 20890,
  /* 13070 */ 20890, 29747, 24624, 28252, 20865, 20318, 20318, 20318, 20318, 20318, 20318, 20890, 24238, 24624, 29748,
  /* 13085 */ 20858, 20890, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 21940, 27956, 20318, 27381, 20318, 27449,
  /* 13100 */ 20318, 20318, 20318, 20400, 20318, 20318, 20318, 20318, 20300, 20318, 20318, 20318, 25183, 20858, 20858,
  /* 13115 */ 25178, 20858, 20858, 20858, 20858, 20858, 20858, 28735, 20858, 20858, 24852, 28256, 20863, 24858, 20890,
  /* 13130 */ 20890, 24864, 20890, 24869, 20890, 20890, 25547, 20890, 29746, 26546, 24875, 28252, 28126, 20865, 20318,
  /* 13145 */ 20318, 20318, 20318, 21058, 20318, 20318, 20318, 20318, 25596, 24881, 24885, 28345, 24894, 24900, 20318,
  /* 13160 */ 20318, 21547, 20318, 20318, 20318, 20318, 20318, 20318, 27884, 20318, 20318, 24906, 20318, 24911, 28548,
  /* 13175 */ 28619, 24918, 20318, 20318, 21549, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 21448, 24924, 20318,
  /* 13190 */ 25719, 20318, 20318, 24929, 20318, 28462, 20858, 26050, 20858, 24963, 24969, 28256, 28507, 20890, 20890,
  /* 13205 */ 29751, 20318, 28249, 29748, 29748, 23436, 20858, 24980, 25840, 20890, 26519, 24985, 26660, 24991, 24995,
  /* 13220 */ 24621, 20874, 20318, 20318, 25001, 25007, 20318, 20318, 20318, 26993, 20318, 27003, 26628, 22504, 25982,
  /* 13235 */ 25013, 20318, 20318, 26071, 20318, 20318, 25018, 20318, 20318, 25024, 20318, 20318, 20318, 27590, 27040,
  /* 13250 */ 25033, 28252, 25038, 25043, 20858, 20858, 20858, 25049, 25055, 25060, 25066, 26335, 20858, 27151, 25075,
  /* 13265 */ 25080, 20318, 25129, 20318, 20318, 28250, 29688, 28498, 27731, 25144, 25149, 20858, 20858, 27218, 20858,
  /* 13280 */ 20858, 28126, 20890, 20890, 25850, 20890, 20890, 28886, 27263, 27158, 20890, 20890, 20890, 25155, 20890,
  /* 13295 */ 20890, 29751, 26994, 20318, 25187, 29748, 29748, 22509, 29748, 29748, 27979, 22515, 29748, 20318, 20318,
  /* 13310 */ 26989, 20318, 20318, 20318, 20318, 28443, 24623, 28252, 25201, 21819, 26995, 20318, 20318, 20318, 28486,
  /* 13325 */ 29748, 29748, 28765, 28252, 25176, 20858, 20858, 25182, 28280, 20890, 20890, 22038, 21813, 20890, 24649,
  /* 13340 */ 22136, 28363, 27562, 29746, 23439, 20318, 26995, 20318, 30092, 29748, 24323, 29748, 24329, 29625, 20858,
  /* 13355 */ 20858, 20858, 20858, 20860, 20890, 20890, 20890, 20890, 20890, 20890, 22483, 25194, 25198, 20858, 27852,
  /* 13370 */ 25207, 25216, 20890, 27869, 25221, 25225, 20318, 20318, 28443, 29748, 29748, 28252, 20858, 20858, 28125,
  /* 13385 */ 20890, 20890, 25255, 20318, 28443, 23436, 20858, 22189, 20864, 28249, 23436, 28125, 20318, 20318, 27303,
  /* 13400 */ 20318, 20660, 20318, 21587, 20318, 20318, 21592, 20318, 20318, 20318, 20318, 20305, 28449, 30439, 25273,
  /* 13415 */ 25287, 25281, 25276, 25277, 25285, 20318, 21453, 20318, 20318, 20318, 20318, 20318, 20318, 22738, 20318,
  /* 13430 */ 29927, 29748, 29748, 29748, 29748, 29748, 29748, 29748, 26062, 29748, 29748, 29748, 28253, 20858, 25320,
  /* 13445 */ 20858, 20858, 20858, 20858, 20858, 20858, 29160, 20858, 20383, 25326, 20318, 20318, 20318, 20318, 20318,
  /* 13460 */ 20318, 22771, 20318, 25331, 23944, 20318, 20318, 20318, 20318, 20318, 20318, 22827, 20318, 26709, 20318,
  /* 13475 */ 26709, 23944, 27305, 21581, 27541, 27543, 27622, 25340, 27624, 27624, 25340, 27624, 27626, 25344, 25347,
  /* 13490 */ 25347, 25347, 25347, 25347, 25347, 25347, 25348, 25353, 25365, 25368, 25352, 25357, 25362, 25357, 25358,
  /* 13505 */ 25365, 25372, 20480, 20318, 20403, 20407, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 22305, 21101,
  /* 13520 */ 22503, 20318, 20318, 20318, 20318, 20318, 20318, 23241, 20318, 20988, 20990, 23421, 20989, 20318, 20318,
  /* 13535 */ 20318, 22332, 20318, 21942, 20879, 29748, 29748, 28818, 23436, 25376, 25381, 20858, 21278, 20858, 21520,
  /* 13550 */ 21530, 20890, 20890, 22117, 22568, 28361, 25200, 29748, 20858, 21519, 20739, 20797, 20318, 20318, 20318,
  /* 13565 */ 20318, 20318, 20318, 20318, 24666, 22167, 20896, 21808, 25388, 28363, 25386, 28252, 21280, 22166, 21971,
  /* 13580 */ 23606, 23691, 20318, 25394, 20318, 20318, 20318, 27303, 20318, 20660, 20318, 20318, 20318, 20318, 20318,
  /* 13595 */ 20318, 28439, 27821, 29748, 29748, 25429, 29748, 23294, 20858, 23188, 20858, 23326, 20858, 20858, 23715,
  /* 13610 */ 28115, 28325, 20890, 20890, 20890, 20890, 20890, 20890, 25299, 25305, 29120, 20890, 20890, 28163, 20890,
  /* 13625 */ 22817, 20890, 20890, 22816, 20890, 20890, 20890, 20890, 20890, 25643, 20890, 20890, 20890, 30387, 20890,
  /* 13640 */ 25455, 20890, 20890, 25445, 20890, 20890, 30021, 20890, 20890, 20834, 29749, 24624, 29748, 20858, 20890,
  /* 13655 */ 25469, 29748, 29748, 29748, 29748, 24319, 28252, 20858, 20858, 28867, 20858, 20858, 20858, 20858, 20858,
  /* 13670 */ 25580, 20858, 20858, 20858, 30375, 24243, 20858, 20858, 20858, 30480, 20858, 20858, 20858, 22477, 20858,
  /* 13685 */ 20858, 20858, 20858, 20858, 20858, 28254, 28361, 20890, 20890, 20858, 25051, 28310, 20890, 20890, 22590,
  /* 13700 */ 20890, 25474, 25479, 20890, 20890, 20890, 20890, 24462, 20890, 29747, 23121, 24624, 23126, 24007, 23095,
  /* 13715 */ 26358, 24606, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 28082, 20318, 25496, 20318, 20318, 20318,
  /* 13730 */ 25501, 20318, 20318, 20318, 27345, 20318, 20318, 20318, 20318, 21940, 29748, 29748, 29748, 29748, 29748,
  /* 13745 */ 26314, 25542, 29748, 25508, 29748, 29748, 20858, 20858, 20858, 20858, 20858, 21519, 20890, 20890, 20890,
  /* 13760 */ 20890, 25513, 20858, 20858, 25519, 25524, 25526, 20858, 20858, 20732, 20858, 20858, 20858, 20858, 20858,
  /* 13775 */ 20858, 20858, 28323, 20890, 20890, 25530, 20890, 20890, 20834, 28444, 25200, 23436, 28125, 23470, 28125,
  /* 13790 */ 20864, 20318, 20318, 20318, 20318, 25535, 20318, 20318, 21597, 20318, 20318, 20318, 20318, 29078, 28456,
  /* 13805 */ 20318, 20318, 20318, 20318, 20318, 20318, 20318, 28087, 25753, 20858, 20858, 20858, 20858, 20858, 20858,
  /* 13820 */ 20858, 24779, 20890, 25546, 20890, 20890, 20890, 20890, 20890, 20890, 29746, 28491, 25200, 23436, 28125,
  /* 13835 */ 20794, 20318, 25813, 20318, 20318, 20318, 25551, 20318, 20318, 20318, 27352, 20318, 20318, 20318, 20318,
  /* 13850 */ 22222, 20318, 20318, 20318, 20318, 25561, 20318, 20318, 28443, 26973, 29748, 27602, 20858, 25573, 20858,
  /* 13865 */ 25579, 20858, 20858, 20858, 20858, 20858, 20858, 30308, 28117, 20858, 20858, 27055, 27150, 20890, 25584,
  /* 13880 */ 20890, 25590, 29583, 20858, 20858, 20858, 20858, 28125, 20890, 20890, 20834, 20318, 28250, 29748, 20858,
  /* 13895 */ 20858, 25615, 20890, 20890, 20890, 20890, 20890, 28670, 20890, 20890, 20890, 25621, 29748, 28126, 20318,
  /* 13910 */ 20318, 26994, 20318, 20318, 20318, 28443, 29748, 29748, 29748, 23436, 20858, 29247, 25626, 20858, 27863,
  /* 13925 */ 25631, 20890, 28050, 25636, 29751, 28922, 29748, 21662, 20858, 25641, 20890, 29751, 22057, 28249, 29748,
  /* 13940 */ 29748, 23436, 20858, 20858, 20858, 28126, 20890, 20890, 20890, 20890, 20890, 20890, 20890, 24128, 25657,
  /* 13955 */ 28250, 28126, 20777, 20777, 20777, 20777, 20478, 20483, 20318, 20318, 26397, 27306, 20659, 20318, 25662,
  /* 13970 */ 25667, 25674, 25674, 25672, 25674, 25668, 25678, 25680, 25682, 25684, 25684, 25684, 25684, 25685, 25701,
  /* 13985 */ 25699, 25689, 25696, 25709, 25702, 25709, 25709, 25706, 25692, 23053, 20318, 20404, 20408, 20318, 20318,
  /* 14000 */ 20318, 20318, 20318, 20318, 20318, 25713, 20318, 20318, 20318, 20318, 20318, 21941, 29748, 29748, 20318,
  /* 14015 */ 20992, 20318, 20318, 20318, 20993, 20995, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 28249, 29748,
  /* 14030 */ 29748, 29748, 29748, 25600, 20994, 20318, 20318, 20318, 20993, 20318, 29748, 21948, 28643, 29748, 29748,
  /* 14045 */ 28252, 21684, 20908, 20858, 20858, 20751, 20858, 20858, 20858, 20858, 20858, 20858, 20858, 28324, 26911,
  /* 14060 */ 20890, 20318, 25718, 20318, 20318, 20318, 20318, 20318, 20318, 23280, 22732, 25227, 25723, 20318, 20318,
  /* 14075 */ 20318, 20318, 20318, 20318, 23436, 28447, 28253, 29747, 23010, 20318, 20318, 20318, 20318, 25730, 21492,
  /* 14090 */ 29748, 29748, 23165, 22698, 23177, 29748, 29748, 22347, 20858, 24076, 20858, 20858, 21518, 22160, 20858,
  /* 14105 */ 20858, 20858, 20858, 20858, 25747, 20858, 20858, 20858, 22577, 20858, 20858, 20858, 21283, 27151, 20890,
  /* 14120 */ 20890, 20890, 20890, 20890, 20890, 20890, 28444, 20858, 25752, 27498, 20858, 28322, 23469, 20890, 20890,
  /* 14135 */ 20890, 20890, 20890, 20890, 20890, 25757, 20890, 20890, 20890, 20890, 29866, 20890, 20890, 23797, 20890,
  /* 14150 */ 20890, 25794, 20890, 20890, 23866, 20890, 20890, 20890, 29942, 20890, 23559, 23547, 20890, 20890, 20834,
  /* 14165 */ 29749, 25762, 23890, 23786, 23808, 21973, 25808, 25913, 25993, 20318, 20318, 20318, 27668, 20318, 20318,
  /* 14180 */ 20318, 20318, 22550, 20318, 20318, 20530, 20318, 23221, 21299, 25771, 20318, 20318, 20318, 25777, 29748,
  /* 14195 */ 30345, 29748, 29748, 29748, 29748, 29748, 29748, 29569, 20858, 28736, 24692, 20858, 20858, 20858, 20858,
  /* 14210 */ 25788, 20858, 20858, 20858, 20858, 28254, 23468, 20890, 20890, 20836, 20318, 26997, 22876, 28443, 29636,
  /* 14225 */ 20890, 29516, 20890, 20890, 20890, 20890, 20890, 20890, 29748, 28363, 29747, 28253, 20318, 24612, 20318,
  /* 14240 */ 20318, 20318, 24656, 25799, 20318, 20318, 21633, 20318, 20318, 20318, 20318, 20318, 20867, 20318, 20318,
  /* 14255 */ 20318, 20318, 24925, 20318, 25806, 20318, 25115, 20318, 20318, 21634, 20318, 20318, 25396, 25415, 25424,
  /* 14270 */ 25812, 20318, 20318, 20318, 20318, 20318, 20318, 27815, 28443, 29748, 29748, 29748, 24681, 29748, 25817,
  /* 14285 */ 29748, 24364, 24369, 29748, 28450, 20858, 20858, 29155, 25322, 20858, 20858, 20858, 20858, 20858, 20858,
  /* 14300 */ 25828, 25833, 20858, 20858, 20858, 20858, 21290, 20863, 20890, 20890, 30054, 20318, 28250, 29748, 28253,
  /* 14315 */ 20858, 20858, 20858, 20858, 22418, 20858, 29440, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 28250,
  /* 14330 */ 29748, 29748, 29748, 20858, 25874, 20890, 20890, 28917, 29751, 25879, 20318, 20318, 21748, 20318, 20318,
  /* 14345 */ 20318, 20318, 20318, 21546, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 20466, 28126, 26195, 20890,
  /* 14360 */ 20890, 20836, 20318, 20318, 28443, 29748, 29748, 28252, 20858, 20858, 28253, 20858, 20890, 20829, 20318,
  /* 14375 */ 28443, 23436, 20858, 20858, 20858, 20858, 20858, 20858, 28126, 20890, 20890, 20890, 20836, 20318, 20318,
  /* 14390 */ 20318, 20318, 25900, 20318, 20318, 20318, 20318, 20318, 22377, 20318, 20318, 29836, 25917, 25943, 25943,
  /* 14405 */ 25926, 25943, 25943, 25932, 25928, 25937, 25938, 25942, 25943, 25944, 25933, 25943, 25948, 25956, 25954,
  /* 14420 */ 25961, 25950, 25968, 25957, 25967, 25968, 25965, 20478, 20482, 20410, 20405, 20409, 28688, 20318, 20318,
  /* 14435 */ 20318, 21909, 20318, 24580, 20318, 20318, 20318, 27654, 20318, 27664, 30066, 20318, 22128, 25981, 20318,
  /* 14450 */ 25986, 20318, 20318, 20318, 27783, 20318, 20318, 20318, 20318, 24303, 20318, 24581, 20318, 22990, 20318,
  /* 14465 */ 25997, 30066, 20318, 26002, 23143, 26020, 20318, 20318, 26033, 25997, 26025, 26030, 20318, 26037, 20318,
  /* 14480 */ 26005, 28249, 26886, 28242, 26043, 26061, 29148, 22562, 20885, 26048, 22575, 28880, 21518, 23107, 23992,
  /* 14495 */ 26054, 26364, 25308, 26361, 26059, 28361, 26466, 29748, 24680, 24685, 20858, 20858, 25243, 20858, 22708,
  /* 14510 */ 26070, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 28439, 23435, 29748, 20318, 21846, 20806, 20318,
  /* 14525 */ 20318, 20318, 24309, 20318, 20318, 21929, 20318, 20318, 20318, 20318, 20318, 24026, 20318, 20318, 21918,
  /* 14540 */ 20318, 20318, 20318, 20318, 26075, 20318, 26081, 20318, 26070, 22658, 20318, 26086, 20318, 20318, 20318,
  /* 14555 */ 20420, 20318, 20318, 20318, 20318, 20313, 20317, 20318, 20318, 20318, 20318, 20318, 20318, 27304, 20447,
  /* 14570 */ 20318, 20318, 25419, 20318, 26091, 21845, 25563, 20318, 20318, 21933, 29428, 20318, 20318, 20318, 21939,
  /* 14585 */ 25417, 25773, 20318, 21493, 29748, 29748, 22796, 29748, 24841, 29748, 29748, 29748, 29748, 29748, 29748,
  /* 14600 */ 25846, 28244, 27485, 25210, 20858, 20858, 20858, 23089, 20858, 20858, 20858, 20858, 24965, 20858, 20858,
  /* 14615 */ 20858, 20858, 25632, 20318, 28033, 24860, 20858, 28323, 20890, 20890, 22724, 20890, 20890, 22861, 20890,
  /* 14630 */ 29746, 20747, 26102, 26108, 26114, 26119, 20318, 20318, 22106, 20318, 20318, 20318, 20318, 20318, 20977,
  /* 14645 */ 21011, 20318, 26131, 20318, 20318, 20318, 27510, 26206, 26137, 20318, 20318, 22214, 22218, 20968, 22216,
  /* 14660 */ 22217, 22214, 24088, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 28440, 29748, 29748, 26148, 20318,
  /* 14675 */ 20318, 28439, 28443, 29748, 26154, 29748, 24941, 26155, 29748, 24651, 24946, 20902, 20858, 20858, 20858,
  /* 14690 */ 22189, 20890, 20890, 20890, 29751, 20318, 20318, 29748, 29748, 29748, 26159, 29748, 29748, 29748, 29748,
  /* 14705 */ 29748, 29748, 29748, 30343, 29748, 23436, 20858, 20858, 24233, 20858, 20858, 26165, 20858, 20858, 20858,
  /* 14720 */ 20858, 25870, 20858, 20858, 20858, 20858, 20858, 28118, 20890, 20890, 20890, 20890, 26175, 20890, 20890,
  /* 14735 */ 20890, 20890, 20890, 20890, 20890, 30015, 20890, 26181, 26187, 25200, 23436, 28125, 20864, 20318, 20318,
  /* 14750 */ 20318, 28174, 20318, 26199, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 28441, 29748, 29748, 26204,
  /* 14765 */ 20318, 20318, 20318, 20318, 26210, 20318, 20318, 20318, 27809, 28250, 29748, 29748, 29748, 23634, 29748,
  /* 14780 */ 29748, 25783, 29748, 29748, 22844, 29748, 29748, 24004, 29748, 22850, 26216, 20318, 20318, 20318, 20318,
  /* 14795 */ 24365, 29748, 29748, 23759, 29748, 29748, 29748, 29915, 29748, 26161, 29748, 29748, 29748, 29748, 26221,
  /* 14810 */ 29748, 28252, 20858, 22189, 20890, 29751, 28250, 29748, 20858, 28126, 20890, 20318, 29748, 26226, 20858,
  /* 14825 */ 20858, 20858, 20858, 20858, 20858, 20858, 27150, 20890, 26242, 28253, 22189, 20866, 20318, 20318, 25497,
  /* 14840 */ 26247, 26253, 26258, 26264, 20318, 25611, 20318, 20318, 20318, 20453, 20690, 20318, 20318, 20318, 20318,
  /* 14855 */ 25268, 20318, 20318, 20318, 20318, 25334, 20318, 20662, 20318, 26270, 20318, 20318, 20318, 20318, 28625,
  /* 14870 */ 20318, 26279, 20318, 28759, 20318, 26285, 20318, 25731, 20318, 28250, 28252, 28126, 20865, 28252, 20775,
  /* 14885 */ 30048, 30048, 26695, 24001, 29748, 26306, 26312, 29748, 29748, 28253, 20858, 20858, 20858, 20858, 21518,
  /* 14900 */ 20890, 20890, 20890, 20890, 20890, 20890, 29748, 28126, 20318, 27500, 26318, 25829, 26327, 26333, 26166,
  /* 14915 */ 20858, 26339, 20858, 26345, 26350, 20858, 20858, 20318, 27151, 20890, 20890, 28136, 28141, 20890, 20890,
  /* 14930 */ 25622, 25310, 20890, 26355, 26376, 20890, 26369, 29647, 20890, 26374, 26380, 20890, 20890, 20834, 28445,
  /* 14945 */ 26386, 26390, 20318, 20318, 20318, 30059, 29217, 20318, 26394, 20318, 20318, 26026, 20318, 26401, 29348,
  /* 14960 */ 26405, 20318, 20318, 22296, 20318, 20318, 20318, 20318, 20318, 21162, 20318, 20318, 25420, 20318, 20318,
  /* 14975 */ 26411, 20318, 28630, 29748, 29748, 24145, 29748, 22111, 29748, 29748, 20858, 20858, 20858, 22189, 20890,
  /* 14990 */ 20890, 20835, 26426, 26432, 20858, 20858, 20858, 25212, 26438, 20858, 20858, 20858, 24767, 24772, 20858,
  /* 15005 */ 24777, 20858, 20858, 20858, 22158, 21283, 27151, 22164, 22171, 26978, 20858, 20858, 26444, 23406, 26448,
  /* 15020 */ 20890, 20890, 23985, 20890, 20890, 22429, 20890, 20890, 20890, 30103, 29748, 28126, 20318, 20318, 20318,
  /* 15035 */ 25334, 20318, 20318, 20318, 20318, 20552, 20890, 24385, 26454, 20890, 26370, 20890, 20890, 26460, 30238,
  /* 15050 */ 28104, 26464, 28127, 20318, 20318, 20347, 20318, 20318, 22387, 20318, 20318, 22397, 26857, 20318, 20318,
  /* 15065 */ 20964, 20318, 20318, 20318, 20318, 20318, 21042, 24579, 24583, 26470, 20318, 20318, 20318, 20318, 20318,
  /* 15080 */ 20318, 20318, 28442, 20318, 26475, 20318, 26481, 24493, 29748, 29748, 29748, 27696, 27838, 27396, 27985,
  /* 15095 */ 25028, 27826, 26491, 28098, 26497, 29748, 23436, 26503, 20858, 20858, 20858, 24953, 20858, 20858, 20858,
  /* 15110 */ 20858, 20858, 20858, 30231, 28254, 20858, 20858, 26509, 20858, 26513, 20858, 20858, 25217, 20890, 28445,
  /* 15125 */ 28449, 28127, 26529, 27792, 20318, 20318, 20318, 27894, 20318, 20318, 23455, 20318, 26544, 26550, 30221,
  /* 15140 */ 28190, 29748, 23436, 28660, 26562, 26567, 26573, 26607, 20858, 28126, 28897, 28034, 26579, 26584, 26589,
  /* 15155 */ 20890, 29746, 28252, 28840, 20318, 20318, 20318, 27897, 21228, 20318, 27896, 27898, 26996, 26595, 26600,
  /* 15170 */ 28249, 29748, 29131, 29748, 29748, 24401, 29748, 29748, 22404, 29748, 29748, 20858, 30477, 20858, 20858,
  /* 15185 */ 20858, 20858, 20858, 28115, 28325, 20890, 28253, 20858, 26605, 20858, 28125, 20890, 28478, 20890, 20890,
  /* 15200 */ 30389, 25475, 20890, 20890, 20890, 20890, 25795, 20890, 20890, 20890, 20890, 25202, 20866, 20318, 26996,
  /* 15215 */ 29965, 28250, 29748, 20858, 28126, 20890, 20318, 25647, 25652, 29257, 29748, 28253, 20858, 27175, 20858,
  /* 15230 */ 20890, 20890, 20890, 20834, 22543, 20318, 28249, 26611, 20834, 26617, 26623, 20318, 28249, 26632, 21618,
  /* 15245 */ 30493, 28252, 26638, 26643, 29779, 26649, 20890, 26653, 26658, 29751, 26664, 30205, 29748, 29748, 29241,
  /* 15260 */ 26669, 20858, 27914, 26674, 20890, 20890, 26680, 20318, 20318, 20318, 27934, 20318, 20318, 20318, 20318,
  /* 15275 */ 20318, 28249, 23437, 28448, 28125, 29748, 20890, 25200, 20890, 20890, 20835, 20318, 29462, 28252, 26689,
  /* 15290 */ 28149, 20865, 28250, 28252, 28126, 20865, 24159, 24168, 30048, 26699, 21156, 20318, 20318, 20318, 20318,
  /* 15305 */ 20318, 20318, 20318, 26995, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 20484, 21204, 20586, 26703,
  /* 15320 */ 20318, 20318, 20318, 20318, 20484, 25336, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 24582, 20318,
  /* 15335 */ 20318, 20318, 20318, 20318, 20318, 20318, 20319, 21155, 20318, 26626, 20318, 20318, 20318, 20318, 20318,
  /* 15350 */ 20318, 24066, 20318, 20318, 20318, 27304, 20630, 26715, 20632, 26718, 26721, 26721, 26721, 26721, 26721,
  /* 15365 */ 26725, 26731, 26729, 26735, 26735, 26735, 26735, 26735, 26735, 26738, 26747, 26740, 26750, 26753, 26744,
  /* 15380 */ 26761, 26758, 26763, 26754, 26771, 20318, 20318, 20318, 26777, 26781, 21754, 20318, 20318, 22456, 20318,
  /* 15395 */ 20318, 21426, 20842, 20318, 20318, 20484, 24582, 20318, 21979, 20318, 20318, 20318, 29044, 20318, 20318,
  /* 15410 */ 20318, 20318, 20318, 30325, 21162, 29748, 20318, 22900, 24518, 24581, 20318, 20318, 22063, 22138, 26786,
  /* 15425 */ 26790, 20318, 21067, 20318, 20318, 20318, 20318, 21609, 28385, 27312, 20318, 20318, 26796, 20318, 26811,
  /* 15440 */ 20318, 21243, 26817, 26821, 20318, 26813, 20318, 20318, 26830, 21364, 22898, 29101, 26836, 26840, 20328,
  /* 15455 */ 20318, 20318, 26799, 20318, 26849, 26855, 26861, 26867, 29103, 26873, 20318, 20318, 26877, 26921, 28292,
  /* 15470 */ 26883, 22411, 29748, 20769, 26892, 22425, 21874, 26903, 21519, 28008, 24383, 26908, 22173, 20890, 20916,
  /* 15485 */ 27576, 27582, 20318, 20318, 20318, 20318, 22469, 20318, 20318, 20318, 20834, 22357, 21482, 26918, 22413,
  /* 15500 */ 23321, 26925, 26929, 23835, 20318, 20318, 20318, 26933, 20318, 20484, 26938, 20318, 21834, 20318, 20318,
  /* 15515 */ 24902, 20318, 20318, 26949, 20318, 20318, 25295, 26954, 20318, 20318, 20318, 20318, 21833, 20318, 21838,
  /* 15530 */ 20318, 26960, 29748, 26966, 26972, 29748, 23704, 29748, 28253, 20858, 20858, 20858, 20890, 20890, 20890,
  /* 15545 */ 20834, 20318, 26995, 20318, 28249, 29748, 20858, 26982, 20858, 20858, 27554, 20858, 28324, 20890, 20890,
  /* 15560 */ 20890, 20890, 20890, 20890, 20890, 28445, 28449, 28127, 20318, 20318, 20318, 23383, 30459, 20890, 23564,
  /* 15575 */ 20890, 23720, 24997, 28492, 28440, 27027, 24094, 29748, 29748, 29748, 29748, 27033, 28116, 27069, 23861,
  /* 15590 */ 20890, 20890, 20890, 20890, 27075, 20890, 27081, 27086, 20890, 20890, 20890, 20890, 20890, 29306, 30418,
  /* 15605 */ 20890, 28252, 28126, 20865, 27096, 24451, 27100, 27106, 24595, 27110, 20318, 20318, 20318, 20318, 27102,
  /* 15620 */ 20318, 20318, 20318, 28249, 29748, 20727, 29748, 24477, 20318, 27116, 20318, 20318, 20318, 20318, 20318,
  /* 15635 */ 20318, 24583, 29021, 20318, 20318, 27132, 20318, 20318, 20318, 20318, 27137, 20858, 27148, 28984, 27157,
  /* 15650 */ 20890, 20890, 20890, 20890, 27186, 29599, 28447, 24621, 20890, 26613, 29746, 28446, 25202, 28127, 20318,
  /* 15665 */ 20318, 20318, 20318, 20318, 20318, 29330, 20318, 29090, 20318, 27162, 20318, 20318, 20318, 20318, 21917,
  /* 15680 */ 21915, 28250, 29748, 20318, 27167, 22324, 29748, 29748, 29748, 29748, 29748, 30429, 29748, 29748, 29748,
  /* 15695 */ 27832, 29748, 29748, 29748, 29748, 29748, 27173, 20858, 20858, 20858, 26232, 20858, 20858, 20858, 30320,
  /* 15710 */ 20858, 28255, 27184, 20890, 20890, 20890, 20890, 20890, 29746, 28447, 24621, 20866, 20318, 20318, 20318,
  /* 15725 */ 20318, 25595, 27190, 20890, 20890, 20890, 20890, 20834, 28446, 28252, 20865, 20318, 20318, 20865, 27195,
  /* 15740 */ 29526, 20318, 20318, 20318, 20318, 20318, 22545, 20318, 20318, 20318, 29748, 27486, 29748, 29748, 27909,
  /* 15755 */ 29748, 29748, 24757, 29748, 29748, 29748, 29748, 29748, 27413, 29748, 29748, 27428, 20890, 20890, 20890,
  /* 15770 */ 20890, 20834, 28446, 28252, 20824, 20318, 20318, 20318, 20318, 20318, 20318, 30467, 20318, 20865, 27212,
  /* 15785 */ 20318, 20318, 20318, 20318, 20318, 20318, 24724, 20318, 29747, 24621, 20866, 29794, 20318, 26997, 20318,
  /* 15800 */ 20318, 28250, 29748, 29748, 29748, 29748, 20858, 20858, 21761, 28650, 29748, 29748, 29748, 27217, 27222,
  /* 15815 */ 20858, 20858, 20858, 27059, 24768, 24784, 29731, 20858, 20858, 20858, 25071, 20858, 20858, 20858, 20858,
  /* 15830 */ 20858, 20858, 28255, 27151, 20890, 20890, 20858, 28601, 28285, 20890, 20890, 20890, 23437, 27228, 27234,
  /* 15845 */ 26997, 27239, 28339, 29252, 29748, 27244, 28572, 27128, 20858, 27250, 27255, 27261, 28781, 20835, 20318,
  /* 15860 */ 20318, 28250, 29748, 29748, 23436, 20858, 20858, 26996, 25166, 28250, 29456, 29682, 29748, 28253, 27208,
  /* 15875 */ 29773, 20858, 20890, 27267, 27273, 20834, 20318, 20318, 28249, 29748, 29748, 29748, 20858, 20858, 20858,
  /* 15890 */ 22189, 28253, 28125, 20890, 21537, 28443, 28253, 22189, 22323, 24621, 20776, 20776, 20776, 20776, 24627,
  /* 15905 */ 20482, 24621, 20776, 20776, 26914, 27285, 24627, 20482, 20318, 20318, 20318, 20318, 20318, 20318, 20318,
  /* 15920 */ 24583, 20318, 20658, 20318, 27954, 27301, 20318, 20318, 20318, 20318, 21923, 24582, 27743, 27748, 28384,
  /* 15935 */ 28385, 28385, 27318, 27330, 27333, 27317, 27322, 27327, 27322, 27323, 27337, 27341, 20480, 20318, 20403,
  /* 15950 */ 21733, 23436, 20858, 20858, 21802, 20858, 27357, 20863, 20740, 20318, 20318, 20318, 20318, 20318, 20318,
  /* 15965 */ 20413, 23242, 27362, 28252, 28254, 20890, 20915, 20318, 20318, 20318, 20318, 20318, 20318, 21640, 20318,
  /* 15980 */ 27367, 20318, 20318, 20318, 20318, 22311, 20318, 20318, 20318, 21641, 20318, 20318, 20318, 20318, 20318,
  /* 15995 */ 27385, 20318, 20318, 22457, 29748, 28156, 29748, 29748, 29748, 26968, 29748, 29748, 29748, 29748, 26222,
  /* 16010 */ 29748, 29748, 29748, 27390, 20318, 20318, 20318, 28439, 23435, 29748, 29748, 29748, 29748, 27395, 27400,
  /* 16025 */ 29748, 23166, 29748, 29748, 29748, 27406, 27417, 20858, 27710, 20858, 20858, 20858, 27422, 20858, 20858,
  /* 16040 */ 20858, 28115, 20863, 20890, 26170, 20890, 20890, 30107, 20890, 20890, 20890, 20890, 29746, 25257, 23062,
  /* 16055 */ 20866, 20318, 20318, 20318, 20318, 30534, 29608, 20318, 23345, 20858, 28115, 28325, 20890, 20890, 28212,
  /* 16070 */ 22823, 27432, 20890, 20890, 29748, 27438, 27442, 28253, 22189, 23472, 24514, 20318, 20318, 20318, 20318,
  /* 16085 */ 20318, 20318, 26121, 23033, 26016, 23122, 20318, 20318, 20318, 20318, 22330, 20318, 20318, 21102, 20318,
  /* 16100 */ 20318, 27447, 20318, 20318, 27947, 20318, 20318, 20318, 28381, 30152, 30150, 30156, 30158, 27481, 20318,
  /* 16115 */ 20318, 24889, 20318, 20318, 20318, 20318, 22337, 20318, 20318, 20318, 27458, 29748, 29748, 29748, 29748,
  /* 16130 */ 29748, 29748, 29748, 28253, 20858, 20858, 20858, 28125, 20890, 20890, 27469, 20890, 20890, 20890, 20890,
  /* 16145 */ 20890, 20890, 20890, 30236, 20890, 20318, 28686, 23043, 20318, 28694, 20318, 20318, 20318, 20485, 20318,
  /* 16160 */ 20318, 22548, 20318, 22551, 20313, 22920, 20318, 20403, 20318, 27475, 20318, 20318, 20318, 20318, 20318,
  /* 16175 */ 20318, 24815, 24824, 27480, 27584, 20318, 20318, 20318, 20318, 20318, 20318, 24825, 20318, 29557, 20318,
  /* 16190 */ 20318, 20318, 20318, 25425, 28250, 29748, 29748, 23436, 20858, 20858, 20858, 20890, 20890, 20890, 20836,
  /* 16205 */ 27490, 27495, 20858, 20858, 20858, 20858, 20858, 20858, 20318, 27151, 20318, 20318, 28220, 20318, 20318,
  /* 16220 */ 20318, 20318, 20318, 22548, 20318, 20318, 20318, 28708, 20318, 20318, 20318, 20318, 20318, 20318, 25119,
  /* 16235 */ 25124, 27509, 29748, 29748, 29748, 29748, 29748, 29748, 29748, 28253, 20858, 20858, 23907, 20858, 25824,
  /* 16250 */ 20858, 20858, 20858, 20858, 20858, 28255, 27514, 25658, 20890, 20890, 20890, 20890, 20890, 20890, 29747,
  /* 16265 */ 24624, 28252, 20865, 28125, 20890, 20890, 20890, 20890, 20890, 20890, 20890, 29747, 28446, 29747, 28253,
  /* 16280 */ 22189, 20866, 27547, 29748, 29748, 23436, 27551, 20858, 20858, 28468, 27560, 20890, 20890, 20836, 20318,
  /* 16295 */ 25864, 20318, 27566, 20318, 27571, 20318, 20318, 20318, 20318, 20318, 20318, 25164, 20318, 29312, 29314,
  /* 16310 */ 20318, 29313, 20318, 20318, 20318, 29312, 20318, 20318, 29311, 20318, 20318, 20318, 20573, 20318, 20318,
  /* 16325 */ 20318, 20318, 20318, 27117, 20318, 20318, 20318, 29748, 28269, 29748, 29748, 29748, 29771, 29062, 20890,
  /* 16340 */ 25765, 29747, 29751, 24624, 29748, 28253, 21518, 20890, 20916, 20318, 20318, 20318, 27588, 29748, 29748,
  /* 16355 */ 29748, 29748, 29748, 28636, 28253, 20858, 20858, 20858, 20858, 20858, 20858, 20890, 26654, 20890, 20890,
  /* 16370 */ 20858, 20858, 27594, 20890, 20890, 20890, 20890, 20890, 29747, 28492, 25201, 28252, 28126, 27600, 29748,
  /* 16385 */ 29748, 29748, 20858, 20858, 20858, 27606, 20858, 20858, 28125, 20890, 20890, 28137, 20890, 20890, 24360,
  /* 16400 */ 24624, 29748, 20858, 20890, 20318, 27615, 20318, 20318, 20318, 20318, 25335, 20722, 20318, 20318, 22461,
  /* 16415 */ 20318, 20318, 20318, 20318, 20318, 21167, 21161, 20318, 20723, 20318, 20318, 20318, 20318, 20318, 20318,
  /* 16430 */ 20318, 28443, 29748, 29748, 22134, 27303, 29025, 27611, 27619, 27613, 20318, 24429, 20318, 20318, 22642,
  /* 16445 */ 28443, 29748, 21959, 29748, 29748, 21946, 21952, 29748, 21957, 29748, 21963, 20318, 24428, 20318, 20759,
  /* 16460 */ 27630, 27632, 27631, 27631, 27631, 27631, 20761, 27638, 27636, 27643, 20763, 27650, 27639, 27649, 27650,
  /* 16475 */ 27647, 20478, 20482, 22767, 20318, 20318, 20318, 29616, 20318, 20318, 20318, 20599, 20318, 20318, 20269,
  /* 16490 */ 20658, 27674, 20318, 22734, 20318, 22552, 20318, 27680, 20318, 20318, 22647, 20318, 23924, 22653, 22657,
  /* 16505 */ 20318, 20318, 20983, 20991, 20318, 20318, 20318, 20318, 21448, 21110, 21110, 21110, 29555, 20318, 20318,
  /* 16520 */ 20318, 22683, 20318, 22998, 22996, 27688, 21149, 22764, 20318, 22761, 22766, 20318, 20318, 20318, 28440,
  /* 16535 */ 29748, 29748, 29748, 29748, 29748, 29748, 29886, 20318, 22996, 20318, 20318, 30146, 21864, 21667, 29748,
  /* 16550 */ 27694, 27730, 22539, 20858, 27700, 27705, 27737, 21518, 21891, 21743, 20890, 26193, 27714, 26190, 27719,
  /* 16565 */ 28361, 27287, 27728, 27735, 22032, 25106, 20797, 20318, 20318, 22668, 20318, 20318, 30289, 20318, 20318,
  /* 16580 */ 20318, 29963, 20318, 20318, 20318, 20318, 23901, 20318, 26773, 29910, 27755, 20318, 20318, 24440, 27760,
  /* 16595 */ 27765, 24732, 20318, 20318, 22743, 20318, 28441, 29748, 29748, 29748, 25435, 29748, 22202, 29748, 23629,
  /* 16610 */ 20318, 20318, 27789, 20318, 20318, 20318, 27771, 22393, 20318, 20318, 27801, 27807, 27813, 20318, 27819,
  /* 16625 */ 29748, 25450, 22200, 22596, 25454, 20796, 20318, 20318, 20318, 27303, 26008, 30063, 20318, 20318, 20318,
  /* 16640 */ 27304, 20318, 20661, 20318, 29005, 27830, 29748, 27836, 29748, 27842, 28252, 20858, 20858, 28125, 20890,
  /* 16655 */ 20890, 20890, 29751, 20318, 28249, 29748, 20858, 20858, 26323, 20858, 20858, 20858, 20858, 27851, 20858,
  /* 16670 */ 27856, 20858, 27861, 28323, 20890, 20890, 20890, 24471, 29747, 28446, 29747, 28253, 23570, 20890, 23726,
  /* 16685 */ 23684, 23792, 27873, 25569, 23954, 23855, 23814, 20318, 20318, 20318, 20318, 20318, 20318, 25314, 20318,
  /* 16700 */ 20318, 20318, 27882, 23456, 20318, 20318, 20318, 26407, 27902, 29748, 29748, 29748, 29748, 23849, 29748,
  /* 16715 */ 29748, 25541, 29748, 29748, 29748, 29748, 29748, 29150, 29748, 29748, 24314, 29748, 27908, 20858, 27913,
  /* 16730 */ 20858, 20858, 20858, 20858, 27151, 20890, 20890, 20890, 20890, 20858, 24407, 20858, 20858, 20858, 20858,
  /* 16745 */ 20858, 20858, 20858, 28125, 20890, 20890, 20890, 20890, 20890, 20890, 20834, 28445, 20858, 25245, 24959,
  /* 16760 */ 20858, 25045, 25140, 28115, 20863, 20914, 23605, 23690, 20318, 20318, 20318, 20318, 20805, 20318, 24260,
  /* 16775 */ 22122, 27918, 20890, 20890, 20890, 20890, 23935, 20890, 20890, 24413, 20890, 20890, 20890, 20890, 20890,
  /* 16790 */ 28444, 25200, 24621, 20866, 24345, 20890, 27924, 20834, 28444, 25200, 23436, 28125, 20794, 20982, 20987,
  /* 16805 */ 21000, 21005, 27230, 20318, 26534, 27375, 27938, 20318, 27946, 20318, 20318, 22839, 20318, 20318, 20318,
  /* 16820 */ 20318, 20318, 21353, 20318, 21353, 27960, 20318, 27690, 27690, 27969, 27803, 20318, 20318, 20318, 28517,
  /* 16835 */ 20318, 20318, 20318, 28785, 27978, 28645, 29748, 29748, 29748, 29748, 29748, 27983, 25029, 27989, 29748,
  /* 16850 */ 27993, 25470, 29748, 29748, 29748, 29602, 20812, 20858, 20858, 20858, 20858, 21878, 20858, 21883, 21282,
  /* 16865 */ 20858, 25441, 20858, 28017, 28021, 29482, 20858, 28027, 20890, 28048, 25446, 20890, 20890, 20890, 20890,
  /* 16880 */ 20890, 29747, 29751, 24624, 29748, 28253, 28054, 29747, 28446, 29747, 28253, 22189, 20866, 20318, 20318,
  /* 16895 */ 20318, 20318, 28060, 20318, 20318, 20318, 20318, 20318, 20318, 25484, 20318, 20318, 20318, 28070, 28076,
  /* 16910 */ 28081, 20318, 28086, 20318, 20318, 22932, 27306, 20659, 20352, 23243, 22936, 28091, 20318, 20318, 20318,
  /* 16925 */ 20318, 20318, 28787, 20318, 20318, 23015, 20318, 20318, 20318, 20318, 20318, 22452, 20318, 20318, 28846,
  /* 16940 */ 20318, 28250, 29748, 29748, 28097, 28102, 29748, 25737, 21774, 29748, 21780, 29748, 29748, 29748, 24466,
  /* 16955 */ 20858, 20858, 20858, 20858, 20858, 20858, 28256, 20863, 20890, 20890, 20890, 20890, 20890, 20890, 29748,
  /* 16970 */ 28253, 20858, 25748, 20858, 28114, 20858, 20858, 20858, 20858, 28255, 20318, 20890, 20890, 20890, 20858,
  /* 16985 */ 28124, 20858, 20858, 20858, 20858, 20858, 20858, 20858, 28254, 20318, 20890, 28147, 20890, 20890, 20890,
  /* 17000 */ 20890, 20890, 20890, 29748, 24624, 29748, 20858, 20890, 28130, 20834, 28445, 28153, 28160, 28172, 20318,
  /* 17015 */ 20318, 20318, 20639, 20318, 20460, 25920, 25921, 25977, 28178, 20318, 20318, 25998, 20318, 20318, 20318,
  /* 17030 */ 20655, 20318, 20657, 27291, 27305, 28249, 26302, 28184, 29748, 29748, 29748, 29748, 29748, 25741, 23624,
  /* 17045 */ 29748, 23436, 20858, 20858, 20858, 26639, 20858, 20858, 20863, 28209, 20890, 20890, 20890, 20890, 20890,
  /* 17060 */ 20890, 29748, 28361, 25200, 29748, 20858, 21519, 20739, 20318, 23436, 28224, 20858, 20858, 20858, 20858,
  /* 17075 */ 20858, 20858, 20858, 28255, 20890, 20858, 20858, 28229, 20890, 20890, 20890, 20890, 20890, 29987, 20890,
  /* 17090 */ 20834, 20318, 20318, 26950, 20318, 20318, 20318, 20318, 20318, 22917, 20318, 20396, 20318, 28264, 28771,
  /* 17105 */ 29748, 29376, 28203, 28273, 20858, 20858, 20858, 28116, 20890, 20890, 20890, 20890, 20890, 20890, 27202,
  /* 17120 */ 28279, 28284, 20890, 28289, 20318, 26995, 20318, 20318, 20318, 29748, 29748, 30025, 22189, 20890, 20890,
  /* 17135 */ 20890, 29751, 28298, 20318, 29748, 25883, 29748, 23436, 27701, 20858, 20858, 20858, 20858, 28254, 28361,
  /* 17150 */ 30214, 20890, 28302, 29748, 28253, 28307, 20858, 28126, 28040, 20890, 21818, 28448, 28126, 25110, 25114,
  /* 17165 */ 20318, 20318, 20318, 27015, 20318, 20318, 20318, 27021, 20834, 20318, 28314, 28250, 29748, 29748, 28252,
  /* 17180 */ 20858, 20858, 24162, 20858, 20858, 20890, 28329, 28338, 28252, 28126, 21695, 28252, 20775, 30048, 30048,
  /* 17195 */ 30048, 24626, 20317, 20318, 20318, 20318, 20318, 20318, 25335, 20318, 20318, 20318, 20318, 20318, 20318,
  /* 17210 */ 20318, 24907, 20318, 20484, 25336, 27660, 20318, 20318, 20318, 20318, 23004, 20318, 20318, 20318, 23005,
  /* 17225 */ 20318, 28349, 28360, 29901, 28259, 28257, 28595, 20318, 20941, 20318, 28368, 20939, 27304, 23476, 28372,
  /* 17240 */ 29619, 28375, 20318, 27659, 28258, 20449, 27660, 28260, 28378, 28389, 28389, 28393, 28398, 28404, 28400,
  /* 17255 */ 28394, 28393, 28408, 28414, 28410, 28417, 28420, 28422, 28426, 28428, 28430, 28434, 20479, 20483, 20402,
  /* 17270 */ 20406, 29084, 20318, 20318, 28438, 20318, 20318, 20318, 20318, 20318, 22921, 20318, 20318, 20318, 20318,
  /* 17285 */ 28454, 29113, 20318, 20318, 20318, 20318, 23243, 22892, 20318, 20318, 28460, 20318, 20318, 20318, 29609,
  /* 17300 */ 29113, 29609, 20318, 20318, 23028, 20318, 20318, 20318, 25503, 21494, 29748, 29748, 29748, 29748, 29748,
  /* 17315 */ 23310, 29748, 23300, 29748, 29748, 29748, 23500, 29748, 29748, 23529, 20858, 20858, 20858, 20858, 20858,
  /* 17330 */ 20858, 24486, 20858, 29112, 28460, 28250, 28485, 30430, 29748, 29748, 29748, 25844, 29748, 29748, 29748,
  /* 17345 */ 29748, 29748, 30297, 29748, 29748, 28466, 20858, 28472, 20858, 20858, 21519, 28477, 30108, 20858, 20863,
  /* 17360 */ 20914, 20318, 20318, 28502, 20318, 20318, 20318, 28520, 20318, 20318, 20318, 20318, 22400, 20318, 20318,
  /* 17375 */ 20318, 20318, 28506, 20318, 20318, 20318, 24140, 20318, 20318, 20318, 28613, 20318, 20318, 20318, 20318,
  /* 17390 */ 20318, 27305, 20658, 20318, 20318, 21335, 20318, 20484, 24583, 20318, 24266, 20318, 28511, 20318, 20318,
  /* 17405 */ 23137, 25459, 20318, 20318, 20318, 20318, 21460, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 20493,
  /* 17420 */ 20318, 25390, 22744, 20318, 28534, 20318, 20318, 20318, 20704, 20318, 20709, 20318, 20318, 20318, 22744,
  /* 17435 */ 28546, 21494, 21953, 22047, 27847, 28552, 20858, 28567, 20858, 20858, 20858, 20858, 20858, 20858, 20858,
  /* 17450 */ 28322, 23469, 20890, 20858, 28324, 20890, 28576, 28581, 22812, 20890, 20890, 24507, 20890, 25839, 20890,
  /* 17465 */ 20890, 20890, 24129, 20890, 20890, 20890, 20890, 23557, 20890, 23563, 20890, 23663, 28585, 20890, 20890,
  /* 17480 */ 20890, 20890, 20890, 20890, 28239, 28449, 28127, 20318, 28590, 26249, 26266, 26281, 20318, 20318, 20318,
  /* 17495 */ 20318, 23253, 20318, 20318, 20318, 26093, 20318, 20318, 28440, 29748, 29748, 29748, 24672, 20858, 20858,
  /* 17510 */ 20858, 30412, 20858, 20858, 20858, 30437, 20858, 20858, 28599, 28116, 20890, 20890, 20890, 24351, 29746,
  /* 17525 */ 28820, 28605, 28252, 28126, 20865, 20318, 20318, 20318, 28696, 20318, 20318, 20318, 20318, 20937, 20318,
  /* 17540 */ 20318, 20318, 28611, 20318, 20318, 20318, 28617, 20318, 20318, 20318, 20990, 20318, 20318, 20318, 20318,
  /* 17555 */ 21459, 21459, 20318, 20318, 28623, 20318, 20318, 25120, 20318, 20318, 28629, 20318, 20318, 23274, 22505,
  /* 17570 */ 24276, 23279, 20318, 23275, 20318, 20318, 25411, 21302, 28249, 28634, 29748, 29748, 27048, 29748, 23436,
  /* 17585 */ 27054, 28570, 20858, 20858, 25520, 28654, 20858, 25515, 20858, 20858, 28659, 20858, 28254, 28361, 28664,
  /* 17600 */ 20890, 20890, 20890, 20890, 24636, 29747, 29751, 24624, 21781, 28679, 20890, 24502, 20890, 20890, 20890,
  /* 17615 */ 29748, 24624, 29748, 20858, 20890, 20318, 20318, 20318, 20318, 21673, 28275, 21706, 28684, 28692, 20318,
  /* 17630 */ 20318, 20318, 21026, 20318, 20318, 20318, 21238, 28700, 20318, 20318, 20318, 20318, 20318, 28706, 20318,
  /* 17645 */ 20318, 23419, 23425, 23431, 20318, 20318, 20318, 20373, 20390, 20389, 20318, 20318, 28712, 20318, 20318,
  /* 17660 */ 28718, 30588, 20318, 20318, 28443, 29748, 29748, 29748, 29748, 29748, 29748, 20858, 29748, 28729, 29748,
  /* 17675 */ 29748, 29748, 29748, 20858, 20858, 29382, 20858, 20858, 28740, 20858, 20858, 20858, 28254, 20318, 20863,
  /* 17690 */ 20890, 20890, 20890, 28751, 20890, 20890, 20890, 20890, 29746, 28446, 25202, 28127, 20318, 20318, 20318,
  /* 17705 */ 20318, 20318, 25987, 20318, 20318, 20318, 20318, 26087, 20318, 20318, 20318, 28852, 27143, 29748, 29748,
  /* 17720 */ 29748, 28252, 20858, 26351, 24164, 20858, 20318, 28757, 20318, 20318, 20318, 28763, 29748, 29748, 27412,
  /* 17735 */ 29748, 20858, 20858, 22362, 20858, 20858, 28775, 20858, 20858, 23100, 20890, 20890, 20890, 24714, 21704,
  /* 17750 */ 20890, 20890, 21710, 20890, 26171, 20890, 20890, 20890, 28780, 20890, 20890, 25076, 20890, 20890, 20890,
  /* 17765 */ 20890, 20890, 29746, 28446, 25202, 28127, 20318, 20318, 20318, 28791, 20318, 29748, 29748, 29748, 29748,
  /* 17780 */ 27999, 20858, 28012, 20858, 20858, 20858, 20858, 27179, 20858, 20858, 20858, 20858, 27121, 20858, 20858,
  /* 17795 */ 27126, 20834, 23618, 28252, 20865, 20318, 20318, 28796, 20318, 20318, 23434, 29748, 29748, 29748, 29748,
  /* 17810 */ 29748, 21862, 29748, 27402, 20318, 28805, 20318, 20318, 20318, 28809, 28815, 29748, 25784, 26962, 29748,
  /* 17825 */ 26289, 27029, 29748, 26301, 20890, 30419, 20890, 29747, 28835, 28844, 28850, 20318, 20318, 23585, 20318,
  /* 17840 */ 20318, 21012, 20318, 20318, 20318, 25264, 30133, 25336, 20318, 20318, 20318, 25293, 20318, 20318, 20318,
  /* 17855 */ 20318, 21100, 20318, 20318, 20318, 23896, 21293, 20318, 28856, 28731, 29748, 29748, 29748, 28108, 29748,
  /* 17870 */ 29748, 29748, 29748, 29748, 29974, 29748, 29748, 29748, 29748, 30117, 29748, 29748, 29748, 29748, 30331,
  /* 17885 */ 28252, 20858, 20858, 20858, 20858, 20858, 20858, 22189, 20890, 20890, 20890, 20834, 28860, 28866, 20858,
  /* 17900 */ 20858, 27251, 27471, 20890, 20890, 25605, 20890, 20890, 20890, 20890, 29746, 23439, 20318, 26995, 20318,
  /* 17915 */ 28249, 20890, 23964, 20318, 20318, 26997, 20318, 28443, 29748, 29748, 29748, 20858, 20858, 20858, 28125,
  /* 17930 */ 20890, 20890, 20890, 20835, 28871, 29748, 20858, 20858, 28875, 28125, 20890, 28680, 28884, 20835, 20318,
  /* 17945 */ 26996, 20318, 28250, 29748, 29748, 29748, 29748, 29748, 29748, 29748, 25234, 20834, 20318, 20318, 28792,
  /* 17960 */ 29748, 29748, 29748, 28890, 20858, 20858, 28895, 20890, 20890, 20835, 20318, 27235, 28056, 26183, 20318,
  /* 17975 */ 28901, 23436, 28910, 30414, 28916, 26802, 20318, 27305, 20658, 20318, 20784, 28926, 28943, 28946, 28943,
  /* 17990 */ 28944, 28928, 21603, 20318, 20716, 28934, 28942, 28945, 28932, 28939, 28935, 28951, 28963, 28966, 28950,
  /* 18005 */ 28955, 28960, 28955, 28956, 28970, 28974, 20318, 20318, 28978, 20318, 20318, 20318, 20318, 21840, 20318,
  /* 18020 */ 20318, 28982, 20318, 22496, 22464, 28988, 20318, 20318, 23698, 20318, 23465, 20318, 23480, 20318, 20318,
  /* 18035 */ 21047, 28443, 29748, 29748, 29748, 29748, 28252, 20858, 20858, 26440, 20318, 20318, 28992, 20318, 20318,
  /* 18050 */ 20318, 28998, 20318, 20318, 24119, 20318, 20318, 20318, 20318, 26988, 29197, 20318, 29004, 20318, 29320,
  /* 18065 */ 29014, 20318, 29015, 29847, 20318, 29197, 29012, 29029, 21001, 20318, 29032, 29196, 20318, 23161, 20318,
  /* 18080 */ 23161, 29039, 29048, 29359, 29748, 29052, 29748, 29072, 23436, 29056, 22184, 29061, 21515, 20858, 29405,
  /* 18095 */ 20890, 29066, 20890, 28235, 29422, 28753, 30057, 28363, 29070, 28252, 21517, 28234, 20915, 20318, 26807,
  /* 18110 */ 24217, 20318, 20318, 20318, 20804, 22107, 20318, 20318, 24887, 29083, 22671, 20318, 20318, 25020, 20318,
  /* 18125 */ 25172, 20318, 25316, 29088, 29094, 20318, 25537, 20318, 29098, 29107, 20318, 29111, 25726, 25725, 29117,
  /* 18140 */ 21616, 29124, 22779, 29748, 29748, 29130, 29748, 29135, 29748, 29139, 29145, 29748, 29748, 29748, 23770,
  /* 18155 */ 29154, 29159, 23977, 20858, 22367, 20858, 22856, 29737, 20858, 20858, 20858, 28126, 26585, 20890, 20890,
  /* 18170 */ 20890, 29748, 28126, 20318, 20318, 26994, 29164, 29169, 20858, 20858, 20858, 28002, 29175, 29180, 22430,
  /* 18185 */ 20890, 20890, 28673, 20890, 29304, 29184, 23203, 23553, 20890, 20890, 20890, 23674, 20890, 29748, 28363,
  /* 18200 */ 29747, 28253, 22189, 22374, 25779, 29747, 28253, 22189, 20796, 29189, 28687, 29194, 28695, 20318, 23212,
  /* 18215 */ 29201, 26133, 20318, 20318, 20318, 20318, 23490, 20318, 20318, 20318, 20318, 29206, 20318, 20318, 20318,
  /* 18230 */ 22665, 20318, 30563, 20318, 26477, 20318, 20318, 20318, 20318, 20318, 20318, 25663, 20318, 20318, 20318,
  /* 18245 */ 26792, 20318, 20318, 20318, 20318, 20318, 22925, 22930, 20318, 29202, 29211, 24134, 26863, 20318, 29215,
  /* 18260 */ 20318, 29221, 29225, 29748, 29748, 29234, 29239, 29748, 23764, 30368, 24271, 29256, 29748, 29748, 28252,
  /* 18275 */ 20858, 28563, 20858, 20858, 20858, 28254, 28361, 20890, 29504, 20890, 20890, 29756, 29762, 20318, 30097,
  /* 18290 */ 29748, 21776, 29261, 20858, 24335, 29577, 20858, 20858, 29266, 20858, 20858, 20858, 28256, 29980, 20890,
  /* 18305 */ 20890, 20890, 25086, 25092, 25097, 25103, 27077, 28117, 20890, 20890, 29270, 29275, 20890, 23912, 29954,
  /* 18320 */ 24340, 29292, 20890, 20890, 20890, 29747, 29297, 25289, 23183, 29301, 20866, 20318, 20318, 20318, 20318,
  /* 18335 */ 20318, 23599, 20318, 20318, 20318, 24600, 29310, 20318, 20318, 20318, 29319, 20318, 20318, 24215, 20318,
  /* 18350 */ 20318, 20318, 20318, 20318, 21549, 20318, 20318, 20318, 20318, 27139, 29959, 29324, 20318, 20318, 20318,
  /* 18365 */ 20318, 23698, 20318, 20318, 20318, 20318, 29328, 29334, 27534, 20318, 29340, 20318, 20318, 20318, 21046,
  /* 18380 */ 28250, 29748, 29748, 29748, 24124, 29748, 29748, 29748, 29748, 28252, 20858, 24098, 30042, 20318, 29358,
  /* 18395 */ 29748, 29748, 29748, 29363, 24842, 29748, 25818, 29748, 29748, 29748, 29748, 29748, 29748, 30363, 29748,
  /* 18410 */ 29748, 29748, 29748, 30295, 29748, 29367, 29748, 29748, 29748, 29748, 29748, 29748, 28252, 30001, 26563,
  /* 18425 */ 30007, 20858, 20858, 20858, 20858, 30232, 20890, 20890, 20890, 21818, 29571, 21968, 20318, 20318, 29371,
  /* 18440 */ 29748, 29375, 29748, 20858, 20858, 20858, 25151, 29380, 29386, 20858, 29694, 29392, 20858, 20858, 20858,
  /* 18455 */ 20858, 27464, 20858, 20858, 20858, 20858, 27150, 20890, 20890, 20890, 20890, 20890, 20890, 20890, 21818,
  /* 18470 */ 20858, 20858, 30227, 29398, 25575, 20858, 28255, 29404, 29421, 20890, 20834, 28444, 25200, 23436, 28125,
  /* 18485 */ 20864, 28131, 24297, 20318, 24301, 20318, 20318, 29426, 20318, 25557, 20318, 20318, 20318, 21148, 20318,
  /* 18500 */ 20318, 20318, 20318, 20318, 27526, 29748, 29748, 20318, 29444, 20318, 20318, 29449, 29748, 29455, 29748,
  /* 18515 */ 25884, 29748, 29748, 29748, 29748, 29748, 23436, 20858, 28126, 20890, 21509, 27279, 29748, 29748, 30210,
  /* 18530 */ 27050, 29460, 29748, 25237, 29748, 29748, 28253, 21885, 22053, 26556, 28562, 20858, 29466, 29748, 23436,
  /* 18545 */ 29472, 25653, 20858, 20858, 20858, 20858, 28254, 21053, 20863, 20890, 20890, 20890, 20890, 20890, 24114,
  /* 18560 */ 24248, 20890, 29488, 29477, 29481, 20858, 29486, 20858, 20858, 29492, 20858, 28255, 20318, 29497, 20890,
  /* 18575 */ 29503, 20890, 20890, 26104, 28448, 28126, 20318, 20318, 20318, 20318, 22908, 20318, 23730, 29943, 26450,
  /* 18590 */ 29508, 20890, 29653, 20890, 20890, 29514, 29536, 20318, 20318, 20318, 30548, 20318, 20318, 20318, 21231,
  /* 18605 */ 20318, 21232, 21230, 21233, 20318, 20318, 29542, 29548, 20318, 29552, 20318, 20318, 20318, 29432, 20318,
  /* 18620 */ 29445, 25922, 20318, 27572, 20318, 28443, 29748, 29561, 29748, 29565, 29748, 26044, 29748, 29748, 29748,
  /* 18635 */ 29748, 23436, 22833, 29575, 29394, 29581, 20858, 20858, 20858, 20858, 20858, 20858, 23354, 20890, 20890,
  /* 18650 */ 26434, 27150, 20890, 29704, 29587, 28675, 29593, 20890, 23196, 20890, 23669, 20890, 23201, 20834, 29749,
  /* 18665 */ 26601, 20318, 20318, 20318, 29613, 20318, 20318, 20318, 21458, 20318, 20318, 20318, 20318, 20318, 20318,
  /* 18680 */ 20318, 21338, 28249, 28110, 29748, 29748, 29623, 29748, 29629, 29748, 26888, 29748, 29748, 22203, 29748,
  /* 18695 */ 29748, 29748, 28189, 28253, 28194, 20858, 20858, 29748, 29635, 28253, 29640, 20858, 28891, 20858, 27180,
  /* 18710 */ 20858, 20858, 26569, 28125, 27257, 20890, 20890, 29645, 20890, 29651, 20890, 20890, 29657, 29746, 28447,
  /* 18725 */ 24621, 20866, 20318, 20318, 20318, 20318, 25610, 20866, 29662, 26945, 20318, 20318, 20318, 20318, 20318,
  /* 18740 */ 23696, 20318, 20318, 20318, 20318, 29668, 29674, 28250, 29748, 29681, 29748, 30333, 28303, 29686, 28253,
  /* 18755 */ 27358, 20858, 20858, 29692, 26645, 29698, 20890, 27269, 20890, 20890, 29703, 29708, 20890, 23437, 20318,
  /* 18770 */ 20318, 26997, 20318, 28443, 29748, 29748, 29748, 29748, 28126, 27780, 24890, 26994, 20318, 29712, 29717,
  /* 18785 */ 24170, 30118, 29748, 29748, 29723, 29729, 29735, 20858, 20858, 20858, 28323, 20890, 22806, 20890, 24103,
  /* 18800 */ 30380, 29741, 29852, 20890, 20890, 29745, 23438, 20318, 20318, 24227, 28249, 29748, 29748, 29748, 29748,
  /* 18815 */ 29748, 29748, 29748, 29748, 23436, 20858, 20858, 20858, 20858, 20858, 20858, 20858, 20858, 20859, 20863,
  /* 18830 */ 28741, 20858, 29842, 29784, 20890, 30452, 20849, 29768, 29748, 29777, 28013, 29783, 28143, 22017, 28250,
  /* 18845 */ 29748, 29748, 24476, 29748, 29748, 29748, 29748, 28824, 28252, 20858, 20858, 28126, 29788, 20777, 20777,
  /* 18860 */ 20777, 20478, 20483, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 29792, 20318, 25334, 20318, 20318,
  /* 18875 */ 20318, 20318, 20318, 20318, 20318, 25856, 30357, 20318, 27963, 28332, 28333, 28333, 28333, 28333, 28334,
  /* 18890 */ 29818, 29816, 29806, 29813, 29826, 28333, 28356, 28352, 29802, 28354, 28333, 28333, 28333, 29819, 29826,
  /* 18905 */ 29826, 29823, 29809, 20481, 20318, 20404, 29830, 20318, 20318, 20318, 20318, 20318, 20318, 22399, 28904,
  /* 18920 */ 28252, 20858, 29841, 20858, 22717, 28254, 20890, 21897, 24500, 20890, 20890, 20890, 29747, 24621, 20866,
  /* 18935 */ 20318, 20318, 26997, 20318, 21711, 20890, 20890, 22437, 20890, 29747, 29751, 24624, 30329, 23404, 26899,
  /* 18950 */ 22485, 20916, 21728, 28253, 22719, 22436, 20916, 20318, 20318, 29846, 22383, 20318, 22383, 20318, 20318,
  /* 18965 */ 20318, 20318, 20318, 24457, 20318, 20318, 20318, 22382, 20318, 20318, 21492, 29748, 21964, 22405, 20858,
  /* 18980 */ 20858, 28197, 23469, 20890, 29851, 29856, 20890, 23568, 23574, 29746, 26499, 23580, 25203, 26115, 20797,
  /* 18995 */ 29870, 29875, 29880, 29885, 20318, 20318, 20318, 21492, 29748, 29748, 22785, 29748, 20318, 20318, 29890,
  /* 19010 */ 20318, 29896, 20318, 20318, 29905, 20318, 24067, 20318, 20318, 20318, 20318, 20318, 20318, 26484, 20318,
  /* 19025 */ 20318, 20318, 26940, 20318, 20318, 28442, 29748, 29748, 29748, 29748, 29748, 29748, 29748, 23884, 22361,
  /* 19040 */ 29920, 29748, 29748, 29926, 29748, 29748, 29748, 25135, 20858, 24773, 20858, 20858, 29931, 20858, 24970,
  /* 19055 */ 20858, 20858, 20858, 28830, 22189, 20890, 20890, 20890, 20890, 20890, 27434, 29747, 29947, 20890, 20890,
  /* 19070 */ 29953, 20890, 20890, 20890, 24805, 29958, 20318, 20318, 20318, 27112, 20318, 20318, 20318, 21494, 29748,
  /* 19085 */ 29748, 29748, 29748, 29748, 29748, 20890, 29985, 20890, 20890, 20890, 20890, 20890, 20890, 25099, 20890,
  /* 19100 */ 20890, 20890, 20890, 24974, 26456, 20890, 20890, 28445, 25201, 28252, 28126, 20865, 20318, 28072, 20318,
  /* 19115 */ 20318, 24285, 24289, 24295, 24307, 20318, 20318, 20318, 26851, 20318, 20318, 20318, 20318, 21470, 21115,
  /* 19130 */ 21115, 21115, 28249, 25648, 29748, 29748, 29748, 29748, 29748, 29748, 28558, 29748, 29748, 29748, 29748,
  /* 19145 */ 29748, 26416, 29748, 29748, 26420, 29748, 27995, 25617, 20858, 20858, 20858, 20858, 20858, 20858, 20858,
  /* 19160 */ 28115, 20863, 25606, 20890, 20890, 20890, 20890, 20890, 20890, 20890, 25531, 22821, 20890, 20834, 28444,
  /* 19175 */ 25200, 24621, 20866, 28994, 20318, 20318, 20318, 20318, 24133, 20318, 20318, 20318, 20318, 29354, 20318,
  /* 19190 */ 20318, 20318, 20318, 20318, 26243, 29748, 29997, 29748, 29748, 29748, 29748, 29748, 29748, 28649, 29748,
  /* 19205 */ 26428, 29748, 29748, 24467, 26365, 30019, 20890, 20890, 20890, 20890, 20890, 20890, 25875, 20890, 20890,
  /* 19220 */ 20890, 20834, 20318, 20318, 28249, 29748, 29748, 26471, 20318, 20318, 20318, 20318, 20318, 20318, 20318,
  /* 19235 */ 28528, 29748, 28252, 20858, 27491, 20858, 20858, 20890, 20890, 20890, 20836, 20318, 20318, 29748, 30031,
  /* 19250 */ 20890, 29746, 23439, 20318, 26995, 20318, 28249, 29748, 29748, 29748, 28252, 20858, 20858, 20858, 22189,
  /* 19265 */ 20890, 20890, 20890, 20890, 20890, 20890, 20890, 25082, 20318, 30244, 29748, 29748, 30037, 20858, 20858,
  /* 19280 */ 30046, 30291, 29468, 28205, 28666, 28251, 28127, 23438, 23438, 25335, 20318, 25920, 20318, 20318, 20318,
  /* 19295 */ 20638, 20318, 20318, 24291, 20318, 22301, 20318, 20318, 20318, 20319, 20316, 27890, 27890, 20318, 30074,
  /* 19310 */ 30072, 30079, 21307, 30086, 30075, 30085, 30086, 30083, 20478, 20482, 20410, 20405, 20409, 20318, 20318,
  /* 19325 */ 20318, 29748, 29748, 29748, 20788, 29748, 28249, 29748, 28267, 29748, 29748, 29748, 28253, 26297, 20318,
  /* 19340 */ 23744, 20318, 20318, 24223, 20318, 20318, 20318, 21547, 21547, 20318, 20318, 20318, 20318, 29346, 20318,
  /* 19355 */ 20318, 29352, 30090, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 29342, 20318, 21493, 29748, 29748,
  /* 19370 */ 29748, 30096, 29748, 29748, 28769, 29748, 29748, 27904, 29748, 29748, 27460, 20858, 20858, 20858, 20858,
  /* 19385 */ 20858, 20858, 21282, 28361, 20858, 20858, 24793, 20858, 20858, 20858, 20858, 28323, 20890, 20890, 20890,
  /* 19400 */ 20890, 20890, 20890, 20890, 20834, 28446, 22490, 22494, 28449, 28127, 20318, 20318, 20318, 20318, 20318,
  /* 19415 */ 26596, 20890, 29746, 28252, 20865, 20318, 27965, 26996, 20318, 20318, 24302, 29112, 20318, 28461, 20318,
  /* 19430 */ 28461, 27304, 28132, 30138, 27751, 30141, 20318, 20318, 20318, 21601, 20318, 20318, 20318, 20318, 20318,
  /* 19445 */ 29336, 20318, 20318, 30160, 30162, 30156, 30156, 30166, 30172, 30168, 30175, 30177, 30179, 30183, 30185,
  /* 19460 */ 30187, 30191, 20479, 20483, 21519, 20890, 20890, 20890, 27153, 20890, 20834, 22511, 28362, 25201, 22560,
  /* 19475 */ 23338, 27152, 20914, 20318, 20318, 20318, 29748, 29748, 29748, 29748, 29748, 28252, 30209, 29748, 29748,
  /* 19490 */ 29748, 29748, 29748, 29748, 29748, 29245, 29251, 29748, 29748, 29748, 29748, 28252, 20858, 27200, 20858,
  /* 19505 */ 20858, 27206, 27035, 29748, 29748, 29748, 29748, 29748, 29748, 30219, 20318, 20863, 20890, 20890, 20890,
  /* 19520 */ 20890, 20890, 26382, 20318, 30249, 30261, 30264, 30248, 30253, 30258, 30253, 30254, 30261, 30268, 20480,
  /* 19535 */ 20318, 20403, 20407, 20318, 20318, 24438, 20318, 20318, 20804, 20318, 20318, 20318, 20318, 28801, 20318,
  /* 19550 */ 20318, 21088, 21339, 20318, 21338, 20318, 20318, 20318, 21983, 20318, 20318, 28250, 29748, 21427, 20318,
  /* 19565 */ 28443, 21500, 29748, 29748, 29748, 23436, 20858, 21689, 20858, 20858, 20858, 20863, 20890, 20890, 24976,
  /* 19580 */ 23546, 24697, 23551, 20890, 20858, 30278, 20858, 20858, 20858, 20863, 21700, 20890, 23679, 20834, 29749,
  /* 19595 */ 29861, 29748, 20858, 20890, 20890, 20890, 20890, 29746, 23439, 20318, 25862, 20858, 30301, 20858, 20858,
  /* 19610 */ 20858, 20858, 30307, 20858, 20858, 20858, 29936, 20858, 28118, 20890, 20890, 20890, 30384, 20890, 20890,
  /* 19625 */ 20890, 24987, 25088, 27504, 20890, 20890, 30123, 20890, 20890, 20890, 20890, 23576, 20890, 20890, 27090,
  /* 19640 */ 20890, 20890, 29746, 28445, 25201, 28252, 28126, 28128, 20318, 23474, 24512, 20318, 24516, 20318, 20318,
  /* 19655 */ 20318, 20318, 20318, 20484, 25336, 20318, 20318, 20318, 25858, 30068, 20318, 20318, 20318, 20318, 20318,
  /* 19670 */ 20318, 26486, 20318, 30318, 20858, 20858, 20858, 20858, 20858, 20858, 20858, 28117, 20890, 20890, 20890,
  /* 19685 */ 20890, 25790, 20858, 20858, 20858, 20858, 20858, 20858, 20858, 28118, 25637, 20890, 20890, 20890, 20890,
  /* 19700 */ 20890, 20890, 20890, 28482, 28490, 28362, 28496, 23436, 21162, 20318, 20318, 20318, 20318, 20318, 20318,
  /* 19715 */ 20318, 29748, 29748, 29748, 29748, 28252, 20858, 26897, 28254, 20890, 20890, 20890, 20890, 22486, 20890,
  /* 19730 */ 23683, 20890, 28444, 25200, 24621, 20866, 20318, 20318, 21220, 20318, 22649, 22829, 20318, 20318, 20318,
  /* 19745 */ 26082, 20318, 25556, 20318, 20318, 20318, 26125, 20318, 20318, 20318, 20318, 21493, 29748, 29748, 29748,
  /* 19760 */ 29748, 29748, 29748, 29748, 20858, 20858, 20858, 30349, 20858, 28322, 23469, 20890, 23724, 30394, 20890,
  /* 19775 */ 20890, 20890, 21818, 28448, 28126, 20318, 20318, 20318, 25161, 20318, 20318, 30355, 20318, 20318, 20318,
  /* 19790 */ 20318, 20318, 25003, 20318, 20318, 28442, 29748, 29748, 29748, 30361, 29748, 29748, 29748, 30434, 20858,
  /* 19805 */ 20858, 20858, 20858, 20858, 20858, 26341, 28254, 30372, 20858, 20858, 20858, 20858, 20858, 20858, 29473,
  /* 19820 */ 20318, 28443, 29748, 29748, 29748, 29748, 29748, 29976, 30404, 29748, 29748, 29748, 29748, 29748, 29748,
  /* 19835 */ 29748, 27039, 27044, 29748, 29748, 29748, 29748, 29748, 30367, 29748, 29748, 29748, 20858, 20858, 30409,
  /* 19850 */ 20858, 20858, 20858, 20858, 20858, 20858, 24854, 25056, 20890, 29293, 28747, 28445, 25201, 28252, 28126,
  /* 19865 */ 20865, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 21549, 20858, 20858, 29262, 20858, 20858, 20858,
  /* 19880 */ 20858, 20858, 20858, 27064, 20858, 20858, 30443, 28361, 20890, 20890, 20890, 20890, 20890, 29409, 24637,
  /* 19895 */ 20890, 20890, 29413, 20890, 30456, 28444, 25200, 24621, 20866, 20318, 20318, 20318, 20318, 20318, 20485,
  /* 19910 */ 20318, 20318, 20318, 30465, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 29833, 30471, 20318, 20318,
  /* 19925 */ 20318, 20318, 20318, 20318, 20318, 30127, 20318, 27391, 20318, 20318, 20318, 20318, 20318, 20318, 26994,
  /* 19940 */ 20318, 20318, 20318, 20318, 20318, 20318, 20318, 21115, 21115, 28125, 20890, 20890, 20890, 29510, 20890,
  /* 19955 */ 20890, 20834, 23436, 28127, 20318, 20318, 26995, 20318, 30196, 20318, 30197, 20318, 20318, 30198, 20318,
  /* 19970 */ 30199, 20318, 20318, 30198, 30196, 20318, 20318, 20318, 30112, 20318, 20318, 20318, 20318, 24252, 20318,
  /* 19985 */ 20318, 20318, 30198, 30197, 30199, 30524, 20318, 30526, 20318, 20318, 20318, 30197, 30198, 20318, 30197,
  /* 20000 */ 20318, 30512, 30511, 30199, 30503, 30508, 30516, 30504, 30521, 30517, 20316, 20318, 20402, 20406, 20318,
  /* 20015 */ 20318, 20318, 22300, 20318, 20318, 20318, 20318, 20412, 23237, 20414, 23241, 29315, 20318, 20318, 20318,
  /* 20030 */ 20318, 20318, 20318, 20318, 30195, 30532, 20318, 20318, 20318, 20318, 20318, 20318, 20318, 30203, 27305,
  /* 20045 */ 20658, 20318, 20318, 28063, 28065, 28065, 28065, 30538, 30541, 30542, 30553, 30553, 30553, 30553, 30553,
  /* 20060 */ 30553, 20318, 20318, 20318, 20318, 24582, 21748, 20318, 20318, 20318, 28066, 30546, 27972, 30552, 30557,
  /* 20075 */ 20317, 20318, 20318, 24455, 20318, 20318, 20318, 20318, 20318, 21752, 20318, 27169, 20318, 28093, 20318,
  /* 20090 */ 20318, 20318, 20318, 20318, 20318, 27302, 27306, 20659, 20318, 20318, 20318, 30561, 20318, 20318, 20318,
  /* 20105 */ 20318, 20318, 20318, 27302, 29798, 20318, 30573, 28179, 30567, 30571, 30570, 30577, 30572, 30570, 30577,
  /* 20120 */ 30577, 30577, 30577, 30577, 30577, 30577, 30578, 20318, 20318, 20318, 20318, 28179, 30572, 20318, 20318,
  /* 20135 */ 24492, 29748, 29748, 29748, 29748, 29748, 25601, 22794, 29748, 30571, 30577, 30582, 20318, 20318, 20404,
  /* 20150 */ 20408, 20318, 20318, 24583, 20318, 20318, 20318, 20318, 20318, 20484, 20318, 24433, 20318, 20318, 28523,
  /* 20165 */ 20318, 20318, 20318, 20318, 20318, 25406, 20318, 20318, 20318, 21474, 20318, 20318, 20318, 20318, 20318,
  /* 20180 */ 20318, 27303, 20318, 20660, 28126, 20890, 20890, 20890, 20890, 20890, 20890, 29746, 28445, 25201, 28252,
  /* 20195 */ 28126, 20865, 20318, 20775, 30048, 30048, 30048, 23439, 20318, 20318, 20318, 22381, 20318, 20318, 20318,
  /* 20210 */ 20318, 20461, 20318, 20318, 21305, 20318, 20318, 28526, 28528, 30592, 30593, 30600, 30600, 28528, 20318,
  /* 20225 */ 20318, 20318, 20318, 30595, 30600, 30600, 30600, 30600, 30600, 30600, 30600, 30600, 30592, 20318, 30594,
  /* 20240 */ 30596, 20318, 20318, 20318, 20318, 24583, 20318, 20318, 23002, 65831, 0, 69928, 69928, 0, 65831, 65831,
  /* 20256 */ 65831, 363, 69928, 65831, 69928, 65831, 65831, 69928, 40960, 69928, 69928, 69928, 69928, 45056, 49152,
  /* 20271 */ 102400, 0, 0, 65831, 69928, 297, 0, 301, 81920, 598475, 598475, 598475, 598475, 459, 598475, 459, 459,
  /* 20288 */ 598475, 598475, 459, 459, 459, 459, 0, 598475, 0, 0, 0, 308, 757, 0, 0, 0, 311, 1020, 0, 0, 0, 322, 396,
  /* 20311 */ 82332, 49152, 0, 0, 1, 12290, 3, 0, 0, 0, 0, 1, 287, 301, 301, 1, 12290, 0, 0, 0, 759, 0, 25216, 298, 0,
  /* 20336 */ 581932, 301, 0, 594564, 302, 0, 0, 282624, 0, 0, 290816, 0, 0, 294912, 2634, 32768, 0, 0, 0, 325, 0,
  /* 20357 */ 86016, 0, 86016, 86016, 0, 86016, 0, 86016, 86016, 86016, 86016, 0, 0, 0, 332, 0, 2105630, 12290, 3, 0,
  /* 20377 */ 385024, 0, 0, 0, 333, 744, 0, 0, 0, 334, 1038, 1042, 0, 0, 292, 0, 0, 1046, 1050, 0, 0, 294, 0, 0, 1634,
  /* 20402 */ 0, 0, 297, 298, 0, 0, 301, 302, 0, 0, 0, 297, 0, 0, 0, 298, 0, 0, 0, 1786, 0, 0, 302, 302, 302, 302, 0,
  /* 20429 */ 602112, 602112, 602112, 602112, 0, 602112, 0, 602112, 602112, 40960, 606208, 0, 0, 606208, 606208, 0,
  /* 20445 */ 606208, 606208, 606208, 606208, 0, 0, 0, 349, 413, 413, 0, 0, 302, 45056, 1218, 0, 0, 0, 358, 0, 0, 0,
  /* 20467 */ 1378, 0, 0, 306, 441, 94624, 0, 0, 0, 359, 302, 1, 12290, 3, 53537, 53537, 61731, 0, 0, 0, 363, 0, 0, 702,
  /* 20491 */ 297, 25219, 0, 0, 321, 322, 301, 594567, 0, 0, 327, 328, 299, 0, 0, 299, 299, 364, 299, 0, 381227, 381227,
  /* 20513 */ 299, 381227, 299, 299, 299, 299, 381227, 299, 381227, 381227, 299, 299, 381297, 299, 299, 299, 381297,
  /* 20530 */ 45056, 49152, 131072, 0, 299, 40960, 299, 299, 381227, 369, 381227, 381227, 381227, 381227, 299, 299,
  /* 20546 */ 381227, 381297, 381227, 381297, 381227, 381227, 0, 0, 329, 0, 0, 45056, 49152, 314, 381297, 381297,
  /* 20562 */ 381297, 381297, 381227, 0, 2175674, 2175674, 2175674, 0, 0, 329, 380, 0, 389120, 389120, 0, 389120, 0, 0,
  /* 20580 */ 389120, 389120, 389120, 389120, 0, 90112, 0, 0, 340, 341, 363, 363, 114688, 0, 0, 401408, 401408, 0, 0, 0,
  /* 20600 */ 102400, 0, 0, 341, 0, 574024, 0, 0, 0, 372, 0, 574024, 574024, 574024, 574024, 574024, 393216, 393216,
  /* 20618 */ 574024, 574024, 574024, 1, 12290, 574024, 393216, 393216, 393216, 393216, 573440, 953, 0, 0, 344, 343, 0,
  /* 20635 */ 342, 49152, 397312, 0, 0, 0, 373, 0, 397312, 397312, 397312, 397312, 1, 12290, 3, 53538, 0, 397312, 0, 0,
  /* 20655 */ 345, 0, 403, 0, 0, 0, 40960, 0, 0, 0, 307, 306, 401408, 401408, 401408, 401408, 293, 0, 0, 0, 378, 405504,
  /* 20677 */ 405504, 405504, 405504, 1, 405504, 0, 0, 405504, 0, 0, 0, 390, 1072, 0, 0, 0, 413, 1120, 0, 0, 0, 419,
  /* 20699 */ 578787, 578077, 578077, 578077, 60422, 425984, 0, 0, 0, 436, 1590, 0, 0, 0, 450, 450, 1903, 0, 0, 0, 524,
  /* 20720 */ 0, 1961, 0, 0, 346, 0, 0, 579540, 578077, 578077, 578077, 578374, 57907, 59416, 57907, 57907, 0, 578495,
  /* 20738 */ 579664, 578121, 578121, 578121, 53537, 0, 0, 578077, 579721, 578077, 578077, 0, 579001, 57907, 59690,
  /* 20753 */ 57907, 57907, 2119, 0, 0, 2464, 0, 0, 346, 346, 578092, 578092, 578092, 578136, 57907, 59912, 57907,
  /* 20770 */ 57907, 58243, 58247, 578121, 580142, 578121, 578121, 0, 578077, 57907, 578121, 2906, 0, 2631, 0, 0, 354,
  /* 20787 */ 0, 580214, 578077, 578077, 578077, 578375, 580268, 578121, 578121, 578121, 62477, 0, 0, 0, 430, 0, 2773,
  /* 20804 */ 0, 0, 363, 363, 0, 1103, 57907, 60148, 57907, 57907, 58246, 57907, 57907, 60155, 57907, 57907, 58249,
  /* 20821 */ 57907, 57907, 580357, 578121, 578121, 2760, 0, 580358, 578121, 578121, 578121, 528925, 580365, 578121,
  /* 20835 */ 578121, 578121, 578077, 0, 0, 2856, 0, 0, 0, 648, 0, 580404, 580405, 580406, 578077, 0, 3093, 0, 0,
  /* 20854 */ 413696, 413696, 0, 60229, 57907, 57907, 57907, 57907, 2373, 0, 578121, 578121, 578121, 0, 0, 0, 404,
  /* 20871 */ 580434, 580435, 580436, 578121, 0, 0, 2435, 580468, 578077, 578077, 578077, 578384, 57907, 60285, 57907,
  /* 20886 */ 57907, 58253, 57907, 580492, 578121, 578121, 578121, 578121, 1481, 580540, 578121, 578121, 578121, 578491,
  /* 20900 */ 578077, 580609, 578077, 578077, 59671, 57907, 57907, 60424, 57907, 57907, 58262, 57907, 578121, 580623,
  /* 20914 */ 578121, 578121, 53537, 62477, 0, 0, 610708, 610920, 610920, 610920, 610920, 0, 610920, 610920, 610920, 1,
  /* 20930 */ 12290, 610920, 0, 0, 0, 650, 651, 0, 586466, 0, 0, 366, 374, 402, 0, 614400, 578121, 578077, 57907,
  /* 20949 */ 579410, 618956, 618956, 618956, 618956, 0, 618956, 618956, 618956, 0, 0, 618956, 0, 0, 367, 0, 0, 0, 1581,
  /* 20968 */ 0, 582037, 0, 582037, 0, 0, 375, 377, 586466, 590962, 0, 0, 0, 653, 1481, 0, 0, 0, 662, 1487, 0, 0, 0,
  /* 20991 */ 663, 0, 0, 0, 664, 0, 0, 0, 665, 1493, 0, 0, 0, 667, 1499, 0, 0, 0, 678, 0, 1142, 1574, 0, 0, 0, 688, 0,
  /* 21018 */ 1487, 1889, 0, 0, 422315, 0, 0, 430080, 0, 0, 0, 748, 0, 1499, 1893, 0, 0, 2199, 1994, 0, 0, 0, 694, 2118,
  /* 21042 */ 0, 0, 0, 695, 1994, 2279, 0, 0, 0, 705, 2118, 2373, 0, 0, 0, 709, 304, 305, 0, 0, 0, 725, 305, 0, 413696,
  /* 21067 */ 0, 0, 0, 731, 413696, 413696, 414000, 414001, 413696, 414000, 414000, 413696, 413696, 413696, 413696,
  /* 21082 */ 414001, 414000, 0, 413696, 1, 638, 0, 0, 0, 733, 0, 118784, 0, 0, 381, 0, 2175675, 98304, 2175675, 0, 0,
  /* 21103 */ 0, 740, 0, 0, 951, 952, 952, 831, 831, 831, 831, 0, 952, 952, 952, 952, 831, 0, 0, 952, 831, 831, 0, 952,
  /* 21127 */ 831, 0, 832, 831, 831, 952, 831, 0, 952, 952, 0, 0, 831, 952, 0, 831, 0, 0, 442368, 442368, 442368,
  /* 21148 */ 442368, 0, 0, 0, 753, 952, 1, 12290, 3, 53537, 61731, 0, 0, 417792, 0, 0, 0, 741, 0, 417792, 417792,
  /* 21169 */ 417792, 0, 0, 417792, 417792, 417792, 417792, 1, 12290, 0, 422349, 422349, 422349, 0, 422349, 422349,
  /* 21185 */ 422502, 422349, 422349, 422349, 422349, 422519, 422502, 422502, 422502, 422502, 422349, 422519, 1, 12290,
  /* 21199 */ 3, 442368, 0, 442368, 0, 0, 446464, 0, 0, 0, 376832, 0, 434176, 0, 0, 385, 0, 0, 0, 2446, 450560, 0, 0, 0,
  /* 21223 */ 754, 446926, 446926, 446926, 446926, 0, 446926, 0, 0, 0, 756, 0, 0, 819, 110592, 0, 0, 0, 764, 106496, 0,
  /* 21244 */ 0, 0, 771, 0, 20480, 0, 0, 385, 386, 139264, 139264, 139264, 139264, 0, 139264, 1, 12290, 3, 57907,
  /* 21263 */ 578121, 578077, 578121, 578121, 1, 12290, 1583, 0, 0, 0, 789, 0, 578078, 578078, 578078, 57907, 57907,
  /* 21280 */ 58280, 57907, 57907, 0, 2373, 0, 0, 57907, 578122, 578078, 57907, 0, 2120, 0, 0, 479232, 0, 0, 487424, 0,
  /* 21300 */ 0, 499712, 0, 0, 536576, 0, 0, 578096, 578096, 578096, 578140, 57907, 578122, 578078, 578078, 578122,
  /* 21316 */ 578122, 1, 578122, 578122, 578122, 578122, 578078, 578122, 578122, 578078, 57907, 458752, 458752, 0, 0, 0,
  /* 21332 */ 793, 462848, 462848, 0, 462848, 0, 0, 0, 796, 0, 0, 0, 462848, 462848, 462848, 462848, 0, 462848, 1,
  /* 21351 */ 12290, 2912, 0, 0, 0, 797, 0, 307, 0, 306, 306, 307, 307, 0, 0, 0, 799, 411, 0, 0, 45056, 449, 463, 463,
  /* 21375 */ 463, 463, 489, 489, 534, 489, 489, 514, 489, 489, 463, 489, 489, 489, 489, 578079, 57908, 57908, 57908,
  /* 21394 */ 578143, 1, 12290, 3, 578146, 578146, 578146, 578079, 57908, 578079, 578079, 57908, 578123, 578079, 57908,
  /* 21409 */ 578156, 578079, 57908, 578079, 578143, 578143, 578143, 578123, 578156, 578156, 578156, 578156, 675, 0, 0,
  /* 21424 */ 0, 814, 745, 0, 0, 0, 829, 0, 760, 0, 0, 395, 0, 0, 0, 581932, 0, 770, 0, 0, 397, 0, 778, 0, 0, 0, 831,
  /* 21451 */ 831, 831, 0, 0, 0, 735, 793, 0, 0, 0, 832, 0, 0, 0, 302, 0, 0, 122880, 808, 0, 0, 0, 952, 952, 0, 0, 0,
  /* 21478 */ 739, 0, 823, 789, 0, 0, 578557, 578558, 827, 828, 789, 789, 734, 789, 0, 0, 578753, 832, 578077, 578077,
  /* 21498 */ 639517, 578378, 578077, 578077, 578077, 578388, 578402, 578077, 578407, 578077, 1155, 578121, 578077,
  /* 21511 */ 3116, 0, 58241, 58245, 57907, 57907, 58282, 57907, 57907, 0, 578121, 578121, 578491, 58290, 57907, 57907,
  /* 21527 */ 0, 2121, 578499, 578121, 578121, 578121, 578505, 578523, 578121, 578528, 578121, 0, 3132, 0, 0, 578753,
  /* 21543 */ 1636, 578077, 578410, 0, 0, 0, 953, 0, 0, 0, 303, 578499, 578378, 58245, 578121, 0, 3140, 578077, 2967, 0,
  /* 21563 */ 2968, 578374, 578561, 578410, 578077, 578077, 578423, 578569, 578531, 578121, 578121, 578544, 1039, 1043,
  /* 21577 */ 0, 0, 415, 0, 0, 0, 424, 40960, 1047, 1051, 0, 0, 444, 0, 1134, 0, 0, 0, 1020, 1165, 0, 0, 0, 1057, 0,
  /* 21602 */ 1185, 0, 0, 473, 0, 0, 1203, 0, 0, 515, 522, 0, 1185, 578753, 832, 578755, 578077, 578077, 580520, 578077,
  /* 21622 */ 1560, 0, 0, 0, 1058, 0, 1578, 0, 0, 649, 0, 1597, 0, 0, 0, 1060, 1059, 1617, 0, 0, 0, 1065, 0, 1629, 1630,
  /* 21647 */ 0, 1631, 578753, 1635, 578077, 578077, 60147, 57907, 579194, 578077, 578077, 578077, 578392, 578077,
  /* 21661 */ 579226, 578077, 578077, 60448, 57907, 579235, 578077, 578077, 578077, 578393, 578077, 579240, 578077,
  /* 21674 */ 578077, 537117, 549405, 57907, 59105, 57907, 57907, 58292, 0, 59108, 57907, 57907, 57907, 58252, 59122,
  /* 21689 */ 57907, 57907, 57907, 58261, 574817, 1787, 578121, 578121, 200704, 0, 579346, 578121, 578121, 578121,
  /* 21703 */ 578509, 578121, 579378, 578121, 578121, 537161, 549449, 579387, 578121, 578121, 578121, 578513, 578121,
  /* 21716 */ 579392, 578121, 578121, 578121, 1069641, 578121, 579400, 578121, 578121, 578121, 1073737, 579403, 578077,
  /* 21729 */ 578077, 578077, 578419, 579411, 578077, 578077, 578077, 578422, 59223, 57907, 57907, 57907, 58265, 579419,
  /* 21743 */ 578121, 578121, 578121, 578514, 1897, 0, 0, 0, 1067, 0, 1919, 0, 0, 681, 0, 1942, 0, 1944, 0, 0, 580396,
  /* 21764 */ 578077, 58241, 58373, 58277, 0, 1985, 0, 0, 685, 0, 578077, 579544, 578077, 578077, 578077, 1053213,
  /* 21780 */ 579551, 578077, 578077, 578077, 578563, 59410, 57907, 57907, 59411, 57907, 59433, 57907, 57907, 58292,
  /* 21794 */ 57907, 57907, 59445, 57907, 57907, 58294, 0, 59459, 57907, 57907, 57907, 58272, 578121, 579668, 578121,
  /* 21809 */ 578121, 578370, 578077, 579675, 578121, 578121, 578121, 578543, 59534, 578121, 578077, 578077, 578121,
  /* 21822 */ 578121, 1044480, 0, 0, 0, 1071, 2218, 0, 0, 0, 1075, 2240, 0, 0, 0, 1091, 0, 2247, 0, 0, 686, 687, 2265,
  /* 21845 */ 0, 0, 0, 1100, 0, 578077, 579822, 578077, 578077, 578077, 1069597, 578077, 579830, 578077, 578077, 578077,
  /* 21861 */ 1073693, 578077, 1046798, 578077, 578077, 578377, 578077, 59676, 57907, 57907, 57907, 58278, 59684, 57907,
  /* 21875 */ 57907, 57907, 58281, 1046844, 57907, 57907, 57907, 58283, 57907, 59714, 57907, 57907, 58647, 57907,
  /* 21889 */ 578121, 579916, 578121, 578121, 578498, 578121, 578121, 579924, 578121, 578121, 578506, 578121, 578121,
  /* 21902 */ 1046892, 578121, 578121, 578515, 578121, 0, 2437, 0, 0, 691, 0, 0, 2439, 0, 0, 700, 0, 0, 0, 1126, 2452,
  /* 21923 */ 0, 0, 0, 1101, 0, 2461, 0, 0, 701, 0, 2479, 2480, 0, 0, 703, 0, 2497, 0, 2279, 0, 578077, 578077, 578370,
  /* 21946 */ 578077, 580043, 578077, 578077, 578385, 578077, 580046, 578077, 578077, 578077, 578760, 578077, 580052,
  /* 21959 */ 578077, 578077, 578394, 578077, 580059, 578077, 578077, 578077, 578762, 59965, 57907, 580159, 578121, 289,
  /* 21973 */ 62477, 0, 1483, 0, 0, 2635, 0, 0, 707, 0, 0, 2661, 0, 0, 708, 0, 578077, 580229, 578077, 578077, 578398,
  /* 21994 */ 578077, 57907, 60050, 57907, 57907, 58649, 57907, 57907, 60062, 57907, 60064, 578121, 580283, 578121,
  /* 22008 */ 578121, 578519, 578121, 2971, 0, 2973, 0, 0, 580514, 578077, 0, 3117, 0, 0, 417792, 417792, 0, 578077,
  /* 22026 */ 580515, 578077, 580516, 60336, 57907, 60337, 57907, 0, 578498, 578529, 578121, 580542, 578121, 578121,
  /* 22040 */ 578526, 578121, 3020, 0, 0, 3023, 580567, 578077, 578077, 578077, 578764, 57907, 60387, 57907, 57907,
  /* 22055 */ 58651, 57907, 0, 3066, 0, 3068, 309, 310, 0, 0, 710, 0, 419, 450, 450, 450, 450, 533, 450, 533, 533, 533,
  /* 22077 */ 450, 578080, 578080, 578080, 578124, 57909, 578080, 578080, 57909, 578124, 578080, 578124, 57909, 57909,
  /* 22091 */ 578124, 578080, 578124, 578124, 578124, 578124, 578080, 578124, 578124, 578124, 578157, 57970, 578157,
  /* 22104 */ 578124, 578168, 779, 0, 0, 0, 1105, 579236, 578077, 578077, 578077, 578768, 579388, 578121, 578121,
  /* 22119 */ 578121, 578551, 2259, 0, 0, 0, 1113, 0, 2269, 0, 0, 713, 0, 578077, 579820, 578077, 578077, 578405,
  /* 22137 */ 578077, 0, 0, 714, 0, 578077, 579823, 578077, 578077, 578411, 0, 59674, 57907, 57907, 57907, 58650, 59677,
  /* 22154 */ 57907, 57907, 57907, 58654, 57907, 59715, 57907, 57907, 58655, 57907, 578121, 579914, 578121, 578121,
  /* 22168 */ 578534, 578121, 578121, 578121, 579917, 578121, 578121, 578535, 1094217, 578077, 580572, 578077, 580574,
  /* 22181 */ 60390, 57907, 60392, 57907, 58258, 856627, 58264, 60394, 57907, 578121, 578121, 578121, 578495, 578121,
  /* 22195 */ 580594, 578121, 580596, 578121, 580598, 578121, 578077, 578814, 578077, 578077, 578077, 579572, 314, 315,
  /* 22209 */ 316, 317, 318, 319, 320, 0, 0, 582037, 582037, 582037, 582037, 0, 0, 314, 0, 0, 0, 1115, 315, 315, 420,
  /* 22230 */ 421, 40960, 428, 421, 429, 442, 451, 464, 464, 464, 464, 420, 429, 0, 311, 312, 313, 485, 490, 490, 501,
  /* 22251 */ 490, 490, 490, 490, 516, 516, 516, 529, 530, 530, 530, 516, 530, 530, 530, 530, 578081, 578081, 578081,
  /* 22270 */ 57910, 57910, 57910, 578125, 578081, 57910, 578125, 578081, 578081, 578125, 578125, 578125, 578125,
  /* 22283 */ 578154, 57963, 578125, 578154, 578125, 578125, 578153, 578154, 57963, 578154, 578153, 578153, 1, 363, 363,
  /* 22298 */ 363, 700, 732, 0, 0, 0, 1121, 0, 781, 0, 0, 716, 0, 0, 1066, 0, 0, 724, 0, 0, 1106, 1066, 0, 0, 586466,
  /* 22323 */ 578121, 0, 0, 578077, 580036, 0, 1172, 0, 0, 727, 0, 740, 663, 1179, 0, 0, 0, 1129, 578757, 578758,
  /* 22343 */ 578077, 578077, 578411, 578077, 578077, 57907, 58236, 57907, 578776, 578077, 578077, 578780, 578077,
  /* 22356 */ 578782, 578077, 578077, 578414, 0, 58645, 57907, 57907, 57907, 58657, 58669, 57907, 57907, 57907, 58671,
  /* 22371 */ 578940, 578121, 578942, 578121, 62477, 1482, 0, 0, 586466, 582037, 1542, 0, 0, 0, 1151, 0, 1591, 0, 1593,
  /* 22390 */ 0, 0, 638976, 0, 0, 0, 1169, 0, 1604, 0, 0, 728, 0, 0, 579196, 578077, 578077, 578077, 578771, 578077,
  /* 22410 */ 579207, 578077, 578077, 578414, 1094173, 578564, 58243, 59089, 57907, 57907, 57907, 58674, 57907, 59103,
  /* 22424 */ 59104, 57907, 58267, 58268, 58270, 579348, 578121, 578121, 578121, 578925, 578121, 579359, 578121, 578121,
  /* 22438 */ 578540, 578121, 578121, 1971, 0, 0, 0, 1154, 59452, 59453, 57907, 57907, 58664, 57907, 0, 2239, 0, 0, 734,
  /* 22457 */ 0, 0, 0, 825, 0, 2257, 2258, 0, 0, 655360, 736, 2462, 0, 0, 0, 1156, 2492, 0, 0, 2495, 57907, 59902,
  /* 22479 */ 57907, 57907, 58667, 57907, 578121, 580132, 578121, 578121, 578541, 578121, 578121, 578077, 580156, 57907,
  /* 22493 */ 59966, 578121, 580160, 0, 0, 736, 0, 0, 2659, 0, 0, 746, 0, 0, 0, 1620, 578077, 580212, 578077, 578077,
  /* 22513 */ 578416, 0, 580223, 578077, 578077, 578077, 578773, 57907, 60057, 60058, 57907, 58269, 57907, 58274,
  /* 22527 */ 578121, 580266, 578121, 578121, 578571, 578547, 580277, 578121, 578121, 578121, 578926, 580338, 578077,
  /* 22540 */ 57907, 57907, 58244, 3018, 3019, 0, 0, 749, 0, 0, 0, 131072, 0, 0, 0, 773, 580565, 580566, 578077, 578077,
  /* 22560 */ 578416, 578077, 578077, 57907, 58238, 57907, 578077, 580569, 578077, 578077, 578554, 578077, 57907, 60385,
  /* 22574 */ 60386, 57907, 58271, 57907, 57907, 59707, 57907, 57907, 578121, 580589, 580590, 580677, 57907, 60486,
  /* 22588 */ 578121, 578490, 578121, 578121, 579337, 579338, 580679, 0, 578077, 57907, 58701, 57907, 443, 452, 465,
  /* 22603 */ 465, 465, 465, 491, 491, 502, 491, 491, 491, 491, 517, 517, 517, 517, 517, 578126, 578082, 578082, 578082,
  /* 22622 */ 57911, 578082, 578126, 578126, 578126, 578126, 578126, 578082, 57911, 578126, 578082, 57911, 578082,
  /* 22635 */ 57911, 57911, 57911, 578126, 578126, 1, 12290, 797, 0, 0, 0, 1158, 0, 798720, 0, 0, 761, 0, 1080, 1081, 0,
  /* 22656 */ 1083, 1084, 0, 0, 0, 1161, 0, 1122, 1123, 0, 0, 913408, 0, 0, 917504, 0, 0, 925696, 0, 0, 939062, 0, 0,
  /* 22679 */ 939166, 0, 0, 978944, 0, 0, 987136, 800, 1148, 1150, 0, 0, 762, 0, 1148, 0, 798720, 1200, 578792, 578077,
  /* 22699 */ 578077, 578077, 578777, 578077, 939246, 578077, 578800, 57907, 799283, 57907, 57907, 58670, 57907, 939325,
  /* 22713 */ 57907, 58687, 57907, 58277, 57907, 57907, 58286, 57907, 0, 578121, 639561, 578121, 578121, 578121, 578929,
  /* 22728 */ 578960, 578121, 578121, 578963, 1539, 1540, 0, 0, 763, 0, 1563, 0, 0, 0, 1182, 356352, 0, 0, 0, 1191,
  /* 22748 */ 579414, 57907, 57907, 57907, 58679, 59226, 578121, 578121, 578121, 578932, 579422, 0, 1887, 0, 0, 987816,
  /* 22764 */ 0, 0, 987943, 0, 666, 0, 0, 0, 1926, 0, 0, 766, 0, 578077, 579542, 578077, 578077, 578765, 578077, 578077,
  /* 22784 */ 696861, 578077, 578077, 578766, 578077, 579558, 578077, 578077, 578077, 578783, 578077, 579591, 578077,
  /* 22797 */ 578077, 578769, 578077, 57907, 59456, 57907, 59458, 578121, 579666, 578121, 578121, 578921, 578121,
  /* 22810 */ 578121, 696905, 578121, 578121, 578938, 578121, 579682, 578121, 578121, 578121, 578946, 578121, 579715,
  /* 22823 */ 578121, 578121, 578939, 578121, 0, 2254, 0, 0, 767, 768, 57907, 59673, 57907, 57907, 58692, 57907, 995328,
  /* 22840 */ 0, 0, 0, 1193, 578077, 580048, 578077, 578077, 578772, 578077, 580064, 578077, 578077, 578077, 578785,
  /* 22855 */ 995891, 57907, 57907, 57907, 58681, 995913, 578121, 578121, 578121, 578948, 0, 2637, 0, 0, 785, 0,
  /* 22871 */ 1122845, 57907, 57907, 57907, 58682, 2974, 0, 0, 0, 1197, 578121, 580545, 578121, 578121, 578950, 578121,
  /* 22887 */ 580595, 578121, 578121, 578121, 578949, 324, 325, 326, 0, 0, 1122304, 0, 0, 1093632, 0, 0, 0, 2650, 371,
  /* 22906 */ 326, 370, 0, 0, 1138688, 0, 0, 1155072, 0, 0, 1156697, 0, 1, 12290, 2113824, 0, 0, 0, 782, 323, 0, 0, 370,
  /* 22929 */ 0, 370, 400, 0, 326, 0, 45056, 453, 466, 466, 466, 466, 479, 466, 466, 466, 492, 466, 492, 492, 507, 509,
  /* 22951 */ 492, 492, 507, 492, 518, 518, 518, 518, 578083, 518, 535, 518, 518, 57912, 57912, 57912, 578127, 1, 12290,
  /* 22970 */ 3, 578083, 578083, 578083, 578083, 57912, 578083, 578083, 57912, 578127, 578083, 578083, 57912, 578083,
  /* 22984 */ 578127, 578127, 578127, 578127, 660, 661, 0, 0, 798, 0, 671, 672, 0, 0, 800, 0, 0, 0, 401408, 0, 401408,
  /* 23005 */ 0, 0, 0, 374, 706, 0, 0, 0, 1201, 718, 0, 0, 0, 1204, 0, 784, 0, 786, 958464, 958464, 921600, 0, 958464,
  /* 23028 */ 0, 0, 0, 1207, 813, 0, 0, 0, 1490, 816, 0, 0, 0, 1493, 784, 0, 0, 0, 1497, 824, 922354, 824, 0, 3, 53537,
  /* 23053 */ 53537, 53885, 61731, 0, 639, 0, 848413, 578077, 922463, 578077, 60100, 57907, 580294, 959005, 578077,
  /* 23068 */ 578077, 578409, 578412, 578417, 578077, 578424, 58242, 57907, 58248, 57907, 58278, 57907, 57907, 58658,
  /* 23082 */ 57907, 57907, 848435, 57907, 922522, 57907, 959027, 57907, 57907, 58694, 57907, 58276, 58279, 58284,
  /* 23096 */ 57907, 0, 578496, 58291, 57907, 57907, 0, 2122, 848457, 578121, 922584, 578121, 578492, 578121, 578121,
  /* 23111 */ 579719, 578121, 959049, 578121, 578121, 578530, 578533, 578538, 578121, 578545, 578412, 0, 0, 0, 1502,
  /* 23126 */ 578375, 578077, 578562, 578417, 0, 1068, 0, 0, 805, 0, 1074, 0, 0, 0, 1509, 0, 1090, 0, 0, 806, 0, 1093,
  /* 23148 */ 1094, 0, 0, 809, 809, 0, 1098, 0, 0, 813, 813, 1137, 739, 0, 0, 0, 790, 578763, 578077, 578077, 578077,
  /* 23169 */ 578791, 578795, 578077, 578077, 578077, 578805, 578077, 578821, 578077, 578077, 578781, 578077, 578830,
  /* 23182 */ 578077, 578077, 57907, 59224, 57907, 58708, 57907, 57907, 57907, 58688, 578937, 578121, 578121, 578941,
  /* 23196 */ 578965, 578121, 578121, 578121, 578977, 578121, 578990, 578121, 578121, 578962, 578121, 0, 1505, 0,
  /* 23210 */ 679936, 782336, 0, 0, 0, 1513, 1524, 0, 1526, 1527, 1532, 0, 0, 0, 1518, 1544, 0, 0, 0, 1521, 0, 1552, 0,
  /* 23233 */ 1554, 0, 968180, 1558, 0, 297, 0, 298, 0, 301, 0, 0, 0, 323, 1568, 0, 0, 0, 1531, 1577, 0, 0, 0, 1534, 0,
  /* 23258 */ 1602, 1603, 0, 301, 0, 302, 94208, 0, 1605, 1606, 1607, 0, 301, 301, 301, 301, 1614, 0, 0, 1616, 0,
  /* 23279 */ 512000, 0, 0, 0, 1538, 0, 1633, 679936, 679936, 579176, 579177, 578077, 579179, 578077, 579195, 578077,
  /* 23295 */ 578077, 578786, 578077, 578077, 782877, 578077, 578077, 578788, 578077, 578077, 579202, 578077, 579203,
  /* 23308 */ 579211, 579213, 578077, 578077, 578789, 578077, 579247, 59056, 57907, 59058, 59059, 57907, 59061, 57907,
  /* 23322 */ 58281, 1094195, 58376, 59077, 57907, 57907, 57907, 58701, 782899, 57907, 57907, 57907, 58702, 59084,
  /* 23336 */ 57907, 59085, 57907, 58283, 57907, 57907, 1073715, 57907, 59095, 57907, 57907, 57907, 58710, 57907, 59098,
  /* 23351 */ 968411, 57907, 58293, 57907, 0, 0, 953, 952, 57907, 59101, 59102, 57907, 59225, 57907, 57907, 1111791,
  /* 23367 */ 57907, 57907, 58699, 57907, 579328, 579329, 578121, 579331, 578121, 579347, 578121, 578121, 578964,
  /* 23380 */ 578121, 578121, 782921, 578121, 578121, 578966, 578121, 578121, 579354, 578121, 579355, 579363, 579365,
  /* 23393 */ 578121, 578121, 578968, 578121, 579399, 578121, 578121, 579402, 579220, 578077, 579413, 578077, 471603,
  /* 23406 */ 57907, 57907, 1143347, 0, 579372, 578121, 579421, 578121, 578500, 578121, 578121, 579368, 968489, 0, 1898,
  /* 23421 */ 0, 0, 817, 0, 1901, 1902, 0, 0, 824, 0, 0, 1906, 0, 0, 832, 578077, 578077, 578077, 57907, 578121, 0, 0,
  /* 23443 */ 1485, 1134592, 0, 0, 0, 1543, 1056768, 0, 0, 0, 1545, 1935, 0, 0, 0, 1547, 0, 1939, 0, 0, 0, 1550, 0,
  /* 23466 */ 1146880, 0, 0, 953, 578121, 578121, 578121, 1887, 0, 1889, 0, 0, 0, 425, 1958, 0, 1960, 0, 304, 0, 0, 0,
  /* 23488 */ 729, 1976, 0, 0, 0, 1564, 1984, 0, 0, 0, 1567, 579547, 578077, 578077, 578077, 578807, 578077, 579556,
  /* 23506 */ 578077, 578077, 578803, 578077, 579575, 579576, 578077, 578077, 578817, 0, 1057309, 578077, 578077,
  /* 23519 */ 578077, 578810, 578077, 1135133, 578077, 578077, 578817, 578077, 1147421, 1151517, 578077, 57907, 59403,
  /* 23532 */ 57907, 59412, 57907, 59414, 57907, 58643, 57907, 57907, 59425, 57907, 57907, 59421, 57907, 59423, 579671,
  /* 23547 */ 578121, 578121, 578121, 578982, 578121, 579680, 578121, 578121, 578969, 578971, 579699, 579700, 578121,
  /* 23560 */ 578121, 578976, 578121, 1057353, 578121, 578121, 578121, 578985, 578121, 1135177, 578121, 578121, 578978,
  /* 23573 */ 578121, 1147465, 1151561, 578121, 578121, 578980, 578121, 59414, 578121, 578077, 579729, 946176, 0, 0, 0,
  /* 23588 */ 1569, 2225, 0, 0, 0, 1570, 0, 2230, 0, 2232, 2233, 0, 0, 0, 1571, 0, 491520, 0, 0, 1040, 1044, 0, 668189,
  /* 23611 */ 578077, 578077, 578077, 578812, 750109, 578077, 579834, 578077, 475721, 475677, 475699, 578077, 946717,
  /* 23624 */ 578077, 578077, 578822, 578077, 579846, 578077, 578077, 578077, 578827, 1020445, 578077, 578077, 578077,
  /* 23637 */ 579187, 579858, 578077, 578077, 578077, 579192, 57907, 59688, 57907, 57907, 58706, 57907, 946739, 57907,
  /* 23651 */ 57907, 59700, 668233, 578121, 578121, 578121, 578986, 750153, 578121, 579928, 578121, 578502, 578121,
  /* 23664 */ 578121, 578953, 578121, 578121, 946761, 578121, 578121, 578981, 578121, 579940, 578121, 578121, 578121,
  /* 23677 */ 578992, 1020489, 578121, 578121, 578121, 578993, 579952, 578121, 578121, 578121, 578994, 0, 741376, 0, 0,
  /* 23692 */ 1048, 1052, 0, 2494, 0, 0, 0, 1574, 0, 0, 578077, 1024541, 578077, 578077, 578825, 578077, 741939, 57907,
  /* 23710 */ 57907, 57907, 58711, 57907, 59904, 57907, 57907, 58714, 57907, 741961, 578121, 578121, 578121, 578995,
  /* 23724 */ 578121, 580134, 578121, 578121, 578988, 578989, 0, 2641, 299008, 2642, 0, 315392, 0, 2644, 0, 0, 1056,
  /* 23741 */ 1181, 0, 503808, 0, 0, 1076, 0, 2664, 688128, 0, 884736, 0, 2669, 578077, 578077, 578826, 578077, 688669,
  /* 23759 */ 578077, 578077, 578077, 579197, 721437, 578077, 578077, 578077, 579199, 578077, 580218, 578077, 578077,
  /* 23772 */ 578832, 578077, 580228, 580230, 578077, 578077, 578833, 57907, 580232, 578077, 1131037, 1139229, 57907,
  /* 23785 */ 885299, 57907, 57907, 58819, 57907, 1131059, 1139251, 578121, 578121, 578997, 578077, 688713, 578121,
  /* 23798 */ 578121, 578121, 579339, 721481, 578121, 578121, 578121, 579344, 578121, 580272, 578121, 578121, 579015,
  /* 23811 */ 578121, 580282, 580284, 578121, 578121, 579016, 62477, 580286, 578121, 1131081, 1139273, 580287, 580288,
  /* 23824 */ 578077, 578121, 578503, 578121, 578510, 57907, 60101, 578121, 580295, 0, 2764, 0, 0, 1077, 0, 950272, 0,
  /* 23841 */ 0, 0, 1576, 0, 233472, 335872, 659456, 580325, 578077, 578077, 578077, 579201, 57907, 953086, 57907,
  /* 23856 */ 57907, 58820, 579013, 578121, 660041, 578121, 578121, 579332, 578121, 953104, 578121, 578121, 578121,
  /* 23869 */ 579349, 580375, 578077, 578077, 57907, 578077, 578121, 578121, 578121, 578496, 0, 2850, 2771, 2852,
  /* 23883 */ 580410, 578077, 57907, 57907, 58644, 580440, 578121, 578077, 578077, 579007, 578077, 253952, 0, 2771, 0,
  /* 23898 */ 2853, 0, 2914, 0, 0, 0, 1580, 57907, 60287, 57907, 57907, 59069, 57907, 580494, 578121, 578121, 578121,
  /* 23915 */ 579351, 57907, 60347, 578121, 578121, 579334, 578121, 580552, 578077, 0, 0, 1078, 0, 0, 774144, 0, 0,
  /* 23932 */ 1079, 0, 774729, 578121, 578121, 578121, 579353, 578077, 671744, 3065, 0, 305, 0, 0, 379, 0, 954368, 0, 0,
  /* 23951 */ 580607, 672285, 580608, 578077, 578077, 579008, 58817, 791069, 578077, 954909, 578077, 578077, 953068,
  /* 23964 */ 578077, 508445, 508467, 508489, 672307, 60423, 57907, 57907, 59074, 57907, 791091, 57907, 954931, 57907,
  /* 23978 */ 58652, 57907, 57907, 680499, 57907, 672329, 580622, 578121, 578121, 579336, 578121, 791113, 578121,
  /* 23991 */ 954953, 578121, 578507, 578121, 578121, 579913, 578121, 1048576, 578077, 580656, 578077, 578077, 983581,
  /* 24004 */ 578077, 578077, 995869, 578077, 58242, 57907, 58374, 60468, 57907, 57907, 57907, 58717, 1049139, 578121,
  /* 24018 */ 580664, 578121, 578508, 578121, 578121, 1114697, 578077, 327, 0, 0, 0, 1594, 422, 40960, 367, 422, 328,
  /* 24035 */ 422, 0, 322, 322, 372, 503, 499, 499, 508, 499, 499, 499, 508, 57913, 578084, 578084, 57913, 578128,
  /* 24053 */ 578084, 578128, 57913, 57913, 578128, 578084, 57913, 578084, 578128, 578128, 578128, 578128, 578084, 782,
  /* 24067 */ 0, 0, 0, 1600, 864797, 578077, 578077, 578077, 579228, 57907, 864819, 57907, 57907, 59079, 57907, 864841,
  /* 24083 */ 578121, 578121, 578121, 579362, 1067, 0, 0, 0, 1601, 578077, 578761, 578077, 578077, 579180, 578077,
  /* 24098 */ 58648, 57907, 57907, 57907, 58718, 578933, 578121, 578121, 578121, 579380, 1061405, 578077, 578077,
  /* 24111 */ 578077, 579229, 1061449, 578121, 578121, 578121, 579381, 1977, 0, 0, 0, 1618, 579569, 578077, 578077,
  /* 24126 */ 578077, 579230, 579693, 578121, 578121, 578121, 579382, 2268, 0, 0, 0, 1619, 0, 2765, 0, 0, 1085, 0,
  /* 24144 */ 580326, 578077, 578077, 578077, 579231, 635421, 578077, 578077, 578077, 579232, 635465, 578121, 578121,
  /* 24157 */ 578121, 579383, 758301, 578077, 758323, 57907, 58656, 57907, 57907, 59892, 57907, 758345, 578121, 0,
  /* 24171 */ 578077, 578077, 709149, 40960, 0, 423, 423, 0, 423, 467, 467, 467, 467, 493, 493, 467, 493, 493, 493, 493,
  /* 24191 */ 578085, 578085, 578085, 57914, 57914, 57914, 578129, 578085, 57914, 578129, 578085, 578085, 578129,
  /* 24204 */ 578129, 1, 578129, 578129, 578129, 578129, 578085, 578129, 578129, 578085, 57914, 0, 339968, 0, 0, 1086,
  /* 24220 */ 1087, 0, 1938, 0, 0, 1088, 0, 1992, 0, 0, 0, 1621, 59434, 57907, 57907, 57907, 59063, 579728, 578077,
  /* 24239 */ 578077, 578077, 579233, 59538, 57907, 57907, 57907, 59075, 579732, 578121, 578121, 578121, 579384, 0,
  /* 24253 */ 2224, 0, 0, 1095, 1096, 0, 1064960, 0, 0, 1108, 0, 0, 2478, 0, 0, 1110, 0, 1065501, 578077, 578077,
  /* 24273 */ 578077, 579234, 999424, 0, 0, 0, 1624, 520192, 0, 0, 0, 1627, 1105920, 0, 0, 626688, 0, 1126400, 0, 0,
  /* 24293 */ 1112, 0, 2648, 0, 0, 0, 1889, 0, 1891, 0, 0, 0, 692, 0, 0, 2652, 0, 0, 1117, 0, 627229, 578077, 578077,
  /* 24316 */ 578077, 579239, 795165, 578077, 578077, 578077, 579246, 578077, 999965, 578077, 578077, 579182, 578077,
  /* 24329 */ 1106461, 578077, 578077, 1126941, 57907, 1126963, 57907, 57907, 59081, 57907, 627273, 578121, 578121,
  /* 24342 */ 578121, 579386, 795209, 578121, 578121, 578121, 579391, 578121, 1000009, 578121, 578121, 579340, 578121,
  /* 24355 */ 1106505, 578121, 578121, 1126985, 651805, 578077, 578077, 578077, 579406, 830187, 578077, 578077, 578077,
  /* 24368 */ 579538, 578077, 1010413, 578077, 1032733, 1010431, 57907, 1032755, 57907, 58659, 57907, 58663, 57907,
  /* 24381 */ 578121, 651849, 578121, 578511, 578121, 578121, 580125, 578121, 578121, 1032777, 578121, 578121, 579356,
  /* 24394 */ 578121, 0, 2857, 0, 761856, 578077, 762397, 578077, 578077, 579184, 578077, 57907, 60230, 57907, 57907,
  /* 24409 */ 59083, 57907, 578121, 762441, 578121, 578121, 579357, 578121, 57907, 578121, 832073, 1012297, 0, 578500,
  /* 24423 */ 578379, 58246, 578546, 53537, 62477, 0, 347, 0, 0, 0, 389120, 0, 0, 0, 365, 0, 1089, 0, 0, 1125, 0, 0,
  /* 24445 */ 1114, 0, 0, 1128, 0, 1133, 0, 0, 0, 1890, 0, 1177, 0, 0, 1130, 0, 578972, 578121, 578121, 578121, 579398,
  /* 24466 */ 1155613, 578077, 57907, 57907, 59404, 1155657, 578121, 578121, 578121, 579662, 692765, 578077, 578077,
  /* 24479 */ 578077, 579549, 692809, 578121, 578121, 578121, 579673, 57907, 1086003, 57907, 57907, 59110, 57907, 2784,
  /* 24493 */ 0, 578077, 578077, 580207, 60185, 57907, 580378, 578121, 578516, 578121, 578121, 579712, 578121, 1114675,
  /* 24507 */ 578121, 578121, 578121, 579674, 382, 0, 0, 0, 1891, 0, 1893, 0, 0, 0, 697, 49152, 0, 417, 417, 433, 0, 0,
  /* 24529 */ 0, 1893, 0, 330, 468, 468, 468, 468, 468, 468, 486, 494, 486, 494, 494, 494, 494, 519, 527, 527, 536, 527,
  /* 24551 */ 527, 527, 527, 578086, 57915, 57915, 57915, 578130, 1, 12290, 3, 578086, 578086, 578086, 578086, 57915,
  /* 24567 */ 578086, 578086, 57915, 578130, 578086, 578086, 57915, 578086, 578130, 578130, 578130, 578130, 696, 0, 363,
  /* 24582 */ 363, 363, 0, 0, 0, 301, 0, 765, 0, 0, 1131, 0, 769, 0, 0, 0, 1894, 791, 0, 0, 0, 1899, 0, 809, 0, 0, 0,
  /* 24609 */ 1916, 0, 795, 0, 0, 0, 1904, 791, 0, 0, 825, 578426, 578077, 57907, 57907, 578121, 578077, 57907, 578121,
  /* 24628 */ 1, 12290, 3, 58256, 57907, 57907, 57907, 59076, 578547, 578121, 578121, 578121, 579677, 578426, 57907,
  /* 24643 */ 57907, 57907, 59078, 58375, 58293, 0, 578121, 578526, 578077, 578077, 579856, 578077, 1190, 0, 0, 0, 1917,
  /* 24660 */ 1194, 0, 0, 0, 1921, 1206, 0, 0, 0, 1931, 578077, 578790, 578077, 578077, 579188, 578077, 578815, 578077,
  /* 24678 */ 578077, 578819, 578824, 578077, 578077, 578077, 579550, 578831, 578077, 578077, 57907, 578121, 3148,
  /* 24691 */ 58677, 57907, 57907, 57907, 59080, 578943, 578121, 578121, 578121, 579678, 578121, 578975, 578121, 578121,
  /* 24705 */ 579373, 579374, 578979, 578121, 578121, 578121, 579688, 578121, 578984, 578121, 578121, 579375, 578121,
  /* 24718 */ 578121, 578991, 578121, 578121, 579379, 578121, 0, 1516, 0, 0, 1135, 0, 0, 1525, 0, 0, 1136, 0, 1528, 0,
  /* 24738 */ 0, 0, 1937, 1584, 1585, 0, 1587, 0, 1610, 0, 1611, 578077, 579214, 578077, 578077, 579204, 578077, 578077,
  /* 24756 */ 579218, 578077, 578077, 579205, 578077, 578077, 579233, 578077, 578077, 579216, 968337, 59096, 57907,
  /* 24769 */ 57907, 57907, 59088, 59100, 57907, 57907, 57907, 59090, 57907, 59109, 57907, 57907, 59112, 57907, 59115,
  /* 24784 */ 57907, 57907, 57907, 59091, 57907, 59123, 59125, 57907, 58668, 57907, 57907, 58697, 57907, 578121, 579366,
  /* 24799 */ 578121, 578121, 579393, 579395, 578121, 579370, 578121, 578121, 579394, 578121, 578121, 579385, 578121,
  /* 24812 */ 578121, 579396, 578121, 0, 1927, 0, 0, 1138, 0, 0, 0, 423, 1928, 0, 0, 0, 1945, 0, 1966, 0, 0, 1142, 0,
  /* 24835 */ 578077, 579539, 578077, 578077, 579219, 579220, 579548, 578077, 578077, 578077, 579553, 578077, 579583,
  /* 24848 */ 578077, 578077, 579221, 579222, 57907, 59460, 57907, 57907, 59113, 57907, 578121, 579663, 578121, 578121,
  /* 24862 */ 579665, 578121, 579672, 578121, 578121, 578121, 579690, 578121, 579707, 578121, 578121, 579667, 578121,
  /* 24875 */ 59415, 578121, 578077, 578077, 579223, 578077, 2213, 0, 0, 2215, 0, 2216, 0, 0, 1146, 0, 0, 0, 249856, 0,
  /* 24895 */ 2222, 0, 0, 1147, 0, 0, 2226, 0, 0, 1152, 0, 2237, 0, 0, 0, 1947, 2243, 0, 2245, 0, 352, 353, 354, 0,
  /* 24919 */ 2255, 0, 0, 1153, 0, 2262, 0, 0, 0, 1954, 0, 2276, 0, 0, 1155, 0, 578077, 579837, 578077, 578077, 579227,
  /* 24940 */ 578077, 579847, 578077, 578077, 578077, 579554, 578077, 579859, 578077, 578077, 579241, 579243, 59691,
  /* 24953 */ 57907, 57907, 57907, 59106, 57907, 59695, 57907, 57907, 59114, 57907, 57907, 59710, 57907, 57907, 59116,
  /* 24968 */ 1090099, 59713, 57907, 57907, 57907, 59107, 578121, 579931, 578121, 578121, 579669, 578121, 579941,
  /* 24981 */ 578121, 578121, 578121, 579694, 578121, 579953, 578121, 578121, 579683, 578121, 579958, 578077, 578077,
  /* 24994 */ 579960, 579961, 59770, 578121, 578077, 578998, 578077, 0, 2441, 0, 0, 1157, 0, 0, 2445, 0, 0, 1160, 0,
  /* 25013 */ 2457, 0, 0, 0, 1962, 0, 2476, 0, 0, 1162, 0, 0, 2487, 0, 2489, 580065, 578077, 578077, 578077, 579564,
  /* 25033 */ 580068, 578077, 578077, 578077, 579566, 59883, 57907, 57907, 57907, 59117, 57907, 59888, 57907, 57907,
  /* 25047 */ 59121, 57907, 59899, 59900, 57907, 57907, 59128, 57907, 59903, 57907, 57907, 57907, 59118, 57907, 59907,
  /* 25062 */ 57907, 57907, 59407, 57907, 59909, 57907, 59911, 57907, 58673, 57907, 57907, 59436, 57907, 580113, 578121,
  /* 25077 */ 578121, 578121, 579696, 578121, 580118, 578121, 578121, 579685, 578121, 580129, 580130, 578121, 578121,
  /* 25090 */ 579686, 578121, 580133, 578121, 578121, 578121, 579702, 578121, 580137, 578121, 578121, 579691, 578121,
  /* 25103 */ 580139, 578121, 580141, 578121, 578539, 578121, 53537, 663552, 0, 0, 2627, 2628, 0, 0, 0, 1968, 2649, 0,
  /* 25121 */ 0, 0, 1970, 2653, 0, 0, 0, 1972, 2660, 0, 0, 2663, 578077, 580225, 578077, 578077, 579242, 578077, 664115,
  /* 25140 */ 57907, 57907, 57907, 59127, 60046, 57907, 57907, 57907, 59129, 57907, 60051, 57907, 57907, 59413, 57907,
  /* 25155 */ 578121, 580279, 578121, 578121, 579698, 578121, 0, 2767, 2768, 0, 359, 0, 0, 2975, 0, 0, 2847, 0, 0, 1170,
  /* 25175 */ 0, 57907, 60221, 57907, 57907, 59415, 57907, 60231, 57907, 57907, 57907, 59406, 0, 2976, 2977, 0, 359, 0,
  /* 25193 */ 360, 580521, 578077, 580523, 580524, 578077, 580525, 578077, 57907, 578121, 578077, 578077, 57907, 59539,
  /* 25207 */ 57907, 60344, 60345, 57907, 58675, 57907, 57907, 59895, 57907, 60346, 57907, 578121, 578121, 580261,
  /* 25221 */ 580549, 580550, 578121, 580551, 578121, 580553, 0, 0, 1171, 0, 578077, 580636, 580637, 578077, 578077,
  /* 25236 */ 1085981, 578077, 578077, 1004061, 578077, 578077, 1049117, 57907, 58653, 57907, 57907, 59111, 57907,
  /* 25249 */ 60450, 60451, 57907, 57907, 59418, 57907, 580649, 578121, 578121, 578077, 57907, 580290, 580685, 60494,
  /* 25263 */ 580687, 0, 359, 360, 361, 332, 0, 332, 332, 0, 578147, 578147, 578077, 578144, 578144, 578144, 578144,
  /* 25280 */ 578077, 57907, 578144, 578077, 578144, 57907, 578077, 578144, 578144, 578121, 578077, 579412, 578077, 0,
  /* 25294 */ 1175, 0, 0, 1173, 0, 578121, 578996, 578077, 578077, 579244, 578077, 578999, 578077, 0, 578121, 578542,
  /* 25310 */ 578121, 578121, 579922, 579923, 0, 155648, 0, 0, 1178, 0, 57907, 676403, 57907, 57907, 59422, 57907, 335,
  /* 25327 */ 0, 0, 0, 1979, 376, 0, 379, 0, 363, 0, 61731, 0, 0, 469, 476, 469, 469, 495, 495, 469, 495, 495, 495, 495,
  /* 25351 */ 538, 578131, 578087, 578087, 578087, 57916, 578087, 578131, 578131, 578131, 578131, 578131, 578087, 57916,
  /* 25365 */ 578131, 578087, 57916, 578087, 57916, 57916, 57916, 578131, 578131, 1, 12290, 58237, 57907, 57907, 57907,
  /* 25380 */ 59409, 58251, 57907, 57907, 57907, 59419, 578491, 578077, 578077, 578413, 0, 0, 1187, 0, 0, 1059, 1060, 0,
  /* 25398 */ 0, 0, 1993, 0, 1097, 0, 1099, 1139, 0, 0, 0, 1988, 1183, 0, 0, 0, 1991, 1209, 147456, 0, 0, 1188, 0, 0, 0,
  /* 25423 */ 2482, 1059, 0, 0, 0, 1997, 578767, 578774, 578077, 578077, 579405, 578077, 578801, 578077, 578077, 578077,
  /* 25439 */ 579570, 58661, 57907, 57907, 57907, 59427, 578987, 578121, 578121, 578121, 579703, 0, 578927, 578767,
  /* 25453 */ 58654, 57907, 578121, 578974, 578121, 578121, 1510, 0, 0, 0, 2201, 579193, 578077, 578077, 578077, 579578,
  /* 25469 */ 579224, 578077, 578077, 578077, 579579, 579345, 578121, 578121, 578121, 579706, 579376, 578121, 578121,
  /* 25482 */ 578121, 579708, 0, 1908, 1909, 0, 363, 298, 0, 0, 397312, 397312, 397312, 0, 1941, 0, 0, 0, 2204, 0, 1952,
  /* 25503 */ 0, 0, 1189, 0, 0, 579587, 578077, 578077, 578077, 579582, 57907, 59437, 57907, 57907, 59448, 57907, 59447,
  /* 25520 */ 57907, 57907, 57907, 59438, 57907, 59451, 57907, 57907, 59454, 57907, 579711, 578121, 578121, 578121,
  /* 25534 */ 579713, 0, 2208, 0, 0, 1192, 0, 579832, 578077, 578077, 578077, 579584, 579926, 578121, 578121, 578121,
  /* 25550 */ 579717, 2451, 0, 0, 0, 2207, 2475, 0, 0, 0, 2210, 0, 2490, 0, 0, 1205, 0, 578077, 580072, 578077, 57907,
  /* 25571 */ 578121, 579005, 57907, 59887, 57907, 57907, 59457, 57907, 59893, 57907, 57907, 57907, 59450, 578121,
  /* 25585 */ 580117, 578121, 578121, 579704, 578121, 580123, 578121, 578121, 578121, 579720, 819200, 0, 0, 0, 2212,
  /* 25600 */ 819741, 578077, 578077, 578077, 579589, 819785, 578121, 578121, 578121, 579915, 2770, 0, 0, 0, 2221,
  /* 25615 */ 57907, 60163, 57907, 57907, 59675, 57907, 580373, 578121, 578121, 578121, 579919, 580611, 578077, 578077,
  /* 25629 */ 578077, 579593, 60426, 57907, 57907, 57907, 59461, 580625, 578121, 578121, 578121, 579921, 57907, 580646,
  /* 25643 */ 578121, 578121, 579709, 579710, 580670, 578077, 578077, 578077, 579821, 60480, 57907, 57907, 57907, 59678,
  /* 25657 */ 580674, 578121, 578121, 578121, 579939, 434, 0, 0, 0, 2246, 454, 470, 470, 470, 454, 470, 480, 470, 470,
  /* 25676 */ 470, 470, 454, 470, 454, 454, 454, 454, 520, 520, 520, 520, 578088, 57917, 57917, 57917, 578132, 1, 12290,
  /* 25695 */ 3, 578088, 578088, 578088, 578088, 57917, 578088, 578088, 57917, 578132, 578088, 578088, 57917, 578088,
  /* 25709 */ 578132, 578132, 578132, 578132, 730, 0, 0, 0, 2261, 1144, 0, 0, 0, 2270, 0, 1174, 0, 0, 1211, 0, 0, 1214,
  /* 25731 */ 0, 0, 0, 2278, 578077, 578799, 578077, 578077, 579543, 578077, 578077, 578816, 578077, 578077, 579545,
  /* 25746 */ 578077, 58686, 57907, 57907, 57907, 59680, 58703, 57907, 57907, 57907, 59686, 578928, 578121, 578121,
  /* 25760 */ 578121, 579942, 578928, 578768, 58655, 578121, 578548, 578121, 578121, 580498, 578121, 0, 905216, 0, 0,
  /* 25775 */ 1213, 0, 0, 1533, 0, 0, 1488, 0, 579198, 578077, 578077, 578077, 579825, 57907, 905779, 57907, 57907,
  /* 25792 */ 59681, 57907, 579350, 578121, 578121, 578121, 579944, 1918, 0, 0, 0, 2279, 0, 0, 0, 1959, 0, 0, 1489, 0,
  /* 25812 */ 1973, 0, 0, 0, 2440, 579555, 578077, 578077, 578077, 579827, 57907, 59417, 57907, 57907, 59699, 57907,
  /* 25828 */ 59444, 57907, 57907, 57907, 59687, 57907, 59449, 57907, 57907, 59702, 57907, 579679, 578121, 578121,
  /* 25842 */ 578121, 579946, 578077, 580213, 578077, 578077, 579559, 578077, 578121, 580267, 578121, 578121, 579716,
  /* 25855 */ 578121, 0, 909312, 0, 0, 1494, 0, 0, 2911, 2771, 0, 2972, 0, 578077, 580471, 57907, 57907, 59704, 57907,
  /* 25874 */ 60294, 578121, 578121, 578121, 579947, 2969, 0, 0, 2771, 580517, 578077, 578077, 578077, 579845, 337, 338,
  /* 25890 */ 339, 0, 367, 367, 0, 306, 0, 306, 406, 307, 363, 337, 61731, 0, 367, 422, 499, 422, 422, 422, 422, 388,
  /* 25912 */ 338, 0, 0, 1495, 0, 439, 0, 445, 0, 368, 0, 0, 0, 1081344, 471, 477, 471, 471, 471, 500, 481, 471, 482,
  /* 25935 */ 481, 471, 477, 500, 500, 500, 500, 500, 471, 471, 471, 471, 481, 471, 471, 578089, 578089, 578089, 578133,
  /* 25954 */ 57918, 578089, 578089, 57918, 578133, 578089, 578133, 57918, 57918, 578133, 578089, 57918, 578089, 578133,
  /* 25968 */ 578133, 578133, 578133, 578089, 665, 0, 0, 872448, 668, 0, 0, 0, 2448, 715, 0, 0, 0, 2456, 723, 0, 0, 0,
  /* 25990 */ 2458, 0, 792, 0, 0, 1501, 0, 801, 0, 0, 0, 2460, 804, 0, 801, 792, 665, 873274, 0, 368, 368, 0, 371, 0, 0,
  /* 26015 */ 786, 0, 0, 0, 1496, 668, 0, 788, 0, 0, 818, 0, 0, 0, 2463, 665, 821, 0, 788, 806, 0, 806, 0, 826, 0, 0,
  /* 26041 */ 1507, 1508, 873308, 578077, 578077, 578077, 579848, 57907, 873367, 57907, 57907, 59706, 57907, 873429,
  /* 26055 */ 578121, 578121, 578121, 580119, 578371, 578077, 578404, 578077, 578077, 578077, 579850, 0, 1061, 1062,
  /* 26069 */ 1063, 1064, 0, 0, 0, 2467, 0, 1141, 0, 0, 1511, 1512, 1062, 0, 0, 0, 2470, 1166, 0, 0, 0, 2473, 0, 1195,
  /* 26093 */ 0, 0, 1512, 0, 578967, 578121, 578121, 578121, 580124, 579002, 58811, 578121, 578077, 580151, 578121,
  /* 26108 */ 579006, 578077, 578077, 57907, 578490, 578077, 58818, 57907, 57907, 578121, 579733, 579014, 578121,
  /* 26121 */ 578121, 62477, 0, 1484, 0, 1506, 0, 0, 1517, 0, 0, 217088, 0, 0, 1519, 0, 348160, 0, 0, 0, 2488, 0, 1579,
  /* 26144 */ 0, 0, 1523, 966656, 0, 1626, 0, 0, 1535, 0, 579181, 578077, 578077, 578077, 579852, 578077, 579191,
  /* 26161 */ 578077, 578077, 579574, 578077, 59073, 57907, 57907, 57907, 59696, 579333, 578121, 578121, 578121, 580126,
  /* 26175 */ 578121, 579343, 578121, 578121, 579930, 578121, 578121, 579401, 578121, 578077, 729088, 0, 579404, 578077,
  /* 26189 */ 578077, 578121, 578549, 578121, 988127, 578529, 578121, 578121, 580543, 578121, 1932, 0, 0, 0, 2493, 0,
  /* 26205 */ 1956, 0, 0, 1536, 0, 0, 1974, 0, 0, 1549, 0, 1118208, 0, 0, 0, 2498, 1118749, 578077, 578077, 578077,
  /* 26225 */ 579853, 57907, 59405, 57907, 57907, 59905, 57907, 59441, 57907, 57907, 57907, 59701, 1118793, 578121,
  /* 26239 */ 578121, 578121, 580128, 579727, 578077, 578077, 578077, 580038, 0, 2206, 0, 0, 1551, 0, 2209, 0, 0, 0,
  /* 26257 */ 2629, 0, 983040, 0, 0, 1553, 0, 1028096, 2214, 0, 0, 1555, 0, 0, 2235, 2236, 0, 372, 0, 40960, 0, 401408,
  /* 26279 */ 0, 2260, 0, 0, 1557, 0, 2271, 0, 0, 2274, 579833, 578077, 579835, 578077, 578077, 1111717, 578077, 60335,
  /* 26297 */ 57907, 57907, 58254, 57907, 579842, 578077, 578077, 578077, 580039, 578077, 1030411, 578077, 578077,
  /* 26310 */ 579577, 578077, 578077, 579855, 578077, 578077, 579580, 578077, 57907, 59682, 59683, 57907, 58690, 57907,
  /* 26324 */ 57907, 58672, 836147, 57907, 59689, 57907, 57907, 59910, 57907, 57907, 59692, 57907, 57907, 59914, 57907,
  /* 26339 */ 57907, 983603, 57907, 57907, 59915, 57907, 1030457, 57907, 57907, 57907, 59712, 59709, 57907, 57907,
  /* 26353 */ 57907, 59889, 579927, 578121, 579929, 578121, 578570, 578538, 578121, 578492, 578121, 578525, 578121,
  /* 26366 */ 578121, 578121, 580120, 579936, 578121, 578121, 578121, 580136, 578121, 1030505, 578121, 578121, 579932,
  /* 26379 */ 578121, 578121, 579949, 578121, 578121, 579933, 578121, 57907, 578121, 578077, 579964, 57907, 59774,
  /* 26392 */ 578121, 579968, 2453, 1142784, 180224, 0, 384, 0, 45056, 0, 2466, 0, 2468, 0, 2474, 0, 0, 1559, 0, 2491,
  /* 26412 */ 0, 0, 0, 2633, 580049, 578077, 578077, 580051, 578077, 580060, 578077, 578077, 579585, 579586, 578077,
  /* 26427 */ 580070, 578077, 578077, 579588, 578077, 1143325, 59881, 57907, 57907, 59917, 57907, 57907, 59897, 57907,
  /* 26441 */ 57907, 60049, 57907, 59913, 57907, 57907, 59916, 0, 580111, 578121, 578121, 579934, 578121, 578121,
  /* 26455 */ 580127, 578121, 578121, 579935, 578121, 580143, 578121, 578121, 580146, 59962, 578077, 578077, 57907,
  /* 26468 */ 578492, 578077, 843776, 0, 0, 0, 2636, 0, 2662, 0, 0, 1561, 0, 2666, 0, 2667, 0, 384, 336, 0, 0, 0, 2227,
  /* 26491 */ 578077, 844317, 578077, 578077, 579592, 578077, 578077, 580226, 578077, 578077, 579671, 579547, 57907,
  /* 26504 */ 60042, 57907, 57907, 60063, 60065, 57907, 60054, 57907, 844339, 57907, 60059, 57907, 60061, 578121,
  /* 26518 */ 844361, 578121, 578121, 579950, 578121, 578121, 580280, 578121, 578121, 579954, 578121, 700416, 0, 2762,
  /* 26532 */ 0, 387, 0, 0, 1930, 0, 0, 2782, 0, 0, 1562, 0, 700957, 580323, 578077, 578077, 579672, 579548, 578077,
  /* 26551 */ 580327, 580328, 578077, 578077, 1114653, 57907, 58662, 57907, 57907, 578121, 580541, 60149, 57907, 57907,
  /* 26565 */ 57907, 59890, 60153, 60154, 57907, 57907, 60066, 57907, 57907, 840243, 57907, 57907, 60067, 57907, 580364,
  /* 26580 */ 578121, 578121, 578121, 580148, 840265, 578121, 578121, 578121, 580263, 578121, 580370, 578121, 578121,
  /* 26593 */ 579955, 578121, 237568, 0, 0, 0, 2640, 2855, 0, 0, 0, 2645, 57907, 60225, 57907, 57907, 60160, 57907,
  /* 26611 */ 578121, 580496, 578121, 578121, 579956, 578121, 0, 712704, 0, 0, 1565, 0, 1036288, 0, 2771, 0, 389, 0, 0,
  /* 26630 */ 1575, 0, 578077, 713245, 578077, 578077, 579722, 579723, 713267, 57907, 57907, 57907, 59894, 57907, 60341,
  /* 26645 */ 57907, 57907, 60161, 57907, 57907, 578121, 578121, 713289, 580546, 578121, 578121, 578121, 580264, 578121,
  /* 26659 */ 1036873, 578121, 578121, 579957, 578121, 3021, 0, 0, 0, 2646, 580575, 57907, 57907, 57907, 59896, 57907,
  /* 26675 */ 60395, 578121, 578121, 580122, 578121, 580597, 578121, 580599, 578077, 578369, 578077, 578077, 578077,
  /* 26688 */ 579210, 60469, 60470, 57907, 57907, 60227, 60228, 57907, 578121, 1015808, 1016349, 1016371, 1016393, 1,
  /* 26702 */ 12290, 342, 343, 344, 0, 391, 387, 0, 401, 0, 0, 1180, 0, 40960, 342, 343, 343, 446, 455, 472, 472, 472,
  /* 26724 */ 472, 487, 496, 496, 504, 506, 506, 496, 506, 496, 496, 521, 521, 521, 521, 578090, 578090, 578090, 57919,
  /* 26743 */ 57919, 578145, 578134, 578090, 57919, 578134, 578090, 57919, 578145, 578148, 578148, 578090, 578145,
  /* 26756 */ 578145, 1, 578145, 578145, 578145, 578145, 578090, 578145, 578145, 578090, 57919, 654, 655, 656, 657, 658,
  /* 26772 */ 659, 0, 0, 1586, 0, 673, 674, 0, 676, 677, 0, 0, 0, 2647, 0, 717, 0, 719, 0, 721, 0, 0, 1589, 0, 649, 750,
  /* 26798 */ 751, 752, 811, 812, 0, 408, 354, 0, 410, 0, 0, 1082, 0, 0, 758, 759, 0, 0, 787, 962560, 0, 0, 775, 776, 0,
  /* 26823 */ 676, 0, 410, 45056, 49152, 417792, 0, 0, 794, 0, 0, 1595, 1596, 0, 802, 676, 721, 0, 1093632, 803, 0, 419,
  /* 26845 */ 0, 0, 712, 0, 0, 752, 0, 0, 1599, 0, 815, 697, 0, 0, 1609, 0, 0, 820, 0, 0, 1622, 0, 0, 822, 0, 0, 1623,
  /* 26872 */ 0, 0, 1093632, 820, 820, 0, 1093632, 578077, 578077, 579724, 579725, 578400, 578401, 578403, 578077,
  /* 26887 */ 578371, 578077, 578077, 579561, 578077, 58250, 57907, 58257, 57907, 58704, 57907, 57907, 58287, 57907, 0,
  /* 26902 */ 471625, 1094195, 57907, 57907, 57907, 59898, 578521, 578522, 578524, 578121, 578917, 578918, 578121, 3152,
  /* 26916 */ 580689, 60498, 58367, 578121, 578376, 578077, 578376, 578380, 578383, 0, 578497, 578121, 578535, 1094217,
  /* 26930 */ 578572, 53537, 62477, 1091, 0, 0, 0, 2651, 363, 1102, 0, 0, 1628, 0, 1124, 0, 0, 0, 2766, 1159, 0, 0, 0,
  /* 26953 */ 2769, 0, 1176, 0, 0, 1895, 0, 578077, 578797, 578077, 578077, 579828, 579829, 578077, 578806, 578077,
  /* 26969 */ 578077, 579836, 578077, 578813, 578077, 578077, 578077, 580041, 58684, 57907, 57907, 57907, 59906, 58693,
  /* 26983 */ 57907, 57907, 58700, 0, 1520, 897024, 0, 0, 0, 2776, 1566, 0, 0, 0, 2771, 0, 0, 0, 305, 305, 1572, 0,
  /* 27005 */ 1573, 0, 422, 0, 422, 422, 578084, 578084, 578084, 578128, 0, 1592, 0, 0, 1896, 0, 0, 1608, 0, 0, 1902, 0,
  /* 27027 */ 578077, 579175, 578077, 578077, 579838, 578077, 578077, 579200, 578077, 578077, 579839, 578077, 579206,
  /* 27040 */ 578077, 578077, 578077, 580042, 579209, 578077, 578077, 897565, 578077, 579238, 578077, 578077, 579840,
  /* 27053 */ 578077, 59057, 57907, 57907, 57907, 59918, 59082, 57907, 57907, 57907, 60047, 59120, 57907, 57907, 57907,
  /* 27068 */ 60048, 578121, 579327, 578121, 578121, 580140, 578121, 578121, 579352, 578121, 578121, 580144, 578121,
  /* 27081 */ 579358, 578121, 578121, 578121, 580269, 579361, 578121, 578121, 897609, 578121, 579390, 578121, 578121,
  /* 27094 */ 580145, 578121, 0, 1888, 0, 1040, 0, 1044, 0, 0, 1911, 0, 0, 1892, 0, 1048, 0, 1052, 0, 0, 1920, 0, 1922,
  /* 27117 */ 0, 0, 0, 2851, 59428, 57907, 57907, 57907, 60053, 57907, 59439, 57907, 57907, 60286, 57907, 2223, 0, 0, 0,
  /* 27136 */ 2859, 0, 2242, 0, 0, 1923, 0, 1636, 578077, 578077, 578077, 580056, 57907, 59716, 57907, 0, 0, 578121,
  /* 27154 */ 578121, 578537, 578121, 1788, 578121, 578121, 578121, 580270, 2450, 0, 0, 0, 2912, 0, 2496, 0, 0, 1924, 0,
  /* 27173 */ 57907, 59882, 57907, 57907, 60289, 57907, 59901, 57907, 57907, 57907, 60056, 578121, 580112, 578121,
  /* 27187 */ 578121, 580147, 578121, 580131, 578121, 578121, 578121, 580273, 2626, 0, 0, 0, 3025, 57907, 60045, 57907,
  /* 27203 */ 57907, 60293, 57907, 57907, 60055, 57907, 57907, 60339, 57907, 2761, 0, 0, 0, 3027, 60219, 57907, 57907,
  /* 27220 */ 57907, 60060, 57907, 60223, 57907, 57907, 60340, 57907, 0, 2907, 0, 0, 1925, 0, 2910, 0, 0, 0, 3069, 2916,
  /* 27240 */ 0, 0, 0, 36864, 578077, 580469, 578077, 578077, 579841, 578077, 60292, 57907, 57907, 578121, 580427,
  /* 27255 */ 578121, 580489, 578121, 578121, 580262, 578121, 578121, 580493, 578121, 578121, 580265, 578121, 578121,
  /* 27268 */ 580544, 578121, 578121, 580360, 578121, 578121, 580548, 578121, 578121, 580361, 578121, 3118, 0, 0,
  /* 27282 */ 578077, 633454, 578077, 580691, 0, 578077, 57907, 578549, 578377, 403, 0, 345, 0, 423, 432, 0, 329, 330,
  /* 27300 */ 331, 447, 0, 0, 0, 45056, 49152, 0, 0, 0, 306, 307, 522, 0, 0, 0, 81920, 578135, 578091, 578091, 578091,
  /* 27321 */ 57920, 578091, 578135, 578135, 578135, 578135, 578135, 578091, 57920, 578135, 578091, 57920, 578091,
  /* 27334 */ 57920, 57920, 57920, 578135, 578158, 57971, 578158, 578135, 578169, 1, 12290, 772, 0, 0, 0, 86016, 0, 0,
  /* 27352 */ 678, 0, 0, 0, 135168, 58289, 57907, 57907, 57907, 60150, 578560, 578077, 578077, 578077, 580058, 1070, 0,
  /* 27369 */ 0, 0, 139264, 0, 0, 1140, 0, 0, 1934, 0, 0, 1145, 0, 0, 1940, 0, 1168, 0, 0, 0, 176128, 1065, 0, 0, 0,
  /* 27394 */ 204800, 578770, 578077, 578077, 578077, 580061, 578077, 578779, 578077, 578077, 579860, 578077, 578077,
  /* 27407 */ 578808, 578077, 578077, 579861, 578077, 578823, 578077, 578077, 578077, 580066, 58666, 57907, 57907,
  /* 27420 */ 57907, 60151, 58695, 57907, 57907, 57907, 60152, 578951, 578121, 578121, 578121, 580274, 578121, 578983,
  /* 27434 */ 578121, 578121, 580374, 578121, 0, 578930, 578770, 58657, 579004, 578077, 578077, 578077, 580209, 0,
  /* 27448 */ 929792, 0, 0, 1948, 0, 1556, 0, 0, 0, 212992, 578077, 930333, 578077, 578077, 579862, 578077, 930355,
  /* 27465 */ 57907, 57907, 57907, 60164, 578121, 930377, 578121, 578121, 580429, 578121, 1907, 0, 0, 0, 311296, 851968,
  /* 27481 */ 0, 0, 0, 319488, 852509, 578077, 578077, 578077, 580210, 59426, 57907, 57907, 57907, 60226, 59429, 57907,
  /* 27497 */ 852531, 57907, 58709, 57907, 57907, 59679, 57907, 852553, 578121, 578121, 578121, 580276, 1998, 0, 0, 0,
  /* 27513 */ 327680, 2122, 0, 0, 0, 331776, 0, 2643, 0, 0, 1950, 0, 0, 0, 2668, 0, 578077, 832029, 1012253, 0, 2908, 0,
  /* 27535 */ 0, 1951, 733184, 2913, 0, 2915, 0, 424, 424, 0, 438, 424, 578077, 580458, 578077, 580460, 60281, 57907,
  /* 27553 */ 60283, 57907, 58712, 57907, 57907, 60233, 57907, 578121, 580490, 578121, 578121, 580438, 578121, 307200,
  /* 27567 */ 578077, 578077, 578077, 580215, 747, 0, 0, 0, 352256, 1041, 1045, 0, 0, 1953, 0, 1049, 1053, 0, 0, 1955,
  /* 27587 */ 0, 578753, 1637, 578077, 578077, 580037, 578077, 574817, 1789, 578121, 578121, 580502, 0, 578077, 580330,
  /* 27602 */ 578077, 578077, 580047, 578077, 60156, 57907, 57907, 57907, 60291, 346, 40960, 0, 346, 0, 346, 347, 348,
  /* 27619 */ 346, 348, 346, 0, 424, 469, 469, 469, 469, 483, 469, 348, 346, 346, 346, 346, 513, 57921, 578092, 578092,
  /* 27639 */ 57921, 578136, 578092, 578136, 57921, 57921, 578136, 578092, 57921, 578092, 578136, 578136, 578136,
  /* 27652 */ 578136, 578092, 711, 0, 0, 0, 393216, 0, 0, 0, 366, 0, 0, 720, 0, 722, 0, 737, 0, 0, 1967, 0, 0, 753, 0,
  /* 27677 */ 0, 1969, 0, 0, 780, 0, 0, 1980, 0, 1982, 0, 0, 987136, 0, 0, 1983, 0, 988006, 578408, 578077, 578077,
  /* 27698 */ 580053, 580054, 58260, 57907, 57907, 57907, 60338, 57907, 988065, 58275, 57907, 58713, 57907, 57907,
  /* 27712 */ 58678, 57907, 578539, 578121, 578121, 578121, 580278, 578552, 578077, 988006, 578077, 578379, 578077,
  /* 27725 */ 578077, 579185, 579186, 578408, 578077, 578418, 578077, 578077, 578077, 580216, 58244, 58275, 57907,
  /* 27738 */ 58285, 57907, 57907, 60389, 57907, 1104, 0, 0, 0, 405504, 1107, 0, 1109, 0, 426, 0, 360, 1111, 0, 0, 0,
  /* 27759 */ 409600, 1127, 0, 0, 0, 422502, 0, 1132, 0, 0, 1987, 0, 0, 1163, 1164, 0, 431, 437, 0, 0, 667648, 0, 0,
  /* 27782 */ 708608, 0, 0, 786432, 0, 0, 794624, 0, 0, 835584, 0, 0, 839680, 0, 0, 847872, 0, 922354, 0, 0, 1208, 0, 0,
  /* 27805 */ 1989, 0, 0, 1210, 0, 0, 1995, 0, 0, 1212, 0, 0, 1996, 0, 1136, 578753, 832, 578077, 578756, 578077,
  /* 27825 */ 836125, 578077, 578077, 578077, 580219, 578077, 578804, 578077, 578077, 580055, 578077, 578077, 578818,
  /* 27838 */ 578077, 578077, 580057, 578077, 578077, 578828, 578829, 578077, 578381, 578077, 578077, 578775, 578077,
  /* 27851 */ 58691, 57907, 57907, 57907, 60342, 58705, 57907, 57907, 57907, 60391, 58715, 58716, 57907, 57907, 60425,
  /* 27866 */ 57907, 578945, 836169, 578121, 578121, 580547, 578121, 578077, 579000, 0, 578121, 578923, 578121, 578121,
  /* 27880 */ 578957, 578121, 1541, 0, 0, 0, 438272, 0, 1582, 0, 0, 0, 442368, 0, 1598, 0, 0, 0, 446926, 446926, 446926,
  /* 27901 */ 1, 578077, 579178, 578077, 578077, 580062, 578077, 579245, 578077, 578077, 578077, 580220, 59060, 57907,
  /* 27915 */ 57907, 57907, 60393, 578121, 579330, 578121, 578121, 580591, 578121, 579397, 578121, 578121, 578121,
  /* 27928 */ 580281, 991232, 1912, 0, 1914, 1915, 0, 0, 0, 454656, 1936, 0, 0, 0, 458752, 458752, 458752, 458752, 1943,
  /* 27947 */ 0, 0, 0, 524288, 0, 1964, 1965, 0, 435, 0, 0, 1933, 0, 622592, 0, 1975, 0, 440, 0, 0, 2848, 2849, 0, 1986,
  /* 27971 */ 993168, 0, 458, 0, 0, 221184, 0, 623133, 578077, 578077, 578077, 580222, 578077, 579560, 578077, 578077,
  /* 27987 */ 580063, 578077, 578077, 579565, 578077, 579568, 578077, 993269, 578077, 578077, 580067, 578077, 578077,
  /* 28000 */ 579594, 623155, 57907, 58719, 57907, 574817, 0, 579326, 578121, 578497, 578501, 578504, 59408, 57907,
  /* 28014 */ 57907, 57907, 60452, 57907, 59431, 57907, 59432, 57907, 59435, 57907, 57907, 60427, 57907, 57907, 59446,
  /* 28029 */ 57907, 57907, 60471, 57907, 623177, 578121, 578121, 578121, 580363, 578121, 579684, 578121, 578121,
  /* 28042 */ 580592, 578121, 578121, 579689, 578121, 579692, 578121, 993393, 578121, 578121, 580624, 578121, 578121,
  /* 28055 */ 579718, 578121, 578121, 580626, 578121, 0, 2202, 2203, 0, 458, 557531, 557531, 557531, 557531, 0, 0, 2231,
  /* 28072 */ 0, 0, 2198, 0, 2234, 0, 0, 0, 544768, 2238, 0, 0, 0, 552960, 2244, 0, 0, 0, 557056, 2251, 0, 0, 0, 561152,
  /* 28096 */ 0, 579826, 578077, 578077, 578077, 580224, 578077, 579831, 578077, 578077, 580152, 580153, 578077, 579843,
  /* 28110 */ 578077, 578077, 580208, 578077, 59685, 57907, 57907, 57907, 574817, 0, 578121, 578121, 578532, 578121,
  /* 28124 */ 59697, 57907, 57907, 57907, 578121, 578121, 0, 1887, 0, 0, 0, 426, 579920, 578121, 578121, 578121, 580366,
  /* 28141 */ 578121, 579925, 578121, 578121, 580650, 580651, 578121, 579937, 578121, 578121, 580665, 580666, 57907,
  /* 28154 */ 578121, 579963, 578077, 578382, 578077, 578389, 59773, 57907, 579967, 578121, 578927, 578934, 578121,
  /* 28167 */ 578546, 578121, 578121, 579371, 579372, 2433, 2434, 0, 0, 2205, 0, 2449, 0, 0, 0, 569344, 415, 580040,
  /* 28185 */ 578077, 578077, 578077, 580227, 580069, 578077, 578077, 578077, 580334, 57907, 59885, 59886, 57907, 58720,
  /* 28199 */ 574817, 578753, 0, 579174, 578077, 60280, 57907, 57907, 60481, 578121, 578121, 580115, 580116, 578121,
  /* 28213 */ 578930, 578121, 578121, 580362, 578121, 0, 2638, 0, 0, 2211, 0, 633481, 57907, 57907, 57907, 580621,
  /* 28229 */ 57907, 578121, 633508, 578121, 578936, 578121, 578121, 578536, 578121, 578121, 578077, 580289, 578121,
  /* 28242 */ 578077, 578386, 578077, 578077, 579562, 578077, 2909, 0, 0, 0, 578077, 578077, 57907, 57907, 57907, 0, 0,
  /* 28259 */ 0, 394, 0, 0, 407, 2919, 0, 580457, 578077, 578387, 578077, 578077, 803357, 578077, 57907, 60284, 57907,
  /* 28276 */ 57907, 537139, 549427, 580487, 578121, 578121, 578121, 580428, 580491, 578121, 578121, 578121, 580430,
  /* 28289 */ 578121, 580500, 578121, 578077, 578390, 578077, 578077, 579819, 578077, 0, 3022, 0, 3024, 580568, 578077,
  /* 28304 */ 578077, 578077, 580335, 57907, 60388, 57907, 57907, 574817, 1788, 578121, 0, 3067, 0, 0, 2217, 0, 580659,
  /* 28321 */ 578077, 57907, 57907, 574817, 578753, 953, 578121, 578121, 580667, 578121, 167936, 0, 474, 474, 474, 474,
  /* 28337 */ 578095, 278528, 0, 578077, 578077, 580459, 350, 351, 0, 0, 2219, 0, 366, 0, 383, 0, 488, 357, 357, 474,
  /* 28357 */ 474, 488, 0, 349, 0, 0, 0, 578121, 578077, 57907, 467529, 366, 0, 407, 409, 40960, 0, 425, 425, 448, 456,
  /* 28378 */ 0, 497, 497, 0, 498, 498, 0, 522, 522, 522, 522, 497, 497, 497, 497, 523, 523, 523, 523, 537, 523, 523,
  /* 28400 */ 456, 456, 523, 537, 456, 531, 456, 532, 539, 578093, 578093, 578093, 57922, 57922, 57922, 578137, 578093,
  /* 28417 */ 57922, 578137, 578149, 578149, 578093, 578137, 578137, 578093, 57922, 578137, 578093, 578137, 578137,
  /* 28430 */ 578137, 578137, 578159, 57972, 578159, 578137, 578170, 1, 647168, 0, 0, 0, 578753, 0, 578077, 578077,
  /* 28446 */ 578077, 578121, 578077, 57907, 578077, 578077, 57907, 651827, 0, 777, 0, 0, 2241, 0, 0, 901120, 0, 0, 0,
  /* 28465 */ 579817, 57907, 648063, 57907, 57907, 578121, 580488, 901683, 57907, 57907, 57907, 668211, 648125, 578121,
  /* 28479 */ 578121, 578121, 580432, 648125, 578550, 578121, 648004, 578077, 578077, 578077, 580398, 578553, 578077,
  /* 28492 */ 578077, 0, 578121, 578077, 57907, 648125, 578077, 578077, 580211, 578077, 0, 1054, 0, 1056, 1069, 0, 0, 0,
  /* 28510 */ 579911, 1116, 0, 1118, 0, 641, 642, 0, 0, 303104, 0, 0, 323584, 0, 0, 368640, 0, 0, 372736, 0, 0, 0,
  /* 28532 */ 266240, 0, 0, 1191, 1198, 0, 645, 646, 0, 0, 393216, 393216, 102400, 393216, 1215, 1216, 0, 0, 2248, 2249,
  /* 28552 */ 578077, 578778, 578077, 578077, 580322, 578077, 578077, 578793, 578077, 578796, 58665, 57907, 57907,
  /* 28565 */ 57907, 685753, 58680, 57907, 58683, 57907, 59062, 57907, 57907, 60282, 57907, 578920, 578121, 578121,
  /* 28579 */ 578121, 580437, 578924, 578121, 578121, 578935, 578956, 578121, 578121, 578121, 580441, 1546, 0, 1548, 0,
  /* 28594 */ 650, 0, 0, 399, 0, 57907, 59126, 57907, 57907, 580426, 578121, 59070, 578121, 578077, 578077, 580329,
  /* 28610 */ 578077, 1910, 970752, 0, 0, 2250, 0, 0, 548864, 0, 0, 2252, 0, 0, 1957, 0, 0, 2253, 0, 1978, 0, 0, 0,
  /* 28633 */ 580035, 578077, 579537, 578077, 578077, 580337, 578077, 578077, 579571, 971293, 578077, 578395, 578077,
  /* 28646 */ 578077, 579541, 578077, 579581, 578077, 578077, 578077, 580400, 971315, 57907, 57907, 57907, 696883,
  /* 28659 */ 59455, 57907, 57907, 57907, 700979, 578121, 579661, 578121, 578121, 580675, 0, 578121, 579695, 971337,
  /* 28673 */ 578121, 578944, 578121, 578121, 746057, 578121, 579705, 578121, 578121, 578121, 580495, 0, 1485, 0, 1491,
  /* 28688 */ 0, 0, 0, 270336, 0, 1497, 0, 1503, 0, 0, 0, 274432, 0, 229376, 0, 0, 2256, 0, 0, 2228, 0, 0, 2263, 0, 0,
  /* 28713 */ 2264, 0, 0, 2266, 0, 2272, 0, 0, 0, 580321, 578077, 579844, 578077, 578077, 580376, 578077, 578077,
  /* 28730 */ 579849, 578077, 578077, 580399, 578077, 59698, 57907, 57907, 57907, 705075, 59703, 57907, 57907, 57907,
  /* 28744 */ 737843, 578121, 579938, 578121, 578121, 643613, 578077, 578121, 579943, 578121, 578121, 656197, 578077, 0,
  /* 28758 */ 2485, 0, 0, 2267, 0, 0, 1998, 578077, 578077, 580408, 578077, 578077, 580050, 578077, 578077, 580461,
  /* 28774 */ 578077, 59908, 57907, 57907, 57907, 750131, 580138, 578121, 578121, 578121, 580499, 2654, 2655, 0, 0,
  /* 28789 */ 2273, 0, 475136, 0, 0, 0, 580564, 0, 532480, 540672, 0, 652, 0, 0, 1119, 0, 2772, 0, 0, 2775, 0, 1040384,
  /* 28811 */ 0, 0, 2275, 0, 2783, 0, 516096, 578077, 578413, 578077, 578077, 579340, 579188, 578077, 1040925, 578077,
  /* 28827 */ 578077, 580462, 578077, 1040947, 57907, 57907, 57907, 762419, 516637, 57907, 516659, 578121, 578947,
  /* 28840 */ 578121, 578121, 0, 159744, 516681, 2843, 0, 0, 2277, 0, 0, 2845, 0, 0, 2280, 0, 0, 507904, 578077, 580397,
  /* 28860 */ 57907, 60220, 57907, 57907, 639539, 57907, 60222, 57907, 57907, 57907, 766515, 578077, 580465, 578077,
  /* 28874 */ 580467, 60288, 57907, 60290, 57907, 59064, 57907, 57907, 58288, 57907, 578121, 580497, 578121, 578121,
  /* 28888 */ 664137, 578121, 60384, 57907, 57907, 57907, 772756, 57907, 580588, 578121, 578121, 701001, 580359, 578077,
  /* 28902 */ 729629, 580635, 578077, 578419, 578077, 578077, 741917, 578077, 729651, 60449, 57907, 57907, 660019,
  /* 28915 */ 57907, 580647, 578121, 578121, 578121, 580501, 355, 0, 0, 0, 580634, 352, 0, 473, 473, 484, 473, 473, 528,
  /* 28934 */ 524, 528, 528, 528, 540, 528, 528, 524, 528, 473, 473, 473, 473, 478, 473, 473, 578138, 578094, 578094,
  /* 28953 */ 578094, 57923, 578094, 578138, 578138, 578138, 578138, 578138, 578094, 57923, 578138, 578094, 57923,
  /* 28966 */ 578094, 57923, 57923, 57923, 578138, 578160, 57973, 578160, 578138, 578171, 1, 12290, 667, 0, 0, 669, 0,
  /* 28983 */ 726, 0, 0, 2374, 0, 0, 742, 743, 655360, 0, 755, 0, 0, 2438, 0, 0, 774, 0, 0, 2442, 0, 790, 0, 0, 0,
  /* 29008 */ 598475, 598475, 598475, 1, 0, 856064, 0, 933888, 0, 0, 0, 602112, 0, 0, 602112, 602112, 602112, 0, 0, 0,
  /* 29028 */ 348, 0, 790, 0, 810, 0, 0, 0, 606208, 606208, 1, 790, 0, 655360, 0, 670, 0, 0, 2220, 0, 0, 790, 933888,
  /* 29051 */ 830, 578391, 856605, 578397, 934429, 656256, 57907, 57907, 57907, 774707, 934451, 57907, 57907, 57907,
  /* 29065 */ 803379, 578512, 856649, 578518, 934473, 656318, 578077, 578077, 578415, 578077, 578077, 580464, 578077,
  /* 29078 */ 1073, 0, 0, 0, 610920, 1149, 0, 0, 0, 647168, 0, 1057, 0, 0, 2444, 0, 0, 1184, 0, 1186, 1196, 0, 1199, 0,
  /* 29102 */ 673, 0, 1093632, 697, 0, 1184, 1202, 0, 258048, 1086, 0, 0, 0, 647951, 0, 0, 1105, 0, 578753, 953, 578121,
  /* 29123 */ 578916, 578077, 578759, 578077, 578077, 580526, 57907, 578784, 578077, 578077, 578077, 580402, 578794,
  /* 29136 */ 578077, 578077, 926237, 578077, 578802, 578077, 578077, 580571, 578077, 578077, 578809, 578811, 578077,
  /* 29149 */ 578421, 578077, 578077, 579567, 578077, 58642, 57907, 57907, 57907, 830205, 58646, 57907, 57907, 57907,
  /* 29163 */ 860723, 58689, 57907, 57907, 57907, 889395, 58696, 58698, 57907, 57907, 688691, 57907, 578753, 953,
  /* 29177 */ 578915, 578121, 578952, 578121, 578121, 578919, 578121, 926281, 578121, 578121, 578121, 580593, 1485, 0,
  /* 29191 */ 0, 0, 651264, 1497, 0, 0, 0, 655360, 0, 0, 1514, 0, 0, 0, 685644, 1089536, 0, 0, 0, 692224, 1613, 0, 0,
  /* 29214 */ 1615, 0, 1619, 0, 0, 2447, 0, 0, 1632, 0, 1612, 685644, 578753, 0, 578077, 578425, 57907, 57907, 59092,
  /* 29233 */ 59093, 685679, 578077, 578077, 578077, 580407, 578077, 579189, 578077, 578077, 580573, 578077, 578077,
  /* 29246 */ 579212, 578077, 578077, 580610, 578077, 913949, 578077, 578077, 578077, 580463, 1090077, 578077, 578077,
  /* 29259 */ 578077, 580466, 59071, 57907, 57907, 57907, 942643, 59094, 57907, 57907, 913971, 685831, 578121, 578121,
  /* 29273 */ 578121, 580628, 578121, 579341, 578121, 578121, 803401, 578121, 578121, 579364, 578121, 578121, 830223,
  /* 29286 */ 578121, 913993, 578121, 578121, 578121, 580648, 1090121, 578121, 578121, 578121, 643657, 578077, 579407,
  /* 29299 */ 579408, 59217, 57907, 578121, 579420, 578121, 578954, 578121, 578121, 788577, 578121, 1900, 0, 0, 0,
  /* 29314 */ 802816, 0, 0, 0, 364544, 1913, 0, 0, 0, 856064, 823296, 0, 1929, 225280, 0, 1946, 0, 0, 2454, 0, 0,
  /* 29335 */ 188416, 0, 0, 2455, 0, 0, 172032, 0, 0, 2469, 0, 0, 1097728, 0, 0, 2471, 0, 0, 1990, 0, 0, 2481, 0, 1998,
  /* 29359 */ 0, 578077, 578077, 656197, 579546, 578077, 578077, 733725, 823837, 578077, 578077, 579563, 1077789,
  /* 29372 */ 578077, 578077, 1098269, 579590, 578077, 578077, 578077, 580470, 57907, 733747, 57907, 57907, 692787,
  /* 29385 */ 57907, 57907, 59420, 57907, 57907, 721459, 57907, 57907, 59430, 57907, 57907, 746035, 57907, 57907,
  /* 29399 */ 1098291, 57907, 57907, 795187, 57907, 2122, 0, 578121, 578121, 656318, 579670, 578121, 578121, 733769,
  /* 29413 */ 823881, 578121, 578121, 579687, 1077833, 578121, 578121, 1098313, 579714, 578121, 578121, 578121, 656318,
  /* 29426 */ 0, 2200, 0, 0, 2484, 0, 0, 2229, 0, 0, 2486, 0, 0, 811008, 0, 0, 2630, 0, 344064, 0, 0, 0, 868352, 578077,
  /* 29450 */ 579818, 578077, 578077, 580612, 578077, 579824, 578077, 578077, 578077, 580518, 868893, 881181, 578077,
  /* 29463 */ 578077, 580657, 580658, 578077, 1081885, 578077, 578077, 580671, 57907, 59672, 57907, 57907, 57907,
  /* 29476 */ 979507, 57907, 59694, 57907, 868915, 881203, 57907, 57907, 57907, 993328, 57907, 1004083, 57907, 57907,
  /* 29490 */ 811571, 57907, 1081907, 57907, 57907, 57907, 999987, 578121, 579912, 578121, 578121, 877129, 578121,
  /* 29503 */ 579918, 578121, 578121, 578121, 676425, 868937, 881225, 578121, 578121, 889417, 578121, 578121, 1081929,
  /* 29516 */ 578121, 578121, 905801, 578121, 975433, 578077, 975389, 579959, 0, 2436, 0, 0, 2632, 0, 163840, 716800, 0,
  /* 29533 */ 0, 2658, 0, 745472, 778240, 0, 0, 2665, 0, 0, 2472, 0, 0, 2774, 0, 0, 286720, 0, 2477, 704512, 0, 2483, 0,
  /* 29556 */ 679, 0, 0, 1981, 0, 578077, 705053, 578077, 717341, 746013, 578077, 578077, 778781, 580071, 578077,
  /* 29571 */ 578077, 57907, 580155, 578077, 57907, 717363, 57907, 57907, 815667, 57907, 57907, 778803, 57907, 57907,
  /* 29585 */ 819763, 57907, 578121, 717385, 578121, 578121, 909897, 909853, 578121, 778825, 578121, 578121, 939406,
  /* 29598 */ 578121, 578121, 580149, 580150, 578077, 578425, 578077, 57907, 578077, 580291, 2639, 0, 0, 0, 901120, 0,
  /* 29614 */ 2656, 2657, 0, 679, 680, 0, 425, 0, 409, 578077, 772729, 578077, 578077, 627251, 57907, 578077, 580221,
  /* 29631 */ 578077, 578077, 635443, 57907, 580231, 578077, 578077, 578077, 580519, 60043, 57907, 57907, 57907,
  /* 29644 */ 1020467, 578121, 772783, 578121, 578121, 983625, 578121, 578121, 580275, 578121, 578121, 1004105, 578121,
  /* 29657 */ 580285, 578121, 578121, 578121, 680521, 0, 2763, 0, 0, 2777, 0, 0, 2781, 0, 0, 2778, 0, 0, 892928, 483328,
  /* 29677 */ 0, 682, 683, 684, 580324, 578077, 578077, 578077, 580522, 578077, 580336, 578077, 578077, 664093, 578077,
  /* 29692 */ 57907, 893491, 57907, 57907, 823859, 57907, 60162, 57907, 57907, 57907, 1024563, 893513, 578121, 578121,
  /* 29706 */ 578121, 705097, 578121, 580371, 578121, 580372, 360448, 0, 0, 0, 921600, 0, 2858, 0, 0, 2779, 0, 580409,
  /* 29724 */ 578077, 578077, 57907, 832051, 1012275, 57907, 709171, 57907, 57907, 897587, 57907, 57907, 756544, 57907,
  /* 29738 */ 57907, 926259, 57907, 57907, 578121, 578121, 709193, 580439, 578121, 578121, 578077, 578077, 578077,
  /* 29751 */ 578077, 0, 0, 0, 398, 578121, 580600, 0, 0, 2780, 0, 737280, 1052672, 0, 0, 2844, 0, 3095, 3096, 3097,
  /* 29771 */ 578077, 578427, 57907, 57907, 60343, 57907, 580638, 580639, 57907, 57907, 1036851, 57907, 60453, 578121,
  /* 29785 */ 578121, 578121, 737865, 3144, 580681, 60490, 580683, 356, 357, 0, 0, 2846, 0, 49152, 0, 418, 418, 357,
  /* 29803 */ 510, 357, 357, 57924, 57924, 57924, 578139, 1, 12290, 3, 578095, 578095, 578095, 578095, 57924, 578095,
  /* 29819 */ 578095, 57924, 578139, 578095, 578095, 57924, 578095, 578139, 578139, 578139, 578139, 363, 0, 701, 0, 689,
  /* 29835 */ 690, 0, 337, 0, 0, 338, 58259, 57907, 57907, 57907, 1053235, 1055, 0, 0, 0, 933888, 578922, 578121,
  /* 29853 */ 578121, 578121, 756559, 578931, 578121, 578121, 578121, 799305, 578931, 578771, 58658, 578121, 578955,
  /* 29866 */ 578121, 578121, 578959, 578121, 1486, 0, 0, 0, 937984, 1492, 0, 0, 0, 958464, 1498, 0, 0, 0, 974848, 1504,
  /* 29886 */ 0, 0, 0, 987815, 0, 1522, 0, 0, 2854, 0, 0, 1529, 1530, 0, 693, 0, 0, 392, 393, 1537, 0, 0, 0, 1032192,
  /* 29910 */ 1588, 0, 0, 0, 1073152, 579208, 578077, 578077, 578077, 580570, 578077, 579215, 578077, 578077, 774685,
  /* 29925 */ 578077, 579225, 578077, 578077, 578077, 676381, 59097, 57907, 57907, 57907, 1061427, 57907, 59124, 57907,
  /* 29939 */ 57907, 1057331, 57907, 579360, 578121, 578121, 578121, 811593, 578121, 579367, 578121, 578121, 1049161, 0,
  /* 29953 */ 579377, 578121, 578121, 578121, 815689, 1905, 0, 0, 0, 1077248, 0, 1963, 0, 0, 2917, 0, 1999, 578077,
  /* 29971 */ 578077, 578077, 680477, 578077, 579552, 578077, 578077, 788453, 578077, 2123, 578121, 578121, 578121,
  /* 29984 */ 885321, 578121, 579676, 578121, 578121, 1065545, 578121, 0, 2465, 0, 0, 2918, 0, 578077, 580044, 578077,
  /* 30000 */ 580045, 57907, 59884, 57907, 57907, 1065523, 57907, 57907, 59891, 57907, 57907, 1069619, 57907, 578121,
  /* 30014 */ 580114, 578121, 578121, 1086025, 578121, 578121, 580121, 578121, 578121, 1102409, 578121, 578077, 580403,
  /* 30027 */ 578077, 578077, 799261, 578077, 578121, 580433, 578121, 578121, 1111869, 578121, 578077, 580613, 578077,
  /* 30040 */ 57907, 59066, 57907, 57907, 58660, 57907, 57907, 60428, 57907, 578121, 0, 578077, 578077, 659997, 578121,
  /* 30055 */ 580627, 578121, 578077, 578555, 0, 0, 2443, 0, 0, 40960, 368, 0, 704, 0, 0, 1500, 0, 57925, 578096,
  /* 30074 */ 578096, 57925, 578140, 578096, 578140, 57925, 57925, 578140, 578096, 57925, 578096, 578140, 578140,
  /* 30087 */ 578140, 578140, 578096, 0, 765952, 0, 0, 2920, 578077, 766493, 578077, 578077, 578077, 737821, 578121,
  /* 30102 */ 766537, 578121, 578121, 1122889, 578121, 578970, 578121, 578121, 578121, 901705, 860160, 0, 0, 0, 1110016,
  /* 30117 */ 860701, 578077, 578077, 578077, 756529, 860745, 578121, 578121, 578121, 918089, 0, 2459, 0, 0, 2970, 2771,
  /* 30133 */ 362, 0, 0, 363, 297, 40960, 0, 426, 426, 0, 457, 0, 705, 0, 0, 800, 578077, 511, 512, 505, 505, 505, 505,
  /* 30156 */ 525, 525, 525, 525, 457, 457, 457, 457, 525, 525, 525, 578097, 578097, 578097, 57926, 57926, 57926,
  /* 30173 */ 578141, 578097, 57926, 578141, 578097, 578097, 578141, 578141, 578097, 57926, 578141, 578097, 578141,
  /* 30186 */ 578141, 578141, 578141, 578161, 57974, 578161, 578141, 578172, 1, 1167, 0, 0, 0, 1163264, 0, 0, 0, 0,
  /* 30204 */ 1949, 0, 0, 3026, 0, 579536, 578077, 578077, 578077, 811549, 579660, 578121, 578121, 578121, 1010449,
  /* 30219 */ 578077, 579857, 578077, 578077, 840221, 578077, 57907, 59693, 57907, 57907, 1077811, 57907, 59711, 57907,
  /* 30233 */ 57907, 57907, 1122867, 578121, 579951, 578121, 578121, 1143369, 578121, 53538, 61731, 0, 0, 3070, 578077,
  /* 30248 */ 578142, 578098, 578098, 578098, 57927, 578098, 578142, 578142, 578142, 578142, 578142, 578098, 57927,
  /* 30261 */ 578142, 578098, 57927, 578098, 57927, 57927, 57927, 578142, 578142, 1, 12290, 733, 0, 0, 0, 3094, 0,
  /* 30278 */ 58255, 57907, 57907, 57907, 1135155, 1092, 0, 0, 0, 3119, 0, 1143, 0, 0, 0, 3133, 578077, 578077, 578820,
  /* 30297 */ 578077, 578077, 877085, 578077, 57907, 918067, 57907, 57907, 1106483, 57907, 58707, 57907, 57907, 57907,
  /* 30311 */ 1155635, 876544, 0, 0, 0, 28672, 0, 877107, 57907, 57907, 57907, 1118771, 57907, 0, 471040, 0, 0, 0,
  /* 30329 */ 471581, 578077, 578077, 578420, 578077, 578077, 893469, 578077, 0, 151552, 0, 0, 40960, 417, 578077,
  /* 30344 */ 1102365, 578077, 578077, 905757, 578077, 1102387, 57907, 57907, 57907, 1147443, 1151539, 1515, 0, 0, 0,
  /* 30359 */ 40960, 418, 578077, 726646, 578077, 578077, 918045, 578077, 979485, 578077, 578077, 578077, 815645,
  /* 30372 */ 726720, 57907, 57907, 57907, 59067, 59068, 57907, 58676, 57907, 57907, 60232, 57907, 578121, 726798,
  /* 30386 */ 578121, 578121, 578961, 578121, 578121, 579701, 578121, 979529, 578121, 578121, 578121, 1024585, 643072,
  /* 30399 */ 0, 0, 0, 73728, 0, 807453, 578077, 578077, 578077, 885277, 788512, 57907, 807475, 57907, 59070, 57907,
  /* 30415 */ 57907, 578121, 729673, 807497, 578121, 578121, 578121, 1040969, 942080, 0, 0, 0, 94208, 298, 942621,
  /* 30430 */ 578077, 578077, 578077, 901661, 578077, 1159709, 57907, 57907, 59086, 57907, 57907, 578144, 578147,
  /* 30443 */ 1159731, 0, 0, 0, 98304, 0, 301, 302, 942665, 578121, 578121, 578121, 1053257, 578121, 1159753, 578121,
  /* 30459 */ 578121, 578973, 578121, 578121, 580135, 578121, 495616, 0, 0, 0, 126976, 0, 0, 2625, 0, 0, 143360, 0,
  /* 30477 */ 57907, 60044, 57907, 57907, 59087, 57907, 57907, 59442, 59443, 888832, 0, 0, 0, 184320, 0, 889373, 578077,
  /* 30494 */ 578077, 578077, 1036829, 0, 1163264, 0, 363, 0, 303, 0, 1163879, 1163879, 1163879, 1163879, 1163879, 0,
  /* 30510 */ 1163264, 1163264, 0, 0, 1163264, 1163264, 1163879, 1163264, 1163879, 1163879, 1, 1163879, 1163879,
  /* 30523 */ 1163264, 1163264, 1163678, 1163678, 0, 0, 0, 192512, 0, 0, 557056, 0, 0, 196608, 0, 458, 458, 557531, 458,
  /* 30542 */ 458, 458, 458, 557582, 557531, 0, 0, 0, 208896, 0, 0, 557582, 557582, 557582, 557582, 557531, 557582, 1,
  /* 30560 */ 12290, 569344, 363, 0, 0, 241664, 245760, 569344, 0, 0, 569344, 0, 569344, 569344, 0, 569344, 0, 569344,
  /* 30578 */ 569344, 569344, 569344, 0, 569344, 1, 12290, 3, 0, 565248, 0, 0, 262144, 0, 0, 372736, 372736, 0, 372736,
  /* 30597 */ 372736, 372736, 0, 372736, 372736, 372736, 372736
];

XQueryParser_ts.EXPECTED =
[
  /*    0 */ 888, 894, 895, 892, 906, 899, 903, 910, 914, 918, 956, 953, 926, 2415, 956, 956, 956, 1004, 925, 2251, 930,
  /*   21 */ 931, 956, 935, 956, 956, 956, 981, 1082, 942, 956, 1257, 950, 956, 956, 2385, 961, 956, 956, 956, 1165,
  /*   41 */ 1082, 1082, 956, 956, 1266, 967, 956, 956, 974, 956, 956, 956, 1882, 1082, 1083, 956, 956, 1235, 980, 956,
  /*   61 */ 985, 956, 956, 1005, 1082, 990, 956, 2412, 956, 1841, 956, 2423, 1082, 995, 938, 956, 937, 956, 1081, 943,
  /*   81 */ 938, 1839, 956, 1081, 1018, 1001, 1004, 1009, 1003, 1013, 1881, 944, 2424, 1880, 1017, 1023, 1030, 1034,
  /*   99 */ 1074, 1163, 956, 1042, 2565, 1046, 1052, 2029, 1056, 1293, 955, 1353, 1066, 1070, 2050, 1078, 956, 956,
  /*  117 */ 956, 996, 1087, 1115, 1105, 1160, 2084, 1109, 956, 956, 956, 956, 956, 956, 1668, 1114, 2519, 1026, 1446,
  /*  136 */ 1119, 956, 956, 956, 956, 956, 956, 956, 956, 997, 1125, 1129, 1139, 1277, 956, 956, 956, 956, 956, 956,
  /*  156 */ 956, 1887, 1145, 1372, 2292, 956, 956, 956, 956, 956, 956, 1666, 1148, 1152, 956, 956, 956, 956, 2220,
  /*  175 */ 1716, 1446, 956, 956, 956, 2066, 1157, 956, 956, 1865, 1169, 956, 1250, 956, 2139, 956, 2451, 956, 1175,
  /*  194 */ 1180, 2546, 2199, 2365, 956, 1186, 1190, 1194, 1198, 1202, 1206, 1210, 1214, 2453, 1219, 1225, 1229, 2207,
  /*  212 */ 2771, 1233, 956, 956, 956, 956, 1286, 1346, 1256, 1239, 1244, 956, 956, 956, 956, 956, 956, 956, 956, 1248,
  /*  232 */ 1254, 1096, 2733, 956, 956, 956, 956, 956, 956, 956, 956, 956, 1575, 1261, 2350, 1240, 1265, 956, 956, 956,
  /*  252 */ 956, 956, 956, 956, 1019, 1270, 1274, 1858, 956, 956, 956, 956, 956, 956, 1678, 1283, 1872, 956, 956, 956,
  /*  272 */ 956, 2235, 1290, 1297, 956, 956, 956, 1570, 1302, 956, 956, 1505, 1309, 956, 1099, 956, 2666, 956, 1314,
  /*  291 */ 1141, 956, 1319, 1279, 956, 1323, 1787, 1327, 1331, 1900, 1336, 1340, 1344, 1350, 2166, 2485, 956, 2516,
  /*  309 */ 1361, 1366, 1379, 1383, 956, 2324, 1394, 1551, 2487, 2505, 2188, 1595, 1401, 956, 956, 956, 956, 956, 2430,
  /*  328 */ 1463, 2169, 956, 2472, 1362, 1408, 956, 956, 956, 956, 956, 956, 956, 1741, 956, 2462, 1305, 1860, 1369,
  /*  347 */ 956, 956, 956, 956, 956, 956, 956, 1418, 1589, 2159, 1428, 1432, 956, 956, 956, 956, 956, 1437, 1443, 1451,
  /*  367 */ 956, 956, 956, 956, 1632, 1455, 1460, 956, 956, 956, 1632, 2727, 1468, 956, 1456, 2788, 956, 1411, 956,
  /*  386 */ 956, 956, 956, 956, 956, 956, 956, 956, 2755, 1473, 1469, 1480, 1564, 1484, 1488, 1492, 1496, 1500, 956,
  /*  405 */ 1093, 1298, 1504, 1955, 1509, 1513, 1517, 1809, 2629, 1521, 991, 1528, 1533, 1475, 1539, 1543, 1389, 1549,
  /*  423 */ 956, 1555, 2643, 1561, 1568, 1848, 1464, 1315, 1574, 2124, 1389, 1390, 1651, 956, 2640, 2643, 2644, 1579,
  /*  441 */ 1587, 2233, 1593, 1476, 1386, 1389, 2127, 956, 956, 1599, 2643, 1601, 1605, 1612, 2479, 1618, 1389, 1648,
  /*  459 */ 956, 1893, 2643, 1557, 1622, 2471, 2464, 1389, 1636, 1924, 2643, 1641, 1135, 1645, 1663, 1735, 2643, 1656,
  /*  477 */ 1768, 1545, 2626, 1675, 1683, 2008, 1660, 1672, 1682, 1687, 1691, 1697, 1695, 1701, 1705, 1709, 986, 1713,
  /*  495 */ 956, 1720, 2242, 2304, 2307, 1727, 1730, 2096, 1734, 2133, 1739, 1745, 1749, 1755, 1759, 1763, 1628, 1772,
  /*  513 */ 1784, 2297, 2719, 1775, 1793, 1797, 1801, 945, 1807, 962, 1813, 2102, 957, 1819, 956, 1825, 1535, 1829,
  /*  531 */ 1833, 956, 963, 1837, 956, 1833, 956, 1424, 986, 1846, 2256, 2606, 1852, 1356, 956, 2417, 1864, 956, 1357,
  /*  550 */ 956, 1766, 1869, 2761, 2608, 2280, 1879, 1062, 956, 1911, 956, 1608, 2760, 2379, 2745, 2153, 2754, 2752,
  /*  568 */ 986, 1886, 1780, 1891, 1897, 2395, 1842, 1904, 1908, 1915, 1922, 1928, 1932, 1936, 1940, 1944, 1948, 1952,
  /*  586 */ 1959, 1963, 1967, 1971, 1975, 1047, 956, 1979, 2108, 1986, 1990, 1994, 1998, 2002, 2006, 976, 956, 2012,
  /*  604 */ 2016, 2020, 2033, 2037, 2041, 2048, 2054, 956, 2064, 2248, 1918, 2070, 2075, 2082, 2088, 2400, 2094, 2405,
  /*  622 */ 2100, 2106, 956, 2112, 2117, 2121, 1221, 2131, 2713, 956, 2113, 2137, 956, 2713, 956, 2143, 956, 2214,
  /*  640 */ 2148, 2071, 2152, 2330, 956, 2144, 2157, 956, 2331, 2776, 956, 2163, 2173, 2179, 946, 2059, 2674, 956,
  /*  658 */ 2700, 2494, 2706, 1134, 2185, 2023, 1433, 2028, 2026, 2192, 2196, 2205, 2027, 2057, 1625, 2211, 1375, 2218,
  /*  676 */ 2224, 2230, 1332, 1778, 1304, 2239, 2255, 2260, 1101, 2266, 2264, 2270, 2274, 2278, 956, 956, 2284, 2296,
  /*  694 */ 2301, 2782, 2311, 2315, 2319, 2323, 1803, 2364, 2328, 2078, 2335, 2339, 2343, 2347, 2354, 2358, 956, 2362,
  /*  712 */ 1421, 1751, 2369, 2373, 956, 2377, 1447, 2383, 1153, 2389, 2393, 1529, 2399, 2404, 2444, 2409, 956, 1397,
  /*  730 */ 2101, 956, 2421, 956, 1397, 2044, 2428, 2090, 2434, 956, 2438, 956, 1981, 2101, 1637, 2442, 956, 1982,
  /*  748 */ 2245, 921, 2448, 2798, 956, 2175, 2443, 2226, 956, 1404, 2460, 2287, 2060, 920, 2457, 2489, 1814, 2468,
  /*  766 */ 2476, 1815, 2488, 2493, 2498, 1855, 1132, 2503, 2509, 2499, 1439, 2513, 2523, 2527, 1723, 2531, 2535, 2539,
  /*  784 */ 2543, 2550, 2554, 2558, 2562, 956, 956, 2569, 2573, 2577, 2581, 2585, 2589, 2593, 956, 1821, 2600, 2604,
  /*  802 */ 2694, 2612, 2616, 2623, 2633, 1414, 2637, 956, 2648, 2655, 2290, 2659, 2181, 956, 2663, 2683, 2672, 2738,
  /*  820 */ 2678, 2682, 1652, 2687, 2691, 1121, 2698, 956, 1614, 2704, 956, 2710, 956, 1614, 2717, 956, 1048, 2651,
  /*  838 */ 2723, 2731, 956, 1874, 2737, 1310, 2742, 956, 1875, 956, 1171, 2749, 2725, 956, 2668, 2759, 1524, 956,
  /*  856 */ 1789, 956, 2765, 1072, 956, 2769, 2481, 956, 2483, 970, 1630, 1176, 1110, 2775, 2780, 2786, 1215, 1182,
  /*  874 */ 2201, 1583, 2619, 2596, 1582, 1059, 1038, 1090, 2792, 1037, 2796, 956, 956, 2802, 4418, 4823, 2807, 2810,
  /*  892 */ 2831, 2816, 2824, 2824, 2824, 2824, 2804, 2818, 2837, 2825, 2841, 2842, 2851, 2846, 2824, 2822, 2829, 2812,
  /*  910 */ 2849, 2853, 2857, 2861, 2865, 2868, 2833, 2872, 3083, 2880, 4883, 3089, 3089, 3089, 4974, 2947, 3089, 3089,
  /*  928 */ 3089, 2896, 3613, 3089, 3089, 3089, 2917, 3321, 2929, 2969, 3089, 3089, 3089, 2984, 2946, 2946, 3175, 3089,
  /*  946 */ 3089, 3089, 2922, 4691, 3173, 3609, 3612, 3089, 2887, 3088, 3089, 3089, 3089, 3089, 2892, 3789, 3089, 3089,
  /*  964 */ 3089, 2923, 4246, 3176, 2960, 2962, 3089, 2890, 3297, 5001, 4959, 2968, 3089, 3089, 2935, 4487, 2963, 3089,
  /*  982 */ 3089, 3089, 2940, 2971, 3089, 3089, 3089, 2955, 2948, 3089, 3089, 3089, 2956, 3176, 3089, 3089, 3089, 2972,
  /* 1000 */ 3412, 2977, 3089, 2970, 3089, 3089, 3174, 2946, 2946, 3176, 3089, 3089, 2950, 2946, 2950, 3089, 3787, 2946,
  /* 1018 */ 2949, 3089, 3089, 3089, 3035, 4275, 3176, 3089, 4063, 3089, 4550, 3016, 2948, 3089, 4276, 4063, 4262, 2982,
  /* 1036 */ 4066, 2952, 3089, 2951, 3089, 3091, 3089, 4517, 2995, 3783, 3022, 4129, 3089, 3089, 3089, 3043, 3026, 3030,
  /* 1054 */ 3034, 3040, 3049, 3052, 3089, 2954, 3090, 2951, 3089, 2923, 4296, 4305, 3867, 3170, 3089, 4144, 3077, 4129,
  /* 1072 */ 3089, 3089, 2954, 3089, 3089, 3411, 3397, 4052, 4301, 3089, 2946, 2946, 2946, 2946, 2950, 3412, 3089, 3087,
  /* 1090 */ 3089, 2952, 5335, 3089, 2956, 3851, 3089, 2964, 4564, 3089, 2966, 3867, 3089, 3089, 3331, 2996, 3784, 3089,
  /* 1108 */ 4066, 3703, 3089, 3089, 3089, 3090, 3221, 3089, 3089, 3089, 3096, 5168, 4549, 3089, 3089, 2954, 5247, 3100,
  /* 1126 */ 3089, 3089, 3367, 3073, 3089, 4274, 3089, 3007, 3089, 3089, 4644, 3089, 3089, 3107, 4644, 3089, 3089, 2965,
  /* 1144 */ 3089, 4668, 3089, 3089, 3111, 4883, 3786, 2899, 4645, 3089, 3089, 3089, 3131, 3141, 3158, 4129, 3089, 3014,
  /* 1162 */ 4644, 3089, 2988, 3089, 3089, 2945, 2946, 3165, 3344, 3089, 3089, 3089, 5296, 3168, 3089, 3089, 3089, 3145,
  /* 1180 */ 3089, 4890, 3089, 3089, 3089, 5341, 2922, 3761, 3185, 4833, 3189, 3196, 3089, 3615, 4934, 3211, 2883, 2991,
  /* 1198 */ 3218, 3225, 3229, 3236, 3240, 3244, 3246, 3250, 3254, 3257, 3274, 3259, 4078, 3263, 3267, 3271, 3278, 3089,
  /* 1216 */ 3089, 3089, 3160, 4067, 3290, 3881, 3089, 3232, 4626, 3415, 4937, 4063, 4062, 4407, 3089, 3089, 3296, 3301,
  /* 1234 */ 2930, 3089, 3089, 3172, 3177, 4562, 4566, 3089, 3089, 4884, 3089, 4884, 3335, 2930, 3128, 4830, 3089, 3089,
  /* 1252 */ 3181, 3089, 3416, 4938, 4173, 3089, 3089, 3089, 3169, 4511, 3089, 3089, 4898, 3114, 3089, 3089, 3089, 3171,
  /* 1270 */ 5022, 3089, 4897, 2921, 3782, 4524, 3390, 3089, 3018, 3089, 3089, 2966, 3089, 3362, 3089, 4685, 3089, 3035,
  /* 1288 */ 4067, 4832, 4059, 2964, 3372, 3089, 3056, 3129, 4544, 3784, 3089, 3089, 3089, 3206, 3389, 3089, 3867, 3089,
  /* 1306 */ 3089, 3089, 4646, 3865, 3089, 3089, 3089, 3213, 2933, 3089, 3089, 3089, 3318, 2967, 3089, 3089, 2932, 3394,
  /* 1324 */ 2919, 4439, 5001, 3401, 3089, 2919, 3615, 3408, 3089, 3089, 3089, 3330, 3435, 3439, 3443, 3447, 3450, 3452,
  /* 1342 */ 3456, 3460, 3463, 3467, 3089, 3089, 3309, 3327, 3471, 3474, 3478, 3089, 3071, 4881, 3089, 2925, 4281, 4292,
  /* 1360 */ 3089, 3490, 3202, 3089, 3089, 3427, 3712, 3429, 3089, 4538, 3561, 4503, 4883, 3866, 3481, 4126, 3089, 4848,
  /* 1378 */ 3343, 3497, 3507, 3512, 3427, 3516, 3520, 4906, 3089, 3080, 3855, 3890, 3890, 3890, 3890, 3950, 3530, 3534,
  /* 1396 */ 3538, 3089, 3089, 4942, 4946, 4489, 4377, 4883, 3089, 3089, 4987, 4947, 3561, 3507, 3515, 3089, 3089, 5076,
  /* 1414 */ 3089, 3089, 5185, 4191, 4537, 3572, 3574, 3089, 3089, 5200, 3089, 3089, 5262, 4254, 3579, 3089, 3427, 3595,
  /* 1432 */ 2996, 3089, 3089, 3089, 3541, 3192, 3602, 3089, 3089, 3319, 4550, 3378, 3089, 3089, 4646, 3089, 3089, 3089,
  /* 1450 */ 3130, 4699, 3205, 3426, 3586, 4621, 3089, 3089, 3089, 3601, 3202, 3089, 3592, 3575, 3089, 3089, 3089, 3404,
  /* 1468 */ 2902, 3089, 3089, 3089, 3617, 5002, 4844, 3089, 3089, 3320, 3377, 3089, 3606, 3621, 4904, 3625, 3640, 3636,
  /* 1486 */ 3719, 4539, 3644, 3648, 3652, 3656, 3660, 3664, 3668, 3672, 3675, 3679, 3683, 3687, 3691, 3695, 4063, 3700,
  /* 1504 */ 3716, 3089, 3089, 3089, 3706, 5177, 3089, 4084, 3788, 2969, 3726, 2935, 3739, 3747, 3754, 3890, 3891, 3770,
  /* 1522 */ 5021, 3777, 3089, 3089, 5310, 5318, 3817, 3089, 3089, 3089, 3750, 3089, 4432, 3089, 3089, 3340, 4226, 4505,
  /* 1540 */ 3089, 2969, 4504, 3869, 3735, 3890, 3890, 3858, 3089, 3949, 3793, 3089, 3089, 3343, 3089, 3799, 3875, 3876,
  /* 1558 */ 3876, 3823, 3895, 3803, 3834, 3840, 3089, 3089, 5330, 3633, 3810, 3778, 3089, 3089, 3368, 3383, 3375, 3089,
  /* 1576 */ 3089, 3089, 3760, 3832, 3838, 3772, 3089, 3089, 5335, 3089, 3089, 3811, 3844, 3089, 3089, 3379, 3089, 3089,
  /* 1594 */ 4643, 3089, 3089, 3428, 3551, 5219, 3873, 3876, 3876, 3828, 3833, 3839, 3773, 3845, 3089, 3089, 5343, 4072,
  /* 1612 */ 3089, 4749, 3089, 3089, 3486, 5266, 3880, 3089, 3566, 3887, 3998, 3089, 4208, 3089, 3090, 3543, 3089, 3118,
  /* 1630 */ 3089, 3091, 3089, 3089, 3722, 4883, 3910, 3089, 3089, 3089, 3926, 3914, 3924, 3089, 4270, 3931, 4185, 3948,
  /* 1648 */ 3890, 3890, 3908, 3378, 3089, 3089, 3089, 3781, 3914, 3924, 2955, 2934, 3961, 3089, 5336, 3890, 3890, 3909,
  /* 1666 */ 3089, 3126, 3089, 3089, 2973, 3413, 3756, 3089, 4156, 3876, 3940, 3997, 3089, 3128, 3089, 4897, 3957, 3089,
  /* 1684 */ 4119, 3890, 3756, 3972, 3089, 3980, 3876, 3986, 5337, 3890, 3758, 3890, 3972, 4155, 3876, 3957, 5336, 3985,
  /* 1702 */ 4120, 3973, 3981, 5337, 3972, 3991, 3567, 5220, 3995, 3943, 3943, 4003, 4007, 4206, 3089, 3135, 3089, 3483,
  /* 1720 */ 3089, 4706, 4013, 3089, 3153, 4550, 5032, 4042, 4044, 4046, 4479, 4479, 4479, 4050, 4076, 3089, 3089, 3089,
  /* 1738 */ 3937, 3089, 5175, 3089, 3089, 3571, 3588, 4088, 3629, 3090, 4323, 4095, 5243, 3089, 3089, 3615, 3089, 4102,
  /* 1756 */ 4108, 4116, 4124, 4135, 4308, 4149, 3116, 3120, 3089, 4160, 3089, 3207, 3089, 3089, 3880, 3947, 4167, 4171,
  /* 1774 */ 4177, 3089, 3315, 3628, 3089, 3329, 3089, 3090, 3341, 3129, 4207, 4004, 4008, 3089, 3342, 3089, 3089, 3282,
  /* 1792 */ 3147, 3338, 4754, 4181, 3863, 5242, 4189, 4195, 4582, 3486, 4201, 3089, 3089, 3749, 4808, 2875, 4205, 3089,
  /* 1810 */ 3089, 3766, 3876, 2876, 4206, 3089, 3089, 3089, 3966, 4005, 4009, 3089, 3089, 3779, 4730, 3089, 5176, 3089,
  /* 1828 */ 5000, 4184, 5242, 4232, 4580, 3485, 4498, 4242, 3556, 4250, 4206, 3089, 3089, 3788, 3089, 3089, 3089, 2964,
  /* 1846 */ 4259, 4267, 3089, 3089, 3815, 3614, 4804, 3128, 5242, 3089, 3347, 5009, 3089, 3355, 3089, 3089, 3204, 3089,
  /* 1864 */ 4291, 3089, 3089, 3089, 3976, 3597, 4006, 4883, 3089, 3366, 3089, 3089, 3214, 5287, 5292, 4314, 3089, 3089,
  /* 1882 */ 3089, 4063, 2946, 2946, 4343, 3089, 3089, 3089, 4145, 4331, 4352, 3089, 3089, 3898, 3821, 3089, 4358, 4353,
  /* 1900 */ 3089, 3420, 3933, 3424, 3304, 3089, 3089, 5034, 5189, 3525, 4363, 3089, 3485, 4334, 4312, 3089, 4371, 4375,
  /* 1918 */ 3089, 3508, 3089, 3500, 3526, 4364, 3089, 3089, 3902, 3876, 2931, 3305, 3089, 4574, 2913, 3089, 2912, 4366,
  /* 1936 */ 2911, 4365, 3089, 4381, 4920, 4658, 3320, 4388, 3089, 4659, 3089, 4394, 3319, 4389, 2964, 4660, 5138, 4390,
  /* 1954 */ 3384, 3318, 3312, 3780, 4142, 4630, 5154, 4661, 4629, 3089, 4400, 3385, 2964, 4299, 3385, 3321, 3430, 4970,
  /* 1972 */ 3431, 3089, 4405, 4644, 4126, 4411, 4396, 4015, 4620, 3089, 3089, 3927, 4946, 3425, 4415, 4422, 3089, 3427,
  /* 1990 */ 3122, 4430, 4427, 3503, 4436, 4443, 4451, 4450, 4446, 4455, 4459, 4460, 4464, 4468, 4470, 4474, 4478, 4483,
  /* 2008 */ 3089, 3089, 3955, 3876, 4493, 4502, 3089, 3426, 4509, 3089, 4515, 4593, 3089, 4847, 3868, 3089, 3540, 3544,
  /* 2026 */ 3089, 3541, 3545, 3089, 3089, 3089, 4577, 4521, 3089, 4528, 3795, 3415, 4532, 3999, 4536, 4543, 4548, 3065,
  /* 2044 */ 3425, 3089, 3089, 4957, 3089, 4559, 3089, 3089, 3974, 3089, 3067, 3089, 3968, 3089, 3542, 3546, 3089, 3089,
  /* 2062 */ 3089, 4552, 3089, 4571, 3089, 3089, 3975, 3089, 4592, 3089, 3089, 3883, 4130, 3089, 5040, 3729, 3089, 3616,
  /* 2080 */ 3089, 3785, 4815, 4599, 3089, 3089, 3975, 4719, 4603, 4636, 3089, 3089, 3987, 4963, 4607, 4612, 3089, 3089,
  /* 2098 */ 4056, 4071, 4608, 3425, 3089, 3089, 3089, 4212, 4846, 3883, 3089, 3089, 4065, 3036, 4619, 3089, 3089, 3089,
  /* 2116 */ 4215, 4112, 3089, 3089, 3427, 3089, 4707, 4667, 3089, 3734, 3889, 3890, 3890, 3890, 3951, 3089, 4816, 3089,
  /* 2134 */ 3089, 4082, 3089, 4651, 4655, 3089, 3089, 4091, 3089, 5236, 3089, 3089, 3089, 4317, 3089, 4537, 3089, 4665,
  /* 2152 */ 4626, 3089, 3089, 3089, 4333, 4672, 3231, 3089, 3089, 4128, 3089, 2919, 3089, 4110, 3089, 3741, 3089, 5188,
  /* 2170 */ 3089, 3089, 3555, 3089, 4401, 3089, 3089, 4131, 4989, 3883, 4367, 3344, 3089, 3062, 3089, 4846, 3089, 4705,
  /* 2188 */ 3089, 3760, 3089, 3204, 3696, 3089, 3089, 2920, 4711, 3089, 4127, 3089, 3846, 3089, 3089, 3161, 3089, 3882,
  /* 2206 */ 3358, 3089, 3089, 4143, 3089, 3696, 3089, 3089, 4698, 3089, 4063, 4713, 3089, 5208, 3089, 3089, 4144, 3089,
  /* 2224 */ 5253, 4717, 3089, 3089, 4218, 4222, 5209, 3089, 4723, 3089, 3850, 3089, 3089, 3413, 3414, 5259, 3089, 3330,
  /* 2242 */ 3089, 4019, 3786, 3089, 3169, 4066, 3089, 3169, 4588, 3089, 3171, 2941, 4584, 5260, 3089, 3089, 3089, 4701,
  /* 2260 */ 3331, 3089, 5261, 3090, 3089, 5260, 5258, 3089, 3330, 3089, 5260, 3089, 3785, 3866, 3786, 3784, 3785, 3786,
  /* 2278 */ 4728, 3866, 3089, 3089, 4285, 4289, 4736, 4964, 3089, 3121, 4346, 3089, 3742, 3523, 3089, 3089, 4647, 3089,
  /* 2296 */ 3059, 3089, 3089, 3089, 4724, 4740, 4744, 4753, 3089, 4023, 4027, 4031, 4031, 4035, 4038, 4769, 4765, 4773,
  /* 2314 */ 4777, 4780, 4782, 4786, 4788, 4790, 4800, 4797, 4794, 4803, 3089, 3089, 3089, 4834, 3089, 4814, 3089, 3089,
  /* 2332 */ 4318, 4673, 3089, 4820, 4827, 3089, 4838, 4852, 4856, 4841, 4862, 3861, 3920, 4846, 3137, 3089, 5016, 5020,
  /* 2350 */ 3089, 4062, 3089, 4684, 4866, 3089, 2997, 5018, 3199, 4870, 4875, 4163, 3748, 4879, 4642, 3089, 3089, 3089,
  /* 2368 */ 4858, 3089, 4871, 5039, 4888, 5321, 4894, 3059, 4902, 4384, 4953, 3089, 3089, 4322, 4329, 4913, 4918, 3089,
  /* 2386 */ 3089, 4348, 2929, 4914, 3425, 3089, 4263, 4700, 4732, 3089, 3089, 4359, 4354, 4810, 3089, 3089, 3089, 4908,
  /* 2404 */ 3547, 3089, 3089, 3089, 4909, 4931, 3089, 3709, 3089, 4064, 2978, 3089, 2909, 3089, 3089, 2924, 4280, 4951,
  /* 2422 */ 4221, 3089, 3089, 4567, 2946, 2949, 4732, 4833, 3089, 3089, 4595, 3573, 3378, 3089, 3089, 3743, 4871, 4927,
  /* 2440 */ 3089, 3709, 4945, 4968, 3089, 3089, 3089, 4925, 4642, 3089, 3742, 3089, 4090, 3089, 3089, 3089, 5328, 3089,
  /* 2458 */ 4993, 5009, 3089, 4104, 3089, 3089, 4622, 3089, 5145, 3890, 3345, 4994, 4206, 3089, 4126, 3089, 3089, 3761,
  /* 2476 */ 3089, 4594, 4998, 3089, 4129, 3089, 3089, 3493, 5314, 3089, 3089, 3557, 3089, 3089, 3089, 3345, 4994, 5007,
  /* 2494 */ 3089, 3089, 3089, 4981, 3346, 5008, 3089, 3089, 5027, 4550, 5013, 3089, 3089, 4644, 4555, 5026, 4845, 3089,
  /* 2512 */ 5248, 4554, 3089, 3153, 3089, 4129, 4125, 3089, 3072, 4882, 3864, 3152, 3089, 3151, 4206, 4921, 3964, 3089,
  /* 2530 */ 5031, 3319, 4553, 3150, 3154, 4097, 5033, 3151, 4206, 4552, 3150, 4554, 4098, 3089, 5038, 4551, 4550, 3778,
  /* 2548 */ 3089, 4889, 3564, 4098, 4550, 3564, 5056, 4236, 5057, 4234, 5044, 5045, 5049, 4238, 5053, 5061, 5061, 3089,
  /* 2566 */ 4141, 3001, 3011, 2905, 4423, 4504, 3045, 4503, 4983, 3617, 5065, 3004, 5069, 4747, 5073, 5083, 5087, 5091,
  /* 2584 */ 5095, 5099, 5103, 5107, 5111, 5115, 5117, 5121, 5129, 5123, 5133, 5125, 3089, 4152, 3089, 5335, 3581, 4614,
  /* 2602 */ 3089, 3322, 5301, 3762, 3089, 5002, 3089, 3338, 2936, 3413, 5137, 3089, 5142, 5149, 3089, 5153, 5158, 3089,
  /* 2620 */ 4154, 3089, 4153, 5162, 5166, 5172, 3089, 4155, 3875, 3876, 3905, 3806, 3917, 3103, 5187, 3089, 5181, 3102,
  /* 2638 */ 5193, 5194, 3089, 4197, 3821, 3876, 3876, 3876, 3876, 3827, 3779, 5174, 3582, 5198, 5003, 5206, 3413, 3089,
  /* 2656 */ 5204, 3092, 4228, 2952, 4325, 3367, 3778, 4496, 5213, 5217, 3089, 4272, 3089, 3089, 3280, 3284, 5224, 5229,
  /* 2674 */ 3089, 3089, 4677, 4681, 5225, 5230, 5234, 3732, 3740, 3089, 3089, 3089, 5078, 3292, 4615, 3089, 3323, 5302,
  /* 2692 */ 5241, 5000, 3524, 3089, 3090, 4324, 5252, 5257, 3089, 3089, 4689, 4693, 5270, 3205, 3089, 3089, 4697, 4110,
  /* 2710 */ 5274, 5278, 5282, 3089, 4316, 4634, 4640, 5270, 3759, 3089, 3089, 4699, 3089, 3522, 3089, 3089, 2952, 3089,
  /* 2728 */ 3089, 4700, 3089, 3089, 5252, 3089, 3089, 4706, 3351, 5292, 3089, 3089, 3089, 5079, 5286, 5291, 3205, 3089,
  /* 2746 */ 4332, 4338, 4307, 3089, 5300, 5306, 3089, 4333, 4339, 3089, 3089, 3089, 4138, 3149, 3089, 3089, 3089, 5174,
  /* 2764 */ 3089, 5296, 3089, 5325, 3742, 3492, 5313, 3089, 3089, 4706, 4255, 3285, 3089, 3089, 3089, 5237, 3143, 3286,
  /* 2782 */ 3089, 3089, 4758, 4762, 3089, 5334, 3089, 3089, 4833, 4143, 3091, 3089, 2953, 3090, 2953, 2951, 3089, 3089,
  /* 2800 */ 4871, 4978, 3089, 5347, 5455, 5387, 5408, 5402, 5389, 5438, 5402, 5391, 5402, 5402, 5399, 5402, 5396, 5392,
  /* 2818 */ 5402, 5402, 5402, 5393, 5986, 5437, 5402, 5402, 5402, 5402, 5392, 5395, 5395, 5402, 5402, 5402, 5404, 5402,
  /* 2836 */ 5403, 5398, 5402, 5402, 5401, 5437, 5437, 5408, 5408, 5407, 5408, 5438, 5437, 5402, 5404, 5408, 5408, 5408,
  /* 2854 */ 5408, 5405, 5438, 5431, 5430, 5407, 5409, 5985, 5433, 5434, 5438, 5435, 5436, 5402, 5402, 5437, 5451, 5453,
  /* 2872 */ 5451, 5454, 5439, 5368, 5974, 5988, 5726, 6283, 5422, 5799, 5361, 6003, 5361, 5571, 5572, 5361, 5887, 5457,
  /* 2890 */ 5361, 5357, 5361, 5361, 5650, 5652, 5361, 5659, 5481, 5458, 5525, 5545, 5361, 5357, 6084, 5361, 5361, 5658,
  /* 2908 */ 5482, 5361, 5492, 5361, 5361, 5349, 6009, 6035, 5991, 5627, 5628, 5361, 5361, 5350, 5361, 5361, 5361, 5502,
  /* 2926 */ 5368, 6014, 5657, 5647, 5424, 5361, 5361, 5361, 5369, 5361, 5361, 5361, 5370, 5545, 5361, 5499, 5500, 5500,
  /* 2944 */ 5361, 5499, 5500, 5500, 5500, 5500, 5469, 5361, 5361, 5361, 5363, 5361, 5361, 5361, 5364, 5361, 5422, 5422,
  /* 2962 */ 5422, 5422, 5361, 5361, 5361, 5373, 5361, 5361, 5361, 5375, 5361, 5361, 5361, 5372, 5424, 5361, 5499, 5469,
  /* 2980 */ 5361, 5361, 5499, 5361, 5499, 5361, 5500, 5361, 5361, 5857, 5495, 5361, 5361, 5659, 5586, 5517, 6084, 5361,
  /* 2998 */ 5361, 5361, 5413, 5361, 6086, 5499, 6086, 5771, 5515, 5361, 5361, 5659, 5952, 5520, 5361, 5646, 5424, 5548,
  /* 3016 */ 5558, 5544, 5361, 5361, 5350, 5444, 5361, 5424, 5361, 6297, 5636, 5792, 5646, 5530, 6095, 6097, 6096, 6097,
  /* 3034 */ 5532, 5361, 5361, 5361, 5427, 5364, 5361, 5857, 5857, 5636, 5361, 5365, 5357, 6086, 5361, 5364, 5364, 5440,
  /* 3052 */ 5440, 5365, 5361, 5440, 5361, 5425, 5646, 5361, 5361, 5666, 5361, 5361, 5667, 5361, 5361, 5670, 6101, 5446,
  /* 3070 */ 5361, 5361, 5506, 5978, 5920, 5514, 5643, 5535, 5525, 5545, 5361, 5361, 5687, 5417, 5356, 5545, 5478, 5793,
  /* 3088 */ 5799, 5361, 5361, 5361, 5361, 5362, 5361, 5659, 5977, 5786, 5953, 6186, 5361, 5949, 5361, 5361, 5361, 6278,
  /* 3106 */ 6280, 5361, 5657, 5525, 5545, 5361, 5977, 5920, 5514, 5474, 5361, 5361, 5362, 5940, 5737, 5361, 5361, 5361,
  /* 3124 */ 5659, 5427, 5361, 5646, 5361, 5427, 5361, 5361, 5361, 5441, 5415, 5567, 5514, 5643, 5361, 5575, 5381, 5953,
  /* 3142 */ 5575, 5361, 5361, 5362, 5508, 5859, 5954, 6292, 5361, 5361, 5361, 6209, 5697, 5444, 5361, 5361, 5458, 5999,
  /* 3160 */ 5361, 5361, 5362, 5509, 5361, 5580, 5582, 5361, 6012, 5361, 5361, 5361, 5469, 5361, 5361, 5500, 5500, 5500,
  /* 3178 */ 5361, 5361, 5422, 5361, 5582, 5361, 6012, 5361, 5984, 5361, 5559, 5361, 5921, 5572, 5361, 5361, 5790, 5543,
  /* 3196 */ 5580, 5577, 5572, 5361, 5361, 5803, 5361, 5361, 5857, 5666, 5361, 5361, 5361, 5538, 5522, 5361, 5584, 5361,
  /* 3214 */ 5361, 5362, 5650, 5423, 5588, 5361, 5869, 5361, 5361, 5857, 5799, 5683, 5659, 5599, 5600, 5580, 5361, 5600,
  /* 3232 */ 5361, 5361, 5361, 5861, 5361, 5603, 5361, 5610, 5592, 5593, 5591, 5590, 5595, 5594, 5595, 5595, 5595, 5595,
  /* 3250 */ 5596, 5597, 5613, 5613, 5612, 5615, 5617, 5617, 5619, 5619, 5619, 5620, 5361, 5921, 5568, 5676, 5568, 5678,
  /* 3268 */ 5595, 5589, 5680, 5682, 5682, 5680, 5619, 5623, 5618, 5625, 5685, 5626, 5361, 5361, 5362, 5651, 5656, 5508,
  /* 3286 */ 5859, 5954, 5361, 5361, 5998, 5628, 5636, 5361, 5364, 5892, 5696, 5361, 5606, 5361, 5501, 5361, 5627, 5699,
  /* 3304 */ 5661, 5468, 5862, 5361, 5361, 5506, 5361, 5458, 5361, 5361, 5868, 5361, 5361, 5919, 5361, 5361, 5921, 5361,
  /* 3322 */ 5361, 5361, 5606, 5361, 5373, 5370, 5486, 5361, 5361, 5362, 5661, 5361, 5361, 5361, 5514, 5894, 5361, 5361,
  /* 3340 */ 5946, 5921, 5361, 5361, 5545, 5361, 5361, 5361, 5464, 5774, 5950, 5361, 5784, 5937, 5474, 5789, 5482, 5424,
  /* 3358 */ 5361, 5361, 5949, 5545, 5350, 5361, 5361, 5472, 5794, 5361, 5361, 5361, 5506, 5361, 5707, 5361, 5606, 5361,
  /* 3376 */ 5361, 5949, 5572, 5361, 5361, 5361, 5572, 5442, 5361, 5361, 5373, 5862, 5527, 5707, 5361, 5510, 5361, 5361,
  /* 3394 */ 5467, 5361, 5467, 5361, 5361, 5980, 5578, 5361, 5711, 5444, 5361, 5361, 5984, 5527, 5713, 5361, 5422, 5372,
  /* 3412 */ 5424, 5659, 5361, 5361, 5361, 5412, 5361, 5653, 5365, 5716, 5361, 5600, 5361, 5446, 5361, 5361, 5361, 5514,
  /* 3430 */ 5361, 5361, 5361, 5526, 5361, 5361, 5720, 5361, 5490, 5364, 5365, 5731, 5730, 5573, 5742, 5741, 5741, 5739,
  /* 3448 */ 5742, 5740, 5739, 5739, 5739, 5739, 5749, 5748, 5750, 5749, 5750, 5752, 5758, 5758, 5753, 5754, 5754, 5755,
  /* 3466 */ 5759, 5756, 5759, 5756, 5746, 5761, 5763, 5739, 5743, 5744, 5765, 5744, 5745, 5756, 5767, 5361, 5361, 6012,
  /* 3484 */ 5544, 5361, 5361, 5362, 5441, 5374, 5361, 5488, 5361, 5361, 5362, 6037, 5509, 5361, 5944, 5799, 5361, 5361,
  /* 3502 */ 6066, 5361, 5361, 6072, 5922, 5580, 5361, 5784, 5361, 5443, 5361, 6077, 6000, 5361, 5361, 6084, 5361, 5361,
  /* 3520 */ 5784, 5514, 5627, 5361, 5705, 5361, 5361, 5361, 6030, 5795, 5784, 5790, 5859, 6084, 5361, 6023, 5643, 5493,
  /* 3538 */ 6023, 5643, 5361, 5361, 5362, 6117, 5460, 6122, 5554, 5361, 5361, 5361, 5886, 5361, 5784, 5944, 5799, 5361,
  /* 3556 */ 5565, 5361, 5361, 5361, 5565, 5361, 5784, 5892, 5938, 5444, 5361, 5361, 5632, 5417, 5350, 5784, 5790, 5883,
  /* 3574 */ 5643, 5771, 5643, 5361, 5361, 5361, 5776, 5361, 5361, 5364, 5892, 5361, 5892, 5979, 5771, 5643, 5771, 5643,
  /* 3592 */ 5361, 5784, 5361, 5893, 5799, 5361, 5361, 5364, 6019, 5361, 6084, 6084, 6084, 5361, 5374, 5372, 5661, 5361,
  /* 3610 */ 5361, 6088, 5422, 5422, 5372, 5361, 5361, 5361, 5365, 5361, 5361, 5361, 5541, 5542, 5863, 5444, 5576, 5444,
  /* 3628 */ 5361, 5361, 6119, 5361, 5361, 5541, 5383, 5361, 5575, 5866, 5546, 5479, 5382, 5444, 5361, 5781, 5546, 5570,
  /* 3646 */ 5806, 5811, 5807, 5808, 5811, 5808, 5812, 5809, 5809, 5814, 5813, 5813, 5814, 5817, 5816, 5818, 5818, 5819,
  /* 3664 */ 5818, 5821, 5821, 5821, 5824, 5824, 5824, 5823, 5827, 5826, 5827, 5826, 5829, 5833, 5352, 5830, 5833, 5837,
  /* 3682 */ 5831, 5839, 5841, 5843, 5850, 5845, 5844, 5849, 5849, 5847, 5848, 5852, 5854, 5856, 5361, 5361, 5361, 5576,
  /* 3700 */ 5524, 5361, 5575, 5444, 5373, 5375, 5361, 5361, 5709, 5361, 5361, 5722, 5361, 5361, 5769, 5983, 5865, 5361,
  /* 3718 */ 5361, 5783, 5802, 5361, 5790, 5779, 6085, 6085, 5361, 5504, 5447, 5361, 5361, 6179, 5370, 5361, 5370, 5361,
  /* 3736 */ 5417, 5689, 5873, 5556, 5370, 5361, 5361, 5361, 5628, 5361, 5361, 5449, 5361, 5361, 5370, 5648, 5467, 5509,
  /* 3754 */ 5417, 5834, 5417, 5417, 5417, 5666, 5361, 5361, 5659, 5361, 5361, 6118, 5361, 5506, 6261, 5353, 5371, 5637,
  /* 3772 */ 6261, 5871, 5361, 5361, 5524, 5524, 5631, 5361, 5361, 5361, 5472, 5361, 5361, 5361, 5482, 5361, 5361, 5361,
  /* 3790 */ 5420, 5361, 5361, 5694, 5572, 5361, 5361, 5410, 5672, 5361, 5484, 6256, 6165, 5880, 5875, 5417, 5419, 5608,
  /* 3808 */ 5485, 5358, 5998, 5524, 5524, 5524, 5524, 5364, 5361, 5361, 5374, 5372, 5361, 6259, 6261, 6261, 6261, 5417,
  /* 3826 */ 5885, 6261, 6261, 5879, 6261, 5876, 5876, 5418, 5485, 5637, 5417, 5462, 5417, 5462, 5361, 5371, 6261, 5871,
  /* 3844 */ 5524, 5524, 5361, 5361, 5361, 5631, 5364, 5361, 5373, 5421, 5361, 5688, 5690, 5692, 5417, 5417, 5777, 5361,
  /* 3862 */ 5361, 6186, 5361, 5361, 5361, 5661, 5361, 5361, 5361, 5442, 5361, 6256, 6258, 6260, 6261, 6261, 6261, 6261,
  /* 3880 */ 5711, 5361, 5361, 5361, 5643, 5361, 5361, 5417, 5835, 5691, 5417, 5417, 5417, 5417, 5351, 5350, 5485, 5350,
  /* 3898 */ 5637, 6261, 6261, 6164, 6261, 6258, 6260, 6261, 5359, 5354, 5417, 5417, 5417, 5996, 5572, 5361, 5485, 5885,
  /* 3916 */ 5350, 5417, 5461, 5463, 5361, 5361, 6181, 5575, 5361, 6261, 5361, 5361, 5423, 5416, 6091, 5361, 5572, 5361,
  /* 3934 */ 5361, 5428, 5717, 5361, 6258, 6260, 6261, 5485, 5639, 5350, 5360, 5350, 5360, 6215, 5692, 5417, 5417, 5417,
  /* 3952 */ 5551, 5996, 5572, 6255, 6261, 6261, 6261, 5419, 5361, 6261, 5639, 5637, 5361, 5361, 6207, 5444, 5575, 5361,
  /* 3970 */ 5643, 5361, 5417, 5877, 5361, 5361, 5361, 5646, 5361, 5361, 5361, 6255, 6261, 6261, 5638, 6261, 5638, 5361,
  /* 3988 */ 5361, 5361, 5648, 6254, 6261, 6261, 5360, 5632, 5350, 5637, 5360, 5361, 5361, 5361, 5644, 5369, 5652, 5482,
  /* 4006 */ 5632, 5469, 5882, 5954, 5577, 5444, 5361, 5889, 5643, 5361, 5361, 5442, 5796, 5955, 5361, 5892, 5575, 5661,
  /* 4024 */ 5932, 5628, 6022, 6120, 5891, 5732, 5896, 5898, 5898, 5898, 5898, 5899, 5902, 5901, 5902, 5902, 5903, 5904,
  /* 4042 */ 5908, 5906, 5906, 5906, 5905, 5906, 5906, 5910, 5910, 5910, 5361, 5361, 5444, 5981, 5361, 5650, 5425, 5653,
  /* 4060 */ 5687, 5361, 5658, 5361, 5361, 5361, 5499, 5361, 5361, 5361, 5379, 5661, 5468, 6087, 5862, 5917, 5917, 5565,
  /* 4078 */ 5361, 5361, 5445, 5572, 5361, 5700, 5361, 5361, 5448, 5361, 5546, 5919, 5361, 5361, 5458, 5631, 5361, 5926,
  /* 4096 */ 5929, 5361, 5361, 5458, 5938, 5444, 5361, 5528, 5361, 5361, 5469, 5469, 5928, 5446, 5361, 5361, 5469, 5649,
  /* 4114 */ 5361, 6063, 5361, 5621, 5931, 5361, 5361, 6216, 5417, 5417, 5445, 5445, 5361, 5361, 5361, 5527, 5361, 5361,
  /* 4132 */ 5361, 5425, 5475, 5361, 5934, 5446, 5361, 5361, 6263, 5361, 5361, 6086, 5361, 5361, 5361, 5424, 5659, 5936,
  /* 4150 */ 5370, 5445, 5361, 5361, 6294, 5361, 5361, 5361, 6254, 6261, 5361, 5942, 5736, 5959, 5361, 5971, 5959, 5363,
  /* 4168 */ 5361, 5361, 5734, 5735, 5942, 5361, 5361, 5469, 5658, 5943, 5361, 5361, 5943, 5966, 5361, 5361, 5664, 5361,
  /* 4186 */ 5361, 5361, 5690, 5361, 5970, 5361, 5361, 5471, 5361, 5361, 5733, 5361, 5361, 5484, 6257, 5975, 5725, 5727,
  /* 4204 */ 6284, 6283, 5444, 5361, 5361, 5361, 5650, 5361, 5361, 5723, 5724, 5361, 5362, 5503, 5423, 5476, 5635, 5798,
  /* 4222 */ 5554, 5673, 5384, 5361, 5361, 5990, 5361, 5361, 5487, 5361, 5361, 5982, 5361, 5361, 5496, 5361, 5361, 5938,
  /* 4240 */ 5361, 5938, 5540, 5788, 5993, 5728, 6006, 5657, 5483, 5962, 5787, 5893, 6282, 5577, 5961, 5361, 5361, 5361,
  /* 4258 */ 5700, 6011, 5482, 5632, 5469, 5361, 5499, 5361, 5469, 5882, 5954, 5382, 5361, 5364, 5369, 5361, 5482, 5361,
  /* 4276 */ 5361, 5499, 5500, 5469, 5657, 5483, 6017, 5859, 5791, 5362, 5441, 6031, 5483, 6021, 5509, 5791, 5893, 6282,
  /* 4294 */ 5382, 5361, 5660, 5947, 6090, 5862, 5527, 5361, 5361, 5537, 5361, 5793, 5993, 5728, 5361, 5361, 5361, 5701,
  /* 4312 */ 5791, 5893, 6282, 5643, 5361, 5361, 5502, 5421, 5656, 5460, 5362, 5924, 5361, 5361, 5361, 5654, 5545, 6082,
  /* 4330 */ 5659, 5361, 5361, 5502, 6031, 5483, 6021, 5509, 6021, 5509, 5791, 6025, 5728, 6019, 5632, 6009, 5514, 5952,
  /* 4348 */ 5361, 5361, 5606, 5607, 5795, 5508, 5862, 6282, 5361, 5361, 5361, 5502, 6031, 5795, 5508, 5795, 6009, 6035,
  /* 4366 */ 5991, 5361, 5361, 5361, 5705, 5362, 6019, 5468, 5862, 6078, 5921, 5361, 5361, 5514, 5771, 5373, 6009, 5514,
  /* 4384 */ 5361, 5364, 6191, 5465, 5361, 6037, 5862, 6205, 5361, 5361, 6037, 5862, 5361, 5361, 5527, 5527, 6041, 5514,
  /* 4402 */ 5361, 5361, 5995, 5995, 5361, 5361, 5995, 5545, 5361, 5361, 5527, 5361, 5527, 5636, 5361, 5499, 5441, 5349,
  /* 4420 */ 5356, 5545, 6043, 5361, 5636, 5361, 5771, 5636, 5444, 5361, 6093, 5444, 5361, 5361, 5538, 6204, 6071, 5641,
  /* 4438 */ 5640, 5361, 5365, 5425, 5412, 5642, 6045, 6048, 6048, 6046, 6051, 6052, 6049, 6048, 6048, 6048, 6048, 6054,
  /* 4456 */ 6055, 6054, 6054, 6057, 6058, 6058, 6058, 6059, 6058, 6059, 6058, 6058, 6061, 5912, 5912, 5912, 5913, 5910,
  /* 4474 */ 5911, 5910, 5911, 5912, 5911, 5910, 5910, 5910, 5910, 5910, 5912, 5913, 5914, 5632, 5776, 5921, 5361, 5514,
  /* 4492 */ 5361, 5469, 5659, 5365, 5361, 5367, 5374, 6007, 5473, 6033, 6063, 5361, 5361, 5361, 5771, 5361, 5361, 5361,
  /* 4510 */ 5444, 5361, 5361, 5559, 5361, 5361, 6065, 5361, 5506, 5498, 5513, 5361, 5800, 6068, 5361, 5373, 5421, 5799,
  /* 4528 */ 6070, 5361, 5444, 6074, 5948, 5361, 5411, 5645, 6076, 5361, 5361, 5361, 5784, 5361, 5361, 6081, 5361, 5361,
  /* 4546 */ 5361, 5793, 6099, 5443, 5361, 5361, 5361, 5458, 5496, 5361, 5361, 5361, 5446, 5669, 5671, 6102, 5361, 5373,
  /* 4564 */ 5703, 5361, 5606, 5361, 5361, 5361, 5500, 5361, 5442, 5877, 5921, 5361, 5545, 5361, 5364, 5440, 5361, 5361,
  /* 4582 */ 5662, 5668, 5361, 5361, 5486, 5555, 5649, 5361, 5458, 5572, 5506, 5379, 5361, 5361, 5361, 5773, 5790, 5361,
  /* 4600 */ 6274, 5361, 5663, 5361, 6104, 6006, 5549, 6007, 5550, 5508, 5862, 6111, 6111, 5446, 5361, 5361, 5562, 5361,
  /* 4618 */ 5361, 5632, 6003, 5361, 5361, 5361, 5711, 5361, 6001, 5361, 6176, 5361, 5373, 5862, 6205, 5361, 5648, 5459,
  /* 4636 */ 5468, 5509, 6110, 5674, 5954, 6114, 5571, 5361, 5361, 5361, 5995, 5361, 5361, 5361, 5443, 5656, 5460, 5508,
  /* 4654 */ 5862, 6113, 6115, 5572, 5361, 5373, 6009, 6039, 5921, 5361, 5361, 5892, 5527, 5984, 5361, 5361, 5361, 5799,
  /* 4672 */ 5460, 5508, 5954, 5938, 5600, 5362, 5731, 6015, 5468, 5785, 5553, 5545, 5361, 5374, 5705, 5361, 5606, 5361,
  /* 4690 */ 5502, 5426, 5460, 6038, 5938, 5554, 5361, 5361, 5632, 5361, 5361, 5361, 5857, 5361, 5361, 6001, 5361, 5361,
  /* 4708 */ 5361, 5892, 5527, 5361, 5499, 5659, 5365, 5458, 5361, 5693, 5545, 5361, 5361, 5564, 5424, 5576, 5361, 5361,
  /* 4726 */ 5361, 5915, 5361, 5661, 5361, 5661, 5857, 5361, 5857, 5361, 6094, 6032, 5350, 5984, 5361, 6128, 5361, 5466,
  /* 4744 */ 5628, 6186, 5361, 5427, 5771, 5361, 5365, 5374, 5361, 5506, 5361, 5361, 5361, 5964, 6130, 6296, 6295, 6133,
  /* 4762 */ 6296, 6132, 6135, 6139, 6139, 6140, 6137, 6140, 6138, 6139, 6144, 6139, 6143, 6142, 6146, 6149, 6148, 6149,
  /* 4780 */ 6149, 6150, 6151, 6151, 6152, 6154, 6153, 6151, 6151, 6151, 6156, 6156, 6156, 6156, 6160, 6160, 6158, 6156,
  /* 4798 */ 6157, 6157, 6160, 6160, 6157, 6160, 5361, 5361, 5361, 5990, 5361, 5509, 5514, 6187, 5571, 5361, 5886, 5361,
  /* 4816 */ 5361, 5361, 5997, 5361, 5511, 6122, 5444, 5361, 5378, 5477, 5386, 5361, 5714, 5643, 5361, 5379, 5559, 5857,
  /* 4834 */ 5361, 5361, 5361, 5489, 5376, 6162, 5631, 5361, 5380, 6173, 5361, 5382, 5361, 5361, 5361, 5575, 5361, 5361,
  /* 4852 */ 6167, 5361, 6169, 6171, 5361, 5601, 5361, 5361, 5571, 5444, 5658, 5361, 6175, 6178, 5414, 6193, 6195, 5959,
  /* 4870 */ 5804, 5361, 5361, 5361, 6008, 5361, 5972, 5361, 5971, 5467, 5509, 5514, 6187, 5643, 5361, 5361, 5361, 5357,
  /* 4888 */ 6183, 5361, 5361, 5361, 6012, 5361, 5361, 5721, 5643, 5361, 5412, 5653, 5370, 5486, 5361, 5505, 5361, 5361,
  /* 4906 */ 5575, 5575, 5361, 5361, 5362, 6105, 6007, 5415, 5881, 6091, 5956, 6196, 6196, 5446, 5361, 5361, 5580, 5361,
  /* 4924 */ 5361, 5361, 6008, 5496, 5361, 5361, 6201, 5361, 6089, 5643, 5361, 5412, 5857, 5653, 5361, 5687, 5487, 5361,
  /* 4942 */ 5370, 6107, 5881, 6091, 5797, 5553, 6079, 5569, 5446, 6198, 5465, 6090, 6092, 5957, 5384, 5469, 5499, 5361,
  /* 4960 */ 5361, 5606, 5424, 5633, 5862, 6186, 5952, 5572, 5569, 5446, 5361, 5361, 5606, 5527, 5646, 6203, 5514, 6187,
  /* 4978 */ 5496, 5361, 5425, 5643, 5643, 5361, 5361, 5562, 6086, 5425, 5475, 5634, 5797, 5553, 6079, 5464, 5542, 5798,
  /* 4996 */ 6083, 5569, 5771, 5921, 5361, 5361, 5627, 5361, 5361, 5361, 5510, 5774, 5950, 5569, 5444, 5361, 5361, 5496,
  /* 5014 */ 5361, 5643, 5361, 5413, 6192, 6194, 5958, 5361, 5361, 5361, 5998, 5361, 5361, 5464, 5798, 5952, 5382, 5458,
  /* 5032 */ 5938, 6004, 5361, 5361, 5361, 6028, 6209, 5496, 5361, 5361, 5425, 5604, 5937, 5496, 5361, 5937, 5496, 5361,
  /* 5050 */ 5949, 5361, 5938, 5949, 5949, 5949, 5949, 5444, 5361, 5937, 5496, 5552, 5552, 5552, 5552, 5361, 5858, 5361,
  /* 5068 */ 5515, 5363, 5361, 6086, 6212, 6214, 6086, 6212, 5951, 6086, 5361, 5361, 5366, 5368, 6006, 6086, 6189, 5967,
  /* 5086 */ 6188, 6218, 5967, 5361, 5968, 6230, 6231, 6231, 6220, 6232, 6231, 6223, 6234, 6231, 6221, 6233, 6223, 6225,
  /* 5104 */ 6229, 6228, 6227, 6236, 6227, 6227, 6238, 6240, 6240, 6240, 6248, 6241, 6243, 6245, 6240, 6247, 6250, 6251,
  /* 5122 */ 6251, 6265, 6266, 6265, 6265, 6253, 5361, 6252, 6266, 6251, 6252, 6265, 6265, 6265, 6265, 5605, 5361, 5361,
  /* 5140 */ 5361, 6037, 5630, 5361, 5518, 5361, 5417, 5690, 5692, 5361, 5533, 5361, 5718, 6268, 5361, 5361, 5361, 6041,
  /* 5158 */ 5605, 5361, 5998, 6269, 5361, 6199, 5605, 5629, 5361, 6271, 5361, 5361, 5632, 5487, 6273, 6276, 5361, 5361,
  /* 5176 */ 5636, 5361, 5361, 5361, 5653, 5470, 6279, 6281, 5666, 6278, 6280, 6026, 5361, 5361, 5361, 6082, 5361, 5994,
  /* 5194 */ 5470, 6286, 5361, 5361, 5937, 5424, 5361, 5361, 5637, 5628, 5361, 5510, 5361, 6037, 5361, 5362, 5460, 5554,
  /* 5212 */ 5361, 6163, 5521, 5540, 5561, 6078, 5666, 5361, 5361, 5637, 6261, 5360, 6006, 5657, 6262, 5539, 5560, 5560,
  /* 5230 */ 6210, 6002, 5361, 5361, 5361, 5668, 5361, 5361, 5643, 5575, 5361, 5361, 6087, 5361, 5361, 5361, 5665, 6288,
  /* 5248 */ 5361, 5361, 5361, 6108, 6290, 5361, 5361, 5361, 6124, 6082, 5361, 5361, 5361, 6126, 5361, 5361, 5361, 5960,
  /* 5266 */ 5655, 5657, 5507, 5523, 5859, 5788, 5938, 5554, 5361, 5502, 5368, 6106, 5656, 5976, 5521, 5525, 5787, 5893,
  /* 5284 */ 5553, 6002, 5423, 5656, 5507, 5478, 5859, 5859, 5791, 5893, 5553, 5666, 5361, 5892, 5361, 5979, 5510, 5373,
  /* 5302 */ 5469, 5361, 5363, 5659, 5363, 5427, 5361, 5860, 6030, 5426, 6008, 5509, 5542, 5893, 5361, 5361, 5542, 5893,
  /* 5320 */ 5666, 5361, 5420, 5361, 6185, 5510, 5373, 5469, 5362, 5365, 5361, 5427, 5427, 5361, 5606, 5362, 5361, 5361,
  /* 5338 */ 5361, 6215, 5417, 6294, 5510, 5361, 5361, 5650, 5661, 5361, 5443, 8, 4096, 0, -276824064, -276817920, 6144,
  /* 5355 */ -8384512, 16384, 2097152, 0, -8382464, 6144, 0, 0, 1, 0, 2, 0, 3, 4, 8, 0, 4, 32, 0, 8, 16, 0, 9, 2129920,
  /* 5379 */ 32768, 0, 11, 536870912, 0x80000000, 536870912, -1073741824, 4718592, 8454176, 67158016, 4751360, 67141632,
  /* 5391 */ 276889600, 545325056, 8454144, 656576, 8454144, 545325056, 545325056, 4327744, -2122252288, 545325056,
  /* 5401 */ 1073873488, 8454144, 8454144, -2139029504, 8454144, -1585381376, 277938176, 9502720, 9502720, 0, 12, 2048,
  /* 5413 */ 0, 15, 112, 384, 4096, 4096, 4097, 0, 16, 32, 32, 64, 0, 32, 128, 0, 33, 9502720, 276889600, -1585381376,
  /* 5433 */ 8462336, 8454144, 8462336, 9510912, 8454144, 9502720, 8454144, 2, 2, 4, 0, 0x80000000, 0, -1073741824, 0,
  /* 5448 */ -394264576, 0, -377487360, 9502720, 9510912, 8454144, 277938176, 8454144, 142868480, 134479872, 0, 256,
  /* 5460 */ 1536, 4096, 4100, 4128, 0, 384, 6144, 2048, 4096, 8192, 0, 511, 0, 512, 1024, 64, 384, 32768, 32768, 65536,
  /* 5480 */ -2147221504, 131136, 0, 1024, 2048, 6144, 4096, 16384, 0, 1152, 0, 1216, 1073741840, 0, 1920, 2097152,
  /* 5496 */ 8388608, 0x80000000, 4227072, 0, 8192, 8192, 1, 2, 16, 48, 0, 2048, 8192, 32768, 131072, 0, 2304,
  /* 5513 */ 268697600, 524288, 0, 8200, 71303168, 0, 11264, 71303168, 8192, 49152, 49152, 65536, 65536, 131072,
  /* 5527 */ 16777216, 0, 16576, 0, 1073762304, -1073721320, 0, 19456, 4, 768, 24, 0, 49152, 196608, 262144, 262144,
  /* 5543 */ 524288, 131072, 33554432, 0, 10, 4, 256, 3584, 4096, 8388608, 8388608, 16777216, 33554432, 32, 768, 512,
  /* 5559 */ 65536, 262144, 3670016, 4194304, 64, 20480, 1073741824, 0x80000000, 32768, 268435456, 268435456, 536870912,
  /* 5571 */ 268435456, 1073741824, 0, 65586, 0, 536870912, 536870912, 1073741824, 64, 0, 268435456, 524288, 536870912,
  /* 5584 */ 4100, 16640, 8192, 1049088, 0, 805306368, -1677721600, -1744830464, -1946157056, -1744830464, -1744830464,
  /* 5595 */ -1677721600, -1677721600, 1277165568, -1677721600, 805306368, 50331648, 0, 98304, 8388664, 131072,
  /* 5605 */ 41943040, 0, 131072, 64, 2146304, 1140850688, -1744830464, 1282146304, 1277952000, 1277952000, 1277953024,
  /* 5616 */ 1277952064, -872415232, -872415232, -603979776, -603979776, 0, 155840, -872415232, 1275068416, -872415232,
  /* 5626 */ 1543503872, 0, 262144, 0, 3072, 65536, 0, 4096, 32768, 786432, 1048576, 0, 6144, 4097, 4096, 34816, 34816,
  /* 5643 */ 536870912, 0, 44, 0, 64, 64, 128, 2, 8, 32, 256, 0, 96, 128, 256, 512, 0, 128, 1024, 0, 160, 0, 192,
  /* 5666 */ 67108864, 0, 224, 0, 255, 16128, 114688, 201326592, 268435456, -1073741824, 1342177280, 268435456,
  /* 5678 */ 805306368, 469762048, 872415232, 1879048192, 805306368, 805306368, 1049088, -603979776, 469762048, 4, 4096,
  /* 5689 */ 8392704, 16781312, 100667392, 1073745920, 4096, 16777216, 234881024, 56, 8388608, 268435456, 6815744,
  /* 5700 */ 2621440, 0, 263328, 48, 8388608, 32, 8388608, 16, 8388608, 8, 8388608, 0, 1073741824, 34, 32, 147456, 34,
  /* 5717 */ 34, 0, 327680, 35, 0, 393216, 0, 523264, 523264, 66584576, 67108864, 402653184, 536870912, -1005584384, 2,
  /* 5732 */ 32, 263168, 0, 524256, 524256, 536346624, -536870912, 588655, 588655, 588653, 588653, 588655, 165069,
  /* 5745 */ 165069, 672004991, 671742847, 588655, 283212658, 283212658, 333544306, 283212658, 671710071, 654207,
  /* 5755 */ 654207, 672004991, 672004991, 671710071, 671710071, 672004991, 33984, 33984, 33992, 33997, 230605, 165069,
  /* 5767 */ 589799, 672006135, 8, 768, 0, 134217728, 128, 524288, 6291456, 1048576, 67108864, 1073741824, 524288,
  /* 5780 */ 134217728, 122880, 65536, -1593835520, 0, 524288, 4194304, 262144, 1572864, 2097152, 524288, 524288,
  /* 5792 */ 1048576, 1048576, 2097152, 1024, 4096, 1048576, 6291456, 8388608, 0, 40, 66560, 0, 1040384, -536870912,
  /* 5806 */ -528480768, 138543488, 138543488, 138544512, 138543488, 138544512, 138805632, 138806656, 138544512,
  /* 5815 */ 138544512, -394263024, 139067776, -394263024, -394263024, -394262992, -394262620, -394262620, -389937280,
  /* 5824 */ -389937280, -389675136, -389937244, -389937244, -377485404, -389937244, -276819968, -276824064, -8382464,
  /* 5833 */ -276819968, -276819968, 4096, 16781312, -276758528, -276824064, -7860223, -7598079, -7860223, -274862016,
  /* 5843 */ -4327360, -133056, -272493184, -272497280, -132544, -132032, -133056, -133056, -272491136, -272492636,
  /* 5853 */ -272496732, -272492636, -4194880, -4194332, 0, 1048576, 131072, 262144, 32, 131072, 524288, 0x80000000,
  /* 5865 */ 57344, -2130706432, 0x80000000, -528482304, 0, 1049088, 6148, 6176, 234885120, 1073745920, 6144, 268439552,
  /* 5877 */ 4096, 67108864, 6144, 268441600, 6144, 16384, 131072, 134217728, 4097, 6144, 262144, 8650752, 2097184,
  /* 5890 */ 2621440, -2147220480, 0, 2097152, 4194304, 1024, 805308417, -1037826780, 67109056, 67109056, 67125440,
  /* 5901 */ 69886154, -1037827036, -1037827036, -970718172, -970718172, -970717980, -970717980, -970718044, -970718044,
  /* 5910 */ -1, -1, -536870913, -536870913, -1, 0, 2621440, 2097152, 536870912, 139264, 262144, 268435456, 0, 34816,
  /* 5924 */ 2048, 268435456, 4, 263456, 263200, 35651584, -1073741824, 69730304, 0, 2760714, 263200, 102760448, 263392,
  /* 5937 */ 0, 4194304, 8388608, 30, 524256, 1, 30, 0, 6291456, 1, 2048, 12288, 0, 8388608, 134217728, 134217728,
  /* 5953 */ 268435456, 524288, 2097152, 1048576, 14680064, 520093696, -536870912, 0, 61440, 61440, 196608, 4, 288,
  /* 5966 */ 35651584, 0, 8388640, 513, 155648, 0, 15728640, -536870912, 16, 480, 512, 2048, 32768, 4194304, 0, 20480,
  /* 5982 */ 0, 24576, 0, 32768, 8454144, 8454176, 512, 523264, 4, 33554432, 268435456, 4194304, 58720256, 0, 16777216,
  /* 5997 */ 100663296, 0, 65536, 33554432, 8388608, 33554432, 67108864, 268435456, 0x80000000, 16, 224, 256, 8192,
  /* 6010 */ 131072, 8, 256, 65536, 16, 128, 1536, 12288, 49152, 8, 1024, 12288, 16384, 262144, 134217728, 2097152,
  /* 6026 */ 58720256, 67108864, 1, 268435456, 1, 8, 128, 2048, 61440, 524288, 25165824, 8, 8192, 524288, 16777216, 8,
  /* 6042 */ 131072, 128, 1073742080, 67143684, 176373800, -1971109848, 176373800, 176373800, 176373802, 195256360,
  /* 6052 */ 201443340, 195260456, 201443340, 201443340, 201443372, 235128876, 243517484, 243517484, 244566188,
  /* 6061 */ -1903966164, -536870913, 256, 1073741824, 18874368, 0, 18874368, 81920, 176291840, 42, 0, 18882560,
  /* 6073 */ 18882560, 0, 195166208, 235012096, 0, 25165824, 33554432, 201326592, 243400704, 0, 33554432, 134217728,
  /* 6085 */ 536870912, 134217728, 0, 16384, 32, 16384, 32768, 917504, 1048576, 4, 64, 1073762304, -1073721344,
  /* 6098 */ 1073762304, 172, 244449280, 114688, 536739840, -1073741824, 1, 6, 16, 96, 384, 6291456, 524288, 132120576,
  /* 6112 */ 268435456, 2097152, 12582912, 117440512, 268435456, 2, 128, 16384, 263168, 2760714, 8192, 8388608, 1, 1536,
  /* 6126 */ 1, 1024, 0, 1073741888, 0, 268959744, 33792, 67239938, 268959872, -2139084544, 604127266, 1073807961,
  /* 6138 */ 134283801, 66073, 66073, 66077, 72217, 68121, 66073, 66201, 66073, 98841, 269058713, 604455467, 604455467,
  /* 6151 */ 604193339, 604193339, 604195387, 604193339, 604199483, -9217, -9217, -1025, -9217, -1025, -1025, 16, 512,
  /* 6164 */ 6144, 16783360, 234887168, 13, 640, 80, 2560, 6656, 9, 475136, 536870912, 622592, 0, 50331648, 475136, 0,
  /* 6180 */ 60817408, 48, 212992, 16384, 536870912, 80, 0, 67108864, 134217728, 2359296, 2359296, 4, 112, 7040,
  /* 6194 */ 1032192, 15728640, 520093696, 536870912, 4, 96, 1024, 32, 536870912, 128, 32768, 16777216, 268435456, 256,
  /* 6208 */ 8388608, 256, 4194304, 25165824, 2, 64, 134234240, 0, 67112960, 4096, 8388640, 8388640, 134286336, 68608,
  /* 6222 */ 134286336, 76808, 68608, 1117184, 134302848, 41943136, 41943136, 2427904, 41943136, 68608, 68608, 68610,
  /* 6234 */ 68608, 4262912, 41943136, 42008672, 42009696, 42009696, 42011744, 42011744, 42019944, 42011744, 43060320,
  /* 6245 */ 42011744, 176227426, 42011744, 176229472, 42011746, 176245984, 134217727, 134217727, 268435455, 0,
  /* 6255 */ 67115008, 6144, 8394752, 16783360, 100669440, 1073747968, 6144, 6144, 8192, 65536, 268435455, 268435455,
  /* 6267 */ 134217727, 96, 41943040, 41943040, 98, 104, 98, 0, 109051904, 224, 19456, 511, 65024, 458752, 7864320,
  /* 6282 */ 58720256, 402653184, 1610612736, 0x80000000, 65024, 58720256, 96, 33554432, 2048, 65536, 4194304, 67108864,
  /* 6294 */ 1, 32768, 67239938, 0, 33751812
];

XQueryParser_ts.LOOKAHEAD =
[
  /*    0 */ 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666,
  /*   21 */ 666, 666, 666, 666, 666, 666, 666, 666, 666, 657, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666,
  /*   42 */ 666, 666, 666, 2239, 631, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666,
  /*   63 */ 753, 644, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 912, 666, 666, 666, 666, 666, 666, 666, 666,
  /*   84 */ 666, 831, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666,
  /*  105 */ 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 873, 654, 666, 666, 666, 665, 666, 666, 666, 666,
  /*  126 */ 666, 666, 666, 667, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666,
  /*  147 */ 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 1615, 666, 666, 666, 666, 666, 666, 666, 666, 666,
  /*  168 */ 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666,
  /*  189 */ 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 778, 675, 666, 666, 666, 1729, 683, 666, 1020, 666,
  /*  210 */ 666, 666, 666, 666, 666, 1613, 1214, 694, 666, 1632, 1173, 2049, 666, 666, 666, 706, 714, 666, 738, 666,
  /*  230 */ 959, 666, 666, 666, 666, 666, 666, 1441, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 2028, 666, 666,
  /*  251 */ 666, 1830, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666,
  /*  272 */ 666, 666, 666, 666, 666, 666, 666, 666, 666, 1594, 666, 2404, 666, 666, 666, 666, 725, 666, 666, 666, 1862,
  /*  293 */ 666, 666, 666, 666, 666, 666, 799, 666, 666, 666, 666, 666, 666, 666, 1390, 734, 1114, 2032, 1821, 746,
  /*  313 */ 666, 666, 767, 666, 828, 666, 2400, 666, 1363, 666, 666, 666, 1484, 776, 885, 1629, 666, 1866, 666, 1659,
  /*  333 */ 940, 666, 786, 1694, 1819, 1925, 795, 1598, 906, 646, 807, 666, 815, 839, 666, 1111, 1376, 1799, 1784, 848,
  /*  353 */ 768, 863, 666, 1940, 871, 1293, 881, 2092, 2115, 2171, 893, 666, 924, 939, 948, 956, 992, 967, 1125, 980,
  /*  373 */ 726, 1000, 666, 1008, 2047, 1041, 1016, 972, 2254, 1267, 1028, 787, 1049, 1067, 1076, 1781, 2154, 1084,
  /*  391 */ 1234, 1880, 1416, 1096, 666, 1104, 2169, 2063, 1122, 1088, 2234, 1560, 1133, 840, 1148, 1162, 2380, 1171,
  /*  409 */ 2300, 1181, 1185, 2213, 1570, 1193, 666, 1201, 1222, 2314, 1231, 2365, 2395, 1581, 1242, 1068, 1257, 666,
  /*  427 */ 2468, 1265, 1466, 1275, 1279, 1287, 1755, 1313, 666, 1328, 1343, 1352, 1360, 2502, 1371, 1714, 1384, 1163,
  /*  445 */ 1398, 666, 1406, 1414, 2533, 1424, 1428, 1436, 1912, 1453, 1223, 1492, 1507, 1516, 1557, 759, 1524, 1849,
  /*  463 */ 822, 2004, 1536, 666, 1544, 1568, 855, 1578, 1528, 1589, 1059, 1606, 1344, 1623, 1640, 1649, 1657, 1299,
  /*  481 */ 1667, 1671, 900, 1994, 1679, 666, 1687, 1702, 931, 1711, 666, 1969, 2015, 1722, 1508, 1737, 666, 1745,
  /*  499 */ 1753, 1035, 1763, 1767, 1775, 2519, 1792, 666, 1812, 1829, 1838, 1846, 1305, 1857, 2141, 1874, 1641, 1894,
  /*  517 */ 666, 1902, 1910, 666, 666, 2199, 1920, 2340, 1933, 666, 666, 1948, 1957, 1056, 2121, 1965, 2287, 1478,
  /*  535 */ 2414, 1977, 666, 1985, 2002, 1140, 2012, 2352, 2023, 2433, 2040, 1703, 2057, 2071, 2080, 1992, 986, 2088,
  /*  553 */ 2445, 1208, 686, 2100, 666, 2108, 2129, 1249, 2138, 1886, 2149, 2489, 2162, 1949, 2179, 666, 2187, 2517,
  /*  571 */ 1320, 2195, 2573, 2207, 2478, 2227, 666, 2247, 2267, 2276, 2284, 1154, 2295, 916, 2308, 2072, 2322, 666,
  /*  589 */ 2330, 2338, 1335, 2348, 636, 2360, 2543, 2373, 2130, 2388, 2412, 2422, 2430, 2219, 2441, 698, 1460, 2561,
  /*  607 */ 2453, 666, 2461, 2476, 1499, 2486, 1804, 2497, 1445, 2510, 2268, 2527, 2541, 2551, 2559, 1472, 2569, 2259,
  /*  625 */ 1551, 717, 2581, 666, 2589, 2597, 2621, 2625, 2629, 2633, 2637, 2599, 2599, 2599, 2599, 5040, 5046, 2599,
  /*  643 */ 5050, 3641, 2655, 2599, 2599, 2599, 2599, 2599, 2599, 2668, 3597, 2944, 2599, 2662, 2599, 2599, 2599, 2599,
  /*  661 */ 2599, 2598, 2604, 2599, 2660, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2666, 2685, 2689, 2693, 2697,
  /*  679 */ 2701, 2705, 2709, 2713, 2738, 2742, 2746, 2599, 2599, 2599, 2599, 2599, 2599, 5228, 5365, 2775, 2779, 2783,
  /*  697 */ 2787, 2599, 2599, 2599, 2599, 2599, 5140, 5145, 5136, 2599, 3686, 2798, 2802, 2806, 2810, 2814, 2818, 2822,
  /*  715 */ 2826, 2830, 2599, 2599, 2599, 2599, 2599, 2599, 5294, 5323, 3182, 2599, 2599, 2599, 2599, 2599, 2599, 2599,
  /*  733 */ 3117, 2880, 2884, 2888, 2892, 2599, 2599, 2599, 2599, 2836, 2599, 2599, 2599, 2898, 2599, 2599, 2599, 2599,
  /*  751 */ 2599, 2907, 2599, 2599, 3934, 2646, 3638, 2946, 2599, 2599, 2599, 3909, 3915, 2599, 3919, 2599, 2649, 2599,
  /*  769 */ 2599, 2599, 2599, 2599, 2599, 2599, 3125, 2927, 2921, 2599, 2599, 2599, 2599, 2599, 2599, 2677, 2681, 2926,
  /*  787 */ 2599, 2599, 2599, 2599, 2599, 2599, 2599, 3160, 4247, 4327, 2599, 3127, 2599, 2599, 2599, 2599, 2851, 2599,
  /*  805 */ 2599, 2599, 2960, 3763, 2599, 3001, 3024, 2599, 2599, 2965, 3017, 3842, 2599, 2970, 2599, 4408, 5388, 2599,
  /*  823 */ 2599, 3938, 3944, 2599, 4493, 2599, 2599, 2911, 2599, 2599, 2599, 2599, 2599, 2656, 2599, 2599, 3029, 2599,
  /*  841 */ 2599, 2599, 2599, 2599, 2599, 2599, 3332, 4038, 2599, 3081, 3086, 2599, 2599, 2990, 2599, 2599, 3988, 3994,
  /*  859 */ 2599, 3998, 2599, 3010, 4182, 2599, 2995, 2599, 3092, 4818, 2599, 3144, 2599, 4986, 2599, 2599, 2599, 2599,
  /*  877 */ 2599, 2599, 2905, 2599, 3023, 3028, 2599, 5386, 2599, 2599, 2599, 2599, 3184, 2599, 2599, 2599, 5317, 3049,
  /*  895 */ 2599, 3190, 3196, 2599, 3214, 2599, 2599, 4127, 4132, 2599, 4137, 2599, 2599, 2950, 2955, 2599, 4469, 2599,
  /*  913 */ 2599, 2599, 3932, 2599, 2599, 2599, 2599, 2599, 4957, 4963, 2599, 3054, 3059, 3034, 2599, 2599, 3068, 3074,
  /*  931 */ 2599, 2599, 4174, 4179, 4144, 2599, 2599, 4186, 3202, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 3518, 2599,
  /*  949 */ 4457, 3050, 4733, 3045, 2599, 2599, 3080, 3085, 2599, 3090, 2599, 2599, 2599, 2599, 2599, 2966, 2599, 2599,
  /*  967 */ 3304, 3315, 2599, 2599, 3101, 2599, 2599, 2599, 2599, 5241, 5256, 2599, 3169, 3112, 2599, 3246, 3279, 2599,
  /*  985 */ 3326, 2599, 2599, 2599, 4654, 4659, 4635, 2599, 2599, 2599, 4686, 3070, 3096, 4816, 2599, 3122, 3097, 2599,
  /* 1003 */ 2599, 3131, 3137, 2599, 3321, 3102, 3113, 4984, 3108, 2599, 2599, 3143, 3148, 3412, 2599, 2599, 3164, 2599,
  /* 1021 */ 2599, 2599, 2599, 3292, 2599, 2599, 2599, 3149, 2599, 2599, 3188, 3194, 2599, 3451, 2599, 2599, 4205, 4216,
  /* 1039 */ 4265, 4161, 2599, 2599, 3133, 3139, 3159, 5148, 2599, 3401, 3165, 3200, 3206, 2599, 2599, 3213, 3218, 2599,
  /* 1057 */ 2599, 4514, 2599, 2599, 2599, 2599, 2599, 3999, 4004, 4029, 3223, 2599, 2599, 2599, 2599, 2599, 2599, 2599,
  /* 1075 */ 3572, 2599, 5150, 5243, 3229, 3233, 2599, 3509, 3541, 3524, 3530, 2599, 3568, 2599, 2599, 2599, 2599, 3345,
  /* 1093 */ 3350, 3341, 2599, 3283, 3289, 2599, 2599, 3298, 3303, 2599, 3308, 3225, 3235, 3314, 3319, 2599, 3648, 3659,
  /* 1111 */ 2599, 2599, 4544, 2599, 2599, 2599, 2599, 2599, 2893, 2599, 2599, 3615, 2599, 3714, 2599, 2599, 2599, 2599,
  /* 1129 */ 2599, 3106, 4894, 2599, 3377, 2599, 2599, 3384, 3389, 2599, 3394, 2599, 2599, 4580, 4586, 2642, 4590, 2599,
  /* 1147 */ 4329, 3361, 3400, 3405, 2599, 3756, 3788, 2599, 2599, 2599, 4912, 4932, 4941, 4946, 2599, 3411, 2599, 2599,
  /* 1165 */ 2599, 2599, 2599, 2599, 2599, 3755, 2599, 3815, 2599, 2599, 2599, 2599, 2599, 2599, 3062, 2599, 3443, 3449,
  /* 1183 */ 2599, 3777, 2599, 2599, 2599, 2599, 3432, 3462, 3455, 3407, 3477, 3482, 2599, 3878, 3883, 2599, 2599, 3488,
  /* 1201 */ 3493, 3499, 2599, 3503, 2599, 3852, 3858, 2599, 2599, 4674, 4679, 2599, 4684, 2599, 2599, 3439, 2755, 2759,
  /* 1219 */ 2763, 2767, 2771, 3905, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 3830, 3528, 2599, 3911, 2599, 2599, 2599,
  /* 1237 */ 2599, 2599, 3259, 3264, 3219, 3561, 2599, 3962, 3973, 2599, 2599, 3567, 2599, 2599, 4725, 4730, 4739, 2599,
  /* 1255 */ 2599, 4743, 3578, 2599, 3582, 2599, 3946, 3952, 2599, 4045, 2599, 3990, 2599, 2599, 2599, 2599, 2599, 2599,
  /* 1273 */ 3174, 3179, 3619, 3624, 2599, 3629, 2599, 2599, 2599, 2599, 3603, 3635, 3647, 3652, 2599, 4092, 4128, 2599,
  /* 1291 */ 2599, 3658, 2599, 2599, 2852, 2996, 4406, 3014, 2599, 2599, 2599, 4091, 4096, 4105, 2599, 2599, 2599, 4261,
  /* 1309 */ 4267, 4367, 4372, 5105, 2599, 3673, 2599, 4056, 4078, 2599, 4133, 2599, 2599, 4804, 4809, 4834, 4824, 2599,
  /* 1327 */ 4846, 3678, 3683, 3674, 2599, 2599, 3690, 3696, 2599, 2599, 4992, 4998, 5024, 5029, 2599, 4315, 4139, 2599,
  /* 1345 */ 2599, 2599, 2599, 2599, 2599, 2599, 3968, 2599, 3679, 3709, 3702, 3631, 2599, 2599, 3708, 3713, 2599, 3718,
  /* 1363 */ 2599, 2599, 2599, 2599, 2599, 3294, 2599, 2599, 4155, 4170, 2599, 2599, 3735, 2599, 2599, 2599, 2837, 2976,
  /* 1381 */ 3871, 3765, 2599, 3750, 2599, 4150, 4211, 2599, 4231, 2599, 2599, 2856, 2860, 2864, 2868, 2872, 2876, 3760,
  /* 1399 */ 3725, 2599, 2599, 3769, 3775, 2599, 4222, 3736, 3751, 3781, 3704, 2599, 2599, 3787, 3792, 2599, 3797, 2599,
  /* 1417 */ 2599, 2599, 2599, 2599, 2599, 3255, 3260, 4320, 2599, 2599, 3814, 2599, 2599, 2599, 2599, 3819, 3825, 2599,
  /* 1435 */ 3829, 2599, 4283, 4289, 2599, 4357, 2599, 2599, 2599, 2841, 2599, 2599, 2599, 2599, 2599, 5219, 5261, 5247,
  /* 1453 */ 3846, 2599, 2599, 3850, 3856, 2599, 4341, 2599, 2599, 5154, 5160, 2599, 4708, 2599, 2599, 3588, 3620, 3613,
  /* 1471 */ 3563, 2599, 2599, 2599, 5307, 5312, 5303, 2599, 2599, 2640, 3008, 2599, 2789, 2599, 2599, 2832, 2917, 2916,
  /* 1489 */ 4721, 2599, 2922, 3835, 3862, 3868, 2599, 2599, 3877, 3882, 2599, 2599, 5203, 5209, 2599, 5213, 2599, 4852,
  /* 1507 */ 3887, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 4220, 2599, 3799, 3810, 3893, 3898, 2599, 4431, 4436, 4442,
  /* 1525 */ 4481, 2599, 4462, 2599, 2599, 2599, 2599, 4003, 4008, 3984, 2599, 3950, 3864, 2599, 2599, 3956, 3961, 2599,
  /* 1543 */ 3966, 3889, 3900, 3972, 3977, 2599, 4535, 4555, 2599, 2599, 5339, 5344, 2599, 5349, 2599, 2599, 3904, 2599,
  /* 1561 */ 2599, 2599, 2599, 2599, 3346, 3385, 3371, 2599, 3983, 2599, 2599, 2599, 2599, 2599, 2599, 3418, 3445, 4550,
  /* 1579 */ 2599, 4565, 2599, 2599, 2599, 2599, 2599, 3484, 3495, 3556, 2599, 4017, 4023, 2599, 4101, 2599, 2599, 2599,
  /* 1597 */ 2846, 2599, 2599, 2599, 2599, 2673, 2956, 3595, 4249, 4035, 2599, 2599, 4044, 4049, 2599, 4054, 2599, 2651,
  /* 1615 */ 2599, 2599, 2599, 2599, 2599, 2599, 2672, 2599, 3979, 4060, 4065, 2599, 4619, 4624, 2599, 2599, 2912, 2599,
  /* 1633 */ 2599, 2599, 2599, 2599, 2793, 2599, 2599, 4071, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 4398, 2599, 4076,
  /* 1651 */ 4082, 2599, 4086, 2599, 4630, 4670, 2599, 4680, 2599, 2599, 2599, 2599, 2599, 2599, 3516, 2599, 4109, 4115,
  /* 1669 */ 2599, 4697, 2599, 2599, 2599, 2599, 4072, 4087, 4121, 4019, 4143, 4148, 2599, 4726, 4762, 2599, 2599, 4154,
  /* 1687 */ 4159, 4165, 2599, 4169, 2599, 4773, 4784, 2599, 2749, 3380, 2599, 2931, 2599, 3873, 4937, 4767, 2599, 2599,
  /* 1705 */ 2599, 2599, 2599, 2599, 2599, 4582, 4192, 2599, 4795, 2599, 2599, 2599, 2599, 2599, 3740, 3746, 2599, 4209,
  /* 1723 */ 2599, 4857, 4868, 2599, 2599, 4215, 2599, 2794, 3267, 2718, 2722, 2726, 2730, 2734, 4226, 2599, 4230, 2599,
  /* 1741 */ 4874, 4900, 2599, 4235, 2599, 4239, 4244, 4175, 2599, 2599, 4253, 4259, 2599, 4928, 2599, 2599, 2599, 2599,
  /* 1759 */ 2599, 2599, 3663, 3669, 4271, 4276, 2599, 4281, 2599, 2599, 2599, 2599, 4194, 4200, 4287, 4293, 2599, 5009,
  /* 1777 */ 5014, 2599, 2599, 4299, 2599, 2599, 3239, 2599, 2599, 2599, 2599, 2599, 3064, 3019, 2985, 2599, 4314, 2599,
  /* 1795 */ 5004, 5020, 2599, 5036, 2599, 2975, 2980, 2599, 4935, 2599, 2599, 2599, 2599, 5218, 5223, 5214, 2599, 4319,
  /* 1813 */ 4324, 4240, 2599, 2599, 4333, 4339, 2599, 2986, 2599, 2599, 2599, 2599, 2599, 2599, 2897, 2902, 5083, 2599,
  /* 1831 */ 2599, 2599, 2599, 2599, 2599, 2599, 4719, 2599, 4272, 4277, 4345, 4255, 2599, 2599, 4351, 4356, 2599, 4361,
  /* 1849 */ 2599, 2599, 2599, 2599, 2599, 3924, 3929, 3920, 5121, 5178, 2599, 2599, 4378, 2599, 2599, 2599, 2847, 2599,
  /* 1867 */ 2599, 2599, 2599, 2751, 2599, 2599, 2599, 4393, 2599, 4306, 5162, 2599, 5199, 2599, 2599, 3271, 3277, 2599,
  /* 1885 */ 3552, 2599, 2599, 2599, 4691, 4702, 4755, 4745, 2599, 4403, 4368, 2599, 2599, 4412, 4418, 2599, 5184, 4379,
  /* 1903 */ 4394, 4424, 4347, 2599, 2599, 4430, 4435, 2599, 4440, 2599, 2599, 2599, 2599, 2599, 2599, 3834, 3839, 4414,
  /* 1921 */ 5194, 5249, 2599, 5277, 2599, 2599, 2599, 2936, 2941, 2951, 2599, 2599, 4475, 2599, 4479, 4485, 4491, 2599,
  /* 1939 */ 5272, 2599, 3000, 3005, 2991, 2599, 2599, 5063, 5315, 4497, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 4793,
  /* 1957 */ 2599, 4420, 4426, 4503, 4508, 2599, 5345, 5356, 5329, 5351, 2599, 3643, 2599, 2599, 2599, 2599, 4198, 2599,
  /* 1975 */ 2599, 2599, 4548, 4499, 2599, 2599, 4554, 4559, 2599, 3353, 4510, 4521, 4564, 4569, 2599, 2932, 2937, 2599,
  /* 1993 */ 3118, 2599, 2599, 2599, 2599, 2599, 2599, 4025, 4031, 2599, 4575, 2599, 2599, 2599, 2599, 2599, 2599, 3925,
  /* 2011 */ 3957, 4471, 2599, 2971, 2599, 2599, 2599, 2599, 2599, 4117, 4123, 4204, 2599, 4011, 4099, 2599, 4040, 2599,
  /* 2029 */ 2599, 2599, 2981, 2599, 2599, 2599, 2599, 2605, 2599, 2599, 2599, 3355, 2599, 2599, 4613, 4618, 2599, 4662,
  /* 2047 */ 2599, 3153, 2599, 2599, 2599, 2599, 2599, 2599, 2961, 2599, 4013, 4623, 4628, 2599, 3039, 3055, 2599, 2599,
  /* 2065 */ 3330, 3336, 3273, 3340, 2599, 3609, 4634, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 4976, 2599, 4639, 4645,
  /* 2083 */ 2599, 4649, 2599, 3076, 4735, 5226, 5363, 2599, 3155, 2599, 2599, 2599, 2599, 4385, 5065, 3033, 4542, 4690,
  /* 2101 */ 4695, 2599, 3240, 3299, 2599, 2599, 4701, 4706, 4712, 2599, 4716, 2599, 3285, 3310, 2599, 3170, 3175, 2599,
  /* 2119 */ 2599, 3038, 2599, 2599, 2599, 4519, 4525, 4487, 4529, 2599, 3390, 2599, 2599, 2599, 2599, 2599, 2599, 2599,
  /* 2137 */ 5094, 4749, 2599, 3373, 2599, 2599, 2599, 2599, 2599, 4383, 4389, 4295, 2599, 4761, 4766, 2599, 4771, 2599,
  /* 2155 */ 2599, 2599, 3244, 3250, 2599, 3254, 2599, 4782, 3457, 3546, 3557, 2599, 2599, 4788, 2599, 3325, 2599, 2599,
  /* 2173 */ 2599, 2599, 2599, 2599, 3043, 4603, 4799, 2599, 4803, 2599, 3536, 3574, 2599, 3625, 2599, 4808, 4813, 4778,
  /* 2191 */ 2599, 2599, 4822, 4828, 4840, 4845, 2599, 4850, 2599, 2599, 2599, 2599, 4446, 4452, 4374, 4456, 2599, 3793,
  /* 2209 */ 3804, 2599, 2599, 4867, 2599, 2599, 3461, 3466, 2599, 3471, 2599, 2599, 2599, 5125, 5131, 2599, 5135, 2599,
  /* 2227 */ 2599, 4882, 2599, 3783, 3821, 2599, 3894, 2599, 3359, 3365, 2599, 3698, 2599, 2599, 2599, 2600, 3209, 2609,
  /* 2245 */ 2613, 2617, 4886, 4891, 4887, 2599, 2599, 4898, 4904, 2599, 3367, 3396, 2599, 3467, 2599, 2599, 2599, 2599,
  /* 2263 */ 5308, 5340, 5333, 5283, 3940, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 5205, 2599, 4922, 4942, 4910, 4906,
  /* 2281 */ 2599, 2599, 4916, 4921, 2599, 4926, 2599, 2599, 2599, 2599, 2599, 4534, 4539, 4504, 4050, 4061, 2599, 2599,
  /* 2299 */ 4952, 2599, 2599, 2599, 3431, 3436, 3427, 2599, 2599, 4967, 2599, 4067, 4111, 2599, 4972, 2599, 2599, 3508,
  /* 2317 */ 3513, 3478, 2599, 2599, 3522, 4981, 4953, 2599, 2599, 4990, 4996, 2599, 4188, 4968, 4977, 5002, 4959, 2599,
  /* 2335 */ 2599, 5008, 5013, 2599, 5018, 2599, 2599, 2599, 2599, 2599, 2599, 4461, 4466, 4352, 2599, 2599, 5035, 2599,
  /* 2353 */ 2599, 2599, 2599, 4595, 4600, 4576, 2599, 2599, 4335, 4363, 2599, 4399, 2599, 2599, 2599, 3489, 3504, 3534,
  /* 2371 */ 3473, 2599, 5051, 2599, 2599, 5069, 5075, 2599, 4448, 2599, 3416, 3422, 2599, 3426, 2599, 3742, 3771, 5099,
  /* 2389 */ 5081, 5031, 5087, 2599, 5093, 5098, 2599, 3540, 3545, 2599, 3550, 2599, 2599, 2599, 2714, 2599, 2599, 2599,
  /* 2407 */ 2599, 2842, 2599, 2599, 2599, 5103, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 4515, 4530, 2599, 5071, 5077,
  /* 2425 */ 5109, 5114, 2599, 4560, 4591, 2599, 4571, 5120, 2599, 2599, 2599, 2599, 2599, 4596, 4614, 4607, 4609, 4664,
  /* 2443 */ 2599, 4675, 2599, 2599, 2599, 2599, 4650, 4655, 4668, 4641, 5166, 5116, 2599, 2599, 5172, 5177, 2599, 5182,
  /* 2461 */ 5127, 5156, 5188, 5192, 2599, 4789, 4841, 2599, 3587, 3592, 3583, 2599, 2599, 3601, 3607, 2599, 5198, 2599,
  /* 2479 */ 2599, 2599, 2599, 2599, 2599, 4872, 4878, 4863, 2599, 4917, 2599, 2599, 2599, 2599, 2599, 4751, 4757, 4777,
  /* 2497 */ 2599, 5232, 5238, 2599, 4948, 2599, 2599, 2599, 3665, 3692, 3724, 3729, 2599, 5253, 2599, 2599, 5260, 5265,
  /* 2515 */ 2599, 5270, 2599, 3654, 2599, 2599, 2599, 2599, 2599, 2599, 4304, 4310, 5234, 5276, 5281, 2599, 5025, 5056,
  /* 2533 */ 2599, 2599, 3720, 3731, 3803, 3808, 2599, 4300, 5287, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 5055, 5060,
  /* 2551 */ 2599, 5292, 5298, 2599, 5302, 2599, 5042, 5089, 2599, 5110, 2599, 2599, 2599, 2599, 2599, 2599, 5141, 5173,
  /* 2569 */ 5321, 5327, 2599, 5168, 2599, 2599, 2599, 2599, 4830, 4836, 4856, 4861, 5355, 5360, 2599, 5266, 5288, 2599,
  /* 2587 */ 2599, 5369, 2599, 5374, 5370, 5378, 2599, 5335, 5383, 5379, 5392, 5892, 5397, 5397, 5397, 5397, 5396, 6046,
  /* 2605 */ 5397, 5397, 5397, 5398, 5410, 5414, 5418, 5422, 5426, 5430, 5434, 5438, 5442, 5446, 5450, 5454, 5458, 5462,
  /* 2623 */ 5466, 5470, 5474, 5478, 5482, 5486, 5490, 5494, 5498, 5502, 5506, 5510, 5514, 5518, 5522, 5526, 5530, 5397,
  /* 2641 */ 5551, 5397, 5397, 8243, 5397, 5544, 5397, 5549, 5397, 5556, 5397, 5397, 6411, 5397, 5570, 5397, 5397, 5397,
  /* 2659 */ 5577, 5397, 8662, 5397, 5397, 5596, 5397, 5397, 8877, 5397, 5397, 5746, 5397, 6561, 5397, 5397, 5397, 5592,
  /* 2677 */ 6222, 5602, 5606, 5611, 5615, 5619, 5623, 5627, 5631, 5635, 5639, 5643, 5647, 5651, 5655, 5659, 5663, 5667,
  /* 2695 */ 5671, 5675, 5679, 5683, 5687, 5691, 5695, 5699, 5703, 5707, 5711, 5715, 5719, 5723, 5727, 5731, 5735, 5739,
  /* 2713 */ 5743, 5397, 5397, 5397, 5607, 5763, 5767, 5771, 5775, 5779, 5783, 5787, 5791, 5795, 5799, 5803, 5807, 5811,
  /* 2731 */ 5815, 5819, 5823, 5827, 5831, 5835, 5839, 5843, 5847, 5851, 5855, 5859, 5863, 5867, 5871, 5875, 5879, 5883,
  /* 2749 */ 5397, 5573, 5397, 5397, 6438, 5397, 5896, 5900, 5904, 5908, 5912, 5916, 5920, 5924, 5928, 5932, 5936, 5940,
  /* 2767 */ 5944, 5948, 5952, 5956, 5960, 5964, 5968, 5972, 5976, 5980, 5984, 5988, 5992, 5996, 6000, 6004, 6008, 6012,
  /* 2785 */ 6016, 6020, 6024, 6028, 5397, 5397, 6037, 5397, 6427, 5397, 5397, 5397, 5750, 6050, 6054, 6058, 6062, 6066,
  /* 2803 */ 6070, 6074, 6078, 6082, 6086, 6090, 6094, 6098, 6102, 6106, 6110, 6114, 6118, 6122, 6126, 6130, 6134, 6138,
  /* 2821 */ 6142, 6146, 6150, 6154, 6158, 6162, 6166, 6170, 6174, 6178, 6182, 5397, 5397, 6383, 5397, 6486, 5397, 5397,
  /* 2839 */ 5397, 6185, 6502, 5397, 5397, 5397, 6196, 6189, 5397, 5397, 5397, 6210, 5533, 5397, 5397, 5397, 6213, 5540,
  /* 2857 */ 6217, 6221, 6226, 6230, 6234, 6238, 6242, 6246, 6250, 6254, 6258, 6262, 6266, 6270, 6274, 6278, 6282, 6286,
  /* 2875 */ 6290, 6294, 6298, 6302, 6306, 6310, 6314, 6318, 6322, 6326, 6330, 6334, 6338, 6342, 6346, 6350, 6354, 6358,
  /* 2893 */ 5397, 5397, 5397, 6362, 5563, 5397, 5397, 5397, 6377, 6367, 5397, 6372, 5397, 5582, 5397, 5397, 5545, 5397,
  /* 2911 */ 5578, 5397, 5397, 5397, 6384, 6368, 5397, 5397, 5397, 6388, 6373, 5397, 5397, 5397, 6399, 6454, 5397, 5397,
  /* 2929 */ 5397, 6404, 6431, 5397, 5397, 5397, 6417, 5585, 5397, 5397, 5397, 6433, 6437, 5397, 6442, 5397, 5589, 5397,
  /* 2947 */ 5397, 5560, 5397, 6571, 5397, 5397, 5397, 6447, 6576, 5397, 5397, 5397, 6453, 6474, 5397, 5397, 5397, 6459,
  /* 2965 */ 6608, 5397, 5397, 5397, 6491, 6495, 5397, 5397, 5397, 6497, 6656, 5397, 5397, 5397, 6501, 6661, 5397, 5397,
  /* 2983 */ 5397, 6518, 6522, 5397, 5397, 5397, 6539, 6697, 5397, 5397, 5397, 6559, 6543, 5397, 5397, 5397, 6565, 6206,
  /* 3001 */ 5397, 5397, 5397, 6592, 6549, 5397, 6554, 5397, 5598, 5397, 5397, 8244, 5397, 6575, 5397, 6580, 5397, 6031,
  /* 3019 */ 5397, 5397, 6517, 5397, 6772, 5397, 5397, 5397, 6603, 6777, 5397, 5397, 5397, 6629, 6591, 5397, 5397, 5397,
  /* 3037 */ 6633, 6817, 5397, 5397, 5397, 6635, 5397, 8080, 5397, 5397, 6649, 5397, 6617, 5397, 5397, 5397, 6639, 8107,
  /* 3055 */ 5397, 5397, 5397, 6651, 6623, 5397, 6628, 5397, 6035, 5397, 5397, 6192, 5397, 5397, 6847, 5397, 5397, 6655,
  /* 3073 */ 5397, 5397, 6862, 5397, 5397, 6683, 5397, 6882, 5397, 5397, 5397, 6677, 6887, 5397, 5397, 5397, 6692, 5397,
  /* 3091 */ 6892, 5397, 5397, 6712, 5397, 6660, 5397, 5397, 5397, 6701, 6927, 5397, 5397, 5397, 6707, 5397, 9086, 5397,
  /* 3109 */ 5397, 6721, 5397, 6681, 5397, 5397, 5397, 6711, 6687, 5397, 5397, 5397, 6723, 6691, 5397, 6696, 5397, 6199,
  /* 3127 */ 5397, 5397, 6566, 5397, 5397, 6957, 5397, 5397, 6727, 5397, 5397, 6972, 5397, 5397, 6731, 5397, 6982, 5397,
  /* 3145 */ 5397, 5397, 6732, 6997, 5397, 5397, 5397, 6781, 5397, 7002, 5397, 5397, 6783, 5397, 6736, 5397, 5397, 5397,
  /* 3163 */ 6787, 7037, 5397, 5397, 5397, 6791, 6761, 5397, 5397, 5397, 6797, 6767, 5397, 5397, 5397, 6802, 6771, 5397,
  /* 3181 */ 6776, 5397, 6203, 5397, 5397, 6410, 5397, 5397, 7077, 5397, 5397, 6822, 5397, 5397, 7082, 5397, 5397, 6827,
  /* 3199 */ 5397, 5397, 6796, 5397, 5397, 6867, 5397, 6801, 5397, 6806, 5397, 6363, 5402, 5406, 7102, 5397, 5397, 5397,
  /* 3217 */ 6842, 7117, 5397, 5397, 5397, 6871, 5397, 7122, 5397, 5397, 6902, 5397, 6821, 5397, 5397, 6826, 5397, 6831,
  /* 3235 */ 5397, 5397, 6906, 5397, 7157, 5397, 5397, 5397, 6873, 5397, 6837, 5397, 5397, 6932, 5397, 5397, 6841, 5397,
  /* 3253 */ 6846, 6851, 5397, 5397, 5397, 6877, 6857, 5397, 5397, 5397, 6881, 6861, 5397, 6866, 5397, 6389, 5755, 5759,
  /* 3271 */ 5397, 7197, 5397, 5397, 6936, 5397, 5397, 7202, 5397, 5397, 6937, 5397, 5397, 6886, 5397, 5397, 6943, 5397,
  /* 3289 */ 6891, 5397, 6896, 5397, 6400, 5397, 5397, 5751, 5397, 7222, 5397, 5397, 5397, 6898, 7241, 5397, 5397, 5397,
  /* 3307 */ 6907, 5397, 7246, 5397, 5397, 6963, 5397, 6911, 5397, 5397, 5397, 6912, 5397, 6916, 5397, 5397, 6977, 5397,
  /* 3325 */ 7281, 5397, 5397, 5397, 6952, 5397, 6922, 5397, 5397, 6992, 5397, 5397, 6926, 5397, 6931, 6941, 5397, 5397,
  /* 3343 */ 5397, 6961, 6947, 5397, 5397, 5397, 6967, 6951, 5397, 6956, 5397, 6406, 5397, 5397, 8288, 5397, 5397, 7321,
  /* 3361 */ 5397, 5397, 6996, 5397, 5397, 7326, 5397, 5397, 7042, 5397, 5397, 6976, 5397, 5397, 7048, 5397, 6981, 5397,
  /* 3379 */ 6986, 5397, 6421, 5397, 6426, 7346, 5397, 5397, 5397, 6971, 7361, 5397, 5397, 5397, 6988, 5397, 7366, 5397,
  /* 3397 */ 5397, 7057, 5397, 7001, 5397, 5397, 5397, 7017, 5397, 7006, 5397, 5397, 7066, 5397, 7401, 5397, 5397, 5397,
  /* 3415 */ 7022, 5397, 7012, 5397, 5397, 7072, 5397, 5397, 7016, 5397, 7021, 7026, 5397, 5397, 5397, 7046, 7032, 5397,
  /* 3433 */ 5397, 5397, 7052, 7036, 5397, 7041, 5397, 6422, 5887, 5891, 5397, 7441, 5397, 5397, 7076, 5397, 5397, 7446,
  /* 3451 */ 5397, 5397, 7097, 5397, 5397, 7061, 5397, 5397, 7128, 5397, 7466, 5397, 5397, 5397, 7056, 7471, 5397, 5397,
  /* 3469 */ 5397, 7062, 5397, 7476, 5397, 5397, 7146, 5397, 7081, 5397, 5397, 5397, 7126, 5397, 7086, 5397, 5397, 7152,
  /* 3487 */ 5397, 7511, 5397, 5397, 5397, 7132, 5397, 7092, 5397, 5397, 7156, 5397, 5397, 7096, 5397, 7101, 7106, 5397,
  /* 3505 */ 5397, 5397, 7136, 7112, 5397, 5397, 5397, 7137, 7116, 5397, 7121, 5397, 6443, 5397, 5397, 6415, 5397, 5397,
  /* 3523 */ 7551, 5397, 5397, 7162, 5397, 5397, 7556, 5397, 5397, 7177, 5397, 5397, 7141, 5397, 5397, 7208, 5397, 7576,
  /* 3541 */ 5397, 5397, 5397, 7142, 7591, 5397, 5397, 5397, 7148, 5397, 7596, 5397, 5397, 7217, 5397, 7161, 5397, 5397,
  /* 3559 */ 5397, 7168, 5397, 7166, 5397, 5397, 7226, 5397, 7631, 5397, 5397, 5397, 7182, 5397, 7172, 5397, 5397, 7228,
  /* 3577 */ 5397, 5397, 7176, 5397, 7181, 7186, 5397, 5397, 5397, 7206, 7192, 5397, 5397, 5397, 7212, 7196, 5397, 7201,
  /* 3595 */ 5397, 6458, 5397, 5397, 6469, 5397, 5397, 7661, 5397, 5397, 7236, 5397, 5397, 7676, 5397, 5397, 7286, 5397,
  /* 3613 */ 5397, 7221, 5397, 5397, 7301, 5397, 7696, 5397, 5397, 5397, 7216, 7701, 5397, 5397, 5397, 7252, 5397, 7232,
  /* 3631 */ 5397, 5397, 7310, 5397, 5397, 7706, 7240, 5397, 6470, 5555, 5397, 5567, 5397, 5397, 5397, 9097, 7245, 5397,
  /* 3649 */ 5397, 5397, 7261, 5397, 7250, 5397, 5397, 7312, 5397, 7741, 5397, 5397, 5397, 7266, 5397, 7256, 5397, 5397,
  /* 3667 */ 7316, 5397, 5397, 7260, 5397, 7265, 7270, 5397, 5397, 5397, 7290, 7276, 5397, 5397, 5397, 7296, 7280, 5397,
  /* 3685 */ 7285, 5397, 6475, 6041, 6045, 5397, 7781, 5397, 5397, 7320, 5397, 5397, 7786, 5397, 5397, 7341, 5397, 5397,
  /* 3703 */ 7305, 5397, 5397, 7390, 5397, 7806, 5397, 5397, 5397, 7300, 7821, 5397, 5397, 5397, 7306, 5397, 7826, 5397,
  /* 3721 */ 5397, 7396, 5397, 7325, 5397, 5397, 5397, 7370, 5397, 7330, 5397, 5397, 7400, 5397, 7861, 5397, 5397, 5397,
  /* 3739 */ 7376, 5397, 7336, 5397, 5397, 7406, 5397, 5397, 7340, 5397, 7345, 7350, 5397, 5397, 5397, 7380, 7356, 5397,
  /* 3757 */ 5397, 5397, 7381, 7360, 5397, 7365, 5397, 6479, 5397, 5397, 6511, 5397, 5397, 7891, 5397, 5397, 7421, 5397,
  /* 3775 */ 5397, 7906, 5397, 5397, 7451, 5397, 5397, 7385, 5397, 5397, 7482, 5397, 7926, 5397, 5397, 5397, 7386, 7931,
  /* 3793 */ 5397, 5397, 5397, 7392, 5397, 7946, 5397, 5397, 7486, 5397, 7405, 5397, 5397, 5397, 7412, 5397, 7410, 5397,
  /* 3811 */ 5397, 7490, 5397, 7971, 5397, 5397, 5397, 7426, 5397, 7416, 5397, 5397, 7502, 5397, 5397, 7420, 5397, 7425,
  /* 3829 */ 7430, 5397, 5397, 5397, 7461, 7436, 5397, 5397, 5397, 7465, 7440, 5397, 7445, 5397, 6485, 5397, 6490, 5397,
  /* 3847 */ 7450, 5397, 7455, 5397, 8015, 5397, 5397, 7516, 5397, 5397, 8020, 5397, 5397, 7531, 5397, 5397, 7470, 5397,
  /* 3865 */ 5397, 7560, 5397, 7475, 5397, 7480, 5397, 6506, 5397, 5397, 6523, 5397, 8040, 5397, 5397, 5397, 7491, 8055,
  /* 3883 */ 5397, 5397, 5397, 7496, 5397, 8060, 5397, 5397, 7566, 5397, 7495, 5397, 5397, 5397, 7522, 5397, 7500, 5397,
  /* 3901 */ 5397, 7570, 5397, 8129, 5397, 5397, 5397, 7536, 5397, 7506, 5397, 5397, 7571, 5397, 5397, 7510, 5397, 7515,
  /* 3919 */ 7520, 5397, 5397, 5397, 7540, 7526, 5397, 5397, 5397, 7546, 7530, 5397, 7535, 5397, 6507, 5397, 5397, 5537,
  /* 3937 */ 5397, 5397, 8159, 5397, 5397, 7582, 5397, 5397, 8174, 5397, 5397, 7636, 5397, 5397, 7555, 5397, 5397, 7641,
  /* 3955 */ 5397, 8194, 5397, 5397, 5397, 7550, 8199, 5397, 5397, 5397, 7611, 5397, 8214, 5397, 5397, 7651, 5397, 7575,
  /* 3973 */ 5397, 5397, 5397, 7616, 5397, 7580, 5397, 5397, 7655, 5397, 8239, 5397, 5397, 5397, 7620, 5397, 7586, 5397,
  /* 3991 */ 5397, 7681, 5397, 5397, 7590, 5397, 7595, 7600, 5397, 5397, 5397, 7626, 7606, 5397, 5397, 5397, 7630, 7610,
  /* 4009 */ 5397, 7615, 5397, 6513, 5397, 5397, 8298, 5397, 5397, 8279, 5397, 5397, 7730, 5397, 5397, 8284, 5397, 5397,
  /* 4027 */ 7736, 5397, 5397, 7635, 5397, 5397, 7740, 5397, 7640, 5397, 7645, 5397, 6527, 5397, 5397, 6545, 5397, 8304,
  /* 4045 */ 5397, 5397, 5397, 7656, 8319, 5397, 5397, 5397, 7687, 5397, 8324, 5397, 5397, 7746, 5397, 7660, 5397, 5397,
  /* 4063 */ 5397, 7712, 5397, 7665, 5397, 5397, 7752, 5397, 8359, 5397, 5397, 5397, 7716, 5397, 7671, 5397, 5397, 7761,
  /* 4081 */ 5397, 5397, 7675, 5397, 7680, 7685, 5397, 5397, 5397, 7720, 7691, 5397, 5397, 5397, 7721, 7695, 5397, 7700,
  /* 4099 */ 5397, 6529, 5397, 5397, 8299, 5397, 5397, 7705, 5397, 7710, 5397, 8399, 5397, 5397, 7772, 5397, 5397, 8404,
  /* 4117 */ 5397, 5397, 7796, 5397, 5397, 7725, 5397, 5397, 7800, 5397, 8431, 5397, 5397, 5397, 7726, 8436, 5397, 5397,
  /* 4135 */ 5397, 7766, 5397, 8451, 5397, 5397, 7801, 5397, 7745, 5397, 5397, 5397, 7790, 5397, 7750, 5397, 5397, 7866,
  /* 4153 */ 5397, 8476, 5397, 5397, 5397, 7841, 5397, 7756, 5397, 5397, 7870, 5397, 5397, 7760, 5397, 7765, 7770, 5397,
  /* 4171 */ 5397, 5397, 7846, 7776, 5397, 5397, 5397, 7850, 7780, 5397, 7785, 5397, 6533, 5397, 6538, 5397, 8516, 5397,
  /* 4189 */ 5397, 7872, 5397, 5397, 8531, 5397, 5397, 7876, 5397, 5397, 8557, 5397, 5397, 7880, 7885, 7805, 5397, 5397,
  /* 4207 */ 5397, 7856, 5397, 7810, 5397, 5397, 7881, 5397, 8582, 5397, 5397, 5397, 7860, 5397, 7816, 5397, 5397, 7911,
  /* 4225 */ 5397, 5397, 7820, 5397, 7825, 7830, 5397, 5397, 5397, 7886, 5397, 8617, 5397, 8622, 7836, 5397, 5397, 5397,
  /* 4243 */ 7935, 7840, 5397, 7845, 5397, 6550, 5397, 5397, 6463, 5397, 5397, 8637, 5397, 5397, 7955, 5397, 5397, 8642,
  /* 4261 */ 5397, 5397, 7961, 5397, 5397, 7865, 5397, 5397, 7965, 5397, 8677, 5397, 5397, 5397, 7941, 8682, 5397, 5397,
  /* 4279 */ 5397, 7945, 5397, 8697, 5397, 5397, 7986, 5397, 7890, 8702, 5397, 5397, 7991, 5397, 5397, 7895, 5397, 5397,
  /* 4297 */ 7995, 5397, 8737, 5397, 5397, 5397, 7951, 5397, 7901, 5397, 5397, 8006, 5397, 5397, 7905, 5397, 7910, 7915,
  /* 4315 */ 5397, 5397, 5397, 7957, 7921, 5397, 5397, 5397, 7966, 7925, 5397, 7930, 5397, 6555, 5397, 5397, 6465, 5397,
  /* 4333 */ 5397, 8777, 5397, 5397, 8026, 5397, 5397, 8782, 5397, 5397, 8035, 5397, 5397, 7950, 5397, 5397, 8044, 5397,
  /* 4351 */ 8802, 5397, 5397, 5397, 7977, 8817, 5397, 5397, 5397, 7996, 5397, 8822, 5397, 5397, 8046, 5397, 7970, 5397,
  /* 4369 */ 5397, 5397, 8024, 5397, 7975, 5397, 5397, 8064, 5397, 8862, 5397, 5397, 5397, 8030, 5397, 7981, 5397, 5397,
  /* 4387 */ 8067, 5397, 5397, 7985, 5397, 7990, 8000, 5397, 5397, 5397, 8034, 8010, 5397, 5397, 5397, 8073, 8014, 5397,
  /* 4405 */ 8019, 5397, 6570, 5397, 5397, 6613, 5397, 5397, 8902, 5397, 5397, 8077, 5397, 5397, 8907, 5397, 5397, 8124,
  /* 4423 */ 5397, 5397, 8039, 5397, 5397, 8128, 5397, 8927, 5397, 5397, 5397, 8095, 8948, 5397, 5397, 5397, 8100, 5397,
  /* 4441 */ 8953, 5397, 5397, 8134, 5397, 5397, 8050, 5397, 5397, 8140, 5397, 5397, 8054, 5397, 8059, 8071, 5397, 5397,
  /* 4459 */ 5397, 8120, 8090, 5397, 5397, 5397, 8154, 8094, 5397, 8099, 5397, 6587, 5397, 5397, 6481, 5397, 5397, 8104,
  /* 4477 */ 5397, 8111, 5397, 8117, 5397, 5397, 8149, 5397, 5397, 8997, 5397, 5397, 8158, 5397, 5397, 9002, 5397, 5397,
  /* 4495 */ 8179, 5397, 5397, 9022, 5397, 5397, 8203, 5397, 8133, 5397, 5397, 5397, 8183, 5397, 8138, 5397, 5397, 8209,
  /* 4513 */ 5397, 9057, 5397, 5397, 5397, 8189, 5397, 8144, 5397, 5397, 8213, 5397, 5397, 8148, 5397, 8153, 8163, 5397,
  /* 4531 */ 5397, 5397, 8193, 8169, 5397, 5397, 5397, 8219, 8173, 5397, 8178, 5397, 6596, 5397, 5397, 6645, 5397, 5397,
  /* 4549 */ 8198, 5397, 5397, 8259, 5397, 6379, 5397, 5397, 5397, 8234, 6395, 5397, 5397, 5397, 8250, 8218, 5397, 5397,
  /* 4567 */ 5397, 8264, 5397, 8223, 5397, 5397, 8290, 5397, 6449, 5397, 5397, 5397, 8268, 5397, 8229, 5397, 5397, 8294,
  /* 4585 */ 5397, 5397, 8233, 5397, 8238, 8248, 5397, 5397, 5397, 8270, 8254, 5397, 5397, 5397, 8274, 8258, 5397, 8263,
  /* 4603 */ 5397, 6602, 5397, 6607, 5397, 8283, 5397, 5397, 8330, 5397, 6582, 5397, 5397, 5397, 8278, 6598, 5397, 5397,
  /* 4621 */ 5397, 8339, 8303, 5397, 5397, 5397, 8344, 5397, 8308, 5397, 5397, 8364, 5397, 6667, 5397, 5397, 5397, 8348,
  /* 4639 */ 5397, 8314, 5397, 5397, 8368, 5397, 5397, 8318, 5397, 8323, 8328, 5397, 5397, 5397, 8354, 8334, 5397, 5397,
  /* 4657 */ 5397, 8358, 8338, 5397, 8343, 5397, 6619, 5397, 5397, 8350, 5397, 5397, 8363, 5397, 5397, 8379, 5397, 6808,
  /* 4675 */ 5397, 5397, 5397, 8370, 6833, 5397, 5397, 5397, 8384, 5397, 6853, 5397, 5397, 8417, 5397, 8383, 5397, 5397,
  /* 4693 */ 5397, 8446, 5397, 8388, 5397, 5397, 8426, 5397, 6918, 5397, 5397, 5397, 8450, 5397, 8394, 5397, 5397, 8442,
  /* 4711 */ 5397, 5397, 8398, 5397, 8403, 8408, 5397, 8414, 5397, 6640, 5397, 5397, 6393, 5397, 8421, 5397, 5397, 5397,
  /* 4729 */ 8456, 8425, 5397, 8430, 5397, 6644, 5397, 5397, 6703, 5397, 5397, 8435, 5397, 8440, 5397, 7008, 5397, 5397,
  /* 4747 */ 8460, 5397, 5397, 7028, 5397, 5397, 8466, 5397, 5397, 8455, 5397, 5397, 8470, 5397, 7068, 5397, 5397, 5397,
  /* 4765 */ 8471, 7088, 5397, 5397, 5397, 8511, 5397, 7108, 5397, 5397, 8491, 5397, 8475, 5397, 5397, 5397, 8520, 5397,
  /* 4783 */ 8480, 5397, 5397, 8496, 5397, 7188, 5397, 5397, 5397, 8522, 5397, 8486, 5397, 5397, 8536, 5397, 5397, 8490,
  /* 4801 */ 5397, 8495, 8500, 5397, 5397, 5397, 8526, 8506, 5397, 5397, 5397, 8530, 8510, 5397, 8515, 5397, 6665, 5397,
  /* 4819 */ 5397, 6717, 5397, 5397, 7272, 5397, 5397, 8540, 5397, 5397, 7292, 5397, 5397, 8552, 5397, 5397, 8535, 5397,
  /* 4837 */ 5397, 8556, 5397, 7332, 5397, 5397, 5397, 8542, 7352, 5397, 5397, 5397, 8546, 5397, 7372, 5397, 5397, 8568,
  /* 4855 */ 5397, 8561, 5397, 5397, 5397, 8562, 5397, 8566, 5397, 5397, 8588, 5397, 7432, 5397, 5397, 5397, 8577, 5397,
  /* 4873 */ 8572, 5397, 5397, 8597, 5397, 5397, 8576, 5397, 8581, 8586, 5397, 5397, 7457, 8592, 5397, 5397, 5397, 8606,
  /* 4891 */ 8596, 5397, 8601, 5397, 6671, 5397, 6676, 5397, 7542, 5397, 5397, 8602, 5397, 5397, 7562, 5397, 5397, 8626,
  /* 4909 */ 5397, 5397, 8621, 5397, 5397, 8632, 5397, 7602, 5397, 5397, 5397, 8608, 7622, 5397, 5397, 5397, 8612, 5397,
  /* 4927 */ 7647, 5397, 5397, 8657, 5397, 5397, 7667, 8636, 5397, 6672, 5397, 5397, 6534, 5397, 8641, 5397, 5397, 5397,
  /* 4945 */ 8616, 5397, 8646, 5397, 5397, 8668, 5397, 7732, 5397, 5397, 5397, 8686, 5397, 8652, 5397, 5397, 8706, 5397,
  /* 4963 */ 5397, 8656, 5397, 8661, 8666, 5397, 5397, 5397, 8692, 5397, 7792, 5397, 7812, 8672, 5397, 5397, 5397, 8696,
  /* 4981 */ 8676, 5397, 8681, 5397, 6716, 5397, 5397, 6757, 5397, 5397, 7832, 5397, 5397, 8712, 5397, 5397, 7852, 5397,
  /* 4999 */ 5397, 8716, 5397, 5397, 8701, 5397, 5397, 8742, 5397, 7897, 5397, 5397, 5397, 8717, 7917, 5397, 5397, 5397,
  /* 5017 */ 8722, 5397, 7937, 5397, 5397, 8757, 5397, 8721, 5397, 5397, 5397, 8748, 5397, 8726, 5397, 5397, 8786, 5397,
  /* 5035 */ 8002, 5397, 5397, 5397, 8762, 5397, 8732, 5397, 5397, 8788, 5397, 5397, 8736, 5397, 8741, 8746, 5397, 5397,
  /* 5053 */ 5397, 8766, 8752, 5397, 5397, 5397, 8768, 8756, 5397, 8761, 5397, 6737, 5397, 5397, 6586, 5397, 5397, 8086,
  /* 5071 */ 5397, 5397, 8792, 5397, 5397, 8113, 5397, 5397, 8796, 5397, 5397, 8781, 5397, 5397, 8797, 5397, 5397, 8165,
  /* 5089 */ 5397, 5397, 8808, 5397, 8185, 5397, 5397, 5397, 8772, 8205, 5397, 5397, 5397, 8776, 5397, 8225, 5397, 5397,
  /* 5107 */ 8837, 5397, 8801, 5397, 5397, 5397, 8828, 5397, 8806, 5397, 5397, 8866, 5397, 8310, 5397, 5397, 5397, 8842,
  /* 5125 */ 5397, 8812, 5397, 5397, 8872, 5397, 5397, 8816, 5397, 8821, 8826, 5397, 5397, 5397, 8846, 8832, 5397, 5397,
  /* 5143 */ 5397, 8852, 8836, 5397, 8841, 5397, 6741, 5397, 5397, 6812, 5397, 5397, 8390, 5397, 5397, 8876, 5397, 5397,
  /* 5161 */ 8410, 5397, 5397, 8882, 5397, 5397, 8861, 5397, 5397, 8893, 5397, 8462, 5397, 5397, 5397, 8856, 8482, 5397,
  /* 5179 */ 5397, 5397, 8857, 5397, 8502, 5397, 5397, 8922, 5397, 8881, 5397, 5397, 8886, 5397, 8891, 5397, 5397, 8958,
  /* 5197 */ 5397, 8548, 5397, 5397, 5397, 8887, 5397, 8897, 5397, 5397, 8968, 5397, 5397, 8901, 5397, 8906, 8911, 5397,
  /* 5215 */ 5397, 5397, 8931, 8917, 5397, 5397, 5397, 8943, 8921, 5397, 8926, 5397, 6743, 5397, 5397, 8374, 5397, 5397,
  /* 5233 */ 8628, 5397, 5397, 8972, 5397, 5397, 8648, 8937, 5397, 6747, 5397, 5397, 6816, 5397, 5397, 8952, 5397, 5397,
  /* 5251 */ 8973, 8084, 8957, 5397, 8962, 5397, 6751, 5397, 6756, 8688, 5397, 5397, 5397, 8947, 8708, 5397, 5397, 5397,
  /* 5269 */ 8964, 5397, 8728, 5397, 5397, 9017, 5397, 8977, 5397, 5397, 5397, 8978, 5397, 8982, 5397, 5397, 9046, 5397,
  /* 5287 */ 8988, 5397, 5397, 5397, 8984, 5397, 8992, 5397, 5397, 9052, 5397, 5397, 8996, 5397, 9001, 9006, 5397, 5397,
  /* 5305 */ 5397, 9026, 9012, 5397, 5397, 5397, 9032, 9016, 5397, 9021, 5397, 6752, 5397, 5397, 6612, 5397, 5397, 8848,
  /* 5323 */ 5397, 5397, 9056, 5397, 5397, 8868, 5397, 5397, 9062, 5397, 5397, 9041, 5397, 5397, 9068, 5397, 8913, 5397,
  /* 5341 */ 5397, 5397, 9036, 8933, 5397, 5397, 5397, 9037, 5397, 8939, 5397, 5397, 9073, 5397, 9061, 5397, 5397, 5397,
  /* 5359 */ 9042, 5397, 9066, 5397, 5397, 6763, 5397, 5397, 8378, 5397, 9008, 5397, 5397, 5397, 9048, 5397, 9072, 5397,
  /* 5377 */ 9028, 9077, 5397, 5397, 5397, 9090, 5397, 9083, 9079, 5397, 6792, 5397, 5397, 6624, 5397, 9096, 9101, 5397,
  /* 5395 */ 9092, 435, 0, 0, 0, 0, 285, 437, 438, 439, 440, 0, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451,
  /* 5418 */ 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472,
  /* 5439 */ 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493,
  /* 5460 */ 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 0, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514,
  /* 5482 */ 515, 516, 0, 517, 518, 0, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534,
  /* 5504 */ 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555,
  /* 5525 */ 556, 557, 558, 559, 560, 561, 562, 563, 0, 0, 0, 2098, 0, 852, 853, 0, 0, 0, 2099, 854, 0, 0, 0, 291, 0,
  /* 5550 */ 855, 0, 0, 0, 1728, 857, 0, 0, 0, 292, 0, 858, 859, 0, 0, 286, 287, 860, 861, 862, 0, 0, 863, 0, 0, 1006,
  /* 5576 */ 1007, 1162, 0, 0, 0, 293, 0, 0, 1574, 0, 0, 1014, 1015, 0, 0, 1575, 0, 0, 1022, 1023, 1576, 1577, 0, 0, 0,
  /* 5601 */ 1729, 299, 300, 301, 302, 303, 0, 0, 0, 294, 304, 305, 306, 307, 308, 309, 310, 311, 0, 312, 313, 314, 315,
  /* 5624 */ 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336,
  /* 5645 */ 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
  /* 5666 */ 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 0, 376, 377, 378,
  /* 5688 */ 379, 380, 381, 382, 383, 384, 385, 386, 387, 0, 388, 389, 0, 390, 391, 392, 393, 394, 395, 396, 397, 398,
  /* 5710 */ 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
  /* 5731 */ 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 0, 0, 1030, 1031, 573, 0, 0, 0,
  /* 5754 */ 295, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
  /* 5775 */ 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615,
  /* 5796 */ 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636,
  /* 5817 */ 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 0, 657,
  /* 5839 */ 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678,
  /* 5860 */ 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
  /* 5881 */ 700, 701, 702, 703, 704, 705, 709, 710, 711, 712, 713, 0, 0, 0, 296, 714, 715, 716, 717, 718, 719, 720,
  /* 5903 */ 721, 0, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
  /* 5925 */ 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
  /* 5946 */ 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
  /* 5967 */ 784, 785, 0, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 0, 798, 799, 0, 800, 801, 802,
  /* 5989 */ 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
  /* 6010 */ 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 0,
  /* 6032 */ 0, 1038, 1039, 0, 850, 0, 0, 0, 1730, 865, 866, 867, 868, 869, 0, 0, 0, 297, 870, 871, 872, 873, 874, 875,
  /* 6056 */ 876, 877, 0, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
  /* 6078 */ 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
  /* 6099 */ 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
  /* 6120 */ 939, 940, 941, 0, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 0, 954, 955, 0, 956, 957,
  /* 6142 */ 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
  /* 6163 */ 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999,
  /* 6184 */ 1000, 0, 0, 1048, 1049, 0, 0, 1915, 0, 0, 1056, 1057, 0, 0, 1916, 0, 0, 1064, 1065, 0, 0, 1942, 0, 0, 1072,
  /* 6209 */ 1073, 0, 0, 2069, 0, 0, 1080, 1081, 2100, 2101, 2102, 2103, 2104, 0, 0, 0, 298, 2105, 2106, 2107, 2108,
  /* 6230 */ 2109, 2110, 2111, 2112, 0, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125,
  /* 6248 */ 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143,
  /* 6266 */ 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161,
  /* 6284 */ 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 0, 2177, 2178,
  /* 6302 */ 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 0, 2189, 2190, 0, 2191, 2192, 2193, 2194, 2195,
  /* 6321 */ 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213,
  /* 6339 */ 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231,
  /* 6357 */ 2232, 2233, 2234, 2235, 2236, 284, 0, 0, 0, 436, 288, 0, 0, 0, 566, 289, 0, 0, 0, 570, 0, 290, 0, 0, 0,
  /* 6382 */ 1736, 564, 0, 0, 0, 572, 565, 0, 0, 0, 574, 0, 567, 0, 0, 0, 1737, 568, 0, 0, 0, 706, 0, 569, 0, 0, 0,
  /* 6409 */ 1738, 571, 0, 0, 0, 707, 0, 848, 0, 0, 0, 1744, 1008, 0, 0, 0, 708, 1009, 0, 0, 0, 845, 0, 1010, 0, 0, 0,
  /* 6436 */ 1745, 1016, 0, 0, 0, 846, 1017, 0, 0, 0, 847, 0, 1018, 0, 0, 0, 1746, 1024, 0, 0, 0, 849, 1025, 0, 0, 0,
  /* 6462 */ 851, 0, 1026, 0, 0, 0, 1753, 1032, 0, 0, 0, 856, 1033, 0, 0, 0, 864, 0, 1034, 0, 0, 0, 1754, 1040, 0, 0, 0,
  /* 6489 */ 1001, 1041, 0, 0, 0, 1002, 0, 1042, 0, 0, 0, 1755, 1050, 0, 0, 0, 1003, 1051, 0, 0, 0, 1004, 0, 1052, 0, 0,
  /* 6515 */ 0, 1761, 1058, 0, 0, 0, 1005, 1059, 0, 0, 0, 1011, 0, 1060, 0, 0, 0, 1762, 1066, 0, 0, 0, 1012, 1067, 0, 0,
  /* 6541 */ 0, 1013, 0, 1068, 0, 0, 0, 1763, 1074, 0, 0, 0, 1019, 1075, 0, 0, 0, 1020, 0, 1076, 0, 0, 0, 1764, 1082, 0,
  /* 6567 */ 0, 0, 1021, 1083, 0, 0, 0, 1027, 1084, 0, 0, 0, 1028, 0, 1085, 0, 0, 0, 1770, 1091, 0, 0, 0, 1029, 1092, 0,
  /* 6593 */ 0, 0, 1035, 0, 1093, 0, 0, 0, 1771, 1099, 0, 0, 0, 1036, 1100, 0, 0, 0, 1037, 1101, 0, 0, 0, 1043, 0, 1102,
  /* 6619 */ 0, 0, 0, 1772, 1108, 0, 0, 0, 1044, 1109, 0, 0, 0, 1045, 0, 1110, 0, 0, 0, 1778, 1116, 0, 0, 0, 1046, 1117,
  /* 6645 */ 0, 0, 0, 1047, 0, 1118, 0, 0, 0, 1779, 1124, 0, 0, 0, 1053, 1125, 0, 0, 0, 1054, 0, 1126, 0, 0, 0, 1780,
  /* 6671 */ 1132, 0, 0, 0, 1055, 1133, 0, 0, 0, 1061, 0, 1134, 0, 0, 0, 1786, 0, 0, 1138, 1139, 1140, 0, 0, 0, 1062,
  /* 6696 */ 1141, 0, 0, 0, 1063, 0, 1142, 0, 0, 0, 1787, 0, 0, 1146, 1147, 1148, 0, 0, 0, 1069, 1149, 0, 0, 0, 1070, 0,
  /* 6722 */ 1150, 0, 0, 0, 1788, 0, 0, 1154, 1155, 1156, 0, 0, 0, 1071, 1157, 0, 0, 0, 1077, 0, 1158, 0, 0, 0, 1794, 0,
  /* 6748 */ 0, 1163, 1164, 1165, 0, 0, 0, 1078, 1166, 0, 0, 0, 1079, 0, 1167, 0, 0, 0, 1795, 0, 0, 1171, 1172, 1173, 0,
  /* 6773 */ 0, 0, 1086, 1174, 0, 0, 0, 1087, 0, 1175, 0, 0, 0, 1796, 0, 0, 1179, 1180, 1181, 0, 0, 0, 1088, 1182, 0, 0,
  /* 6799 */ 0, 1094, 1183, 0, 0, 0, 1095, 0, 1184, 0, 0, 0, 1802, 0, 0, 1188, 1189, 1190, 0, 0, 0, 1096, 1191, 0, 0, 0,
  /* 6825 */ 1103, 1192, 0, 0, 0, 1104, 0, 1193, 0, 0, 0, 1803, 0, 0, 1197, 1198, 1199, 0, 0, 0, 1105, 1200, 0, 0, 0,
  /* 6850 */ 1111, 0, 1201, 0, 0, 0, 1804, 0, 0, 1205, 1206, 1207, 0, 0, 0, 1112, 1208, 0, 0, 0, 1113, 0, 1209, 0, 0, 0,
  /* 6876 */ 1810, 0, 0, 1213, 1214, 1215, 0, 0, 0, 1119, 1216, 0, 0, 0, 1120, 1217, 0, 0, 0, 1121, 0, 1218, 0, 0, 0,
  /* 6901 */ 1811, 0, 0, 1222, 1223, 1224, 0, 0, 0, 1127, 1225, 0, 0, 0, 1128, 0, 1226, 0, 0, 0, 1812, 0, 0, 1230, 1231,
  /* 6926 */ 1232, 0, 0, 0, 1129, 1233, 0, 0, 0, 1135, 1234, 0, 0, 0, 1136, 0, 1235, 0, 0, 0, 1819, 0, 0, 1239, 1240,
  /* 6951 */ 1241, 0, 0, 0, 1137, 1242, 0, 0, 0, 1143, 0, 1243, 0, 0, 0, 1820, 0, 0, 1247, 1248, 1249, 0, 0, 0, 1144,
  /* 6976 */ 1250, 0, 0, 0, 1145, 1251, 0, 0, 0, 1151, 0, 1252, 0, 0, 0, 1821, 0, 0, 1256, 1257, 1258, 0, 0, 0, 1152,
  /* 7001 */ 1259, 0, 0, 0, 1153, 0, 1260, 0, 0, 0, 1828, 0, 0, 1264, 1265, 1266, 0, 0, 0, 1159, 1267, 0, 0, 0, 1160, 0,
  /* 7027 */ 1268, 0, 0, 0, 1829, 0, 0, 1272, 1273, 1274, 0, 0, 0, 1161, 1275, 0, 0, 0, 1168, 0, 1276, 0, 0, 0, 1830, 0,
  /* 7053 */ 0, 1280, 1281, 1282, 0, 0, 0, 1169, 1283, 0, 0, 0, 1170, 0, 1284, 0, 0, 0, 1836, 0, 0, 1288, 1289, 1290, 0,
  /* 7078 */ 0, 0, 1176, 1291, 0, 0, 0, 1177, 0, 1292, 0, 0, 0, 1837, 0, 0, 1296, 1297, 1298, 0, 0, 0, 1178, 1299, 0, 0,
  /* 7104 */ 0, 1185, 0, 1300, 0, 0, 0, 1838, 0, 0, 1304, 1305, 1306, 0, 0, 0, 1186, 1307, 0, 0, 0, 1187, 0, 1308, 0, 0,
  /* 7130 */ 0, 1844, 0, 0, 1312, 1313, 1314, 0, 0, 0, 1194, 1315, 0, 0, 0, 1195, 0, 1316, 0, 0, 0, 1845, 0, 0, 1320,
  /* 7155 */ 1321, 1322, 0, 0, 0, 1196, 1323, 0, 0, 0, 1202, 0, 1324, 0, 0, 0, 1846, 0, 0, 1328, 1329, 1330, 0, 0, 0,
  /* 7180 */ 1203, 1331, 0, 0, 0, 1204, 0, 1332, 0, 0, 0, 1847, 0, 0, 1336, 1337, 1338, 0, 0, 0, 1210, 1339, 0, 0, 0,
  /* 7205 */ 1211, 0, 1340, 0, 0, 0, 1853, 0, 0, 1344, 1345, 1346, 0, 0, 0, 1212, 1347, 0, 0, 0, 1219, 0, 1348, 0, 0, 0,
  /* 7231 */ 1854, 0, 0, 1351, 1352, 0, 0, 1353, 1354, 1356, 0, 0, 0, 1220, 1357, 0, 0, 0, 1221, 0, 1358, 0, 0, 0, 1855,
  /* 7256 */ 0, 0, 1362, 1363, 1364, 0, 0, 0, 1227, 1365, 0, 0, 0, 1228, 0, 1366, 0, 0, 0, 1861, 0, 0, 1370, 1371, 1372,
  /* 7281 */ 0, 0, 0, 1229, 1373, 0, 0, 0, 1236, 0, 1374, 0, 0, 0, 1862, 0, 0, 1378, 1379, 1380, 0, 0, 0, 1237, 1381, 0,
  /* 7307 */ 0, 0, 1238, 0, 1382, 0, 0, 0, 1863, 0, 0, 1386, 1387, 1388, 0, 0, 0, 1244, 1389, 0, 0, 0, 1245, 0, 1390, 0,
  /* 7333 */ 0, 0, 1870, 0, 0, 1394, 1395, 1396, 0, 0, 0, 1246, 1397, 0, 0, 0, 1253, 0, 1398, 0, 0, 0, 1871, 0, 0, 1402,
  /* 7359 */ 1403, 1404, 0, 0, 0, 1254, 1405, 0, 0, 0, 1255, 0, 1406, 0, 0, 0, 1872, 0, 0, 1410, 1411, 1412, 0, 0, 0,
  /* 7384 */ 1261, 1413, 0, 0, 0, 1262, 0, 1414, 0, 0, 0, 1878, 0, 0, 1418, 1419, 1420, 0, 0, 0, 1263, 1421, 0, 0, 0,
  /* 7409 */ 1269, 0, 1422, 0, 0, 0, 1879, 0, 0, 1426, 1427, 1428, 0, 0, 0, 1270, 1429, 0, 0, 0, 1271, 0, 1430, 0, 0, 0,
  /* 7435 */ 1880, 0, 0, 1434, 1435, 1436, 0, 0, 0, 1277, 1437, 0, 0, 0, 1278, 1438, 0, 0, 0, 1279, 0, 1439, 0, 0, 0,
  /* 7460 */ 1886, 0, 0, 1443, 1444, 1445, 0, 0, 0, 1285, 1446, 0, 0, 0, 1286, 1447, 0, 0, 0, 1287, 0, 1448, 0, 0, 0,
  /* 7485 */ 1887, 0, 0, 1452, 1453, 1454, 0, 0, 0, 1293, 1455, 0, 0, 0, 1294, 0, 1456, 0, 0, 0, 1888, 0, 0, 1460, 1461,
  /* 7510 */ 1462, 0, 0, 0, 1295, 1463, 0, 0, 0, 1301, 0, 1464, 0, 0, 0, 1889, 0, 0, 1468, 1469, 1470, 0, 0, 0, 1302,
  /* 7535 */ 1471, 0, 0, 0, 1303, 0, 1472, 0, 0, 0, 1895, 0, 0, 1476, 1477, 1478, 0, 0, 0, 1309, 1479, 0, 0, 0, 1310, 0,
  /* 7561 */ 1480, 0, 0, 0, 1896, 0, 0, 1484, 1485, 1486, 0, 0, 0, 1311, 1487, 0, 0, 0, 1317, 0, 1488, 0, 0, 0, 1897, 0,
  /* 7587 */ 0, 1492, 1493, 1494, 0, 0, 0, 1318, 1495, 0, 0, 0, 1319, 0, 1496, 0, 0, 0, 1903, 0, 0, 1500, 1501, 1502, 0,
  /* 7612 */ 0, 0, 1325, 1503, 0, 0, 0, 1326, 0, 1504, 0, 0, 0, 1904, 0, 0, 1508, 1509, 1510, 0, 0, 0, 1327, 1511, 0, 0,
  /* 7638 */ 0, 1333, 1512, 0, 0, 0, 1334, 0, 1513, 0, 0, 0, 1905, 0, 0, 1517, 1518, 1519, 0, 0, 0, 1335, 1520, 0, 0, 0,
  /* 7664 */ 1341, 0, 1521, 0, 0, 0, 1908, 0, 0, 1525, 1526, 1527, 0, 0, 0, 1342, 1528, 0, 0, 0, 1343, 0, 1529, 0, 0, 0,
  /* 7690 */ 1912, 0, 0, 1533, 1534, 1535, 0, 0, 0, 1349, 1536, 0, 0, 0, 1350, 1537, 0, 0, 0, 1355, 0, 1538, 0, 0, 0,
  /* 7715 */ 1913, 0, 0, 1542, 1543, 1544, 0, 0, 0, 1359, 1545, 0, 0, 0, 1360, 0, 1546, 0, 0, 0, 1914, 0, 0, 1550, 1551,
  /* 7740 */ 1552, 0, 0, 0, 1361, 1553, 0, 0, 0, 1367, 0, 1554, 0, 0, 0, 1922, 0, 0, 1558, 1559, 1560, 0, 0, 0, 1368,
  /* 7765 */ 1561, 0, 0, 0, 1369, 0, 1562, 0, 0, 0, 1923, 0, 0, 1566, 1567, 1568, 0, 0, 0, 1375, 1569, 0, 0, 0, 1376, 0,
  /* 7791 */ 1570, 0, 0, 0, 1924, 0, 0, 1579, 1580, 1581, 0, 0, 0, 1377, 1582, 0, 0, 0, 1383, 0, 1583, 0, 0, 0, 1925, 0,
  /* 7817 */ 0, 1587, 1588, 1589, 0, 0, 0, 1384, 1590, 0, 0, 0, 1385, 0, 1591, 0, 0, 0, 1931, 0, 0, 1596, 1597, 1598, 0,
  /* 7842 */ 0, 0, 1391, 1599, 0, 0, 0, 1392, 0, 1600, 0, 0, 0, 1932, 0, 0, 1605, 1606, 1607, 0, 0, 0, 1393, 1608, 0, 0,
  /* 7868 */ 0, 1399, 0, 1609, 0, 0, 0, 1933, 0, 0, 1613, 1614, 1615, 0, 0, 0, 1400, 1616, 0, 0, 0, 1401, 1617, 0, 0, 0,
  /* 7894 */ 1407, 0, 1619, 0, 0, 0, 1939, 0, 0, 1623, 1624, 1625, 0, 0, 0, 1408, 1626, 0, 0, 0, 1409, 0, 1627, 0, 0, 0,
  /* 7920 */ 1940, 0, 0, 1631, 1632, 1633, 0, 0, 0, 1415, 1634, 0, 0, 0, 1416, 0, 1635, 0, 0, 0, 1941, 0, 0, 1639, 1640,
  /* 7945 */ 1641, 0, 0, 0, 1417, 1642, 0, 0, 0, 1423, 0, 1643, 0, 0, 0, 1948, 0, 0, 1647, 1648, 1649, 0, 0, 0, 1424,
  /* 7970 */ 1650, 0, 0, 0, 1425, 0, 1651, 0, 0, 0, 1949, 0, 0, 1657, 1658, 1659, 0, 0, 0, 1431, 1660, 0, 0, 0, 1432,
  /* 7995 */ 1661, 0, 0, 0, 1433, 0, 1662, 0, 0, 0, 1950, 0, 0, 1663, 1664, 0, 0, 1667, 1668, 1669, 0, 0, 0, 1440, 1670,
  /* 8020 */ 0, 0, 0, 1441, 0, 1671, 0, 0, 0, 1956, 0, 0, 1675, 1676, 1677, 0, 0, 0, 1442, 1678, 0, 0, 0, 1449, 0, 1679,
  /* 8046 */ 0, 0, 0, 1957, 0, 0, 1683, 1684, 1685, 0, 0, 0, 1450, 1686, 0, 0, 0, 1451, 0, 0, 1687, 0, 0, 1089, 1090, 0,
  /* 8072 */ 1688, 0, 0, 0, 1958, 0, 0, 1689, 0, 0, 1097, 1098, 1692, 1693, 0, 0, 0, 1964, 0, 0, 1695, 1696, 1697, 0, 0,
  /* 8097 */ 0, 1457, 1698, 0, 0, 0, 1458, 0, 0, 1699, 0, 0, 1106, 1107, 0, 1700, 0, 0, 0, 1965, 0, 0, 1701, 0, 0, 1114,
  /* 8123 */ 1115, 0, 0, 1706, 1707, 1708, 0, 0, 0, 1459, 1709, 0, 0, 0, 1465, 0, 1710, 0, 0, 0, 1966, 0, 0, 1714, 1715,
  /* 8148 */ 1716, 0, 0, 0, 1466, 1717, 0, 0, 0, 1467, 1718, 0, 0, 0, 1473, 0, 1719, 0, 0, 0, 1972, 0, 0, 1723, 1724,
  /* 8173 */ 1725, 0, 0, 0, 1474, 1726, 0, 0, 0, 1475, 0, 1727, 0, 0, 0, 1973, 0, 0, 1731, 1732, 1733, 0, 0, 0, 1481,
  /* 8198 */ 1734, 0, 0, 0, 1482, 0, 1735, 0, 0, 0, 1974, 0, 0, 1739, 1740, 1741, 0, 0, 0, 1483, 1742, 0, 0, 0, 1489, 0,
  /* 8224 */ 1743, 0, 0, 0, 1975, 0, 0, 1747, 1748, 1749, 0, 0, 0, 1490, 1750, 0, 0, 0, 1491, 1751, 0, 0, 0, 1497, 0,
  /* 8249 */ 1752, 0, 0, 0, 1981, 0, 0, 1756, 1757, 1758, 0, 0, 0, 1498, 1759, 0, 0, 0, 1499, 0, 1760, 0, 0, 0, 1982, 0,
  /* 8275 */ 0, 1765, 1766, 1767, 0, 0, 0, 1505, 1768, 0, 0, 0, 1506, 0, 1769, 0, 0, 0, 1983, 0, 0, 1773, 1774, 1775, 0,
  /* 8300 */ 0, 0, 1507, 1776, 0, 0, 0, 1514, 0, 1777, 0, 0, 0, 1984, 0, 0, 1781, 1782, 1783, 0, 0, 0, 1515, 1784, 0, 0,
  /* 8326 */ 0, 1516, 0, 1785, 0, 0, 0, 1990, 0, 0, 1789, 1790, 1791, 0, 0, 0, 1522, 1792, 0, 0, 0, 1523, 0, 1793, 0, 0,
  /* 8352 */ 0, 1991, 0, 0, 1797, 1798, 1799, 0, 0, 0, 1524, 1800, 0, 0, 0, 1530, 0, 1801, 0, 0, 0, 1992, 0, 0, 1805,
  /* 8377 */ 1806, 1807, 0, 0, 0, 1531, 1808, 0, 0, 0, 1532, 0, 1809, 0, 0, 0, 1998, 0, 0, 1813, 1814, 1815, 0, 0, 0,
  /* 8402 */ 1539, 1816, 0, 0, 0, 1540, 0, 1817, 0, 0, 0, 1999, 0, 0, 1818, 0, 0, 1122, 1123, 0, 0, 1822, 1823, 1824, 0,
  /* 8427 */ 0, 0, 1541, 1825, 0, 0, 0, 1547, 1826, 0, 0, 0, 1548, 0, 1827, 0, 0, 0, 2000, 0, 0, 1831, 1832, 1833, 0, 0,
  /* 8453 */ 0, 1549, 1834, 0, 0, 0, 1555, 0, 1835, 0, 0, 0, 2006, 0, 0, 1839, 1840, 1841, 0, 0, 0, 1556, 1842, 0, 0, 0,
  /* 8479 */ 1557, 0, 1843, 0, 0, 0, 2007, 0, 0, 1848, 1849, 1850, 0, 0, 0, 1563, 1851, 0, 0, 0, 1564, 0, 1852, 0, 0, 0,
  /* 8505 */ 2008, 0, 0, 1856, 1857, 1858, 0, 0, 0, 1565, 1859, 0, 0, 0, 1571, 0, 1860, 0, 0, 0, 2015, 0, 0, 1864, 1865,
  /* 8530 */ 1866, 0, 0, 0, 1572, 1867, 0, 0, 0, 1573, 0, 1868, 0, 0, 0, 2016, 0, 1869, 0, 0, 0, 2017, 0, 0, 1873, 1874,
  /* 8556 */ 1875, 0, 0, 0, 1578, 1876, 0, 0, 0, 1584, 0, 1877, 0, 0, 0, 2023, 0, 0, 1881, 1882, 1883, 0, 0, 0, 1585,
  /* 8581 */ 1884, 0, 0, 0, 1586, 0, 1885, 0, 0, 0, 2024, 0, 0, 1890, 1891, 1892, 0, 0, 0, 1592, 1893, 0, 0, 0, 1593, 0,
  /* 8607 */ 1894, 0, 0, 0, 2025, 0, 0, 1898, 1899, 1900, 0, 0, 0, 1594, 1901, 0, 0, 0, 1595, 0, 1902, 0, 0, 0, 2031, 0,
  /* 8633 */ 0, 1906, 1907, 1909, 0, 0, 0, 1601, 1910, 0, 0, 0, 1602, 0, 1911, 0, 0, 0, 2032, 0, 0, 1917, 1918, 1919, 0,
  /* 8658 */ 0, 0, 1603, 1920, 0, 0, 0, 1604, 0, 1921, 0, 0, 0, 2034, 0, 0, 1926, 1927, 1928, 0, 0, 0, 1610, 1929, 0, 0,
  /* 8684 */ 0, 1611, 0, 1930, 0, 0, 0, 2041, 0, 0, 1934, 1935, 1936, 0, 0, 0, 1612, 1937, 0, 0, 0, 1618, 0, 1938, 0, 0,
  /* 8710 */ 0, 2042, 0, 0, 1943, 1944, 1945, 0, 0, 0, 1620, 1946, 0, 0, 0, 1621, 0, 1947, 0, 0, 0, 2043, 0, 0, 1951,
  /* 8735 */ 1952, 1953, 0, 0, 0, 1622, 1954, 0, 0, 0, 1628, 0, 1955, 0, 0, 0, 2049, 0, 0, 1959, 1960, 1961, 0, 0, 0,
  /* 8760 */ 1629, 1962, 0, 0, 0, 1630, 0, 1963, 0, 0, 0, 2050, 0, 0, 1967, 1968, 1969, 0, 0, 0, 1636, 1970, 0, 0, 0,
  /* 8785 */ 1637, 0, 1971, 0, 0, 0, 2058, 0, 0, 1976, 1977, 1978, 0, 0, 0, 1638, 1979, 0, 0, 0, 1644, 0, 1980, 0, 0, 0,
  /* 8811 */ 2059, 0, 0, 1985, 1986, 1987, 0, 0, 0, 1645, 1988, 0, 0, 0, 1646, 0, 1989, 0, 0, 0, 2060, 0, 0, 1993, 1994,
  /* 8836 */ 1995, 0, 0, 0, 1652, 1996, 0, 0, 0, 1653, 0, 1997, 0, 0, 0, 2066, 0, 0, 2001, 2002, 2003, 0, 0, 0, 1654,
  /* 8861 */ 2004, 0, 0, 0, 1655, 0, 2005, 0, 0, 0, 2067, 0, 0, 2009, 2010, 2011, 0, 0, 0, 1656, 2012, 0, 0, 0, 1665,
  /* 8886 */ 2013, 0, 0, 0, 1666, 0, 2014, 0, 0, 0, 2068, 0, 0, 2018, 2019, 2020, 0, 0, 0, 1672, 2021, 0, 0, 0, 1673, 0,
  /* 8912 */ 2022, 0, 0, 0, 2075, 0, 0, 2026, 2027, 2028, 0, 0, 0, 1674, 2029, 0, 0, 0, 1680, 0, 2030, 0, 0, 0, 2076, 0,
  /* 8938 */ 2033, 0, 0, 0, 2077, 0, 0, 2035, 2036, 2037, 0, 0, 0, 1681, 2038, 0, 0, 0, 1682, 2039, 0, 0, 0, 1690, 0,
  /* 8963 */ 2040, 0, 0, 0, 2083, 0, 0, 2044, 2045, 2046, 0, 0, 0, 1691, 2047, 0, 0, 0, 1694, 0, 2048, 0, 0, 0, 2084, 0,
  /* 8989 */ 0, 2051, 2052, 0, 0, 2053, 2054, 2055, 0, 0, 0, 1702, 2056, 0, 0, 0, 1703, 0, 2057, 0, 0, 0, 2085, 0, 0,
  /* 9014 */ 2061, 2062, 2063, 0, 0, 0, 1704, 2064, 0, 0, 0, 1705, 0, 2065, 0, 0, 0, 2087, 0, 0, 2070, 2071, 2072, 0, 0,
  /* 9039 */ 0, 1711, 2073, 0, 0, 0, 1712, 0, 2074, 0, 0, 0, 2088, 0, 0, 2078, 2079, 2080, 0, 0, 0, 1713, 2081, 0, 0, 0,
  /* 9065 */ 1720, 0, 2082, 0, 0, 0, 2090, 2086, 0, 0, 0, 1721, 0, 2089, 0, 0, 0, 2092, 0, 0, 2091, 0, 0, 1130, 1131, 0,
  /* 9091 */ 2093, 0, 0, 0, 2097, 2094, 0, 0, 0, 1722, 0, 2095, 0, 2096
];

XQueryParser_ts.CASEID =
[
  /*    0 */ 553, 553, 542, 553, 553, 553, 553, 553, 553, 553, 1376, 553, 553, 553, 553, 553, 552, 553, 553, 568, 553,
  /*   21 */ 553, 553, 553, 553, 553, 553, 553, 553, 553, 754, 553, 553, 553, 553, 553, 1400, 553, 553, 553, 553, 553,
  /*   42 */ 553, 866, 562, 553, 579, 1331, 1069, 589, 553, 553, 553, 947, 1410, 553, 553, 553, 553, 553, 553, 553, 600,
  /*   63 */ 1152, 553, 673, 553, 553, 553, 553, 553, 610, 553, 553, 1066, 553, 553, 553, 1330, 756, 553, 628, 553, 644,
  /*   84 */ 553, 647, 553, 553, 1034, 553, 553, 553, 553, 553, 553, 553, 613, 553, 553, 553, 697, 553, 553, 553, 553,
  /*  105 */ 553, 1265, 553, 553, 553, 553, 553, 553, 655, 667, 553, 553, 553, 842, 685, 553, 553, 553, 706, 553, 553,
  /*  126 */ 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 1063, 553, 553, 553, 553, 735, 553, 553, 695, 553, 553,
  /*  147 */ 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 705, 1048, 553, 553, 553, 553, 553, 553, 553, 553,
  /*  168 */ 553, 1063, 553, 553, 1195, 619, 553, 740, 714, 553, 553, 553, 553, 838, 553, 553, 553, 553, 553, 553, 553,
  /*  189 */ 553, 553, 553, 871, 722, 730, 592, 1013, 748, 553, 553, 766, 781, 789, 796, 804, 812, 820, 773, 828, 553,
  /*  210 */ 1411, 1268, 553, 553, 553, 553, 1372, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 1455, 850,
  /*  230 */ 553, 553, 553, 602, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 758, 860, 553, 553, 879, 635,
  /*  251 */ 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 887, 553, 553, 553, 870, 553, 553, 553, 553,
  /*  272 */ 553, 553, 553, 553, 553, 553, 553, 553, 553, 906, 553, 553, 1377, 553, 553, 553, 553, 553, 553, 553, 553,
  /*  293 */ 553, 553, 553, 553, 687, 915, 923, 553, 1279, 933, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553,
  /*  314 */ 553, 553, 945, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 636, 1190, 553,
  /*  335 */ 553, 553, 553, 553, 553, 553, 553, 1290, 553, 553, 553, 871, 553, 553, 553, 833, 955, 553, 553, 553, 553,
  /*  356 */ 553, 553, 553, 553, 553, 553, 553, 553, 1405, 1052, 553, 1340, 967, 553, 553, 553, 553, 553, 553, 553, 553,
  /*  377 */ 553, 553, 620, 553, 553, 553, 553, 1351, 978, 986, 1002, 1250, 553, 1001, 1010, 1021, 553, 553, 553, 553,
  /*  397 */ 1032, 1024, 553, 554, 993, 553, 1042, 1060, 553, 1241, 1077, 959, 852, 1089, 1104, 1110, 1096, 1118, 1126,
  /*  416 */ 1133, 1141, 1149, 894, 925, 1321, 553, 553, 553, 553, 553, 1160, 1175, 1183, 1203, 1211, 1219, 1227, 1167,
  /*  435 */ 1235, 553, 553, 1081, 1249, 553, 1258, 1276, 553, 553, 553, 553, 553, 553, 553, 553, 937, 616, 1287, 553,
  /*  455 */ 1298, 1306, 553, 571, 553, 553, 553, 553, 553, 553, 553, 659, 1310, 553, 553, 1318, 553, 553, 1329, 553,
  /*  475 */ 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 677, 553, 553, 553, 553, 553, 898, 553, 553, 553, 553,
  /*  496 */ 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 581, 553, 553, 1339, 553, 553, 553, 553, 553, 553, 553,
  /*  517 */ 553, 553, 553, 553, 553, 553, 553, 1348, 1359, 1367, 970, 1385, 1393, 544, 553, 1419, 1434, 1442, 1463,
  /*  536 */ 1478, 1486, 1470, 1426, 1449, 908, 1495, 2232, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 2334, 1846, 1495,
  /*  554 */ 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1641, 1495, 1775, 1495, 1844, 1839, 1778, 1495, 1495, 1494, 1495,
  /*  572 */ 1495, 1495, 1495, 1495, 1495, 2203, 1495, 1495, 1840, 1495, 1495, 1495, 1495, 1495, 1495, 1836, 1495, 1495,
  /*  590 */ 1839, 1910, 1495, 1495, 1495, 1495, 1495, 1620, 1621, 1621, 1495, 2199, 1495, 1495, 1495, 1495, 1495, 1495,
  /*  608 */ 1843, 2004, 1495, 1495, 1928, 1495, 1495, 1495, 1495, 1495, 1775, 1495, 1495, 1495, 1495, 1495, 1776, 1495,
  /*  626 */ 1495, 1775, 1495, 1844, 1495, 1495, 1495, 1839, 1495, 1776, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1808,
  /*  644 */ 1495, 1495, 1911, 1495, 1495, 1495, 1495, 1495, 1777, 1844, 1495, 1495, 1495, 1924, 1844, 1495, 1495, 1495,
  /*  662 */ 1495, 1495, 2214, 1495, 1495, 1847, 1495, 1957, 1495, 1495, 1505, 1495, 1495, 1495, 1837, 1495, 1495, 1495,
  /*  680 */ 1495, 1495, 2043, 1495, 1495, 1495, 2055, 1495, 1495, 1495, 1495, 1495, 1495, 1848, 1495, 1495, 1910, 1495,
  /*  698 */ 1495, 1495, 1495, 1495, 1495, 2042, 1495, 1515, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1783, 2129, 1710,
  /*  716 */ 1769, 1540, 1547, 1708, 2126, 1556, 2377, 1495, 2001, 1569, 1590, 1576, 1573, 1580, 1584, 1588, 1594, 1598,
  /*  734 */ 1613, 1495, 1495, 1495, 1510, 2382, 1495, 1495, 1495, 1511, 1520, 1532, 2206, 1536, 1625, 1608, 1629, 1607,
  /*  752 */ 1635, 1609, 1495, 1495, 1495, 1839, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 2380, 2044, 1679, 1681, 1523,
  /*  770 */ 1542, 1665, 1722, 1682, 1734, 1726, 1733, 1701, 1899, 1720, 1654, 1676, 1680, 1903, 1647, 1666, 1653, 1683,
  /*  788 */ 1658, 1663, 1741, 1542, 1741, 1766, 1671, 1901, 1678, 1680, 1680, 1684, 1649, 1543, 1670, 1742, 1666, 1721,
  /*  806 */ 1675, 1677, 1688, 1659, 1526, 1882, 1699, 1763, 1705, 2209, 1638, 1881, 1700, 1604, 1714, 1653, 1719, 1528,
  /*  824 */ 1882, 1899, 1743, 1715, 1680, 1738, 1747, 1751, 1760, 1495, 1495, 1495, 1552, 1938, 1495, 1495, 1495, 1563,
  /*  842 */ 1495, 1495, 1495, 1495, 1550, 1495, 1495, 1495, 1495, 2220, 1495, 1495, 1495, 1495, 1495, 1495, 2064, 2135,
  /*  860 */ 1825, 1817, 1495, 1729, 1822, 1830, 1495, 1495, 1495, 1908, 1845, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
  /*  878 */ 1844, 1495, 1778, 1840, 2142, 1495, 1495, 1834, 1756, 1495, 1495, 1908, 1495, 1495, 1495, 1853, 1495, 1495,
  /*  896 */ 1495, 2344, 1495, 1495, 1495, 1495, 2212, 1495, 1495, 1495, 1495, 1858, 1495, 1495, 1495, 1495, 1495, 1495,
  /*  914 */ 2098, 1813, 1495, 1863, 2189, 2153, 2182, 2339, 1867, 2190, 2183, 1495, 1495, 1495, 1495, 1495, 1495, 2140,
  /*  932 */ 1495, 1891, 1896, 1907, 1916, 1495, 1495, 1495, 1495, 1909, 1846, 1495, 1495, 1495, 1922, 1495, 1495, 1495,
  /*  950 */ 1495, 1495, 1495, 2159, 1495, 1495, 1495, 1818, 1946, 1495, 1495, 1495, 1495, 2010, 1495, 1495, 1495, 1495,
  /*  968 */ 1495, 1956, 1495, 1495, 1495, 1495, 1495, 1790, 2292, 2285, 1495, 1559, 1961, 1495, 1965, 1969, 1973, 1980,
  /*  986 */ 1977, 1990, 1987, 1984, 1994, 1998, 1940, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 1942, 2014, 2015, 2015,
  /* 1004 */ 2015, 2015, 2015, 2015, 2015, 1838, 1643, 1803, 1621, 1621, 1621, 1621, 1621, 1621, 1695, 1632, 1691, 1621,
  /* 1022 */ 1621, 1694, 1495, 1495, 1495, 1495, 1495, 1840, 1495, 1495, 1910, 1842, 1495, 1495, 1495, 1495, 1495, 1495,
  /* 1040 */ 2197, 1495, 1859, 1854, 2330, 1495, 2019, 1887, 1495, 1495, 1495, 1934, 1495, 1495, 1495, 1495, 1495, 2382,
  /* 1058 */ 1495, 1495, 2023, 2031, 2066, 1495, 1495, 1495, 1495, 1495, 1843, 1495, 1495, 1495, 1495, 1495, 1777, 1495,
  /* 1076 */ 1495, 1495, 1495, 1870, 2060, 1495, 1495, 1495, 1495, 2151, 2337, 1495, 1892, 2135, 2072, 2074, 2103, 2107,
  /* 1094 */ 2134, 2134, 2134, 2136, 2084, 2073, 2073, 2073, 2104, 2106, 2078, 2080, 2104, 2106, 2135, 2089, 2074, 2074,
  /* 1112 */ 2074, 2074, 2107, 2134, 2134, 2134, 2135, 2135, 2088, 2095, 2281, 2089, 2089, 2111, 2090, 2007, 2115, 2090,
  /* 1130 */ 2090, 2095, 2279, 2279, 2037, 2089, 2074, 2034, 2119, 2134, 2123, 2135, 2079, 2091, 2103, 2105, 2107, 2136,
  /* 1148 */ 2102, 2279, 2133, 2389, 1495, 1495, 1495, 1495, 1495, 1849, 1495, 1495, 1495, 1495, 1775, 2175, 2171, 1754,
  /* 1166 */ 1754, 1601, 2168, 2176, 1840, 2175, 2146, 1874, 1601, 2168, 2170, 2172, 2174, 1873, 1912, 1840, 1615, 2175,
  /* 1184 */ 1874, 1754, 1754, 2027, 1754, 1754, 1754, 1495, 1932, 1495, 1495, 1495, 1495, 1775, 1495, 1495, 1495, 1841,
  /* 1202 */ 1495, 2170, 2170, 2174, 2174, 2174, 2176, 2026, 2040, 1755, 1755, 1840, 2167, 2173, 2173, 1873, 2042, 2169,
  /* 1220 */ 2146, 1874, 1616, 2147, 1911, 2174, 2147, 1873, 1845, 1615, 1615, 1615, 2169, 1874, 1754, 2166, 2168, 2176,
  /* 1238 */ 1845, 1615, 2175, 1495, 1495, 1495, 2048, 1495, 1495, 1495, 2054, 2157, 1495, 1495, 1495, 1495, 1495, 1495,
  /* 1256 */ 1495, 1845, 1495, 1495, 1565, 1495, 1495, 1495, 1501, 1495, 1495, 1500, 1495, 1495, 1495, 1495, 1495, 1782,
  /* 1274 */ 1495, 1495, 1495, 1495, 2163, 1495, 1495, 1495, 1495, 1495, 1878, 1495, 1886, 1495, 1495, 2180, 1495, 1495,
  /* 1292 */ 1495, 1495, 1495, 1909, 1495, 1495, 1495, 1495, 2187, 1495, 1495, 1495, 2194, 2328, 2226, 1495, 2068, 2328,
  /* 1310 */ 1495, 1495, 1495, 1495, 2238, 2218, 1495, 1495, 1495, 1495, 2224, 1495, 1495, 1495, 1495, 1495, 1918, 1495,
  /* 1328 */ 1495, 2056, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1910, 1845, 2230, 1495, 1495, 1495, 1495, 1495, 1495,
  /* 1346 */ 1495, 2142, 1495, 1495, 2383, 1495, 1495, 1495, 1495, 1495, 1952, 1495, 1495, 1926, 2236, 1947, 2242, 2246,
  /* 1364 */ 2253, 2260, 2264, 2268, 2272, 2249, 2256, 2276, 1495, 1495, 1495, 1787, 1495, 1495, 1495, 1495, 1845, 1495,
  /* 1382 */ 1495, 1495, 1495, 1796, 1793, 2289, 2293, 1798, 2294, 2298, 2305, 2315, 2308, 2302, 2312, 2321, 2319, 2325,
  /* 1400 */ 1495, 1495, 1516, 1495, 1496, 1495, 1495, 1495, 1506, 1951, 1924, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
  /* 1418 */ 1773, 1826, 2343, 2363, 2365, 2356, 2356, 2351, 2364, 2344, 2374, 2363, 2370, 2347, 2351, 2351, 2364, 2364,
  /* 1436 */ 2364, 2346, 2348, 2352, 2361, 2345, 2347, 2356, 2356, 2356, 2356, 2356, 2349, 2364, 2346, 2350, 2352, 2363,
  /* 1454 */ 2387, 1495, 1495, 1495, 2050, 1802, 1807, 1812, 1495, 2364, 2364, 2364, 2364, 2346, 2357, 2357, 2357, 2352,
  /* 1472 */ 2352, 2352, 2345, 2347, 2356, 2351, 2357, 2352, 2361, 2363, 2363, 2369, 2357, 2098, 2370, 2347, 2346, 2369,
  /* 1490 */ 2100, 2344, 2369, 2369, 2791, 2411, 2411, 2411, 2411, 2393, 2725, 2411, 2411, 2411, 2417, 2435, 2411, 2411,
  /* 1508 */ 2411, 2424, 2581, 2411, 2411, 2411, 2450, 2417, 2411, 2411, 2411, 2511, 2448, 2446, 2458, 2453, 2411, 2457,
  /* 1526 */ 2450, 2417, 2454, 2413, 2541, 2412, 2456, 2450, 2411, 2457, 2395, 2411, 2465, 2457, 2448, 2411, 2457, 2450,
  /* 1544 */ 2457, 2450, 2457, 2452, 2453, 2416, 2411, 2409, 2411, 2411, 2410, 2413, 2417, 2411, 2457, 2411, 2411, 2812,
  /* 1562 */ 2714, 2417, 2419, 2411, 2411, 2412, 2415, 2536, 2779, 2484, 2504, 2503, 2503, 2480, 2503, 2482, 2500, 2476,
  /* 1580 */ 2783, 2503, 2781, 2780, 2503, 2495, 2486, 2780, 2472, 2492, 2503, 2503, 2471, 2503, 2498, 2781, 2502, 2782,
  /* 1598 */ 2502, 2503, 2488, 2412, 2411, 2411, 2415, 2534, 2533, 2540, 2462, 2462, 2536, 2462, 2462, 2414, 2412, 2415,
  /* 1616 */ 2411, 2415, 2411, 2413, 2535, 2462, 2462, 2462, 2462, 2533, 2538, 2462, 2462, 2533, 2462, 2462, 2538, 2538,
  /* 1634 */ 2462, 2462, 2535, 2462, 2534, 2532, 2416, 2453, 2448, 2448, 2448, 2454, 2411, 2415, 2541, 2415, 2534, 2533,
  /* 1652 */ 2457, 2537, 2413, 2537, 2413, 2536, 2535, 2415, 2541, 2415, 2457, 2451, 2450, 2540, 2533, 2414, 2537, 2413,
  /* 1670 */ 2450, 2457, 2450, 2540, 2533, 2536, 2416, 2453, 2416, 2453, 2412, 2536, 2412, 2536, 2416, 2453, 2412, 2535,
  /* 1688 */ 2536, 2411, 2411, 2541, 2462, 2462, 2462, 2537, 2411, 2411, 2462, 2458, 2419, 2458, 2419, 2541, 2415, 2415,
  /* 1706 */ 2541, 2415, 2458, 2411, 2411, 2451, 2416, 2419, 2533, 2413, 2537, 2413, 2541, 2537, 2413, 2537, 2417, 2454,
  /* 1724 */ 2413, 2536, 2537, 2412, 2536, 2412, 2411, 2411, 2759, 2536, 2411, 2458, 2419, 2413, 2411, 2534, 2533, 2540,
  /* 1742 */ 2533, 2540, 2533, 2540, 2532, 2533, 2417, 2454, 2413, 2537, 2416, 2453, 2412, 2411, 2412, 2411, 2412, 2415,
  /* 1760 */ 2536, 2536, 2462, 2539, 2533, 2413, 2540, 2533, 2457, 2450, 2455, 2411, 2418, 2414, 2718, 2411, 2411, 2414,
  /* 1778 */ 2411, 2411, 2411, 2414, 2508, 2411, 2411, 2411, 2526, 2533, 2411, 2537, 2411, 2411, 2874, 2880, 2874, 2880,
  /* 1796 */ 2882, 2880, 2880, 2875, 2880, 2882, 2767, 2411, 2411, 2411, 2535, 2719, 2411, 2411, 2411, 2537, 2717, 2411,
  /* 1814 */ 2411, 2411, 2545, 2563, 2411, 2411, 2411, 2593, 2530, 2411, 2411, 2760, 2411, 2411, 2411, 2547, 2411, 2564,
  /* 1832 */ 2411, 2758, 2411, 2540, 2411, 2411, 2419, 2411, 2411, 2411, 2415, 2411, 2411, 2411, 2412, 2411, 2411, 2411,
  /* 1850 */ 2399, 2411, 2411, 2845, 2411, 2411, 2411, 2706, 2621, 2411, 2411, 2411, 2711, 2423, 2411, 2569, 2620, 2411,
  /* 1868 */ 2620, 2568, 2411, 2411, 2884, 2411, 2413, 2411, 2413, 2411, 2574, 2415, 2411, 2412, 2535, 2415, 2458, 2419,
  /* 1886 */ 2533, 2411, 2411, 2411, 2729, 2422, 2411, 2411, 2411, 2764, 2573, 2411, 2411, 2539, 2533, 2540, 2533, 2416,
  /* 1904 */ 2453, 2411, 2541, 2574, 2411, 2413, 2411, 2411, 2411, 2413, 2411, 2412, 2535, 2411, 2411, 2415, 2414, 2411,
  /* 1922 */ 2411, 2551, 2411, 2411, 2421, 2411, 2411, 2411, 2406, 2411, 2411, 2587, 2411, 2411, 2441, 2411, 2431, 2809,
  /* 1940 */ 2411, 2411, 2448, 2448, 2450, 2411, 2442, 2411, 2411, 2411, 2801, 2546, 2411, 2411, 2411, 2802, 2580, 2411,
  /* 1958 */ 2411, 2411, 2846, 2585, 2591, 2597, 2602, 2411, 2606, 2613, 2616, 2626, 2630, 2660, 2651, 2645, 2679, 2638,
  /* 1976 */ 2642, 2648, 2668, 2671, 2678, 2658, 2664, 2685, 2693, 2696, 2678, 2678, 2683, 2689, 2678, 2677, 2673, 2654,
  /* 1994 */ 2633, 2636, 2637, 2636, 2700, 2678, 2704, 2411, 2414, 2778, 2462, 2415, 2415, 2411, 2411, 2867, 2411, 2411,
  /* 2012 */ 2869, 2748, 2452, 2448, 2448, 2448, 2448, 2723, 2773, 2411, 2609, 2607, 2730, 2608, 2411, 2416, 2411, 2412,
  /* 2030 */ 2411, 2734, 2402, 2869, 2741, 2550, 2740, 2870, 2409, 2869, 2411, 2416, 2411, 2416, 2411, 2411, 2411, 2416,
  /* 2048 */ 2738, 2747, 2411, 2411, 2524, 2411, 2411, 2574, 2411, 2411, 2411, 2437, 2790, 2411, 2549, 2869, 2411, 2868,
  /* 2066 */ 2869, 2411, 2411, 2411, 2520, 2411, 2868, 2550, 2741, 2550, 2741, 2550, 2411, 2866, 2411, 2867, 2411, 2741,
  /* 2084 */ 2411, 2741, 2550, 2741, 2550, 2867, 2411, 2867, 2411, 2867, 2575, 2411, 2741, 2550, 2548, 2411, 2411, 2550,
  /* 2102 */ 2411, 2741, 2550, 2547, 2870, 2547, 2870, 2411, 2869, 2548, 2870, 2411, 2867, 2547, 2869, 2411, 2869, 2547,
  /* 2120 */ 2870, 2545, 2869, 2411, 2549, 2870, 2411, 2416, 2419, 2450, 2451, 2450, 2419, 2742, 2411, 2869, 2411, 2869,
  /* 2138 */ 2411, 2867, 2752, 2411, 2411, 2411, 2532, 2411, 2417, 2411, 2417, 2411, 2413, 2757, 2753, 2411, 2411, 2555,
  /* 2156 */ 2411, 2771, 2765, 2411, 2411, 2598, 2411, 2420, 2411, 2408, 2411, 2419, 2411, 2415, 2411, 2414, 2411, 2418,
  /* 2174 */ 2411, 2414, 2411, 2414, 2411, 2413, 2424, 2411, 2411, 2411, 2619, 2411, 2411, 2622, 2411, 2411, 2411, 2621,
  /* 2192 */ 2411, 2556, 2514, 2411, 2777, 2411, 2429, 2411, 2411, 2408, 2411, 2411, 2576, 2413, 2411, 2451, 2453, 2419,
  /* 2210 */ 2534, 2532, 2411, 2401, 2411, 2411, 2787, 2411, 2411, 2809, 2411, 2411, 2766, 2411, 2407, 2411, 2411, 2411,
  /* 2228 */ 2777, 2411, 2411, 2705, 2411, 2411, 2797, 2411, 2411, 2795, 2411, 2411, 2809, 2425, 2467, 2537, 2806, 2826,
  /* 2246 */ 2824, 2816, 2839, 2839, 2819, 2839, 2859, 2822, 2839, 2839, 2839, 2853, 2839, 2839, 2832, 2852, 2839, 2839,
  /* 2264 */ 2827, 2839, 2838, 2839, 2828, 2839, 2839, 2836, 2843, 2839, 2850, 2857, 2863, 2411, 2867, 2870, 2547, 2870,
  /* 2282 */ 2547, 2743, 2399, 2880, 2880, 2880, 2882, 2880, 2880, 2883, 2880, 2880, 2880, 2880, 2876, 2411, 2906, 2890,
  /* 2300 */ 2888, 2888, 2890, 2890, 2897, 2890, 2890, 2889, 2890, 2890, 2892, 2891, 2890, 2893, 2888, 2890, 2890, 2897,
  /* 2318 */ 2888, 2890, 2898, 2891, 2890, 2891, 2889, 2890, 2902, 2870, 2411, 2514, 2411, 2411, 2707, 2411, 2547, 2905,
  /* 2336 */ 2549, 2411, 2517, 2411, 2411, 2560, 2411, 2868, 2411, 2547, 2411, 2411, 2550, 2411, 2549, 2411, 2548, 2411,
  /* 2354 */ 2548, 2411, 2411, 2549, 2411, 2549, 2411, 2548, 2411, 2547, 2411, 2547, 2411, 2547, 2870, 2550, 2411, 2550,
  /* 2372 */ 2411, 2550, 2550, 2411, 2547, 2411, 2532, 2414, 2413, 2759, 2411, 2411, 2418, 2411, 2411, 2545, 2910, 2550,
  /* 2390 */ 2411, 2435, 2870, 0, 403, 0, 0, 0, 531, 0, 8, 0, 0, 0, 555, 0, 421, 0, 0, 0, 10, 0, 0, 0, 0, 2, 0, 0, 0, 4,
  /* 2420 */ 0, 0, 0, 6, 0, 0, 0, 8, 10, 0, 351, 0, 0, 8, 12, 0, 18, 0, 0, 139, 0, 493, 0, 0, 0, 14, 4, 2, 4, 4, 4, 4,
  /* 2452 */ 0, 0, 4, 4, 4, 0, 4, 0, 4, 4, 2, 2, 2, 2, 4, 0, 0, 185, 2, 489, 485, 491, 485, 489, 561, 485, 485, 477,
  /* 2480 */ 489, 489, 485, 485, 489, 489, 485, 0, 485, 485, 2, 0, 489, 489, 563, 485, 485, 563, 485, 489, 485, 485,
  /* 2502 */ 491, 485, 485, 485, 485, 565, 481, 481, 481, 0, 0, 427, 0, 0, 459, 0, 0, 463, 0, 0, 465, 471, 0, 487, 0, 0,
  /* 2528 */ 253, 0, 0, 479, 0, 2, 2, 0, 0, 2, 2, 2, 0, 2, 0, 2, 2, 0, 12, 0, 0, 0, 26, 0, 0, 0, 45, 0, 483, 483, 0, 0,
  /* 2560 */ 0, 483, 45, 0, 0, 479, 479, 0, 483, 0, 45, 0, 0, 4, 14, 0, 0, 0, 12, 2, 331, 0, 0, 0, 283, 533, 529, 0, 0,
  /* 2589 */ 303, 0, 9, 3, 0, 0, 323, 0, 7, 0, 0, 0, 357, 0, 551, 0, 113, 553, 0, 0, 0, 371, 0, 0, 4, 373, 391, 385,
  /* 2617 */ 385, 385, 0, 0, 483, 0, 0, 0, 22, 499, 499, 385, 373, 567, 391, 391, 397, 391, 395, 391, 391, 391, 407,
  /* 2640 */ 391, 391, 391, 401, 395, 391, 391, 401, 391, 391, 395, 391, 391, 543, 391, 391, 391, 409, 415, 397, 397,
  /* 2661 */ 391, 45, 391, 391, 407, 391, 537, 405, 391, 391, 397, 413, 391, 391, 383, 45, 415, 391, 391, 391, 391, 397,
  /* 2683 */ 391, 539, 391, 391, 383, 391, 0, 391, 391, 45, 407, 391, 397, 397, 539, 411, 417, 391, 419, 391, 395, 391,
  /* 2705 */ 555, 0, 0, 0, 377, 0, 0, 499, 499, 0, 0, 533, 0, 0, 481, 481, 0, 0, 0, 379, 0, 0, 345, 0, 387, 0, 0, 0,
  /* 2733 */ 381, 375, 0, 0, 371, 0, 12, 12, 0, 0, 26, 26, 0, 6, 22, 26, 0, 26, 0, 535, 0, 0, 0, 457, 467, 0, 0, 0, 479,
  /* 2762 */ 0, 0, 0, 457, 0, 0, 0, 481, 0, 0, 461, 0, 0, 393, 0, 469, 0, 0, 0, 485, 485, 485, 477, 485, 485, 14, 16,
  /* 2789 */ 18, 20, 0, 0, 0, 389, 0, 22, 0, 0, 399, 0, 24, 0, 0, 0, 519, 4, 16, 8, 0, 6, 0, 4, 0, 547, 497, 185, 185,
  /* 2818 */ 509, 185, 16, 16, 185, 187, 185, 185, 0, 185, 185, 185, 16, 0, 185, 279, 16, 509, 185, 517, 16, 185, 185,
  /* 2841 */ 185, 185, 0, 16, 185, 0, 0, 0, 16, 279, 185, 185, 185, 16, 185, 279, 185, 515, 185, 185, 16, 187, 185, 555,
  /* 2865 */ 0, 26, 0, 26, 26, 26, 26, 0, 0, 0, 16, 16, 16, 0, 0, 16, 16, 16, 16, 0, 16, 0, 0, 10, 0, 10, 10, 10, 10, 0,
  /* 2895 */ 10, 0, 10, 0, 0, 10, 10, 10, 10, 10, 26, 26, 0, 26, 10, 0, 14, 0, 26
];

XQueryParser_ts.TOKEN =
[
  "%ERROR",
  "PragmaContents",
  "DirCommentContents",
  "DirPIContents",
  "CDataSection",
  "URILiteral",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "NCName",
  "QName",
  "S",
  "S",
  "CharRef",
  "CommentContents",
  "'\"'",
  "'#'",
  "'#)'",
  "''''",
  "'(:'",
  "'*'",
  "'-->'",
  "'/>'",
  "':)'",
  "'::'",
  "':='",
  "'</'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'all'",
  "'any'",
  "'check'",
  "'collection'",
  "'content'",
  "'decimal-separator'",
  "'digit'",
  "'foreach'",
  "'foreign'",
  "'ftand'",
  "'ftnot'",
  "'ftor'",
  "'greatest'",
  "'grouping-separator'",
  "'infinity'",
  "'inherit'",
  "'insensitive'",
  "'json'",
  "'key'",
  "'least'",
  "'levels'",
  "'lowercase'",
  "'minus-sign'",
  "'most'",
  "'next'",
  "'no-inherit'",
  "'no-preserve'",
  "'not'",
  "'occurs'",
  "'of'",
  "'on'",
  "'paragraph'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'phrase'",
  "'position'",
  "'preserve'",
  "'previous'",
  "'relationship'",
  "'sensitive'",
  "'sentence'",
  "'skip'",
  "'strip'",
  "'then'",
  "'unique'",
  "'uppercase'",
  "'using'",
  "'weight'",
  "'when'",
  "'without'",
  "'word'",
  "'zero-digit'",
  "'{{'",
  "'}}'",
  "EOF",
  "'!='",
  "'('",
  "'(#'",
  "')'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'//'",
  "':'",
  "';'",
  "'<'",
  "'<!--'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'>'",
  "'>='",
  "'>>'",
  "'['",
  "']'",
  "'append'",
  "'by'",
  "'contains'",
  "'diacritics'",
  "'different'",
  "'distance'",
  "'entire'",
  "'exactly'",
  "'from'",
  "'language'",
  "'paragraphs'",
  "'same'",
  "'sentences'",
  "'stemming'",
  "'stop'",
  "'structured-item'",
  "'thesaurus'",
  "'times'",
  "'wildcards'",
  "'window'",
  "'words'",
  "'{|'",
  "'|'",
  "'||'",
  "'|}'",
  "'}'",
  "Wildcard",
  "EQName",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "'!'",
  "'$'",
  "'%'",
  "'.'",
  "'..'",
  "'/'",
  "'after'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'break'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'child'",
  "'collation'",
  "'comment'",
  "'constraint'",
  "'construction'",
  "'context'",
  "'continue'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'eq'",
  "'every'",
  "'except'",
  "'exit'",
  "'external'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'ft-option'",
  "'function'",
  "'ge'",
  "'group'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'index'",
  "'insert'",
  "'instance'",
  "'integrity'",
  "'intersect'",
  "'into'",
  "'is'",
  "'item'",
  "'json-item'",
  "'last'",
  "'lax'",
  "'le'",
  "'let'",
  "'loop'",
  "'lt'",
  "'mod'",
  "'modify'",
  "'module'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'no'",
  "'node'",
  "'nodes'",
  "'object'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'parent'",
  "'preceding'",
  "'preceding-sibling'",
  "'processing-instruction'",
  "'rename'",
  "'replace'",
  "'return'",
  "'returning'",
  "'revalidation'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'score'",
  "'self'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'strict'",
  "'switch'",
  "'text'",
  "'to'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unordered'",
  "'updating'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'where'",
  "'while'",
  "'with'",
  "'xquery'",
  "'{'"
];

                                                            // line 1123 "XQueryParser.ebnf"
                                                            });
                                                            // line 24880 "XQueryParser_ts.js"
// End
