// This file was generated on Thu Dec 26, 2024 06:56 (UTC+01) by REx v6.1-SNAPSHOT which is Copyright (c) 1979-2024 by Gunther Rademacher <grd@gmx.net>
// REx command line: -q Java.ebnf -backtrack -ll 2 -tree -main -javascript -name JavaJS

function JavaJS(string, parsingEventHandler)
{
  init(string, parsingEventHandler);

  var thisParser = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var begin = b;
    var end = e;
    var state = s;
    var offending = o;
    var expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};
    this.isAmbiguousInput = function() {return false;};

    this.getMessage = function()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    };
  };

  function init(source, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = source;
    size = source.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  this.getTokenOffset = function()
  {
    return b0;
  };

  this.getTokenEnd = function()
  {
    return e0;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0; b2 = 0; e2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.reset = function(l, b, e)
  {
    reset(l, b, e);
  };

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? JavaJS.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = JavaJS.getTokenSet(- e.getState());
    }
    else
    {
      expected = [JavaJS.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var message = e.getMessage();
    var found = this.getOffendingToken(e);
    var tokenSet = this.getExpectedTokenSet(e);
    var size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_compilationUnit = function()
  {
    eventHandler.startNonterminal("compilationUnit", e0);
    lookahead1W(80);                // ENUM | WS | COMMENT | LINE_COMMENT | EOF | ';' | '@' | 'abstract' | 'class' |
                                    // 'final' | 'import' | 'interface' | 'package' | 'private' | 'protected' |
                                    // 'public' | 'static' | 'strictfp'
    switch (l1)
    {
    case 51:                        // '@'
      lookahead2W(23);              // Identifier | WS | COMMENT | LINE_COMMENT | 'interface'
      break;
    default:
      lk = l1;
    }
    if (lk == 1203)                 // '@' Identifier
    {
      lk = memoized(0, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_annotations();
          switch (l1)
          {
          case 85:                  // 'package'
            try_packageDeclaration();
            for (;;)
            {
              lookahead1W(79);      // ENUM | WS | COMMENT | LINE_COMMENT | EOF | ';' | '@' | 'abstract' | 'class' |
                                    // 'final' | 'import' | 'interface' | 'private' | 'protected' | 'public' |
                                    // 'static' | 'strictfp'
              if (l1 != 77)         // 'import'
              {
                break;
              }
              try_importDeclaration();
            }
            for (;;)
            {
              lookahead1W(78);      // ENUM | WS | COMMENT | LINE_COMMENT | EOF | ';' | '@' | 'abstract' | 'class' |
                                    // 'final' | 'interface' | 'private' | 'protected' | 'public' | 'static' |
                                    // 'strictfp'
              if (l1 == 13)         // EOF
              {
                break;
              }
              try_typeDeclaration();
            }
            break;
          default:
            try_classOrInterfaceDeclaration();
            for (;;)
            {
              lookahead1W(78);      // ENUM | WS | COMMENT | LINE_COMMENT | EOF | ';' | '@' | 'abstract' | 'class' |
                                    // 'final' | 'interface' | 'private' | 'protected' | 'public' | 'static' |
                                    // 'strictfp'
              if (l1 == 13)         // EOF
              {
                break;
              }
              try_typeDeclaration();
            }
          }
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(0, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      parse_annotations();
      switch (l1)
      {
      case 85:                      // 'package'
        whitespace();
        parse_packageDeclaration();
        for (;;)
        {
          lookahead1W(79);          // ENUM | WS | COMMENT | LINE_COMMENT | EOF | ';' | '@' | 'abstract' | 'class' |
                                    // 'final' | 'import' | 'interface' | 'private' | 'protected' | 'public' |
                                    // 'static' | 'strictfp'
          if (l1 != 77)             // 'import'
          {
            break;
          }
          whitespace();
          parse_importDeclaration();
        }
        for (;;)
        {
          lookahead1W(78);          // ENUM | WS | COMMENT | LINE_COMMENT | EOF | ';' | '@' | 'abstract' | 'class' |
                                    // 'final' | 'interface' | 'private' | 'protected' | 'public' | 'static' |
                                    // 'strictfp'
          if (l1 == 13)             // EOF
          {
            break;
          }
          whitespace();
          parse_typeDeclaration();
        }
        break;
      default:
        whitespace();
        parse_classOrInterfaceDeclaration();
        for (;;)
        {
          lookahead1W(78);          // ENUM | WS | COMMENT | LINE_COMMENT | EOF | ';' | '@' | 'abstract' | 'class' |
                                    // 'final' | 'interface' | 'private' | 'protected' | 'public' | 'static' |
                                    // 'strictfp'
          if (l1 == 13)             // EOF
          {
            break;
          }
          whitespace();
          parse_typeDeclaration();
        }
      }
      break;
    default:
      if (l1 == 85)                 // 'package'
      {
        whitespace();
        parse_packageDeclaration();
      }
      for (;;)
      {
        lookahead1W(79);            // ENUM | WS | COMMENT | LINE_COMMENT | EOF | ';' | '@' | 'abstract' | 'class' |
                                    // 'final' | 'import' | 'interface' | 'private' | 'protected' | 'public' |
                                    // 'static' | 'strictfp'
        if (l1 != 77)               // 'import'
        {
          break;
        }
        whitespace();
        parse_importDeclaration();
      }
      for (;;)
      {
        lookahead1W(78);            // ENUM | WS | COMMENT | LINE_COMMENT | EOF | ';' | '@' | 'abstract' | 'class' |
                                    // 'final' | 'interface' | 'private' | 'protected' | 'public' | 'static' |
                                    // 'strictfp'
        if (l1 == 13)               // EOF
        {
          break;
        }
        whitespace();
        parse_typeDeclaration();
      }
    }
    consume(13);                    // EOF
    eventHandler.endNonterminal("compilationUnit", e0);
  };

  function parse_packageDeclaration()
  {
    eventHandler.startNonterminal("packageDeclaration", e0);
    consume(85);                    // 'package'
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    whitespace();
    parse_qualifiedName();
    consume(37);                    // ';'
    eventHandler.endNonterminal("packageDeclaration", e0);
  }

  function try_packageDeclaration()
  {
    consumeT(85);                   // 'package'
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    try_qualifiedName();
    consumeT(37);                   // ';'
  }

  function parse_importDeclaration()
  {
    eventHandler.startNonterminal("importDeclaration", e0);
    consume(77);                    // 'import'
    lookahead1W(24);                // Identifier | WS | COMMENT | LINE_COMMENT | 'static'
    if (l1 == 91)                   // 'static'
    {
      consume(91);                  // 'static'
    }
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    whitespace();
    parse_qualifiedName();
    if (l1 == 32)                   // '.'
    {
      consume(32);                  // '.'
      lookahead1W(3);               // WS | COMMENT | LINE_COMMENT | '*'
      consume(23);                  // '*'
    }
    lookahead1W(6);                 // WS | COMMENT | LINE_COMMENT | ';'
    consume(37);                    // ';'
    eventHandler.endNonterminal("importDeclaration", e0);
  }

  function try_importDeclaration()
  {
    consumeT(77);                   // 'import'
    lookahead1W(24);                // Identifier | WS | COMMENT | LINE_COMMENT | 'static'
    if (l1 == 91)                   // 'static'
    {
      consumeT(91);                 // 'static'
    }
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    try_qualifiedName();
    if (l1 == 32)                   // '.'
    {
      consumeT(32);                 // '.'
      lookahead1W(3);               // WS | COMMENT | LINE_COMMENT | '*'
      consumeT(23);                 // '*'
    }
    lookahead1W(6);                 // WS | COMMENT | LINE_COMMENT | ';'
    consumeT(37);                   // ';'
  }

  function parse_typeDeclaration()
  {
    eventHandler.startNonterminal("typeDeclaration", e0);
    switch (l1)
    {
    case 37:                        // ';'
      consume(37);                  // ';'
      break;
    default:
      parse_classOrInterfaceDeclaration();
    }
    eventHandler.endNonterminal("typeDeclaration", e0);
  }

  function try_typeDeclaration()
  {
    switch (l1)
    {
    case 37:                        // ';'
      consumeT(37);                 // ';'
      break;
    default:
      try_classOrInterfaceDeclaration();
    }
  }

  function parse_classOrInterfaceDeclaration()
  {
    eventHandler.startNonterminal("classOrInterfaceDeclaration", e0);
    parse_classOrInterfaceModifiers();
    switch (l1)
    {
    case 7:                         // ENUM
    case 63:                        // 'class'
      whitespace();
      parse_classDeclaration();
      break;
    default:
      whitespace();
      parse_interfaceDeclaration();
    }
    eventHandler.endNonterminal("classOrInterfaceDeclaration", e0);
  }

  function try_classOrInterfaceDeclaration()
  {
    try_classOrInterfaceModifiers();
    switch (l1)
    {
    case 7:                         // ENUM
    case 63:                        // 'class'
      try_classDeclaration();
      break;
    default:
      try_interfaceDeclaration();
    }
  }

  function parse_classOrInterfaceModifiers()
  {
    eventHandler.startNonterminal("classOrInterfaceModifiers", e0);
    for (;;)
    {
      lookahead1W(74);              // ENUM | WS | COMMENT | LINE_COMMENT | '@' | 'abstract' | 'class' | 'final' |
                                    // 'interface' | 'private' | 'protected' | 'public' | 'static' | 'strictfp'
      switch (l1)
      {
      case 51:                      // '@'
        lookahead2W(23);            // Identifier | WS | COMMENT | LINE_COMMENT | 'interface'
        break;
      default:
        lk = l1;
      }
      if (lk == 7                   // ENUM
       || lk == 63                  // 'class'
       || lk == 80                  // 'interface'
       || lk == 10291)              // '@' 'interface'
      {
        break;
      }
      whitespace();
      parse_classOrInterfaceModifier();
    }
    eventHandler.endNonterminal("classOrInterfaceModifiers", e0);
  }

  function try_classOrInterfaceModifiers()
  {
    for (;;)
    {
      lookahead1W(74);              // ENUM | WS | COMMENT | LINE_COMMENT | '@' | 'abstract' | 'class' | 'final' |
                                    // 'interface' | 'private' | 'protected' | 'public' | 'static' | 'strictfp'
      switch (l1)
      {
      case 51:                      // '@'
        lookahead2W(23);            // Identifier | WS | COMMENT | LINE_COMMENT | 'interface'
        break;
      default:
        lk = l1;
      }
      if (lk == 7                   // ENUM
       || lk == 63                  // 'class'
       || lk == 80                  // 'interface'
       || lk == 10291)              // '@' 'interface'
      {
        break;
      }
      try_classOrInterfaceModifier();
    }
  }

  function parse_classOrInterfaceModifier()
  {
    eventHandler.startNonterminal("classOrInterfaceModifier", e0);
    switch (l1)
    {
    case 51:                        // '@'
      parse_annotation();
      break;
    case 88:                        // 'public'
      consume(88);                  // 'public'
      break;
    case 87:                        // 'protected'
      consume(87);                  // 'protected'
      break;
    case 86:                        // 'private'
      consume(86);                  // 'private'
      break;
    case 56:                        // 'abstract'
      consume(56);                  // 'abstract'
      break;
    case 91:                        // 'static'
      consume(91);                  // 'static'
      break;
    case 71:                        // 'final'
      consume(71);                  // 'final'
      break;
    default:
      consume(92);                  // 'strictfp'
    }
    eventHandler.endNonterminal("classOrInterfaceModifier", e0);
  }

  function try_classOrInterfaceModifier()
  {
    switch (l1)
    {
    case 51:                        // '@'
      try_annotation();
      break;
    case 88:                        // 'public'
      consumeT(88);                 // 'public'
      break;
    case 87:                        // 'protected'
      consumeT(87);                 // 'protected'
      break;
    case 86:                        // 'private'
      consumeT(86);                 // 'private'
      break;
    case 56:                        // 'abstract'
      consumeT(56);                 // 'abstract'
      break;
    case 91:                        // 'static'
      consumeT(91);                 // 'static'
      break;
    case 71:                        // 'final'
      consumeT(71);                 // 'final'
      break;
    default:
      consumeT(92);                 // 'strictfp'
    }
  }

  function parse_modifiers()
  {
    eventHandler.startNonterminal("modifiers", e0);
    for (;;)
    {
      lookahead1W(85);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | '<' | '@' | 'abstract' |
                                    // 'boolean' | 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' |
                                    // 'interface' | 'long' | 'native' | 'private' | 'protected' | 'public' | 'short' |
                                    // 'static' | 'strictfp' | 'synchronized' | 'transient' | 'void' | 'volatile'
      switch (l1)
      {
      case 51:                      // '@'
        lookahead2W(23);            // Identifier | WS | COMMENT | LINE_COMMENT | 'interface'
        break;
      default:
        lk = l1;
      }
      if (lk != 56                  // 'abstract'
       && lk != 71                  // 'final'
       && lk != 82                  // 'native'
       && lk != 86                  // 'private'
       && lk != 87                  // 'protected'
       && lk != 88                  // 'public'
       && lk != 91                  // 'static'
       && lk != 92                  // 'strictfp'
       && lk != 95                  // 'synchronized'
       && lk != 99                  // 'transient'
       && lk != 103                 // 'volatile'
       && lk != 1203)               // '@' Identifier
      {
        break;
      }
      whitespace();
      parse_modifier();
    }
    eventHandler.endNonterminal("modifiers", e0);
  }

  function try_modifiers()
  {
    for (;;)
    {
      lookahead1W(85);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | '<' | '@' | 'abstract' |
                                    // 'boolean' | 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' |
                                    // 'interface' | 'long' | 'native' | 'private' | 'protected' | 'public' | 'short' |
                                    // 'static' | 'strictfp' | 'synchronized' | 'transient' | 'void' | 'volatile'
      switch (l1)
      {
      case 51:                      // '@'
        lookahead2W(23);            // Identifier | WS | COMMENT | LINE_COMMENT | 'interface'
        break;
      default:
        lk = l1;
      }
      if (lk != 56                  // 'abstract'
       && lk != 71                  // 'final'
       && lk != 82                  // 'native'
       && lk != 86                  // 'private'
       && lk != 87                  // 'protected'
       && lk != 88                  // 'public'
       && lk != 91                  // 'static'
       && lk != 92                  // 'strictfp'
       && lk != 95                  // 'synchronized'
       && lk != 99                  // 'transient'
       && lk != 103                 // 'volatile'
       && lk != 1203)               // '@' Identifier
      {
        break;
      }
      try_modifier();
    }
  }

  function parse_classDeclaration()
  {
    eventHandler.startNonterminal("classDeclaration", e0);
    switch (l1)
    {
    case 63:                        // 'class'
      parse_normalClassDeclaration();
      break;
    default:
      parse_enumDeclaration();
    }
    eventHandler.endNonterminal("classDeclaration", e0);
  }

  function try_classDeclaration()
  {
    switch (l1)
    {
    case 63:                        // 'class'
      try_normalClassDeclaration();
      break;
    default:
      try_enumDeclaration();
    }
  }

  function parse_normalClassDeclaration()
  {
    eventHandler.startNonterminal("normalClassDeclaration", e0);
    consume(63);                    // 'class'
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    consume(9);                     // Identifier
    lookahead1W(60);                // WS | COMMENT | LINE_COMMENT | '<' | 'extends' | 'implements' | '{'
    if (l1 == 38)                   // '<'
    {
      whitespace();
      parse_typeParameters();
    }
    lookahead1W(53);                // WS | COMMENT | LINE_COMMENT | 'extends' | 'implements' | '{'
    if (l1 == 69)                   // 'extends'
    {
      consume(69);                  // 'extends'
      lookahead1W(69);              // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      whitespace();
      parse_type();
    }
    if (l1 == 76)                   // 'implements'
    {
      consume(76);                  // 'implements'
      lookahead1W(69);              // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      whitespace();
      parse_typeList();
    }
    whitespace();
    parse_classBody();
    eventHandler.endNonterminal("normalClassDeclaration", e0);
  }

  function try_normalClassDeclaration()
  {
    consumeT(63);                   // 'class'
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    consumeT(9);                    // Identifier
    lookahead1W(60);                // WS | COMMENT | LINE_COMMENT | '<' | 'extends' | 'implements' | '{'
    if (l1 == 38)                   // '<'
    {
      try_typeParameters();
    }
    lookahead1W(53);                // WS | COMMENT | LINE_COMMENT | 'extends' | 'implements' | '{'
    if (l1 == 69)                   // 'extends'
    {
      consumeT(69);                 // 'extends'
      lookahead1W(69);              // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      try_type();
    }
    if (l1 == 76)                   // 'implements'
    {
      consumeT(76);                 // 'implements'
      lookahead1W(69);              // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      try_typeList();
    }
    try_classBody();
  }

  function parse_typeParameters()
  {
    eventHandler.startNonterminal("typeParameters", e0);
    consume(38);                    // '<'
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    whitespace();
    parse_typeParameter();
    for (;;)
    {
      if (l1 != 28)                 // ','
      {
        break;
      }
      consume(28);                  // ','
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      whitespace();
      parse_typeParameter();
    }
    consume(44);                    // '>'
    eventHandler.endNonterminal("typeParameters", e0);
  }

  function try_typeParameters()
  {
    consumeT(38);                   // '<'
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    try_typeParameter();
    for (;;)
    {
      if (l1 != 28)                 // ','
      {
        break;
      }
      consumeT(28);                 // ','
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      try_typeParameter();
    }
    consumeT(44);                   // '>'
  }

  function parse_typeParameter()
  {
    eventHandler.startNonterminal("typeParameter", e0);
    consume(9);                     // Identifier
    lookahead1W(48);                // WS | COMMENT | LINE_COMMENT | ',' | '>' | 'extends'
    if (l1 == 69)                   // 'extends'
    {
      consume(69);                  // 'extends'
      lookahead1W(69);              // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      whitespace();
      parse_typeBound();
    }
    eventHandler.endNonterminal("typeParameter", e0);
  }

  function try_typeParameter()
  {
    consumeT(9);                    // Identifier
    lookahead1W(48);                // WS | COMMENT | LINE_COMMENT | ',' | '>' | 'extends'
    if (l1 == 69)                   // 'extends'
    {
      consumeT(69);                 // 'extends'
      lookahead1W(69);              // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      try_typeBound();
    }
  }

  function parse_typeBound()
  {
    eventHandler.startNonterminal("typeBound", e0);
    parse_type();
    for (;;)
    {
      if (l1 != 18)                 // '&'
      {
        break;
      }
      consume(18);                  // '&'
      lookahead1W(69);              // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      whitespace();
      parse_type();
    }
    eventHandler.endNonterminal("typeBound", e0);
  }

  function try_typeBound()
  {
    try_type();
    for (;;)
    {
      if (l1 != 18)                 // '&'
      {
        break;
      }
      consumeT(18);                 // '&'
      lookahead1W(69);              // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      try_type();
    }
  }

  function parse_enumDeclaration()
  {
    eventHandler.startNonterminal("enumDeclaration", e0);
    consume(7);                     // ENUM
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    consume(9);                     // Identifier
    lookahead1W(40);                // WS | COMMENT | LINE_COMMENT | 'implements' | '{'
    if (l1 == 76)                   // 'implements'
    {
      consume(76);                  // 'implements'
      lookahead1W(69);              // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      whitespace();
      parse_typeList();
    }
    whitespace();
    parse_enumBody();
    eventHandler.endNonterminal("enumDeclaration", e0);
  }

  function try_enumDeclaration()
  {
    consumeT(7);                    // ENUM
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    consumeT(9);                    // Identifier
    lookahead1W(40);                // WS | COMMENT | LINE_COMMENT | 'implements' | '{'
    if (l1 == 76)                   // 'implements'
    {
      consumeT(76);                 // 'implements'
      lookahead1W(69);              // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      try_typeList();
    }
    try_enumBody();
  }

  function parse_enumBody()
  {
    eventHandler.startNonterminal("enumBody", e0);
    consume(105);                   // '{'
    lookahead1W(62);                // Identifier | WS | COMMENT | LINE_COMMENT | ',' | ';' | '@' | '}'
    if (l1 == 9                     // Identifier
     || l1 == 51)                   // '@'
    {
      whitespace();
      parse_enumConstants();
    }
    if (l1 == 28)                   // ','
    {
      consume(28);                  // ','
    }
    lookahead1W(34);                // WS | COMMENT | LINE_COMMENT | ';' | '}'
    if (l1 == 37)                   // ';'
    {
      whitespace();
      parse_enumBodyDeclarations();
    }
    consume(109);                   // '}'
    eventHandler.endNonterminal("enumBody", e0);
  }

  function try_enumBody()
  {
    consumeT(105);                  // '{'
    lookahead1W(62);                // Identifier | WS | COMMENT | LINE_COMMENT | ',' | ';' | '@' | '}'
    if (l1 == 9                     // Identifier
     || l1 == 51)                   // '@'
    {
      try_enumConstants();
    }
    if (l1 == 28)                   // ','
    {
      consumeT(28);                 // ','
    }
    lookahead1W(34);                // WS | COMMENT | LINE_COMMENT | ';' | '}'
    if (l1 == 37)                   // ';'
    {
      try_enumBodyDeclarations();
    }
    consumeT(109);                  // '}'
  }

  function parse_enumConstants()
  {
    eventHandler.startNonterminal("enumConstants", e0);
    parse_enumConstant();
    for (;;)
    {
      lookahead1W(47);              // WS | COMMENT | LINE_COMMENT | ',' | ';' | '}'
      switch (l1)
      {
      case 28:                      // ','
        lookahead2W(54);            // Identifier | WS | COMMENT | LINE_COMMENT | ';' | '@' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 1180                // ',' Identifier
       && lk != 6556)               // ',' '@'
      {
        break;
      }
      consume(28);                  // ','
      lookahead1W(22);              // Identifier | WS | COMMENT | LINE_COMMENT | '@'
      whitespace();
      parse_enumConstant();
    }
    eventHandler.endNonterminal("enumConstants", e0);
  }

  function try_enumConstants()
  {
    try_enumConstant();
    for (;;)
    {
      lookahead1W(47);              // WS | COMMENT | LINE_COMMENT | ',' | ';' | '}'
      switch (l1)
      {
      case 28:                      // ','
        lookahead2W(54);            // Identifier | WS | COMMENT | LINE_COMMENT | ';' | '@' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 1180                // ',' Identifier
       && lk != 6556)               // ',' '@'
      {
        break;
      }
      consumeT(28);                 // ','
      lookahead1W(22);              // Identifier | WS | COMMENT | LINE_COMMENT | '@'
      try_enumConstant();
    }
  }

  function parse_enumConstant()
  {
    eventHandler.startNonterminal("enumConstant", e0);
    if (l1 == 51)                   // '@'
    {
      whitespace();
      parse_annotations();
    }
    consume(9);                     // Identifier
    lookahead1W(64);                // WS | COMMENT | LINE_COMMENT | '(' | ',' | ';' | '{' | '}'
    if (l1 == 21)                   // '('
    {
      whitespace();
      parse_arguments();
    }
    lookahead1W(57);                // WS | COMMENT | LINE_COMMENT | ',' | ';' | '{' | '}'
    if (l1 == 105)                  // '{'
    {
      whitespace();
      parse_classBody();
    }
    eventHandler.endNonterminal("enumConstant", e0);
  }

  function try_enumConstant()
  {
    if (l1 == 51)                   // '@'
    {
      try_annotations();
    }
    consumeT(9);                    // Identifier
    lookahead1W(64);                // WS | COMMENT | LINE_COMMENT | '(' | ',' | ';' | '{' | '}'
    if (l1 == 21)                   // '('
    {
      try_arguments();
    }
    lookahead1W(57);                // WS | COMMENT | LINE_COMMENT | ',' | ';' | '{' | '}'
    if (l1 == 105)                  // '{'
    {
      try_classBody();
    }
  }

  function parse_enumBodyDeclarations()
  {
    eventHandler.startNonterminal("enumBodyDeclarations", e0);
    consume(37);                    // ';'
    for (;;)
    {
      lookahead1W(90);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | ';' | '<' | '@' | 'abstract' |
                                    // 'boolean' | 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' |
                                    // 'interface' | 'long' | 'native' | 'private' | 'protected' | 'public' | 'short' |
                                    // 'static' | 'strictfp' | 'synchronized' | 'transient' | 'void' | 'volatile' |
                                    // '{' | '}'
      if (l1 == 109)                // '}'
      {
        break;
      }
      whitespace();
      parse_classBodyDeclaration();
    }
    eventHandler.endNonterminal("enumBodyDeclarations", e0);
  }

  function try_enumBodyDeclarations()
  {
    consumeT(37);                   // ';'
    for (;;)
    {
      lookahead1W(90);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | ';' | '<' | '@' | 'abstract' |
                                    // 'boolean' | 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' |
                                    // 'interface' | 'long' | 'native' | 'private' | 'protected' | 'public' | 'short' |
                                    // 'static' | 'strictfp' | 'synchronized' | 'transient' | 'void' | 'volatile' |
                                    // '{' | '}'
      if (l1 == 109)                // '}'
      {
        break;
      }
      try_classBodyDeclaration();
    }
  }

  function parse_interfaceDeclaration()
  {
    eventHandler.startNonterminal("interfaceDeclaration", e0);
    switch (l1)
    {
    case 80:                        // 'interface'
      parse_normalInterfaceDeclaration();
      break;
    default:
      parse_annotationTypeDeclaration();
    }
    eventHandler.endNonterminal("interfaceDeclaration", e0);
  }

  function try_interfaceDeclaration()
  {
    switch (l1)
    {
    case 80:                        // 'interface'
      try_normalInterfaceDeclaration();
      break;
    default:
      try_annotationTypeDeclaration();
    }
  }

  function parse_normalInterfaceDeclaration()
  {
    eventHandler.startNonterminal("normalInterfaceDeclaration", e0);
    consume(80);                    // 'interface'
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    consume(9);                     // Identifier
    lookahead1W(51);                // WS | COMMENT | LINE_COMMENT | '<' | 'extends' | '{'
    if (l1 == 38)                   // '<'
    {
      whitespace();
      parse_typeParameters();
    }
    lookahead1W(39);                // WS | COMMENT | LINE_COMMENT | 'extends' | '{'
    if (l1 == 69)                   // 'extends'
    {
      consume(69);                  // 'extends'
      lookahead1W(69);              // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      whitespace();
      parse_typeList();
    }
    whitespace();
    parse_interfaceBody();
    eventHandler.endNonterminal("normalInterfaceDeclaration", e0);
  }

  function try_normalInterfaceDeclaration()
  {
    consumeT(80);                   // 'interface'
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    consumeT(9);                    // Identifier
    lookahead1W(51);                // WS | COMMENT | LINE_COMMENT | '<' | 'extends' | '{'
    if (l1 == 38)                   // '<'
    {
      try_typeParameters();
    }
    lookahead1W(39);                // WS | COMMENT | LINE_COMMENT | 'extends' | '{'
    if (l1 == 69)                   // 'extends'
    {
      consumeT(69);                 // 'extends'
      lookahead1W(69);              // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      try_typeList();
    }
    try_interfaceBody();
  }

  function parse_typeList()
  {
    eventHandler.startNonterminal("typeList", e0);
    parse_type();
    for (;;)
    {
      if (l1 != 28)                 // ','
      {
        break;
      }
      consume(28);                  // ','
      lookahead1W(69);              // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      whitespace();
      parse_type();
    }
    eventHandler.endNonterminal("typeList", e0);
  }

  function try_typeList()
  {
    try_type();
    for (;;)
    {
      if (l1 != 28)                 // ','
      {
        break;
      }
      consumeT(28);                 // ','
      lookahead1W(69);              // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      try_type();
    }
  }

  function parse_classBody()
  {
    eventHandler.startNonterminal("classBody", e0);
    consume(105);                   // '{'
    for (;;)
    {
      lookahead1W(90);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | ';' | '<' | '@' | 'abstract' |
                                    // 'boolean' | 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' |
                                    // 'interface' | 'long' | 'native' | 'private' | 'protected' | 'public' | 'short' |
                                    // 'static' | 'strictfp' | 'synchronized' | 'transient' | 'void' | 'volatile' |
                                    // '{' | '}'
      if (l1 == 109)                // '}'
      {
        break;
      }
      whitespace();
      parse_classBodyDeclaration();
    }
    consume(109);                   // '}'
    eventHandler.endNonterminal("classBody", e0);
  }

  function try_classBody()
  {
    consumeT(105);                  // '{'
    for (;;)
    {
      lookahead1W(90);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | ';' | '<' | '@' | 'abstract' |
                                    // 'boolean' | 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' |
                                    // 'interface' | 'long' | 'native' | 'private' | 'protected' | 'public' | 'short' |
                                    // 'static' | 'strictfp' | 'synchronized' | 'transient' | 'void' | 'volatile' |
                                    // '{' | '}'
      if (l1 == 109)                // '}'
      {
        break;
      }
      try_classBodyDeclaration();
    }
    consumeT(109);                  // '}'
  }

  function parse_interfaceBody()
  {
    eventHandler.startNonterminal("interfaceBody", e0);
    consume(105);                   // '{'
    for (;;)
    {
      lookahead1W(87);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | ';' | '<' | '@' | 'abstract' |
                                    // 'boolean' | 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' |
                                    // 'interface' | 'long' | 'native' | 'private' | 'protected' | 'public' | 'short' |
                                    // 'static' | 'strictfp' | 'synchronized' | 'transient' | 'void' | 'volatile' | '}'
      if (l1 == 109)                // '}'
      {
        break;
      }
      whitespace();
      parse_interfaceBodyDeclaration();
    }
    consume(109);                   // '}'
    eventHandler.endNonterminal("interfaceBody", e0);
  }

  function try_interfaceBody()
  {
    consumeT(105);                  // '{'
    for (;;)
    {
      lookahead1W(87);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | ';' | '<' | '@' | 'abstract' |
                                    // 'boolean' | 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' |
                                    // 'interface' | 'long' | 'native' | 'private' | 'protected' | 'public' | 'short' |
                                    // 'static' | 'strictfp' | 'synchronized' | 'transient' | 'void' | 'volatile' | '}'
      if (l1 == 109)                // '}'
      {
        break;
      }
      try_interfaceBodyDeclaration();
    }
    consumeT(109);                  // '}'
  }

  function parse_classBodyDeclaration()
  {
    eventHandler.startNonterminal("classBodyDeclaration", e0);
    switch (l1)
    {
    case 91:                        // 'static'
      lookahead2W(86);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | '<' | '@' | 'abstract' |
                                    // 'boolean' | 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' |
                                    // 'interface' | 'long' | 'native' | 'private' | 'protected' | 'public' | 'short' |
                                    // 'static' | 'strictfp' | 'synchronized' | 'transient' | 'void' | 'volatile' | '{'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 37:                        // ';'
      consume(37);                  // ';'
      break;
    case 105:                       // '{'
    case 13531:                     // 'static' '{'
      if (l1 == 91)                 // 'static'
      {
        consume(91);                // 'static'
      }
      lookahead1W(17);              // WS | COMMENT | LINE_COMMENT | '{'
      whitespace();
      parse_block();
      break;
    default:
      parse_modifiers();
      whitespace();
      parse_memberDecl();
    }
    eventHandler.endNonterminal("classBodyDeclaration", e0);
  }

  function try_classBodyDeclaration()
  {
    switch (l1)
    {
    case 91:                        // 'static'
      lookahead2W(86);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | '<' | '@' | 'abstract' |
                                    // 'boolean' | 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' |
                                    // 'interface' | 'long' | 'native' | 'private' | 'protected' | 'public' | 'short' |
                                    // 'static' | 'strictfp' | 'synchronized' | 'transient' | 'void' | 'volatile' | '{'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 37:                        // ';'
      consumeT(37);                 // ';'
      break;
    case 105:                       // '{'
    case 13531:                     // 'static' '{'
      if (l1 == 91)                 // 'static'
      {
        consumeT(91);               // 'static'
      }
      lookahead1W(17);              // WS | COMMENT | LINE_COMMENT | '{'
      try_block();
      break;
    default:
      try_modifiers();
      try_memberDecl();
    }
  }

  function parse_memberDecl()
  {
    eventHandler.startNonterminal("memberDecl", e0);
    switch (l1)
    {
    case 9:                         // Identifier
      lookahead2W(61);              // Identifier | WS | COMMENT | LINE_COMMENT | '(' | '.' | '<' | '['
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 38:                        // '<'
      parse_genericMethodOrConstructorDecl();
      break;
    case 102:                       // 'void'
      consume(102);                 // 'void'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      consume(9);                   // Identifier
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      whitespace();
      parse_voidMethodDeclaratorRest();
      break;
    case 2697:                      // Identifier '('
      consume(9);                   // Identifier
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      whitespace();
      parse_constructorDeclaratorRest();
      break;
    case 51:                        // '@'
    case 80:                        // 'interface'
      parse_interfaceDeclaration();
      break;
    case 7:                         // ENUM
    case 63:                        // 'class'
      parse_classDeclaration();
      break;
    default:
      parse_memberDeclaration();
    }
    eventHandler.endNonterminal("memberDecl", e0);
  }

  function try_memberDecl()
  {
    switch (l1)
    {
    case 9:                         // Identifier
      lookahead2W(61);              // Identifier | WS | COMMENT | LINE_COMMENT | '(' | '.' | '<' | '['
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 38:                        // '<'
      try_genericMethodOrConstructorDecl();
      break;
    case 102:                       // 'void'
      consumeT(102);                // 'void'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      consumeT(9);                  // Identifier
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      try_voidMethodDeclaratorRest();
      break;
    case 2697:                      // Identifier '('
      consumeT(9);                  // Identifier
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      try_constructorDeclaratorRest();
      break;
    case 51:                        // '@'
    case 80:                        // 'interface'
      try_interfaceDeclaration();
      break;
    case 7:                         // ENUM
    case 63:                        // 'class'
      try_classDeclaration();
      break;
    default:
      try_memberDeclaration();
    }
  }

  function parse_memberDeclaration()
  {
    eventHandler.startNonterminal("memberDeclaration", e0);
    parse_type();
    switch (l1)
    {
    case 9:                         // Identifier
      lookahead2W(63);              // WS | COMMENT | LINE_COMMENT | '(' | ',' | ';' | '=' | '['
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 2697:                      // Identifier '('
      whitespace();
      parse_methodDeclaration();
      break;
    default:
      whitespace();
      parse_fieldDeclaration();
    }
    eventHandler.endNonterminal("memberDeclaration", e0);
  }

  function try_memberDeclaration()
  {
    try_type();
    switch (l1)
    {
    case 9:                         // Identifier
      lookahead2W(63);              // WS | COMMENT | LINE_COMMENT | '(' | ',' | ';' | '=' | '['
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 2697:                      // Identifier '('
      try_methodDeclaration();
      break;
    default:
      try_fieldDeclaration();
    }
  }

  function parse_genericMethodOrConstructorDecl()
  {
    eventHandler.startNonterminal("genericMethodOrConstructorDecl", e0);
    parse_typeParameters();
    lookahead1W(73);                // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short' | 'void'
    whitespace();
    parse_genericMethodOrConstructorRest();
    eventHandler.endNonterminal("genericMethodOrConstructorDecl", e0);
  }

  function try_genericMethodOrConstructorDecl()
  {
    try_typeParameters();
    lookahead1W(73);                // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short' | 'void'
    try_genericMethodOrConstructorRest();
  }

  function parse_genericMethodOrConstructorRest()
  {
    eventHandler.startNonterminal("genericMethodOrConstructorRest", e0);
    switch (l1)
    {
    case 9:                         // Identifier
      lookahead2W(61);              // Identifier | WS | COMMENT | LINE_COMMENT | '(' | '.' | '<' | '['
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 2697:                      // Identifier '('
      consume(9);                   // Identifier
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      whitespace();
      parse_constructorDeclaratorRest();
      break;
    default:
      switch (l1)
      {
      case 102:                     // 'void'
        consume(102);               // 'void'
        break;
      default:
        parse_type();
      }
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      consume(9);                   // Identifier
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      whitespace();
      parse_methodDeclaratorRest();
    }
    eventHandler.endNonterminal("genericMethodOrConstructorRest", e0);
  }

  function try_genericMethodOrConstructorRest()
  {
    switch (l1)
    {
    case 9:                         // Identifier
      lookahead2W(61);              // Identifier | WS | COMMENT | LINE_COMMENT | '(' | '.' | '<' | '['
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 2697:                      // Identifier '('
      consumeT(9);                  // Identifier
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      try_constructorDeclaratorRest();
      break;
    default:
      switch (l1)
      {
      case 102:                     // 'void'
        consumeT(102);              // 'void'
        break;
      default:
        try_type();
      }
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      consumeT(9);                  // Identifier
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      try_methodDeclaratorRest();
    }
  }

  function parse_methodDeclaration()
  {
    eventHandler.startNonterminal("methodDeclaration", e0);
    consume(9);                     // Identifier
    lookahead1W(1);                 // WS | COMMENT | LINE_COMMENT | '('
    whitespace();
    parse_methodDeclaratorRest();
    eventHandler.endNonterminal("methodDeclaration", e0);
  }

  function try_methodDeclaration()
  {
    consumeT(9);                    // Identifier
    lookahead1W(1);                 // WS | COMMENT | LINE_COMMENT | '('
    try_methodDeclaratorRest();
  }

  function parse_fieldDeclaration()
  {
    eventHandler.startNonterminal("fieldDeclaration", e0);
    parse_variableDeclarators();
    consume(37);                    // ';'
    eventHandler.endNonterminal("fieldDeclaration", e0);
  }

  function try_fieldDeclaration()
  {
    try_variableDeclarators();
    consumeT(37);                   // ';'
  }

  function parse_interfaceBodyDeclaration()
  {
    eventHandler.startNonterminal("interfaceBodyDeclaration", e0);
    switch (l1)
    {
    case 37:                        // ';'
      consume(37);                  // ';'
      break;
    default:
      parse_modifiers();
      whitespace();
      parse_interfaceMemberDecl();
    }
    eventHandler.endNonterminal("interfaceBodyDeclaration", e0);
  }

  function try_interfaceBodyDeclaration()
  {
    switch (l1)
    {
    case 37:                        // ';'
      consumeT(37);                 // ';'
      break;
    default:
      try_modifiers();
      try_interfaceMemberDecl();
    }
  }

  function parse_interfaceMemberDecl()
  {
    eventHandler.startNonterminal("interfaceMemberDecl", e0);
    switch (l1)
    {
    case 38:                        // '<'
      parse_interfaceGenericMethodDecl();
      break;
    case 102:                       // 'void'
      consume(102);                 // 'void'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      consume(9);                   // Identifier
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      whitespace();
      parse_voidInterfaceMethodDeclaratorRest();
      break;
    case 51:                        // '@'
    case 80:                        // 'interface'
      parse_interfaceDeclaration();
      break;
    case 7:                         // ENUM
    case 63:                        // 'class'
      parse_classDeclaration();
      break;
    default:
      parse_interfaceMethodOrFieldDecl();
    }
    eventHandler.endNonterminal("interfaceMemberDecl", e0);
  }

  function try_interfaceMemberDecl()
  {
    switch (l1)
    {
    case 38:                        // '<'
      try_interfaceGenericMethodDecl();
      break;
    case 102:                       // 'void'
      consumeT(102);                // 'void'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      consumeT(9);                  // Identifier
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      try_voidInterfaceMethodDeclaratorRest();
      break;
    case 51:                        // '@'
    case 80:                        // 'interface'
      try_interfaceDeclaration();
      break;
    case 7:                         // ENUM
    case 63:                        // 'class'
      try_classDeclaration();
      break;
    default:
      try_interfaceMethodOrFieldDecl();
    }
  }

  function parse_interfaceMethodOrFieldDecl()
  {
    eventHandler.startNonterminal("interfaceMethodOrFieldDecl", e0);
    parse_type();
    consume(9);                     // Identifier
    lookahead1W(45);                // WS | COMMENT | LINE_COMMENT | '(' | '=' | '['
    whitespace();
    parse_interfaceMethodOrFieldRest();
    eventHandler.endNonterminal("interfaceMethodOrFieldDecl", e0);
  }

  function try_interfaceMethodOrFieldDecl()
  {
    try_type();
    consumeT(9);                    // Identifier
    lookahead1W(45);                // WS | COMMENT | LINE_COMMENT | '(' | '=' | '['
    try_interfaceMethodOrFieldRest();
  }

  function parse_interfaceMethodOrFieldRest()
  {
    eventHandler.startNonterminal("interfaceMethodOrFieldRest", e0);
    switch (l1)
    {
    case 21:                        // '('
      parse_interfaceMethodDeclaratorRest();
      break;
    default:
      parse_constantDeclaratorsRest();
      consume(37);                  // ';'
    }
    eventHandler.endNonterminal("interfaceMethodOrFieldRest", e0);
  }

  function try_interfaceMethodOrFieldRest()
  {
    switch (l1)
    {
    case 21:                        // '('
      try_interfaceMethodDeclaratorRest();
      break;
    default:
      try_constantDeclaratorsRest();
      consumeT(37);                 // ';'
    }
  }

  function parse_methodDeclaratorRest()
  {
    eventHandler.startNonterminal("methodDeclaratorRest", e0);
    parse_formalParameters();
    for (;;)
    {
      lookahead1W(59);              // WS | COMMENT | LINE_COMMENT | ';' | '[' | 'throws' | '{'
      if (l1 != 52)                 // '['
      {
        break;
      }
      consume(52);                  // '['
      lookahead1W(10);              // WS | COMMENT | LINE_COMMENT | ']'
      consume(53);                  // ']'
    }
    if (l1 == 98)                   // 'throws'
    {
      consume(98);                  // 'throws'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      whitespace();
      parse_qualifiedNameList();
    }
    switch (l1)
    {
    case 105:                       // '{'
      whitespace();
      parse_methodBody();
      break;
    default:
      consume(37);                  // ';'
    }
    eventHandler.endNonterminal("methodDeclaratorRest", e0);
  }

  function try_methodDeclaratorRest()
  {
    try_formalParameters();
    for (;;)
    {
      lookahead1W(59);              // WS | COMMENT | LINE_COMMENT | ';' | '[' | 'throws' | '{'
      if (l1 != 52)                 // '['
      {
        break;
      }
      consumeT(52);                 // '['
      lookahead1W(10);              // WS | COMMENT | LINE_COMMENT | ']'
      consumeT(53);                 // ']'
    }
    if (l1 == 98)                   // 'throws'
    {
      consumeT(98);                 // 'throws'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      try_qualifiedNameList();
    }
    switch (l1)
    {
    case 105:                       // '{'
      try_methodBody();
      break;
    default:
      consumeT(37);                 // ';'
    }
  }

  function parse_voidMethodDeclaratorRest()
  {
    eventHandler.startNonterminal("voidMethodDeclaratorRest", e0);
    parse_formalParameters();
    lookahead1W(50);                // WS | COMMENT | LINE_COMMENT | ';' | 'throws' | '{'
    if (l1 == 98)                   // 'throws'
    {
      consume(98);                  // 'throws'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      whitespace();
      parse_qualifiedNameList();
    }
    switch (l1)
    {
    case 105:                       // '{'
      whitespace();
      parse_methodBody();
      break;
    default:
      consume(37);                  // ';'
    }
    eventHandler.endNonterminal("voidMethodDeclaratorRest", e0);
  }

  function try_voidMethodDeclaratorRest()
  {
    try_formalParameters();
    lookahead1W(50);                // WS | COMMENT | LINE_COMMENT | ';' | 'throws' | '{'
    if (l1 == 98)                   // 'throws'
    {
      consumeT(98);                 // 'throws'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      try_qualifiedNameList();
    }
    switch (l1)
    {
    case 105:                       // '{'
      try_methodBody();
      break;
    default:
      consumeT(37);                 // ';'
    }
  }

  function parse_interfaceMethodDeclaratorRest()
  {
    eventHandler.startNonterminal("interfaceMethodDeclaratorRest", e0);
    parse_formalParameters();
    for (;;)
    {
      lookahead1W(49);              // WS | COMMENT | LINE_COMMENT | ';' | '[' | 'throws'
      if (l1 != 52)                 // '['
      {
        break;
      }
      consume(52);                  // '['
      lookahead1W(10);              // WS | COMMENT | LINE_COMMENT | ']'
      consume(53);                  // ']'
    }
    if (l1 == 98)                   // 'throws'
    {
      consume(98);                  // 'throws'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      whitespace();
      parse_qualifiedNameList();
    }
    consume(37);                    // ';'
    eventHandler.endNonterminal("interfaceMethodDeclaratorRest", e0);
  }

  function try_interfaceMethodDeclaratorRest()
  {
    try_formalParameters();
    for (;;)
    {
      lookahead1W(49);              // WS | COMMENT | LINE_COMMENT | ';' | '[' | 'throws'
      if (l1 != 52)                 // '['
      {
        break;
      }
      consumeT(52);                 // '['
      lookahead1W(10);              // WS | COMMENT | LINE_COMMENT | ']'
      consumeT(53);                 // ']'
    }
    if (l1 == 98)                   // 'throws'
    {
      consumeT(98);                 // 'throws'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      try_qualifiedNameList();
    }
    consumeT(37);                   // ';'
  }

  function parse_interfaceGenericMethodDecl()
  {
    eventHandler.startNonterminal("interfaceGenericMethodDecl", e0);
    parse_typeParameters();
    lookahead1W(73);                // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short' | 'void'
    switch (l1)
    {
    case 102:                       // 'void'
      consume(102);                 // 'void'
      break;
    default:
      whitespace();
      parse_type();
    }
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    consume(9);                     // Identifier
    lookahead1W(1);                 // WS | COMMENT | LINE_COMMENT | '('
    whitespace();
    parse_interfaceMethodDeclaratorRest();
    eventHandler.endNonterminal("interfaceGenericMethodDecl", e0);
  }

  function try_interfaceGenericMethodDecl()
  {
    try_typeParameters();
    lookahead1W(73);                // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short' | 'void'
    switch (l1)
    {
    case 102:                       // 'void'
      consumeT(102);                // 'void'
      break;
    default:
      try_type();
    }
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    consumeT(9);                    // Identifier
    lookahead1W(1);                 // WS | COMMENT | LINE_COMMENT | '('
    try_interfaceMethodDeclaratorRest();
  }

  function parse_voidInterfaceMethodDeclaratorRest()
  {
    eventHandler.startNonterminal("voidInterfaceMethodDeclaratorRest", e0);
    parse_formalParameters();
    lookahead1W(33);                // WS | COMMENT | LINE_COMMENT | ';' | 'throws'
    if (l1 == 98)                   // 'throws'
    {
      consume(98);                  // 'throws'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      whitespace();
      parse_qualifiedNameList();
    }
    consume(37);                    // ';'
    eventHandler.endNonterminal("voidInterfaceMethodDeclaratorRest", e0);
  }

  function try_voidInterfaceMethodDeclaratorRest()
  {
    try_formalParameters();
    lookahead1W(33);                // WS | COMMENT | LINE_COMMENT | ';' | 'throws'
    if (l1 == 98)                   // 'throws'
    {
      consumeT(98);                 // 'throws'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      try_qualifiedNameList();
    }
    consumeT(37);                   // ';'
  }

  function parse_constructorDeclaratorRest()
  {
    eventHandler.startNonterminal("constructorDeclaratorRest", e0);
    parse_formalParameters();
    lookahead1W(42);                // WS | COMMENT | LINE_COMMENT | 'throws' | '{'
    if (l1 == 98)                   // 'throws'
    {
      consume(98);                  // 'throws'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      whitespace();
      parse_qualifiedNameList();
    }
    whitespace();
    parse_constructorBody();
    eventHandler.endNonterminal("constructorDeclaratorRest", e0);
  }

  function try_constructorDeclaratorRest()
  {
    try_formalParameters();
    lookahead1W(42);                // WS | COMMENT | LINE_COMMENT | 'throws' | '{'
    if (l1 == 98)                   // 'throws'
    {
      consumeT(98);                 // 'throws'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      try_qualifiedNameList();
    }
    try_constructorBody();
  }

  function parse_constantDeclarator()
  {
    eventHandler.startNonterminal("constantDeclarator", e0);
    consume(9);                     // Identifier
    lookahead1W(36);                // WS | COMMENT | LINE_COMMENT | '=' | '['
    whitespace();
    parse_constantDeclaratorRest();
    eventHandler.endNonterminal("constantDeclarator", e0);
  }

  function try_constantDeclarator()
  {
    consumeT(9);                    // Identifier
    lookahead1W(36);                // WS | COMMENT | LINE_COMMENT | '=' | '['
    try_constantDeclaratorRest();
  }

  function parse_variableDeclarators()
  {
    eventHandler.startNonterminal("variableDeclarators", e0);
    parse_variableDeclarator();
    for (;;)
    {
      lookahead1W(29);              // WS | COMMENT | LINE_COMMENT | ',' | ';'
      if (l1 != 28)                 // ','
      {
        break;
      }
      consume(28);                  // ','
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      whitespace();
      parse_variableDeclarator();
    }
    eventHandler.endNonterminal("variableDeclarators", e0);
  }

  function try_variableDeclarators()
  {
    try_variableDeclarator();
    for (;;)
    {
      lookahead1W(29);              // WS | COMMENT | LINE_COMMENT | ',' | ';'
      if (l1 != 28)                 // ','
      {
        break;
      }
      consumeT(28);                 // ','
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      try_variableDeclarator();
    }
  }

  function parse_variableDeclarator()
  {
    eventHandler.startNonterminal("variableDeclarator", e0);
    parse_variableDeclaratorId();
    if (l1 == 42)                   // '='
    {
      consume(42);                  // '='
      lookahead1W(94);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '{' | '~'
      whitespace();
      parse_variableInitializer();
    }
    eventHandler.endNonterminal("variableDeclarator", e0);
  }

  function try_variableDeclarator()
  {
    try_variableDeclaratorId();
    if (l1 == 42)                   // '='
    {
      consumeT(42);                 // '='
      lookahead1W(94);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '{' | '~'
      try_variableInitializer();
    }
  }

  function parse_constantDeclaratorsRest()
  {
    eventHandler.startNonterminal("constantDeclaratorsRest", e0);
    parse_constantDeclaratorRest();
    for (;;)
    {
      lookahead1W(29);              // WS | COMMENT | LINE_COMMENT | ',' | ';'
      if (l1 != 28)                 // ','
      {
        break;
      }
      consume(28);                  // ','
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      whitespace();
      parse_constantDeclarator();
    }
    eventHandler.endNonterminal("constantDeclaratorsRest", e0);
  }

  function try_constantDeclaratorsRest()
  {
    try_constantDeclaratorRest();
    for (;;)
    {
      lookahead1W(29);              // WS | COMMENT | LINE_COMMENT | ',' | ';'
      if (l1 != 28)                 // ','
      {
        break;
      }
      consumeT(28);                 // ','
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      try_constantDeclarator();
    }
  }

  function parse_constantDeclaratorRest()
  {
    eventHandler.startNonterminal("constantDeclaratorRest", e0);
    for (;;)
    {
      lookahead1W(36);              // WS | COMMENT | LINE_COMMENT | '=' | '['
      if (l1 != 52)                 // '['
      {
        break;
      }
      consume(52);                  // '['
      lookahead1W(10);              // WS | COMMENT | LINE_COMMENT | ']'
      consume(53);                  // ']'
    }
    consume(42);                    // '='
    lookahead1W(94);                // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '{' | '~'
    whitespace();
    parse_variableInitializer();
    eventHandler.endNonterminal("constantDeclaratorRest", e0);
  }

  function try_constantDeclaratorRest()
  {
    for (;;)
    {
      lookahead1W(36);              // WS | COMMENT | LINE_COMMENT | '=' | '['
      if (l1 != 52)                 // '['
      {
        break;
      }
      consumeT(52);                 // '['
      lookahead1W(10);              // WS | COMMENT | LINE_COMMENT | ']'
      consumeT(53);                 // ']'
    }
    consumeT(42);                   // '='
    lookahead1W(94);                // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '{' | '~'
    try_variableInitializer();
  }

  function parse_variableDeclaratorId()
  {
    eventHandler.startNonterminal("variableDeclaratorId", e0);
    consume(9);                     // Identifier
    for (;;)
    {
      lookahead1W(65);              // WS | COMMENT | LINE_COMMENT | ')' | ',' | ';' | '=' | '['
      if (l1 != 52)                 // '['
      {
        break;
      }
      consume(52);                  // '['
      lookahead1W(10);              // WS | COMMENT | LINE_COMMENT | ']'
      consume(53);                  // ']'
    }
    eventHandler.endNonterminal("variableDeclaratorId", e0);
  }

  function try_variableDeclaratorId()
  {
    consumeT(9);                    // Identifier
    for (;;)
    {
      lookahead1W(65);              // WS | COMMENT | LINE_COMMENT | ')' | ',' | ';' | '=' | '['
      if (l1 != 52)                 // '['
      {
        break;
      }
      consumeT(52);                 // '['
      lookahead1W(10);              // WS | COMMENT | LINE_COMMENT | ']'
      consumeT(53);                 // ']'
    }
  }

  function parse_variableInitializer()
  {
    eventHandler.startNonterminal("variableInitializer", e0);
    switch (l1)
    {
    case 105:                       // '{'
      parse_arrayInitializer();
      break;
    default:
      parse_expression();
    }
    eventHandler.endNonterminal("variableInitializer", e0);
  }

  function try_variableInitializer()
  {
    switch (l1)
    {
    case 105:                       // '{'
      try_arrayInitializer();
      break;
    default:
      try_expression();
    }
  }

  function parse_arrayInitializer()
  {
    eventHandler.startNonterminal("arrayInitializer", e0);
    consume(105);                   // '{'
    lookahead1W(96);                // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '{' | '}' | '~'
    if (l1 != 109)                  // '}'
    {
      whitespace();
      parse_variableInitializer();
      for (;;)
      {
        lookahead1W(30);            // WS | COMMENT | LINE_COMMENT | ',' | '}'
        switch (l1)
        {
        case 28:                    // ','
          lookahead2W(96);          // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '{' | '}' | '~'
          break;
        default:
          lk = l1;
        }
        if (lk == 109               // '}'
         || lk == 13980)            // ',' '}'
        {
          break;
        }
        consume(28);                // ','
        lookahead1W(94);            // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '{' | '~'
        whitespace();
        parse_variableInitializer();
      }
      if (l1 == 28)                 // ','
      {
        consume(28);                // ','
      }
    }
    lookahead1W(18);                // WS | COMMENT | LINE_COMMENT | '}'
    consume(109);                   // '}'
    eventHandler.endNonterminal("arrayInitializer", e0);
  }

  function try_arrayInitializer()
  {
    consumeT(105);                  // '{'
    lookahead1W(96);                // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '{' | '}' | '~'
    if (l1 != 109)                  // '}'
    {
      try_variableInitializer();
      for (;;)
      {
        lookahead1W(30);            // WS | COMMENT | LINE_COMMENT | ',' | '}'
        switch (l1)
        {
        case 28:                    // ','
          lookahead2W(96);          // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '{' | '}' | '~'
          break;
        default:
          lk = l1;
        }
        if (lk == 109               // '}'
         || lk == 13980)            // ',' '}'
        {
          break;
        }
        consumeT(28);               // ','
        lookahead1W(94);            // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '{' | '~'
        try_variableInitializer();
      }
      if (l1 == 28)                 // ','
      {
        consumeT(28);               // ','
      }
    }
    lookahead1W(18);                // WS | COMMENT | LINE_COMMENT | '}'
    consumeT(109);                  // '}'
  }

  function parse_modifier()
  {
    eventHandler.startNonterminal("modifier", e0);
    switch (l1)
    {
    case 51:                        // '@'
      parse_annotation();
      break;
    case 88:                        // 'public'
      consume(88);                  // 'public'
      break;
    case 87:                        // 'protected'
      consume(87);                  // 'protected'
      break;
    case 86:                        // 'private'
      consume(86);                  // 'private'
      break;
    case 91:                        // 'static'
      consume(91);                  // 'static'
      break;
    case 56:                        // 'abstract'
      consume(56);                  // 'abstract'
      break;
    case 71:                        // 'final'
      consume(71);                  // 'final'
      break;
    case 82:                        // 'native'
      consume(82);                  // 'native'
      break;
    case 95:                        // 'synchronized'
      consume(95);                  // 'synchronized'
      break;
    case 99:                        // 'transient'
      consume(99);                  // 'transient'
      break;
    case 103:                       // 'volatile'
      consume(103);                 // 'volatile'
      break;
    default:
      consume(92);                  // 'strictfp'
    }
    eventHandler.endNonterminal("modifier", e0);
  }

  function try_modifier()
  {
    switch (l1)
    {
    case 51:                        // '@'
      try_annotation();
      break;
    case 88:                        // 'public'
      consumeT(88);                 // 'public'
      break;
    case 87:                        // 'protected'
      consumeT(87);                 // 'protected'
      break;
    case 86:                        // 'private'
      consumeT(86);                 // 'private'
      break;
    case 91:                        // 'static'
      consumeT(91);                 // 'static'
      break;
    case 56:                        // 'abstract'
      consumeT(56);                 // 'abstract'
      break;
    case 71:                        // 'final'
      consumeT(71);                 // 'final'
      break;
    case 82:                        // 'native'
      consumeT(82);                 // 'native'
      break;
    case 95:                        // 'synchronized'
      consumeT(95);                 // 'synchronized'
      break;
    case 99:                        // 'transient'
      consumeT(99);                 // 'transient'
      break;
    case 103:                       // 'volatile'
      consumeT(103);                // 'volatile'
      break;
    default:
      consumeT(92);                 // 'strictfp'
    }
  }

  function parse_enumConstantName()
  {
    eventHandler.startNonterminal("enumConstantName", e0);
    consume(9);                     // Identifier
    eventHandler.endNonterminal("enumConstantName", e0);
  }

  function try_enumConstantName()
  {
    consumeT(9);                    // Identifier
  }

  function parse_type()
  {
    eventHandler.startNonterminal("type", e0);
    switch (l1)
    {
    case 9:                         // Identifier
      parse_classOrInterfaceType();
      for (;;)
      {
        lookahead1W(100);           // Identifier | WS | COMMENT | LINE_COMMENT | '!=' | '%=' | '&' | '&&' | '&=' |
                                    // ')' | '*=' | '+=' | ',' | '-=' | '...' | '/=' | ':' | ';' | '<<=' | '=' | '==' |
                                    // '>' | '>>=' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'implements' | '{' | '|' |
                                    // '|=' | '||' | '}'
        if (l1 != 52)               // '['
        {
          break;
        }
        consume(52);                // '['
        lookahead1W(10);            // WS | COMMENT | LINE_COMMENT | ']'
        consume(53);                // ']'
      }
      break;
    default:
      parse_primitiveType();
      for (;;)
      {
        lookahead1W(100);           // Identifier | WS | COMMENT | LINE_COMMENT | '!=' | '%=' | '&' | '&&' | '&=' |
                                    // ')' | '*=' | '+=' | ',' | '-=' | '...' | '/=' | ':' | ';' | '<<=' | '=' | '==' |
                                    // '>' | '>>=' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'implements' | '{' | '|' |
                                    // '|=' | '||' | '}'
        if (l1 != 52)               // '['
        {
          break;
        }
        consume(52);                // '['
        lookahead1W(10);            // WS | COMMENT | LINE_COMMENT | ']'
        consume(53);                // ']'
      }
    }
    eventHandler.endNonterminal("type", e0);
  }

  function try_type()
  {
    switch (l1)
    {
    case 9:                         // Identifier
      try_classOrInterfaceType();
      for (;;)
      {
        lookahead1W(100);           // Identifier | WS | COMMENT | LINE_COMMENT | '!=' | '%=' | '&' | '&&' | '&=' |
                                    // ')' | '*=' | '+=' | ',' | '-=' | '...' | '/=' | ':' | ';' | '<<=' | '=' | '==' |
                                    // '>' | '>>=' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'implements' | '{' | '|' |
                                    // '|=' | '||' | '}'
        if (l1 != 52)               // '['
        {
          break;
        }
        consumeT(52);               // '['
        lookahead1W(10);            // WS | COMMENT | LINE_COMMENT | ']'
        consumeT(53);               // ']'
      }
      break;
    default:
      try_primitiveType();
      for (;;)
      {
        lookahead1W(100);           // Identifier | WS | COMMENT | LINE_COMMENT | '!=' | '%=' | '&' | '&&' | '&=' |
                                    // ')' | '*=' | '+=' | ',' | '-=' | '...' | '/=' | ':' | ';' | '<<=' | '=' | '==' |
                                    // '>' | '>>=' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'implements' | '{' | '|' |
                                    // '|=' | '||' | '}'
        if (l1 != 52)               // '['
        {
          break;
        }
        consumeT(52);               // '['
        lookahead1W(10);            // WS | COMMENT | LINE_COMMENT | ']'
        consumeT(53);               // ']'
      }
    }
  }

  function parse_classOrInterfaceType()
  {
    eventHandler.startNonterminal("classOrInterfaceType", e0);
    consume(9);                     // Identifier
    lookahead1W(104);               // Identifier | WS | COMMENT | LINE_COMMENT | '!=' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*=' | '+=' | ',' | '-=' | '.' | '...' | '/=' | ':' | ';' | '<' |
                                    // '<<=' | '=' | '==' | '>' | '>>=' | '>>>=' | '?' | '[' | ']' | '^' | '^=' |
                                    // 'implements' | '{' | '|' | '|=' | '||' | '}'
    if (l1 == 38)                   // '<'
    {
      whitespace();
      parse_typeArguments();
    }
    for (;;)
    {
      lookahead1W(103);             // Identifier | WS | COMMENT | LINE_COMMENT | '!=' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*=' | '+=' | ',' | '-=' | '.' | '...' | '/=' | ':' | ';' | '<<=' |
                                    // '=' | '==' | '>' | '>>=' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'implements' |
                                    // '{' | '|' | '|=' | '||' | '}'
      if (l1 != 32)                 // '.'
      {
        break;
      }
      consume(32);                  // '.'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      consume(9);                   // Identifier
      lookahead1W(104);             // Identifier | WS | COMMENT | LINE_COMMENT | '!=' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*=' | '+=' | ',' | '-=' | '.' | '...' | '/=' | ':' | ';' | '<' |
                                    // '<<=' | '=' | '==' | '>' | '>>=' | '>>>=' | '?' | '[' | ']' | '^' | '^=' |
                                    // 'implements' | '{' | '|' | '|=' | '||' | '}'
      if (l1 == 38)                 // '<'
      {
        whitespace();
        parse_typeArguments();
      }
    }
    eventHandler.endNonterminal("classOrInterfaceType", e0);
  }

  function try_classOrInterfaceType()
  {
    consumeT(9);                    // Identifier
    lookahead1W(104);               // Identifier | WS | COMMENT | LINE_COMMENT | '!=' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*=' | '+=' | ',' | '-=' | '.' | '...' | '/=' | ':' | ';' | '<' |
                                    // '<<=' | '=' | '==' | '>' | '>>=' | '>>>=' | '?' | '[' | ']' | '^' | '^=' |
                                    // 'implements' | '{' | '|' | '|=' | '||' | '}'
    if (l1 == 38)                   // '<'
    {
      try_typeArguments();
    }
    for (;;)
    {
      lookahead1W(103);             // Identifier | WS | COMMENT | LINE_COMMENT | '!=' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*=' | '+=' | ',' | '-=' | '.' | '...' | '/=' | ':' | ';' | '<<=' |
                                    // '=' | '==' | '>' | '>>=' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'implements' |
                                    // '{' | '|' | '|=' | '||' | '}'
      if (l1 != 32)                 // '.'
      {
        break;
      }
      consumeT(32);                 // '.'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      consumeT(9);                  // Identifier
      lookahead1W(104);             // Identifier | WS | COMMENT | LINE_COMMENT | '!=' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*=' | '+=' | ',' | '-=' | '.' | '...' | '/=' | ':' | ';' | '<' |
                                    // '<<=' | '=' | '==' | '>' | '>>=' | '>>>=' | '?' | '[' | ']' | '^' | '^=' |
                                    // 'implements' | '{' | '|' | '|=' | '||' | '}'
      if (l1 == 38)                 // '<'
      {
        try_typeArguments();
      }
    }
  }

  function parse_primitiveType()
  {
    eventHandler.startNonterminal("primitiveType", e0);
    switch (l1)
    {
    case 57:                        // 'boolean'
      consume(57);                  // 'boolean'
      break;
    case 62:                        // 'char'
      consume(62);                  // 'char'
      break;
    case 59:                        // 'byte'
      consume(59);                  // 'byte'
      break;
    case 90:                        // 'short'
      consume(90);                  // 'short'
      break;
    case 79:                        // 'int'
      consume(79);                  // 'int'
      break;
    case 81:                        // 'long'
      consume(81);                  // 'long'
      break;
    case 73:                        // 'float'
      consume(73);                  // 'float'
      break;
    default:
      consume(67);                  // 'double'
    }
    eventHandler.endNonterminal("primitiveType", e0);
  }

  function try_primitiveType()
  {
    switch (l1)
    {
    case 57:                        // 'boolean'
      consumeT(57);                 // 'boolean'
      break;
    case 62:                        // 'char'
      consumeT(62);                 // 'char'
      break;
    case 59:                        // 'byte'
      consumeT(59);                 // 'byte'
      break;
    case 90:                        // 'short'
      consumeT(90);                 // 'short'
      break;
    case 79:                        // 'int'
      consumeT(79);                 // 'int'
      break;
    case 81:                        // 'long'
      consumeT(81);                 // 'long'
      break;
    case 73:                        // 'float'
      consumeT(73);                 // 'float'
      break;
    default:
      consumeT(67);                 // 'double'
    }
  }

  function parse_variableModifier()
  {
    eventHandler.startNonterminal("variableModifier", e0);
    switch (l1)
    {
    case 71:                        // 'final'
      consume(71);                  // 'final'
      break;
    default:
      parse_annotation();
    }
    eventHandler.endNonterminal("variableModifier", e0);
  }

  function try_variableModifier()
  {
    switch (l1)
    {
    case 71:                        // 'final'
      consumeT(71);                 // 'final'
      break;
    default:
      try_annotation();
    }
  }

  function parse_typeArguments()
  {
    eventHandler.startNonterminal("typeArguments", e0);
    consume(38);                    // '<'
    lookahead1W(72);                // Identifier | WS | COMMENT | LINE_COMMENT | '?' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
    whitespace();
    parse_typeArgument();
    for (;;)
    {
      if (l1 != 28)                 // ','
      {
        break;
      }
      consume(28);                  // ','
      lookahead1W(72);              // Identifier | WS | COMMENT | LINE_COMMENT | '?' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      whitespace();
      parse_typeArgument();
    }
    consume(44);                    // '>'
    eventHandler.endNonterminal("typeArguments", e0);
  }

  function try_typeArguments()
  {
    consumeT(38);                   // '<'
    lookahead1W(72);                // Identifier | WS | COMMENT | LINE_COMMENT | '?' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
    try_typeArgument();
    for (;;)
    {
      if (l1 != 28)                 // ','
      {
        break;
      }
      consumeT(28);                 // ','
      lookahead1W(72);              // Identifier | WS | COMMENT | LINE_COMMENT | '?' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      try_typeArgument();
    }
    consumeT(44);                   // '>'
  }

  function parse_typeArgument()
  {
    eventHandler.startNonterminal("typeArgument", e0);
    switch (l1)
    {
    case 50:                        // '?'
      consume(50);                  // '?'
      lookahead1W(58);              // WS | COMMENT | LINE_COMMENT | ',' | '>' | 'extends' | 'super'
      if (l1 == 69                  // 'extends'
       || l1 == 93)                 // 'super'
      {
        switch (l1)
        {
        case 69:                    // 'extends'
          consume(69);              // 'extends'
          break;
        default:
          consume(93);              // 'super'
        }
        lookahead1W(69);            // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
        whitespace();
        parse_type();
      }
      break;
    default:
      parse_type();
    }
    eventHandler.endNonterminal("typeArgument", e0);
  }

  function try_typeArgument()
  {
    switch (l1)
    {
    case 50:                        // '?'
      consumeT(50);                 // '?'
      lookahead1W(58);              // WS | COMMENT | LINE_COMMENT | ',' | '>' | 'extends' | 'super'
      if (l1 == 69                  // 'extends'
       || l1 == 93)                 // 'super'
      {
        switch (l1)
        {
        case 69:                    // 'extends'
          consumeT(69);             // 'extends'
          break;
        default:
          consumeT(93);             // 'super'
        }
        lookahead1W(69);            // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
        try_type();
      }
      break;
    default:
      try_type();
    }
  }

  function parse_qualifiedNameList()
  {
    eventHandler.startNonterminal("qualifiedNameList", e0);
    parse_qualifiedName();
    for (;;)
    {
      if (l1 != 28)                 // ','
      {
        break;
      }
      consume(28);                  // ','
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      whitespace();
      parse_qualifiedName();
    }
    eventHandler.endNonterminal("qualifiedNameList", e0);
  }

  function try_qualifiedNameList()
  {
    try_qualifiedName();
    for (;;)
    {
      if (l1 != 28)                 // ','
      {
        break;
      }
      consumeT(28);                 // ','
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      try_qualifiedName();
    }
  }

  function parse_formalParameters()
  {
    eventHandler.startNonterminal("formalParameters", e0);
    consume(21);                    // '('
    lookahead1W(76);                // Identifier | WS | COMMENT | LINE_COMMENT | ')' | '@' | 'boolean' | 'byte' |
                                    // 'char' | 'double' | 'final' | 'float' | 'int' | 'long' | 'short'
    if (l1 != 22)                   // ')'
    {
      whitespace();
      parse_formalParameterDecls();
    }
    consume(22);                    // ')'
    eventHandler.endNonterminal("formalParameters", e0);
  }

  function try_formalParameters()
  {
    consumeT(21);                   // '('
    lookahead1W(76);                // Identifier | WS | COMMENT | LINE_COMMENT | ')' | '@' | 'boolean' | 'byte' |
                                    // 'char' | 'double' | 'final' | 'float' | 'int' | 'long' | 'short'
    if (l1 != 22)                   // ')'
    {
      try_formalParameterDecls();
    }
    consumeT(22);                   // ')'
  }

  function parse_formalParameterDecls()
  {
    eventHandler.startNonterminal("formalParameterDecls", e0);
    parse_variableModifiers();
    whitespace();
    parse_type();
    whitespace();
    parse_formalParameterDeclsRest();
    eventHandler.endNonterminal("formalParameterDecls", e0);
  }

  function try_formalParameterDecls()
  {
    try_variableModifiers();
    try_type();
    try_formalParameterDeclsRest();
  }

  function parse_formalParameterDeclsRest()
  {
    eventHandler.startNonterminal("formalParameterDeclsRest", e0);
    switch (l1)
    {
    case 9:                         // Identifier
      parse_variableDeclaratorId();
      if (l1 == 28)                 // ','
      {
        consume(28);                // ','
        lookahead1W(75);            // Identifier | WS | COMMENT | LINE_COMMENT | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'final' | 'float' | 'int' | 'long' | 'short'
        whitespace();
        parse_formalParameterDecls();
      }
      break;
    default:
      consume(33);                  // '...'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      whitespace();
      parse_variableDeclaratorId();
    }
    eventHandler.endNonterminal("formalParameterDeclsRest", e0);
  }

  function try_formalParameterDeclsRest()
  {
    switch (l1)
    {
    case 9:                         // Identifier
      try_variableDeclaratorId();
      if (l1 == 28)                 // ','
      {
        consumeT(28);               // ','
        lookahead1W(75);            // Identifier | WS | COMMENT | LINE_COMMENT | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'final' | 'float' | 'int' | 'long' | 'short'
        try_formalParameterDecls();
      }
      break;
    default:
      consumeT(33);                 // '...'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      try_variableDeclaratorId();
    }
  }

  function parse_methodBody()
  {
    eventHandler.startNonterminal("methodBody", e0);
    parse_block();
    eventHandler.endNonterminal("methodBody", e0);
  }

  function try_methodBody()
  {
    try_block();
  }

  function parse_constructorBody()
  {
    eventHandler.startNonterminal("constructorBody", e0);
    consume(105);                   // '{'
    lookahead1W(117);               // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ENUM | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '<' | '@' |
                                    // 'abstract' | 'boolean' | 'break' | 'byte' | 'char' | 'class' | 'continue' |
                                    // 'do' | 'double' | 'false' | 'final' | 'float' | 'for' | 'if' | 'int' |
                                    // 'interface' | 'long' | 'new' | 'null' | 'private' | 'protected' | 'public' |
                                    // 'return' | 'short' | 'static' | 'strictfp' | 'super' | 'switch' |
                                    // 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' | 'while' | '{' |
                                    // '}' | '~'
    switch (l1)
    {
    case 9:                         // Identifier
      lookahead2W(111);             // Identifier | WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' |
                                    // '&=' | '(' | '*' | '*=' | '+' | '++' | '+=' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '>>>' | '>>>=' | '?' | '[' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||'
      break;
    case 21:                        // '('
      lookahead2W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      break;
    case 83:                        // 'new'
      lookahead2W(70);              // Identifier | WS | COMMENT | LINE_COMMENT | '<' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      break;
    case 93:                        // 'super'
      lookahead2W(25);              // WS | COMMENT | LINE_COMMENT | '(' | '.'
      break;
    case 96:                        // 'this'
      lookahead2W(107);             // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' |
                                    // '*=' | '+' | '++' | '+=' | '-' | '--' | '-=' | '.' | '/' | '/=' | ';' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '>>>' | '>>>=' |
                                    // '?' | '[' | '^' | '^=' | 'instanceof' | '|' | '|=' | '||'
      break;
    case 102:                       // 'void'
      lookahead2W(4);               // WS | COMMENT | LINE_COMMENT | '.'
      break;
    case 57:                        // 'boolean'
    case 59:                        // 'byte'
    case 62:                        // 'char'
    case 67:                        // 'double'
    case 73:                        // 'float'
    case 79:                        // 'int'
    case 81:                        // 'long'
    case 90:                        // 'short'
      lookahead2W(43);              // Identifier | WS | COMMENT | LINE_COMMENT | '.' | '['
      break;
    case 1:                         // HexLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // OctalLiteral
    case 4:                         // FloatingPointLiteral
    case 5:                         // CharacterLiteral
    case 6:                         // StringLiteral
    case 70:                        // 'false'
    case 84:                        // 'null'
    case 100:                       // 'true'
      lookahead2W(105);             // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' |
                                    // '*=' | '+' | '++' | '+=' | '-' | '--' | '-=' | '.' | '/' | '/=' | ';' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '>>>' | '>>>=' |
                                    // '?' | '[' | '^' | '^=' | 'instanceof' | '|' | '|=' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 149                   // '(' HexLiteral
     || lk == 277                   // '(' DecimalLiteral
     || lk == 405                   // '(' OctalLiteral
     || lk == 533                   // '(' FloatingPointLiteral
     || lk == 661                   // '(' CharacterLiteral
     || lk == 789                   // '(' StringLiteral
     || lk == 1173                  // '(' Identifier
     || lk == 1235                  // 'new' Identifier
     || lk == 1813                  // '(' '!'
     || lk == 2697                  // Identifier '('
     || lk == 2709                  // '(' '('
     || lk == 2781                  // 'super' '('
     || lk == 2784                  // 'this' '('
     || lk == 3221                  // '(' '+'
     || lk == 3349                  // '(' '++'
     || lk == 3733                  // '(' '-'
     || lk == 3861                  // '(' '--'
     || lk == 4097                  // HexLiteral '.'
     || lk == 4098                  // DecimalLiteral '.'
     || lk == 4099                  // OctalLiteral '.'
     || lk == 4100                  // FloatingPointLiteral '.'
     || lk == 4101                  // CharacterLiteral '.'
     || lk == 4102                  // StringLiteral '.'
     || lk == 4105                  // Identifier '.'
     || lk == 4153                  // 'boolean' '.'
     || lk == 4155                  // 'byte' '.'
     || lk == 4158                  // 'char' '.'
     || lk == 4163                  // 'double' '.'
     || lk == 4166                  // 'false' '.'
     || lk == 4169                  // 'float' '.'
     || lk == 4175                  // 'int' '.'
     || lk == 4177                  // 'long' '.'
     || lk == 4180                  // 'null' '.'
     || lk == 4186                  // 'short' '.'
     || lk == 4189                  // 'super' '.'
     || lk == 4192                  // 'this' '.'
     || lk == 4196                  // 'true' '.'
     || lk == 4198                  // 'void' '.'
     || lk == 4947                  // 'new' '<'
     || lk == 6665                  // Identifier '['
     || lk == 6713                  // 'boolean' '['
     || lk == 6715                  // 'byte' '['
     || lk == 6718                  // 'char' '['
     || lk == 6723                  // 'double' '['
     || lk == 6729                  // 'float' '['
     || lk == 6735                  // 'int' '['
     || lk == 6737                  // 'long' '['
     || lk == 6746                  // 'short' '['
     || lk == 6752                  // 'this' '['
     || lk == 7317                  // '(' 'boolean'
     || lk == 7379                  // 'new' 'boolean'
     || lk == 7573                  // '(' 'byte'
     || lk == 7635                  // 'new' 'byte'
     || lk == 7957                  // '(' 'char'
     || lk == 8019                  // 'new' 'char'
     || lk == 8597                  // '(' 'double'
     || lk == 8659                  // 'new' 'double'
     || lk == 8981                  // '(' 'false'
     || lk == 9365                  // '(' 'float'
     || lk == 9427                  // 'new' 'float'
     || lk == 10133                 // '(' 'int'
     || lk == 10195                 // 'new' 'int'
     || lk == 10389                 // '(' 'long'
     || lk == 10451                 // 'new' 'long'
     || lk == 10645                 // '(' 'new'
     || lk == 10773                 // '(' 'null'
     || lk == 11541                 // '(' 'short'
     || lk == 11603                 // 'new' 'short'
     || lk == 11925                 // '(' 'super'
     || lk == 12309                 // '(' 'this'
     || lk == 12821                 // '(' 'true'
     || lk == 13077                 // '(' 'void'
     || lk == 14101)                // '(' '~'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_explicitConstructorInvocation();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    if (lk == -1
     || lk == 38)                   // '<'
    {
      whitespace();
      parse_explicitConstructorInvocation();
    }
    for (;;)
    {
      lookahead1W(116);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ENUM | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '@' | 'abstract' |
                                    // 'boolean' | 'break' | 'byte' | 'char' | 'class' | 'continue' | 'do' | 'double' |
                                    // 'false' | 'final' | 'float' | 'for' | 'if' | 'int' | 'interface' | 'long' |
                                    // 'new' | 'null' | 'private' | 'protected' | 'public' | 'return' | 'short' |
                                    // 'static' | 'strictfp' | 'super' | 'switch' | 'synchronized' | 'this' | 'throw' |
                                    // 'true' | 'try' | 'void' | 'while' | '{' | '}' | '~'
      if (l1 == 109)                // '}'
      {
        break;
      }
      whitespace();
      parse_blockStatement();
    }
    consume(109);                   // '}'
    eventHandler.endNonterminal("constructorBody", e0);
  }

  function try_constructorBody()
  {
    consumeT(105);                  // '{'
    lookahead1W(117);               // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ENUM | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '<' | '@' |
                                    // 'abstract' | 'boolean' | 'break' | 'byte' | 'char' | 'class' | 'continue' |
                                    // 'do' | 'double' | 'false' | 'final' | 'float' | 'for' | 'if' | 'int' |
                                    // 'interface' | 'long' | 'new' | 'null' | 'private' | 'protected' | 'public' |
                                    // 'return' | 'short' | 'static' | 'strictfp' | 'super' | 'switch' |
                                    // 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' | 'while' | '{' |
                                    // '}' | '~'
    switch (l1)
    {
    case 9:                         // Identifier
      lookahead2W(111);             // Identifier | WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' |
                                    // '&=' | '(' | '*' | '*=' | '+' | '++' | '+=' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '>>>' | '>>>=' | '?' | '[' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||'
      break;
    case 21:                        // '('
      lookahead2W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      break;
    case 83:                        // 'new'
      lookahead2W(70);              // Identifier | WS | COMMENT | LINE_COMMENT | '<' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      break;
    case 93:                        // 'super'
      lookahead2W(25);              // WS | COMMENT | LINE_COMMENT | '(' | '.'
      break;
    case 96:                        // 'this'
      lookahead2W(107);             // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' |
                                    // '*=' | '+' | '++' | '+=' | '-' | '--' | '-=' | '.' | '/' | '/=' | ';' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '>>>' | '>>>=' |
                                    // '?' | '[' | '^' | '^=' | 'instanceof' | '|' | '|=' | '||'
      break;
    case 102:                       // 'void'
      lookahead2W(4);               // WS | COMMENT | LINE_COMMENT | '.'
      break;
    case 57:                        // 'boolean'
    case 59:                        // 'byte'
    case 62:                        // 'char'
    case 67:                        // 'double'
    case 73:                        // 'float'
    case 79:                        // 'int'
    case 81:                        // 'long'
    case 90:                        // 'short'
      lookahead2W(43);              // Identifier | WS | COMMENT | LINE_COMMENT | '.' | '['
      break;
    case 1:                         // HexLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // OctalLiteral
    case 4:                         // FloatingPointLiteral
    case 5:                         // CharacterLiteral
    case 6:                         // StringLiteral
    case 70:                        // 'false'
    case 84:                        // 'null'
    case 100:                       // 'true'
      lookahead2W(105);             // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' |
                                    // '*=' | '+' | '++' | '+=' | '-' | '--' | '-=' | '.' | '/' | '/=' | ';' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '>>>' | '>>>=' |
                                    // '?' | '[' | '^' | '^=' | 'instanceof' | '|' | '|=' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 149                   // '(' HexLiteral
     || lk == 277                   // '(' DecimalLiteral
     || lk == 405                   // '(' OctalLiteral
     || lk == 533                   // '(' FloatingPointLiteral
     || lk == 661                   // '(' CharacterLiteral
     || lk == 789                   // '(' StringLiteral
     || lk == 1173                  // '(' Identifier
     || lk == 1235                  // 'new' Identifier
     || lk == 1813                  // '(' '!'
     || lk == 2697                  // Identifier '('
     || lk == 2709                  // '(' '('
     || lk == 2781                  // 'super' '('
     || lk == 2784                  // 'this' '('
     || lk == 3221                  // '(' '+'
     || lk == 3349                  // '(' '++'
     || lk == 3733                  // '(' '-'
     || lk == 3861                  // '(' '--'
     || lk == 4097                  // HexLiteral '.'
     || lk == 4098                  // DecimalLiteral '.'
     || lk == 4099                  // OctalLiteral '.'
     || lk == 4100                  // FloatingPointLiteral '.'
     || lk == 4101                  // CharacterLiteral '.'
     || lk == 4102                  // StringLiteral '.'
     || lk == 4105                  // Identifier '.'
     || lk == 4153                  // 'boolean' '.'
     || lk == 4155                  // 'byte' '.'
     || lk == 4158                  // 'char' '.'
     || lk == 4163                  // 'double' '.'
     || lk == 4166                  // 'false' '.'
     || lk == 4169                  // 'float' '.'
     || lk == 4175                  // 'int' '.'
     || lk == 4177                  // 'long' '.'
     || lk == 4180                  // 'null' '.'
     || lk == 4186                  // 'short' '.'
     || lk == 4189                  // 'super' '.'
     || lk == 4192                  // 'this' '.'
     || lk == 4196                  // 'true' '.'
     || lk == 4198                  // 'void' '.'
     || lk == 4947                  // 'new' '<'
     || lk == 6665                  // Identifier '['
     || lk == 6713                  // 'boolean' '['
     || lk == 6715                  // 'byte' '['
     || lk == 6718                  // 'char' '['
     || lk == 6723                  // 'double' '['
     || lk == 6729                  // 'float' '['
     || lk == 6735                  // 'int' '['
     || lk == 6737                  // 'long' '['
     || lk == 6746                  // 'short' '['
     || lk == 6752                  // 'this' '['
     || lk == 7317                  // '(' 'boolean'
     || lk == 7379                  // 'new' 'boolean'
     || lk == 7573                  // '(' 'byte'
     || lk == 7635                  // 'new' 'byte'
     || lk == 7957                  // '(' 'char'
     || lk == 8019                  // 'new' 'char'
     || lk == 8597                  // '(' 'double'
     || lk == 8659                  // 'new' 'double'
     || lk == 8981                  // '(' 'false'
     || lk == 9365                  // '(' 'float'
     || lk == 9427                  // 'new' 'float'
     || lk == 10133                 // '(' 'int'
     || lk == 10195                 // 'new' 'int'
     || lk == 10389                 // '(' 'long'
     || lk == 10451                 // 'new' 'long'
     || lk == 10645                 // '(' 'new'
     || lk == 10773                 // '(' 'null'
     || lk == 11541                 // '(' 'short'
     || lk == 11603                 // 'new' 'short'
     || lk == 11925                 // '(' 'super'
     || lk == 12309                 // '(' 'this'
     || lk == 12821                 // '(' 'true'
     || lk == 13077                 // '(' 'void'
     || lk == 14101)                // '(' '~'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_explicitConstructorInvocation();
          memoize(1, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(1, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1
     || lk == 38)                   // '<'
    {
      try_explicitConstructorInvocation();
    }
    for (;;)
    {
      lookahead1W(116);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ENUM | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '@' | 'abstract' |
                                    // 'boolean' | 'break' | 'byte' | 'char' | 'class' | 'continue' | 'do' | 'double' |
                                    // 'false' | 'final' | 'float' | 'for' | 'if' | 'int' | 'interface' | 'long' |
                                    // 'new' | 'null' | 'private' | 'protected' | 'public' | 'return' | 'short' |
                                    // 'static' | 'strictfp' | 'super' | 'switch' | 'synchronized' | 'this' | 'throw' |
                                    // 'true' | 'try' | 'void' | 'while' | '{' | '}' | '~'
      if (l1 == 109)                // '}'
      {
        break;
      }
      try_blockStatement();
    }
    consumeT(109);                  // '}'
  }

  function parse_explicitConstructorInvocation()
  {
    eventHandler.startNonterminal("explicitConstructorInvocation", e0);
    switch (l1)
    {
    case 93:                        // 'super'
      lookahead2W(25);              // WS | COMMENT | LINE_COMMENT | '(' | '.'
      break;
    case 96:                        // 'this'
      lookahead2W(44);              // WS | COMMENT | LINE_COMMENT | '(' | '.' | '['
      break;
    default:
      lk = l1;
    }
    if (lk == 2781                  // 'super' '('
     || lk == 2784)                 // 'this' '('
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          if (l1 == 38)             // '<'
          {
            try_nonWildcardTypeArguments();
          }
          lookahead1W(41);          // WS | COMMENT | LINE_COMMENT | 'super' | 'this'
          switch (l1)
          {
          case 96:                  // 'this'
            consumeT(96);           // 'this'
            break;
          default:
            consumeT(93);           // 'super'
          }
          lookahead1W(1);           // WS | COMMENT | LINE_COMMENT | '('
          try_arguments();
          lookahead1W(6);           // WS | COMMENT | LINE_COMMENT | ';'
          consumeT(37);             // ';'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(2, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 38:                        // '<'
      if (l1 == 38)                 // '<'
      {
        whitespace();
        parse_nonWildcardTypeArguments();
      }
      lookahead1W(41);              // WS | COMMENT | LINE_COMMENT | 'super' | 'this'
      switch (l1)
      {
      case 96:                      // 'this'
        consume(96);                // 'this'
        break;
      default:
        consume(93);                // 'super'
      }
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      whitespace();
      parse_arguments();
      lookahead1W(6);               // WS | COMMENT | LINE_COMMENT | ';'
      consume(37);                  // ';'
      break;
    default:
      parse_primary();
      lookahead1W(4);               // WS | COMMENT | LINE_COMMENT | '.'
      consume(32);                  // '.'
      lookahead1W(35);              // WS | COMMENT | LINE_COMMENT | '<' | 'super'
      if (l1 == 38)                 // '<'
      {
        whitespace();
        parse_nonWildcardTypeArguments();
      }
      lookahead1W(14);              // WS | COMMENT | LINE_COMMENT | 'super'
      consume(93);                  // 'super'
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      whitespace();
      parse_arguments();
      lookahead1W(6);               // WS | COMMENT | LINE_COMMENT | ';'
      consume(37);                  // ';'
    }
    eventHandler.endNonterminal("explicitConstructorInvocation", e0);
  }

  function try_explicitConstructorInvocation()
  {
    switch (l1)
    {
    case 93:                        // 'super'
      lookahead2W(25);              // WS | COMMENT | LINE_COMMENT | '(' | '.'
      break;
    case 96:                        // 'this'
      lookahead2W(44);              // WS | COMMENT | LINE_COMMENT | '(' | '.' | '['
      break;
    default:
      lk = l1;
    }
    if (lk == 2781                  // 'super' '('
     || lk == 2784)                 // 'this' '('
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          if (l1 == 38)             // '<'
          {
            try_nonWildcardTypeArguments();
          }
          lookahead1W(41);          // WS | COMMENT | LINE_COMMENT | 'super' | 'this'
          switch (l1)
          {
          case 96:                  // 'this'
            consumeT(96);           // 'this'
            break;
          default:
            consumeT(93);           // 'super'
          }
          lookahead1W(1);           // WS | COMMENT | LINE_COMMENT | '('
          try_arguments();
          lookahead1W(6);           // WS | COMMENT | LINE_COMMENT | ';'
          consumeT(37);             // ';'
          memoize(2, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 38:                        // '<'
      if (l1 == 38)                 // '<'
      {
        try_nonWildcardTypeArguments();
      }
      lookahead1W(41);              // WS | COMMENT | LINE_COMMENT | 'super' | 'this'
      switch (l1)
      {
      case 96:                      // 'this'
        consumeT(96);               // 'this'
        break;
      default:
        consumeT(93);               // 'super'
      }
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      try_arguments();
      lookahead1W(6);               // WS | COMMENT | LINE_COMMENT | ';'
      consumeT(37);                 // ';'
      break;
    case -3:
      break;
    default:
      try_primary();
      lookahead1W(4);               // WS | COMMENT | LINE_COMMENT | '.'
      consumeT(32);                 // '.'
      lookahead1W(35);              // WS | COMMENT | LINE_COMMENT | '<' | 'super'
      if (l1 == 38)                 // '<'
      {
        try_nonWildcardTypeArguments();
      }
      lookahead1W(14);              // WS | COMMENT | LINE_COMMENT | 'super'
      consumeT(93);                 // 'super'
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      try_arguments();
      lookahead1W(6);               // WS | COMMENT | LINE_COMMENT | ';'
      consumeT(37);                 // ';'
    }
  }

  function parse_qualifiedName()
  {
    eventHandler.startNonterminal("qualifiedName", e0);
    consume(9);                     // Identifier
    for (;;)
    {
      lookahead1W(56);              // WS | COMMENT | LINE_COMMENT | ',' | '.' | ';' | '{'
      switch (l1)
      {
      case 32:                      // '.'
        lookahead2W(19);            // Identifier | WS | COMMENT | LINE_COMMENT | '*'
        break;
      default:
        lk = l1;
      }
      if (lk != 1184)               // '.' Identifier
      {
        break;
      }
      consume(32);                  // '.'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      consume(9);                   // Identifier
    }
    eventHandler.endNonterminal("qualifiedName", e0);
  }

  function try_qualifiedName()
  {
    consumeT(9);                    // Identifier
    for (;;)
    {
      lookahead1W(56);              // WS | COMMENT | LINE_COMMENT | ',' | '.' | ';' | '{'
      switch (l1)
      {
      case 32:                      // '.'
        lookahead2W(19);            // Identifier | WS | COMMENT | LINE_COMMENT | '*'
        break;
      default:
        lk = l1;
      }
      if (lk != 1184)               // '.' Identifier
      {
        break;
      }
      consumeT(32);                 // '.'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      consumeT(9);                  // Identifier
    }
  }

  function parse_literal()
  {
    eventHandler.startNonterminal("literal", e0);
    switch (l1)
    {
    case 4:                         // FloatingPointLiteral
      consume(4);                   // FloatingPointLiteral
      break;
    case 5:                         // CharacterLiteral
      consume(5);                   // CharacterLiteral
      break;
    case 6:                         // StringLiteral
      consume(6);                   // StringLiteral
      break;
    case 70:                        // 'false'
    case 100:                       // 'true'
      parse_booleanLiteral();
      break;
    case 84:                        // 'null'
      consume(84);                  // 'null'
      break;
    default:
      parse_integerLiteral();
    }
    eventHandler.endNonterminal("literal", e0);
  }

  function try_literal()
  {
    switch (l1)
    {
    case 4:                         // FloatingPointLiteral
      consumeT(4);                  // FloatingPointLiteral
      break;
    case 5:                         // CharacterLiteral
      consumeT(5);                  // CharacterLiteral
      break;
    case 6:                         // StringLiteral
      consumeT(6);                  // StringLiteral
      break;
    case 70:                        // 'false'
    case 100:                       // 'true'
      try_booleanLiteral();
      break;
    case 84:                        // 'null'
      consumeT(84);                 // 'null'
      break;
    default:
      try_integerLiteral();
    }
  }

  function parse_integerLiteral()
  {
    eventHandler.startNonterminal("integerLiteral", e0);
    switch (l1)
    {
    case 1:                         // HexLiteral
      consume(1);                   // HexLiteral
      break;
    case 3:                         // OctalLiteral
      consume(3);                   // OctalLiteral
      break;
    default:
      consume(2);                   // DecimalLiteral
    }
    eventHandler.endNonterminal("integerLiteral", e0);
  }

  function try_integerLiteral()
  {
    switch (l1)
    {
    case 1:                         // HexLiteral
      consumeT(1);                  // HexLiteral
      break;
    case 3:                         // OctalLiteral
      consumeT(3);                  // OctalLiteral
      break;
    default:
      consumeT(2);                  // DecimalLiteral
    }
  }

  function parse_booleanLiteral()
  {
    eventHandler.startNonterminal("booleanLiteral", e0);
    switch (l1)
    {
    case 100:                       // 'true'
      consume(100);                 // 'true'
      break;
    default:
      consume(70);                  // 'false'
    }
    eventHandler.endNonterminal("booleanLiteral", e0);
  }

  function try_booleanLiteral()
  {
    switch (l1)
    {
    case 100:                       // 'true'
      consumeT(100);                // 'true'
      break;
    default:
      consumeT(70);                 // 'false'
    }
  }

  function parse_annotations()
  {
    eventHandler.startNonterminal("annotations", e0);
    for (;;)
    {
      whitespace();
      parse_annotation();
      lookahead1W(77);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | '@' | 'abstract' | 'class' |
                                    // 'final' | 'interface' | 'package' | 'private' | 'protected' | 'public' |
                                    // 'static' | 'strictfp'
      switch (l1)
      {
      case 51:                      // '@'
        lookahead2W(23);            // Identifier | WS | COMMENT | LINE_COMMENT | 'interface'
        break;
      default:
        lk = l1;
      }
      if (lk == 1203)               // '@' Identifier
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_annotation();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
    }
    eventHandler.endNonterminal("annotations", e0);
  }

  function try_annotations()
  {
    try_annotation();
    for (;;)
    {
      lookahead1W(77);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | '@' | 'abstract' | 'class' |
                                    // 'final' | 'interface' | 'package' | 'private' | 'protected' | 'public' |
                                    // 'static' | 'strictfp'
      switch (l1)
      {
      case 51:                      // '@'
        lookahead2W(23);            // Identifier | WS | COMMENT | LINE_COMMENT | 'interface'
        break;
      default:
        lk = l1;
      }
      if (lk == 1203)               // '@' Identifier
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_annotation();
            memoize(3, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(3, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      try_annotation();
    }
  }

  function parse_annotation()
  {
    eventHandler.startNonterminal("annotation", e0);
    consume(51);                    // '@'
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    whitespace();
    parse_annotationName();
    if (l1 == 21)                   // '('
    {
      consume(21);                  // '('
      lookahead1W(97);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | ')' | '+' | '++' | '-' | '--' | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '{' | '~'
      if (l1 != 22)                 // ')'
      {
        switch (l1)
        {
        case 9:                     // Identifier
          lookahead2W(88);          // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '&' | '&&' | '(' | ')' | '*' | '+' |
                                    // '++' | '-' | '--' | '.' | '/' | '<' | '<<' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>>' | '?' | '[' | '^' | 'instanceof' | '|' | '||'
          break;
        default:
          lk = l1;
        }
        switch (lk)
        {
        case 5385:                  // Identifier '='
          whitespace();
          parse_elementValuePairs();
          break;
        default:
          whitespace();
          parse_elementValue();
        }
      }
      lookahead1W(2);               // WS | COMMENT | LINE_COMMENT | ')'
      consume(22);                  // ')'
    }
    eventHandler.endNonterminal("annotation", e0);
  }

  function try_annotation()
  {
    consumeT(51);                   // '@'
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    try_annotationName();
    if (l1 == 21)                   // '('
    {
      consumeT(21);                 // '('
      lookahead1W(97);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | ')' | '+' | '++' | '-' | '--' | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '{' | '~'
      if (l1 != 22)                 // ')'
      {
        switch (l1)
        {
        case 9:                     // Identifier
          lookahead2W(88);          // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '&' | '&&' | '(' | ')' | '*' | '+' |
                                    // '++' | '-' | '--' | '.' | '/' | '<' | '<<' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>>' | '?' | '[' | '^' | 'instanceof' | '|' | '||'
          break;
        default:
          lk = l1;
        }
        switch (lk)
        {
        case 5385:                  // Identifier '='
          try_elementValuePairs();
          break;
        default:
          try_elementValue();
        }
      }
      lookahead1W(2);               // WS | COMMENT | LINE_COMMENT | ')'
      consumeT(22);                 // ')'
    }
  }

  function parse_annotationName()
  {
    eventHandler.startNonterminal("annotationName", e0);
    consume(9);                     // Identifier
    for (;;)
    {
      lookahead1W(102);             // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | '(' | ')' | ',' | '.' | ';' |
                                    // '<' | '@' | 'abstract' | 'boolean' | 'byte' | 'char' | 'class' | 'double' |
                                    // 'final' | 'float' | 'int' | 'interface' | 'long' | 'native' | 'package' |
                                    // 'private' | 'protected' | 'public' | 'short' | 'static' | 'strictfp' |
                                    // 'synchronized' | 'transient' | 'void' | 'volatile' | '}'
      if (l1 != 32)                 // '.'
      {
        break;
      }
      consume(32);                  // '.'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      consume(9);                   // Identifier
    }
    eventHandler.endNonterminal("annotationName", e0);
  }

  function try_annotationName()
  {
    consumeT(9);                    // Identifier
    for (;;)
    {
      lookahead1W(102);             // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | '(' | ')' | ',' | '.' | ';' |
                                    // '<' | '@' | 'abstract' | 'boolean' | 'byte' | 'char' | 'class' | 'double' |
                                    // 'final' | 'float' | 'int' | 'interface' | 'long' | 'native' | 'package' |
                                    // 'private' | 'protected' | 'public' | 'short' | 'static' | 'strictfp' |
                                    // 'synchronized' | 'transient' | 'void' | 'volatile' | '}'
      if (l1 != 32)                 // '.'
      {
        break;
      }
      consumeT(32);                 // '.'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      consumeT(9);                  // Identifier
    }
  }

  function parse_elementValuePairs()
  {
    eventHandler.startNonterminal("elementValuePairs", e0);
    parse_elementValuePair();
    for (;;)
    {
      lookahead1W(28);              // WS | COMMENT | LINE_COMMENT | ')' | ','
      if (l1 != 28)                 // ','
      {
        break;
      }
      consume(28);                  // ','
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      whitespace();
      parse_elementValuePair();
    }
    eventHandler.endNonterminal("elementValuePairs", e0);
  }

  function try_elementValuePairs()
  {
    try_elementValuePair();
    for (;;)
    {
      lookahead1W(28);              // WS | COMMENT | LINE_COMMENT | ')' | ','
      if (l1 != 28)                 // ','
      {
        break;
      }
      consumeT(28);                 // ','
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      try_elementValuePair();
    }
  }

  function parse_elementValuePair()
  {
    eventHandler.startNonterminal("elementValuePair", e0);
    consume(9);                     // Identifier
    lookahead1W(8);                 // WS | COMMENT | LINE_COMMENT | '='
    consume(42);                    // '='
    lookahead1W(95);                // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '{' | '~'
    whitespace();
    parse_elementValue();
    eventHandler.endNonterminal("elementValuePair", e0);
  }

  function try_elementValuePair()
  {
    consumeT(9);                    // Identifier
    lookahead1W(8);                 // WS | COMMENT | LINE_COMMENT | '='
    consumeT(42);                   // '='
    lookahead1W(95);                // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '{' | '~'
    try_elementValue();
  }

  function parse_elementValue()
  {
    eventHandler.startNonterminal("elementValue", e0);
    switch (l1)
    {
    case 51:                        // '@'
      parse_annotation();
      break;
    case 105:                       // '{'
      parse_elementValueArrayInitializer();
      break;
    default:
      parse_conditionalExpression();
    }
    eventHandler.endNonterminal("elementValue", e0);
  }

  function try_elementValue()
  {
    switch (l1)
    {
    case 51:                        // '@'
      try_annotation();
      break;
    case 105:                       // '{'
      try_elementValueArrayInitializer();
      break;
    default:
      try_conditionalExpression();
    }
  }

  function parse_elementValueArrayInitializer()
  {
    eventHandler.startNonterminal("elementValueArrayInitializer", e0);
    consume(105);                   // '{'
    lookahead1W(101);               // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | ',' | '-' | '--' | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '{' | '}' | '~'
    if (l1 != 28                    // ','
     && l1 != 109)                  // '}'
    {
      whitespace();
      parse_elementValue();
      for (;;)
      {
        lookahead1W(30);            // WS | COMMENT | LINE_COMMENT | ',' | '}'
        switch (l1)
        {
        case 28:                    // ','
          lookahead2W(99);          // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '{' | '}' | '~'
          break;
        default:
          lk = l1;
        }
        if (lk == 109               // '}'
         || lk == 13980)            // ',' '}'
        {
          break;
        }
        consume(28);                // ','
        lookahead1W(95);            // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '{' | '~'
        whitespace();
        parse_elementValue();
      }
    }
    if (l1 == 28)                   // ','
    {
      consume(28);                  // ','
    }
    lookahead1W(18);                // WS | COMMENT | LINE_COMMENT | '}'
    consume(109);                   // '}'
    eventHandler.endNonterminal("elementValueArrayInitializer", e0);
  }

  function try_elementValueArrayInitializer()
  {
    consumeT(105);                  // '{'
    lookahead1W(101);               // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | ',' | '-' | '--' | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '{' | '}' | '~'
    if (l1 != 28                    // ','
     && l1 != 109)                  // '}'
    {
      try_elementValue();
      for (;;)
      {
        lookahead1W(30);            // WS | COMMENT | LINE_COMMENT | ',' | '}'
        switch (l1)
        {
        case 28:                    // ','
          lookahead2W(99);          // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '{' | '}' | '~'
          break;
        default:
          lk = l1;
        }
        if (lk == 109               // '}'
         || lk == 13980)            // ',' '}'
        {
          break;
        }
        consumeT(28);               // ','
        lookahead1W(95);            // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '{' | '~'
        try_elementValue();
      }
    }
    if (l1 == 28)                   // ','
    {
      consumeT(28);                 // ','
    }
    lookahead1W(18);                // WS | COMMENT | LINE_COMMENT | '}'
    consumeT(109);                  // '}'
  }

  function parse_annotationTypeDeclaration()
  {
    eventHandler.startNonterminal("annotationTypeDeclaration", e0);
    consume(51);                    // '@'
    lookahead1W(12);                // WS | COMMENT | LINE_COMMENT | 'interface'
    consume(80);                    // 'interface'
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    consume(9);                     // Identifier
    lookahead1W(17);                // WS | COMMENT | LINE_COMMENT | '{'
    whitespace();
    parse_annotationTypeBody();
    eventHandler.endNonterminal("annotationTypeDeclaration", e0);
  }

  function try_annotationTypeDeclaration()
  {
    consumeT(51);                   // '@'
    lookahead1W(12);                // WS | COMMENT | LINE_COMMENT | 'interface'
    consumeT(80);                   // 'interface'
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    consumeT(9);                    // Identifier
    lookahead1W(17);                // WS | COMMENT | LINE_COMMENT | '{'
    try_annotationTypeBody();
  }

  function parse_annotationTypeBody()
  {
    eventHandler.startNonterminal("annotationTypeBody", e0);
    consume(105);                   // '{'
    for (;;)
    {
      lookahead1W(83);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | '@' | 'abstract' | 'boolean' |
                                    // 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' | 'interface' |
                                    // 'long' | 'native' | 'private' | 'protected' | 'public' | 'short' | 'static' |
                                    // 'strictfp' | 'synchronized' | 'transient' | 'volatile' | '}'
      if (l1 == 109)                // '}'
      {
        break;
      }
      whitespace();
      parse_annotationTypeElementDeclaration();
    }
    consume(109);                   // '}'
    eventHandler.endNonterminal("annotationTypeBody", e0);
  }

  function try_annotationTypeBody()
  {
    consumeT(105);                  // '{'
    for (;;)
    {
      lookahead1W(83);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | '@' | 'abstract' | 'boolean' |
                                    // 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' | 'interface' |
                                    // 'long' | 'native' | 'private' | 'protected' | 'public' | 'short' | 'static' |
                                    // 'strictfp' | 'synchronized' | 'transient' | 'volatile' | '}'
      if (l1 == 109)                // '}'
      {
        break;
      }
      try_annotationTypeElementDeclaration();
    }
    consumeT(109);                  // '}'
  }

  function parse_annotationTypeElementDeclaration()
  {
    eventHandler.startNonterminal("annotationTypeElementDeclaration", e0);
    parse_modifiers();
    whitespace();
    parse_annotationTypeElementRest();
    eventHandler.endNonterminal("annotationTypeElementDeclaration", e0);
  }

  function try_annotationTypeElementDeclaration()
  {
    try_modifiers();
    try_annotationTypeElementRest();
  }

  function parse_annotationTypeElementRest()
  {
    eventHandler.startNonterminal("annotationTypeElementRest", e0);
    switch (l1)
    {
    case 63:                        // 'class'
      parse_normalClassDeclaration();
      lookahead1W(84);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | ';' | '@' | 'abstract' |
                                    // 'boolean' | 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' |
                                    // 'interface' | 'long' | 'native' | 'private' | 'protected' | 'public' | 'short' |
                                    // 'static' | 'strictfp' | 'synchronized' | 'transient' | 'volatile' | '}'
      if (l1 == 37)                 // ';'
      {
        consume(37);                // ';'
      }
      break;
    case 80:                        // 'interface'
      parse_normalInterfaceDeclaration();
      lookahead1W(84);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | ';' | '@' | 'abstract' |
                                    // 'boolean' | 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' |
                                    // 'interface' | 'long' | 'native' | 'private' | 'protected' | 'public' | 'short' |
                                    // 'static' | 'strictfp' | 'synchronized' | 'transient' | 'volatile' | '}'
      if (l1 == 37)                 // ';'
      {
        consume(37);                // ';'
      }
      break;
    case 7:                         // ENUM
      parse_enumDeclaration();
      lookahead1W(84);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | ';' | '@' | 'abstract' |
                                    // 'boolean' | 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' |
                                    // 'interface' | 'long' | 'native' | 'private' | 'protected' | 'public' | 'short' |
                                    // 'static' | 'strictfp' | 'synchronized' | 'transient' | 'volatile' | '}'
      if (l1 == 37)                 // ';'
      {
        consume(37);                // ';'
      }
      break;
    case 51:                        // '@'
      parse_annotationTypeDeclaration();
      lookahead1W(84);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | ';' | '@' | 'abstract' |
                                    // 'boolean' | 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' |
                                    // 'interface' | 'long' | 'native' | 'private' | 'protected' | 'public' | 'short' |
                                    // 'static' | 'strictfp' | 'synchronized' | 'transient' | 'volatile' | '}'
      if (l1 == 37)                 // ';'
      {
        consume(37);                // ';'
      }
      break;
    default:
      parse_type();
      whitespace();
      parse_annotationMethodOrConstantRest();
      lookahead1W(6);               // WS | COMMENT | LINE_COMMENT | ';'
      consume(37);                  // ';'
    }
    eventHandler.endNonterminal("annotationTypeElementRest", e0);
  }

  function try_annotationTypeElementRest()
  {
    switch (l1)
    {
    case 63:                        // 'class'
      try_normalClassDeclaration();
      lookahead1W(84);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | ';' | '@' | 'abstract' |
                                    // 'boolean' | 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' |
                                    // 'interface' | 'long' | 'native' | 'private' | 'protected' | 'public' | 'short' |
                                    // 'static' | 'strictfp' | 'synchronized' | 'transient' | 'volatile' | '}'
      if (l1 == 37)                 // ';'
      {
        consumeT(37);               // ';'
      }
      break;
    case 80:                        // 'interface'
      try_normalInterfaceDeclaration();
      lookahead1W(84);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | ';' | '@' | 'abstract' |
                                    // 'boolean' | 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' |
                                    // 'interface' | 'long' | 'native' | 'private' | 'protected' | 'public' | 'short' |
                                    // 'static' | 'strictfp' | 'synchronized' | 'transient' | 'volatile' | '}'
      if (l1 == 37)                 // ';'
      {
        consumeT(37);               // ';'
      }
      break;
    case 7:                         // ENUM
      try_enumDeclaration();
      lookahead1W(84);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | ';' | '@' | 'abstract' |
                                    // 'boolean' | 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' |
                                    // 'interface' | 'long' | 'native' | 'private' | 'protected' | 'public' | 'short' |
                                    // 'static' | 'strictfp' | 'synchronized' | 'transient' | 'volatile' | '}'
      if (l1 == 37)                 // ';'
      {
        consumeT(37);               // ';'
      }
      break;
    case 51:                        // '@'
      try_annotationTypeDeclaration();
      lookahead1W(84);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | ';' | '@' | 'abstract' |
                                    // 'boolean' | 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' |
                                    // 'interface' | 'long' | 'native' | 'private' | 'protected' | 'public' | 'short' |
                                    // 'static' | 'strictfp' | 'synchronized' | 'transient' | 'volatile' | '}'
      if (l1 == 37)                 // ';'
      {
        consumeT(37);               // ';'
      }
      break;
    default:
      try_type();
      try_annotationMethodOrConstantRest();
      lookahead1W(6);               // WS | COMMENT | LINE_COMMENT | ';'
      consumeT(37);                 // ';'
    }
  }

  function parse_annotationMethodOrConstantRest()
  {
    eventHandler.startNonterminal("annotationMethodOrConstantRest", e0);
    switch (l1)
    {
    case 9:                         // Identifier
      lookahead2W(63);              // WS | COMMENT | LINE_COMMENT | '(' | ',' | ';' | '=' | '['
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 2697:                      // Identifier '('
      parse_annotationMethodRest();
      break;
    default:
      parse_annotationConstantRest();
    }
    eventHandler.endNonterminal("annotationMethodOrConstantRest", e0);
  }

  function try_annotationMethodOrConstantRest()
  {
    switch (l1)
    {
    case 9:                         // Identifier
      lookahead2W(63);              // WS | COMMENT | LINE_COMMENT | '(' | ',' | ';' | '=' | '['
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 2697:                      // Identifier '('
      try_annotationMethodRest();
      break;
    default:
      try_annotationConstantRest();
    }
  }

  function parse_annotationMethodRest()
  {
    eventHandler.startNonterminal("annotationMethodRest", e0);
    consume(9);                     // Identifier
    lookahead1W(1);                 // WS | COMMENT | LINE_COMMENT | '('
    consume(21);                    // '('
    lookahead1W(2);                 // WS | COMMENT | LINE_COMMENT | ')'
    consume(22);                    // ')'
    lookahead1W(32);                // WS | COMMENT | LINE_COMMENT | ';' | 'default'
    if (l1 == 65)                   // 'default'
    {
      whitespace();
      parse_defaultValue();
    }
    eventHandler.endNonterminal("annotationMethodRest", e0);
  }

  function try_annotationMethodRest()
  {
    consumeT(9);                    // Identifier
    lookahead1W(1);                 // WS | COMMENT | LINE_COMMENT | '('
    consumeT(21);                   // '('
    lookahead1W(2);                 // WS | COMMENT | LINE_COMMENT | ')'
    consumeT(22);                   // ')'
    lookahead1W(32);                // WS | COMMENT | LINE_COMMENT | ';' | 'default'
    if (l1 == 65)                   // 'default'
    {
      try_defaultValue();
    }
  }

  function parse_annotationConstantRest()
  {
    eventHandler.startNonterminal("annotationConstantRest", e0);
    parse_variableDeclarators();
    eventHandler.endNonterminal("annotationConstantRest", e0);
  }

  function try_annotationConstantRest()
  {
    try_variableDeclarators();
  }

  function parse_defaultValue()
  {
    eventHandler.startNonterminal("defaultValue", e0);
    consume(65);                    // 'default'
    lookahead1W(95);                // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '{' | '~'
    whitespace();
    parse_elementValue();
    eventHandler.endNonterminal("defaultValue", e0);
  }

  function try_defaultValue()
  {
    consumeT(65);                   // 'default'
    lookahead1W(95);                // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '{' | '~'
    try_elementValue();
  }

  function parse_block()
  {
    eventHandler.startNonterminal("block", e0);
    consume(105);                   // '{'
    for (;;)
    {
      lookahead1W(116);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ENUM | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '@' | 'abstract' |
                                    // 'boolean' | 'break' | 'byte' | 'char' | 'class' | 'continue' | 'do' | 'double' |
                                    // 'false' | 'final' | 'float' | 'for' | 'if' | 'int' | 'interface' | 'long' |
                                    // 'new' | 'null' | 'private' | 'protected' | 'public' | 'return' | 'short' |
                                    // 'static' | 'strictfp' | 'super' | 'switch' | 'synchronized' | 'this' | 'throw' |
                                    // 'true' | 'try' | 'void' | 'while' | '{' | '}' | '~'
      if (l1 == 109)                // '}'
      {
        break;
      }
      whitespace();
      parse_blockStatement();
    }
    consume(109);                   // '}'
    eventHandler.endNonterminal("block", e0);
  }

  function try_block()
  {
    consumeT(105);                  // '{'
    for (;;)
    {
      lookahead1W(116);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ENUM | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '@' | 'abstract' |
                                    // 'boolean' | 'break' | 'byte' | 'char' | 'class' | 'continue' | 'do' | 'double' |
                                    // 'false' | 'final' | 'float' | 'for' | 'if' | 'int' | 'interface' | 'long' |
                                    // 'new' | 'null' | 'private' | 'protected' | 'public' | 'return' | 'short' |
                                    // 'static' | 'strictfp' | 'super' | 'switch' | 'synchronized' | 'this' | 'throw' |
                                    // 'true' | 'try' | 'void' | 'while' | '{' | '}' | '~'
      if (l1 == 109)                // '}'
      {
        break;
      }
      try_blockStatement();
    }
    consumeT(109);                  // '}'
  }

  function parse_blockStatement()
  {
    eventHandler.startNonterminal("blockStatement", e0);
    switch (l1)
    {
    case 9:                         // Identifier
      lookahead2W(111);             // Identifier | WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' |
                                    // '&=' | '(' | '*' | '*=' | '+' | '++' | '+=' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '>>>' | '>>>=' | '?' | '[' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||'
      break;
    case 51:                        // '@'
      lookahead2W(23);              // Identifier | WS | COMMENT | LINE_COMMENT | 'interface'
      break;
    case 71:                        // 'final'
      lookahead2W(81);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | '@' | 'abstract' | 'boolean' |
                                    // 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' | 'interface' |
                                    // 'long' | 'private' | 'protected' | 'public' | 'short' | 'static' | 'strictfp'
      break;
    case 57:                        // 'boolean'
    case 59:                        // 'byte'
    case 62:                        // 'char'
    case 67:                        // 'double'
    case 73:                        // 'float'
    case 79:                        // 'int'
    case 81:                        // 'long'
    case 90:                        // 'short'
      lookahead2W(43);              // Identifier | WS | COMMENT | LINE_COMMENT | '.' | '['
      break;
    default:
      lk = l1;
    }
    if (lk == 1203                  // '@' Identifier
     || lk == 4105                  // Identifier '.'
     || lk == 4873                  // Identifier '<'
     || lk == 6599                  // 'final' '@'
     || lk == 6665                  // Identifier '['
     || lk == 6713                  // 'boolean' '['
     || lk == 6715                  // 'byte' '['
     || lk == 6718                  // 'char' '['
     || lk == 6723                  // 'double' '['
     || lk == 6729                  // 'float' '['
     || lk == 6735                  // 'int' '['
     || lk == 6737                  // 'long' '['
     || lk == 6746                  // 'short' '['
     || lk == 9159)                 // 'final' 'final'
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_localVariableDeclarationStatement();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_classOrInterfaceDeclaration();
            lk = -2;
          }
          catch (p2A)
          {
            lk = -3;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(4, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 1161:                      // Identifier Identifier
    case 1209:                      // 'boolean' Identifier
    case 1211:                      // 'byte' Identifier
    case 1214:                      // 'char' Identifier
    case 1219:                      // 'double' Identifier
    case 1223:                      // 'final' Identifier
    case 1225:                      // 'float' Identifier
    case 1231:                      // 'int' Identifier
    case 1233:                      // 'long' Identifier
    case 1242:                      // 'short' Identifier
    case 7367:                      // 'final' 'boolean'
    case 7623:                      // 'final' 'byte'
    case 8007:                      // 'final' 'char'
    case 8647:                      // 'final' 'double'
    case 9415:                      // 'final' 'float'
    case 10183:                     // 'final' 'int'
    case 10439:                     // 'final' 'long'
    case 11591:                     // 'final' 'short'
      parse_localVariableDeclarationStatement();
      break;
    case -2:
    case 7:                         // ENUM
    case 56:                        // 'abstract'
    case 63:                        // 'class'
    case 80:                        // 'interface'
    case 86:                        // 'private'
    case 87:                        // 'protected'
    case 88:                        // 'public'
    case 91:                        // 'static'
    case 92:                        // 'strictfp'
    case 967:                       // 'final' ENUM
    case 7239:                      // 'final' 'abstract'
    case 8135:                      // 'final' 'class'
    case 10291:                     // '@' 'interface'
    case 10311:                     // 'final' 'interface'
    case 11079:                     // 'final' 'private'
    case 11207:                     // 'final' 'protected'
    case 11335:                     // 'final' 'public'
    case 11719:                     // 'final' 'static'
    case 11847:                     // 'final' 'strictfp'
      parse_classOrInterfaceDeclaration();
      break;
    default:
      parse_statement();
    }
    eventHandler.endNonterminal("blockStatement", e0);
  }

  function try_blockStatement()
  {
    switch (l1)
    {
    case 9:                         // Identifier
      lookahead2W(111);             // Identifier | WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' |
                                    // '&=' | '(' | '*' | '*=' | '+' | '++' | '+=' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '>>>' | '>>>=' | '?' | '[' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||'
      break;
    case 51:                        // '@'
      lookahead2W(23);              // Identifier | WS | COMMENT | LINE_COMMENT | 'interface'
      break;
    case 71:                        // 'final'
      lookahead2W(81);              // ENUM | Identifier | WS | COMMENT | LINE_COMMENT | '@' | 'abstract' | 'boolean' |
                                    // 'byte' | 'char' | 'class' | 'double' | 'final' | 'float' | 'int' | 'interface' |
                                    // 'long' | 'private' | 'protected' | 'public' | 'short' | 'static' | 'strictfp'
      break;
    case 57:                        // 'boolean'
    case 59:                        // 'byte'
    case 62:                        // 'char'
    case 67:                        // 'double'
    case 73:                        // 'float'
    case 79:                        // 'int'
    case 81:                        // 'long'
    case 90:                        // 'short'
      lookahead2W(43);              // Identifier | WS | COMMENT | LINE_COMMENT | '.' | '['
      break;
    default:
      lk = l1;
    }
    if (lk == 1203                  // '@' Identifier
     || lk == 4105                  // Identifier '.'
     || lk == 4873                  // Identifier '<'
     || lk == 6599                  // 'final' '@'
     || lk == 6665                  // Identifier '['
     || lk == 6713                  // 'boolean' '['
     || lk == 6715                  // 'byte' '['
     || lk == 6718                  // 'char' '['
     || lk == 6723                  // 'double' '['
     || lk == 6729                  // 'float' '['
     || lk == 6735                  // 'int' '['
     || lk == 6737                  // 'long' '['
     || lk == 6746                  // 'short' '['
     || lk == 9159)                 // 'final' 'final'
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_localVariableDeclarationStatement();
          memoize(4, e0A, -1);
          lk = -4;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_classOrInterfaceDeclaration();
            memoize(4, e0A, -2);
            lk = -4;
          }
          catch (p2A)
          {
            lk = -3;
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(4, e0A, -3);
          }
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 1161:                      // Identifier Identifier
    case 1209:                      // 'boolean' Identifier
    case 1211:                      // 'byte' Identifier
    case 1214:                      // 'char' Identifier
    case 1219:                      // 'double' Identifier
    case 1223:                      // 'final' Identifier
    case 1225:                      // 'float' Identifier
    case 1231:                      // 'int' Identifier
    case 1233:                      // 'long' Identifier
    case 1242:                      // 'short' Identifier
    case 7367:                      // 'final' 'boolean'
    case 7623:                      // 'final' 'byte'
    case 8007:                      // 'final' 'char'
    case 8647:                      // 'final' 'double'
    case 9415:                      // 'final' 'float'
    case 10183:                     // 'final' 'int'
    case 10439:                     // 'final' 'long'
    case 11591:                     // 'final' 'short'
      try_localVariableDeclarationStatement();
      break;
    case -2:
    case 7:                         // ENUM
    case 56:                        // 'abstract'
    case 63:                        // 'class'
    case 80:                        // 'interface'
    case 86:                        // 'private'
    case 87:                        // 'protected'
    case 88:                        // 'public'
    case 91:                        // 'static'
    case 92:                        // 'strictfp'
    case 967:                       // 'final' ENUM
    case 7239:                      // 'final' 'abstract'
    case 8135:                      // 'final' 'class'
    case 10291:                     // '@' 'interface'
    case 10311:                     // 'final' 'interface'
    case 11079:                     // 'final' 'private'
    case 11207:                     // 'final' 'protected'
    case 11335:                     // 'final' 'public'
    case 11719:                     // 'final' 'static'
    case 11847:                     // 'final' 'strictfp'
      try_classOrInterfaceDeclaration();
      break;
    case -4:
      break;
    default:
      try_statement();
    }
  }

  function parse_localVariableDeclarationStatement()
  {
    eventHandler.startNonterminal("localVariableDeclarationStatement", e0);
    parse_localVariableDeclaration();
    consume(37);                    // ';'
    eventHandler.endNonterminal("localVariableDeclarationStatement", e0);
  }

  function try_localVariableDeclarationStatement()
  {
    try_localVariableDeclaration();
    consumeT(37);                   // ';'
  }

  function parse_localVariableDeclaration()
  {
    eventHandler.startNonterminal("localVariableDeclaration", e0);
    parse_variableModifiers();
    whitespace();
    parse_type();
    whitespace();
    parse_variableDeclarators();
    eventHandler.endNonterminal("localVariableDeclaration", e0);
  }

  function try_localVariableDeclaration()
  {
    try_variableModifiers();
    try_type();
    try_variableDeclarators();
  }

  function parse_variableModifiers()
  {
    eventHandler.startNonterminal("variableModifiers", e0);
    for (;;)
    {
      lookahead1W(75);              // Identifier | WS | COMMENT | LINE_COMMENT | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'final' | 'float' | 'int' | 'long' | 'short'
      if (l1 != 51                  // '@'
       && l1 != 71)                 // 'final'
      {
        break;
      }
      whitespace();
      parse_variableModifier();
    }
    eventHandler.endNonterminal("variableModifiers", e0);
  }

  function try_variableModifiers()
  {
    for (;;)
    {
      lookahead1W(75);              // Identifier | WS | COMMENT | LINE_COMMENT | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'final' | 'float' | 'int' | 'long' | 'short'
      if (l1 != 51                  // '@'
       && l1 != 71)                 // 'final'
      {
        break;
      }
      try_variableModifier();
    }
  }

  function parse_statement()
  {
    eventHandler.startNonterminal("statement", e0);
    switch (l1)
    {
    case 9:                         // Identifier
      lookahead2W(109);             // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' |
                                    // '*=' | '+' | '++' | '+=' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':' | ';' |
                                    // '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '>>>' |
                                    // '>>>=' | '?' | '[' | '^' | '^=' | 'instanceof' | '|' | '|=' | '||'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 105:                       // '{'
      parse_block();
      break;
    case 8:                         // ASSERT
      consume(8);                   // ASSERT
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_expression();
      if (l1 == 36)                 // ':'
      {
        consume(36);                // ':'
        lookahead1W(89);            // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
        whitespace();
        parse_expression();
      }
      consume(37);                  // ';'
      break;
    case 75:                        // 'if'
      consume(75);                  // 'if'
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      whitespace();
      parse_parExpression();
      lookahead1W(112);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | 'boolean' | 'break' |
                                    // 'byte' | 'char' | 'continue' | 'do' | 'double' | 'false' | 'float' | 'for' |
                                    // 'if' | 'int' | 'long' | 'new' | 'null' | 'return' | 'short' | 'super' |
                                    // 'switch' | 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' |
                                    // 'while' | '{' | '~'
      whitespace();
      parse_statement();
      lookahead1W(119);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ENUM | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '@' | 'abstract' |
                                    // 'boolean' | 'break' | 'byte' | 'case' | 'char' | 'class' | 'continue' |
                                    // 'default' | 'do' | 'double' | 'else' | 'false' | 'final' | 'float' | 'for' |
                                    // 'if' | 'int' | 'interface' | 'long' | 'new' | 'null' | 'private' | 'protected' |
                                    // 'public' | 'return' | 'short' | 'static' | 'strictfp' | 'super' | 'switch' |
                                    // 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' | 'while' | '{' |
                                    // '}' | '~'
      switch (l1)
      {
      case 68:                      // 'else'
        lookahead2W(112);           // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | 'boolean' | 'break' |
                                    // 'byte' | 'char' | 'continue' | 'do' | 'double' | 'false' | 'float' | 'for' |
                                    // 'if' | 'int' | 'long' | 'new' | 'null' | 'return' | 'short' | 'super' |
                                    // 'switch' | 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' |
                                    // 'while' | '{' | '~'
        break;
      default:
        lk = l1;
      }
      if (lk == 196                 // 'else' HexLiteral
       || lk == 324                 // 'else' DecimalLiteral
       || lk == 452                 // 'else' OctalLiteral
       || lk == 580                 // 'else' FloatingPointLiteral
       || lk == 708                 // 'else' CharacterLiteral
       || lk == 836                 // 'else' StringLiteral
       || lk == 1092                // 'else' ASSERT
       || lk == 1220                // 'else' Identifier
       || lk == 1860                // 'else' '!'
       || lk == 2756                // 'else' '('
       || lk == 3268                // 'else' '+'
       || lk == 3396                // 'else' '++'
       || lk == 3780                // 'else' '-'
       || lk == 3908                // 'else' '--'
       || lk == 4804                // 'else' ';'
       || lk == 7364                // 'else' 'boolean'
       || lk == 7492                // 'else' 'break'
       || lk == 7620                // 'else' 'byte'
       || lk == 8004                // 'else' 'char'
       || lk == 8260                // 'else' 'continue'
       || lk == 8516                // 'else' 'do'
       || lk == 8644                // 'else' 'double'
       || lk == 9028                // 'else' 'false'
       || lk == 9412                // 'else' 'float'
       || lk == 9540                // 'else' 'for'
       || lk == 9668                // 'else' 'if'
       || lk == 10180               // 'else' 'int'
       || lk == 10436               // 'else' 'long'
       || lk == 10692               // 'else' 'new'
       || lk == 10820               // 'else' 'null'
       || lk == 11460               // 'else' 'return'
       || lk == 11588               // 'else' 'short'
       || lk == 11972               // 'else' 'super'
       || lk == 12100               // 'else' 'switch'
       || lk == 12228               // 'else' 'synchronized'
       || lk == 12356               // 'else' 'this'
       || lk == 12484               // 'else' 'throw'
       || lk == 12868               // 'else' 'true'
       || lk == 12996               // 'else' 'try'
       || lk == 13124               // 'else' 'void'
       || lk == 13380               // 'else' 'while'
       || lk == 13508               // 'else' '{'
       || lk == 14148)              // 'else' '~'
      {
        lk = memoized(5, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(68);           // 'else'
            lookahead1W(112);       // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | 'boolean' | 'break' |
                                    // 'byte' | 'char' | 'continue' | 'do' | 'double' | 'false' | 'float' | 'for' |
                                    // 'if' | 'int' | 'long' | 'new' | 'null' | 'return' | 'short' | 'super' |
                                    // 'switch' | 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' |
                                    // 'while' | '{' | '~'
            try_statement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(5, e0, lk);
        }
      }
      if (lk == -1)
      {
        consume(68);                // 'else'
        lookahead1W(112);           // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | 'boolean' | 'break' |
                                    // 'byte' | 'char' | 'continue' | 'do' | 'double' | 'false' | 'float' | 'for' |
                                    // 'if' | 'int' | 'long' | 'new' | 'null' | 'return' | 'short' | 'super' |
                                    // 'switch' | 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' |
                                    // 'while' | '{' | '~'
        whitespace();
        parse_statement();
      }
      break;
    case 74:                        // 'for'
      consume(74);                  // 'for'
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      consume(21);                  // '('
      lookahead1W(98);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | ';' | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'final' | 'float' | 'int' | 'long' | 'new' | 'null' |
                                    // 'short' | 'super' | 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_forControl();
      consume(22);                  // ')'
      lookahead1W(112);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | 'boolean' | 'break' |
                                    // 'byte' | 'char' | 'continue' | 'do' | 'double' | 'false' | 'float' | 'for' |
                                    // 'if' | 'int' | 'long' | 'new' | 'null' | 'return' | 'short' | 'super' |
                                    // 'switch' | 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' |
                                    // 'while' | '{' | '~'
      whitespace();
      parse_statement();
      break;
    case 104:                       // 'while'
      consume(104);                 // 'while'
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      whitespace();
      parse_parExpression();
      lookahead1W(112);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | 'boolean' | 'break' |
                                    // 'byte' | 'char' | 'continue' | 'do' | 'double' | 'false' | 'float' | 'for' |
                                    // 'if' | 'int' | 'long' | 'new' | 'null' | 'return' | 'short' | 'super' |
                                    // 'switch' | 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' |
                                    // 'while' | '{' | '~'
      whitespace();
      parse_statement();
      break;
    case 66:                        // 'do'
      consume(66);                  // 'do'
      lookahead1W(112);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | 'boolean' | 'break' |
                                    // 'byte' | 'char' | 'continue' | 'do' | 'double' | 'false' | 'float' | 'for' |
                                    // 'if' | 'int' | 'long' | 'new' | 'null' | 'return' | 'short' | 'super' |
                                    // 'switch' | 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' |
                                    // 'while' | '{' | '~'
      whitespace();
      parse_statement();
      lookahead1W(16);              // WS | COMMENT | LINE_COMMENT | 'while'
      consume(104);                 // 'while'
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      whitespace();
      parse_parExpression();
      lookahead1W(6);               // WS | COMMENT | LINE_COMMENT | ';'
      consume(37);                  // ';'
      break;
    case 101:                       // 'try'
      consume(101);                 // 'try'
      lookahead1W(17);              // WS | COMMENT | LINE_COMMENT | '{'
      whitespace();
      parse_block();
      lookahead1W(38);              // WS | COMMENT | LINE_COMMENT | 'catch' | 'finally'
      switch (l1)
      {
      case 61:                      // 'catch'
        lookahead2W(1);             // WS | COMMENT | LINE_COMMENT | '('
        break;
      default:
        lk = l1;
      }
      if (lk == 2749)               // 'catch' '('
      {
        lk = memoized(6, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_catches();
            consumeT(72);           // 'finally'
            lookahead1W(17);        // WS | COMMENT | LINE_COMMENT | '{'
            try_block();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(6, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_catches();
        consume(72);                // 'finally'
        lookahead1W(17);            // WS | COMMENT | LINE_COMMENT | '{'
        whitespace();
        parse_block();
        break;
      case -2:
        whitespace();
        parse_catches();
        break;
      default:
        consume(72);                // 'finally'
        lookahead1W(17);            // WS | COMMENT | LINE_COMMENT | '{'
        whitespace();
        parse_block();
      }
      break;
    case 94:                        // 'switch'
      consume(94);                  // 'switch'
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      whitespace();
      parse_parExpression();
      lookahead1W(17);              // WS | COMMENT | LINE_COMMENT | '{'
      consume(105);                 // '{'
      lookahead1W(52);              // WS | COMMENT | LINE_COMMENT | 'case' | 'default' | '}'
      whitespace();
      parse_switchBlockStatementGroups();
      consume(109);                 // '}'
      break;
    case 95:                        // 'synchronized'
      consume(95);                  // 'synchronized'
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      whitespace();
      parse_parExpression();
      lookahead1W(17);              // WS | COMMENT | LINE_COMMENT | '{'
      whitespace();
      parse_block();
      break;
    case 89:                        // 'return'
      consume(89);                  // 'return'
      lookahead1W(92);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | ';' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '~'
      if (l1 != 37)                 // ';'
      {
        whitespace();
        parse_expression();
      }
      consume(37);                  // ';'
      break;
    case 97:                        // 'throw'
      consume(97);                  // 'throw'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_expression();
      consume(37);                  // ';'
      break;
    case 58:                        // 'break'
      consume(58);                  // 'break'
      lookahead1W(20);              // Identifier | WS | COMMENT | LINE_COMMENT | ';'
      if (l1 == 9)                  // Identifier
      {
        consume(9);                 // Identifier
      }
      lookahead1W(6);               // WS | COMMENT | LINE_COMMENT | ';'
      consume(37);                  // ';'
      break;
    case 64:                        // 'continue'
      consume(64);                  // 'continue'
      lookahead1W(20);              // Identifier | WS | COMMENT | LINE_COMMENT | ';'
      if (l1 == 9)                  // Identifier
      {
        consume(9);                 // Identifier
      }
      lookahead1W(6);               // WS | COMMENT | LINE_COMMENT | ';'
      consume(37);                  // ';'
      break;
    case 37:                        // ';'
      consume(37);                  // ';'
      break;
    case 4617:                      // Identifier ':'
      consume(9);                   // Identifier
      lookahead1W(5);               // WS | COMMENT | LINE_COMMENT | ':'
      consume(36);                  // ':'
      lookahead1W(112);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | 'boolean' | 'break' |
                                    // 'byte' | 'char' | 'continue' | 'do' | 'double' | 'false' | 'float' | 'for' |
                                    // 'if' | 'int' | 'long' | 'new' | 'null' | 'return' | 'short' | 'super' |
                                    // 'switch' | 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' |
                                    // 'while' | '{' | '~'
      whitespace();
      parse_statement();
      break;
    default:
      parse_statementExpression();
      consume(37);                  // ';'
    }
    eventHandler.endNonterminal("statement", e0);
  }

  function try_statement()
  {
    switch (l1)
    {
    case 9:                         // Identifier
      lookahead2W(109);             // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' |
                                    // '*=' | '+' | '++' | '+=' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':' | ';' |
                                    // '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '>>>' |
                                    // '>>>=' | '?' | '[' | '^' | '^=' | 'instanceof' | '|' | '|=' | '||'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 105:                       // '{'
      try_block();
      break;
    case 8:                         // ASSERT
      consumeT(8);                  // ASSERT
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_expression();
      if (l1 == 36)                 // ':'
      {
        consumeT(36);               // ':'
        lookahead1W(89);            // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
        try_expression();
      }
      consumeT(37);                 // ';'
      break;
    case 75:                        // 'if'
      consumeT(75);                 // 'if'
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      try_parExpression();
      lookahead1W(112);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | 'boolean' | 'break' |
                                    // 'byte' | 'char' | 'continue' | 'do' | 'double' | 'false' | 'float' | 'for' |
                                    // 'if' | 'int' | 'long' | 'new' | 'null' | 'return' | 'short' | 'super' |
                                    // 'switch' | 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' |
                                    // 'while' | '{' | '~'
      try_statement();
      lookahead1W(119);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ENUM | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '@' | 'abstract' |
                                    // 'boolean' | 'break' | 'byte' | 'case' | 'char' | 'class' | 'continue' |
                                    // 'default' | 'do' | 'double' | 'else' | 'false' | 'final' | 'float' | 'for' |
                                    // 'if' | 'int' | 'interface' | 'long' | 'new' | 'null' | 'private' | 'protected' |
                                    // 'public' | 'return' | 'short' | 'static' | 'strictfp' | 'super' | 'switch' |
                                    // 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' | 'while' | '{' |
                                    // '}' | '~'
      switch (l1)
      {
      case 68:                      // 'else'
        lookahead2W(112);           // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | 'boolean' | 'break' |
                                    // 'byte' | 'char' | 'continue' | 'do' | 'double' | 'false' | 'float' | 'for' |
                                    // 'if' | 'int' | 'long' | 'new' | 'null' | 'return' | 'short' | 'super' |
                                    // 'switch' | 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' |
                                    // 'while' | '{' | '~'
        break;
      default:
        lk = l1;
      }
      if (lk == 196                 // 'else' HexLiteral
       || lk == 324                 // 'else' DecimalLiteral
       || lk == 452                 // 'else' OctalLiteral
       || lk == 580                 // 'else' FloatingPointLiteral
       || lk == 708                 // 'else' CharacterLiteral
       || lk == 836                 // 'else' StringLiteral
       || lk == 1092                // 'else' ASSERT
       || lk == 1220                // 'else' Identifier
       || lk == 1860                // 'else' '!'
       || lk == 2756                // 'else' '('
       || lk == 3268                // 'else' '+'
       || lk == 3396                // 'else' '++'
       || lk == 3780                // 'else' '-'
       || lk == 3908                // 'else' '--'
       || lk == 4804                // 'else' ';'
       || lk == 7364                // 'else' 'boolean'
       || lk == 7492                // 'else' 'break'
       || lk == 7620                // 'else' 'byte'
       || lk == 8004                // 'else' 'char'
       || lk == 8260                // 'else' 'continue'
       || lk == 8516                // 'else' 'do'
       || lk == 8644                // 'else' 'double'
       || lk == 9028                // 'else' 'false'
       || lk == 9412                // 'else' 'float'
       || lk == 9540                // 'else' 'for'
       || lk == 9668                // 'else' 'if'
       || lk == 10180               // 'else' 'int'
       || lk == 10436               // 'else' 'long'
       || lk == 10692               // 'else' 'new'
       || lk == 10820               // 'else' 'null'
       || lk == 11460               // 'else' 'return'
       || lk == 11588               // 'else' 'short'
       || lk == 11972               // 'else' 'super'
       || lk == 12100               // 'else' 'switch'
       || lk == 12228               // 'else' 'synchronized'
       || lk == 12356               // 'else' 'this'
       || lk == 12484               // 'else' 'throw'
       || lk == 12868               // 'else' 'true'
       || lk == 12996               // 'else' 'try'
       || lk == 13124               // 'else' 'void'
       || lk == 13380               // 'else' 'while'
       || lk == 13508               // 'else' '{'
       || lk == 14148)              // 'else' '~'
      {
        lk = memoized(5, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(68);           // 'else'
            lookahead1W(112);       // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | 'boolean' | 'break' |
                                    // 'byte' | 'char' | 'continue' | 'do' | 'double' | 'false' | 'float' | 'for' |
                                    // 'if' | 'int' | 'long' | 'new' | 'null' | 'return' | 'short' | 'super' |
                                    // 'switch' | 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' |
                                    // 'while' | '{' | '~'
            try_statement();
            memoize(5, e0A, -1);
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(5, e0A, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1)
      {
        consumeT(68);               // 'else'
        lookahead1W(112);           // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | 'boolean' | 'break' |
                                    // 'byte' | 'char' | 'continue' | 'do' | 'double' | 'false' | 'float' | 'for' |
                                    // 'if' | 'int' | 'long' | 'new' | 'null' | 'return' | 'short' | 'super' |
                                    // 'switch' | 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' |
                                    // 'while' | '{' | '~'
        try_statement();
      }
      break;
    case 74:                        // 'for'
      consumeT(74);                 // 'for'
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      consumeT(21);                 // '('
      lookahead1W(98);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | ';' | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'final' | 'float' | 'int' | 'long' | 'new' | 'null' |
                                    // 'short' | 'super' | 'this' | 'true' | 'void' | '~'
      try_forControl();
      consumeT(22);                 // ')'
      lookahead1W(112);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | 'boolean' | 'break' |
                                    // 'byte' | 'char' | 'continue' | 'do' | 'double' | 'false' | 'float' | 'for' |
                                    // 'if' | 'int' | 'long' | 'new' | 'null' | 'return' | 'short' | 'super' |
                                    // 'switch' | 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' |
                                    // 'while' | '{' | '~'
      try_statement();
      break;
    case 104:                       // 'while'
      consumeT(104);                // 'while'
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      try_parExpression();
      lookahead1W(112);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | 'boolean' | 'break' |
                                    // 'byte' | 'char' | 'continue' | 'do' | 'double' | 'false' | 'float' | 'for' |
                                    // 'if' | 'int' | 'long' | 'new' | 'null' | 'return' | 'short' | 'super' |
                                    // 'switch' | 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' |
                                    // 'while' | '{' | '~'
      try_statement();
      break;
    case 66:                        // 'do'
      consumeT(66);                 // 'do'
      lookahead1W(112);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | 'boolean' | 'break' |
                                    // 'byte' | 'char' | 'continue' | 'do' | 'double' | 'false' | 'float' | 'for' |
                                    // 'if' | 'int' | 'long' | 'new' | 'null' | 'return' | 'short' | 'super' |
                                    // 'switch' | 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' |
                                    // 'while' | '{' | '~'
      try_statement();
      lookahead1W(16);              // WS | COMMENT | LINE_COMMENT | 'while'
      consumeT(104);                // 'while'
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      try_parExpression();
      lookahead1W(6);               // WS | COMMENT | LINE_COMMENT | ';'
      consumeT(37);                 // ';'
      break;
    case 101:                       // 'try'
      consumeT(101);                // 'try'
      lookahead1W(17);              // WS | COMMENT | LINE_COMMENT | '{'
      try_block();
      lookahead1W(38);              // WS | COMMENT | LINE_COMMENT | 'catch' | 'finally'
      switch (l1)
      {
      case 61:                      // 'catch'
        lookahead2W(1);             // WS | COMMENT | LINE_COMMENT | '('
        break;
      default:
        lk = l1;
      }
      if (lk == 2749)               // 'catch' '('
      {
        lk = memoized(6, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_catches();
            consumeT(72);           // 'finally'
            lookahead1W(17);        // WS | COMMENT | LINE_COMMENT | '{'
            try_block();
            memoize(6, e0A, -1);
            lk = -4;
          }
          catch (p1A)
          {
            lk = -2;
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(6, e0A, -2);
          }
        }
      }
      switch (lk)
      {
      case -1:
        try_catches();
        consumeT(72);               // 'finally'
        lookahead1W(17);            // WS | COMMENT | LINE_COMMENT | '{'
        try_block();
        break;
      case -2:
        try_catches();
        break;
      case -4:
        break;
      default:
        consumeT(72);               // 'finally'
        lookahead1W(17);            // WS | COMMENT | LINE_COMMENT | '{'
        try_block();
      }
      break;
    case 94:                        // 'switch'
      consumeT(94);                 // 'switch'
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      try_parExpression();
      lookahead1W(17);              // WS | COMMENT | LINE_COMMENT | '{'
      consumeT(105);                // '{'
      lookahead1W(52);              // WS | COMMENT | LINE_COMMENT | 'case' | 'default' | '}'
      try_switchBlockStatementGroups();
      consumeT(109);                // '}'
      break;
    case 95:                        // 'synchronized'
      consumeT(95);                 // 'synchronized'
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      try_parExpression();
      lookahead1W(17);              // WS | COMMENT | LINE_COMMENT | '{'
      try_block();
      break;
    case 89:                        // 'return'
      consumeT(89);                 // 'return'
      lookahead1W(92);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | ';' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '~'
      if (l1 != 37)                 // ';'
      {
        try_expression();
      }
      consumeT(37);                 // ';'
      break;
    case 97:                        // 'throw'
      consumeT(97);                 // 'throw'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_expression();
      consumeT(37);                 // ';'
      break;
    case 58:                        // 'break'
      consumeT(58);                 // 'break'
      lookahead1W(20);              // Identifier | WS | COMMENT | LINE_COMMENT | ';'
      if (l1 == 9)                  // Identifier
      {
        consumeT(9);                // Identifier
      }
      lookahead1W(6);               // WS | COMMENT | LINE_COMMENT | ';'
      consumeT(37);                 // ';'
      break;
    case 64:                        // 'continue'
      consumeT(64);                 // 'continue'
      lookahead1W(20);              // Identifier | WS | COMMENT | LINE_COMMENT | ';'
      if (l1 == 9)                  // Identifier
      {
        consumeT(9);                // Identifier
      }
      lookahead1W(6);               // WS | COMMENT | LINE_COMMENT | ';'
      consumeT(37);                 // ';'
      break;
    case 37:                        // ';'
      consumeT(37);                 // ';'
      break;
    case 4617:                      // Identifier ':'
      consumeT(9);                  // Identifier
      lookahead1W(5);               // WS | COMMENT | LINE_COMMENT | ':'
      consumeT(36);                 // ':'
      lookahead1W(112);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | 'boolean' | 'break' |
                                    // 'byte' | 'char' | 'continue' | 'do' | 'double' | 'false' | 'float' | 'for' |
                                    // 'if' | 'int' | 'long' | 'new' | 'null' | 'return' | 'short' | 'super' |
                                    // 'switch' | 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' |
                                    // 'while' | '{' | '~'
      try_statement();
      break;
    default:
      try_statementExpression();
      consumeT(37);                 // ';'
    }
  }

  function parse_catches()
  {
    eventHandler.startNonterminal("catches", e0);
    parse_catchClause();
    for (;;)
    {
      lookahead1W(120);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ENUM | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '@' | 'abstract' |
                                    // 'boolean' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'class' | 'continue' |
                                    // 'default' | 'do' | 'double' | 'else' | 'false' | 'final' | 'finally' | 'float' |
                                    // 'for' | 'if' | 'int' | 'interface' | 'long' | 'new' | 'null' | 'private' |
                                    // 'protected' | 'public' | 'return' | 'short' | 'static' | 'strictfp' | 'super' |
                                    // 'switch' | 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' |
                                    // 'while' | '{' | '}' | '~'
      if (l1 != 61)                 // 'catch'
      {
        break;
      }
      whitespace();
      parse_catchClause();
    }
    eventHandler.endNonterminal("catches", e0);
  }

  function try_catches()
  {
    try_catchClause();
    for (;;)
    {
      lookahead1W(120);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ENUM | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '@' | 'abstract' |
                                    // 'boolean' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'class' | 'continue' |
                                    // 'default' | 'do' | 'double' | 'else' | 'false' | 'final' | 'finally' | 'float' |
                                    // 'for' | 'if' | 'int' | 'interface' | 'long' | 'new' | 'null' | 'private' |
                                    // 'protected' | 'public' | 'return' | 'short' | 'static' | 'strictfp' | 'super' |
                                    // 'switch' | 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' |
                                    // 'while' | '{' | '}' | '~'
      if (l1 != 61)                 // 'catch'
      {
        break;
      }
      try_catchClause();
    }
  }

  function parse_catchClause()
  {
    eventHandler.startNonterminal("catchClause", e0);
    consume(61);                    // 'catch'
    lookahead1W(1);                 // WS | COMMENT | LINE_COMMENT | '('
    consume(21);                    // '('
    lookahead1W(75);                // Identifier | WS | COMMENT | LINE_COMMENT | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'final' | 'float' | 'int' | 'long' | 'short'
    whitespace();
    parse_formalParameter();
    consume(22);                    // ')'
    lookahead1W(17);                // WS | COMMENT | LINE_COMMENT | '{'
    whitespace();
    parse_block();
    eventHandler.endNonterminal("catchClause", e0);
  }

  function try_catchClause()
  {
    consumeT(61);                   // 'catch'
    lookahead1W(1);                 // WS | COMMENT | LINE_COMMENT | '('
    consumeT(21);                   // '('
    lookahead1W(75);                // Identifier | WS | COMMENT | LINE_COMMENT | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'final' | 'float' | 'int' | 'long' | 'short'
    try_formalParameter();
    consumeT(22);                   // ')'
    lookahead1W(17);                // WS | COMMENT | LINE_COMMENT | '{'
    try_block();
  }

  function parse_formalParameter()
  {
    eventHandler.startNonterminal("formalParameter", e0);
    parse_variableModifiers();
    whitespace();
    parse_type();
    whitespace();
    parse_variableDeclaratorId();
    eventHandler.endNonterminal("formalParameter", e0);
  }

  function try_formalParameter()
  {
    try_variableModifiers();
    try_type();
    try_variableDeclaratorId();
  }

  function parse_switchBlockStatementGroups()
  {
    eventHandler.startNonterminal("switchBlockStatementGroups", e0);
    for (;;)
    {
      if (l1 == 109)                // '}'
      {
        break;
      }
      whitespace();
      parse_switchBlockStatementGroup();
    }
    eventHandler.endNonterminal("switchBlockStatementGroups", e0);
  }

  function try_switchBlockStatementGroups()
  {
    for (;;)
    {
      if (l1 == 109)                // '}'
      {
        break;
      }
      try_switchBlockStatementGroup();
    }
  }

  function parse_switchBlockStatementGroup()
  {
    eventHandler.startNonterminal("switchBlockStatementGroup", e0);
    for (;;)
    {
      whitespace();
      parse_switchLabel();
      lookahead1W(118);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ENUM | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '@' | 'abstract' |
                                    // 'boolean' | 'break' | 'byte' | 'case' | 'char' | 'class' | 'continue' |
                                    // 'default' | 'do' | 'double' | 'false' | 'final' | 'float' | 'for' | 'if' |
                                    // 'int' | 'interface' | 'long' | 'new' | 'null' | 'private' | 'protected' |
                                    // 'public' | 'return' | 'short' | 'static' | 'strictfp' | 'super' | 'switch' |
                                    // 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' | 'while' | '{' |
                                    // '}' | '~'
      switch (l1)
      {
      case 60:                      // 'case'
        lookahead2W(89);            // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
        break;
      case 65:                      // 'default'
        lookahead2W(5);             // WS | COMMENT | LINE_COMMENT | ':'
        break;
      default:
        lk = l1;
      }
      if (lk == 188                 // 'case' HexLiteral
       || lk == 316                 // 'case' DecimalLiteral
       || lk == 444                 // 'case' OctalLiteral
       || lk == 572                 // 'case' FloatingPointLiteral
       || lk == 700                 // 'case' CharacterLiteral
       || lk == 828                 // 'case' StringLiteral
       || lk == 1212                // 'case' Identifier
       || lk == 1852                // 'case' '!'
       || lk == 2748                // 'case' '('
       || lk == 3260                // 'case' '+'
       || lk == 3388                // 'case' '++'
       || lk == 3772                // 'case' '-'
       || lk == 3900                // 'case' '--'
       || lk == 4673                // 'default' ':'
       || lk == 7356                // 'case' 'boolean'
       || lk == 7612                // 'case' 'byte'
       || lk == 7996                // 'case' 'char'
       || lk == 8636                // 'case' 'double'
       || lk == 9020                // 'case' 'false'
       || lk == 9404                // 'case' 'float'
       || lk == 10172               // 'case' 'int'
       || lk == 10428               // 'case' 'long'
       || lk == 10684               // 'case' 'new'
       || lk == 10812               // 'case' 'null'
       || lk == 11580               // 'case' 'short'
       || lk == 11964               // 'case' 'super'
       || lk == 12348               // 'case' 'this'
       || lk == 12860               // 'case' 'true'
       || lk == 13116               // 'case' 'void'
       || lk == 14140)              // 'case' '~'
      {
        lk = memoized(7, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_switchLabel();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(7, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
    }
    for (;;)
    {
      lookahead1W(118);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ENUM | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '@' | 'abstract' |
                                    // 'boolean' | 'break' | 'byte' | 'case' | 'char' | 'class' | 'continue' |
                                    // 'default' | 'do' | 'double' | 'false' | 'final' | 'float' | 'for' | 'if' |
                                    // 'int' | 'interface' | 'long' | 'new' | 'null' | 'private' | 'protected' |
                                    // 'public' | 'return' | 'short' | 'static' | 'strictfp' | 'super' | 'switch' |
                                    // 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' | 'while' | '{' |
                                    // '}' | '~'
      if (l1 == 60                  // 'case'
       || l1 == 65                  // 'default'
       || l1 == 109)                // '}'
      {
        break;
      }
      whitespace();
      parse_blockStatement();
    }
    eventHandler.endNonterminal("switchBlockStatementGroup", e0);
  }

  function try_switchBlockStatementGroup()
  {
    try_switchLabel();
    for (;;)
    {
      lookahead1W(118);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ENUM | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '@' | 'abstract' |
                                    // 'boolean' | 'break' | 'byte' | 'case' | 'char' | 'class' | 'continue' |
                                    // 'default' | 'do' | 'double' | 'false' | 'final' | 'float' | 'for' | 'if' |
                                    // 'int' | 'interface' | 'long' | 'new' | 'null' | 'private' | 'protected' |
                                    // 'public' | 'return' | 'short' | 'static' | 'strictfp' | 'super' | 'switch' |
                                    // 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' | 'while' | '{' |
                                    // '}' | '~'
      switch (l1)
      {
      case 60:                      // 'case'
        lookahead2W(89);            // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
        break;
      case 65:                      // 'default'
        lookahead2W(5);             // WS | COMMENT | LINE_COMMENT | ':'
        break;
      default:
        lk = l1;
      }
      if (lk == 188                 // 'case' HexLiteral
       || lk == 316                 // 'case' DecimalLiteral
       || lk == 444                 // 'case' OctalLiteral
       || lk == 572                 // 'case' FloatingPointLiteral
       || lk == 700                 // 'case' CharacterLiteral
       || lk == 828                 // 'case' StringLiteral
       || lk == 1212                // 'case' Identifier
       || lk == 1852                // 'case' '!'
       || lk == 2748                // 'case' '('
       || lk == 3260                // 'case' '+'
       || lk == 3388                // 'case' '++'
       || lk == 3772                // 'case' '-'
       || lk == 3900                // 'case' '--'
       || lk == 4673                // 'default' ':'
       || lk == 7356                // 'case' 'boolean'
       || lk == 7612                // 'case' 'byte'
       || lk == 7996                // 'case' 'char'
       || lk == 8636                // 'case' 'double'
       || lk == 9020                // 'case' 'false'
       || lk == 9404                // 'case' 'float'
       || lk == 10172               // 'case' 'int'
       || lk == 10428               // 'case' 'long'
       || lk == 10684               // 'case' 'new'
       || lk == 10812               // 'case' 'null'
       || lk == 11580               // 'case' 'short'
       || lk == 11964               // 'case' 'super'
       || lk == 12348               // 'case' 'this'
       || lk == 12860               // 'case' 'true'
       || lk == 13116               // 'case' 'void'
       || lk == 14140)              // 'case' '~'
      {
        lk = memoized(7, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_switchLabel();
            memoize(7, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(7, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      try_switchLabel();
    }
    for (;;)
    {
      lookahead1W(118);             // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | ENUM | ASSERT | Identifier | WS | COMMENT |
                                    // LINE_COMMENT | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '@' | 'abstract' |
                                    // 'boolean' | 'break' | 'byte' | 'case' | 'char' | 'class' | 'continue' |
                                    // 'default' | 'do' | 'double' | 'false' | 'final' | 'float' | 'for' | 'if' |
                                    // 'int' | 'interface' | 'long' | 'new' | 'null' | 'private' | 'protected' |
                                    // 'public' | 'return' | 'short' | 'static' | 'strictfp' | 'super' | 'switch' |
                                    // 'synchronized' | 'this' | 'throw' | 'true' | 'try' | 'void' | 'while' | '{' |
                                    // '}' | '~'
      if (l1 == 60                  // 'case'
       || l1 == 65                  // 'default'
       || l1 == 109)                // '}'
      {
        break;
      }
      try_blockStatement();
    }
  }

  function parse_switchLabel()
  {
    eventHandler.startNonterminal("switchLabel", e0);
    switch (l1)
    {
    case 60:                        // 'case'
      lookahead2W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      break;
    default:
      lk = l1;
    }
    if (lk == 1212)                 // 'case' Identifier
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(60);             // 'case'
          lookahead1W(89);          // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
          try_constantExpression();
          consumeT(36);             // ':'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(8, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
      consume(60);                  // 'case'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      whitespace();
      parse_enumConstantName();
      lookahead1W(5);               // WS | COMMENT | LINE_COMMENT | ':'
      consume(36);                  // ':'
      break;
    case 65:                        // 'default'
      consume(65);                  // 'default'
      lookahead1W(5);               // WS | COMMENT | LINE_COMMENT | ':'
      consume(36);                  // ':'
      break;
    default:
      consume(60);                  // 'case'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_constantExpression();
      consume(36);                  // ':'
    }
    eventHandler.endNonterminal("switchLabel", e0);
  }

  function try_switchLabel()
  {
    switch (l1)
    {
    case 60:                        // 'case'
      lookahead2W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      break;
    default:
      lk = l1;
    }
    if (lk == 1212)                 // 'case' Identifier
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(60);             // 'case'
          lookahead1W(89);          // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
          try_constantExpression();
          consumeT(36);             // ':'
          memoize(8, e0A, -1);
          lk = -4;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(8, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -2:
      consumeT(60);                 // 'case'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      try_enumConstantName();
      lookahead1W(5);               // WS | COMMENT | LINE_COMMENT | ':'
      consumeT(36);                 // ':'
      break;
    case 65:                        // 'default'
      consumeT(65);                 // 'default'
      lookahead1W(5);               // WS | COMMENT | LINE_COMMENT | ':'
      consumeT(36);                 // ':'
      break;
    case -4:
      break;
    default:
      consumeT(60);                 // 'case'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_constantExpression();
      consumeT(36);                 // ':'
    }
  }

  function parse_forControl()
  {
    eventHandler.startNonterminal("forControl", e0);
    switch (l1)
    {
    case 9:                         // Identifier
      lookahead2W(110);             // Identifier | WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' |
                                    // '&=' | '(' | '*' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' |
                                    // '/' | '/=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '>>>' | '>>>=' | '?' | '[' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||'
      break;
    case 51:                        // '@'
      lookahead2W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      break;
    case 71:                        // 'final'
      lookahead2W(75);              // Identifier | WS | COMMENT | LINE_COMMENT | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'final' | 'float' | 'int' | 'long' | 'short'
      break;
    case 57:                        // 'boolean'
    case 59:                        // 'byte'
    case 62:                        // 'char'
    case 67:                        // 'double'
    case 73:                        // 'float'
    case 79:                        // 'int'
    case 81:                        // 'long'
    case 90:                        // 'short'
      lookahead2W(43);              // Identifier | WS | COMMENT | LINE_COMMENT | '.' | '['
      break;
    default:
      lk = l1;
    }
    if (lk == 1161                  // Identifier Identifier
     || lk == 1203                  // '@' Identifier
     || lk == 1209                  // 'boolean' Identifier
     || lk == 1211                  // 'byte' Identifier
     || lk == 1214                  // 'char' Identifier
     || lk == 1219                  // 'double' Identifier
     || lk == 1223                  // 'final' Identifier
     || lk == 1225                  // 'float' Identifier
     || lk == 1231                  // 'int' Identifier
     || lk == 1233                  // 'long' Identifier
     || lk == 1242                  // 'short' Identifier
     || lk == 4105                  // Identifier '.'
     || lk == 4873                  // Identifier '<'
     || lk == 6599                  // 'final' '@'
     || lk == 6665                  // Identifier '['
     || lk == 6713                  // 'boolean' '['
     || lk == 6715                  // 'byte' '['
     || lk == 6718                  // 'char' '['
     || lk == 6723                  // 'double' '['
     || lk == 6729                  // 'float' '['
     || lk == 6735                  // 'int' '['
     || lk == 6737                  // 'long' '['
     || lk == 6746                  // 'short' '['
     || lk == 7367                  // 'final' 'boolean'
     || lk == 7623                  // 'final' 'byte'
     || lk == 8007                  // 'final' 'char'
     || lk == 8647                  // 'final' 'double'
     || lk == 9159                  // 'final' 'final'
     || lk == 9415                  // 'final' 'float'
     || lk == 10183                 // 'final' 'int'
     || lk == 10439                 // 'final' 'long'
     || lk == 11591)                // 'final' 'short'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_enhancedForControl();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(9, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      parse_enhancedForControl();
      break;
    default:
      if (l1 != 37)                 // ';'
      {
        whitespace();
        parse_forInit();
      }
      consume(37);                  // ';'
      lookahead1W(92);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | ';' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '~'
      if (l1 != 37)                 // ';'
      {
        whitespace();
        parse_expression();
      }
      consume(37);                  // ';'
      lookahead1W(91);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | ')' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '~'
      if (l1 != 22)                 // ')'
      {
        whitespace();
        parse_forUpdate();
      }
    }
    eventHandler.endNonterminal("forControl", e0);
  }

  function try_forControl()
  {
    switch (l1)
    {
    case 9:                         // Identifier
      lookahead2W(110);             // Identifier | WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' |
                                    // '&=' | '(' | '*' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' |
                                    // '/' | '/=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '>>>' | '>>>=' | '?' | '[' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||'
      break;
    case 51:                        // '@'
      lookahead2W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      break;
    case 71:                        // 'final'
      lookahead2W(75);              // Identifier | WS | COMMENT | LINE_COMMENT | '@' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'final' | 'float' | 'int' | 'long' | 'short'
      break;
    case 57:                        // 'boolean'
    case 59:                        // 'byte'
    case 62:                        // 'char'
    case 67:                        // 'double'
    case 73:                        // 'float'
    case 79:                        // 'int'
    case 81:                        // 'long'
    case 90:                        // 'short'
      lookahead2W(43);              // Identifier | WS | COMMENT | LINE_COMMENT | '.' | '['
      break;
    default:
      lk = l1;
    }
    if (lk == 1161                  // Identifier Identifier
     || lk == 1203                  // '@' Identifier
     || lk == 1209                  // 'boolean' Identifier
     || lk == 1211                  // 'byte' Identifier
     || lk == 1214                  // 'char' Identifier
     || lk == 1219                  // 'double' Identifier
     || lk == 1223                  // 'final' Identifier
     || lk == 1225                  // 'float' Identifier
     || lk == 1231                  // 'int' Identifier
     || lk == 1233                  // 'long' Identifier
     || lk == 1242                  // 'short' Identifier
     || lk == 4105                  // Identifier '.'
     || lk == 4873                  // Identifier '<'
     || lk == 6599                  // 'final' '@'
     || lk == 6665                  // Identifier '['
     || lk == 6713                  // 'boolean' '['
     || lk == 6715                  // 'byte' '['
     || lk == 6718                  // 'char' '['
     || lk == 6723                  // 'double' '['
     || lk == 6729                  // 'float' '['
     || lk == 6735                  // 'int' '['
     || lk == 6737                  // 'long' '['
     || lk == 6746                  // 'short' '['
     || lk == 7367                  // 'final' 'boolean'
     || lk == 7623                  // 'final' 'byte'
     || lk == 8007                  // 'final' 'char'
     || lk == 8647                  // 'final' 'double'
     || lk == 9159                  // 'final' 'final'
     || lk == 9415                  // 'final' 'float'
     || lk == 10183                 // 'final' 'int'
     || lk == 10439                 // 'final' 'long'
     || lk == 11591)                // 'final' 'short'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_enhancedForControl();
          memoize(9, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(9, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      try_enhancedForControl();
      break;
    case -3:
      break;
    default:
      if (l1 != 37)                 // ';'
      {
        try_forInit();
      }
      consumeT(37);                 // ';'
      lookahead1W(92);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | ';' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '~'
      if (l1 != 37)                 // ';'
      {
        try_expression();
      }
      consumeT(37);                 // ';'
      lookahead1W(91);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | ')' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '~'
      if (l1 != 22)                 // ')'
      {
        try_forUpdate();
      }
    }
  }

  function parse_forInit()
  {
    eventHandler.startNonterminal("forInit", e0);
    switch (l1)
    {
    case 9:                         // Identifier
      lookahead2W(110);             // Identifier | WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' |
                                    // '&=' | '(' | '*' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' |
                                    // '/' | '/=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '>>>' | '>>>=' | '?' | '[' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||'
      break;
    case 57:                        // 'boolean'
    case 59:                        // 'byte'
    case 62:                        // 'char'
    case 67:                        // 'double'
    case 73:                        // 'float'
    case 79:                        // 'int'
    case 81:                        // 'long'
    case 90:                        // 'short'
      lookahead2W(43);              // Identifier | WS | COMMENT | LINE_COMMENT | '.' | '['
      break;
    default:
      lk = l1;
    }
    if (lk == 4105                  // Identifier '.'
     || lk == 4873                  // Identifier '<'
     || lk == 6665                  // Identifier '['
     || lk == 6713                  // 'boolean' '['
     || lk == 6715                  // 'byte' '['
     || lk == 6718                  // 'char' '['
     || lk == 6723                  // 'double' '['
     || lk == 6729                  // 'float' '['
     || lk == 6735                  // 'int' '['
     || lk == 6737                  // 'long' '['
     || lk == 6746)                 // 'short' '['
    {
      lk = memoized(10, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_localVariableDeclaration();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(10, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 51:                        // '@'
    case 71:                        // 'final'
    case 1161:                      // Identifier Identifier
    case 1209:                      // 'boolean' Identifier
    case 1211:                      // 'byte' Identifier
    case 1214:                      // 'char' Identifier
    case 1219:                      // 'double' Identifier
    case 1225:                      // 'float' Identifier
    case 1231:                      // 'int' Identifier
    case 1233:                      // 'long' Identifier
    case 1242:                      // 'short' Identifier
      parse_localVariableDeclaration();
      break;
    default:
      parse_expressionList();
    }
    eventHandler.endNonterminal("forInit", e0);
  }

  function try_forInit()
  {
    switch (l1)
    {
    case 9:                         // Identifier
      lookahead2W(110);             // Identifier | WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' |
                                    // '&=' | '(' | '*' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' |
                                    // '/' | '/=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '>>>' | '>>>=' | '?' | '[' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||'
      break;
    case 57:                        // 'boolean'
    case 59:                        // 'byte'
    case 62:                        // 'char'
    case 67:                        // 'double'
    case 73:                        // 'float'
    case 79:                        // 'int'
    case 81:                        // 'long'
    case 90:                        // 'short'
      lookahead2W(43);              // Identifier | WS | COMMENT | LINE_COMMENT | '.' | '['
      break;
    default:
      lk = l1;
    }
    if (lk == 4105                  // Identifier '.'
     || lk == 4873                  // Identifier '<'
     || lk == 6665                  // Identifier '['
     || lk == 6713                  // 'boolean' '['
     || lk == 6715                  // 'byte' '['
     || lk == 6718                  // 'char' '['
     || lk == 6723                  // 'double' '['
     || lk == 6729                  // 'float' '['
     || lk == 6735                  // 'int' '['
     || lk == 6737                  // 'long' '['
     || lk == 6746)                 // 'short' '['
    {
      lk = memoized(10, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_localVariableDeclaration();
          memoize(10, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(10, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 51:                        // '@'
    case 71:                        // 'final'
    case 1161:                      // Identifier Identifier
    case 1209:                      // 'boolean' Identifier
    case 1211:                      // 'byte' Identifier
    case 1214:                      // 'char' Identifier
    case 1219:                      // 'double' Identifier
    case 1225:                      // 'float' Identifier
    case 1231:                      // 'int' Identifier
    case 1233:                      // 'long' Identifier
    case 1242:                      // 'short' Identifier
      try_localVariableDeclaration();
      break;
    case -3:
      break;
    default:
      try_expressionList();
    }
  }

  function parse_enhancedForControl()
  {
    eventHandler.startNonterminal("enhancedForControl", e0);
    parse_variableModifiers();
    whitespace();
    parse_type();
    consume(9);                     // Identifier
    lookahead1W(5);                 // WS | COMMENT | LINE_COMMENT | ':'
    consume(36);                    // ':'
    lookahead1W(89);                // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
    whitespace();
    parse_expression();
    eventHandler.endNonterminal("enhancedForControl", e0);
  }

  function try_enhancedForControl()
  {
    try_variableModifiers();
    try_type();
    consumeT(9);                    // Identifier
    lookahead1W(5);                 // WS | COMMENT | LINE_COMMENT | ':'
    consumeT(36);                   // ':'
    lookahead1W(89);                // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
    try_expression();
  }

  function parse_forUpdate()
  {
    eventHandler.startNonterminal("forUpdate", e0);
    parse_expressionList();
    eventHandler.endNonterminal("forUpdate", e0);
  }

  function try_forUpdate()
  {
    try_expressionList();
  }

  function parse_parExpression()
  {
    eventHandler.startNonterminal("parExpression", e0);
    consume(21);                    // '('
    lookahead1W(89);                // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
    whitespace();
    parse_expression();
    consume(22);                    // ')'
    eventHandler.endNonterminal("parExpression", e0);
  }

  function try_parExpression()
  {
    consumeT(21);                   // '('
    lookahead1W(89);                // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
    try_expression();
    consumeT(22);                   // ')'
  }

  function parse_expressionList()
  {
    eventHandler.startNonterminal("expressionList", e0);
    parse_expression();
    for (;;)
    {
      if (l1 != 28)                 // ','
      {
        break;
      }
      consume(28);                  // ','
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_expression();
    }
    eventHandler.endNonterminal("expressionList", e0);
  }

  function try_expressionList()
  {
    try_expression();
    for (;;)
    {
      if (l1 != 28)                 // ','
      {
        break;
      }
      consumeT(28);                 // ','
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_expression();
    }
  }

  function parse_statementExpression()
  {
    eventHandler.startNonterminal("statementExpression", e0);
    parse_expression();
    eventHandler.endNonterminal("statementExpression", e0);
  }

  function try_statementExpression()
  {
    try_expression();
  }

  function parse_constantExpression()
  {
    eventHandler.startNonterminal("constantExpression", e0);
    parse_expression();
    eventHandler.endNonterminal("constantExpression", e0);
  }

  function try_constantExpression()
  {
    try_expression();
  }

  function parse_expression()
  {
    eventHandler.startNonterminal("expression", e0);
    parse_conditionalExpression();
    switch (l1)
    {
    case 17:                        // '%='
    case 20:                        // '&='
    case 24:                        // '*='
    case 27:                        // '+='
    case 31:                        // '-='
    case 35:                        // '/='
    case 40:                        // '<<='
    case 42:                        // '='
    case 47:                        // '>>='
    case 49:                        // '>>>='
    case 55:                        // '^='
    case 107:                       // '|='
      lookahead2W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      break;
    default:
      lk = l1;
    }
    if (lk != 22                    // ')'
     && lk != 28                    // ','
     && lk != 36                    // ':'
     && lk != 37                    // ';'
     && lk != 53                    // ']'
     && lk != 109)                  // '}'
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_assignmentOperator();
          lookahead1W(89);          // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
          try_expression();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(11, e0, lk);
      }
    }
    if (lk == -1)
    {
      whitespace();
      parse_assignmentOperator();
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_expression();
    }
    eventHandler.endNonterminal("expression", e0);
  }

  function try_expression()
  {
    try_conditionalExpression();
    switch (l1)
    {
    case 17:                        // '%='
    case 20:                        // '&='
    case 24:                        // '*='
    case 27:                        // '+='
    case 31:                        // '-='
    case 35:                        // '/='
    case 40:                        // '<<='
    case 42:                        // '='
    case 47:                        // '>>='
    case 49:                        // '>>>='
    case 55:                        // '^='
    case 107:                       // '|='
      lookahead2W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      break;
    default:
      lk = l1;
    }
    if (lk != 22                    // ')'
     && lk != 28                    // ','
     && lk != 36                    // ':'
     && lk != 37                    // ';'
     && lk != 53                    // ']'
     && lk != 109)                  // '}'
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_assignmentOperator();
          lookahead1W(89);          // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
          try_expression();
          memoize(11, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(11, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      try_assignmentOperator();
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_expression();
    }
  }

  function parse_assignmentOperator()
  {
    eventHandler.startNonterminal("assignmentOperator", e0);
    switch (l1)
    {
    case 42:                        // '='
      consume(42);                  // '='
      break;
    case 27:                        // '+='
      consume(27);                  // '+='
      break;
    case 31:                        // '-='
      consume(31);                  // '-='
      break;
    case 24:                        // '*='
      consume(24);                  // '*='
      break;
    case 35:                        // '/='
      consume(35);                  // '/='
      break;
    case 20:                        // '&='
      consume(20);                  // '&='
      break;
    case 107:                       // '|='
      consume(107);                 // '|='
      break;
    case 55:                        // '^='
      consume(55);                  // '^='
      break;
    case 17:                        // '%='
      consume(17);                  // '%='
      break;
    case 40:                        // '<<='
      consume(40);                  // '<<='
      break;
    case 49:                        // '>>>='
      consume(49);                  // '>>>='
      break;
    default:
      consume(47);                  // '>>='
    }
    eventHandler.endNonterminal("assignmentOperator", e0);
  }

  function try_assignmentOperator()
  {
    switch (l1)
    {
    case 42:                        // '='
      consumeT(42);                 // '='
      break;
    case 27:                        // '+='
      consumeT(27);                 // '+='
      break;
    case 31:                        // '-='
      consumeT(31);                 // '-='
      break;
    case 24:                        // '*='
      consumeT(24);                 // '*='
      break;
    case 35:                        // '/='
      consumeT(35);                 // '/='
      break;
    case 20:                        // '&='
      consumeT(20);                 // '&='
      break;
    case 107:                       // '|='
      consumeT(107);                // '|='
      break;
    case 55:                        // '^='
      consumeT(55);                 // '^='
      break;
    case 17:                        // '%='
      consumeT(17);                 // '%='
      break;
    case 40:                        // '<<='
      consumeT(40);                 // '<<='
      break;
    case 49:                        // '>>>='
      consumeT(49);                 // '>>>='
      break;
    default:
      consumeT(47);                 // '>>='
    }
  }

  function parse_conditionalExpression()
  {
    eventHandler.startNonterminal("conditionalExpression", e0);
    parse_conditionalOrExpression();
    if (l1 == 50)                   // '?'
    {
      consume(50);                  // '?'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_expression();
      consume(36);                  // ':'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_expression();
    }
    eventHandler.endNonterminal("conditionalExpression", e0);
  }

  function try_conditionalExpression()
  {
    try_conditionalOrExpression();
    if (l1 == 50)                   // '?'
    {
      consumeT(50);                 // '?'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_expression();
      consumeT(36);                 // ':'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_expression();
    }
  }

  function parse_conditionalOrExpression()
  {
    eventHandler.startNonterminal("conditionalOrExpression", e0);
    parse_conditionalAndExpression();
    for (;;)
    {
      if (l1 != 108)                // '||'
      {
        break;
      }
      consume(108);                 // '||'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_conditionalAndExpression();
    }
    eventHandler.endNonterminal("conditionalOrExpression", e0);
  }

  function try_conditionalOrExpression()
  {
    try_conditionalAndExpression();
    for (;;)
    {
      if (l1 != 108)                // '||'
      {
        break;
      }
      consumeT(108);                // '||'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_conditionalAndExpression();
    }
  }

  function parse_conditionalAndExpression()
  {
    eventHandler.startNonterminal("conditionalAndExpression", e0);
    parse_inclusiveOrExpression();
    for (;;)
    {
      if (l1 != 19)                 // '&&'
      {
        break;
      }
      consume(19);                  // '&&'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_inclusiveOrExpression();
    }
    eventHandler.endNonterminal("conditionalAndExpression", e0);
  }

  function try_conditionalAndExpression()
  {
    try_inclusiveOrExpression();
    for (;;)
    {
      if (l1 != 19)                 // '&&'
      {
        break;
      }
      consumeT(19);                 // '&&'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_inclusiveOrExpression();
    }
  }

  function parse_inclusiveOrExpression()
  {
    eventHandler.startNonterminal("inclusiveOrExpression", e0);
    parse_exclusiveOrExpression();
    for (;;)
    {
      if (l1 != 106)                // '|'
      {
        break;
      }
      consume(106);                 // '|'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_exclusiveOrExpression();
    }
    eventHandler.endNonterminal("inclusiveOrExpression", e0);
  }

  function try_inclusiveOrExpression()
  {
    try_exclusiveOrExpression();
    for (;;)
    {
      if (l1 != 106)                // '|'
      {
        break;
      }
      consumeT(106);                // '|'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_exclusiveOrExpression();
    }
  }

  function parse_exclusiveOrExpression()
  {
    eventHandler.startNonterminal("exclusiveOrExpression", e0);
    parse_andExpression();
    for (;;)
    {
      if (l1 != 54)                 // '^'
      {
        break;
      }
      consume(54);                  // '^'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_andExpression();
    }
    eventHandler.endNonterminal("exclusiveOrExpression", e0);
  }

  function try_exclusiveOrExpression()
  {
    try_andExpression();
    for (;;)
    {
      if (l1 != 54)                 // '^'
      {
        break;
      }
      consumeT(54);                 // '^'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_andExpression();
    }
  }

  function parse_andExpression()
  {
    eventHandler.startNonterminal("andExpression", e0);
    parse_equalityExpression();
    for (;;)
    {
      if (l1 != 18)                 // '&'
      {
        break;
      }
      consume(18);                  // '&'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_equalityExpression();
    }
    eventHandler.endNonterminal("andExpression", e0);
  }

  function try_andExpression()
  {
    try_equalityExpression();
    for (;;)
    {
      if (l1 != 18)                 // '&'
      {
        break;
      }
      consumeT(18);                 // '&'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_equalityExpression();
    }
  }

  function parse_equalityExpression()
  {
    eventHandler.startNonterminal("equalityExpression", e0);
    parse_instanceOfExpression();
    for (;;)
    {
      if (l1 != 15                  // '!='
       && l1 != 43)                 // '=='
      {
        break;
      }
      switch (l1)
      {
      case 43:                      // '=='
        consume(43);                // '=='
        break;
      default:
        consume(15);                // '!='
      }
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_instanceOfExpression();
    }
    eventHandler.endNonterminal("equalityExpression", e0);
  }

  function try_equalityExpression()
  {
    try_instanceOfExpression();
    for (;;)
    {
      if (l1 != 15                  // '!='
       && l1 != 43)                 // '=='
      {
        break;
      }
      switch (l1)
      {
      case 43:                      // '=='
        consumeT(43);               // '=='
        break;
      default:
        consumeT(15);               // '!='
      }
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_instanceOfExpression();
    }
  }

  function parse_instanceOfExpression()
  {
    eventHandler.startNonterminal("instanceOfExpression", e0);
    parse_relationalExpression();
    if (l1 == 78)                   // 'instanceof'
    {
      consume(78);                  // 'instanceof'
      lookahead1W(69);              // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      whitespace();
      parse_type();
    }
    eventHandler.endNonterminal("instanceOfExpression", e0);
  }

  function try_instanceOfExpression()
  {
    try_relationalExpression();
    if (l1 == 78)                   // 'instanceof'
    {
      consumeT(78);                 // 'instanceof'
      lookahead1W(69);              // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      try_type();
    }
  }

  function parse_relationalExpression()
  {
    eventHandler.startNonterminal("relationalExpression", e0);
    parse_shiftExpression();
    for (;;)
    {
      if (l1 != 38                  // '<'
       && l1 != 41                  // '<='
       && l1 != 44                  // '>'
       && l1 != 45)                 // '>='
      {
        break;
      }
      whitespace();
      parse_relationalOp();
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_shiftExpression();
    }
    eventHandler.endNonterminal("relationalExpression", e0);
  }

  function try_relationalExpression()
  {
    try_shiftExpression();
    for (;;)
    {
      if (l1 != 38                  // '<'
       && l1 != 41                  // '<='
       && l1 != 44                  // '>'
       && l1 != 45)                 // '>='
      {
        break;
      }
      try_relationalOp();
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_shiftExpression();
    }
  }

  function parse_relationalOp()
  {
    eventHandler.startNonterminal("relationalOp", e0);
    switch (l1)
    {
    case 41:                        // '<='
      consume(41);                  // '<='
      break;
    case 45:                        // '>='
      consume(45);                  // '>='
      break;
    case 38:                        // '<'
      consume(38);                  // '<'
      break;
    default:
      consume(44);                  // '>'
    }
    eventHandler.endNonterminal("relationalOp", e0);
  }

  function try_relationalOp()
  {
    switch (l1)
    {
    case 41:                        // '<='
      consumeT(41);                 // '<='
      break;
    case 45:                        // '>='
      consumeT(45);                 // '>='
      break;
    case 38:                        // '<'
      consumeT(38);                 // '<'
      break;
    default:
      consumeT(44);                 // '>'
    }
  }

  function parse_shiftExpression()
  {
    eventHandler.startNonterminal("shiftExpression", e0);
    parse_additiveExpression();
    for (;;)
    {
      if (l1 != 39                  // '<<'
       && l1 != 46                  // '>>'
       && l1 != 48)                 // '>>>'
      {
        break;
      }
      whitespace();
      parse_shiftOp();
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_additiveExpression();
    }
    eventHandler.endNonterminal("shiftExpression", e0);
  }

  function try_shiftExpression()
  {
    try_additiveExpression();
    for (;;)
    {
      if (l1 != 39                  // '<<'
       && l1 != 46                  // '>>'
       && l1 != 48)                 // '>>>'
      {
        break;
      }
      try_shiftOp();
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_additiveExpression();
    }
  }

  function parse_shiftOp()
  {
    eventHandler.startNonterminal("shiftOp", e0);
    switch (l1)
    {
    case 39:                        // '<<'
      consume(39);                  // '<<'
      break;
    case 48:                        // '>>>'
      consume(48);                  // '>>>'
      break;
    default:
      consume(46);                  // '>>'
    }
    eventHandler.endNonterminal("shiftOp", e0);
  }

  function try_shiftOp()
  {
    switch (l1)
    {
    case 39:                        // '<<'
      consumeT(39);                 // '<<'
      break;
    case 48:                        // '>>>'
      consumeT(48);                 // '>>>'
      break;
    default:
      consumeT(46);                 // '>>'
    }
  }

  function parse_additiveExpression()
  {
    eventHandler.startNonterminal("additiveExpression", e0);
    parse_multiplicativeExpression();
    for (;;)
    {
      if (l1 != 25                  // '+'
       && l1 != 29)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 25:                      // '+'
        consume(25);                // '+'
        break;
      default:
        consume(29);                // '-'
      }
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_multiplicativeExpression();
    }
    eventHandler.endNonterminal("additiveExpression", e0);
  }

  function try_additiveExpression()
  {
    try_multiplicativeExpression();
    for (;;)
    {
      if (l1 != 25                  // '+'
       && l1 != 29)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 25:                      // '+'
        consumeT(25);               // '+'
        break;
      default:
        consumeT(29);               // '-'
      }
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_multiplicativeExpression();
    }
  }

  function parse_multiplicativeExpression()
  {
    eventHandler.startNonterminal("multiplicativeExpression", e0);
    parse_unaryExpression();
    for (;;)
    {
      lookahead1W(108);             // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | ')' | '*' |
                                    // '*=' | '+' | '+=' | ',' | '-' | '-=' | '/' | '/=' | ':' | ';' | '<' | '<<' |
                                    // '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '>>>' | '>>>=' | '?' |
                                    // ']' | '^' | '^=' | 'instanceof' | '|' | '|=' | '||' | '}'
      if (l1 != 16                  // '%'
       && l1 != 23                  // '*'
       && l1 != 34)                 // '/'
      {
        break;
      }
      switch (l1)
      {
      case 23:                      // '*'
        consume(23);                // '*'
        break;
      case 34:                      // '/'
        consume(34);                // '/'
        break;
      default:
        consume(16);                // '%'
      }
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_unaryExpression();
    }
    eventHandler.endNonterminal("multiplicativeExpression", e0);
  }

  function try_multiplicativeExpression()
  {
    try_unaryExpression();
    for (;;)
    {
      lookahead1W(108);             // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | ')' | '*' |
                                    // '*=' | '+' | '+=' | ',' | '-' | '-=' | '/' | '/=' | ':' | ';' | '<' | '<<' |
                                    // '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '>>>' | '>>>=' | '?' |
                                    // ']' | '^' | '^=' | 'instanceof' | '|' | '|=' | '||' | '}'
      if (l1 != 16                  // '%'
       && l1 != 23                  // '*'
       && l1 != 34)                 // '/'
      {
        break;
      }
      switch (l1)
      {
      case 23:                      // '*'
        consumeT(23);               // '*'
        break;
      case 34:                      // '/'
        consumeT(34);               // '/'
        break;
      default:
        consumeT(16);               // '%'
      }
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_unaryExpression();
    }
  }

  function parse_unaryExpression()
  {
    eventHandler.startNonterminal("unaryExpression", e0);
    switch (l1)
    {
    case 25:                        // '+'
      consume(25);                  // '+'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_unaryExpression();
      break;
    case 29:                        // '-'
      consume(29);                  // '-'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_unaryExpression();
      break;
    case 26:                        // '++'
      consume(26);                  // '++'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_unaryExpression();
      break;
    case 30:                        // '--'
      consume(30);                  // '--'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_unaryExpression();
      break;
    default:
      parse_unaryExpressionNotPlusMinus();
    }
    eventHandler.endNonterminal("unaryExpression", e0);
  }

  function try_unaryExpression()
  {
    switch (l1)
    {
    case 25:                        // '+'
      consumeT(25);                 // '+'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_unaryExpression();
      break;
    case 29:                        // '-'
      consumeT(29);                 // '-'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_unaryExpression();
      break;
    case 26:                        // '++'
      consumeT(26);                 // '++'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_unaryExpression();
      break;
    case 30:                        // '--'
      consumeT(30);                 // '--'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_unaryExpression();
      break;
    default:
      try_unaryExpressionNotPlusMinus();
    }
  }

  function parse_unaryExpressionNotPlusMinus()
  {
    eventHandler.startNonterminal("unaryExpressionNotPlusMinus", e0);
    switch (l1)
    {
    case 21:                        // '('
      lookahead2W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      break;
    default:
      lk = l1;
    }
    if (lk != 1                     // HexLiteral
     && lk != 2                     // DecimalLiteral
     && lk != 3                     // OctalLiteral
     && lk != 4                     // FloatingPointLiteral
     && lk != 5                     // CharacterLiteral
     && lk != 6                     // StringLiteral
     && lk != 9                     // Identifier
     && lk != 14                    // '!'
     && lk != 57                    // 'boolean'
     && lk != 59                    // 'byte'
     && lk != 62                    // 'char'
     && lk != 67                    // 'double'
     && lk != 70                    // 'false'
     && lk != 73                    // 'float'
     && lk != 79                    // 'int'
     && lk != 81                    // 'long'
     && lk != 83                    // 'new'
     && lk != 84                    // 'null'
     && lk != 90                    // 'short'
     && lk != 93                    // 'super'
     && lk != 96                    // 'this'
     && lk != 100                   // 'true'
     && lk != 102                   // 'void'
     && lk != 110)                  // '~'
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_castExpression();
          lk = -3;
        }
        catch (p3A)
        {
          lk = -4;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(12, e0, lk);
      }
    }
    switch (lk)
    {
    case 110:                       // '~'
      consume(110);                 // '~'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_unaryExpression();
      break;
    case 14:                        // '!'
      consume(14);                  // '!'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_unaryExpression();
      break;
    case -3:
      parse_castExpression();
      break;
    default:
      parse_primary();
      for (;;)
      {
        lookahead1W(113);           // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | ')' | '*' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':' |
                                    // ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' |
                                    // '>>>' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||' | '}'
        if (l1 != 32                // '.'
         && l1 != 52)               // '['
        {
          break;
        }
        whitespace();
        parse_selector();
      }
      if (l1 == 26                  // '++'
       || l1 == 30)                 // '--'
      {
        switch (l1)
        {
        case 26:                    // '++'
          consume(26);              // '++'
          break;
        default:
          consume(30);              // '--'
        }
      }
    }
    eventHandler.endNonterminal("unaryExpressionNotPlusMinus", e0);
  }

  function try_unaryExpressionNotPlusMinus()
  {
    switch (l1)
    {
    case 21:                        // '('
      lookahead2W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      break;
    default:
      lk = l1;
    }
    if (lk != 1                     // HexLiteral
     && lk != 2                     // DecimalLiteral
     && lk != 3                     // OctalLiteral
     && lk != 4                     // FloatingPointLiteral
     && lk != 5                     // CharacterLiteral
     && lk != 6                     // StringLiteral
     && lk != 9                     // Identifier
     && lk != 14                    // '!'
     && lk != 57                    // 'boolean'
     && lk != 59                    // 'byte'
     && lk != 62                    // 'char'
     && lk != 67                    // 'double'
     && lk != 70                    // 'false'
     && lk != 73                    // 'float'
     && lk != 79                    // 'int'
     && lk != 81                    // 'long'
     && lk != 83                    // 'new'
     && lk != 84                    // 'null'
     && lk != 90                    // 'short'
     && lk != 93                    // 'super'
     && lk != 96                    // 'this'
     && lk != 100                   // 'true'
     && lk != 102                   // 'void'
     && lk != 110)                  // '~'
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_castExpression();
          memoize(12, e0A, -3);
          lk = -5;
        }
        catch (p3A)
        {
          lk = -4;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(12, e0A, -4);
        }
      }
    }
    switch (lk)
    {
    case 110:                       // '~'
      consumeT(110);                // '~'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_unaryExpression();
      break;
    case 14:                        // '!'
      consumeT(14);                 // '!'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_unaryExpression();
      break;
    case -3:
      try_castExpression();
      break;
    case -5:
      break;
    default:
      try_primary();
      for (;;)
      {
        lookahead1W(113);           // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | ')' | '*' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':' |
                                    // ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' |
                                    // '>>>' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||' | '}'
        if (l1 != 32                // '.'
         && l1 != 52)               // '['
        {
          break;
        }
        try_selector();
      }
      if (l1 == 26                  // '++'
       || l1 == 30)                 // '--'
      {
        switch (l1)
        {
        case 26:                    // '++'
          consumeT(26);             // '++'
          break;
        default:
          consumeT(30);             // '--'
        }
      }
    }
  }

  function parse_castExpression()
  {
    eventHandler.startNonterminal("castExpression", e0);
    switch (l1)
    {
    case 21:                        // '('
      lookahead2W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      break;
    default:
      lk = l1;
    }
    if (lk == 7317                  // '(' 'boolean'
     || lk == 7573                  // '(' 'byte'
     || lk == 7957                  // '(' 'char'
     || lk == 8597                  // '(' 'double'
     || lk == 9365                  // '(' 'float'
     || lk == 10133                 // '(' 'int'
     || lk == 10389                 // '(' 'long'
     || lk == 11541)                // '(' 'short'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(21);             // '('
          lookahead1W(68);          // WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' | 'double' | 'float' |
                                    // 'int' | 'long' | 'short'
          try_primitiveType();
          lookahead1W(2);           // WS | COMMENT | LINE_COMMENT | ')'
          consumeT(22);             // ')'
          lookahead1W(89);          // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
          try_unaryExpression();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(13, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      consume(21);                  // '('
      lookahead1W(68);              // WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' | 'double' | 'float' |
                                    // 'int' | 'long' | 'short'
      whitespace();
      parse_primitiveType();
      lookahead1W(2);               // WS | COMMENT | LINE_COMMENT | ')'
      consume(22);                  // ')'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_unaryExpression();
      break;
    default:
      consume(21);                  // '('
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      switch (l1)
      {
      case 9:                       // Identifier
        lookahead2W(106);           // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '*=' | '+' | '++' | '+=' | '-' | '--' | '-=' | '.' | '/' | '/=' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '>>>' | '>>>=' |
                                    // '?' | '[' | '^' | '^=' | 'instanceof' | '|' | '|=' | '||'
        break;
      case 57:                      // 'boolean'
      case 59:                      // 'byte'
      case 62:                      // 'char'
      case 67:                      // 'double'
      case 73:                      // 'float'
      case 79:                      // 'int'
      case 81:                      // 'long'
      case 90:                      // 'short'
        lookahead2W(46);            // WS | COMMENT | LINE_COMMENT | ')' | '.' | '['
        break;
      default:
        lk = l1;
      }
      if (lk == 2825                // Identifier ')'
       || lk == 4105                // Identifier '.'
       || lk == 4873                // Identifier '<'
       || lk == 6665                // Identifier '['
       || lk == 6713                // 'boolean' '['
       || lk == 6715                // 'byte' '['
       || lk == 6718                // 'char' '['
       || lk == 6723                // 'double' '['
       || lk == 6729                // 'float' '['
       || lk == 6735                // 'int' '['
       || lk == 6737                // 'long' '['
       || lk == 6746)               // 'short' '['
      {
        lk = memoized(14, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            try_type();
            lk = -1;
          }
          catch (p1B)
          {
            lk = -2;
          }
          b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
          b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
          b2 = b2B; e2 = e2B; end = e2B; }}
          memoize(14, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
      case 2873:                    // 'boolean' ')'
      case 2875:                    // 'byte' ')'
      case 2878:                    // 'char' ')'
      case 2883:                    // 'double' ')'
      case 2889:                    // 'float' ')'
      case 2895:                    // 'int' ')'
      case 2897:                    // 'long' ')'
      case 2906:                    // 'short' ')'
        whitespace();
        parse_type();
        break;
      default:
        whitespace();
        parse_expression();
      }
      consume(22);                  // ')'
      lookahead1W(82);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | 'boolean' | 'byte' | 'char' | 'double' | 'false' | 'float' | 'int' |
                                    // 'long' | 'new' | 'null' | 'short' | 'super' | 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_unaryExpressionNotPlusMinus();
    }
    eventHandler.endNonterminal("castExpression", e0);
  }

  function try_castExpression()
  {
    switch (l1)
    {
    case 21:                        // '('
      lookahead2W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      break;
    default:
      lk = l1;
    }
    if (lk == 7317                  // '(' 'boolean'
     || lk == 7573                  // '(' 'byte'
     || lk == 7957                  // '(' 'char'
     || lk == 8597                  // '(' 'double'
     || lk == 9365                  // '(' 'float'
     || lk == 10133                 // '(' 'int'
     || lk == 10389                 // '(' 'long'
     || lk == 11541)                // '(' 'short'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(21);             // '('
          lookahead1W(68);          // WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' | 'double' | 'float' |
                                    // 'int' | 'long' | 'short'
          try_primitiveType();
          lookahead1W(2);           // WS | COMMENT | LINE_COMMENT | ')'
          consumeT(22);             // ')'
          lookahead1W(89);          // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
          try_unaryExpression();
          memoize(13, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(13, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(21);                 // '('
      lookahead1W(68);              // WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' | 'double' | 'float' |
                                    // 'int' | 'long' | 'short'
      try_primitiveType();
      lookahead1W(2);               // WS | COMMENT | LINE_COMMENT | ')'
      consumeT(22);                 // ')'
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_unaryExpression();
      break;
    case -3:
      break;
    default:
      consumeT(21);                 // '('
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      switch (l1)
      {
      case 9:                       // Identifier
        lookahead2W(106);           // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '*=' | '+' | '++' | '+=' | '-' | '--' | '-=' | '.' | '/' | '/=' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '>>>' | '>>>=' |
                                    // '?' | '[' | '^' | '^=' | 'instanceof' | '|' | '|=' | '||'
        break;
      case 57:                      // 'boolean'
      case 59:                      // 'byte'
      case 62:                      // 'char'
      case 67:                      // 'double'
      case 73:                      // 'float'
      case 79:                      // 'int'
      case 81:                      // 'long'
      case 90:                      // 'short'
        lookahead2W(46);            // WS | COMMENT | LINE_COMMENT | ')' | '.' | '['
        break;
      default:
        lk = l1;
      }
      if (lk == 2825                // Identifier ')'
       || lk == 4105                // Identifier '.'
       || lk == 4873                // Identifier '<'
       || lk == 6665                // Identifier '['
       || lk == 6713                // 'boolean' '['
       || lk == 6715                // 'byte' '['
       || lk == 6718                // 'char' '['
       || lk == 6723                // 'double' '['
       || lk == 6729                // 'float' '['
       || lk == 6735                // 'int' '['
       || lk == 6737                // 'long' '['
       || lk == 6746)               // 'short' '['
      {
        lk = memoized(14, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            try_type();
            memoize(14, e0B, -1);
            lk = -3;
          }
          catch (p1B)
          {
            lk = -2;
            b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
            b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
            b2 = b2B; e2 = e2B; end = e2B; }}
            memoize(14, e0B, -2);
          }
        }
      }
      switch (lk)
      {
      case -1:
      case 2873:                    // 'boolean' ')'
      case 2875:                    // 'byte' ')'
      case 2878:                    // 'char' ')'
      case 2883:                    // 'double' ')'
      case 2889:                    // 'float' ')'
      case 2895:                    // 'int' ')'
      case 2897:                    // 'long' ')'
      case 2906:                    // 'short' ')'
        try_type();
        break;
      case -3:
        break;
      default:
        try_expression();
      }
      consumeT(22);                 // ')'
      lookahead1W(82);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | 'boolean' | 'byte' | 'char' | 'double' | 'false' | 'float' | 'int' |
                                    // 'long' | 'new' | 'null' | 'short' | 'super' | 'this' | 'true' | 'void' | '~'
      try_unaryExpressionNotPlusMinus();
    }
  }

  function parse_primary()
  {
    eventHandler.startNonterminal("primary", e0);
    switch (l1)
    {
    case 21:                        // '('
      parse_parExpression();
      break;
    case 96:                        // 'this'
      consume(96);                  // 'this'
      for (;;)
      {
        lookahead1W(114);           // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' |
                                    // ':' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' |
                                    // '>>>' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||' | '}'
        switch (l1)
        {
        case 32:                    // '.'
          lookahead2W(67);          // Identifier | WS | COMMENT | LINE_COMMENT | '<' | 'class' | 'new' | 'super' |
                                    // 'this'
          break;
        default:
          lk = l1;
        }
        if (lk == 1184)             // '.' Identifier
        {
          lk = memoized(15, e0);
          if (lk == 0)
          {
            var b0A = b0; var e0A = e0; var l1A = l1;
            var b1A = b1; var e1A = e1; var l2A = l2;
            var b2A = b2; var e2A = e2;
            try
            {
              consumeT(32);         // '.'
              lookahead1W(0);       // Identifier | WS | COMMENT | LINE_COMMENT
              consumeT(9);          // Identifier
              lk = -1;
            }
            catch (p1A)
            {
              lk = -2;
            }
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(15, e0, lk);
          }
        }
        if (lk != -1)
        {
          break;
        }
        consume(32);                // '.'
        lookahead1W(0);             // Identifier | WS | COMMENT | LINE_COMMENT
        consume(9);                 // Identifier
      }
      switch (l1)
      {
      case 32:                      // '.'
        lookahead2W(67);            // Identifier | WS | COMMENT | LINE_COMMENT | '<' | 'class' | 'new' | 'super' |
                                    // 'this'
        break;
      case 52:                      // '['
        lookahead2W(93);            // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | ']' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '~'
        break;
      default:
        lk = l1;
      }
      if (lk == 180                 // '[' HexLiteral
       || lk == 308                 // '[' DecimalLiteral
       || lk == 436                 // '[' OctalLiteral
       || lk == 564                 // '[' FloatingPointLiteral
       || lk == 692                 // '[' CharacterLiteral
       || lk == 820                 // '[' StringLiteral
       || lk == 1204                // '[' Identifier
       || lk == 1844                // '[' '!'
       || lk == 2740                // '[' '('
       || lk == 3252                // '[' '+'
       || lk == 3380                // '[' '++'
       || lk == 3764                // '[' '-'
       || lk == 3892                // '[' '--'
       || lk == 4896                // '.' '<'
       || lk == 7348                // '[' 'boolean'
       || lk == 7604                // '[' 'byte'
       || lk == 7988                // '[' 'char'
       || lk == 8628                // '[' 'double'
       || lk == 9012                // '[' 'false'
       || lk == 9396                // '[' 'float'
       || lk == 10164               // '[' 'int'
       || lk == 10420               // '[' 'long'
       || lk == 10656               // '.' 'new'
       || lk == 10676               // '[' 'new'
       || lk == 10804               // '[' 'null'
       || lk == 11572               // '[' 'short'
       || lk == 11936               // '.' 'super'
       || lk == 11956               // '[' 'super'
       || lk == 12320               // '.' 'this'
       || lk == 12340               // '[' 'this'
       || lk == 12852               // '[' 'true'
       || lk == 13108               // '[' 'void'
       || lk == 14132)              // '[' '~'
      {
        lk = memoized(16, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_identifierSuffix();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(16, e0, lk);
        }
      }
      if (lk == -1
       || lk == 21                  // '('
       || lk == 6836                // '[' ']'
       || lk == 8096)               // '.' 'class'
      {
        whitespace();
        parse_identifierSuffix();
      }
      break;
    case 93:                        // 'super'
      consume(93);                  // 'super'
      lookahead1W(25);              // WS | COMMENT | LINE_COMMENT | '(' | '.'
      whitespace();
      parse_superSuffix();
      break;
    case 83:                        // 'new'
      consume(83);                  // 'new'
      lookahead1W(70);              // Identifier | WS | COMMENT | LINE_COMMENT | '<' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      whitespace();
      parse_creator();
      break;
    case 9:                         // Identifier
      consume(9);                   // Identifier
      for (;;)
      {
        lookahead1W(114);           // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' |
                                    // ':' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' |
                                    // '>>>' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||' | '}'
        switch (l1)
        {
        case 32:                    // '.'
          lookahead2W(67);          // Identifier | WS | COMMENT | LINE_COMMENT | '<' | 'class' | 'new' | 'super' |
                                    // 'this'
          break;
        default:
          lk = l1;
        }
        if (lk == 1184)             // '.' Identifier
        {
          lk = memoized(17, e0);
          if (lk == 0)
          {
            var b0A = b0; var e0A = e0; var l1A = l1;
            var b1A = b1; var e1A = e1; var l2A = l2;
            var b2A = b2; var e2A = e2;
            try
            {
              consumeT(32);         // '.'
              lookahead1W(0);       // Identifier | WS | COMMENT | LINE_COMMENT
              consumeT(9);          // Identifier
              lk = -1;
            }
            catch (p1A)
            {
              lk = -2;
            }
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(17, e0, lk);
          }
        }
        if (lk != -1)
        {
          break;
        }
        consume(32);                // '.'
        lookahead1W(0);             // Identifier | WS | COMMENT | LINE_COMMENT
        consume(9);                 // Identifier
      }
      switch (l1)
      {
      case 32:                      // '.'
        lookahead2W(67);            // Identifier | WS | COMMENT | LINE_COMMENT | '<' | 'class' | 'new' | 'super' |
                                    // 'this'
        break;
      case 52:                      // '['
        lookahead2W(93);            // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | ']' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '~'
        break;
      default:
        lk = l1;
      }
      if (lk == 180                 // '[' HexLiteral
       || lk == 308                 // '[' DecimalLiteral
       || lk == 436                 // '[' OctalLiteral
       || lk == 564                 // '[' FloatingPointLiteral
       || lk == 692                 // '[' CharacterLiteral
       || lk == 820                 // '[' StringLiteral
       || lk == 1204                // '[' Identifier
       || lk == 1844                // '[' '!'
       || lk == 2740                // '[' '('
       || lk == 3252                // '[' '+'
       || lk == 3380                // '[' '++'
       || lk == 3764                // '[' '-'
       || lk == 3892                // '[' '--'
       || lk == 4896                // '.' '<'
       || lk == 7348                // '[' 'boolean'
       || lk == 7604                // '[' 'byte'
       || lk == 7988                // '[' 'char'
       || lk == 8628                // '[' 'double'
       || lk == 9012                // '[' 'false'
       || lk == 9396                // '[' 'float'
       || lk == 10164               // '[' 'int'
       || lk == 10420               // '[' 'long'
       || lk == 10656               // '.' 'new'
       || lk == 10676               // '[' 'new'
       || lk == 10804               // '[' 'null'
       || lk == 11572               // '[' 'short'
       || lk == 11936               // '.' 'super'
       || lk == 11956               // '[' 'super'
       || lk == 12320               // '.' 'this'
       || lk == 12340               // '[' 'this'
       || lk == 12852               // '[' 'true'
       || lk == 13108               // '[' 'void'
       || lk == 14132)              // '[' '~'
      {
        lk = memoized(18, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_identifierSuffix();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(18, e0, lk);
        }
      }
      if (lk == -1
       || lk == 21                  // '('
       || lk == 6836                // '[' ']'
       || lk == 8096)               // '.' 'class'
      {
        whitespace();
        parse_identifierSuffix();
      }
      break;
    case 57:                        // 'boolean'
    case 59:                        // 'byte'
    case 62:                        // 'char'
    case 67:                        // 'double'
    case 73:                        // 'float'
    case 79:                        // 'int'
    case 81:                        // 'long'
    case 90:                        // 'short'
      parse_primitiveType();
      for (;;)
      {
        lookahead1W(31);            // WS | COMMENT | LINE_COMMENT | '.' | '['
        if (l1 != 52)               // '['
        {
          break;
        }
        consume(52);                // '['
        lookahead1W(10);            // WS | COMMENT | LINE_COMMENT | ']'
        consume(53);                // ']'
      }
      consume(32);                  // '.'
      lookahead1W(11);              // WS | COMMENT | LINE_COMMENT | 'class'
      consume(63);                  // 'class'
      break;
    case 102:                       // 'void'
      consume(102);                 // 'void'
      lookahead1W(4);               // WS | COMMENT | LINE_COMMENT | '.'
      consume(32);                  // '.'
      lookahead1W(11);              // WS | COMMENT | LINE_COMMENT | 'class'
      consume(63);                  // 'class'
      break;
    default:
      parse_literal();
    }
    eventHandler.endNonterminal("primary", e0);
  }

  function try_primary()
  {
    switch (l1)
    {
    case 21:                        // '('
      try_parExpression();
      break;
    case 96:                        // 'this'
      consumeT(96);                 // 'this'
      for (;;)
      {
        lookahead1W(114);           // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' |
                                    // ':' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' |
                                    // '>>>' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||' | '}'
        switch (l1)
        {
        case 32:                    // '.'
          lookahead2W(67);          // Identifier | WS | COMMENT | LINE_COMMENT | '<' | 'class' | 'new' | 'super' |
                                    // 'this'
          break;
        default:
          lk = l1;
        }
        if (lk == 1184)             // '.' Identifier
        {
          lk = memoized(15, e0);
          if (lk == 0)
          {
            var b0A = b0; var e0A = e0; var l1A = l1;
            var b1A = b1; var e1A = e1; var l2A = l2;
            var b2A = b2; var e2A = e2;
            try
            {
              consumeT(32);         // '.'
              lookahead1W(0);       // Identifier | WS | COMMENT | LINE_COMMENT
              consumeT(9);          // Identifier
              memoize(15, e0A, -1);
              continue;
            }
            catch (p1A)
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              memoize(15, e0A, -2);
              break;
            }
          }
        }
        if (lk != -1)
        {
          break;
        }
        consumeT(32);               // '.'
        lookahead1W(0);             // Identifier | WS | COMMENT | LINE_COMMENT
        consumeT(9);                // Identifier
      }
      switch (l1)
      {
      case 32:                      // '.'
        lookahead2W(67);            // Identifier | WS | COMMENT | LINE_COMMENT | '<' | 'class' | 'new' | 'super' |
                                    // 'this'
        break;
      case 52:                      // '['
        lookahead2W(93);            // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | ']' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '~'
        break;
      default:
        lk = l1;
      }
      if (lk == 180                 // '[' HexLiteral
       || lk == 308                 // '[' DecimalLiteral
       || lk == 436                 // '[' OctalLiteral
       || lk == 564                 // '[' FloatingPointLiteral
       || lk == 692                 // '[' CharacterLiteral
       || lk == 820                 // '[' StringLiteral
       || lk == 1204                // '[' Identifier
       || lk == 1844                // '[' '!'
       || lk == 2740                // '[' '('
       || lk == 3252                // '[' '+'
       || lk == 3380                // '[' '++'
       || lk == 3764                // '[' '-'
       || lk == 3892                // '[' '--'
       || lk == 4896                // '.' '<'
       || lk == 7348                // '[' 'boolean'
       || lk == 7604                // '[' 'byte'
       || lk == 7988                // '[' 'char'
       || lk == 8628                // '[' 'double'
       || lk == 9012                // '[' 'false'
       || lk == 9396                // '[' 'float'
       || lk == 10164               // '[' 'int'
       || lk == 10420               // '[' 'long'
       || lk == 10656               // '.' 'new'
       || lk == 10676               // '[' 'new'
       || lk == 10804               // '[' 'null'
       || lk == 11572               // '[' 'short'
       || lk == 11936               // '.' 'super'
       || lk == 11956               // '[' 'super'
       || lk == 12320               // '.' 'this'
       || lk == 12340               // '[' 'this'
       || lk == 12852               // '[' 'true'
       || lk == 13108               // '[' 'void'
       || lk == 14132)              // '[' '~'
      {
        lk = memoized(16, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_identifierSuffix();
            memoize(16, e0A, -1);
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(16, e0A, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1
       || lk == 21                  // '('
       || lk == 6836                // '[' ']'
       || lk == 8096)               // '.' 'class'
      {
        try_identifierSuffix();
      }
      break;
    case 93:                        // 'super'
      consumeT(93);                 // 'super'
      lookahead1W(25);              // WS | COMMENT | LINE_COMMENT | '(' | '.'
      try_superSuffix();
      break;
    case 83:                        // 'new'
      consumeT(83);                 // 'new'
      lookahead1W(70);              // Identifier | WS | COMMENT | LINE_COMMENT | '<' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      try_creator();
      break;
    case 9:                         // Identifier
      consumeT(9);                  // Identifier
      for (;;)
      {
        lookahead1W(114);           // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' |
                                    // ':' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' |
                                    // '>>>' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||' | '}'
        switch (l1)
        {
        case 32:                    // '.'
          lookahead2W(67);          // Identifier | WS | COMMENT | LINE_COMMENT | '<' | 'class' | 'new' | 'super' |
                                    // 'this'
          break;
        default:
          lk = l1;
        }
        if (lk == 1184)             // '.' Identifier
        {
          lk = memoized(17, e0);
          if (lk == 0)
          {
            var b0A = b0; var e0A = e0; var l1A = l1;
            var b1A = b1; var e1A = e1; var l2A = l2;
            var b2A = b2; var e2A = e2;
            try
            {
              consumeT(32);         // '.'
              lookahead1W(0);       // Identifier | WS | COMMENT | LINE_COMMENT
              consumeT(9);          // Identifier
              memoize(17, e0A, -1);
              continue;
            }
            catch (p1A)
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              memoize(17, e0A, -2);
              break;
            }
          }
        }
        if (lk != -1)
        {
          break;
        }
        consumeT(32);               // '.'
        lookahead1W(0);             // Identifier | WS | COMMENT | LINE_COMMENT
        consumeT(9);                // Identifier
      }
      switch (l1)
      {
      case 32:                      // '.'
        lookahead2W(67);            // Identifier | WS | COMMENT | LINE_COMMENT | '<' | 'class' | 'new' | 'super' |
                                    // 'this'
        break;
      case 52:                      // '['
        lookahead2W(93);            // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | ']' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '~'
        break;
      default:
        lk = l1;
      }
      if (lk == 180                 // '[' HexLiteral
       || lk == 308                 // '[' DecimalLiteral
       || lk == 436                 // '[' OctalLiteral
       || lk == 564                 // '[' FloatingPointLiteral
       || lk == 692                 // '[' CharacterLiteral
       || lk == 820                 // '[' StringLiteral
       || lk == 1204                // '[' Identifier
       || lk == 1844                // '[' '!'
       || lk == 2740                // '[' '('
       || lk == 3252                // '[' '+'
       || lk == 3380                // '[' '++'
       || lk == 3764                // '[' '-'
       || lk == 3892                // '[' '--'
       || lk == 4896                // '.' '<'
       || lk == 7348                // '[' 'boolean'
       || lk == 7604                // '[' 'byte'
       || lk == 7988                // '[' 'char'
       || lk == 8628                // '[' 'double'
       || lk == 9012                // '[' 'false'
       || lk == 9396                // '[' 'float'
       || lk == 10164               // '[' 'int'
       || lk == 10420               // '[' 'long'
       || lk == 10656               // '.' 'new'
       || lk == 10676               // '[' 'new'
       || lk == 10804               // '[' 'null'
       || lk == 11572               // '[' 'short'
       || lk == 11936               // '.' 'super'
       || lk == 11956               // '[' 'super'
       || lk == 12320               // '.' 'this'
       || lk == 12340               // '[' 'this'
       || lk == 12852               // '[' 'true'
       || lk == 13108               // '[' 'void'
       || lk == 14132)              // '[' '~'
      {
        lk = memoized(18, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_identifierSuffix();
            memoize(18, e0A, -1);
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(18, e0A, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1
       || lk == 21                  // '('
       || lk == 6836                // '[' ']'
       || lk == 8096)               // '.' 'class'
      {
        try_identifierSuffix();
      }
      break;
    case 57:                        // 'boolean'
    case 59:                        // 'byte'
    case 62:                        // 'char'
    case 67:                        // 'double'
    case 73:                        // 'float'
    case 79:                        // 'int'
    case 81:                        // 'long'
    case 90:                        // 'short'
      try_primitiveType();
      for (;;)
      {
        lookahead1W(31);            // WS | COMMENT | LINE_COMMENT | '.' | '['
        if (l1 != 52)               // '['
        {
          break;
        }
        consumeT(52);               // '['
        lookahead1W(10);            // WS | COMMENT | LINE_COMMENT | ']'
        consumeT(53);               // ']'
      }
      consumeT(32);                 // '.'
      lookahead1W(11);              // WS | COMMENT | LINE_COMMENT | 'class'
      consumeT(63);                 // 'class'
      break;
    case 102:                       // 'void'
      consumeT(102);                // 'void'
      lookahead1W(4);               // WS | COMMENT | LINE_COMMENT | '.'
      consumeT(32);                 // '.'
      lookahead1W(11);              // WS | COMMENT | LINE_COMMENT | 'class'
      consumeT(63);                 // 'class'
      break;
    default:
      try_literal();
    }
  }

  function parse_identifierSuffix()
  {
    eventHandler.startNonterminal("identifierSuffix", e0);
    switch (l1)
    {
    case 32:                        // '.'
      lookahead2W(66);              // WS | COMMENT | LINE_COMMENT | '<' | 'class' | 'new' | 'super' | 'this'
      break;
    case 52:                        // '['
      lookahead2W(93);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | ']' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '~'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 6836:                      // '[' ']'
      for (;;)
      {
        consume(52);                // '['
        lookahead1W(10);            // WS | COMMENT | LINE_COMMENT | ']'
        consume(53);                // ']'
        lookahead1W(31);            // WS | COMMENT | LINE_COMMENT | '.' | '['
        if (l1 != 52)               // '['
        {
          break;
        }
      }
      consume(32);                  // '.'
      lookahead1W(11);              // WS | COMMENT | LINE_COMMENT | 'class'
      consume(63);                  // 'class'
      break;
    case 21:                        // '('
      parse_arguments();
      break;
    case 8096:                      // '.' 'class'
      consume(32);                  // '.'
      lookahead1W(11);              // WS | COMMENT | LINE_COMMENT | 'class'
      consume(63);                  // 'class'
      break;
    case 4896:                      // '.' '<'
      consume(32);                  // '.'
      lookahead1W(7);               // WS | COMMENT | LINE_COMMENT | '<'
      whitespace();
      parse_explicitGenericInvocation();
      break;
    case 12320:                     // '.' 'this'
      consume(32);                  // '.'
      lookahead1W(15);              // WS | COMMENT | LINE_COMMENT | 'this'
      consume(96);                  // 'this'
      break;
    case 11936:                     // '.' 'super'
      consume(32);                  // '.'
      lookahead1W(14);              // WS | COMMENT | LINE_COMMENT | 'super'
      consume(93);                  // 'super'
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      whitespace();
      parse_arguments();
      break;
    case 10656:                     // '.' 'new'
      consume(32);                  // '.'
      lookahead1W(13);              // WS | COMMENT | LINE_COMMENT | 'new'
      consume(83);                  // 'new'
      lookahead1W(21);              // Identifier | WS | COMMENT | LINE_COMMENT | '<'
      whitespace();
      parse_innerCreator();
      break;
    default:
      for (;;)
      {
        consume(52);                // '['
        lookahead1W(89);            // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
        whitespace();
        parse_expression();
        consume(53);                // ']'
        lookahead1W(113);           // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | ')' | '*' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':' |
                                    // ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' |
                                    // '>>>' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||' | '}'
        switch (l1)
        {
        case 52:                    // '['
          lookahead2W(89);          // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
          break;
        default:
          lk = l1;
        }
        if (lk == 180               // '[' HexLiteral
         || lk == 308               // '[' DecimalLiteral
         || lk == 436               // '[' OctalLiteral
         || lk == 564               // '[' FloatingPointLiteral
         || lk == 692               // '[' CharacterLiteral
         || lk == 820               // '[' StringLiteral
         || lk == 1204              // '[' Identifier
         || lk == 1844              // '[' '!'
         || lk == 2740              // '[' '('
         || lk == 3252              // '[' '+'
         || lk == 3380              // '[' '++'
         || lk == 3764              // '[' '-'
         || lk == 3892              // '[' '--'
         || lk == 7348              // '[' 'boolean'
         || lk == 7604              // '[' 'byte'
         || lk == 7988              // '[' 'char'
         || lk == 8628              // '[' 'double'
         || lk == 9012              // '[' 'false'
         || lk == 9396              // '[' 'float'
         || lk == 10164             // '[' 'int'
         || lk == 10420             // '[' 'long'
         || lk == 10676             // '[' 'new'
         || lk == 10804             // '[' 'null'
         || lk == 11572             // '[' 'short'
         || lk == 11956             // '[' 'super'
         || lk == 12340             // '[' 'this'
         || lk == 12852             // '[' 'true'
         || lk == 13108             // '[' 'void'
         || lk == 14132)            // '[' '~'
        {
          lk = memoized(19, e0);
          if (lk == 0)
          {
            var b0A = b0; var e0A = e0; var l1A = l1;
            var b1A = b1; var e1A = e1; var l2A = l2;
            var b2A = b2; var e2A = e2;
            try
            {
              consumeT(52);         // '['
              lookahead1W(89);      // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
              try_expression();
              consumeT(53);         // ']'
              lk = -1;
            }
            catch (p1A)
            {
              lk = -2;
            }
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(19, e0, lk);
          }
        }
        if (lk != -1)
        {
          break;
        }
      }
    }
    eventHandler.endNonterminal("identifierSuffix", e0);
  }

  function try_identifierSuffix()
  {
    switch (l1)
    {
    case 32:                        // '.'
      lookahead2W(66);              // WS | COMMENT | LINE_COMMENT | '<' | 'class' | 'new' | 'super' | 'this'
      break;
    case 52:                        // '['
      lookahead2W(93);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | ']' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '~'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 6836:                      // '[' ']'
      for (;;)
      {
        consumeT(52);               // '['
        lookahead1W(10);            // WS | COMMENT | LINE_COMMENT | ']'
        consumeT(53);               // ']'
        lookahead1W(31);            // WS | COMMENT | LINE_COMMENT | '.' | '['
        if (l1 != 52)               // '['
        {
          break;
        }
      }
      consumeT(32);                 // '.'
      lookahead1W(11);              // WS | COMMENT | LINE_COMMENT | 'class'
      consumeT(63);                 // 'class'
      break;
    case 21:                        // '('
      try_arguments();
      break;
    case 8096:                      // '.' 'class'
      consumeT(32);                 // '.'
      lookahead1W(11);              // WS | COMMENT | LINE_COMMENT | 'class'
      consumeT(63);                 // 'class'
      break;
    case 4896:                      // '.' '<'
      consumeT(32);                 // '.'
      lookahead1W(7);               // WS | COMMENT | LINE_COMMENT | '<'
      try_explicitGenericInvocation();
      break;
    case 12320:                     // '.' 'this'
      consumeT(32);                 // '.'
      lookahead1W(15);              // WS | COMMENT | LINE_COMMENT | 'this'
      consumeT(96);                 // 'this'
      break;
    case 11936:                     // '.' 'super'
      consumeT(32);                 // '.'
      lookahead1W(14);              // WS | COMMENT | LINE_COMMENT | 'super'
      consumeT(93);                 // 'super'
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      try_arguments();
      break;
    case 10656:                     // '.' 'new'
      consumeT(32);                 // '.'
      lookahead1W(13);              // WS | COMMENT | LINE_COMMENT | 'new'
      consumeT(83);                 // 'new'
      lookahead1W(21);              // Identifier | WS | COMMENT | LINE_COMMENT | '<'
      try_innerCreator();
      break;
    default:
      consumeT(52);                 // '['
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_expression();
      consumeT(53);                 // ']'
      for (;;)
      {
        lookahead1W(113);           // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | ')' | '*' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':' |
                                    // ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' |
                                    // '>>>' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||' | '}'
        switch (l1)
        {
        case 52:                    // '['
          lookahead2W(89);          // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
          break;
        default:
          lk = l1;
        }
        if (lk == 180               // '[' HexLiteral
         || lk == 308               // '[' DecimalLiteral
         || lk == 436               // '[' OctalLiteral
         || lk == 564               // '[' FloatingPointLiteral
         || lk == 692               // '[' CharacterLiteral
         || lk == 820               // '[' StringLiteral
         || lk == 1204              // '[' Identifier
         || lk == 1844              // '[' '!'
         || lk == 2740              // '[' '('
         || lk == 3252              // '[' '+'
         || lk == 3380              // '[' '++'
         || lk == 3764              // '[' '-'
         || lk == 3892              // '[' '--'
         || lk == 7348              // '[' 'boolean'
         || lk == 7604              // '[' 'byte'
         || lk == 7988              // '[' 'char'
         || lk == 8628              // '[' 'double'
         || lk == 9012              // '[' 'false'
         || lk == 9396              // '[' 'float'
         || lk == 10164             // '[' 'int'
         || lk == 10420             // '[' 'long'
         || lk == 10676             // '[' 'new'
         || lk == 10804             // '[' 'null'
         || lk == 11572             // '[' 'short'
         || lk == 11956             // '[' 'super'
         || lk == 12340             // '[' 'this'
         || lk == 12852             // '[' 'true'
         || lk == 13108             // '[' 'void'
         || lk == 14132)            // '[' '~'
        {
          lk = memoized(19, e0);
          if (lk == 0)
          {
            var b0A = b0; var e0A = e0; var l1A = l1;
            var b1A = b1; var e1A = e1; var l2A = l2;
            var b2A = b2; var e2A = e2;
            try
            {
              consumeT(52);         // '['
              lookahead1W(89);      // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
              try_expression();
              consumeT(53);         // ']'
              memoize(19, e0A, -1);
              continue;
            }
            catch (p1A)
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              memoize(19, e0A, -2);
              break;
            }
          }
        }
        if (lk != -1)
        {
          break;
        }
        consumeT(52);               // '['
        lookahead1W(89);            // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
        try_expression();
        consumeT(53);               // ']'
      }
    }
  }

  function parse_creator()
  {
    eventHandler.startNonterminal("creator", e0);
    switch (l1)
    {
    case 38:                        // '<'
      parse_nonWildcardTypeArguments();
      lookahead1W(69);              // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      whitespace();
      parse_createdName();
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      whitespace();
      parse_classCreatorRest();
      break;
    default:
      parse_createdName();
      lookahead1W(27);              // WS | COMMENT | LINE_COMMENT | '(' | '['
      switch (l1)
      {
      case 52:                      // '['
        whitespace();
        parse_arrayCreatorRest();
        break;
      default:
        whitespace();
        parse_classCreatorRest();
      }
    }
    eventHandler.endNonterminal("creator", e0);
  }

  function try_creator()
  {
    switch (l1)
    {
    case 38:                        // '<'
      try_nonWildcardTypeArguments();
      lookahead1W(69);              // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      try_createdName();
      lookahead1W(1);               // WS | COMMENT | LINE_COMMENT | '('
      try_classCreatorRest();
      break;
    default:
      try_createdName();
      lookahead1W(27);              // WS | COMMENT | LINE_COMMENT | '(' | '['
      switch (l1)
      {
      case 52:                      // '['
        try_arrayCreatorRest();
        break;
      default:
        try_classCreatorRest();
      }
    }
  }

  function parse_createdName()
  {
    eventHandler.startNonterminal("createdName", e0);
    switch (l1)
    {
    case 9:                         // Identifier
      parse_classOrInterfaceType();
      break;
    default:
      parse_primitiveType();
    }
    eventHandler.endNonterminal("createdName", e0);
  }

  function try_createdName()
  {
    switch (l1)
    {
    case 9:                         // Identifier
      try_classOrInterfaceType();
      break;
    default:
      try_primitiveType();
    }
  }

  function parse_innerCreator()
  {
    eventHandler.startNonterminal("innerCreator", e0);
    if (l1 == 38)                   // '<'
    {
      whitespace();
      parse_nonWildcardTypeArguments();
    }
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    consume(9);                     // Identifier
    lookahead1W(26);                // WS | COMMENT | LINE_COMMENT | '(' | '<'
    if (l1 == 38)                   // '<'
    {
      whitespace();
      parse_nonWildcardTypeArgumentsOrDiamond();
    }
    lookahead1W(1);                 // WS | COMMENT | LINE_COMMENT | '('
    whitespace();
    parse_classCreatorRest();
    eventHandler.endNonterminal("innerCreator", e0);
  }

  function try_innerCreator()
  {
    if (l1 == 38)                   // '<'
    {
      try_nonWildcardTypeArguments();
    }
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    consumeT(9);                    // Identifier
    lookahead1W(26);                // WS | COMMENT | LINE_COMMENT | '(' | '<'
    if (l1 == 38)                   // '<'
    {
      try_nonWildcardTypeArgumentsOrDiamond();
    }
    lookahead1W(1);                 // WS | COMMENT | LINE_COMMENT | '('
    try_classCreatorRest();
  }

  function parse_nonWildcardTypeArgumentsOrDiamond()
  {
    eventHandler.startNonterminal("nonWildcardTypeArgumentsOrDiamond", e0);
    switch (l1)
    {
    case 38:                        // '<'
      lookahead2W(71);              // Identifier | WS | COMMENT | LINE_COMMENT | '>' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 5670:                      // '<' '>'
      consume(38);                  // '<'
      lookahead1W(9);               // WS | COMMENT | LINE_COMMENT | '>'
      consume(44);                  // '>'
      break;
    default:
      parse_nonWildcardTypeArguments();
    }
    eventHandler.endNonterminal("nonWildcardTypeArgumentsOrDiamond", e0);
  }

  function try_nonWildcardTypeArgumentsOrDiamond()
  {
    switch (l1)
    {
    case 38:                        // '<'
      lookahead2W(71);              // Identifier | WS | COMMENT | LINE_COMMENT | '>' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 5670:                      // '<' '>'
      consumeT(38);                 // '<'
      lookahead1W(9);               // WS | COMMENT | LINE_COMMENT | '>'
      consumeT(44);                 // '>'
      break;
    default:
      try_nonWildcardTypeArguments();
    }
  }

  function parse_arrayCreatorRest()
  {
    eventHandler.startNonterminal("arrayCreatorRest", e0);
    consume(52);                    // '['
    lookahead1W(93);                // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | ']' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '~'
    switch (l1)
    {
    case 53:                        // ']'
      consume(53);                  // ']'
      for (;;)
      {
        lookahead1W(37);            // WS | COMMENT | LINE_COMMENT | '[' | '{'
        if (l1 != 52)               // '['
        {
          break;
        }
        consume(52);                // '['
        lookahead1W(10);            // WS | COMMENT | LINE_COMMENT | ']'
        consume(53);                // ']'
      }
      whitespace();
      parse_arrayInitializer();
      break;
    default:
      whitespace();
      parse_expression();
      consume(53);                  // ']'
      for (;;)
      {
        lookahead1W(113);           // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | ')' | '*' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':' |
                                    // ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' |
                                    // '>>>' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||' | '}'
        switch (l1)
        {
        case 52:                    // '['
          lookahead2W(93);          // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | ']' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '~'
          break;
        default:
          lk = l1;
        }
        if (lk == 180               // '[' HexLiteral
         || lk == 308               // '[' DecimalLiteral
         || lk == 436               // '[' OctalLiteral
         || lk == 564               // '[' FloatingPointLiteral
         || lk == 692               // '[' CharacterLiteral
         || lk == 820               // '[' StringLiteral
         || lk == 1204              // '[' Identifier
         || lk == 1844              // '[' '!'
         || lk == 2740              // '[' '('
         || lk == 3252              // '[' '+'
         || lk == 3380              // '[' '++'
         || lk == 3764              // '[' '-'
         || lk == 3892              // '[' '--'
         || lk == 7348              // '[' 'boolean'
         || lk == 7604              // '[' 'byte'
         || lk == 7988              // '[' 'char'
         || lk == 8628              // '[' 'double'
         || lk == 9012              // '[' 'false'
         || lk == 9396              // '[' 'float'
         || lk == 10164             // '[' 'int'
         || lk == 10420             // '[' 'long'
         || lk == 10676             // '[' 'new'
         || lk == 10804             // '[' 'null'
         || lk == 11572             // '[' 'short'
         || lk == 11956             // '[' 'super'
         || lk == 12340             // '[' 'this'
         || lk == 12852             // '[' 'true'
         || lk == 13108             // '[' 'void'
         || lk == 14132)            // '[' '~'
        {
          lk = memoized(20, e0);
          if (lk == 0)
          {
            var b0A = b0; var e0A = e0; var l1A = l1;
            var b1A = b1; var e1A = e1; var l2A = l2;
            var b2A = b2; var e2A = e2;
            try
            {
              consumeT(52);         // '['
              lookahead1W(89);      // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
              try_expression();
              consumeT(53);         // ']'
              lk = -1;
            }
            catch (p1A)
            {
              lk = -2;
            }
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(20, e0, lk);
          }
        }
        if (lk != -1)
        {
          break;
        }
        consume(52);                // '['
        lookahead1W(89);            // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
        whitespace();
        parse_expression();
        consume(53);                // ']'
      }
      for (;;)
      {
        lookahead1W(113);           // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | ')' | '*' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':' |
                                    // ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' |
                                    // '>>>' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||' | '}'
        switch (l1)
        {
        case 52:                    // '['
          lookahead2W(93);          // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | ']' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '~'
          break;
        default:
          lk = l1;
        }
        if (lk != 6836)             // '[' ']'
        {
          break;
        }
        consume(52);                // '['
        lookahead1W(10);            // WS | COMMENT | LINE_COMMENT | ']'
        consume(53);                // ']'
      }
    }
    eventHandler.endNonterminal("arrayCreatorRest", e0);
  }

  function try_arrayCreatorRest()
  {
    consumeT(52);                   // '['
    lookahead1W(93);                // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | ']' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '~'
    switch (l1)
    {
    case 53:                        // ']'
      consumeT(53);                 // ']'
      for (;;)
      {
        lookahead1W(37);            // WS | COMMENT | LINE_COMMENT | '[' | '{'
        if (l1 != 52)               // '['
        {
          break;
        }
        consumeT(52);               // '['
        lookahead1W(10);            // WS | COMMENT | LINE_COMMENT | ']'
        consumeT(53);               // ']'
      }
      try_arrayInitializer();
      break;
    default:
      try_expression();
      consumeT(53);                 // ']'
      for (;;)
      {
        lookahead1W(113);           // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | ')' | '*' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':' |
                                    // ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' |
                                    // '>>>' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||' | '}'
        switch (l1)
        {
        case 52:                    // '['
          lookahead2W(93);          // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | ']' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '~'
          break;
        default:
          lk = l1;
        }
        if (lk == 180               // '[' HexLiteral
         || lk == 308               // '[' DecimalLiteral
         || lk == 436               // '[' OctalLiteral
         || lk == 564               // '[' FloatingPointLiteral
         || lk == 692               // '[' CharacterLiteral
         || lk == 820               // '[' StringLiteral
         || lk == 1204              // '[' Identifier
         || lk == 1844              // '[' '!'
         || lk == 2740              // '[' '('
         || lk == 3252              // '[' '+'
         || lk == 3380              // '[' '++'
         || lk == 3764              // '[' '-'
         || lk == 3892              // '[' '--'
         || lk == 7348              // '[' 'boolean'
         || lk == 7604              // '[' 'byte'
         || lk == 7988              // '[' 'char'
         || lk == 8628              // '[' 'double'
         || lk == 9012              // '[' 'false'
         || lk == 9396              // '[' 'float'
         || lk == 10164             // '[' 'int'
         || lk == 10420             // '[' 'long'
         || lk == 10676             // '[' 'new'
         || lk == 10804             // '[' 'null'
         || lk == 11572             // '[' 'short'
         || lk == 11956             // '[' 'super'
         || lk == 12340             // '[' 'this'
         || lk == 12852             // '[' 'true'
         || lk == 13108             // '[' 'void'
         || lk == 14132)            // '[' '~'
        {
          lk = memoized(20, e0);
          if (lk == 0)
          {
            var b0A = b0; var e0A = e0; var l1A = l1;
            var b1A = b1; var e1A = e1; var l2A = l2;
            var b2A = b2; var e2A = e2;
            try
            {
              consumeT(52);         // '['
              lookahead1W(89);      // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
              try_expression();
              consumeT(53);         // ']'
              memoize(20, e0A, -1);
              continue;
            }
            catch (p1A)
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              memoize(20, e0A, -2);
              break;
            }
          }
        }
        if (lk != -1)
        {
          break;
        }
        consumeT(52);               // '['
        lookahead1W(89);            // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
        try_expression();
        consumeT(53);               // ']'
      }
      for (;;)
      {
        lookahead1W(113);           // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | ')' | '*' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':' |
                                    // ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' |
                                    // '>>>' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||' | '}'
        switch (l1)
        {
        case 52:                    // '['
          lookahead2W(93);          // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | ']' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '~'
          break;
        default:
          lk = l1;
        }
        if (lk != 6836)             // '[' ']'
        {
          break;
        }
        consumeT(52);               // '['
        lookahead1W(10);            // WS | COMMENT | LINE_COMMENT | ']'
        consumeT(53);               // ']'
      }
    }
  }

  function parse_classCreatorRest()
  {
    eventHandler.startNonterminal("classCreatorRest", e0);
    parse_arguments();
    lookahead1W(115);               // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | ')' | '*' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':' |
                                    // ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' |
                                    // '>>>' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'instanceof' | '{' | '|' | '|=' |
                                    // '||' | '}'
    if (l1 == 105)                  // '{'
    {
      whitespace();
      parse_classBody();
    }
    eventHandler.endNonterminal("classCreatorRest", e0);
  }

  function try_classCreatorRest()
  {
    try_arguments();
    lookahead1W(115);               // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | ')' | '*' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':' |
                                    // ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' |
                                    // '>>>' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'instanceof' | '{' | '|' | '|=' |
                                    // '||' | '}'
    if (l1 == 105)                  // '{'
    {
      try_classBody();
    }
  }

  function parse_explicitGenericInvocation()
  {
    eventHandler.startNonterminal("explicitGenericInvocation", e0);
    parse_nonWildcardTypeArguments();
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    consume(9);                     // Identifier
    lookahead1W(1);                 // WS | COMMENT | LINE_COMMENT | '('
    whitespace();
    parse_arguments();
    eventHandler.endNonterminal("explicitGenericInvocation", e0);
  }

  function try_explicitGenericInvocation()
  {
    try_nonWildcardTypeArguments();
    lookahead1W(0);                 // Identifier | WS | COMMENT | LINE_COMMENT
    consumeT(9);                    // Identifier
    lookahead1W(1);                 // WS | COMMENT | LINE_COMMENT | '('
    try_arguments();
  }

  function parse_nonWildcardTypeArguments()
  {
    eventHandler.startNonterminal("nonWildcardTypeArguments", e0);
    consume(38);                    // '<'
    lookahead1W(69);                // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
    whitespace();
    parse_typeList();
    consume(44);                    // '>'
    eventHandler.endNonterminal("nonWildcardTypeArguments", e0);
  }

  function try_nonWildcardTypeArguments()
  {
    consumeT(38);                   // '<'
    lookahead1W(69);                // Identifier | WS | COMMENT | LINE_COMMENT | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'float' | 'int' | 'long' | 'short'
    try_typeList();
    consumeT(44);                   // '>'
  }

  function parse_selector()
  {
    eventHandler.startNonterminal("selector", e0);
    switch (l1)
    {
    case 32:                        // '.'
      lookahead2W(55);              // Identifier | WS | COMMENT | LINE_COMMENT | 'new' | 'super' | 'this'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1184:                      // '.' Identifier
      consume(32);                  // '.'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      consume(9);                   // Identifier
      lookahead1W(114);             // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' |
                                    // ':' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' |
                                    // '>>>' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||' | '}'
      if (l1 == 21)                 // '('
      {
        whitespace();
        parse_arguments();
      }
      break;
    case 12320:                     // '.' 'this'
      consume(32);                  // '.'
      lookahead1W(15);              // WS | COMMENT | LINE_COMMENT | 'this'
      consume(96);                  // 'this'
      break;
    case 11936:                     // '.' 'super'
      consume(32);                  // '.'
      lookahead1W(14);              // WS | COMMENT | LINE_COMMENT | 'super'
      consume(93);                  // 'super'
      lookahead1W(25);              // WS | COMMENT | LINE_COMMENT | '(' | '.'
      whitespace();
      parse_superSuffix();
      break;
    case 10656:                     // '.' 'new'
      consume(32);                  // '.'
      lookahead1W(13);              // WS | COMMENT | LINE_COMMENT | 'new'
      consume(83);                  // 'new'
      lookahead1W(21);              // Identifier | WS | COMMENT | LINE_COMMENT | '<'
      whitespace();
      parse_innerCreator();
      break;
    default:
      consume(52);                  // '['
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      whitespace();
      parse_expression();
      consume(53);                  // ']'
    }
    eventHandler.endNonterminal("selector", e0);
  }

  function try_selector()
  {
    switch (l1)
    {
    case 32:                        // '.'
      lookahead2W(55);              // Identifier | WS | COMMENT | LINE_COMMENT | 'new' | 'super' | 'this'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1184:                      // '.' Identifier
      consumeT(32);                 // '.'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      consumeT(9);                  // Identifier
      lookahead1W(114);             // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' |
                                    // ':' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' |
                                    // '>>>' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||' | '}'
      if (l1 == 21)                 // '('
      {
        try_arguments();
      }
      break;
    case 12320:                     // '.' 'this'
      consumeT(32);                 // '.'
      lookahead1W(15);              // WS | COMMENT | LINE_COMMENT | 'this'
      consumeT(96);                 // 'this'
      break;
    case 11936:                     // '.' 'super'
      consumeT(32);                 // '.'
      lookahead1W(14);              // WS | COMMENT | LINE_COMMENT | 'super'
      consumeT(93);                 // 'super'
      lookahead1W(25);              // WS | COMMENT | LINE_COMMENT | '(' | '.'
      try_superSuffix();
      break;
    case 10656:                     // '.' 'new'
      consumeT(32);                 // '.'
      lookahead1W(13);              // WS | COMMENT | LINE_COMMENT | 'new'
      consumeT(83);                 // 'new'
      lookahead1W(21);              // Identifier | WS | COMMENT | LINE_COMMENT | '<'
      try_innerCreator();
      break;
    default:
      consumeT(52);                 // '['
      lookahead1W(89);              // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' | 'double' |
                                    // 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' | 'super' |
                                    // 'this' | 'true' | 'void' | '~'
      try_expression();
      consumeT(53);                 // ']'
    }
  }

  function parse_superSuffix()
  {
    eventHandler.startNonterminal("superSuffix", e0);
    switch (l1)
    {
    case 21:                        // '('
      parse_arguments();
      break;
    default:
      consume(32);                  // '.'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      consume(9);                   // Identifier
      lookahead1W(114);             // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' |
                                    // ':' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' |
                                    // '>>>' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||' | '}'
      if (l1 == 21)                 // '('
      {
        whitespace();
        parse_arguments();
      }
    }
    eventHandler.endNonterminal("superSuffix", e0);
  }

  function try_superSuffix()
  {
    switch (l1)
    {
    case 21:                        // '('
      try_arguments();
      break;
    default:
      consumeT(32);                 // '.'
      lookahead1W(0);               // Identifier | WS | COMMENT | LINE_COMMENT
      consumeT(9);                  // Identifier
      lookahead1W(114);             // WS | COMMENT | LINE_COMMENT | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' |
                                    // ':' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' |
                                    // '>>>' | '>>>=' | '?' | '[' | ']' | '^' | '^=' | 'instanceof' | '|' | '|=' |
                                    // '||' | '}'
      if (l1 == 21)                 // '('
      {
        try_arguments();
      }
    }
  }

  function parse_arguments()
  {
    eventHandler.startNonterminal("arguments", e0);
    consume(21);                    // '('
    lookahead1W(91);                // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | ')' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '~'
    if (l1 != 22)                   // ')'
    {
      whitespace();
      parse_expressionList();
    }
    consume(22);                    // ')'
    eventHandler.endNonterminal("arguments", e0);
  }

  function try_arguments()
  {
    consumeT(21);                   // '('
    lookahead1W(91);                // HexLiteral | DecimalLiteral | OctalLiteral | FloatingPointLiteral |
                                    // CharacterLiteral | StringLiteral | Identifier | WS | COMMENT | LINE_COMMENT |
                                    // '!' | '(' | ')' | '+' | '++' | '-' | '--' | 'boolean' | 'byte' | 'char' |
                                    // 'double' | 'false' | 'float' | 'int' | 'long' | 'new' | 'null' | 'short' |
                                    // 'super' | 'this' | 'true' | 'void' | '~'
    if (l1 != 22)                   // ')'
    {
      try_expressionList();
    }
    consumeT(22);                   // ')'
  }

  function consume(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(JavaJS.TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function consumeT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  function matchW(tokenSetId)
  {
    var code;
    for (;;)
    {
      code = match(tokenSetId);
      if (code != 10                // WS
       && code != 11                // COMMENT
       && code != 12)               // LINE_COMMENT
      {
        break;
      }
    }
    return code;
  }

  function lookahead1W(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = matchW(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(tokenSetId)
  {
    if (l2 == 0)
    {
      l2 = matchW(tokenSetId);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 7) | l1;
  }

  function error(b, e, s, l, t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new thisParser.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 5) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 5) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;

  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = JavaJS.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 1023; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = JavaJS.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = JavaJS.MAP1[(c0 & 15) + JavaJS.MAP1[(c1 & 31) + JavaJS.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }

        var lo = 0, hi = 3;
        for (var m = 2; ; m = (hi + lo) >> 1)
        {
          if (JavaJS.MAP2[m] > c0) hi = m - 1;
          else if (JavaJS.MAP2[4 + m] < c0) lo = m + 1;
          else {charclass = JavaJS.MAP2[8 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 10) + code - 1;
      code = JavaJS.TRANSITION[(i0 & 15) + JavaJS.TRANSITION[i0 >> 4]];

      if (code > 1023)
      {
        result = code;
        code &= 1023;
        end = current;
      }
    }

    result >>= 10;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 7; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 7;
    }

    if (end > size) end = size;
    return (result & 127) - 1;
  }

}

JavaJS.XmlSerializer = function(log, indent)
{
  var input = null;
  var delayedTag = null;
  var hasChildElement = false;
  var depth = 0;

  this.reset = function(string)
  {
    log("<?xml version=\"1.0\" encoding=\"UTF-8\"?" + ">");
    input = string;
    delayedTag = null;
    hasChildElement = false;
    depth = 0;
  };

  this.startNonterminal = function(tag, begin)
  {
    if (delayedTag != null)
    {
      log("<");
      log(delayedTag);
      log(">");
    }
    delayedTag = tag;
    if (indent)
    {
      log("\n");
      for (var i = 0; i < depth; ++i)
      {
        log("  ");
      }
    }
    hasChildElement = false;
    ++depth;
  };

  this.endNonterminal = function(tag, end)
  {
    --depth;
    if (delayedTag != null)
    {
      delayedTag = null;
      log("<");
      log(tag);
      log("/>");
    }
    else
    {
      if (indent)
      {
        if (hasChildElement)
        {
          log("\n");
          for (var i = 0; i < depth; ++i)
          {
            log("  ");
          }
        }
      }
      log("</");
      log(tag);
      log(">");
    }
    hasChildElement = true;
  };

  this.terminal = function(tag, begin, end)
  {
    if (tag.charAt(0) == '\'') tag = "TOKEN";
    this.startNonterminal(tag, begin);
    characters(begin, end);
    this.endNonterminal(tag, end);
  };

  this.whitespace = function(begin, end)
  {
    characters(begin, end);
  };

  function characters(begin, end)
  {
    if (begin < end)
    {
      if (delayedTag != null)
      {
        log("<");
        log(delayedTag);
        log(">");
        delayedTag = null;
      }
      log(input.substring(begin, end)
               .replace(/&/g, "&amp;")
               .replace(/</g, "&lt;")
               .replace(/>/g, "&gt;"));
    }
  }
};

JavaJS.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : JavaJS.INITIAL[tokenSetId] & 1023;
  for (var i = 0; i < 111; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 801 + s - 1;
    var i1 = i0 >> 2;
    var f = JavaJS.EXPECTED[(i0 & 3) + JavaJS.EXPECTED[(i1 & 3) + JavaJS.EXPECTED[i1 >> 2]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(JavaJS.TOKEN[j]);
      }
    }
  }
  return set;
};

JavaJS.TopDownTreeBuilder = function()
{
  var input = null;
  var stack = null;

  this.reset = function(i)
  {
    input = i;
    stack = [];
  };

  this.startNonterminal = function(name, begin)
  {
    var nonterminal = new JavaJS.Nonterminal(name, begin, begin, []);
    if (stack.length > 0) addChild(nonterminal);
    stack.push(nonterminal);
  };

  this.endNonterminal = function(name, end)
  {
    stack[stack.length - 1].end = end;
    if (stack.length > 1) stack.pop();
  };

  this.terminal = function(name, begin, end)
  {
    addChild(new JavaJS.Terminal(name, begin, end));
  };

  this.whitespace = function(begin, end)
  {
  };

  function addChild(s)
  {
    var current = stack[stack.length - 1];
    current.children.push(s);
  }

  this.serialize = function(e)
  {
    e.reset(input);
    stack[0].send(e);
  };
};

JavaJS.Terminal = function(name, begin, end)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.terminal(name, begin, end);
  };
};

JavaJS.Nonterminal = function(name, begin, end, children)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.startNonterminal(name, begin);
    var pos = begin;
    children.forEach
    (
      function(c)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
    );
    if (pos < end) e.whitespace(pos, end);
    e.endNonterminal(name, end);
  };
};

JavaJS.MAP0 =
[
  /*   0 */ 68, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 6, 7,
  /*  36 */ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 21, 22, 22, 22, 22, 23, 23, 24, 25, 26, 27, 28,
  /*  63 */ 29, 30, 31, 31, 31, 32, 33, 32, 8, 8, 8, 8, 8, 34, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 35, 8, 8, 36, 37, 38,
  /*  94 */ 39, 8, 7, 40, 41, 42, 43, 44, 45, 46, 47, 48, 8, 49, 50, 51, 52, 53, 54, 8, 55, 56, 57, 58, 59, 60, 61, 62,
  /* 122 */ 63, 64, 65, 66, 67, 7
];

JavaJS.MAP1 =
[
  /*   0 */ 108, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 195, 195, 195, 195, 195,
  /*  21 */ 195, 195, 195, 170, 211, 124, 124, 124, 124, 138, 195, 195, 195, 195, 195, 195, 195, 195, 124, 124, 124,
  /*  42 */ 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
  /*  63 */ 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 195, 195, 195, 195,
  /*  84 */ 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
  /* 105 */ 195, 195, 195, 243, 257, 273, 289, 305, 344, 390, 360, 375, 375, 375, 375, 326, 318, 326, 318, 326, 326,
  /* 126 */ 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
  /* 147 */ 326, 326, 326, 326, 326, 326, 326, 326, 326, 328, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
  /* 168 */ 375, 375, 375, 375, 375, 375, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
  /* 189 */ 326, 326, 326, 326, 326, 326, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
  /* 210 */ 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 326, 326, 326, 326,
  /* 231 */ 326, 326, 326, 326, 375, 375, 375, 375, 375, 375, 375, 375, 68, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 3, 4, 0, 0,
  /* 259 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
  /* 291 */ 21, 21, 22, 22, 22, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31, 31, 31, 32, 33, 32, 8, 8, 8, 8, 8, 34, 8, 8,
  /* 320 */ 8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 35, 8, 8,
  /* 355 */ 36, 37, 38, 39, 8, 54, 8, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  /* 385 */ 7, 7, 7, 7, 7, 7, 40, 41, 42, 43, 44, 45, 46, 47, 48, 8, 49, 50, 51, 52, 53
];

JavaJS.MAP2 =
[
  /*  0 */ 57344, 63744, 64256, 65536, 63743, 64255, 65533, 1114111, 7, 8, 7, 7
];

JavaJS.INITIAL =
[
  /*   0 */ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
  /*  29 */ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
  /*  56 */ 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
  /*  83 */ 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
  /* 108 */ 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121
];

JavaJS.TRANSITION =
[
  /*     0 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*    17 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*    34 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*    51 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4416, 4416, 4416, 4416,
  /*    68 */ 4416, 4416, 4416, 4439, 5640, 4838, 4785, 4929, 5548, 4624, 5634, 5790, 4656, 4744, 4831, 5668, 5645,
  /*    85 */ 5626, 5554, 4465, 4746, 4744, 4618, 4504, 4578, 6254, 5068, 4740, 4744, 4816, 4550, 4605, 4565, 6245,
  /*   102 */ 5272, 5612, 4646, 4672, 5784, 5396, 4727, 4479, 5753, 5739, 4762, 4801, 4854, 4855, 4855, 4855, 4855,
  /*   119 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4416, 4416, 4416, 4416, 4416, 4416, 4416, 4439,
  /*   136 */ 5640, 4838, 4785, 4929, 5548, 4624, 5634, 4875, 4656, 4744, 4831, 5668, 5645, 5626, 5554, 4872, 4746,
  /*   153 */ 4744, 4618, 4504, 4578, 6254, 5068, 4740, 4744, 4816, 4550, 4605, 4565, 6245, 5272, 5612, 4646, 4672,
  /*   170 */ 5784, 5396, 4727, 4479, 5753, 5739, 4762, 4801, 4854, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*   187 */ 4855, 4855, 4855, 4855, 4855, 4416, 4416, 4416, 4416, 4416, 4416, 4416, 4423, 4855, 4855, 4855, 4855,
  /*   204 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*   221 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*   238 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*   255 */ 4855, 4416, 4416, 4416, 4416, 4416, 4416, 4416, 4439, 5640, 4838, 4785, 4929, 5548, 4624, 5634, 5473,
  /*   272 */ 4656, 4744, 4831, 5668, 5645, 5626, 5554, 4465, 4746, 4744, 4618, 4504, 4578, 6254, 5068, 4740, 4744,
  /*   289 */ 4816, 4550, 4605, 4565, 6245, 5272, 5612, 4646, 4672, 5784, 5396, 4727, 4479, 5753, 5739, 4762, 4801,
  /*   306 */ 4854, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*   323 */ 4855, 4855, 4891, 4903, 4919, 5640, 4838, 4785, 4929, 5548, 4624, 5634, 5790, 4656, 4744, 4831, 5668,
  /*   340 */ 5645, 5626, 5554, 4465, 4746, 4744, 4618, 4504, 4578, 6254, 5068, 4740, 4744, 4816, 4550, 4605, 4565,
  /*   357 */ 6245, 5272, 5612, 4646, 4672, 5784, 5396, 4727, 4479, 5753, 5739, 4762, 4801, 4854, 4855, 4855, 4855,
  /*   374 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4945, 4957,
  /*   391 */ 4979, 5640, 4838, 4785, 5042, 5548, 4624, 5634, 5790, 4656, 4744, 4831, 5668, 5645, 4776, 5554, 4465,
  /*   408 */ 4746, 4744, 4618, 4504, 4578, 6254, 5068, 4740, 4744, 4816, 4550, 4605, 4565, 6245, 5272, 5612, 4646,
  /*   425 */ 4672, 5784, 5396, 4727, 4479, 5753, 5739, 4762, 4801, 4854, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*   442 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4630, 5640, 4838, 4785,
  /*   459 */ 4929, 5548, 4624, 5634, 5790, 4656, 4744, 4831, 5668, 5645, 5626, 5554, 4465, 4746, 4744, 4618, 4504,
  /*   476 */ 4578, 6254, 5068, 4740, 4744, 4816, 4550, 4605, 4565, 6245, 5272, 5612, 4646, 4672, 5784, 5396, 4727,
  /*   493 */ 4479, 5753, 5739, 4762, 4801, 4854, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*   510 */ 4855, 4855, 10085, 6816, 10735, 8095, 7117, 11751, 8732, 13527, 7009, 12876, 10692, 5968, 8730, 8370,
  /*   526 */ 6827, 9975, 6832, 6832, 7889, 8871, 6857, 10591, 6080, 7826, 6832, 6832, 7887, 8869, 8846, 10586, 11732,
  /*   543 */ 6832, 6832, 13122, 6823, 9564, 11747, 6832, 7007, 9931, 6823, 12976, 6832, 13127, 11740, 6831, 11376,
  /*   559 */ 5016, 12114, 5005, 10085, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*   576 */ 4855, 4855, 4855, 4855, 4855, 7398, 13256, 5032, 5640, 4838, 4785, 4929, 5548, 4624, 5634, 5790, 4656,
  /*   593 */ 4744, 4831, 5668, 5645, 5626, 5554, 4465, 4746, 4744, 4618, 4504, 4578, 6254, 5068, 4740, 4744, 4816,
  /*   610 */ 4550, 4605, 4565, 6245, 5272, 5612, 4646, 4672, 5784, 5396, 4727, 4479, 5753, 5739, 4762, 4801, 4854,
  /*   627 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*   644 */ 4855, 6203, 9906, 5058, 5640, 4838, 4785, 4929, 5084, 5129, 5634, 5790, 4656, 4744, 4831, 5668, 5645,
  /*   661 */ 5626, 5554, 4465, 4746, 4744, 4618, 4504, 4578, 6254, 5068, 4740, 4744, 4816, 4550, 4605, 4565, 6245,
  /*   678 */ 5272, 5612, 4646, 4672, 5784, 5396, 4727, 4479, 5753, 5739, 4762, 4801, 4854, 4855, 4855, 4855, 4855,
  /*   695 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 5156, 5168, 5191,
  /*   712 */ 5640, 4838, 4785, 4449, 5548, 4624, 5634, 5790, 4656, 4744, 4831, 5668, 5645, 5537, 5554, 4465, 4746,
  /*   729 */ 4744, 4618, 4504, 4578, 4488, 5068, 4740, 4744, 4816, 4550, 4605, 4565, 6245, 5272, 5612, 4646, 4672,
  /*   746 */ 5784, 5396, 4727, 4479, 5753, 5739, 4762, 4801, 4854, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*   763 */ 4855, 4855, 4855, 4855, 4855, 5217, 5175, 6446, 5312, 5218, 5234, 5246, 5262, 5640, 4838, 4785, 4929,
  /*   780 */ 5548, 4624, 5634, 5790, 4656, 4744, 4831, 5668, 5645, 5626, 5554, 4465, 4746, 4744, 4618, 4504, 4578,
  /*   797 */ 6254, 5068, 4740, 4744, 4816, 4550, 4605, 4565, 6245, 5272, 5612, 4646, 4672, 5784, 5396, 4727, 4479,
  /*   814 */ 5753, 5739, 4762, 4801, 4854, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*   831 */ 4855, 5309, 6274, 6272, 4855, 5299, 5113, 5288, 5328, 5640, 4838, 4785, 4929, 5548, 4624, 5634, 5790,
  /*   848 */ 4656, 4744, 4831, 5668, 5645, 5626, 5554, 4465, 4746, 4744, 4618, 4504, 4578, 6254, 5068, 4740, 4744,
  /*   865 */ 4816, 4550, 4605, 4565, 6245, 5272, 5612, 4646, 4672, 5784, 5396, 4727, 4479, 5753, 5739, 4762, 4801,
  /*   882 */ 4854, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 6442, 6442, 4855,
  /*   899 */ 4855, 4855, 6437, 13447, 5355, 5640, 4838, 4785, 4929, 5548, 5140, 5634, 4534, 4656, 4744, 4831, 5668,
  /*   916 */ 5645, 5626, 5554, 5382, 4746, 4744, 4618, 4504, 4578, 6254, 5068, 4740, 4744, 4816, 4550, 4605, 4565,
  /*   933 */ 6245, 5272, 5612, 4646, 4672, 5784, 5396, 4727, 4479, 5753, 5739, 4762, 4801, 4854, 4855, 4855, 4855,
  /*   950 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 14006, 5412,
  /*   967 */ 5428, 5640, 4838, 4785, 4929, 5455, 4624, 5467, 5790, 4656, 4744, 4831, 5668, 5645, 4686, 5554, 4465,
  /*   984 */ 4746, 4744, 4618, 4504, 4578, 6254, 5068, 4740, 4744, 4816, 4550, 4605, 4565, 6245, 5272, 5612, 4646,
  /*  1001 */ 4672, 5784, 5396, 4727, 4479, 5753, 5739, 4762, 4801, 4854, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  1018 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 8961, 4856, 10193, 5489, 4855, 10179, 10206, 5640, 4838, 4785,
  /*  1035 */ 4929, 5548, 4624, 5634, 5790, 4656, 4744, 4831, 5668, 5645, 5626, 5554, 4465, 4746, 4744, 4618, 4504,
  /*  1052 */ 4578, 6254, 5068, 4740, 4744, 4816, 4550, 4605, 4565, 6245, 5272, 5612, 4646, 4672, 5784, 5396, 4727,
  /*  1069 */ 4479, 5753, 5739, 4762, 4801, 4854, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  1086 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 14118, 5507, 5523, 5640, 4838, 4785, 4929, 4516, 4624, 4528,
  /*  1103 */ 5790, 4656, 4744, 4831, 5668, 5645, 4686, 5554, 4465, 4746, 4744, 4618, 4504, 4578, 6254, 5068, 4740,
  /*  1120 */ 4744, 4816, 4550, 4605, 4565, 6245, 5272, 5612, 4646, 4672, 5784, 5396, 4727, 4479, 5753, 5739, 4762,
  /*  1137 */ 4801, 4854, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 10730, 5825,
  /*  1154 */ 13308, 14158, 4855, 5570, 5582, 5598, 5640, 4838, 4785, 4929, 5661, 13955, 5634, 5790, 4656, 4744, 4831,
  /*  1171 */ 5668, 5645, 4700, 5366, 4465, 4746, 4744, 4618, 4504, 4578, 6254, 5068, 4740, 4744, 4816, 4550, 4605,
  /*  1188 */ 4565, 6245, 5272, 5612, 4646, 4672, 5784, 5396, 4727, 4479, 5753, 5739, 4762, 4801, 4854, 4855, 4855,
  /*  1205 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 5684, 5684, 5684, 5684, 5684, 5692,
  /*  1222 */ 5708, 5724, 5640, 4838, 4785, 4929, 5548, 13966, 5634, 5790, 4656, 4744, 4831, 5668, 5645, 5626, 5554,
  /*  1239 */ 5769, 4746, 4744, 4618, 4504, 4578, 6254, 5068, 4740, 4744, 4816, 4550, 4605, 4565, 6245, 5272, 5612,
  /*  1256 */ 4646, 4672, 5784, 5396, 4727, 4479, 5753, 5739, 4762, 4801, 4854, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  1273 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 5806, 5818, 5841, 7009, 12876,
  /*  1290 */ 10692, 8593, 5876, 8370, 6827, 9975, 6832, 6832, 7889, 8871, 6857, 5896, 6080, 7826, 6832, 6832, 7887,
  /*  1307 */ 8869, 8846, 5860, 5908, 6832, 6832, 13122, 6823, 9564, 5932, 6832, 7007, 9931, 6823, 5959, 6832, 13127,
  /*  1324 */ 11696, 6831, 11376, 5016, 12114, 5005, 10085, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  1341 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 5984, 5996, 6020, 7009, 12876, 10692, 8593, 5876, 8370,
  /*  1358 */ 6827, 9975, 6832, 6832, 7889, 8871, 6857, 5896, 6080, 7826, 6832, 6832, 7887, 8869, 8846, 5860, 5908,
  /*  1375 */ 6832, 6832, 13122, 6823, 9564, 5932, 6832, 7007, 9931, 6823, 5959, 6832, 13127, 11696, 6831, 11376, 5016,
  /*  1392 */ 12114, 5005, 10085, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  1409 */ 4855, 4855, 4855, 4855, 5984, 5996, 6020, 7009, 12876, 10692, 8593, 5876, 8370, 6827, 9975, 6832, 6832,
  /*  1426 */ 7889, 8871, 6857, 6046, 6080, 7826, 6832, 6832, 7887, 8869, 8846, 5860, 5908, 6832, 6832, 13122, 6823,
  /*  1443 */ 9564, 5932, 6832, 7007, 9931, 6823, 5959, 6832, 13127, 11696, 6831, 11376, 5016, 12114, 5005, 10085, 4855,
  /*  1460 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  1477 */ 5984, 5996, 6020, 7009, 12876, 10692, 8593, 6074, 8370, 6827, 9975, 6832, 6832, 7889, 8871, 6857, 11676,
  /*  1494 */ 6080, 7826, 6832, 6832, 7887, 8869, 8846, 13180, 5908, 6832, 6832, 13122, 6823, 9564, 5932, 6832, 7007,
  /*  1511 */ 9931, 6823, 5959, 6832, 13127, 11696, 6831, 11376, 5016, 12114, 5005, 10085, 4855, 4855, 4855, 4855, 4855,
  /*  1528 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 7390, 4855, 4855, 4855, 4855, 4855, 11075, 11089, 5640,
  /*  1545 */ 4838, 4785, 4929, 5548, 4624, 5634, 5790, 4656, 4744, 4831, 5668, 5645, 5626, 5554, 4465, 4746, 4744,
  /*  1562 */ 4618, 4504, 4578, 6254, 5068, 4740, 4744, 4816, 4550, 4605, 4565, 6245, 5272, 5612, 4646, 4672, 5784,
  /*  1579 */ 5396, 4727, 4479, 5753, 5739, 4762, 4801, 4854, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  1596 */ 4855, 4855, 4855, 4855, 12041, 12034, 6110, 6096, 6111, 6127, 6168, 6179, 5640, 4838, 4785, 4929, 5548,
  /*  1613 */ 4624, 5634, 5790, 4656, 4744, 4831, 5668, 5645, 5626, 5554, 4465, 4746, 4744, 4618, 4504, 4578, 6254,
  /*  1630 */ 5068, 4740, 4744, 4816, 4550, 4605, 4565, 6245, 5272, 5612, 4646, 4672, 5784, 5396, 4727, 4479, 5753,
  /*  1647 */ 5739, 4762, 4801, 4854, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  1664 */ 8953, 7991, 8957, 7998, 6195, 8942, 13692, 6219, 5640, 4838, 4785, 4929, 4711, 4589, 6235, 5790, 4656,
  /*  1681 */ 4744, 4831, 5668, 5645, 5626, 5554, 4465, 4746, 4744, 4618, 4504, 4578, 6254, 5068, 4740, 4744, 4816,
  /*  1698 */ 4550, 4605, 4565, 6245, 5272, 5612, 4646, 4672, 5784, 5396, 4727, 4479, 5753, 5739, 4762, 4801, 4854,
  /*  1715 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 11955, 4855, 11959, 10086,
  /*  1732 */ 6270, 11946, 12375, 6290, 5640, 4838, 4785, 4929, 6306, 6322, 6338, 5790, 4656, 4744, 4831, 5668, 5645,
  /*  1749 */ 5626, 5339, 4465, 4746, 4744, 4618, 4504, 4578, 6254, 5201, 4740, 4744, 4816, 4550, 4605, 4565, 6245,
  /*  1766 */ 5272, 5612, 4646, 4672, 5784, 5396, 4727, 4479, 5753, 5739, 4762, 4801, 4854, 4855, 4855, 4855, 4855,
  /*  1783 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 9848, 4855, 4855, 9847, 9840, 11937, 12554, 6354,
  /*  1800 */ 5640, 4838, 4785, 4929, 5548, 6370, 12952, 5790, 4656, 4744, 4831, 5668, 5645, 5626, 5439, 4465, 4746,
  /*  1817 */ 4744, 4618, 4504, 4578, 6254, 5068, 4740, 4744, 4816, 4550, 4605, 4565, 6245, 5272, 5612, 4646, 4672,
  /*  1834 */ 5784, 5396, 4727, 4479, 5753, 5739, 4762, 4801, 4854, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  1851 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 11928, 11928, 13662, 6386, 5640, 4838, 4785, 4929,
  /*  1868 */ 5548, 4624, 5634, 5790, 4656, 4744, 4831, 5668, 5645, 5626, 5554, 4465, 4746, 4744, 4618, 4504, 4578,
  /*  1885 */ 6254, 5068, 4740, 4744, 4816, 4550, 4605, 4565, 6245, 5272, 5612, 4646, 4672, 5784, 5396, 4727, 4479,
  /*  1902 */ 5753, 5739, 4762, 4801, 4854, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  1919 */ 4855, 4855, 5105, 4855, 5097, 4963, 6402, 6429, 6413, 5640, 4838, 4785, 4929, 5548, 4624, 5634, 5790,
  /*  1936 */ 4656, 4744, 4831, 5668, 5645, 5626, 5554, 4465, 4746, 4744, 4618, 4504, 4578, 6254, 5068, 4740, 4744,
  /*  1953 */ 4816, 4550, 4605, 4565, 6245, 5272, 5612, 4646, 4672, 5784, 5396, 4727, 4479, 5753, 5739, 4762, 4801,
  /*  1970 */ 4854, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 10085, 6816, 10735,
  /*  1987 */ 8095, 7117, 11751, 8732, 13527, 7009, 12876, 10692, 5968, 8730, 8370, 6827, 9975, 6832, 6832, 7889, 8871,
  /*  2004 */ 6857, 12819, 6080, 7826, 6832, 6832, 7887, 8869, 8846, 11299, 5908, 6832, 6832, 13122, 6823, 9564, 5932,
  /*  2021 */ 6832, 7007, 9931, 6823, 5959, 6832, 13127, 11696, 6831, 11376, 5016, 12114, 5005, 10085, 4855, 4855, 4855,
  /*  2038 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 10085, 6816, 10735, 8095, 7117, 11751, 8732,
  /*  2055 */ 13527, 7009, 12876, 10692, 5968, 6462, 8370, 6827, 9975, 6832, 6832, 7889, 8871, 6857, 7295, 6080, 7826,
  /*  2072 */ 6832, 6832, 7887, 8869, 8846, 9688, 5908, 6832, 6832, 13122, 6823, 9564, 5932, 6832, 7007, 9931, 6823,
  /*  2089 */ 5959, 6832, 13127, 11696, 6831, 11376, 5016, 12114, 5005, 10085, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  2106 */ 4855, 4855, 4855, 4855, 4855, 4855, 10085, 6816, 10735, 8095, 7117, 11751, 8732, 13527, 7009, 12876,
  /*  2122 */ 10692, 5968, 6484, 8370, 6827, 9975, 6832, 6832, 7889, 8871, 6857, 8536, 6080, 7826, 6832, 6832, 7887,
  /*  2139 */ 8869, 8846, 11299, 5908, 6832, 6832, 13122, 6823, 9564, 5932, 6832, 7007, 9931, 6823, 5959, 6832, 13127,
  /*  2156 */ 11696, 6831, 11376, 5016, 12114, 5005, 10085, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  2173 */ 4855, 4855, 4855, 10085, 6816, 10735, 8095, 7117, 11751, 8732, 13527, 7009, 12876, 10692, 5968, 6506,
  /*  2189 */ 8370, 6827, 9975, 6832, 6832, 7889, 8871, 6857, 6806, 6080, 7826, 6832, 6832, 7887, 8869, 8846, 10586,
  /*  2206 */ 6528, 6832, 6832, 13122, 6823, 9564, 11747, 6832, 7007, 9931, 6823, 12976, 6832, 13127, 11740, 6831,
  /*  2222 */ 11376, 5016, 12114, 5005, 10085, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  2239 */ 4855, 10085, 6816, 10735, 8095, 7117, 11751, 8732, 13527, 7009, 12876, 10692, 5968, 6552, 8370, 6827,
  /*  2255 */ 9975, 6832, 6832, 7889, 8871, 6857, 10591, 6080, 7826, 6832, 6832, 7887, 8869, 8846, 10586, 11732, 6832,
  /*  2272 */ 6832, 13122, 6823, 9564, 11747, 6832, 7007, 9931, 6823, 12976, 6832, 13127, 11740, 6831, 11376, 5016,
  /*  2288 */ 12114, 5005, 10085, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  2305 */ 13417, 6574, 6605, 7041, 7034, 6621, 6633, 5640, 4838, 4785, 4929, 5548, 4624, 5634, 5790, 4656, 4744,
  /*  2322 */ 4831, 5668, 5645, 5626, 5554, 4465, 4746, 4744, 4618, 4504, 4578, 6254, 5068, 4740, 4744, 4816, 4550,
  /*  2339 */ 4605, 4565, 6245, 5272, 5612, 4646, 4672, 5784, 5396, 4727, 4479, 5753, 5739, 4762, 4801, 4854, 4855,
  /*  2356 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  2373 */ 4855, 4855, 4630, 5640, 4838, 4785, 4989, 5548, 4624, 5634, 5790, 4656, 4744, 4831, 5668, 5645, 4776,
  /*  2390 */ 5554, 4465, 4746, 4744, 4618, 4504, 4578, 6254, 5068, 4740, 4744, 4816, 4550, 4605, 4565, 6245, 5272,
  /*  2407 */ 5612, 4646, 4672, 5784, 5396, 4727, 4479, 5753, 5739, 4762, 4801, 4854, 4855, 4855, 4855, 4855, 4855,
  /*  2424 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 7047, 4855, 4855, 4855, 4855, 7044, 6649, 6678, 5640,
  /*  2441 */ 4838, 4785, 4929, 5548, 4624, 5634, 5790, 4656, 4744, 4831, 5668, 5645, 5626, 5554, 4465, 4746, 4744,
  /*  2458 */ 4618, 4504, 4578, 6254, 5068, 4740, 4744, 4816, 4550, 4605, 4565, 6245, 5272, 5612, 4646, 4672, 5784,
  /*  2475 */ 5396, 4727, 4479, 5753, 5739, 4762, 4801, 4854, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  2492 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 11919, 6694, 6710, 5640, 4838, 4785, 4929, 5548,
  /*  2509 */ 4624, 5634, 5790, 4656, 4744, 4831, 5668, 5645, 5626, 5554, 4465, 4746, 4744, 4618, 4504, 4578, 6254,
  /*  2526 */ 5068, 4740, 4744, 4816, 4550, 4605, 4565, 6245, 5272, 5612, 4646, 4672, 5784, 5396, 4727, 4479, 5753,
  /*  2543 */ 5739, 4762, 4801, 4854, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  2560 */ 6771, 6763, 6776, 11116, 6726, 6741, 6752, 6792, 6852, 6873, 12405, 6910, 6952, 9443, 10878, 6975, 7003,
  /*  2577 */ 8506, 7025, 7063, 6490, 7094, 7110, 8274, 7133, 6832, 7170, 10642, 7225, 11299, 6058, 13836, 7241, 13122,
  /*  2594 */ 6823, 11147, 7266, 10356, 7007, 11546, 7324, 5959, 7648, 7351, 11696, 6831, 11376, 5016, 12114, 5005,
  /*  2610 */ 10085, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 7445, 7437, 7450,
  /*  2627 */ 7209, 7376, 7414, 7426, 7466, 7009, 12876, 8987, 7502, 8730, 8370, 7641, 7555, 6832, 9968, 7889, 8871,
  /*  2644 */ 10699, 7583, 6080, 7826, 10577, 6832, 7887, 12422, 7631, 11299, 5908, 6832, 6832, 13122, 6823, 9564, 5932,
  /*  2661 */ 6832, 7007, 9931, 6823, 5959, 6832, 13127, 11696, 6831, 11376, 5016, 12114, 5005, 10085, 4855, 4855, 4855,
  /*  2678 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 7710, 7702, 7197, 13069, 7664, 7679, 7691,
  /*  2695 */ 7726, 7009, 12876, 10692, 5968, 8730, 8370, 6827, 9975, 6832, 12084, 7889, 8871, 10377, 7760, 6080, 7826,
  /*  2712 */ 8652, 13631, 8568, 8869, 8846, 11299, 11688, 11290, 7779, 13122, 6823, 9679, 7795, 7822, 8434, 7842,
  /*  2728 */ 13096, 5959, 11635, 12209, 7868, 7905, 7926, 5016, 12114, 5005, 10085, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  2745 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 8045, 8037, 7949, 12649, 7977, 8014, 8026, 8066, 7009, 12876,
  /*  2762 */ 10692, 5968, 6462, 8370, 6827, 9975, 6832, 6832, 7889, 8871, 6857, 7295, 6080, 7826, 6832, 6832, 8092,
  /*  2779 */ 8869, 11987, 9688, 5908, 6832, 6832, 13122, 6823, 9564, 5932, 9291, 7007, 10682, 6823, 5959, 6832, 13127,
  /*  2796 */ 11696, 6831, 11376, 5016, 8111, 8137, 10085, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  2813 */ 4855, 4855, 4855, 8228, 8220, 13880, 8153, 8183, 8198, 8209, 8167, 8249, 8290, 10672, 5968, 8324, 8370,
  /*  2830 */ 11569, 9274, 6832, 6832, 7889, 8871, 6857, 8536, 6468, 7826, 8348, 9522, 7308, 8405, 8359, 13846, 8421,
  /*  2847 */ 8549, 8460, 9875, 8486, 7539, 8522, 7773, 7007, 10133, 6823, 8584, 10233, 7360, 8609, 8673, 13210, 10991,
  /*  2864 */ 12114, 8710, 10085, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 8796,
  /*  2881 */ 8788, 13783, 7961, 8748, 8763, 8777, 8817, 8843, 8862, 9143, 9101, 6462, 9165, 9175, 9183, 13033, 6832,
  /*  2898 */ 11016, 8871, 6857, 8887, 6080, 9617, 6832, 6832, 7887, 8869, 8846, 9688, 5908, 6832, 6832, 13122, 6823,
  /*  2915 */ 9564, 5932, 6832, 8928, 8977, 6823, 5959, 8657, 13127, 9003, 6831, 11376, 5016, 7852, 9038, 10085, 4855,
  /*  2932 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 10085, 6816, 10735, 8095, 7117,
  /*  2949 */ 11751, 8732, 13527, 7009, 12876, 10692, 5968, 8730, 8370, 6827, 9975, 6832, 6832, 7889, 8871, 6857, 10591,
  /*  2966 */ 6080, 7826, 6833, 6832, 7887, 8308, 9065, 10586, 11732, 6832, 6832, 13122, 6823, 9564, 11747, 6832, 12738,
  /*  2983 */ 9931, 9246, 9092, 6832, 13127, 11740, 6831, 11376, 5016, 12114, 5005, 10085, 4855, 4855, 4855, 4855, 4855,
  /*  3000 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 10085, 6816, 10735, 8095, 7117, 11751, 8732, 7281, 7567,
  /*  3017 */ 9117, 9199, 8076, 9237, 8370, 11593, 9262, 6832, 6832, 7889, 8871, 6857, 10591, 6080, 7826, 6832, 6832,
  /*  3034 */ 7887, 8869, 8846, 10586, 11732, 6835, 13363, 9154, 6823, 9564, 10962, 10298, 7007, 9931, 6823, 12976,
  /*  3050 */ 9290, 13127, 11740, 6831, 11376, 5016, 12114, 5005, 10085, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  3067 */ 4855, 4855, 4855, 4855, 4855, 9315, 9307, 6004, 6662, 9331, 9346, 9358, 9374, 9409, 8301, 6936, 9428,
  /*  3084 */ 9469, 9132, 11322, 9503, 6832, 8912, 9538, 9561, 12921, 10591, 9580, 13005, 6832, 9607, 7887, 8869, 9412,
  /*  3101 */ 10076, 8722, 9654, 7744, 9210, 6823, 10503, 11747, 9633, 10826, 9931, 6823, 11723, 6832, 13127, 11740,
  /*  3117 */ 6831, 11376, 5943, 10481, 5005, 10085, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  3134 */ 4855, 4855, 10085, 6816, 10735, 8095, 7117, 11751, 8732, 13527, 7009, 12876, 10692, 5968, 8730, 8370,
  /*  3150 */ 6827, 9975, 6832, 6832, 7889, 8871, 6857, 10591, 6080, 7826, 6832, 9651, 7887, 8869, 8846, 9670, 11732,
  /*  3167 */ 6836, 6832, 13122, 6823, 9564, 11747, 9704, 7007, 9931, 6823, 12976, 6832, 13127, 11740, 6831, 11376,
  /*  3183 */ 5016, 12114, 5005, 10085, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  3200 */ 9792, 9784, 8050, 13795, 9721, 9761, 9773, 9813, 9829, 13586, 9864, 9891, 9922, 7517, 11346, 9956, 8496,
  /*  3217 */ 9991, 7889, 8871, 10002, 11161, 10024, 7826, 10051, 10102, 10124, 10149, 5880, 13746, 10222, 10249, 10270,
  /*  3233 */ 13718, 12523, 10288, 11747, 7486, 9487, 10324, 9478, 12976, 10350, 13127, 5916, 6831, 11376, 5016, 12114,
  /*  3249 */ 5005, 10085, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 10085, 6816,
  /*  3266 */ 10735, 8095, 7117, 11751, 8732, 13527, 10372, 10393, 7528, 6030, 8730, 9076, 6886, 6894, 6832, 6832, 7889,
  /*  3283 */ 8871, 6857, 10591, 6080, 7826, 6832, 6832, 7887, 8869, 8470, 10418, 11732, 6832, 6832, 13122, 6823, 9564,
  /*  3300 */ 11747, 6832, 10439, 12579, 6823, 13610, 6832, 13127, 11740, 6831, 11376, 5016, 12114, 5005, 10085, 4855,
  /*  3316 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 10550, 10542, 8233, 10451, 10467,
  /*  3333 */ 10519, 10531, 10566, 10607, 10635, 10658, 10715, 8730, 10751, 8262, 10767, 11510, 10795, 13755, 6959,
  /*  3348 */ 10842, 10870, 10894, 12316, 6832, 9705, 7887, 8869, 8846, 10586, 9384, 6832, 10910, 13563, 6823, 9564,
  /*  3364 */ 11747, 12089, 10927, 9931, 6823, 9221, 6832, 12138, 11740, 12188, 10955, 10978, 12114, 5005, 10085, 4855,
  /*  3380 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 10085, 6816, 10735, 8095, 7117,
  /*  3397 */ 11751, 8732, 8624, 11007, 9545, 11032, 11060, 11105, 6925, 12163, 11132, 10108, 13171, 7889, 12725, 11177,
  /*  3413 */ 10591, 6080, 7826, 10254, 12837, 9022, 8869, 8846, 7145, 9393, 11193, 6832, 13122, 6823, 9564, 11747,
  /*  3429 */ 6832, 7007, 9931, 6823, 12976, 11829, 13127, 6536, 6831, 11376, 7806, 12782, 5005, 10085, 4855, 4855,
  /*  3445 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 11258, 11250, 8801, 10619, 11212, 11228,
  /*  3462 */ 11239, 11279, 7009, 12876, 10692, 5968, 8730, 8370, 6827, 9975, 10272, 13343, 10164, 11315, 6857, 11338,
  /*  3478 */ 6558, 7826, 6832, 6832, 7887, 8869, 8846, 10586, 11732, 6832, 6832, 13122, 6823, 9564, 11747, 6832, 7007,
  /*  3495 */ 9931, 6823, 12976, 6832, 13127, 11740, 11451, 11623, 11362, 12114, 5005, 10085, 4855, 4855, 4855, 4855,
  /*  3511 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 11407, 11399, 9797, 10939, 11428, 11472, 11481,
  /*  3527 */ 11497, 8686, 8694, 6589, 9591, 11537, 8370, 9453, 9975, 6836, 10308, 7154, 11562, 6512, 11585, 6080,
  /*  3543 */ 11609, 6832, 13335, 7887, 11662, 11712, 10586, 11732, 12619, 7596, 11767, 6823, 11783, 11810, 11826,
  /*  3558 */ 10492, 9931, 6823, 11442, 6832, 13127, 11740, 6831, 11376, 5016, 12114, 5005, 10085, 4855, 4855, 4855,
  /*  3574 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 11845, 11910, 11856, 11044, 11872, 11887,
  /*  3590 */ 11899, 11975, 7009, 12876, 10692, 12019, 8730, 8370, 11997, 12003, 12057, 6832, 13388, 8871, 12071, 12105,
  /*  3606 */ 11646, 11521, 10820, 6835, 12130, 12154, 8846, 10586, 12179, 6832, 10911, 12204, 12225, 9564, 7933, 6832,
  /*  3622 */ 7615, 12245, 6823, 12976, 12854, 12271, 11740, 6831, 11376, 5016, 12114, 12299, 10085, 4855, 4855, 4855,
  /*  3638 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 12469, 12461, 12332, 12360, 12391, 12438,
  /*  3654 */ 12450, 12485, 7880, 12512, 10334, 12539, 12570, 8370, 12229, 10064, 12595, 12611, 12635, 6987, 12665,
  /*  3669 */ 12687, 12712, 12798, 10854, 13824, 8332, 8869, 13499, 12814, 13537, 12835, 12853, 12870, 8444, 9564,
  /*  3684 */ 11383, 6832, 11794, 9931, 12892, 12908, 13039, 12937, 12968, 7736, 12992, 9049, 13021, 5005, 10085, 4855,
  /*  3700 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 10085, 6816, 10735, 8095, 7117,
  /*  3717 */ 11751, 8732, 13527, 13055, 13085, 12255, 10035, 13112, 8370, 10008, 8900, 9515, 9635, 7889, 10402, 7335,
  /*  3733 */ 13143, 13159, 13196, 6832, 7608, 7887, 8869, 8846, 10586, 11732, 13226, 6832, 12771, 6823, 9564, 11747,
  /*  3749 */ 7478, 7007, 9931, 6823, 12976, 7909, 13127, 11740, 12311, 11376, 5016, 12114, 5005, 10085, 4855, 4855,
  /*  3765 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 13303, 13295, 11263, 12283, 13242,
  /*  3781 */ 13272, 13284, 13324, 7009, 12876, 10692, 5968, 8730, 8370, 6827, 9975, 6832, 6832, 7889, 8871, 6857,
  /*  3797 */ 10591, 6080, 7826, 6832, 13359, 7887, 8869, 7250, 13379, 11732, 6832, 7910, 13122, 6823, 9564, 9940, 6832,
  /*  3814 */ 7007, 9931, 6823, 12976, 6832, 13127, 11740, 6831, 11376, 5016, 12114, 5005, 10085, 4855, 4855, 4855,
  /*  3830 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 13412, 13404, 11412, 12344, 13433, 13463,
  /*  3846 */ 13472, 13488, 8561, 13515, 12760, 8121, 13553, 8370, 12671, 10808, 6832, 12853, 13579, 13602, 6857, 10591,
  /*  3862 */ 6080, 7826, 6832, 6832, 7887, 8869, 8846, 10586, 11732, 6832, 11196, 12749, 6823, 9564, 11747, 13626,
  /*  3878 */ 7007, 9931, 6823, 12976, 6832, 13127, 11740, 6831, 11376, 5016, 12114, 5005, 10085, 4855, 4855, 4855,
  /*  3894 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 10085, 6816, 10735, 8095, 7117, 11751, 8732,
  /*  3911 */ 7078, 7009, 12415, 10692, 13647, 6552, 8370, 6827, 12496, 6832, 6832, 7889, 8871, 6857, 10591, 6080, 7826,
  /*  3928 */ 6832, 6832, 7887, 8869, 8846, 10586, 11732, 6832, 6832, 13122, 6823, 9564, 11747, 6832, 7007, 9931, 6823,
  /*  3945 */ 12976, 6832, 13127, 11740, 6831, 11376, 5016, 12114, 5005, 10085, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  3961 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 10085, 6816, 10735, 8095, 7117, 11751, 8732, 8639, 9015, 13678,
  /*  3978 */ 7185, 8827, 13708, 8370, 8380, 8389, 6832, 6834, 7889, 8871, 6857, 10423, 13734, 10779, 6832, 6832, 7887,
  /*  3995 */ 8869, 8846, 10586, 11732, 6832, 6832, 13122, 6823, 9564, 11747, 6832, 7007, 9931, 6823, 12976, 11456,
  /*  4011 */ 13771, 11740, 5851, 11376, 5016, 12114, 5005, 10085, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  4028 */ 4855, 4855, 4855, 4855, 10085, 6816, 10735, 8095, 7117, 11751, 8732, 13527, 7009, 12876, 10692, 5968,
  /*  4044 */ 8730, 8370, 6827, 9975, 6832, 6832, 7889, 8871, 6857, 10591, 6080, 7826, 6832, 6832, 7887, 8869, 8846,
  /*  4061 */ 10586, 11732, 6832, 6832, 13122, 6823, 9564, 11747, 6832, 7007, 9931, 6823, 12976, 6832, 13127, 11740,
  /*  4077 */ 6831, 11376, 5016, 12696, 13811, 10085, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  4094 */ 4855, 4855, 4855, 9744, 9735, 6152, 9745, 6140, 13862, 13896, 5640, 4838, 4785, 4929, 5548, 4624, 5634,
  /*  4111 */ 5790, 4656, 4744, 4831, 5668, 5645, 5626, 5554, 4465, 4746, 4744, 4618, 4504, 4578, 6254, 5068, 4740,
  /*  4128 */ 4744, 4816, 4550, 4605, 4565, 6245, 5272, 5612, 4646, 4672, 5784, 5396, 4727, 4479, 5753, 5739, 4762,
  /*  4145 */ 4801, 4854, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  4162 */ 4855, 4855, 4855, 13871, 13912, 13928, 5640, 4838, 4785, 4929, 5548, 13944, 13982, 5790, 4656, 4744, 4831,
  /*  4179 */ 5668, 5645, 5626, 5554, 4465, 4746, 4744, 4618, 4504, 4578, 6254, 5068, 4740, 4744, 4816, 4550, 4605,
  /*  4196 */ 4565, 6245, 5272, 5612, 4646, 4672, 5784, 5396, 4727, 4479, 5753, 5739, 4762, 4801, 4854, 4855, 4855,
  /*  4213 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 14056, 14030, 14066, 13998, 14022,
  /*  4230 */ 14046, 14082, 5640, 4838, 4785, 4929, 5548, 4624, 5634, 5790, 4656, 4744, 4831, 5668, 5645, 5626, 5554,
  /*  4247 */ 4465, 4746, 4744, 4618, 4504, 4578, 6254, 5068, 4740, 4744, 4816, 4550, 4605, 4565, 6245, 5272, 5612,
  /*  4264 */ 4646, 4672, 5784, 5396, 4727, 4479, 5753, 5739, 4762, 4801, 4854, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  4281 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 14098, 14110, 14134, 5640, 4838,
  /*  4298 */ 4785, 4929, 5548, 4624, 5634, 5790, 4656, 4744, 4831, 5668, 5645, 5626, 5554, 4465, 4746, 4744, 4618,
  /*  4315 */ 4504, 4578, 6254, 5068, 4740, 4744, 4816, 4550, 4605, 4565, 6245, 5272, 5612, 4646, 4672, 5784, 5396,
  /*  4332 */ 4727, 4479, 5753, 5739, 4762, 4801, 4854, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  4349 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 5491, 14150, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  4366 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  4383 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
  /*  4400 */ 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 11264,
  /*  4417 */ 11264, 11264, 11264, 11264, 11264, 11264, 11264, 11264, 11264, 11264, 11264, 11264, 11264, 11264, 11264,
  /*  4432 */ 0, 0, 0, 0, 0, 0, 0, 11264, 11264, 11264, 11264, 11264, 11264, 11264, 11264, 11264, 141312, 0, 141312,
  /*  4451 */ 141312, 141312, 141312, 141312, 141312, 0, 0, 141312, 141312, 141312, 141312, 190, 0, 0, 199680, 141312,
  /*  4467 */ 208896, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 251, 0, 141312,
  /*  4481 */ 141312, 140288, 141312, 223232, 228352, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312,
  /*  4494 */ 141312, 0, 0, 212992, 0, 6144, 6144, 0, 0, 0, 0, 0, 217088, 141312, 141312, 141312, 0, 0, 0, 0, 0, 212992,
  /*  4516 */ 0, 0, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 0, 0, 0, 31744, 0, 0,
  /*  4533 */ 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 382, 252, 141312,
  /*  4547 */ 141312, 141312, 141312, 230400, 141312, 0, 192512, 195584, 0, 0, 215040, 0, 141312, 192512, 195584,
  /*  4562 */ 141312, 141312, 215040, 141312, 0, 0, 0, 0, 141312, 218112, 234496, 141312, 141312, 141312, 141312, 0,
  /*  4578 */ 141312, 141312, 141312, 212992, 141312, 141312, 141312, 0, 0, 0, 0, 0, 0, 0, 0, 141312, 0, 0, 0, 0, 0, 0,
  /*  4600 */ 0, 361, 0, 0, 141312, 236544, 0, 139264, 0, 0, 0, 0, 0, 0, 141312, 141312, 139264, 141312, 141312, 141312,
  /*  4620 */ 141312, 0, 0, 217088, 0, 0, 0, 0, 141312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141312, 0, 141312, 141312, 141312,
  /*  4644 */ 141312, 141312, 206848, 224256, 0, 204800, 0, 0, 0, 0, 0, 204800, 141312, 141312, 141312, 141312, 141312,
  /*  4661 */ 141312, 0, 141312, 141312, 141312, 141312, 141312, 141312, 0, 141312, 141312, 0, 0, 0, 0, 203776, 141312,
  /*  4678 */ 141312, 141312, 141312, 0, 141312, 141312, 141312, 191488, 141312, 141312, 0, 0, 141312, 0, 0, 0, 0, 0, 0,
  /*  4697 */ 479, 0, 141312, 141312, 141312, 0, 0, 141312, 0, 0, 0, 0, 5465, 5465, 0, 0, 141312, 141312, 141312,
  /*  4716 */ 141312, 141312, 141312, 141312, 141312, 141312, 0, 0, 0, 0, 40960, 225280, 0, 141312, 141312, 141312,
  /*  4732 */ 141312, 222208, 141312, 210944, 0, 0, 0, 216064, 141312, 141312, 141312, 235520, 141312, 141312, 141312,
  /*  4747 */ 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 0,
  /*  4761 */ 141312, 0, 189440, 0, 226304, 189440, 141312, 226304, 141312, 141312, 237568, 0, 141312, 141312, 197632,
  /*  4776 */ 141312, 141312, 0, 0, 141312, 190, 0, 343, 0, 0, 0, 0, 0, 141312, 141312, 141312, 141312, 141312, 141312,
  /*  4795 */ 141312, 141312, 0, 0, 0, 0, 214016, 214016, 0, 221184, 221184, 141312, 233472, 0, 141312, 141312, 209920,
  /*  4812 */ 141312, 211968, 209920, 211968, 141312, 0, 0, 0, 230400, 0, 141312, 141312, 0, 0, 0, 0, 0, 0, 193536,
  /*  4831 */ 141312, 0, 0, 0, 0, 0, 0, 141312, 141312, 0, 0, 0, 0, 0, 0, 0, 141312, 141312, 141312, 141312, 0, 0, 0,
  /*  4854 */ 229376, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29696, 199680, 141312, 208896, 141312, 141312,
  /*  4877 */ 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 251, 13312, 141312, 141312, 141312,
  /*  4890 */ 141312, 0, 0, 15360, 0, 0, 0, 0, 0, 204, 15360, 0, 15360, 15360, 15360, 15360, 15360, 204, 15360, 0, 204,
  /*  4911 */ 204, 204, 204, 204, 204, 204, 204, 204, 15360, 204, 204, 204, 15360, 15360, 15360, 15360, 15360, 141312,
  /*  4929 */ 0, 141312, 141312, 141312, 141312, 141312, 141312, 0, 0, 141312, 141312, 141312, 141312, 190, 343, 0, 0,
  /*  4946 */ 0, 190, 0, 0, 0, 0, 0, 0, 190, 0, 190, 190, 190, 190, 190, 0, 190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53248,
  /*  4974 */ 53248, 53248, 53248, 53248, 53248, 190, 0, 0, 0, 190, 190, 190, 190, 190, 141312, 0, 141312, 141312,
  /*  4992 */ 141312, 141312, 141312, 141312, 0, 0, 141312, 141312, 141312, 141312, 342, 344, 0, 0, 122, 0, 0, 122, 122,
  /*  5011 */ 122, 0, 122, 122, 0, 122, 0, 122, 122, 122, 0, 122, 122, 122, 122, 122, 122, 122, 122, 0, 122, 0, 17622,
  /*  5034 */ 17622, 17622, 0, 0, 0, 0, 0, 141312, 0, 141312, 141312, 141312, 141312, 141312, 141312, 0, 0, 141312,
  /*  5052 */ 141312, 141312, 141312, 7168, 343, 0, 0, 19671, 19671, 19671, 0, 0, 0, 0, 0, 141312, 0, 141312, 141312,
  /*  5071 */ 141312, 141312, 141312, 141312, 141312, 0, 0, 141312, 141312, 141312, 141312, 141312, 207872, 0, 0,
  /*  5086 */ 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 0, 20480, 0, 0, 0, 0, 0, 0, 53248,
  /*  5104 */ 0, 0, 0, 0, 0, 0, 0, 53248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23552, 0, 0, 23552, 0, 0, 0, 0, 0, 0, 0, 0, 141312,
  /*  5134 */ 0, 20480, 0, 0, 0, 0, 0, 0, 0, 0, 141312, 0, 0, 0, 0, 0, 0, 251, 0, 0, 0, 141312, 0, 0, 191, 0, 0, 0, 0,
  /*  5163 */ 0, 0, 191, 0, 191, 191, 191, 191, 191, 0, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22528, 22528, 22528, 0, 0, 0,
  /*  5190 */ 0, 191, 0, 0, 0, 191, 191, 191, 191, 191, 141312, 0, 141312, 141312, 141312, 141312, 141312, 141312,
  /*  5208 */ 141312, 0, 51200, 141312, 141312, 141312, 141312, 141312, 207872, 0, 22528, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  5229 */ 0, 0, 0, 0, 0, 0, 0, 22528, 0, 0, 0, 0, 0, 22528, 22528, 0, 22528, 22528, 22528, 22528, 22528, 0, 22528,
  /*  5252 */ 22528, 22528, 22528, 0, 22528, 22528, 0, 22528, 22528, 22528, 22528, 0, 22528, 0, 22528, 22528, 22528,
  /*  5269 */ 22528, 22528, 141312, 0, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 0,
  /*  5283 */ 141312, 196608, 0, 227328, 238592, 0, 23552, 0, 0, 23552, 0, 23552, 23552, 23552, 0, 23552, 0, 23552, 0,
  /*  5302 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 23552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22528, 0, 22528, 0, 23552, 23552,
  /*  5331 */ 23552, 0, 0, 0, 0, 0, 141312, 0, 141312, 141312, 141312, 141312, 141312, 0, 0, 0, 41984, 49152, 141312,
  /*  5350 */ 49152, 141312, 141312, 141312, 141312, 0, 24792, 24792, 24792, 0, 0, 0, 0, 0, 141312, 251, 141312, 141312,
  /*  5368 */ 141312, 141312, 141312, 0, 0, 34816, 0, 0, 141312, 0, 141312, 141312, 141312, 141312, 199680, 141312,
  /*  5384 */ 208896, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 382, 0, 141312,
  /*  5398 */ 225280, 0, 232448, 0, 0, 0, 0, 200704, 141312, 200704, 0, 0, 0, 222208, 26830, 26830, 26830, 26830, 217,
  /*  5417 */ 26830, 0, 217, 217, 26850, 26850, 26850, 26841, 26850, 26850, 26850, 26830, 26850, 26850, 26850, 26830,
  /*  5433 */ 26830, 26830, 26830, 26830, 141312, 0, 141312, 141312, 141312, 141312, 141312, 50176, 0, 0, 0, 490,
  /*  5449 */ 141312, 50666, 141312, 141312, 141312, 141312, 0, 0, 141312, 141312, 141312, 141312, 141312, 141312,
  /*  5463 */ 141312, 141312, 141312, 0, 0, 27648, 0, 0, 0, 141312, 141312, 141312, 141312, 141312, 141312, 141312,
  /*  5479 */ 141312, 141312, 141312, 141312, 251, 383, 141312, 141312, 141312, 141312, 29696, 29696, 0, 0, 0, 0, 0, 0,
  /*  5497 */ 0, 0, 0, 0, 0, 0, 0, 0, 14336, 14336, 30927, 30927, 30927, 30927, 218, 30927, 0, 218, 218, 30947, 30947,
  /*  5518 */ 30947, 30938, 30947, 30947, 30947, 30927, 30947, 30947, 30947, 30927, 30927, 30927, 30927, 30927, 141312,
  /*  5533 */ 0, 141312, 141312, 141312, 141312, 141312, 0, 0, 141312, 190, 6144, 343, 0, 0, 0, 0, 0, 141312, 141312,
  /*  5552 */ 141312, 141312, 141312, 141312, 141312, 141312, 141312, 0, 0, 0, 0, 0, 141312, 0, 141312, 141312, 141312,
  /*  5569 */ 141312, 0, 0, 192, 0, 0, 0, 0, 0, 33792, 192, 0, 192, 192, 192, 192, 192, 219, 192, 33792, 34011, 34011,
  /*  5591 */ 33792, 33792, 33792, 0, 33792, 33792, 33792, 192, 33792, 33792, 33792, 192, 192, 192, 192, 192, 141312, 0,
  /*  5609 */ 141312, 141312, 141312, 141312, 141312, 0, 0, 194560, 0, 0, 0, 227328, 196608, 0, 0, 206848, 224256,
  /*  5626 */ 141312, 141312, 0, 0, 141312, 0, 0, 0, 0, 0, 0, 0, 0, 141312, 141312, 141312, 141312, 141312, 141312,
  /*  5645 */ 141312, 141312, 141312, 141312, 141312, 0, 0, 0, 0, 0, 0, 141312, 141312, 141312, 141312, 141312, 5465,
  /*  5662 */ 5465, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  5680 */ 141312, 141312, 141312, 0, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
  /*  5700 */ 35963, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 220, 123, 123, 220, 220, 36060, 36060,
  /*  5719 */ 36060, 36060, 36060, 36060, 36060, 123, 36060, 36060, 36060, 123, 123, 123, 123, 123, 141312, 252, 141312,
  /*  5736 */ 141312, 141312, 141312, 141312, 219136, 141312, 141312, 141312, 0, 141312, 141312, 141312, 198656, 205824,
  /*  5750 */ 141312, 141312, 141312, 0, 141312, 198656, 205824, 202752, 0, 190464, 190464, 0, 220160, 0, 0, 141312,
  /*  5766 */ 219136, 220160, 141312, 199680, 141312, 208896, 141312, 141312, 141312, 141312, 141312, 141312, 141312,
  /*  5779 */ 141312, 141312, 141312, 12288, 0, 141312, 231424, 238592, 141312, 194560, 204800, 141312, 141312, 141312,
  /*  5793 */ 141312, 141312, 141312, 141312, 141312, 141312, 141312, 251, 252, 141312, 141312, 141312, 141312, 0, 0,
  /*  5808 */ 3265, 0, 0, 0, 0, 0, 0, 3265, 0, 3265, 3265, 3265, 3265, 3265, 0, 3265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  5834 */ 33792, 0, 0, 0, 0, 0, 33792, 3265, 0, 0, 0, 3265, 3265, 3265, 3265, 3265, 122, 0, 122, 122, 122, 122, 122,
  /*  5857 */ 122, 122, 763, 122, 122, 122, 122, 122, 122, 122, 0, 0, 122, 580, 477, 343, 581, 5600, 5600, 4442, 3266,
  /*  5878 */ 122, 122, 122, 122, 122, 122, 122, 122, 122, 0, 0, 0, 0, 0, 567, 0, 0, 122, 122, 122, 0, 0, 122, 190, 0,
  /*  5903 */ 476, 5465, 4442, 347, 5600, 2529, 122, 122, 122, 122, 122, 122, 122, 0, 0, 122, 122, 122, 122, 122, 122,
  /*  5924 */ 0, 0, 0, 0, 122, 122, 122, 757, 122, 0, 0, 659, 660, 122, 122, 122, 122, 122, 122, 122, 0, 122, 122, 122,
  /*  5948 */ 0, 122, 122, 122, 122, 122, 122, 122, 784, 0, 122, 0, 0, 715, 716, 122, 122, 122, 122, 122, 0, 122, 122,
  /*  5971 */ 122, 122, 122, 122, 0, 0, 122, 122, 122, 122, 190, 343, 0, 0, 0, 3266, 0, 0, 0, 0, 0, 0, 3266, 0, 3266,
  /*  5996 */ 3266, 3266, 3266, 3266, 0, 3266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 130, 0, 0, 0, 0, 3266, 0, 0, 0,
  /*  6024 */ 3266, 3266, 3266, 3266, 3266, 122, 0, 122, 122, 122, 122, 122, 122, 339, 0, 122, 271, 122, 122, 190, 343,
  /*  6045 */ 0, 122, 122, 0, 0, 122, 190, 0, 477, 5465, 4442, 347, 5600, 2529, 122, 122, 122, 122, 122, 122, 588, 0, 0,
  /*  6068 */ 122, 122, 122, 593, 122, 122, 347, 3266, 122, 122, 122, 122, 122, 122, 122, 122, 122, 0, 0, 0, 0, 0, 122,
  /*  6091 */ 0, 122, 122, 122, 122, 0, 38912, 38912, 0, 0, 0, 38912, 0, 38912, 38912, 0, 38912, 0, 0, 38912, 38912,
  /*  6112 */ 38912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38912, 38912, 38912, 0, 0, 0, 38912, 0, 0, 38912, 0, 0, 38912,
  /*  6138 */ 0, 38912, 0, 0, 0, 0, 0, 0, 108544, 0, 0, 0, 108544, 0, 0, 0, 108544, 108544, 0, 108544, 0, 0, 108544,
  /*  6161 */ 108544, 0, 108544, 108544, 0, 0, 0, 0, 0, 38912, 0, 38912, 0, 38912, 38912, 38912, 38912, 0, 38912, 38912,
  /*  6181 */ 38912, 38912, 38912, 38912, 38912, 38912, 38912, 141312, 0, 141312, 141312, 141312, 141312, 141312, 0, 0,
  /*  6197 */ 39936, 39936, 0, 0, 39936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19661, 0, 0, 0, 0, 0, 0, 0, 0, 40164, 40164, 40164,
  /*  6223 */ 0, 39936, 0, 0, 0, 141312, 0, 141312, 141312, 141312, 141312, 141312, 0, 0, 0, 41321, 0, 141312, 141312,
  /*  6242 */ 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 193536, 141312, 201728, 141312,
  /*  6255 */ 141312, 141312, 141312, 141312, 141312, 141312, 0, 0, 212992, 0, 0, 0, 0, 0, 0, 0, 44032, 0, 0, 0, 0, 0,
  /*  6277 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 23552, 0, 0, 0, 0, 44241, 44241, 44241, 0, 0, 0, 0, 0, 141312, 0, 141312,
  /*  6302 */ 141312, 141312, 141312, 141312, 0, 0, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312,
  /*  6316 */ 141312, 16384, 0, 0, 0, 43008, 45056, 47104, 0, 0, 141312, 18432, 21504, 25600, 28672, 32768, 0, 36864, 0,
  /*  6335 */ 0, 57344, 141312, 110592, 28672, 32768, 43008, 47104, 141312, 141312, 141312, 141312, 141312, 141312,
  /*  6349 */ 141312, 141312, 141312, 141312, 141312, 0, 46309, 46309, 46309, 0, 0, 0, 0, 0, 141312, 0, 141312, 141312,
  /*  6367 */ 141312, 141312, 141312, 0, 48486, 0, 0, 141312, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 141312, 0, 52224, 52224,
  /*  6389 */ 52224, 0, 0, 0, 0, 0, 141312, 0, 141312, 141312, 141312, 141312, 141312, 53248, 53248, 0, 53248, 53248,
  /*  6407 */ 53248, 53248, 53248, 0, 0, 53248, 0, 0, 0, 0, 53248, 53248, 53248, 53248, 53248, 141312, 0, 141312,
  /*  6425 */ 141312, 141312, 141312, 141312, 0, 53248, 53248, 53248, 0, 53248, 53248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24576,
  /*  6446 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22528, 22528, 0, 0, 5120, 5120, 122, 122, 122, 122, 122, 122, 122,
  /*  6471 */ 122, 122, 0, 0, 0, 0, 0, 122, 0, 122, 122, 494, 122, 348, 348, 122, 122, 122, 122, 122, 122, 122, 122,
  /*  6494 */ 122, 0, 0, 0, 0, 0, 462, 122, 122, 122, 122, 122, 3072, 3072, 122, 122, 122, 122, 122, 122, 122, 122, 122,
  /*  6517 */ 0, 0, 0, 0, 0, 463, 122, 122, 122, 122, 122, 2048, 122, 122, 122, 122, 122, 122, 122, 0, 0, 122, 122, 122,
  /*  6541 */ 122, 122, 122, 0, 0, 0, 0, 122, 755, 122, 122, 349, 0, 122, 122, 122, 122, 122, 122, 122, 122, 122, 0, 0,
  /*  6565 */ 0, 0, 0, 491, 0, 122, 122, 122, 122, 0, 0, 0, 0, 54272, 54272, 0, 0, 0, 0, 0, 54272, 54272, 54272, 54272,
  /*  6589 */ 0, 0, 0, 0, 256, 122, 122, 122, 122, 122, 122, 122, 0, 0, 0, 329, 0, 54272, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  6616 */ 54272, 0, 54272, 0, 54272, 0, 0, 0, 0, 54272, 0, 0, 54272, 54272, 54272, 54272, 54272, 0, 54272, 54272,
  /*  6636 */ 54272, 0, 0, 0, 0, 0, 141312, 0, 141312, 141312, 141312, 141312, 141312, 0, 0, 0, 0, 55296, 0, 0, 55296,
  /*  6657 */ 55296, 0, 0, 0, 55296, 0, 0, 0, 0, 0, 152, 130, 130, 0, 0, 0, 0, 152, 130, 130, 0, 0, 55296, 55296, 55296,
  /*  6682 */ 0, 0, 0, 0, 0, 141312, 0, 141312, 141312, 141312, 141312, 141312, 0, 0, 0, 0, 56543, 0, 0, 56543, 56543,
  /*  6703 */ 56543, 56543, 56543, 56543, 56543, 56543, 56543, 0, 56543, 56543, 56543, 0, 0, 0, 0, 0, 141312, 0, 141312,
  /*  6722 */ 141312, 141312, 141312, 141312, 0, 0, 0, 124, 0, 124, 124, 124, 124, 124, 173, 124, 124, 179, 173, 173,
  /*  6742 */ 179, 124, 179, 179, 179, 179, 179, 0, 124, 179, 124, 124, 124, 124, 124, 124, 179, 124, 124, 0, 0, 0, 0,
  /*  6765 */ 0, 124, 124, 124, 124, 124, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 231, 0, 0,
  /*  6795 */ 0, 241, 241, 241, 241, 241, 122, 0, 122, 122, 258, 122, 122, 0, 0, 122, 0, 0, 0, 0, 4096, 0, 0, 0, 122,
  /*  6820 */ 122, 122, 122, 122, 122, 0, 0, 0, 0, 0, 0, 0, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
  /*  6844 */ 122, 122, 122, 122, 270, 122, 122, 122, 266, 122, 122, 274, 277, 122, 122, 122, 122, 122, 0, 0, 0, 0, 0,
  /*  6867 */ 0, 122, 122, 122, 122, 122, 122, 122, 0, 0, 300, 0, 0, 0, 304, 274, 122, 122, 258, 0, 0, 0, 0, 0, 271,
  /*  6892 */ 122, 122, 122, 122, 122, 271, 122, 122, 122, 122, 122, 122, 251, 252, 122, 122, 122, 122, 0, 266, 122,
  /*  6913 */ 122, 266, 335, 122, 0, 340, 258, 122, 277, 122, 190, 343, 0, 0, 0, 0, 269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  6940 */ 122, 122, 122, 267, 122, 122, 122, 122, 0, 0, 328, 0, 0, 0, 350, 274, 122, 122, 353, 122, 122, 122, 122,
  /*  6963 */ 0, 0, 0, 0, 0, 0, 445, 0, 122, 122, 122, 122, 122, 258, 350, 122, 122, 377, 122, 122, 380, 350, 251, 252,
  /*  6987 */ 122, 122, 122, 122, 0, 440, 0, 0, 0, 444, 0, 0, 122, 448, 122, 122, 122, 122, 269, 390, 122, 122, 122,
  /*  7010 */ 122, 122, 122, 122, 122, 122, 122, 122, 122, 0, 0, 0, 0, 0, 0, 122, 420, 0, 0, 0, 0, 0, 122, 427, 0, 0, 0,
  /*  7037 */ 0, 0, 0, 0, 0, 54272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55296, 0, 0, 0, 0, 0, 122, 122, 122, 438,
  /*  7067 */ 0, 0, 441, 0, 0, 0, 0, 0, 122, 122, 449, 122, 0, 0, 0, 122, 122, 122, 122, 122, 122, 0, 122, 122, 122,
  /*  7092 */ 122, 265, 122, 427, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 2529, 122, 122, 416, 122, 122, 487, 122, 122, 0, 0, 0,
  /*  7118 */ 0, 0, 122, 0, 122, 122, 122, 122, 122, 0, 122, 122, 122, 0, 0, 122, 122, 509, 122, 122, 122, 122, 512,
  /*  7141 */ 122, 122, 514, 515, 122, 122, 122, 122, 122, 122, 122, 578, 0, 122, 0, 0, 0, 0, 0, 0, 122, 410, 0, 429, 0,
  /*  7166 */ 0, 0, 0, 0, 122, 529, 122, 0, 0, 0, 0, 0, 0, 122, 122, 537, 0, 0, 540, 0, 0, 0, 0, 318, 122, 122, 122,
  /*  7193 */ 122, 122, 285, 122, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 125, 125, 0, 0, 0, 0, 0,
  /*  7222 */ 125, 125, 0, 122, 122, 558, 122, 122, 122, 122, 0, 0, 564, 0, 0, 0, 0, 0, 570, 122, 122, 122, 122, 611,
  /*  7246 */ 122, 122, 613, 257, 122, 122, 122, 122, 122, 122, 122, 0, 0, 0, 565, 0, 0, 0, 0, 122, 122, 0, 658, 659,
  /*  7270 */ 660, 122, 122, 122, 122, 122, 122, 122, 666, 122, 668, 122, 0, 0, 0, 122, 122, 122, 122, 122, 122, 0, 122,
  /*  7293 */ 122, 259, 122, 122, 0, 0, 122, 0, 0, 0, 5120, 5120, 5120, 0, 2529, 122, 122, 122, 0, 531, 0, 532, 0, 0,
  /*  7317 */ 535, 122, 0, 0, 0, 0, 541, 122, 122, 701, 0, 0, 0, 0, 0, 0, 122, 707, 122, 122, 122, 122, 122, 0, 457, 0,
  /*  7343 */ 0, 0, 0, 122, 122, 466, 122, 122, 737, 738, 122, 0, 0, 0, 0, 0, 0, 0, 122, 122, 0, 0, 0, 0, 742, 0, 0,
  /*  7370 */ 122, 122, 0, 746, 0, 0, 0, 0, 0, 125, 158, 165, 165, 165, 165, 165, 0, 165, 165, 125, 0, 0, 0, 0, 0,
  /*  7395 */ 37888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17408, 0, 0, 0, 0, 0, 0, 0, 0, 165, 165, 165, 165, 165, 165, 165, 0,
  /*  7423 */ 165, 165, 165, 165, 165, 165, 165, 125, 165, 165, 125, 125, 0, 0, 0, 0, 0, 125, 125, 125, 125, 125, 125,
  /*  7446 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 232, 0, 0, 0, 232, 232, 232, 232, 232, 122,
  /*  7476 */ 0, 253, 122, 122, 122, 122, 122, 122, 122, 676, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 678,
  /*  7497 */ 122, 122, 122, 515, 122, 0, 122, 333, 122, 122, 122, 122, 0, 0, 122, 122, 122, 122, 190, 343, 0, 0, 0, 0,
  /*  7521 */ 321, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 122, 122, 122, 271, 122, 122, 122, 0, 0, 0, 0, 646, 0, 0, 0, 122,
  /*  7549 */ 122, 122, 122, 122, 654, 122, 333, 122, 122, 122, 122, 122, 122, 122, 122, 122, 251, 252, 122, 122, 122,
  /*  7570 */ 122, 122, 122, 281, 286, 122, 289, 0, 0, 0, 0, 294, 295, 470, 122, 0, 0, 122, 190, 0, 343, 0, 0, 0, 0,
  /*  7595 */ 2529, 122, 122, 122, 122, 122, 612, 122, 122, 122, 122, 122, 616, 122, 122, 122, 122, 122, 122, 524, 122,
  /*  7616 */ 122, 122, 122, 122, 122, 122, 122, 122, 122, 270, 122, 0, 0, 0, 0, 122, 557, 122, 122, 122, 122, 122, 0,
  /*  7639 */ 0, 0, 0, 0, 0, 0, 0, 122, 253, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 732, 122, 122, 122,
  /*  7663 */ 122, 0, 0, 139, 157, 159, 166, 166, 166, 166, 166, 139, 166, 166, 157, 139, 139, 186, 166, 186, 186, 186,
  /*  7685 */ 186, 186, 0, 166, 186, 166, 166, 166, 166, 166, 126, 166, 186, 126, 126, 0, 0, 0, 0, 0, 126, 126, 126,
  /*  7708 */ 126, 126, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 0, 0, 0, 0, 233, 0, 0, 0, 242, 242, 246, 246, 249, 122,
  /*  7736 */ 0, 122, 122, 122, 122, 122, 122, 762, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 615, 122, 122,
  /*  7757 */ 122, 122, 122, 122, 122, 0, 473, 122, 0, 0, 0, 0, 0, 0, 0, 2529, 122, 122, 122, 122, 122, 675, 122, 122,
  /*  7781 */ 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 617, 122, 122, 122, 656, 0, 0, 659, 660, 122, 122, 122,
  /*  7803 */ 122, 122, 122, 122, 0, 122, 122, 122, 0, 122, 122, 122, 122, 122, 122, 783, 122, 0, 122, 122, 122, 122,
  /*  7825 */ 673, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 251, 0, 122, 122, 691, 0, 0, 0, 0,
  /*  7848 */ 0, 0, 122, 122, 0, 0, 0, 0, 122, 122, 122, 122, 122, 122, 0, 122, 122, 122, 270, 122, 0, 0, 749, 122, 122,
  /*  7873 */ 122, 122, 122, 0, 0, 190, 343, 122, 122, 122, 122, 122, 122, 282, 122, 122, 122, 0, 0, 0, 0, 0, 0, 122,
  /*  7897 */ 122, 0, 0, 0, 0, 0, 0, 0, 758, 122, 760, 122, 122, 122, 122, 122, 122, 122, 122, 388, 122, 122, 122, 122,
  /*  7921 */ 122, 122, 122, 122, 122, 767, 768, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 122, 122, 122, 122, 122, 664, 122, 0,
  /*  7946 */ 122, 122, 122, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 0, 0, 129, 129, 0, 0, 0, 0, 0, 129,
  /*  7975 */ 129, 0, 0, 0, 0, 127, 160, 167, 167, 167, 167, 167, 0, 167, 167, 127, 0, 0, 0, 0, 0, 39936, 0, 0, 0, 0,
  /*  8001 */ 39936, 0, 0, 0, 0, 0, 0, 0, 0, 39936, 39936, 0, 0, 0, 167, 167, 167, 167, 167, 167, 167, 0, 167, 167, 167,
  /*  8026 */ 167, 167, 167, 167, 127, 167, 167, 127, 127, 0, 0, 0, 0, 0, 127, 127, 127, 127, 127, 127, 0, 0, 0, 0, 0,
  /*  8051 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 234, 0, 0, 0, 234, 234, 247, 247, 247, 122, 0, 122, 122,
  /*  8079 */ 122, 122, 122, 281, 0, 0, 319, 122, 122, 324, 190, 343, 0, 270, 122, 122, 0, 0, 0, 0, 0, 0, 122, 122, 0,
  /*  8104 */ 0, 0, 0, 0, 122, 122, 0, 0, 0, 788, 0, 122, 789, 122, 122, 122, 122, 0, 122, 122, 122, 122, 122, 284, 0,
  /*  8129 */ 0, 122, 122, 122, 284, 190, 343, 0, 0, 122, 0, 0, 122, 122, 122, 0, 122, 122, 0, 122, 0, 122, 122, 801,
  /*  8153 */ 151, 0, 0, 151, 0, 151, 128, 128, 0, 0, 151, 0, 151, 128, 128, 0, 0, 0, 180, 180, 180, 248, 248, 122, 0,
  /*  8178 */ 122, 122, 122, 262, 122, 0, 0, 0, 128, 0, 128, 128, 128, 128, 128, 174, 128, 128, 180, 174, 174, 180, 128,
  /*  8201 */ 180, 180, 180, 180, 180, 0, 128, 180, 128, 128, 128, 128, 128, 128, 180, 128, 128, 0, 0, 0, 0, 0, 128,
  /*  8224 */ 128, 128, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 0, 0, 0, 0, 122, 122, 122, 275,
  /*  8253 */ 122, 280, 122, 122, 122, 122, 0, 0, 292, 0, 0, 0, 0, 0, 365, 122, 122, 122, 122, 122, 322, 122, 122, 122,
  /*  8277 */ 122, 122, 122, 416, 122, 122, 122, 122, 122, 122, 251, 0, 122, 122, 122, 298, 0, 0, 0, 0, 0, 0, 305, 122,
  /*  8301 */ 122, 122, 0, 0, 0, 301, 0, 0, 0, 122, 122, 122, 122, 0, 0, 0, 0, 0, 0, 552, 0, 122, 122, 348, 348, 122,
  /*  8327 */ 305, 122, 122, 275, 122, 122, 122, 122, 0, 0, 0, 0, 0, 0, 122, 536, 0, 0, 0, 0, 0, 408, 122, 122, 270,
  /*  8352 */ 122, 122, 122, 122, 122, 513, 122, 122, 122, 122, 518, 122, 122, 122, 0, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0,
  /*  8377 */ 0, 0, 0, 0, 0, 0, 0, 0, 122, 122, 318, 122, 122, 122, 122, 122, 354, 122, 122, 122, 122, 122, 251, 252,
  /*  8401 */ 122, 122, 122, 122, 0, 543, 122, 544, 122, 122, 0, 548, 0, 0, 0, 0, 0, 0, 122, 555, 2529, 122, 122, 584,
  /*  8425 */ 122, 122, 122, 122, 0, 0, 122, 122, 592, 122, 122, 122, 122, 122, 685, 270, 122, 122, 122, 122, 122, 0, 0,
  /*  8448 */ 0, 0, 637, 0, 638, 122, 122, 122, 122, 641, 122, 642, 122, 122, 122, 610, 122, 122, 122, 122, 122, 614,
  /*  8470 */ 122, 122, 122, 122, 122, 122, 122, 0, 563, 0, 0, 0, 0, 0, 0, 122, 122, 122, 635, 0, 0, 0, 0, 0, 0, 639,
  /*  8496 */ 122, 122, 122, 122, 122, 122, 122, 122, 122, 264, 122, 122, 122, 122, 122, 122, 122, 122, 122, 409, 122,
  /*  8517 */ 122, 122, 122, 416, 122, 122, 0, 0, 659, 660, 661, 122, 122, 122, 122, 122, 122, 0, 667, 122, 122, 0, 0,
  /*  8540 */ 122, 0, 0, 0, 348, 348, 348, 0, 2529, 122, 122, 122, 122, 122, 599, 122, 601, 122, 122, 122, 605, 122,
  /*  8562 */ 122, 122, 122, 122, 122, 284, 122, 122, 122, 0, 0, 0, 0, 0, 0, 122, 122, 0, 0, 539, 0, 0, 0, 0, 715, 716,
  /*  8588 */ 122, 717, 122, 122, 122, 0, 122, 122, 122, 122, 122, 122, 0, 0, 122, 122, 122, 122, 190, 343, 5465, 0, 0,
  /*  8611 */ 122, 750, 751, 122, 122, 122, 0, 754, 190, 343, 122, 122, 756, 122, 0, 0, 0, 122, 122, 122, 122, 122, 122,
  /*  8634 */ 0, 122, 255, 261, 263, 122, 0, 0, 0, 122, 122, 122, 122, 122, 122, 0, 122, 257, 122, 122, 122, 122, 510,
  /*  8657 */ 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 734, 122, 122, 0, 759, 122, 122, 122,
  /*  8678 */ 122, 122, 122, 122, 122, 765, 122, 417, 122, 122, 122, 122, 278, 122, 122, 287, 122, 122, 0, 0, 0, 0, 0,
  /*  8701 */ 0, 0, 122, 122, 287, 122, 0, 0, 0, 0, 122, 0, 0, 122, 122, 122, 0, 122, 122, 0, 800, 0, 122, 122, 122,
  /*  8726 */ 585, 122, 122, 122, 0, 0, 122, 122, 122, 122, 122, 122, 122, 122, 122, 0, 0, 0, 0, 0, 122, 122, 0, 0, 0,
  /*  8751 */ 129, 161, 168, 168, 168, 168, 168, 175, 178, 178, 181, 175, 175, 178, 195, 178, 178, 178, 178, 178, 0,
  /*  8772 */ 195, 178, 195, 195, 195, 195, 195, 213, 195, 129, 195, 178, 129, 129, 0, 0, 0, 0, 0, 129, 129, 129, 129,
  /*  8795 */ 129, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 235, 0, 0, 0, 243, 243, 243, 243,
  /*  8825 */ 250, 122, 0, 122, 122, 122, 122, 122, 285, 0, 0, 122, 122, 122, 285, 190, 343, 0, 122, 270, 122, 122, 122,
  /*  8848 */ 122, 122, 122, 122, 122, 0, 0, 0, 0, 0, 0, 0, 0, 122, 270, 122, 0, 0, 0, 0, 0, 0, 0, 122, 122, 122, 122,
  /*  8875 */ 0, 0, 0, 0, 0, 0, 0, 0, 122, 122, 122, 122, 122, 122, 0, 0, 122, 190, 0, 343, 5120, 5120, 5120, 0, 2529,
  /*  8900 */ 122, 122, 122, 122, 306, 122, 122, 122, 122, 122, 251, 252, 122, 122, 122, 122, 122, 404, 122, 122, 122,
  /*  8921 */ 122, 122, 412, 122, 414, 122, 417, 122, 122, 122, 684, 122, 122, 122, 122, 122, 122, 122, 122, 0, 689, 0,
  /*  8943 */ 0, 0, 0, 0, 39936, 39936, 39936, 40144, 0, 39936, 0, 0, 0, 0, 0, 0, 0, 39936, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  8970 */ 0, 0, 0, 29696, 29696, 29696, 0, 690, 122, 0, 0, 0, 0, 0, 0, 122, 122, 0, 0, 0, 0, 122, 122, 122, 122,
  /*  8995 */ 122, 122, 122, 122, 326, 0, 0, 0, 0, 748, 122, 122, 122, 122, 122, 753, 0, 0, 190, 343, 122, 122, 122,
  /*  9018 */ 122, 122, 122, 285, 122, 122, 122, 0, 0, 0, 0, 0, 0, 122, 122, 0, 538, 0, 0, 0, 0, 122, 0, 0, 122, 122,
  /*  9044 */ 122, 797, 122, 799, 0, 122, 0, 122, 122, 122, 0, 122, 122, 122, 122, 122, 414, 122, 122, 0, 122, 122, 122,
  /*  9067 */ 122, 122, 559, 122, 122, 0, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 714, 0, 0,
  /*  9096 */ 122, 122, 122, 122, 122, 0, 122, 122, 122, 122, 122, 122, 0, 0, 122, 270, 122, 122, 190, 343, 0, 122, 281,
  /*  9119 */ 0, 299, 0, 0, 0, 0, 0, 122, 281, 307, 259, 0, 311, 0, 0, 0, 0, 332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122,
  /*  9148 */ 122, 122, 122, 270, 122, 122, 122, 0, 0, 0, 0, 0, 122, 122, 0, 0, 629, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0,
  /*  9176 */ 0, 0, 0, 0, 270, 122, 122, 122, 122, 122, 371, 122, 122, 122, 122, 122, 122, 251, 252, 122, 122, 122, 122,
  /*  9199 */ 0, 0, 0, 316, 122, 319, 122, 122, 122, 122, 324, 122, 0, 0, 0, 0, 0, 122, 626, 0, 0, 0, 0, 0, 0, 0, 122,
  /*  9226 */ 122, 122, 122, 122, 721, 122, 723, 122, 122, 725, 726, 0, 0, 122, 122, 324, 307, 122, 324, 286, 122, 122,
  /*  9248 */ 0, 0, 0, 0, 0, 0, 0, 122, 122, 708, 122, 122, 122, 122, 122, 319, 122, 122, 324, 319, 122, 122, 319, 122,
  /*  9272 */ 251, 252, 122, 122, 122, 122, 122, 122, 378, 122, 122, 122, 251, 252, 122, 122, 122, 387, 727, 122, 122,
  /*  9293 */ 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 414, 0, 0, 0, 130, 130, 130, 130, 145,
  /*  9315 */ 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0, 0, 0, 130, 162, 169, 169, 169, 169, 169, 140, 169,
  /*  9343 */ 169, 145, 140, 184, 187, 169, 187, 187, 187, 187, 187, 211, 169, 187, 169, 169, 169, 169, 169, 224, 169,
  /*  9364 */ 187, 224, 224, 211, 211, 211, 211, 211, 230, 230, 236, 211, 211, 211, 244, 244, 244, 244, 244, 122, 0,
  /*  9385 */ 122, 122, 122, 122, 122, 587, 122, 0, 0, 122, 122, 122, 122, 122, 122, 122, 0, 0, 408, 122, 122, 122, 122,
  /*  9408 */ 122, 267, 122, 122, 122, 122, 122, 122, 122, 122, 122, 0, 0, 0, 0, 0, 0, 0, 569, 122, 0, 332, 122, 122,
  /*  9432 */ 332, 122, 122, 0, 0, 122, 122, 122, 122, 190, 343, 0, 0, 0, 0, 350, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122,
  /*  9459 */ 122, 367, 122, 122, 122, 122, 122, 122, 375, 122, 0, 0, 267, 122, 122, 122, 122, 122, 122, 122, 122, 0, 0,
  /*  9482 */ 0, 0, 0, 0, 0, 681, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 0, 0, 0, 0, 122, 122, 332, 122,
  /*  9507 */ 122, 122, 122, 122, 122, 381, 251, 252, 122, 122, 122, 122, 122, 122, 393, 122, 122, 122, 122, 122, 122,
  /*  9528 */ 122, 122, 122, 122, 269, 122, 122, 122, 122, 122, 419, 0, 0, 0, 0, 424, 425, 122, 122, 0, 0, 0, 0, 0, 0,
  /*  9553 */ 0, 122, 122, 122, 261, 309, 0, 312, 122, 122, 437, 122, 0, 0, 0, 0, 0, 0, 0, 0, 122, 122, 122, 122, 122,
  /*  9578 */ 122, 122, 122, 122, 122, 417, 455, 0, 0, 0, 0, 0, 122, 0, 122, 122, 122, 122, 336, 122, 0, 329, 122, 122,
  /*  9602 */ 336, 122, 190, 343, 0, 519, 122, 122, 122, 122, 122, 122, 122, 122, 525, 122, 122, 122, 122, 122, 122,
  /*  9623 */ 122, 122, 122, 503, 122, 122, 122, 251, 0, 122, 122, 671, 122, 122, 122, 122, 122, 122, 122, 122, 122,
  /*  9644 */ 122, 122, 122, 122, 122, 388, 122, 122, 122, 520, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
  /*  9665 */ 122, 122, 122, 606, 122, 122, 122, 573, 122, 122, 122, 122, 0, 579, 122, 0, 0, 0, 0, 0, 0, 0, 649, 122,
  /*  9689 */ 122, 122, 122, 122, 122, 122, 0, 0, 122, 580, 0, 0, 581, 0, 5120, 670, 122, 122, 122, 122, 122, 122, 122,
  /*  9712 */ 122, 122, 122, 122, 122, 122, 122, 122, 528, 0, 0, 0, 131, 163, 170, 170, 170, 170, 170, 0, 170, 170, 131,
  /*  9735 */ 0, 0, 0, 0, 0, 108544, 0, 108544, 108544, 0, 108544, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
  /*  9763 */ 170, 170, 170, 170, 170, 170, 0, 170, 170, 170, 170, 170, 170, 170, 131, 170, 170, 131, 131, 0, 0, 0, 0,
  /*  9786 */ 0, 131, 131, 131, 131, 131, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 170, 0, 0,
  /*  9816 */ 0, 170, 170, 170, 170, 170, 122, 0, 122, 122, 260, 122, 264, 268, 122, 122, 122, 122, 122, 122, 122, 122,
  /*  9838 */ 122, 290, 0, 0, 0, 0, 0, 0, 0, 46080, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46080, 0, 0, 0, 0, 0, 0, 313, 0, 0, 0,
  /*  9868 */ 122, 260, 122, 321, 122, 122, 122, 122, 0, 0, 0, 0, 624, 122, 122, 0, 0, 0, 0, 0, 632, 0, 122, 0, 321,
  /*  9893 */ 122, 264, 268, 122, 122, 0, 0, 308, 122, 122, 122, 190, 343, 0, 0, 0, 0, 19671, 0, 0, 19671, 19671, 19671,
  /*  9916 */ 19671, 19671, 19671, 19671, 19671, 19671, 3072, 3072, 321, 122, 122, 122, 122, 122, 122, 122, 122, 0, 0,
  /*  9935 */ 0, 0, 0, 0, 122, 122, 0, 0, 0, 0, 122, 122, 122, 662, 122, 122, 122, 0, 122, 122, 122, 122, 308, 321, 122,
  /*  9960 */ 122, 308, 122, 379, 308, 321, 251, 252, 122, 122, 122, 122, 122, 122, 406, 122, 122, 122, 122, 122, 122,
  /*  9981 */ 122, 122, 122, 122, 251, 252, 122, 122, 122, 122, 122, 122, 122, 402, 122, 122, 122, 122, 122, 122, 122,
  /* 10002 */ 122, 122, 122, 122, 418, 0, 0, 0, 0, 0, 0, 122, 122, 122, 122, 122, 122, 122, 122, 306, 122, 122, 122,
  /* 10025 */ 122, 122, 488, 488, 0, 0, 0, 0, 0, 122, 0, 122, 122, 122, 122, 337, 283, 0, 330, 122, 122, 337, 283, 190,
  /* 10049 */ 343, 0, 122, 508, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 516, 122, 122, 122, 122, 338, 122,
  /* 10070 */ 122, 122, 122, 122, 251, 252, 122, 122, 122, 122, 122, 122, 577, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 10096 */ 0, 0, 0, 0, 0, 44032, 122, 270, 122, 122, 122, 523, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
  /* 10119 */ 396, 122, 122, 122, 122, 122, 122, 388, 0, 0, 0, 0, 0, 534, 122, 122, 0, 0, 0, 0, 0, 0, 122, 122, 0, 698,
  /* 10145 */ 0, 0, 122, 700, 542, 0, 122, 122, 122, 122, 547, 0, 0, 0, 0, 0, 0, 0, 554, 122, 0, 0, 0, 423, 0, 0, 122,
  /* 10172 */ 122, 0, 0, 0, 0, 0, 433, 0, 0, 0, 0, 29696, 29696, 29696, 29696, 29696, 0, 0, 0, 29696, 0, 29696, 0, 0, 0,
  /* 10197 */ 0, 0, 0, 0, 29696, 29696, 29696, 0, 0, 0, 29696, 29696, 29696, 0, 0, 0, 0, 0, 141312, 0, 141312, 141312,
  /* 10219 */ 141312, 141312, 141312, 2048, 122, 583, 122, 122, 122, 122, 122, 0, 0, 590, 122, 122, 122, 122, 122, 122,
  /* 10239 */ 122, 122, 122, 730, 122, 122, 122, 122, 122, 736, 122, 122, 122, 122, 598, 122, 122, 122, 122, 122, 122,
  /* 10260 */ 122, 122, 122, 122, 122, 122, 408, 122, 122, 122, 122, 609, 122, 122, 122, 122, 122, 122, 122, 122, 122,
  /* 10281 */ 122, 122, 122, 122, 122, 397, 122, 122, 0, 0, 644, 0, 0, 0, 0, 0, 650, 122, 122, 122, 122, 122, 122, 122,
  /* 10305 */ 122, 122, 677, 122, 122, 122, 122, 122, 122, 122, 122, 122, 410, 122, 122, 122, 415, 122, 122, 122, 122,
  /* 10326 */ 692, 0, 0, 694, 0, 0, 122, 122, 0, 0, 0, 0, 122, 122, 122, 122, 122, 122, 282, 122, 0, 0, 0, 0, 122, 122,
  /* 10352 */ 122, 728, 122, 729, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 679, 616, 122, 122, 122, 122,
  /* 10373 */ 271, 122, 122, 122, 122, 122, 122, 122, 122, 0, 0, 0, 0, 0, 0, 122, 122, 122, 467, 122, 271, 122, 0, 0, 0,
  /* 10398 */ 0, 0, 303, 0, 122, 122, 122, 122, 0, 0, 0, 442, 0, 0, 0, 0, 122, 122, 122, 450, 122, 572, 122, 122, 122,
  /* 10423 */ 122, 122, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 0, 122, 122, 270, 122, 682, 122, 122, 122, 122, 122, 122, 122,
  /* 10448 */ 122, 122, 122, 0, 0, 0, 0, 0, 0, 132, 154, 0, 0, 0, 0, 0, 132, 132, 0, 0, 0, 141, 154, 0, 132, 132, 132,
  /* 10475 */ 132, 132, 0, 132, 132, 132, 0, 0, 0, 0, 122, 122, 122, 790, 122, 122, 0, 122, 122, 122, 122, 122, 122,
  /* 10498 */ 122, 122, 122, 687, 122, 122, 0, 0, 0, 0, 0, 647, 648, 0, 122, 122, 122, 122, 122, 122, 655, 0, 132, 196,
  /* 10522 */ 199, 199, 199, 199, 199, 0, 196, 199, 196, 196, 196, 196, 196, 132, 196, 199, 132, 132, 0, 0, 0, 0, 0,
  /* 10545 */ 132, 132, 132, 132, 132, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 0, 0, 196, 0, 0, 0, 196, 196, 196,
  /* 10573 */ 196, 196, 122, 0, 122, 122, 122, 122, 122, 122, 122, 122, 419, 122, 122, 122, 122, 122, 122, 122, 0, 0,
  /* 10595 */ 122, 0, 0, 0, 0, 0, 0, 0, 0, 122, 122, 122, 122, 272, 122, 122, 122, 122, 122, 122, 122, 122, 0, 291, 0,
  /* 10620 */ 0, 0, 0, 0, 0, 133, 133, 0, 0, 0, 0, 0, 133, 133, 0, 296, 122, 0, 0, 0, 0, 0, 0, 0, 122, 122, 122, 122, 0,
  /* 10649 */ 0, 0, 0, 551, 0, 0, 0, 122, 122, 0, 314, 0, 0, 122, 122, 122, 122, 322, 122, 122, 122, 0, 327, 0, 0, 0, 0,
  /* 10676 */ 122, 122, 262, 122, 122, 122, 122, 122, 0, 0, 0, 0, 695, 0, 122, 122, 0, 0, 0, 0, 122, 122, 122, 122, 122,
  /* 10701 */ 122, 122, 122, 0, 0, 0, 0, 461, 0, 122, 122, 122, 122, 122, 0, 122, 122, 334, 122, 122, 122, 291, 0, 122,
  /* 10725 */ 341, 122, 122, 190, 343, 0, 0, 0, 0, 33792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 359,
  /* 10754 */ 0, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 272, 122, 122, 122, 341, 122, 122, 122, 334, 122, 122, 251, 252,
  /* 10779 */ 122, 122, 122, 122, 122, 122, 500, 122, 122, 122, 122, 122, 122, 251, 0, 122, 400, 122, 122, 122, 122,
  /* 10800 */ 122, 122, 122, 122, 122, 122, 122, 413, 122, 122, 122, 122, 373, 122, 122, 122, 122, 122, 251, 252, 122,
  /* 10821 */ 122, 122, 122, 122, 414, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 688, 0, 0, 0, 0, 122, 122,
  /* 10844 */ 453, 122, 122, 0, 0, 458, 0, 0, 0, 464, 122, 122, 122, 122, 122, 122, 511, 122, 122, 122, 122, 122, 122,
  /* 10867 */ 517, 122, 122, 122, 122, 0, 0, 122, 190, 0, 343, 0, 0, 0, 0, 0, 122, 122, 122, 258, 122, 350, 122, 122,
  /* 10891 */ 122, 122, 122, 122, 486, 122, 122, 122, 0, 0, 0, 0, 0, 122, 0, 122, 122, 122, 495, 608, 122, 122, 122,
  /* 10914 */ 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 620, 122, 122, 683, 122, 122, 122, 122, 270,
  /* 10935 */ 122, 122, 122, 122, 0, 0, 0, 0, 0, 0, 134, 134, 0, 0, 0, 0, 0, 134, 134, 0, 0, 122, 0, 0, 0, 769, 0, 122,
  /* 10963 */ 0, 0, 0, 0, 122, 122, 122, 122, 663, 122, 122, 0, 122, 122, 122, 122, 0, 776, 777, 122, 0, 780, 122, 122,
  /* 10987 */ 122, 122, 122, 122, 122, 0, 122, 122, 778, 779, 122, 781, 782, 122, 122, 122, 122, 122, 785, 786, 269,
  /* 11008 */ 122, 273, 122, 122, 122, 122, 122, 288, 122, 0, 0, 0, 0, 0, 0, 122, 122, 428, 0, 0, 0, 0, 0, 0, 0, 0, 315,
  /* 11035 */ 0, 317, 261, 320, 269, 122, 323, 122, 325, 0, 0, 0, 0, 0, 0, 135, 155, 0, 0, 142, 0, 0, 135, 135, 0, 0,
  /* 11061 */ 269, 122, 122, 269, 122, 122, 0, 0, 261, 122, 122, 122, 190, 343, 0, 0, 0, 0, 37888, 0, 0, 37888, 37888,
  /* 11084 */ 0, 0, 0, 37888, 37888, 0, 37888, 37888, 37888, 0, 0, 0, 0, 0, 141312, 0, 141312, 141312, 141312, 141312,
  /* 11104 */ 141312, 0, 0, 269, 122, 122, 122, 122, 122, 122, 356, 357, 0, 0, 0, 0, 0, 0, 124, 124, 0, 0, 0, 0, 0, 124,
  /* 11130 */ 124, 0, 122, 368, 370, 122, 122, 368, 369, 122, 368, 370, 251, 252, 122, 122, 386, 122, 0, 0, 0, 645, 0,
  /* 11153 */ 0, 0, 0, 122, 122, 122, 652, 653, 122, 122, 0, 0, 122, 0, 0, 0, 0, 4096, 0, 0, 0, 482, 483, 122, 451, 122,
  /* 11179 */ 122, 454, 122, 0, 0, 0, 460, 0, 0, 122, 122, 122, 122, 469, 122, 122, 597, 122, 122, 122, 122, 122, 122,
  /* 11202 */ 122, 122, 122, 122, 122, 122, 122, 122, 619, 122, 0, 0, 0, 133, 0, 133, 133, 133, 133, 133, 176, 133, 133,
  /* 11225 */ 182, 176, 176, 185, 188, 133, 188, 188, 188, 188, 188, 0, 133, 188, 133, 133, 133, 133, 133, 133, 182,
  /* 11246 */ 133, 133, 0, 0, 0, 0, 0, 133, 133, 133, 133, 133, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
  /* 11275 */ 0, 0, 0, 0, 133, 0, 0, 0, 188, 188, 188, 188, 188, 122, 0, 122, 122, 122, 122, 122, 122, 122, 122, 602,
  /* 11299 */ 122, 122, 122, 122, 122, 122, 122, 0, 0, 122, 580, 0, 0, 581, 0, 0, 122, 436, 122, 122, 0, 0, 0, 0, 0, 0,
  /* 11325 */ 0, 0, 122, 122, 122, 122, 122, 267, 122, 122, 122, 122, 122, 122, 122, 472, 0, 122, 0, 0, 0, 0, 0, 0, 0,
  /* 11350 */ 0, 122, 122, 122, 260, 122, 321, 122, 122, 122, 122, 122, 775, 0, 122, 122, 122, 0, 122, 122, 122, 122,
  /* 11372 */ 122, 122, 122, 122, 0, 122, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 122, 122, 122, 122, 122, 122, 665, 0, 122,
  /* 11397 */ 122, 122, 0, 0, 0, 134, 134, 134, 134, 134, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
  /* 11426 */ 0, 0, 0, 0, 0, 134, 0, 134, 134, 134, 134, 134, 0, 134, 134, 134, 0, 0, 0, 0, 122, 122, 718, 122, 122, 0,
  /* 11452 */ 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 270, 122, 122, 122, 122, 122, 122, 122, 0,
  /* 11473 */ 134, 134, 134, 134, 134, 134, 134, 0, 134, 134, 134, 134, 134, 134, 134, 134, 134, 0, 0, 0, 0, 0, 134,
  /* 11496 */ 134, 237, 0, 0, 0, 237, 237, 237, 237, 237, 122, 0, 122, 256, 122, 122, 122, 122, 391, 122, 122, 122, 122,
  /* 11519 */ 122, 395, 122, 122, 122, 122, 122, 122, 122, 122, 502, 122, 504, 502, 122, 251, 0, 122, 0, 0, 122, 122,
  /* 11541 */ 122, 352, 122, 122, 355, 122, 122, 0, 0, 0, 0, 0, 0, 122, 122, 697, 0, 0, 0, 699, 122, 122, 122, 415, 122,
  /* 11566 */ 0, 0, 0, 0, 0, 0, 0, 0, 122, 122, 122, 122, 262, 122, 122, 372, 122, 122, 122, 122, 471, 0, 0, 122, 190,
  /* 11591 */ 0, 343, 0, 0, 0, 0, 0, 122, 122, 122, 319, 122, 122, 122, 122, 324, 374, 376, 122, 496, 122, 122, 122,
  /* 11614 */ 499, 122, 122, 122, 122, 122, 122, 122, 251, 0, 122, 0, 0, 0, 0, 0, 122, 0, 0, 0, 772, 122, 122, 122, 122,
  /* 11639 */ 122, 122, 515, 122, 122, 122, 731, 122, 122, 122, 122, 122, 0, 489, 0, 0, 0, 122, 0, 492, 493, 122, 122,
  /* 11662 */ 0, 0, 122, 122, 122, 122, 0, 0, 549, 0, 0, 0, 0, 553, 122, 122, 0, 0, 122, 0, 0, 0, 5465, 347, 347, 5600,
  /* 11688 */ 2529, 122, 122, 122, 122, 586, 122, 122, 0, 0, 122, 122, 122, 122, 122, 122, 0, 0, 190, 343, 122, 122,
  /* 11710 */ 122, 122, 556, 122, 122, 122, 122, 560, 122, 0, 0, 0, 0, 0, 0, 0, 0, 122, 122, 122, 719, 720, 0, 122, 122,
  /* 11735 */ 122, 122, 122, 122, 122, 0, 0, 122, 122, 122, 122, 122, 122, 0, 0, 0, 0, 122, 122, 122, 122, 122, 122,
  /* 11758 */ 122, 0, 122, 122, 122, 122, 122, 122, 122, 122, 0, 622, 623, 0, 0, 625, 122, 0, 0, 0, 0, 0, 0, 0, 633,
  /* 11783 */ 122, 643, 0, 0, 0, 0, 0, 0, 0, 122, 651, 122, 122, 122, 122, 122, 122, 122, 122, 686, 122, 122, 122, 0, 0,
  /* 11808 */ 0, 0, 122, 657, 0, 0, 0, 122, 122, 122, 122, 122, 122, 122, 0, 122, 122, 669, 122, 122, 672, 122, 122,
  /* 11831 */ 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 735, 122, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 11856 */ 0, 0, 0, 142, 0, 0, 0, 0, 0, 142, 0, 135, 0, 0, 0, 0, 0, 0, 142, 155, 164, 171, 171, 171, 171, 171, 177,
  /* 11883 */ 171, 171, 183, 177, 177, 189, 197, 200, 200, 200, 200, 200, 0, 197, 200, 197, 197, 197, 197, 197, 135,
  /* 11904 */ 197, 200, 135, 135, 0, 0, 0, 0, 0, 135, 135, 135, 135, 135, 146, 0, 0, 0, 0, 0, 0, 0, 0, 56320, 0, 0, 0,
  /* 11931 */ 0, 0, 0, 0, 0, 52224, 0, 0, 0, 0, 0, 0, 0, 0, 46290, 0, 0, 0, 0, 0, 0, 0, 0, 44241, 0, 0, 0, 0, 0, 0, 0,
  /* 11962 */ 0, 44032, 0, 0, 0, 0, 0, 0, 0, 0, 44032, 0, 0, 238, 0, 0, 0, 245, 245, 245, 245, 245, 122, 0, 254, 122,
  /* 11988 */ 122, 122, 122, 122, 122, 561, 0, 0, 0, 0, 0, 0, 0, 0, 122, 366, 122, 122, 122, 122, 122, 122, 122, 122,
  /* 12012 */ 122, 251, 252, 384, 385, 122, 122, 0, 122, 254, 122, 122, 122, 122, 0, 0, 122, 122, 122, 122, 190, 343, 0,
  /* 12035 */ 0, 0, 0, 38912, 0, 0, 0, 0, 0, 0, 0, 0, 38912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 388, 122, 122, 122, 122,
  /* 12063 */ 122, 388, 122, 122, 122, 122, 122, 122, 122, 398, 122, 122, 122, 456, 0, 0, 0, 0, 0, 122, 465, 122, 122,
  /* 12086 */ 122, 122, 403, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 680, 122, 122, 122, 122,
  /* 12107 */ 0, 0, 398, 0, 0, 0, 0, 0, 0, 0, 0, 122, 122, 122, 122, 122, 122, 0, 122, 122, 122, 122, 122, 122, 122,
  /* 12132 */ 122, 530, 0, 0, 0, 533, 0, 122, 122, 0, 0, 0, 0, 0, 743, 0, 744, 122, 0, 0, 0, 0, 0, 0, 122, 122, 545,
  /* 12159 */ 546, 0, 0, 0, 0, 0, 0, 0, 0, 122, 122, 317, 368, 369, 370, 122, 122, 122, 122, 122, 0, 582, 122, 122, 122,
  /* 12184 */ 122, 122, 122, 0, 0, 122, 122, 122, 122, 122, 122, 122, 122, 764, 122, 122, 122, 122, 766, 515, 122, 621,
  /* 12206 */ 0, 0, 0, 0, 122, 122, 0, 0, 0, 0, 0, 0, 0, 122, 122, 745, 0, 0, 0, 122, 634, 0, 0, 0, 0, 0, 0, 0, 122,
  /* 12235 */ 122, 122, 122, 122, 122, 122, 122, 282, 122, 122, 122, 122, 0, 693, 0, 0, 0, 0, 122, 122, 0, 0, 0, 0, 122,
  /* 12260 */ 122, 122, 122, 122, 122, 283, 122, 0, 0, 0, 330, 0, 122, 122, 0, 0, 0, 741, 0, 0, 0, 122, 122, 0, 0, 0, 0,
  /* 12287 */ 0, 0, 137, 137, 0, 0, 0, 0, 0, 137, 137, 0, 0, 122, 795, 0, 122, 122, 122, 0, 798, 122, 0, 122, 0, 122,
  /* 12313 */ 122, 122, 761, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 506, 251, 0, 122, 0, 148, 0, 0,
  /* 12336 */ 0, 0, 0, 0, 0, 143, 148, 136, 0, 0, 0, 0, 0, 0, 138, 138, 0, 0, 0, 0, 0, 138, 138, 0, 0, 148, 148, 0, 0,
  /* 12365 */ 0, 136, 156, 0, 0, 0, 148, 0, 136, 136, 0, 0, 0, 0, 44241, 0, 0, 44241, 44241, 44241, 44241, 44241, 44241,
  /* 12388 */ 44241, 44241, 44241, 0, 0, 143, 156, 0, 136, 136, 136, 136, 136, 0, 136, 136, 136, 0, 0, 0, 0, 122, 258,
  /* 12411 */ 122, 266, 122, 122, 122, 122, 0, 0, 0, 0, 302, 0, 0, 122, 122, 122, 122, 0, 0, 0, 550, 0, 0, 0, 0, 122,
  /* 12437 */ 122, 0, 136, 198, 201, 201, 201, 201, 201, 0, 198, 201, 198, 198, 198, 198, 198, 136, 198, 201, 136, 136,
  /* 12459 */ 0, 0, 0, 0, 0, 136, 136, 136, 136, 136, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 239, 0, 0, 0,
  /* 12489 */ 239, 239, 239, 239, 239, 122, 0, 122, 122, 122, 122, 122, 122, 122, 265, 122, 122, 251, 252, 122, 122,
  /* 12510 */ 122, 122, 122, 297, 0, 0, 0, 0, 0, 0, 0, 122, 282, 122, 122, 0, 0, 0, 636, 0, 0, 0, 122, 122, 122, 640,
  /* 12536 */ 122, 122, 122, 331, 122, 122, 122, 122, 122, 338, 0, 0, 122, 122, 122, 338, 190, 343, 0, 0, 0, 0, 46302,
  /* 12559 */ 0, 0, 46302, 46302, 46309, 46309, 46309, 46309, 46309, 46309, 46309, 0, 0, 122, 122, 282, 122, 122, 338,
  /* 12578 */ 122, 122, 122, 0, 0, 0, 0, 0, 696, 122, 122, 0, 0, 0, 0, 122, 122, 388, 389, 122, 122, 122, 122, 122, 122,
  /* 12603 */ 394, 122, 122, 122, 122, 122, 122, 399, 122, 401, 122, 122, 122, 122, 122, 407, 122, 122, 122, 122, 122,
  /* 12624 */ 122, 122, 122, 122, 122, 604, 122, 122, 122, 122, 122, 122, 0, 421, 0, 0, 0, 0, 426, 122, 0, 0, 430, 0,
  /* 12648 */ 432, 0, 0, 0, 0, 147, 0, 127, 127, 0, 0, 0, 0, 0, 127, 127, 0, 122, 452, 122, 122, 122, 0, 0, 0, 0, 0, 0,
  /* 12676 */ 122, 122, 122, 122, 122, 122, 122, 122, 373, 122, 122, 122, 122, 0, 0, 474, 190, 0, 343, 0, 0, 0, 0, 0,
  /* 12700 */ 122, 122, 122, 122, 122, 122, 0, 122, 122, 122, 122, 733, 485, 122, 122, 122, 122, 0, 0, 0, 0, 0, 122, 0,
  /* 12724 */ 399, 122, 122, 122, 122, 439, 0, 0, 0, 443, 0, 0, 446, 447, 122, 122, 122, 122, 388, 122, 122, 122, 122,
  /* 12747 */ 122, 122, 122, 0, 0, 0, 0, 0, 122, 122, 0, 628, 0, 0, 0, 0, 0, 122, 122, 122, 122, 122, 122, 284, 122, 0,
  /* 12773 */ 0, 0, 0, 0, 122, 122, 627, 0, 0, 0, 0, 0, 0, 122, 122, 122, 122, 122, 122, 792, 122, 794, 122, 122, 122,
  /* 12798 */ 122, 122, 122, 497, 122, 122, 122, 122, 389, 122, 122, 505, 122, 251, 0, 507, 571, 122, 122, 122, 575,
  /* 12819 */ 122, 122, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 2529, 122, 122, 122, 122, 596, 122, 122, 122, 122, 122, 122,
  /* 12843 */ 122, 122, 122, 122, 122, 122, 122, 122, 527, 122, 122, 122, 270, 122, 122, 122, 122, 122, 122, 122, 122,
  /* 12864 */ 122, 122, 122, 122, 122, 122, 289, 0, 0, 0, 0, 0, 122, 122, 0, 0, 0, 0, 0, 0, 0, 122, 122, 122, 122, 0, 0,
  /* 12891 */ 0, 122, 122, 0, 0, 702, 0, 0, 0, 706, 122, 122, 122, 709, 122, 122, 712, 713, 0, 0, 0, 122, 122, 122, 122,
  /* 12916 */ 122, 0, 122, 122, 724, 122, 122, 122, 122, 455, 0, 0, 0, 459, 0, 0, 122, 122, 122, 122, 468, 0, 122, 122,
  /* 12940 */ 739, 0, 0, 0, 0, 0, 0, 122, 122, 0, 0, 747, 0, 0, 0, 0, 48492, 141312, 141312, 141312, 141312, 141312,
  /* 12962 */ 141312, 141312, 141312, 141312, 141312, 141312, 0, 0, 122, 122, 122, 752, 122, 122, 0, 0, 0, 0, 122, 122,
  /* 12982 */ 122, 122, 122, 0, 122, 122, 122, 122, 122, 122, 0, 122, 0, 0, 0, 0, 0, 122, 770, 0, 0, 0, 773, 122, 122,
  /* 13007 */ 122, 122, 498, 437, 122, 501, 122, 122, 122, 122, 122, 251, 0, 122, 787, 0, 0, 0, 122, 122, 122, 122, 791,
  /* 13030 */ 122, 0, 793, 122, 122, 122, 122, 122, 392, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
  /* 13051 */ 733, 122, 122, 122, 122, 122, 122, 276, 279, 122, 283, 122, 122, 122, 0, 0, 0, 293, 0, 0, 0, 0, 153, 0,
  /* 13075 */ 126, 126, 0, 0, 0, 0, 0, 126, 126, 0, 122, 283, 0, 0, 0, 0, 0, 0, 0, 276, 306, 122, 122, 0, 0, 0, 703,
  /* 13102 */ 704, 705, 0, 122, 122, 122, 122, 710, 711, 122, 0, 0, 122, 351, 306, 122, 276, 283, 122, 122, 122, 0, 0,
  /* 13125 */ 0, 0, 0, 122, 122, 0, 0, 0, 0, 0, 0, 0, 122, 122, 0, 0, 0, 0, 122, 122, 0, 0, 122, 475, 0, 478, 0, 0, 0,
  /* 13154 */ 0, 0, 122, 122, 484, 122, 122, 388, 122, 122, 0, 0, 0, 0, 0, 122, 0, 122, 122, 122, 122, 122, 405, 122,
  /* 13178 */ 122, 408, 122, 122, 122, 122, 122, 122, 122, 0, 0, 122, 580, 0, 0, 581, 5600, 5600, 450, 122, 122, 122,
  /* 13200 */ 122, 122, 484, 122, 122, 122, 122, 122, 122, 251, 0, 122, 0, 0, 0, 0, 0, 122, 0, 0, 771, 0, 122, 122, 122,
  /* 13225 */ 774, 595, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 607, 0, 0, 0, 137, 0, 137,
  /* 13248 */ 137, 137, 137, 172, 0, 137, 137, 137, 0, 0, 0, 0, 214, 0, 0, 214, 214, 17622, 17622, 17622, 17622, 17622,
  /* 13270 */ 17622, 17622, 0, 137, 172, 202, 202, 203, 203, 203, 0, 172, 203, 172, 172, 172, 172, 172, 137, 172, 203,
  /* 13291 */ 137, 137, 0, 0, 0, 0, 0, 137, 137, 137, 137, 137, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33792,
  /* 13320 */ 33792, 0, 33792, 0, 172, 0, 0, 0, 172, 172, 172, 172, 172, 122, 0, 122, 122, 122, 122, 122, 122, 122, 515,
  /* 13343 */ 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 411, 122, 122, 122, 122, 122, 122, 122, 122, 521, 122,
  /* 13364 */ 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 618, 122, 122, 122, 122, 122, 574, 122, 122,
  /* 13385 */ 122, 0, 0, 122, 0, 0, 0, 0, 0, 0, 398, 122, 0, 0, 0, 0, 0, 0, 434, 144, 0, 0, 138, 138, 138, 138, 138,
  /* 13412 */ 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54272, 0, 0, 0, 54272, 0, 0, 0, 138, 0, 138, 138, 138,
  /* 13441 */ 138, 138, 0, 138, 138, 138, 0, 0, 0, 0, 216, 0, 0, 216, 216, 24792, 24792, 24792, 24792, 24792, 24792,
  /* 13462 */ 24792, 0, 138, 138, 138, 138, 138, 138, 138, 0, 138, 138, 138, 138, 138, 138, 138, 138, 138, 0, 0, 0, 0,
  /* 13485 */ 0, 138, 138, 240, 0, 0, 0, 240, 240, 240, 240, 240, 122, 0, 122, 122, 122, 122, 122, 122, 122, 562, 0, 0,
  /* 13509 */ 0, 566, 0, 568, 0, 122, 122, 284, 0, 0, 0, 0, 0, 0, 0, 122, 284, 122, 122, 0, 0, 0, 122, 122, 122, 122,
  /* 13535 */ 122, 122, 0, 122, 122, 122, 122, 122, 122, 122, 589, 0, 122, 591, 122, 122, 594, 122, 0, 0, 122, 122, 284,
  /* 13558 */ 122, 122, 284, 122, 122, 122, 0, 0, 0, 0, 0, 122, 122, 0, 0, 0, 0, 631, 0, 0, 122, 122, 0, 0, 422, 0, 0,
  /* 13585 */ 0, 122, 122, 0, 0, 0, 0, 0, 0, 0, 122, 122, 122, 308, 0, 0, 0, 435, 122, 122, 122, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 13614 */ 122, 122, 122, 122, 122, 0, 722, 122, 122, 122, 122, 122, 122, 122, 122, 122, 674, 122, 122, 122, 122,
  /* 13635 */ 122, 122, 122, 122, 122, 122, 122, 122, 526, 122, 122, 122, 0, 122, 122, 265, 122, 122, 122, 0, 0, 122,
  /* 13657 */ 122, 122, 122, 190, 343, 0, 0, 0, 0, 52224, 0, 0, 52224, 52224, 52224, 52224, 52224, 52224, 52224, 52224,
  /* 13677 */ 52224, 122, 285, 0, 0, 0, 0, 0, 0, 0, 122, 285, 122, 122, 310, 0, 0, 0, 0, 221, 0, 39936, 221, 40157,
  /* 13701 */ 40164, 40164, 40164, 40164, 40164, 40164, 40164, 0, 0, 122, 122, 285, 122, 122, 354, 122, 122, 122, 0, 0,
  /* 13721 */ 0, 0, 0, 122, 122, 0, 0, 0, 630, 0, 0, 0, 122, 122, 122, 270, 122, 122, 0, 0, 0, 0, 0, 122, 0, 122, 122,
  /* 13748 */ 122, 122, 122, 576, 122, 0, 0, 122, 0, 0, 0, 0, 0, 0, 122, 122, 0, 0, 0, 431, 0, 0, 0, 0, 122, 122, 0, 0,
  /* 13776 */ 740, 0, 0, 0, 0, 122, 122, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 129, 0, 0, 0, 0, 0, 0, 131, 131, 0, 0, 0, 0,
  /* 13807 */ 0, 131, 131, 0, 0, 122, 0, 0, 122, 796, 122, 0, 122, 122, 0, 122, 0, 122, 122, 122, 122, 522, 122, 122,
  /* 13831 */ 122, 523, 122, 122, 389, 122, 122, 122, 122, 122, 122, 600, 122, 122, 603, 122, 122, 122, 122, 122, 122,
  /* 13852 */ 122, 0, 0, 535, 580, 0, 0, 581, 0, 0, 108544, 108544, 0, 108544, 108544, 108544, 0, 108544, 108544, 0, 0,
  /* 13873 */ 0, 0, 0, 0, 0, 0, 109780, 0, 0, 0, 0, 0, 0, 0, 151, 0, 0, 0, 128, 0, 0, 0, 0, 108544, 0, 0, 108544,
  /* 13900 */ 108544, 108544, 108544, 108544, 108544, 141312, 0, 141312, 141312, 141312, 141312, 141312, 0, 0, 0, 0,
  /* 13916 */ 109793, 0, 0, 109793, 109793, 109793, 109793, 109793, 109793, 109793, 109793, 109793, 0, 109793, 109793,
  /* 13931 */ 109793, 0, 0, 0, 0, 0, 141312, 0, 141312, 141312, 141312, 141312, 141312, 0, 0, 0, 111616, 141312, 0, 0,
  /* 13951 */ 0, 0, 0, 0, 0, 0, 0, 0, 141312, 0, 0, 0, 0, 0, 360, 0, 0, 0, 0, 141312, 0, 0, 0, 0, 0, 0, 252, 0, 0, 0,
  /* 13981 */ 141312, 111616, 0, 0, 0, 0, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312,
  /* 13996 */ 141312, 141312, 112640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26830, 26830, 0, 26830, 26830, 26830,
  /* 14020 */ 26830, 26830, 0, 0, 0, 112640, 112640, 0, 0, 112640, 0, 0, 112640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 14045 */ 112640, 112640, 0, 0, 112640, 112640, 112640, 112640, 112640, 112640, 0, 0, 0, 112640, 0, 0, 0, 0, 0, 0,
  /* 14065 */ 0, 0, 0, 0, 0, 112640, 0, 112640, 0, 0, 112640, 0, 0, 0, 0, 112640, 0, 0, 112640, 112640, 112640, 112640,
  /* 14087 */ 112640, 112640, 112640, 112640, 141312, 0, 141312, 141312, 141312, 141312, 141312, 0, 0, 113664, 0, 0, 0,
  /* 14104 */ 0, 0, 0, 113664, 0, 113664, 113664, 113664, 113664, 113664, 0, 113664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 14126 */ 30927, 30927, 0, 30927, 30927, 30927, 30927, 30927, 113664, 0, 0, 0, 113664, 113664, 113664, 113664,
  /* 14142 */ 113664, 141312, 0, 141312, 141312, 141312, 141312, 141312, 14336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 14164 */ 0, 0, 33792, 0, 0, 0, 0, 33792, 0, 0
];

JavaJS.EXPECTED =
[
  /*    0 */ 201, 207, 203, 211, 215, 219, 223, 227, 284, 237, 334, 244, 248, 480, 252, 281, 315, 315, 262, 256, 230,
  /*   21 */ 275, 290, 316, 315, 315, 294, 323, 307, 233, 278, 315, 315, 300, 286, 304, 311, 315, 254, 320, 286, 328,
  /*   42 */ 315, 296, 326, 314, 332, 338, 258, 342, 240, 577, 346, 350, 354, 358, 362, 366, 724, 395, 271, 432, 517,
  /*   63 */ 378, 369, 382, 517, 517, 389, 399, 403, 517, 385, 441, 517, 517, 407, 411, 415, 453, 555, 268, 517, 422,
  /*   84 */ 426, 430, 517, 436, 683, 418, 445, 518, 439, 598, 447, 517, 702, 517, 452, 517, 448, 392, 458, 465, 461,
  /*  105 */ 469, 473, 477, 627, 484, 488, 492, 539, 553, 496, 500, 517, 517, 503, 507, 509, 513, 522, 526, 517, 517,
  /*  126 */ 542, 530, 532, 536, 546, 550, 517, 559, 563, 567, 571, 581, 454, 585, 588, 592, 596, 602, 606, 574, 610,
  /*  147 */ 614, 618, 622, 626, 631, 637, 641, 645, 649, 653, 657, 517, 667, 678, 517, 730, 671, 677, 682, 517, 517,
  /*  168 */ 689, 687, 515, 517, 693, 699, 517, 517, 673, 706, 695, 517, 663, 372, 517, 711, 707, 516, 662, 265, 517,
  /*  189 */ 715, 517, 717, 660, 722, 517, 728, 517, 718, 374, 633, 265, 734, 745, 745, 745, 746, 777, 738, 749, 775,
  /*  210 */ 742, 744, 747, 753, 766, 769, 748, 772, 781, 784, 787, 791, 797, 795, 801, 804, 808, 812, 816, 819, 1387,
  /*  231 */ 822, 1287, 833, 1388, 883, 845, 1389, 1395, 1386, 1390, 1160, 892, 1394, 831, 1388, 1386, 884, 840, 1387,
  /*  250 */ 879, 1217, 853, 867, 1387, 1387, 1387, 1395, 1395, 1387, 1384, 1387, 1390, 1287, 1390, 1395, 825, 1225,
  /*  268 */ 1395, 859, 1075, 1395, 1003, 1395, 1285, 1389, 843, 874, 878, 1387, 1382, 869, 870, 835, 1387, 1387, 1389,
  /*  287 */ 1395, 1386, 1387, 1387, 1390, 1288, 868, 1388, 1395, 1383, 1395, 1382, 1395, 1390, 1382, 1395, 1287, 822,
  /*  305 */ 1395, 831, 1387, 1388, 824, 1287, 1290, 1163, 1387, 888, 1387, 1387, 1387, 1387, 836, 1389, 1395, 1389,
  /*  323 */ 1382, 1389, 1395, 1382, 1387, 1078, 1387, 1385, 869, 1289, 1287, 1395, 1387, 1387, 823, 1385, 1385, 1387,
  /*  341 */ 1384, 1289, 1388, 1384, 1386, 925, 910, 1395, 922, 928, 932, 1364, 936, 940, 943, 947, 951, 954, 961, 965,
  /*  361 */ 957, 969, 973, 977, 981, 985, 988, 991, 1395, 1025, 1031, 1395, 1049, 1395, 1395, 1298, 824, 1154, 1395,
  /*  380 */ 825, 1015, 1037, 1027, 856, 1395, 1064, 1046, 1053, 1392, 1395, 1395, 1076, 1395, 1094, 1395, 1075, 860,
  /*  398 */ 1220, 861, 995, 1395, 1228, 1395, 1284, 1395, 1285, 1395, 1394, 1395, 1074, 859, 993, 997, 1226, 997, 1395,
  /*  417 */ 1286, 1395, 1075, 993, 1226, 1392, 1395, 1073, 858, 993, 997, 1227, 1032, 1284, 1395, 1283, 1395, 999,
  /*  435 */ 1395, 1055, 858, 1074, 1395, 1075, 1395, 1395, 860, 1062, 1283, 1395, 1283, 1395, 1395, 1395, 1180, 1284,
  /*  453 */ 1285, 1395, 1395, 1395, 1063, 826, 1075, 1315, 1395, 1098, 1100, 1104, 1265, 1199, 1082, 1088, 1108, 1120,
  /*  471 */ 1122, 1112, 1113, 1117, 1126, 1134, 1136, 1140, 1144, 1395, 1169, 849, 1287, 1093, 917, 1366, 1076, 1441,
  /*  489 */ 1409, 1442, 1056, 1151, 863, 1173, 1189, 1374, 1057, 1325, 1232, 1396, 1236, 1246, 1395, 1182, 914, 1275,
  /*  507 */ 1367, 1395, 1441, 1409, 1250, 1339, 1336, 1021, 1395, 1077, 1395, 1395, 1395, 1395, 1054, 1254, 1395, 1129,
  /*  525 */ 1322, 1326, 1258, 825, 1042, 1277, 1183, 1298, 1443, 862, 1009, 1263, 1008, 1020, 1395, 1196, 1203, 1395,
  /*  543 */ 1180, 1184, 916, 1077, 1254, 1058, 1128, 1269, 1395, 1041, 1395, 1211, 1395, 1395, 903, 1054, 1395, 1273,
  /*  561 */ 915, 1276, 1075, 1298, 1408, 1440, 1409, 1453, 1011, 1006, 1018, 895, 1254, 1347, 1308, 1223, 1395, 1214,
  /*  579 */ 1084, 900, 1324, 1259, 1040, 1282, 913, 917, 1316, 1192, 1453, 1011, 1007, 1019, 896, 1346, 1128, 1310,
  /*  597 */ 827, 1395, 1395, 1068, 1285, 1185, 1304, 1278, 1147, 1010, 1007, 1019, 906, 1185, 1314, 1130, 1333, 1455,
  /*  615 */ 1346, 1350, 1225, 1320, 1330, 1345, 1349, 1185, 1357, 1348, 1354, 1361, 1395, 1395, 1395, 1181, 1205, 1380,
  /*  633 */ 1395, 1395, 1091, 1395, 1242, 1371, 1385, 1239, 1241, 1378, 1166, 1405, 1402, 1157, 1395, 1293, 1395, 1413,
  /*  651 */ 1417, 1421, 1424, 1431, 1427, 756, 1435, 759, 762, 1395, 1224, 1395, 1395, 1341, 1300, 1395, 1206, 1295,
  /*  669 */ 1395, 1397, 1395, 1373, 1395, 1395, 1205, 1294, 1033, 1395, 1395, 1395, 1291, 1450, 1395, 1395, 1395, 1393,
  /*  687 */ 1395, 1398, 1395, 1395, 1207, 1296, 1341, 1176, 1395, 1395, 1292, 1395, 1395, 1395, 1447, 1395, 1226, 1071,
  /*  705 */ 1285, 1395, 1396, 1395, 1395, 1395, 1395, 1396, 1225, 1297, 918, 1295, 1395, 1395, 1299, 1395, 1395, 1395,
  /*  723 */ 1294, 1395, 1395, 1391, 1395, 1300, 1395, 1395, 1395, 1439, 1178, 7680, 2104320, 4201472, 8395776, 7168,
  /*  739 */ 7168, 7168, 8396288, 272636928, 268442624, 268442624, 7168, 7168, 7168, 7168, 7680, 7680, 7680, 7680,
  /*  753 */ 268442624, 268442624, 268442624, 7168, 7168, 7168, 15360, 15360, 15872, 25459, 25459, 25459, 25459, 7168,
  /*  767 */ 2104832, 268443136, 270539776, 272636928, 7168, 7680, 7680, 7296, 7680, 2104320, 2104320, 2104320, 4201472,
  /*  780 */ 268442624, 4201984, 7808, 15488, 15488, 7808, 2121342, 7808, 7808, 7808, 7808, 1726848000, 1713397374,
  /*  793 */ 7808, 1717591678, 1713397374, 1717591678, 1713397374, 1713397374, 1713397374, 1713397374, -1721852416,
  /*  802 */ 1981832830, 274734720, -1719755264, -274752512, -268461056, -272655360, -1142973440, -272655360, -4219392,
  /*  811 */ -272654848, 1713397630, -2122752, -25600, -2122752, 1713397758, 1713397758, 1713397758, 1713397758, 512,
  /*  821 */ 6144, 512, 0, 128, 0, 0, 0, 2, 0, 384, 0, 512, 512, 640, 512, 512, 2048, 4096, 512, 30, 20, 512, 512, 64,
  /*  845 */ 32, 32, 16, 16, 134217728, 0x80000000, 0, 6144, 0, 201326592, -1073741824, 0, -268435456, 0, 0, 0,
  /*  861 */ 268435456, 0, 0, 0, 128, 31457280, 0, 512, 768, 512, 512, 512, 640, 16, 24, 16, 16, 2, 512, 512, 512,
  /*  882 */ 32768, 0, 512, 64, 32, 16, 0, 512, 512, 768, 64, 1024, 4096, 2097152, 0, 0, 64, 262144, 1048576, 0, 32, 0,
  /*  904 */ 0, 131072, 0, 0, 262144, 0x80000000, 64, 1049600, 1048576, 536870912, 0, 65536, 134217728, 2, 0, 0, 256, 0,
  /*  922 */ 1048577, 1048577, 1049600, 1048577, 32, 32, 32, 4096, 1048608, 32, 64, 268435456, 0, 524320, 1048608, 64,
  /*  938 */ 1048641, 524320, 1049632, 32, 1049632, -2147483584, 1241513984, 1241513984, 1241514048, 1241518080,
  /*  948 */ 1241776128, 1241513984, -2130182144, 1242038272, 1242038272, -2130182144, -2130182112, -2130182112,
  /*  956 */ -888668160, 1241513984, 1241514016, 1243611136, 1241513984, -888668160, -888668128, -888668096, -888668096,
  /*  965 */ -888668064, 5603013, 1241513984, -888668064, 1242038272, 1241513984, 1242038272, 1242038304, 1242038272,
  /*  974 */ 16162106, 1242038272, -888668063, 16162107, 16162171, 14155757, 14155725, 14155757, 15204348, 14155773,
  /*  984 */ 14155757, 14155773, 1308622880, 16252925, 16252925, -821559264, -821559200, -553123808, -16252896, 0, 0,
  /*  995 */ 0x80000000, 33554432, 134217728, 1073741824, 0, 0, -1073741824, 0, 0, 167772160, 1073741824, 0, 0, 2097152,
  /* 1009 */ 4194304, 8388608, 16777216, 134217728, 268435456, 128, 8, 256, 163840, 8388608, 16777216, 268435456, 8192,
  /* 1022 */ 2097152, 98304, 0, 896, 253952, 0, 0, -805306368, 0, 234881024, 1073741824, 0, 0, 0, 6144, 0, 16777216,
  /* 1039 */ -1073741824, 0, 2, 16, 0, 384, 0, 2, 256, 163840, 0, 2, 32, 256, 229376, 0, 0, 67108864, 0, 0, 0, 16384, 0,
  /* 1062 */ 805306368, 0, 0, 0, 65536, 0, 0, 33554432, 0, 33554432, 16777216, 0, 0, 0, 536870912, 0, 0, 0, 64, 32, 0,
  /* 1083 */ 537395200, 0, 0, 1, 64, 536870944, 0, 4128, 0, 8, 0, 0, 65536, 134217728, 0, 537395200, 537395200,
  /* 1100 */ 67273224, 67273224, 67273224, 67273224, 432078976, 67273352, 67273352, 434176128, 432078976, 432087168,
  /* 1110 */ 434184320, 499352200, -1647869304, 605717064, 605717064, 605717064, 605717064, 605717192, 605717064, 4096,
  /* 1120 */ 605717064, -1647869304, -1647869304, -1647869304, 16384, 605717064, -1645772152, 4096, 4096, 16384, 0, 0,
  /* 1132 */ 0, 4194304, 16384, 16384, 16384, 16384, -434467251, 16384, 16384, 16384, -2388275, -2388275, -2388273,
  /* 1145 */ -2388257, -2388001, 0, 8, 0, 4194304, 128, 29360128, 402653184, 640, 2048, 90112, 0, 1, 1, 0, 1, 16, 32,
  /* 1164 */ 512, 512, 512, 8192, 1, 512, 131072, 1572864, 16777216, 402653184, 73728, 31457280, 0, 8, 128, 192, 0, 0,
  /* 1182 */ 65536, 524288, 536870912, 0, 0, 65536, 65536, 98304, 29360128, 469762048, 0, 8, 512, 67108864, 576,
  /* 1197 */ 1572864, 603979776, 0, 32, 2, 4128, 262144, -1677721600, 0, 0, 1, 256, 0, 0, 16384, 0, 704, 0, 32, 64,
  /* 1217 */ 524288, 67108864, 1073741824, 0, 0x80000000, 167772160, 1073741824, 2, 256, 0, 0, 0, 33554432, 134217728,
  /* 1231 */ 1073741824, 1600, 34816, 33554432, -469762048, 1728, 100352, -67108864, 1, 516, 0, 0, 8192, 0, 0, 14, 16,
  /* 1248 */ 1, 1984, 0, 128, 12582912, 16777216, 1048576, 0, 262144, 0x80000000, 2048, 33554432, 1073741824, 0, 0,
  /* 1263 */ 268435456, 128, 0, 0, 32, 0, 1, 1024, 33554432, 1073741824, 65536, 536870912, 0, 0, 256, 32, 4096, 0, 8,
  /* 1282 */ 384, 0, 0, 0, 16777216, 0, 0, 0, 512, 0, 0, 64, 0, 0, 0, 4, 0, 0, 0, 8, 128, 0, 134217728, 2, 0, 256,
  /* 1308 */ 16384, 0, 1, 33554432, 1073741824, 0, 2, 256, 32, 4096, 536870912, 0, 65536, 65536, 4096, 0, 16384, 0, 0,
  /* 1327 */ 1, 12, 1024, 8388608, 268435456, 0, 8388608, 268435456, 0, 2097152, 12582912, 16777216, 402653184, 128, 0,
  /* 1342 */ 0, 16, 0, 268435456, 0x80000000, 0, 0, 16384, 4096, 16384, 1, 2, 4096, 0x80000000, 16384, 4096, 8388608,
  /* 1359 */ 8388608, 0x80000000, 16384, 0x80000000, 0x80000000, 0, 33, 32, 4096, 0, 524288, 536870912, 4, 8192, 0, 0,
  /* 1375 */ 4096, 0, 0, 4, 516, 512, 8192, 0, 0, 512, 512, 0, 512, 512, 512, 512, 0, 0, 0, 0x80000000, 0, 0, 0, 0, 1,
  /* 1400 */ 0, 0, 0, 8192, 0, 8704, 0, 516, 512, 131072, 67108864, 0, 0, 0, 16465, 8328, 8328, 200, 712, 8392, 5120,
  /* 1421 */ 16465, 8904, 16465, 16465, 16977, 16977, 25169, 8392, 15872, 15872, 16977, 16465, 25169, 15872, 7168, 7168,
  /* 1437 */ 7168, 17267, 17, 0, 0, 8, 512, 32768, 131072, 67108864, 3, 48, 256, 0, 51, 256, 0, 128, 4194304, 8388608,
  /* 1457 */ 268435456, 2097152
];

JavaJS.TOKEN =
[
  "%ERROR",
  "HexLiteral",
  "DecimalLiteral",
  "OctalLiteral",
  "FloatingPointLiteral",
  "CharacterLiteral",
  "StringLiteral",
  "'enum'",
  "'assert'",
  "Identifier",
  "WS",
  "COMMENT",
  "LINE_COMMENT",
  "EOF",
  "'!'",
  "'!='",
  "'%'",
  "'%='",
  "'&'",
  "'&&'",
  "'&='",
  "'('",
  "')'",
  "'*'",
  "'*='",
  "'+'",
  "'++'",
  "'+='",
  "','",
  "'-'",
  "'--'",
  "'-='",
  "'.'",
  "'...'",
  "'/'",
  "'/='",
  "':'",
  "';'",
  "'<'",
  "'<<'",
  "'<<='",
  "'<='",
  "'='",
  "'=='",
  "'>'",
  "'>='",
  "'>>'",
  "'>>='",
  "'>>>'",
  "'>>>='",
  "'?'",
  "'@'",
  "'['",
  "']'",
  "'^'",
  "'^='",
  "'abstract'",
  "'boolean'",
  "'break'",
  "'byte'",
  "'case'",
  "'catch'",
  "'char'",
  "'class'",
  "'continue'",
  "'default'",
  "'do'",
  "'double'",
  "'else'",
  "'extends'",
  "'false'",
  "'final'",
  "'finally'",
  "'float'",
  "'for'",
  "'if'",
  "'implements'",
  "'import'",
  "'instanceof'",
  "'int'",
  "'interface'",
  "'long'",
  "'native'",
  "'new'",
  "'null'",
  "'package'",
  "'private'",
  "'protected'",
  "'public'",
  "'return'",
  "'short'",
  "'static'",
  "'strictfp'",
  "'super'",
  "'switch'",
  "'synchronized'",
  "'this'",
  "'throw'",
  "'throws'",
  "'transient'",
  "'true'",
  "'try'",
  "'void'",
  "'volatile'",
  "'while'",
  "'{'",
  "'|'",
  "'|='",
  "'||'",
  "'}'",
  "'~'"
];

// main program for use with node.js, rhino, or jrunscript

function main(args)
{
  if (typeof process !== "undefined")   // assume node.js
  {
    var command = "node";
    var arguments = process.argv.slice(2);
    var log = function(string) {process.stdout.write(string);};
    var fs = require("fs");
    var readTextFile = fs.readFileSync;
  }
  else                                  // assume rhino or jrunscript
  {
    var arguments = function()
                    {
                      var strings = [];
                      for (var i = 0; i < args.length; ++i)
                      {
                        strings[i] = String(args[i]);
                      }
                      return strings;
                    }();

    if (typeof println == "undefined")  // assume rhino
    {
      var command = "java -jar js.jar";
      var log = function(string) {java.lang.System.out.write(java.lang.String(string).getBytes("utf-8"));};
      var readTextFile = readFile;
    }
    else                                // assume jrunscript
    {
      var command = "jrunscript";
      var log = function(string) {java.lang.System.out.print(string);};
      var readTextFile = function(filename, encoding)
                         {
                           var file = new java.io.File(filename);
                           var buffer = javaByteArray(file.length());
                           new java.io.FileInputStream(file).read(buffer);
                           return String(new java.lang.String(buffer, encoding));
                         };
    }
  }

  function read(input)
  {
    if (/^{.*}$/.test(input))
    {
      return input.substring(1, input.length - 1);
    }
    else
    {
      var content = readTextFile(input, "utf-8");
      return content.length > 0 && content.charCodeAt(0) == 0xFEFF
           ? content.substring(1)
           : content;
    }
  }

  if (arguments.length == 0)
  {
    log("Usage: " + command + " JavaJS.js [-i] INPUT...\n");
    log("\n");
    log("  parse INPUT, which is either a filename or literal text enclosed in curly braces\n");
    log("\n");
    log("  Option:\n");
    log("    -i     indented parse tree\n");
  }
  else
  {
    var indent = false;
    for (var i = 0; i < arguments.length; ++i)
    {
      if (arguments[i] === "-i")
      {
        indent = true;
        continue;
      }
      var input = read(String(arguments[i]));
      var s = new JavaJS.XmlSerializer(log, indent);
      var parser = new JavaJS(input, s);
      try
      {
        parser.parse_compilationUnit();
      }
      catch (pe)
      {
        if (! (pe instanceof parser.ParseException))
        {
          throw pe;
        }
        else
        {
          throw parser.getErrorMessage(pe);
        }
      }
    }
  }
}

main(arguments);

// End
