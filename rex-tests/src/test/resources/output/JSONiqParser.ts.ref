// This file was generated on Thu Dec 26, 2024 06:56 (UTC+01) by REx v6.1-SNAPSHOT which is Copyright (c) 1979-2024 by Gunther Rademacher <grd@gmx.net>
// REx command line: -q JSONiqParser.ebnf -typescript -ll 2 -backtrack -main -tree

module JSONiqParser
{
  export interface ParsingEventHandler
  {
    reset(source: string): void;
    startNonterminal(name: string, begin: number): void;
    endNonterminal(name: string, end: number): void;
    terminal(name: string, begin: number, end: number): void;
    whitespace(begin: number, end: number): void;
  }

  export class ParseException
  {
    private begin: number;
    private end: number;
    private state: number;
    private offending: number;
    private expected: number;

    constructor(b: number, e: number, s: number, o: number, x: number)
    {
      this.begin = b;
      this.end = e;
      this.state = s;
      this.offending = o;
      this.expected = x;
    }

    getBegin() {return this.begin;}
    getEnd() {return this.end;}
    getState() {return this.state;}
    getExpected() {return this.expected;}
    getOffending() {return this.offending;}
    isAmbiguousInput() {return false;}

    getMessage()
    {
      return this.offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    }
  }

  interface Memoizer
  {
    [index: number]: number;
  }

  export class Parser
  {
    constructor(source: string, parsingEventHandler: ParsingEventHandler)
    {
      this.initialize(source, parsingEventHandler);
    }

    initialize(source: string, parsingEventHandler: ParsingEventHandler)
    {
      this.eventHandler = parsingEventHandler;
      this.input = source;
      this.size = source.length;
      this.reset(0, 0, 0);
    }

    getInput()
    {
      return this.input;
    }

    getTokenOffset()
    {
      return this.b0;
    }

    getTokenEnd()
    {
      return this.e0;
    }

    private reset(l: number, b: number, e: number)
    {
                   this.b0 = b; this.e0 = b;
      this.l1 = l; this.b1 = b; this.e1 = e;
      this.l2 = 0; this.b2 = 0; this.e2 = 0;
      this.end = e;
      this.ex = -1;
      this.memo = {};
      this.eventHandler.reset(this.input);
    }

    getOffendingToken(e: ParseException)
    {
      var o = e.getOffending();
      return o >= 0 ? Parser.TOKEN[o] : null;
    }

    getExpectedTokenSet(e: ParseException)
    {
      var expected: string[];
      if (e.getExpected() < 0)
      {
        expected = Parser.getTokenSet(- e.getState());
      }
      else
      {
        expected = [Parser.TOKEN[e.getExpected()]];
      }
      return expected;
    }

    getErrorMessage(e: ParseException)
    {
      var message = e.getMessage();
      var found = this.getOffendingToken(e);
      var tokenSet = this.getExpectedTokenSet(e);
      var size = e.getEnd() - e.getBegin();
      message += (found == null ? "" : ", found " + found)
              + "\nwhile expecting "
              + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
              + "\n"
              + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
      var prefix = this.input.substring(0, e.getBegin());
      var lines = prefix.split("\n");
      var line = lines.length;
      var column = lines[line - 1].length + 1;
      return message
           + "at line " + line + ", column " + column + ":\n..."
           + this.input.substring(e.getBegin(), Math.min(this.input.length, e.getBegin() + 64))
           + "...";
    }

    parse_XQuery()
    {
      this.eventHandler.startNonterminal("XQuery", this.e0);
      this.lookahead1W(278);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Module();
      this.consume(25);             // EOF
      this.eventHandler.endNonterminal("XQuery", this.e0);
    }

    private parse_Module()
    {
      this.eventHandler.startNonterminal("Module", this.e0);
      switch (this.token())
      {
      case 170:                     // 'jsoniq'
        this.lookahead2W(168);      // S^WS | '#' | '(' | '(:' | 'encoding' | 'version'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 64682 // 'jsoniq' 'encoding'
       || this.tokenSequence() == 137898) // 'jsoniq' 'version'
      {
        this.whitespace();
        this.parse_VersionDecl();
      }
      this.lookahead1W(278);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      switch (this.token())
      {
      case 185:                     // 'module'
        this.lookahead2W(146);      // S^WS | '#' | '(' | '(:' | 'namespace'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.tokenSequence())
      {
      case 95929:                   // 'module' 'namespace'
        this.whitespace();
        this.parse_LibraryModule();
        break;
      default:
        this.whitespace();
        this.parse_MainModule();
      }
      this.eventHandler.endNonterminal("Module", this.e0);
    }

    private parse_VersionDecl()
    {
      this.eventHandler.startNonterminal("VersionDecl", this.e0);
      this.consume(170);            // 'jsoniq'
      this.lookahead1W(120);        // S^WS | '(:' | 'encoding' | 'version'
      switch (this.token())
      {
      case 126:                     // 'encoding'
        this.consume(126);          // 'encoding'
        this.lookahead1W(17);       // StringLiteral | S^WS | '(:'
        this.consume(11);           // StringLiteral
        break;
      default:
        this.consume(269);          // 'version'
        this.lookahead1W(17);       // StringLiteral | S^WS | '(:'
        this.consume(11);           // StringLiteral
        this.lookahead1W(113);      // S^WS | '(:' | ';' | 'encoding'
        if (this.token() == 126)    // 'encoding'
        {
          this.consume(126);        // 'encoding'
          this.lookahead1W(17);     // StringLiteral | S^WS | '(:'
          this.consume(11);         // StringLiteral
        }
      }
      this.lookahead1W(29);         // S^WS | '(:' | ';'
      this.whitespace();
      this.parse_Separator();
      this.eventHandler.endNonterminal("VersionDecl", this.e0);
    }

    private parse_LibraryModule()
    {
      this.eventHandler.startNonterminal("LibraryModule", this.e0);
      this.parse_ModuleDecl();
      this.lookahead1W(142);        // S^WS | EOF | '(:' | 'declare' | 'import'
      this.whitespace();
      this.parse_Prolog();
      this.eventHandler.endNonterminal("LibraryModule", this.e0);
    }

    private parse_ModuleDecl()
    {
      this.eventHandler.startNonterminal("ModuleDecl", this.e0);
      this.consume(185);            // 'module'
      this.lookahead1W(64);         // S^WS | '(:' | 'namespace'
      this.consume(187);            // 'namespace'
      this.lookahead1W(240);        // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_NCName();
      this.lookahead1W(30);         // S^WS | '(:' | '='
      this.consume(61);             // '='
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.consume(7);              // URILiteral
      this.lookahead1W(29);         // S^WS | '(:' | ';'
      this.whitespace();
      this.parse_Separator();
      this.eventHandler.endNonterminal("ModuleDecl", this.e0);
    }

    private parse_Prolog()
    {
      this.eventHandler.startNonterminal("Prolog", this.e0);
      for (;;)
      {
        this.lookahead1W(278);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        switch (this.token())
        {
        case 109:                   // 'declare'
          this.lookahead2W(207);    // S^WS | '#' | '%' | '(' | '(:' | 'base-uri' | 'boundary-space' | 'collection' |
                                    // 'construction' | 'context' | 'copy-namespaces' | 'decimal-format' | 'default' |
                                    // 'ft-option' | 'function' | 'index' | 'integrity' | 'namespace' | 'option' |
                                    // 'ordering' | 'revalidation' | 'updating' | 'variable'
          break;
        case 155:                   // 'import'
          this.lookahead2W(169);    // S^WS | '#' | '(' | '(:' | 'module' | 'schema'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.tokenSequence() != 43117 // 'declare' 'base-uri'
         && this.tokenSequence() != 44141 // 'declare' 'boundary-space'
         && this.tokenSequence() != 50797 // 'declare' 'construction'
         && this.tokenSequence() != 53869 // 'declare' 'copy-namespaces'
         && this.tokenSequence() != 54893 // 'declare' 'decimal-format'
         && this.tokenSequence() != 56429 // 'declare' 'default'
         && this.tokenSequence() != 73325 // 'declare' 'ft-option'
         && this.tokenSequence() != 94875 // 'import' 'module'
         && this.tokenSequence() != 95853 // 'declare' 'namespace'
         && this.tokenSequence() != 106093  // 'declare' 'ordering'
         && this.tokenSequence() != 115821  // 'declare' 'revalidation'
         && this.tokenSequence() != 117403) // 'import' 'schema'
        {
          break;
        }
        switch (this.token())
        {
        case 109:                   // 'declare'
          this.lookahead2W(201);    // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.tokenSequence() == 56429)  // 'declare' 'default'
        {
          this.lk = this.memoized(0, this.e0);
          if (this.lk == 0)
          {
            var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
            var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
            var b2A = this.b2; var e2A = this.e2;
            try
            {
              this.try_DefaultNamespaceDecl();
              this.lk = -1;
            }
            catch (p1A)
            {
              this.lk = -2;
            }
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(0, this.e0, this.lk);
          }
        }
        switch (this.tokenSequence())
        {
        case -1:
          this.whitespace();
          this.parse_DefaultNamespaceDecl();
          break;
        case 95853:                 // 'declare' 'namespace'
          this.whitespace();
          this.parse_NamespaceDecl();
          break;
        case 155:                   // 'import'
          this.whitespace();
          this.parse_Import();
          break;
        case 73325:                 // 'declare' 'ft-option'
          this.whitespace();
          this.parse_FTOptionDecl();
          break;
        default:
          this.whitespace();
          this.parse_Setter();
        }
        this.lookahead1W(29);       // S^WS | '(:' | ';'
        this.whitespace();
        this.parse_Separator();
      }
      for (;;)
      {
        this.lookahead1W(278);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        switch (this.token())
        {
        case 109:                   // 'declare'
          this.lookahead2W(202);    // S^WS | '#' | '%' | '(' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.tokenSequence() != 17005 // 'declare' '%'
         && this.tokenSequence() != 49261 // 'declare' 'collection'
         && this.tokenSequence() != 52333 // 'declare' 'context'
         && this.tokenSequence() != 75373 // 'declare' 'function'
         && this.tokenSequence() != 80493 // 'declare' 'index'
         && this.tokenSequence() != 83565 // 'declare' 'integrity'
         && this.tokenSequence() != 104045  // 'declare' 'option'
         && this.tokenSequence() != 134765  // 'declare' 'updating'
         && this.tokenSequence() != 137325) // 'declare' 'variable'
        {
          break;
        }
        switch (this.token())
        {
        case 109:                   // 'declare'
          this.lookahead2W(197);    // S^WS | '%' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
          break;
        default:
          this.lk = this.l1;
        }
        switch (this.tokenSequence())
        {
        case 52333:                 // 'declare' 'context'
          this.whitespace();
          this.parse_ContextItemDecl();
          break;
        case 104045:                // 'declare' 'option'
          this.whitespace();
          this.parse_OptionDecl();
          break;
        default:
          this.whitespace();
          this.parse_AnnotatedDecl();
        }
        this.lookahead1W(29);       // S^WS | '(:' | ';'
        this.whitespace();
        this.parse_Separator();
      }
      this.eventHandler.endNonterminal("Prolog", this.e0);
    }

    private parse_Separator()
    {
      this.eventHandler.startNonterminal("Separator", this.e0);
      this.consume(54);             // ';'
      this.eventHandler.endNonterminal("Separator", this.e0);
    }

    private parse_Setter()
    {
      this.eventHandler.startNonterminal("Setter", this.e0);
      switch (this.token())
      {
      case 109:                     // 'declare'
        this.lookahead2W(194);      // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 56429)  // 'declare' 'default'
      {
        this.lk = this.memoized(1, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_DefaultCollationDecl();
            this.lk = -2;
          }
          catch (p2A)
          {
            try
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.try_EmptyOrderDecl();
              this.lk = -6;
            }
            catch (p6A)
            {
              this.lk = -9;
            }
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(1, this.e0, this.lk);
        }
      }
      switch (this.tokenSequence())
      {
      case 44141:                   // 'declare' 'boundary-space'
        this.parse_BoundarySpaceDecl();
        break;
      case -2:
        this.parse_DefaultCollationDecl();
        break;
      case 43117:                   // 'declare' 'base-uri'
        this.parse_BaseURIDecl();
        break;
      case 50797:                   // 'declare' 'construction'
        this.parse_ConstructionDecl();
        break;
      case 106093:                  // 'declare' 'ordering'
        this.parse_OrderingModeDecl();
        break;
      case -6:
        this.parse_EmptyOrderDecl();
        break;
      case 115821:                  // 'declare' 'revalidation'
        this.parse_RevalidationDecl();
        break;
      case 53869:                   // 'declare' 'copy-namespaces'
        this.parse_CopyNamespacesDecl();
        break;
      default:
        this.parse_DecimalFormatDecl();
      }
      this.eventHandler.endNonterminal("Setter", this.e0);
    }

    private parse_BoundarySpaceDecl()
    {
      this.eventHandler.startNonterminal("BoundarySpaceDecl", this.e0);
      this.consume(109);            // 'declare'
      this.lookahead1W(36);         // S^WS | '(:' | 'boundary-space'
      this.consume(86);             // 'boundary-space'
      this.lookahead1W(137);        // S^WS | '(:' | 'preserve' | 'strip'
      switch (this.token())
      {
      case 218:                     // 'preserve'
        this.consume(218);          // 'preserve'
        break;
      default:
        this.consume(246);          // 'strip'
      }
      this.eventHandler.endNonterminal("BoundarySpaceDecl", this.e0);
    }

    private parse_DefaultCollationDecl()
    {
      this.eventHandler.startNonterminal("DefaultCollationDecl", this.e0);
      this.consume(109);            // 'declare'
      this.lookahead1W(49);         // S^WS | '(:' | 'default'
      this.consume(110);            // 'default'
      this.lookahead1W(41);         // S^WS | '(:' | 'collation'
      this.consume(95);             // 'collation'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.consume(7);              // URILiteral
      this.eventHandler.endNonterminal("DefaultCollationDecl", this.e0);
    }

    private try_DefaultCollationDecl()
    {
      this.consumeT(109);           // 'declare'
      this.lookahead1W(49);         // S^WS | '(:' | 'default'
      this.consumeT(110);           // 'default'
      this.lookahead1W(41);         // S^WS | '(:' | 'collation'
      this.consumeT(95);            // 'collation'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.consumeT(7);             // URILiteral
    }

    private parse_BaseURIDecl()
    {
      this.eventHandler.startNonterminal("BaseURIDecl", this.e0);
      this.consume(109);            // 'declare'
      this.lookahead1W(35);         // S^WS | '(:' | 'base-uri'
      this.consume(84);             // 'base-uri'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.consume(7);              // URILiteral
      this.eventHandler.endNonterminal("BaseURIDecl", this.e0);
    }

    private parse_ConstructionDecl()
    {
      this.eventHandler.startNonterminal("ConstructionDecl", this.e0);
      this.consume(109);            // 'declare'
      this.lookahead1W(44);         // S^WS | '(:' | 'construction'
      this.consume(99);             // 'construction'
      this.lookahead1W(137);        // S^WS | '(:' | 'preserve' | 'strip'
      switch (this.token())
      {
      case 246:                     // 'strip'
        this.consume(246);          // 'strip'
        break;
      default:
        this.consume(218);          // 'preserve'
      }
      this.eventHandler.endNonterminal("ConstructionDecl", this.e0);
    }

    private parse_OrderingModeDecl()
    {
      this.eventHandler.startNonterminal("OrderingModeDecl", this.e0);
      this.consume(109);            // 'declare'
      this.lookahead1W(71);         // S^WS | '(:' | 'ordering'
      this.consume(207);            // 'ordering'
      this.lookahead1W(135);        // S^WS | '(:' | 'ordered' | 'unordered'
      switch (this.token())
      {
      case 206:                     // 'ordered'
        this.consume(206);          // 'ordered'
        break;
      default:
        this.consume(262);          // 'unordered'
      }
      this.eventHandler.endNonterminal("OrderingModeDecl", this.e0);
    }

    private parse_EmptyOrderDecl()
    {
      this.eventHandler.startNonterminal("EmptyOrderDecl", this.e0);
      this.consume(109);            // 'declare'
      this.lookahead1W(49);         // S^WS | '(:' | 'default'
      this.consume(110);            // 'default'
      this.lookahead1W(70);         // S^WS | '(:' | 'order'
      this.consume(205);            // 'order'
      this.lookahead1W(52);         // S^WS | '(:' | 'empty'
      this.consume(124);            // 'empty'
      this.lookahead1W(125);        // S^WS | '(:' | 'greatest' | 'least'
      switch (this.token())
      {
      case 149:                     // 'greatest'
        this.consume(149);          // 'greatest'
        break;
      default:
        this.consume(176);          // 'least'
      }
      this.eventHandler.endNonterminal("EmptyOrderDecl", this.e0);
    }

    private try_EmptyOrderDecl()
    {
      this.consumeT(109);           // 'declare'
      this.lookahead1W(49);         // S^WS | '(:' | 'default'
      this.consumeT(110);           // 'default'
      this.lookahead1W(70);         // S^WS | '(:' | 'order'
      this.consumeT(205);           // 'order'
      this.lookahead1W(52);         // S^WS | '(:' | 'empty'
      this.consumeT(124);           // 'empty'
      this.lookahead1W(125);        // S^WS | '(:' | 'greatest' | 'least'
      switch (this.token())
      {
      case 149:                     // 'greatest'
        this.consumeT(149);         // 'greatest'
        break;
      default:
        this.consumeT(176);         // 'least'
      }
    }

    private parse_CopyNamespacesDecl()
    {
      this.eventHandler.startNonterminal("CopyNamespacesDecl", this.e0);
      this.consume(109);            // 'declare'
      this.lookahead1W(47);         // S^WS | '(:' | 'copy-namespaces'
      this.consume(105);            // 'copy-namespaces'
      this.lookahead1W(132);        // S^WS | '(:' | 'no-preserve' | 'preserve'
      this.whitespace();
      this.parse_PreserveMode();
      this.lookahead1W(25);         // S^WS | '(:' | ','
      this.consume(42);             // ','
      this.lookahead1W(127);        // S^WS | '(:' | 'inherit' | 'no-inherit'
      this.whitespace();
      this.parse_InheritMode();
      this.eventHandler.endNonterminal("CopyNamespacesDecl", this.e0);
    }

    private parse_PreserveMode()
    {
      this.eventHandler.startNonterminal("PreserveMode", this.e0);
      switch (this.token())
      {
      case 218:                     // 'preserve'
        this.consume(218);          // 'preserve'
        break;
      default:
        this.consume(193);          // 'no-preserve'
      }
      this.eventHandler.endNonterminal("PreserveMode", this.e0);
    }

    private parse_InheritMode()
    {
      this.eventHandler.startNonterminal("InheritMode", this.e0);
      switch (this.token())
      {
      case 159:                     // 'inherit'
        this.consume(159);          // 'inherit'
        break;
      default:
        this.consume(192);          // 'no-inherit'
      }
      this.eventHandler.endNonterminal("InheritMode", this.e0);
    }

    private parse_DecimalFormatDecl()
    {
      this.eventHandler.startNonterminal("DecimalFormatDecl", this.e0);
      this.consume(109);            // 'declare'
      this.lookahead1W(118);        // S^WS | '(:' | 'decimal-format' | 'default'
      switch (this.token())
      {
      case 107:                     // 'decimal-format'
        this.consume(107);          // 'decimal-format'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_EQName();
        break;
      default:
        this.consume(110);          // 'default'
        this.lookahead1W(48);       // S^WS | '(:' | 'decimal-format'
        this.consume(107);          // 'decimal-format'
      }
      for (;;)
      {
        this.lookahead1W(204);      // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'grouping-separator' | 'infinity' | 'minus-sign' | 'pattern-separator' |
                                    // 'per-mille' | 'percent' | 'zero-digit'
        if (this.token() == 54)     // ';'
        {
          break;
        }
        this.whitespace();
        this.parse_DFPropertyName();
        this.lookahead1W(30);       // S^WS | '(:' | '='
        this.consume(61);           // '='
        this.lookahead1W(17);       // StringLiteral | S^WS | '(:'
        this.consume(11);           // StringLiteral
      }
      this.eventHandler.endNonterminal("DecimalFormatDecl", this.e0);
    }

    private parse_DFPropertyName()
    {
      this.eventHandler.startNonterminal("DFPropertyName", this.e0);
      switch (this.token())
      {
      case 108:                     // 'decimal-separator'
        this.consume(108);          // 'decimal-separator'
        break;
      case 151:                     // 'grouping-separator'
        this.consume(151);          // 'grouping-separator'
        break;
      case 158:                     // 'infinity'
        this.consume(158);          // 'infinity'
        break;
      case 182:                     // 'minus-sign'
        this.consume(182);          // 'minus-sign'
        break;
      case 68:                      // 'NaN'
        this.consume(68);           // 'NaN'
        break;
      case 213:                     // 'percent'
        this.consume(213);          // 'percent'
        break;
      case 212:                     // 'per-mille'
        this.consume(212);          // 'per-mille'
        break;
      case 280:                     // 'zero-digit'
        this.consume(280);          // 'zero-digit'
        break;
      case 117:                     // 'digit'
        this.consume(117);          // 'digit'
        break;
      default:
        this.consume(211);          // 'pattern-separator'
      }
      this.eventHandler.endNonterminal("DFPropertyName", this.e0);
    }

    private parse_Import()
    {
      this.eventHandler.startNonterminal("Import", this.e0);
      switch (this.token())
      {
      case 155:                     // 'import'
        this.lookahead2W(130);      // S^WS | '(:' | 'module' | 'schema'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.tokenSequence())
      {
      case 117403:                  // 'import' 'schema'
        this.parse_SchemaImport();
        break;
      default:
        this.parse_ModuleImport();
      }
      this.eventHandler.endNonterminal("Import", this.e0);
    }

    private parse_SchemaImport()
    {
      this.eventHandler.startNonterminal("SchemaImport", this.e0);
      this.consume(155);            // 'import'
      this.lookahead1W(76);         // S^WS | '(:' | 'schema'
      this.consume(229);            // 'schema'
      this.lookahead1W(141);        // URILiteral | S^WS | '(:' | 'default' | 'namespace'
      if (this.token() != 7)        // URILiteral
      {
        this.whitespace();
        this.parse_SchemaPrefix();
      }
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.consume(7);              // URILiteral
      this.lookahead1W(112);        // S^WS | '(:' | ';' | 'at'
      if (this.token() == 82)       // 'at'
      {
        this.consume(82);           // 'at'
        this.lookahead1W(15);       // URILiteral | S^WS | '(:'
        this.consume(7);            // URILiteral
        for (;;)
        {
          this.lookahead1W(107);    // S^WS | '(:' | ',' | ';'
          if (this.token() != 42)   // ','
          {
            break;
          }
          this.consume(42);         // ','
          this.lookahead1W(15);     // URILiteral | S^WS | '(:'
          this.consume(7);          // URILiteral
        }
      }
      this.eventHandler.endNonterminal("SchemaImport", this.e0);
    }

    private parse_SchemaPrefix()
    {
      this.eventHandler.startNonterminal("SchemaPrefix", this.e0);
      switch (this.token())
      {
      case 187:                     // 'namespace'
        this.consume(187);          // 'namespace'
        this.lookahead1W(240);      // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_NCName();
        this.lookahead1W(30);       // S^WS | '(:' | '='
        this.consume(61);           // '='
        break;
      default:
        this.consume(110);          // 'default'
        this.lookahead1W(50);       // S^WS | '(:' | 'element'
        this.consume(122);          // 'element'
        this.lookahead1W(64);       // S^WS | '(:' | 'namespace'
        this.consume(187);          // 'namespace'
      }
      this.eventHandler.endNonterminal("SchemaPrefix", this.e0);
    }

    private parse_ModuleImport()
    {
      this.eventHandler.startNonterminal("ModuleImport", this.e0);
      this.consume(155);            // 'import'
      this.lookahead1W(63);         // S^WS | '(:' | 'module'
      this.consume(185);            // 'module'
      this.lookahead1W(93);         // URILiteral | S^WS | '(:' | 'namespace'
      if (this.token() == 187)      // 'namespace'
      {
        this.consume(187);          // 'namespace'
        this.lookahead1W(240);      // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_NCName();
        this.lookahead1W(30);       // S^WS | '(:' | '='
        this.consume(61);           // '='
      }
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.consume(7);              // URILiteral
      this.lookahead1W(112);        // S^WS | '(:' | ';' | 'at'
      if (this.token() == 82)       // 'at'
      {
        this.consume(82);           // 'at'
        this.lookahead1W(15);       // URILiteral | S^WS | '(:'
        this.consume(7);            // URILiteral
        for (;;)
        {
          this.lookahead1W(107);    // S^WS | '(:' | ',' | ';'
          if (this.token() != 42)   // ','
          {
            break;
          }
          this.consume(42);         // ','
          this.lookahead1W(15);     // URILiteral | S^WS | '(:'
          this.consume(7);          // URILiteral
        }
      }
      this.eventHandler.endNonterminal("ModuleImport", this.e0);
    }

    private parse_NamespaceDecl()
    {
      this.eventHandler.startNonterminal("NamespaceDecl", this.e0);
      this.consume(109);            // 'declare'
      this.lookahead1W(64);         // S^WS | '(:' | 'namespace'
      this.consume(187);            // 'namespace'
      this.lookahead1W(240);        // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_NCName();
      this.lookahead1W(30);         // S^WS | '(:' | '='
      this.consume(61);             // '='
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.consume(7);              // URILiteral
      this.eventHandler.endNonterminal("NamespaceDecl", this.e0);
    }

    private parse_DefaultNamespaceDecl()
    {
      this.eventHandler.startNonterminal("DefaultNamespaceDecl", this.e0);
      this.consume(109);            // 'declare'
      this.lookahead1W(49);         // S^WS | '(:' | 'default'
      this.consume(110);            // 'default'
      this.lookahead1W(119);        // S^WS | '(:' | 'element' | 'function'
      switch (this.token())
      {
      case 122:                     // 'element'
        this.consume(122);          // 'element'
        break;
      default:
        this.consume(147);          // 'function'
      }
      this.lookahead1W(64);         // S^WS | '(:' | 'namespace'
      this.consume(187);            // 'namespace'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.consume(7);              // URILiteral
      this.eventHandler.endNonterminal("DefaultNamespaceDecl", this.e0);
    }

    private try_DefaultNamespaceDecl()
    {
      this.consumeT(109);           // 'declare'
      this.lookahead1W(49);         // S^WS | '(:' | 'default'
      this.consumeT(110);           // 'default'
      this.lookahead1W(119);        // S^WS | '(:' | 'element' | 'function'
      switch (this.token())
      {
      case 122:                     // 'element'
        this.consumeT(122);         // 'element'
        break;
      default:
        this.consumeT(147);         // 'function'
      }
      this.lookahead1W(64);         // S^WS | '(:' | 'namespace'
      this.consumeT(187);           // 'namespace'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.consumeT(7);             // URILiteral
    }

    private parse_FTOptionDecl()
    {
      this.eventHandler.startNonterminal("FTOptionDecl", this.e0);
      this.consume(109);            // 'declare'
      this.lookahead1W(55);         // S^WS | '(:' | 'ft-option'
      this.consume(143);            // 'ft-option'
      this.lookahead1W(84);         // S^WS | '(:' | 'using'
      this.whitespace();
      this.parse_FTMatchOptions();
      this.eventHandler.endNonterminal("FTOptionDecl", this.e0);
    }

    private parse_AnnotatedDecl()
    {
      this.eventHandler.startNonterminal("AnnotatedDecl", this.e0);
      this.consume(109);            // 'declare'
      for (;;)
      {
        this.lookahead1W(192);      // S^WS | '%' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
        if (this.token() != 33      // '%'
         && this.token() != 263)    // 'updating'
        {
          break;
        }
        switch (this.token())
        {
        case 263:                   // 'updating'
          this.whitespace();
          this.parse_CompatibilityAnnotation();
          break;
        default:
          this.whitespace();
          this.parse_Annotation();
        }
      }
      switch (this.token())
      {
      case 268:                     // 'variable'
        this.whitespace();
        this.parse_VarDecl();
        break;
      case 147:                     // 'function'
        this.whitespace();
        this.parse_FunctionDecl();
        break;
      case 96:                      // 'collection'
        this.whitespace();
        this.parse_CollectionDecl();
        break;
      case 157:                     // 'index'
        this.whitespace();
        this.parse_IndexDecl();
        break;
      default:
        this.whitespace();
        this.parse_ICDecl();
      }
      this.eventHandler.endNonterminal("AnnotatedDecl", this.e0);
    }

    private parse_CompatibilityAnnotation()
    {
      this.eventHandler.startNonterminal("CompatibilityAnnotation", this.e0);
      this.consume(263);            // 'updating'
      this.eventHandler.endNonterminal("CompatibilityAnnotation", this.e0);
    }

    private parse_Annotation()
    {
      this.eventHandler.startNonterminal("Annotation", this.e0);
      this.consume(33);             // '%'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(193);        // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
      if (this.token() == 35)       // '('
      {
        this.consume(35);           // '('
        this.lookahead1W(190);      // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:' |
                                    // 'false' | 'null' | 'true'
        this.whitespace();
        this.parse_Literal();
        for (;;)
        {
          this.lookahead1W(105);    // S^WS | '(:' | ')' | ','
          if (this.token() != 42)   // ','
          {
            break;
          }
          this.consume(42);         // ','
          this.lookahead1W(190);    // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:' |
                                    // 'false' | 'null' | 'true'
          this.whitespace();
          this.parse_Literal();
        }
        this.consume(38);           // ')'
      }
      this.eventHandler.endNonterminal("Annotation", this.e0);
    }

    private try_Annotation()
    {
      this.consumeT(33);            // '%'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_EQName();
      this.lookahead1W(193);        // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
      if (this.token() == 35)       // '('
      {
        this.consumeT(35);          // '('
        this.lookahead1W(190);      // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:' |
                                    // 'false' | 'null' | 'true'
        this.try_Literal();
        for (;;)
        {
          this.lookahead1W(105);    // S^WS | '(:' | ')' | ','
          if (this.token() != 42)   // ','
          {
            break;
          }
          this.consumeT(42);        // ','
          this.lookahead1W(190);    // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:' |
                                    // 'false' | 'null' | 'true'
          this.try_Literal();
        }
        this.consumeT(38);          // ')'
      }
    }

    private parse_VarDecl()
    {
      this.eventHandler.startNonterminal("VarDecl", this.e0);
      this.consume(268);            // 'variable'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.consume(31);             // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(157);        // S^WS | '(:' | ':=' | 'as' | 'external'
      if (this.token() == 80)       // 'as'
      {
        this.whitespace();
        this.parse_TypeDeclaration();
      }
      this.lookahead1W(110);        // S^WS | '(:' | ':=' | 'external'
      switch (this.token())
      {
      case 53:                      // ':='
        this.consume(53);           // ':='
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_VarValue();
        break;
      default:
        this.consume(134);          // 'external'
        this.lookahead1W(108);      // S^WS | '(:' | ':=' | ';'
        if (this.token() == 53)     // ':='
        {
          this.consume(53);         // ':='
          this.lookahead1W(267);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          this.whitespace();
          this.parse_VarDefaultValue();
        }
      }
      this.eventHandler.endNonterminal("VarDecl", this.e0);
    }

    private parse_VarValue()
    {
      this.eventHandler.startNonterminal("VarValue", this.e0);
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("VarValue", this.e0);
    }

    private parse_VarDefaultValue()
    {
      this.eventHandler.startNonterminal("VarDefaultValue", this.e0);
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("VarDefaultValue", this.e0);
    }

    private parse_ContextItemDecl()
    {
      this.eventHandler.startNonterminal("ContextItemDecl", this.e0);
      this.consume(109);            // 'declare'
      this.lookahead1W(46);         // S^WS | '(:' | 'context'
      this.consume(102);            // 'context'
      this.lookahead1W(58);         // S^WS | '(:' | 'item'
      this.consume(167);            // 'item'
      this.lookahead1W(157);        // S^WS | '(:' | ':=' | 'as' | 'external'
      if (this.token() == 80)       // 'as'
      {
        this.consume(80);           // 'as'
        this.lookahead1W(254);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_ItemType();
      }
      this.lookahead1W(110);        // S^WS | '(:' | ':=' | 'external'
      switch (this.token())
      {
      case 53:                      // ':='
        this.consume(53);           // ':='
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_VarValue();
        break;
      default:
        this.consume(134);          // 'external'
        this.lookahead1W(108);      // S^WS | '(:' | ':=' | ';'
        if (this.token() == 53)     // ':='
        {
          this.consume(53);         // ':='
          this.lookahead1W(267);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          this.whitespace();
          this.parse_VarDefaultValue();
        }
      }
      this.eventHandler.endNonterminal("ContextItemDecl", this.e0);
    }

    private parse_ParamList()
    {
      this.eventHandler.startNonterminal("ParamList", this.e0);
      this.parse_Param();
      for (;;)
      {
        this.lookahead1W(105);      // S^WS | '(:' | ')' | ','
        if (this.token() != 42)     // ','
        {
          break;
        }
        this.consume(42);           // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.whitespace();
        this.parse_Param();
      }
      this.eventHandler.endNonterminal("ParamList", this.e0);
    }

    private try_ParamList()
    {
      this.try_Param();
      for (;;)
      {
        this.lookahead1W(105);      // S^WS | '(:' | ')' | ','
        if (this.token() != 42)     // ','
        {
          break;
        }
        this.consumeT(42);          // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.try_Param();
      }
    }

    private parse_Param()
    {
      this.eventHandler.startNonterminal("Param", this.e0);
      this.consume(31);             // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(153);        // S^WS | '(:' | ')' | ',' | 'as'
      if (this.token() == 80)       // 'as'
      {
        this.whitespace();
        this.parse_TypeDeclaration();
      }
      this.eventHandler.endNonterminal("Param", this.e0);
    }

    private try_Param()
    {
      this.consumeT(31);            // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_EQName();
      this.lookahead1W(153);        // S^WS | '(:' | ')' | ',' | 'as'
      if (this.token() == 80)       // 'as'
      {
        this.try_TypeDeclaration();
      }
    }

    private parse_FunctionBody()
    {
      this.eventHandler.startNonterminal("FunctionBody", this.e0);
      this.parse_EnclosedExpr();
      this.eventHandler.endNonterminal("FunctionBody", this.e0);
    }

    private try_FunctionBody()
    {
      this.try_EnclosedExpr();
    }

    private parse_EnclosedExpr()
    {
      this.eventHandler.startNonterminal("EnclosedExpr", this.e0);
      this.consume(281);            // '{'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.consume(287);            // '}'
      this.eventHandler.endNonterminal("EnclosedExpr", this.e0);
    }

    private try_EnclosedExpr()
    {
      this.consumeT(281);           // '{'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.consumeT(287);           // '}'
    }

    private parse_OptionDecl()
    {
      this.eventHandler.startNonterminal("OptionDecl", this.e0);
      this.consume(109);            // 'declare'
      this.lookahead1W(69);         // S^WS | '(:' | 'option'
      this.consume(203);            // 'option'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(17);         // StringLiteral | S^WS | '(:'
      this.consume(11);             // StringLiteral
      this.eventHandler.endNonterminal("OptionDecl", this.e0);
    }

    private parse_Expr()
    {
      this.eventHandler.startNonterminal("Expr", this.e0);
      this.parse_ExprSingle();
      for (;;)
      {
        if (this.token() != 42)     // ','
        {
          break;
        }
        this.consume(42);           // ','
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_ExprSingle();
      }
      this.eventHandler.endNonterminal("Expr", this.e0);
    }

    private try_Expr()
    {
      this.try_ExprSingle();
      for (;;)
      {
        if (this.token() != 42)     // ','
        {
          break;
        }
        this.consumeT(42);          // ','
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_ExprSingle();
      }
    }

    private parse_FLWORExpr()
    {
      this.eventHandler.startNonterminal("FLWORExpr", this.e0);
      this.parse_InitialClause();
      for (;;)
      {
        this.lookahead1W(195);      // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
        if (this.token() == 224)    // 'return'
        {
          break;
        }
        this.whitespace();
        this.parse_IntermediateClause();
      }
      this.whitespace();
      this.parse_ReturnClause();
      this.eventHandler.endNonterminal("FLWORExpr", this.e0);
    }

    private try_FLWORExpr()
    {
      this.try_InitialClause();
      for (;;)
      {
        this.lookahead1W(195);      // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
        if (this.token() == 224)    // 'return'
        {
          break;
        }
        this.try_IntermediateClause();
      }
      this.try_ReturnClause();
    }

    private parse_InitialClause()
    {
      this.eventHandler.startNonterminal("InitialClause", this.e0);
      switch (this.token())
      {
      case 139:                     // 'for'
        this.lookahead2W(151);      // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.tokenSequence())
      {
      case 16011:                   // 'for' '$'
        this.parse_ForClause();
        break;
      case 177:                     // 'let'
        this.parse_LetClause();
        break;
      default:
        this.parse_WindowClause();
      }
      this.eventHandler.endNonterminal("InitialClause", this.e0);
    }

    private try_InitialClause()
    {
      switch (this.token())
      {
      case 139:                     // 'for'
        this.lookahead2W(151);      // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.tokenSequence())
      {
      case 16011:                   // 'for' '$'
        this.try_ForClause();
        break;
      case 177:                     // 'let'
        this.try_LetClause();
        break;
      default:
        this.try_WindowClause();
      }
    }

    private parse_IntermediateClause()
    {
      this.eventHandler.startNonterminal("IntermediateClause", this.e0);
      switch (this.token())
      {
      case 139:                     // 'for'
      case 177:                     // 'let'
        this.parse_InitialClause();
        break;
      case 272:                     // 'where'
        this.parse_WhereClause();
        break;
      case 150:                     // 'group'
        this.parse_GroupByClause();
        break;
      case 106:                     // 'count'
        this.parse_CountClause();
        break;
      default:
        this.parse_OrderByClause();
      }
      this.eventHandler.endNonterminal("IntermediateClause", this.e0);
    }

    private try_IntermediateClause()
    {
      switch (this.token())
      {
      case 139:                     // 'for'
      case 177:                     // 'let'
        this.try_InitialClause();
        break;
      case 272:                     // 'where'
        this.try_WhereClause();
        break;
      case 150:                     // 'group'
        this.try_GroupByClause();
        break;
      case 106:                     // 'count'
        this.try_CountClause();
        break;
      default:
        this.try_OrderByClause();
      }
    }

    private parse_ForClause()
    {
      this.eventHandler.startNonterminal("ForClause", this.e0);
      this.consume(139);            // 'for'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.whitespace();
      this.parse_ForBinding();
      for (;;)
      {
        if (this.token() != 42)     // ','
        {
          break;
        }
        this.consume(42);           // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.whitespace();
        this.parse_ForBinding();
      }
      this.eventHandler.endNonterminal("ForClause", this.e0);
    }

    private try_ForClause()
    {
      this.consumeT(139);           // 'for'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.try_ForBinding();
      for (;;)
      {
        if (this.token() != 42)     // ','
        {
          break;
        }
        this.consumeT(42);          // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.try_ForBinding();
      }
    }

    private parse_ForBinding()
    {
      this.eventHandler.startNonterminal("ForBinding", this.e0);
      this.consume(31);             // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(182);        // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
      if (this.token() == 80)       // 'as'
      {
        this.whitespace();
        this.parse_TypeDeclaration();
      }
      this.lookahead1W(173);        // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
      if (this.token() == 73)       // 'allowing'
      {
        this.whitespace();
        this.parse_AllowingEmpty();
      }
      this.lookahead1W(160);        // S^WS | '(:' | 'at' | 'in' | 'score'
      if (this.token() == 82)       // 'at'
      {
        this.whitespace();
        this.parse_PositionalVar();
      }
      this.lookahead1W(126);        // S^WS | '(:' | 'in' | 'score'
      if (this.token() == 232)      // 'score'
      {
        this.whitespace();
        this.parse_FTScoreVar();
      }
      this.lookahead1W(56);         // S^WS | '(:' | 'in'
      this.consume(156);            // 'in'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("ForBinding", this.e0);
    }

    private try_ForBinding()
    {
      this.consumeT(31);            // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
      this.lookahead1W(182);        // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
      if (this.token() == 80)       // 'as'
      {
        this.try_TypeDeclaration();
      }
      this.lookahead1W(173);        // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
      if (this.token() == 73)       // 'allowing'
      {
        this.try_AllowingEmpty();
      }
      this.lookahead1W(160);        // S^WS | '(:' | 'at' | 'in' | 'score'
      if (this.token() == 82)       // 'at'
      {
        this.try_PositionalVar();
      }
      this.lookahead1W(126);        // S^WS | '(:' | 'in' | 'score'
      if (this.token() == 232)      // 'score'
      {
        this.try_FTScoreVar();
      }
      this.lookahead1W(56);         // S^WS | '(:' | 'in'
      this.consumeT(156);           // 'in'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_AllowingEmpty()
    {
      this.eventHandler.startNonterminal("AllowingEmpty", this.e0);
      this.consume(73);             // 'allowing'
      this.lookahead1W(52);         // S^WS | '(:' | 'empty'
      this.consume(124);            // 'empty'
      this.eventHandler.endNonterminal("AllowingEmpty", this.e0);
    }

    private try_AllowingEmpty()
    {
      this.consumeT(73);            // 'allowing'
      this.lookahead1W(52);         // S^WS | '(:' | 'empty'
      this.consumeT(124);           // 'empty'
    }

    private parse_PositionalVar()
    {
      this.eventHandler.startNonterminal("PositionalVar", this.e0);
      this.consume(82);             // 'at'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.consume(31);             // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.eventHandler.endNonterminal("PositionalVar", this.e0);
    }

    private try_PositionalVar()
    {
      this.consumeT(82);            // 'at'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.consumeT(31);            // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
    }

    private parse_FTScoreVar()
    {
      this.eventHandler.startNonterminal("FTScoreVar", this.e0);
      this.consume(232);            // 'score'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.consume(31);             // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.eventHandler.endNonterminal("FTScoreVar", this.e0);
    }

    private try_FTScoreVar()
    {
      this.consumeT(232);           // 'score'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.consumeT(31);            // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
    }

    private parse_LetClause()
    {
      this.eventHandler.startNonterminal("LetClause", this.e0);
      this.consume(177);            // 'let'
      this.lookahead1W(100);        // S^WS | '$' | '(:' | 'score'
      this.whitespace();
      this.parse_LetBinding();
      for (;;)
      {
        if (this.token() != 42)     // ','
        {
          break;
        }
        this.consume(42);           // ','
        this.lookahead1W(100);      // S^WS | '$' | '(:' | 'score'
        this.whitespace();
        this.parse_LetBinding();
      }
      this.eventHandler.endNonterminal("LetClause", this.e0);
    }

    private try_LetClause()
    {
      this.consumeT(177);           // 'let'
      this.lookahead1W(100);        // S^WS | '$' | '(:' | 'score'
      this.try_LetBinding();
      for (;;)
      {
        if (this.token() != 42)     // ','
        {
          break;
        }
        this.consumeT(42);          // ','
        this.lookahead1W(100);      // S^WS | '$' | '(:' | 'score'
        this.try_LetBinding();
      }
    }

    private parse_LetBinding()
    {
      this.eventHandler.startNonterminal("LetBinding", this.e0);
      switch (this.token())
      {
      case 31:                      // '$'
        this.consume(31);           // '$'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_VarName();
        this.lookahead1W(109);      // S^WS | '(:' | ':=' | 'as'
        if (this.token() == 80)     // 'as'
        {
          this.whitespace();
          this.parse_TypeDeclaration();
        }
        break;
      default:
        this.parse_FTScoreVar();
      }
      this.lookahead1W(28);         // S^WS | '(:' | ':='
      this.consume(53);             // ':='
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("LetBinding", this.e0);
    }

    private try_LetBinding()
    {
      switch (this.token())
      {
      case 31:                      // '$'
        this.consumeT(31);          // '$'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_VarName();
        this.lookahead1W(109);      // S^WS | '(:' | ':=' | 'as'
        if (this.token() == 80)     // 'as'
        {
          this.try_TypeDeclaration();
        }
        break;
      default:
        this.try_FTScoreVar();
      }
      this.lookahead1W(28);         // S^WS | '(:' | ':='
      this.consumeT(53);            // ':='
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_WindowClause()
    {
      this.eventHandler.startNonterminal("WindowClause", this.e0);
      this.consume(139);            // 'for'
      this.lookahead1W(139);        // S^WS | '(:' | 'sliding' | 'tumbling'
      switch (this.token())
      {
      case 257:                     // 'tumbling'
        this.whitespace();
        this.parse_TumblingWindowClause();
        break;
      default:
        this.whitespace();
        this.parse_SlidingWindowClause();
      }
      this.eventHandler.endNonterminal("WindowClause", this.e0);
    }

    private try_WindowClause()
    {
      this.consumeT(139);           // 'for'
      this.lookahead1W(139);        // S^WS | '(:' | 'sliding' | 'tumbling'
      switch (this.token())
      {
      case 257:                     // 'tumbling'
        this.try_TumblingWindowClause();
        break;
      default:
        this.try_SlidingWindowClause();
      }
    }

    private parse_TumblingWindowClause()
    {
      this.eventHandler.startNonterminal("TumblingWindowClause", this.e0);
      this.consume(257);            // 'tumbling'
      this.lookahead1W(88);         // S^WS | '(:' | 'window'
      this.consume(275);            // 'window'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.consume(31);             // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(114);        // S^WS | '(:' | 'as' | 'in'
      if (this.token() == 80)       // 'as'
      {
        this.whitespace();
        this.parse_TypeDeclaration();
      }
      this.lookahead1W(56);         // S^WS | '(:' | 'in'
      this.consume(156);            // 'in'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.whitespace();
      this.parse_WindowStartCondition();
      if (this.token() == 127       // 'end'
       || this.token() == 202)      // 'only'
      {
        this.whitespace();
        this.parse_WindowEndCondition();
      }
      this.eventHandler.endNonterminal("TumblingWindowClause", this.e0);
    }

    private try_TumblingWindowClause()
    {
      this.consumeT(257);           // 'tumbling'
      this.lookahead1W(88);         // S^WS | '(:' | 'window'
      this.consumeT(275);           // 'window'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.consumeT(31);            // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
      this.lookahead1W(114);        // S^WS | '(:' | 'as' | 'in'
      if (this.token() == 80)       // 'as'
      {
        this.try_TypeDeclaration();
      }
      this.lookahead1W(56);         // S^WS | '(:' | 'in'
      this.consumeT(156);           // 'in'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
      this.try_WindowStartCondition();
      if (this.token() == 127       // 'end'
       || this.token() == 202)      // 'only'
      {
        this.try_WindowEndCondition();
      }
    }

    private parse_SlidingWindowClause()
    {
      this.eventHandler.startNonterminal("SlidingWindowClause", this.e0);
      this.consume(239);            // 'sliding'
      this.lookahead1W(88);         // S^WS | '(:' | 'window'
      this.consume(275);            // 'window'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.consume(31);             // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(114);        // S^WS | '(:' | 'as' | 'in'
      if (this.token() == 80)       // 'as'
      {
        this.whitespace();
        this.parse_TypeDeclaration();
      }
      this.lookahead1W(56);         // S^WS | '(:' | 'in'
      this.consume(156);            // 'in'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.whitespace();
      this.parse_WindowStartCondition();
      this.whitespace();
      this.parse_WindowEndCondition();
      this.eventHandler.endNonterminal("SlidingWindowClause", this.e0);
    }

    private try_SlidingWindowClause()
    {
      this.consumeT(239);           // 'sliding'
      this.lookahead1W(88);         // S^WS | '(:' | 'window'
      this.consumeT(275);           // 'window'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.consumeT(31);            // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
      this.lookahead1W(114);        // S^WS | '(:' | 'as' | 'in'
      if (this.token() == 80)       // 'as'
      {
        this.try_TypeDeclaration();
      }
      this.lookahead1W(56);         // S^WS | '(:' | 'in'
      this.consumeT(156);           // 'in'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
      this.try_WindowStartCondition();
      this.try_WindowEndCondition();
    }

    private parse_WindowStartCondition()
    {
      this.eventHandler.startNonterminal("WindowStartCondition", this.e0);
      this.consume(242);            // 'start'
      this.lookahead1W(181);        // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
      this.whitespace();
      this.parse_WindowVars();
      this.lookahead1W(86);         // S^WS | '(:' | 'when'
      this.consume(271);            // 'when'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("WindowStartCondition", this.e0);
    }

    private try_WindowStartCondition()
    {
      this.consumeT(242);           // 'start'
      this.lookahead1W(181);        // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
      this.try_WindowVars();
      this.lookahead1W(86);         // S^WS | '(:' | 'when'
      this.consumeT(271);           // 'when'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_WindowEndCondition()
    {
      this.eventHandler.startNonterminal("WindowEndCondition", this.e0);
      if (this.token() == 202)      // 'only'
      {
        this.consume(202);          // 'only'
      }
      this.lookahead1W(53);         // S^WS | '(:' | 'end'
      this.consume(127);            // 'end'
      this.lookahead1W(181);        // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
      this.whitespace();
      this.parse_WindowVars();
      this.lookahead1W(86);         // S^WS | '(:' | 'when'
      this.consume(271);            // 'when'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("WindowEndCondition", this.e0);
    }

    private try_WindowEndCondition()
    {
      if (this.token() == 202)      // 'only'
      {
        this.consumeT(202);         // 'only'
      }
      this.lookahead1W(53);         // S^WS | '(:' | 'end'
      this.consumeT(127);           // 'end'
      this.lookahead1W(181);        // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
      this.try_WindowVars();
      this.lookahead1W(86);         // S^WS | '(:' | 'when'
      this.consumeT(271);           // 'when'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_WindowVars()
    {
      this.eventHandler.startNonterminal("WindowVars", this.e0);
      if (this.token() == 31)       // '$'
      {
        this.consume(31);           // '$'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_CurrentItem();
      }
      this.lookahead1W(174);        // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
      if (this.token() == 82)       // 'at'
      {
        this.whitespace();
        this.parse_PositionalVar();
      }
      this.lookahead1W(163);        // S^WS | '(:' | 'next' | 'previous' | 'when'
      if (this.token() == 219)      // 'previous'
      {
        this.consume(219);          // 'previous'
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.consume(31);           // '$'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_PreviousItem();
      }
      this.lookahead1W(131);        // S^WS | '(:' | 'next' | 'when'
      if (this.token() == 190)      // 'next'
      {
        this.consume(190);          // 'next'
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.consume(31);           // '$'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_NextItem();
      }
      this.eventHandler.endNonterminal("WindowVars", this.e0);
    }

    private try_WindowVars()
    {
      if (this.token() == 31)       // '$'
      {
        this.consumeT(31);          // '$'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_CurrentItem();
      }
      this.lookahead1W(174);        // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
      if (this.token() == 82)       // 'at'
      {
        this.try_PositionalVar();
      }
      this.lookahead1W(163);        // S^WS | '(:' | 'next' | 'previous' | 'when'
      if (this.token() == 219)      // 'previous'
      {
        this.consumeT(219);         // 'previous'
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.consumeT(31);          // '$'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_PreviousItem();
      }
      this.lookahead1W(131);        // S^WS | '(:' | 'next' | 'when'
      if (this.token() == 190)      // 'next'
      {
        this.consumeT(190);         // 'next'
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.consumeT(31);          // '$'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_NextItem();
      }
    }

    private parse_CurrentItem()
    {
      this.eventHandler.startNonterminal("CurrentItem", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("CurrentItem", this.e0);
    }

    private try_CurrentItem()
    {
      this.try_EQName();
    }

    private parse_PreviousItem()
    {
      this.eventHandler.startNonterminal("PreviousItem", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("PreviousItem", this.e0);
    }

    private try_PreviousItem()
    {
      this.try_EQName();
    }

    private parse_NextItem()
    {
      this.eventHandler.startNonterminal("NextItem", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("NextItem", this.e0);
    }

    private try_NextItem()
    {
      this.try_EQName();
    }

    private parse_CountClause()
    {
      this.eventHandler.startNonterminal("CountClause", this.e0);
      this.consume(106);            // 'count'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.consume(31);             // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.eventHandler.endNonterminal("CountClause", this.e0);
    }

    private try_CountClause()
    {
      this.consumeT(106);           // 'count'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.consumeT(31);            // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
    }

    private parse_WhereClause()
    {
      this.eventHandler.startNonterminal("WhereClause", this.e0);
      this.consume(272);            // 'where'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("WhereClause", this.e0);
    }

    private try_WhereClause()
    {
      this.consumeT(272);           // 'where'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_GroupByClause()
    {
      this.eventHandler.startNonterminal("GroupByClause", this.e0);
      this.consume(150);            // 'group'
      this.lookahead1W(37);         // S^WS | '(:' | 'by'
      this.consume(88);             // 'by'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_GroupingSpecList();
      this.eventHandler.endNonterminal("GroupByClause", this.e0);
    }

    private try_GroupByClause()
    {
      this.consumeT(150);           // 'group'
      this.lookahead1W(37);         // S^WS | '(:' | 'by'
      this.consumeT(88);            // 'by'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_GroupingSpecList();
    }

    private parse_GroupingSpecList()
    {
      this.eventHandler.startNonterminal("GroupingSpecList", this.e0);
      this.parse_GroupingSpec();
      for (;;)
      {
        this.lookahead1W(198);      // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
        if (this.token() != 42)     // ','
        {
          break;
        }
        this.consume(42);           // ','
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_GroupingSpec();
      }
      this.eventHandler.endNonterminal("GroupingSpecList", this.e0);
    }

    private try_GroupingSpecList()
    {
      this.try_GroupingSpec();
      for (;;)
      {
        this.lookahead1W(198);      // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
        if (this.token() != 42)     // ','
        {
          break;
        }
        this.consumeT(42);          // ','
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_GroupingSpec();
      }
    }

    private parse_GroupingSpec()
    {
      this.eventHandler.startNonterminal("GroupingSpec", this.e0);
      switch (this.token())
      {
      case 31:                      // '$'
        this.lookahead2W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 3103  // '$' EQName^Token
       || this.tokenSequence() == 36383 // '$' 'after'
       || this.tokenSequence() == 37407 // '$' 'allowing'
       || this.tokenSequence() == 37919 // '$' 'ancestor'
       || this.tokenSequence() == 38431 // '$' 'ancestor-or-self'
       || this.tokenSequence() == 38943 // '$' 'and'
       || this.tokenSequence() == 39967 // '$' 'append'
       || this.tokenSequence() == 40479 // '$' 'array'
       || this.tokenSequence() == 40991 // '$' 'as'
       || this.tokenSequence() == 41503 // '$' 'ascending'
       || this.tokenSequence() == 42015 // '$' 'at'
       || this.tokenSequence() == 42527 // '$' 'attribute'
       || this.tokenSequence() == 43039 // '$' 'base-uri'
       || this.tokenSequence() == 43551 // '$' 'before'
       || this.tokenSequence() == 44063 // '$' 'boundary-space'
       || this.tokenSequence() == 44575 // '$' 'break'
       || this.tokenSequence() == 45599 // '$' 'case'
       || this.tokenSequence() == 46111 // '$' 'cast'
       || this.tokenSequence() == 46623 // '$' 'castable'
       || this.tokenSequence() == 47135 // '$' 'catch'
       || this.tokenSequence() == 48159 // '$' 'child'
       || this.tokenSequence() == 48671 // '$' 'collation'
       || this.tokenSequence() == 49695 // '$' 'comment'
       || this.tokenSequence() == 50207 // '$' 'constraint'
       || this.tokenSequence() == 50719 // '$' 'construction'
       || this.tokenSequence() == 52255 // '$' 'context'
       || this.tokenSequence() == 52767 // '$' 'continue'
       || this.tokenSequence() == 53279 // '$' 'copy'
       || this.tokenSequence() == 53791 // '$' 'copy-namespaces'
       || this.tokenSequence() == 54303 // '$' 'count'
       || this.tokenSequence() == 54815 // '$' 'decimal-format'
       || this.tokenSequence() == 55839 // '$' 'declare'
       || this.tokenSequence() == 56351 // '$' 'default'
       || this.tokenSequence() == 56863 // '$' 'delete'
       || this.tokenSequence() == 57375 // '$' 'descendant'
       || this.tokenSequence() == 57887 // '$' 'descendant-or-self'
       || this.tokenSequence() == 58399 // '$' 'descending'
       || this.tokenSequence() == 60959 // '$' 'div'
       || this.tokenSequence() == 61471 // '$' 'document'
       || this.tokenSequence() == 61983 // '$' 'document-node'
       || this.tokenSequence() == 62495 // '$' 'element'
       || this.tokenSequence() == 63007 // '$' 'else'
       || this.tokenSequence() == 63519 // '$' 'empty'
       || this.tokenSequence() == 64031 // '$' 'empty-sequence'
       || this.tokenSequence() == 64543 // '$' 'encoding'
       || this.tokenSequence() == 65055 // '$' 'end'
       || this.tokenSequence() == 66079 // '$' 'eq'
       || this.tokenSequence() == 66591 // '$' 'every'
       || this.tokenSequence() == 67615 // '$' 'except'
       || this.tokenSequence() == 68127 // '$' 'exit'
       || this.tokenSequence() == 68639 // '$' 'external'
       || this.tokenSequence() == 69151 // '$' 'false'
       || this.tokenSequence() == 69663 // '$' 'first'
       || this.tokenSequence() == 70175 // '$' 'following'
       || this.tokenSequence() == 70687 // '$' 'following-sibling'
       || this.tokenSequence() == 71199 // '$' 'for'
       || this.tokenSequence() == 72735 // '$' 'from'
       || this.tokenSequence() == 73247 // '$' 'ft-option'
       || this.tokenSequence() == 75295 // '$' 'function'
       || this.tokenSequence() == 75807 // '$' 'ge'
       || this.tokenSequence() == 76831 // '$' 'group'
       || this.tokenSequence() == 77855 // '$' 'gt'
       || this.tokenSequence() == 78367 // '$' 'idiv'
       || this.tokenSequence() == 78879 // '$' 'if'
       || this.tokenSequence() == 79391 // '$' 'import'
       || this.tokenSequence() == 79903 // '$' 'in'
       || this.tokenSequence() == 80415 // '$' 'index'
       || this.tokenSequence() == 82463 // '$' 'insert'
       || this.tokenSequence() == 82975 // '$' 'instance'
       || this.tokenSequence() == 83487 // '$' 'integrity'
       || this.tokenSequence() == 83999 // '$' 'intersect'
       || this.tokenSequence() == 84511 // '$' 'into'
       || this.tokenSequence() == 85023 // '$' 'is'
       || this.tokenSequence() == 85535 // '$' 'item'
       || this.tokenSequence() == 86047 // '$' 'json'
       || this.tokenSequence() == 86559 // '$' 'json-item'
       || this.tokenSequence() == 87071 // '$' 'jsoniq'
       || this.tokenSequence() == 88607 // '$' 'last'
       || this.tokenSequence() == 89119 // '$' 'lax'
       || this.tokenSequence() == 89631 // '$' 'le'
       || this.tokenSequence() == 90655 // '$' 'let'
       || this.tokenSequence() == 91679 // '$' 'loop'
       || this.tokenSequence() == 92703 // '$' 'lt'
       || this.tokenSequence() == 93727 // '$' 'mod'
       || this.tokenSequence() == 94239 // '$' 'modify'
       || this.tokenSequence() == 94751 // '$' 'module'
       || this.tokenSequence() == 95775 // '$' 'namespace'
       || this.tokenSequence() == 96287 // '$' 'namespace-node'
       || this.tokenSequence() == 96799 // '$' 'ne'
       || this.tokenSequence() == 99359 // '$' 'node'
       || this.tokenSequence() == 99871 // '$' 'nodes'
       || this.tokenSequence() == 100895  // '$' 'null'
       || this.tokenSequence() == 101407  // '$' 'object'
       || this.tokenSequence() == 103455  // '$' 'only'
       || this.tokenSequence() == 103967  // '$' 'option'
       || this.tokenSequence() == 104479  // '$' 'or'
       || this.tokenSequence() == 104991  // '$' 'order'
       || this.tokenSequence() == 105503  // '$' 'ordered'
       || this.tokenSequence() == 106015  // '$' 'ordering'
       || this.tokenSequence() == 107551  // '$' 'parent'
       || this.tokenSequence() == 110623  // '$' 'preceding'
       || this.tokenSequence() == 111135  // '$' 'preceding-sibling'
       || this.tokenSequence() == 112671  // '$' 'processing-instruction'
       || this.tokenSequence() == 113695  // '$' 'rename'
       || this.tokenSequence() == 114207  // '$' 'replace'
       || this.tokenSequence() == 114719  // '$' 'return'
       || this.tokenSequence() == 115231  // '$' 'returning'
       || this.tokenSequence() == 115743  // '$' 'revalidation'
       || this.tokenSequence() == 116767  // '$' 'satisfies'
       || this.tokenSequence() == 117279  // '$' 'schema'
       || this.tokenSequence() == 117791  // '$' 'schema-attribute'
       || this.tokenSequence() == 118303  // '$' 'schema-element'
       || this.tokenSequence() == 118815  // '$' 'score'
       || this.tokenSequence() == 119327  // '$' 'select'
       || this.tokenSequence() == 119839  // '$' 'self'
       || this.tokenSequence() == 122399  // '$' 'sliding'
       || this.tokenSequence() == 122911  // '$' 'some'
       || this.tokenSequence() == 123423  // '$' 'stable'
       || this.tokenSequence() == 123935  // '$' 'start'
       || this.tokenSequence() == 125471  // '$' 'strict'
       || this.tokenSequence() == 126495  // '$' 'structured-item'
       || this.tokenSequence() == 127007  // '$' 'switch'
       || this.tokenSequence() == 127519  // '$' 'text'
       || this.tokenSequence() == 129567  // '$' 'to'
       || this.tokenSequence() == 130079  // '$' 'treat'
       || this.tokenSequence() == 130591  // '$' 'true'
       || this.tokenSequence() == 131103  // '$' 'try'
       || this.tokenSequence() == 131615  // '$' 'tumbling'
       || this.tokenSequence() == 132127  // '$' 'type'
       || this.tokenSequence() == 132639  // '$' 'typeswitch'
       || this.tokenSequence() == 133151  // '$' 'union'
       || this.tokenSequence() == 134175  // '$' 'unordered'
       || this.tokenSequence() == 134687  // '$' 'updating'
       || this.tokenSequence() == 136223  // '$' 'validate'
       || this.tokenSequence() == 136735  // '$' 'value'
       || this.tokenSequence() == 137247  // '$' 'variable'
       || this.tokenSequence() == 137759  // '$' 'version'
       || this.tokenSequence() == 139295  // '$' 'where'
       || this.tokenSequence() == 139807  // '$' 'while'
       || this.tokenSequence() == 141343) // '$' 'with'
      {
        this.lk = this.memoized(2, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_GroupingVariable();
            this.lookahead1W(206);  // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
            if (this.token() == 53  // ':='
             || this.token() == 80) // 'as'
            {
              if (this.token() == 80) // 'as'
              {
                this.try_TypeDeclaration();
              }
              this.lookahead1W(28); // S^WS | '(:' | ':='
              this.consumeT(53);    // ':='
              this.lookahead1W(267);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                      // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                      // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                      // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                      // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                      // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                      // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                      // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                      // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                      // 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                      // 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' |
                                      // 'external' | 'false' | 'first' | 'following' | 'following-sibling' | 'for' |
                                      // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                      // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                      // 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' |
                                      // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                      // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' | 'null' | 'object' |
                                      // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                      // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                      // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                      // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                      // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                      // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                      // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                      // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
              this.try_ExprSingle();
            }
            if (this.token() == 95) // 'collation'
            {
              this.consumeT(95);    // 'collation'
              this.lookahead1W(15); // URILiteral | S^WS | '(:'
              this.consumeT(7);     // URILiteral
            }
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(2, this.e0, this.lk);
        }
      }
      switch (this.tokenSequence())
      {
      case -1:
        this.parse_GroupingVariable();
        this.lookahead1W(206);      // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
        if (this.token() == 53      // ':='
         || this.token() == 80)     // 'as'
        {
          if (this.token() == 80)   // 'as'
          {
            this.whitespace();
            this.parse_TypeDeclaration();
          }
          this.lookahead1W(28);     // S^WS | '(:' | ':='
          this.consume(53);         // ':='
          this.lookahead1W(267);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          this.whitespace();
          this.parse_ExprSingle();
        }
        if (this.token() == 95)     // 'collation'
        {
          this.consume(95);         // 'collation'
          this.lookahead1W(15);     // URILiteral | S^WS | '(:'
          this.consume(7);          // URILiteral
        }
        break;
      default:
        this.parse_ExprSingle();
      }
      this.eventHandler.endNonterminal("GroupingSpec", this.e0);
    }

    private try_GroupingSpec()
    {
      switch (this.token())
      {
      case 31:                      // '$'
        this.lookahead2W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 3103  // '$' EQName^Token
       || this.tokenSequence() == 36383 // '$' 'after'
       || this.tokenSequence() == 37407 // '$' 'allowing'
       || this.tokenSequence() == 37919 // '$' 'ancestor'
       || this.tokenSequence() == 38431 // '$' 'ancestor-or-self'
       || this.tokenSequence() == 38943 // '$' 'and'
       || this.tokenSequence() == 39967 // '$' 'append'
       || this.tokenSequence() == 40479 // '$' 'array'
       || this.tokenSequence() == 40991 // '$' 'as'
       || this.tokenSequence() == 41503 // '$' 'ascending'
       || this.tokenSequence() == 42015 // '$' 'at'
       || this.tokenSequence() == 42527 // '$' 'attribute'
       || this.tokenSequence() == 43039 // '$' 'base-uri'
       || this.tokenSequence() == 43551 // '$' 'before'
       || this.tokenSequence() == 44063 // '$' 'boundary-space'
       || this.tokenSequence() == 44575 // '$' 'break'
       || this.tokenSequence() == 45599 // '$' 'case'
       || this.tokenSequence() == 46111 // '$' 'cast'
       || this.tokenSequence() == 46623 // '$' 'castable'
       || this.tokenSequence() == 47135 // '$' 'catch'
       || this.tokenSequence() == 48159 // '$' 'child'
       || this.tokenSequence() == 48671 // '$' 'collation'
       || this.tokenSequence() == 49695 // '$' 'comment'
       || this.tokenSequence() == 50207 // '$' 'constraint'
       || this.tokenSequence() == 50719 // '$' 'construction'
       || this.tokenSequence() == 52255 // '$' 'context'
       || this.tokenSequence() == 52767 // '$' 'continue'
       || this.tokenSequence() == 53279 // '$' 'copy'
       || this.tokenSequence() == 53791 // '$' 'copy-namespaces'
       || this.tokenSequence() == 54303 // '$' 'count'
       || this.tokenSequence() == 54815 // '$' 'decimal-format'
       || this.tokenSequence() == 55839 // '$' 'declare'
       || this.tokenSequence() == 56351 // '$' 'default'
       || this.tokenSequence() == 56863 // '$' 'delete'
       || this.tokenSequence() == 57375 // '$' 'descendant'
       || this.tokenSequence() == 57887 // '$' 'descendant-or-self'
       || this.tokenSequence() == 58399 // '$' 'descending'
       || this.tokenSequence() == 60959 // '$' 'div'
       || this.tokenSequence() == 61471 // '$' 'document'
       || this.tokenSequence() == 61983 // '$' 'document-node'
       || this.tokenSequence() == 62495 // '$' 'element'
       || this.tokenSequence() == 63007 // '$' 'else'
       || this.tokenSequence() == 63519 // '$' 'empty'
       || this.tokenSequence() == 64031 // '$' 'empty-sequence'
       || this.tokenSequence() == 64543 // '$' 'encoding'
       || this.tokenSequence() == 65055 // '$' 'end'
       || this.tokenSequence() == 66079 // '$' 'eq'
       || this.tokenSequence() == 66591 // '$' 'every'
       || this.tokenSequence() == 67615 // '$' 'except'
       || this.tokenSequence() == 68127 // '$' 'exit'
       || this.tokenSequence() == 68639 // '$' 'external'
       || this.tokenSequence() == 69151 // '$' 'false'
       || this.tokenSequence() == 69663 // '$' 'first'
       || this.tokenSequence() == 70175 // '$' 'following'
       || this.tokenSequence() == 70687 // '$' 'following-sibling'
       || this.tokenSequence() == 71199 // '$' 'for'
       || this.tokenSequence() == 72735 // '$' 'from'
       || this.tokenSequence() == 73247 // '$' 'ft-option'
       || this.tokenSequence() == 75295 // '$' 'function'
       || this.tokenSequence() == 75807 // '$' 'ge'
       || this.tokenSequence() == 76831 // '$' 'group'
       || this.tokenSequence() == 77855 // '$' 'gt'
       || this.tokenSequence() == 78367 // '$' 'idiv'
       || this.tokenSequence() == 78879 // '$' 'if'
       || this.tokenSequence() == 79391 // '$' 'import'
       || this.tokenSequence() == 79903 // '$' 'in'
       || this.tokenSequence() == 80415 // '$' 'index'
       || this.tokenSequence() == 82463 // '$' 'insert'
       || this.tokenSequence() == 82975 // '$' 'instance'
       || this.tokenSequence() == 83487 // '$' 'integrity'
       || this.tokenSequence() == 83999 // '$' 'intersect'
       || this.tokenSequence() == 84511 // '$' 'into'
       || this.tokenSequence() == 85023 // '$' 'is'
       || this.tokenSequence() == 85535 // '$' 'item'
       || this.tokenSequence() == 86047 // '$' 'json'
       || this.tokenSequence() == 86559 // '$' 'json-item'
       || this.tokenSequence() == 87071 // '$' 'jsoniq'
       || this.tokenSequence() == 88607 // '$' 'last'
       || this.tokenSequence() == 89119 // '$' 'lax'
       || this.tokenSequence() == 89631 // '$' 'le'
       || this.tokenSequence() == 90655 // '$' 'let'
       || this.tokenSequence() == 91679 // '$' 'loop'
       || this.tokenSequence() == 92703 // '$' 'lt'
       || this.tokenSequence() == 93727 // '$' 'mod'
       || this.tokenSequence() == 94239 // '$' 'modify'
       || this.tokenSequence() == 94751 // '$' 'module'
       || this.tokenSequence() == 95775 // '$' 'namespace'
       || this.tokenSequence() == 96287 // '$' 'namespace-node'
       || this.tokenSequence() == 96799 // '$' 'ne'
       || this.tokenSequence() == 99359 // '$' 'node'
       || this.tokenSequence() == 99871 // '$' 'nodes'
       || this.tokenSequence() == 100895  // '$' 'null'
       || this.tokenSequence() == 101407  // '$' 'object'
       || this.tokenSequence() == 103455  // '$' 'only'
       || this.tokenSequence() == 103967  // '$' 'option'
       || this.tokenSequence() == 104479  // '$' 'or'
       || this.tokenSequence() == 104991  // '$' 'order'
       || this.tokenSequence() == 105503  // '$' 'ordered'
       || this.tokenSequence() == 106015  // '$' 'ordering'
       || this.tokenSequence() == 107551  // '$' 'parent'
       || this.tokenSequence() == 110623  // '$' 'preceding'
       || this.tokenSequence() == 111135  // '$' 'preceding-sibling'
       || this.tokenSequence() == 112671  // '$' 'processing-instruction'
       || this.tokenSequence() == 113695  // '$' 'rename'
       || this.tokenSequence() == 114207  // '$' 'replace'
       || this.tokenSequence() == 114719  // '$' 'return'
       || this.tokenSequence() == 115231  // '$' 'returning'
       || this.tokenSequence() == 115743  // '$' 'revalidation'
       || this.tokenSequence() == 116767  // '$' 'satisfies'
       || this.tokenSequence() == 117279  // '$' 'schema'
       || this.tokenSequence() == 117791  // '$' 'schema-attribute'
       || this.tokenSequence() == 118303  // '$' 'schema-element'
       || this.tokenSequence() == 118815  // '$' 'score'
       || this.tokenSequence() == 119327  // '$' 'select'
       || this.tokenSequence() == 119839  // '$' 'self'
       || this.tokenSequence() == 122399  // '$' 'sliding'
       || this.tokenSequence() == 122911  // '$' 'some'
       || this.tokenSequence() == 123423  // '$' 'stable'
       || this.tokenSequence() == 123935  // '$' 'start'
       || this.tokenSequence() == 125471  // '$' 'strict'
       || this.tokenSequence() == 126495  // '$' 'structured-item'
       || this.tokenSequence() == 127007  // '$' 'switch'
       || this.tokenSequence() == 127519  // '$' 'text'
       || this.tokenSequence() == 129567  // '$' 'to'
       || this.tokenSequence() == 130079  // '$' 'treat'
       || this.tokenSequence() == 130591  // '$' 'true'
       || this.tokenSequence() == 131103  // '$' 'try'
       || this.tokenSequence() == 131615  // '$' 'tumbling'
       || this.tokenSequence() == 132127  // '$' 'type'
       || this.tokenSequence() == 132639  // '$' 'typeswitch'
       || this.tokenSequence() == 133151  // '$' 'union'
       || this.tokenSequence() == 134175  // '$' 'unordered'
       || this.tokenSequence() == 134687  // '$' 'updating'
       || this.tokenSequence() == 136223  // '$' 'validate'
       || this.tokenSequence() == 136735  // '$' 'value'
       || this.tokenSequence() == 137247  // '$' 'variable'
       || this.tokenSequence() == 137759  // '$' 'version'
       || this.tokenSequence() == 139295  // '$' 'where'
       || this.tokenSequence() == 139807  // '$' 'while'
       || this.tokenSequence() == 141343) // '$' 'with'
      {
        this.lk = this.memoized(2, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_GroupingVariable();
            this.lookahead1W(206);  // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
            if (this.token() == 53  // ':='
             || this.token() == 80) // 'as'
            {
              if (this.token() == 80) // 'as'
              {
                this.try_TypeDeclaration();
              }
              this.lookahead1W(28); // S^WS | '(:' | ':='
              this.consumeT(53);    // ':='
              this.lookahead1W(267);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                      // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                      // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                      // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                      // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                      // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                      // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                      // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                      // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                      // 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                      // 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' |
                                      // 'external' | 'false' | 'first' | 'following' | 'following-sibling' | 'for' |
                                      // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                      // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                      // 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' |
                                      // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                      // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' | 'null' | 'object' |
                                      // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                      // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                      // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                      // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                      // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                      // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                      // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                      // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
              this.try_ExprSingle();
            }
            if (this.token() == 95) // 'collation'
            {
              this.consumeT(95);    // 'collation'
              this.lookahead1W(15); // URILiteral | S^WS | '(:'
              this.consumeT(7);     // URILiteral
            }
            this.memoize(2, e0A, -1);
            this.lk = -3;
          }
          catch (p1A)
          {
            this.lk = -2;
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(2, e0A, -2);
          }
        }
      }
      switch (this.tokenSequence())
      {
      case -1:
        this.try_GroupingVariable();
        this.lookahead1W(206);      // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
        if (this.token() == 53      // ':='
         || this.token() == 80)     // 'as'
        {
          if (this.token() == 80)   // 'as'
          {
            this.try_TypeDeclaration();
          }
          this.lookahead1W(28);     // S^WS | '(:' | ':='
          this.consumeT(53);        // ':='
          this.lookahead1W(267);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          this.try_ExprSingle();
        }
        if (this.token() == 95)     // 'collation'
        {
          this.consumeT(95);        // 'collation'
          this.lookahead1W(15);     // URILiteral | S^WS | '(:'
          this.consumeT(7);         // URILiteral
        }
        break;
      case -3:
        break;
      default:
        this.try_ExprSingle();
      }
    }

    private parse_GroupingVariable()
    {
      this.eventHandler.startNonterminal("GroupingVariable", this.e0);
      this.consume(31);             // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.eventHandler.endNonterminal("GroupingVariable", this.e0);
    }

    private try_GroupingVariable()
    {
      this.consumeT(31);            // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
    }

    private parse_OrderByClause()
    {
      this.eventHandler.startNonterminal("OrderByClause", this.e0);
      switch (this.token())
      {
      case 205:                     // 'order'
        this.consume(205);          // 'order'
        this.lookahead1W(37);       // S^WS | '(:' | 'by'
        this.consume(88);           // 'by'
        break;
      default:
        this.consume(241);          // 'stable'
        this.lookahead1W(70);       // S^WS | '(:' | 'order'
        this.consume(205);          // 'order'
        this.lookahead1W(37);       // S^WS | '(:' | 'by'
        this.consume(88);           // 'by'
      }
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_OrderSpecList();
      this.eventHandler.endNonterminal("OrderByClause", this.e0);
    }

    private try_OrderByClause()
    {
      switch (this.token())
      {
      case 205:                     // 'order'
        this.consumeT(205);         // 'order'
        this.lookahead1W(37);       // S^WS | '(:' | 'by'
        this.consumeT(88);          // 'by'
        break;
      default:
        this.consumeT(241);         // 'stable'
        this.lookahead1W(70);       // S^WS | '(:' | 'order'
        this.consumeT(205);         // 'order'
        this.lookahead1W(37);       // S^WS | '(:' | 'by'
        this.consumeT(88);          // 'by'
      }
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_OrderSpecList();
    }

    private parse_OrderSpecList()
    {
      this.eventHandler.startNonterminal("OrderSpecList", this.e0);
      this.parse_OrderSpec();
      for (;;)
      {
        this.lookahead1W(198);      // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
        if (this.token() != 42)     // ','
        {
          break;
        }
        this.consume(42);           // ','
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_OrderSpec();
      }
      this.eventHandler.endNonterminal("OrderSpecList", this.e0);
    }

    private try_OrderSpecList()
    {
      this.try_OrderSpec();
      for (;;)
      {
        this.lookahead1W(198);      // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
        if (this.token() != 42)     // ','
        {
          break;
        }
        this.consumeT(42);          // ','
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_OrderSpec();
      }
    }

    private parse_OrderSpec()
    {
      this.eventHandler.startNonterminal("OrderSpec", this.e0);
      this.parse_ExprSingle();
      this.whitespace();
      this.parse_OrderModifier();
      this.eventHandler.endNonterminal("OrderSpec", this.e0);
    }

    private try_OrderSpec()
    {
      this.try_ExprSingle();
      this.try_OrderModifier();
    }

    private parse_OrderModifier()
    {
      this.eventHandler.startNonterminal("OrderModifier", this.e0);
      if (this.token() == 81        // 'ascending'
       || this.token() == 114)      // 'descending'
      {
        switch (this.token())
        {
        case 81:                    // 'ascending'
          this.consume(81);         // 'ascending'
          break;
        default:
          this.consume(114);        // 'descending'
        }
      }
      this.lookahead1W(203);        // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
      if (this.token() == 124)      // 'empty'
      {
        this.consume(124);          // 'empty'
        this.lookahead1W(125);      // S^WS | '(:' | 'greatest' | 'least'
        switch (this.token())
        {
        case 149:                   // 'greatest'
          this.consume(149);        // 'greatest'
          break;
        default:
          this.consume(176);        // 'least'
        }
      }
      this.lookahead1W(199);        // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
      if (this.token() == 95)       // 'collation'
      {
        this.consume(95);           // 'collation'
        this.lookahead1W(15);       // URILiteral | S^WS | '(:'
        this.consume(7);            // URILiteral
      }
      this.eventHandler.endNonterminal("OrderModifier", this.e0);
    }

    private try_OrderModifier()
    {
      if (this.token() == 81        // 'ascending'
       || this.token() == 114)      // 'descending'
      {
        switch (this.token())
        {
        case 81:                    // 'ascending'
          this.consumeT(81);        // 'ascending'
          break;
        default:
          this.consumeT(114);       // 'descending'
        }
      }
      this.lookahead1W(203);        // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
      if (this.token() == 124)      // 'empty'
      {
        this.consumeT(124);         // 'empty'
        this.lookahead1W(125);      // S^WS | '(:' | 'greatest' | 'least'
        switch (this.token())
        {
        case 149:                   // 'greatest'
          this.consumeT(149);       // 'greatest'
          break;
        default:
          this.consumeT(176);       // 'least'
        }
      }
      this.lookahead1W(199);        // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
      if (this.token() == 95)       // 'collation'
      {
        this.consumeT(95);          // 'collation'
        this.lookahead1W(15);       // URILiteral | S^WS | '(:'
        this.consumeT(7);           // URILiteral
      }
    }

    private parse_ReturnClause()
    {
      this.eventHandler.startNonterminal("ReturnClause", this.e0);
      this.consume(224);            // 'return'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("ReturnClause", this.e0);
    }

    private try_ReturnClause()
    {
      this.consumeT(224);           // 'return'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_QuantifiedExpr()
    {
      this.eventHandler.startNonterminal("QuantifiedExpr", this.e0);
      switch (this.token())
      {
      case 240:                     // 'some'
        this.consume(240);          // 'some'
        break;
      default:
        this.consume(130);          // 'every'
      }
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.whitespace();
      this.parse_QuantifiedVarDecl();
      for (;;)
      {
        if (this.token() != 42)     // ','
        {
          break;
        }
        this.consume(42);           // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.whitespace();
        this.parse_QuantifiedVarDecl();
      }
      this.consume(228);            // 'satisfies'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("QuantifiedExpr", this.e0);
    }

    private try_QuantifiedExpr()
    {
      switch (this.token())
      {
      case 240:                     // 'some'
        this.consumeT(240);         // 'some'
        break;
      default:
        this.consumeT(130);         // 'every'
      }
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.try_QuantifiedVarDecl();
      for (;;)
      {
        if (this.token() != 42)     // ','
        {
          break;
        }
        this.consumeT(42);          // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.try_QuantifiedVarDecl();
      }
      this.consumeT(228);           // 'satisfies'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_QuantifiedVarDecl()
    {
      this.eventHandler.startNonterminal("QuantifiedVarDecl", this.e0);
      this.consume(31);             // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(114);        // S^WS | '(:' | 'as' | 'in'
      if (this.token() == 80)       // 'as'
      {
        this.whitespace();
        this.parse_TypeDeclaration();
      }
      this.lookahead1W(56);         // S^WS | '(:' | 'in'
      this.consume(156);            // 'in'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("QuantifiedVarDecl", this.e0);
    }

    private try_QuantifiedVarDecl()
    {
      this.consumeT(31);            // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
      this.lookahead1W(114);        // S^WS | '(:' | 'as' | 'in'
      if (this.token() == 80)       // 'as'
      {
        this.try_TypeDeclaration();
      }
      this.lookahead1W(56);         // S^WS | '(:' | 'in'
      this.consumeT(156);           // 'in'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_SwitchExpr()
    {
      this.eventHandler.startNonterminal("SwitchExpr", this.e0);
      this.consume(248);            // 'switch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consume(35);             // '('
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.consume(38);             // ')'
      for (;;)
      {
        this.lookahead1W(38);       // S^WS | '(:' | 'case'
        this.whitespace();
        this.parse_SwitchCaseClause();
        if (this.token() != 89)     // 'case'
        {
          break;
        }
      }
      this.consume(110);            // 'default'
      this.lookahead1W(73);         // S^WS | '(:' | 'return'
      this.consume(224);            // 'return'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("SwitchExpr", this.e0);
    }

    private try_SwitchExpr()
    {
      this.consumeT(248);           // 'switch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consumeT(35);            // '('
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.consumeT(38);            // ')'
      for (;;)
      {
        this.lookahead1W(38);       // S^WS | '(:' | 'case'
        this.try_SwitchCaseClause();
        if (this.token() != 89)     // 'case'
        {
          break;
        }
      }
      this.consumeT(110);           // 'default'
      this.lookahead1W(73);         // S^WS | '(:' | 'return'
      this.consumeT(224);           // 'return'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_SwitchCaseClause()
    {
      this.eventHandler.startNonterminal("SwitchCaseClause", this.e0);
      for (;;)
      {
        this.consume(89);           // 'case'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_SwitchCaseOperand();
        if (this.token() != 89)     // 'case'
        {
          break;
        }
      }
      this.consume(224);            // 'return'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("SwitchCaseClause", this.e0);
    }

    private try_SwitchCaseClause()
    {
      for (;;)
      {
        this.consumeT(89);          // 'case'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_SwitchCaseOperand();
        if (this.token() != 89)     // 'case'
        {
          break;
        }
      }
      this.consumeT(224);           // 'return'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_SwitchCaseOperand()
    {
      this.eventHandler.startNonterminal("SwitchCaseOperand", this.e0);
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("SwitchCaseOperand", this.e0);
    }

    private try_SwitchCaseOperand()
    {
      this.try_ExprSingle();
    }

    private parse_TypeswitchExpr()
    {
      this.eventHandler.startNonterminal("TypeswitchExpr", this.e0);
      this.consume(259);            // 'typeswitch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consume(35);             // '('
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.consume(38);             // ')'
      for (;;)
      {
        this.lookahead1W(38);       // S^WS | '(:' | 'case'
        this.whitespace();
        this.parse_CaseClause();
        if (this.token() != 89)     // 'case'
        {
          break;
        }
      }
      this.consume(110);            // 'default'
      this.lookahead1W(99);         // S^WS | '$' | '(:' | 'return'
      if (this.token() == 31)       // '$'
      {
        this.consume(31);           // '$'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_VarName();
      }
      this.lookahead1W(73);         // S^WS | '(:' | 'return'
      this.consume(224);            // 'return'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("TypeswitchExpr", this.e0);
    }

    private try_TypeswitchExpr()
    {
      this.consumeT(259);           // 'typeswitch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consumeT(35);            // '('
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.consumeT(38);            // ')'
      for (;;)
      {
        this.lookahead1W(38);       // S^WS | '(:' | 'case'
        this.try_CaseClause();
        if (this.token() != 89)     // 'case'
        {
          break;
        }
      }
      this.consumeT(110);           // 'default'
      this.lookahead1W(99);         // S^WS | '$' | '(:' | 'return'
      if (this.token() == 31)       // '$'
      {
        this.consumeT(31);          // '$'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_VarName();
      }
      this.lookahead1W(73);         // S^WS | '(:' | 'return'
      this.consumeT(224);           // 'return'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_CaseClause()
    {
      this.eventHandler.startNonterminal("CaseClause", this.e0);
      this.consume(89);             // 'case'
      this.lookahead1W(258);        // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.token() == 31)       // '$'
      {
        this.consume(31);           // '$'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_VarName();
        this.lookahead1W(33);       // S^WS | '(:' | 'as'
        this.consume(80);           // 'as'
      }
      this.lookahead1W(254);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_SequenceTypeUnion();
      this.consume(224);            // 'return'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("CaseClause", this.e0);
    }

    private try_CaseClause()
    {
      this.consumeT(89);            // 'case'
      this.lookahead1W(258);        // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.token() == 31)       // '$'
      {
        this.consumeT(31);          // '$'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_VarName();
        this.lookahead1W(33);       // S^WS | '(:' | 'as'
        this.consumeT(80);          // 'as'
      }
      this.lookahead1W(254);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_SequenceTypeUnion();
      this.consumeT(224);           // 'return'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_SequenceTypeUnion()
    {
      this.eventHandler.startNonterminal("SequenceTypeUnion", this.e0);
      this.parse_SequenceType();
      for (;;)
      {
        this.lookahead1W(138);      // S^WS | '(:' | 'return' | '|'
        if (this.token() != 284)    // '|'
        {
          break;
        }
        this.consume(284);          // '|'
        this.lookahead1W(254);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_SequenceType();
      }
      this.eventHandler.endNonterminal("SequenceTypeUnion", this.e0);
    }

    private try_SequenceTypeUnion()
    {
      this.try_SequenceType();
      for (;;)
      {
        this.lookahead1W(138);      // S^WS | '(:' | 'return' | '|'
        if (this.token() != 284)    // '|'
        {
          break;
        }
        this.consumeT(284);         // '|'
        this.lookahead1W(254);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_SequenceType();
      }
    }

    private parse_IfExpr()
    {
      this.eventHandler.startNonterminal("IfExpr", this.e0);
      this.consume(154);            // 'if'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consume(35);             // '('
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.consume(38);             // ')'
      this.lookahead1W(80);         // S^WS | '(:' | 'then'
      this.consume(250);            // 'then'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.consume(123);            // 'else'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("IfExpr", this.e0);
    }

    private try_IfExpr()
    {
      this.consumeT(154);           // 'if'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consumeT(35);            // '('
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.consumeT(38);            // ')'
      this.lookahead1W(80);         // S^WS | '(:' | 'then'
      this.consumeT(250);           // 'then'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
      this.consumeT(123);           // 'else'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_TryCatchExpr()
    {
      this.eventHandler.startNonterminal("TryCatchExpr", this.e0);
      this.parse_TryClause();
      for (;;)
      {
        this.lookahead1W(39);       // S^WS | '(:' | 'catch'
        this.whitespace();
        this.parse_CatchClause();
        this.lookahead1W(208);      // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
        if (this.token() != 92)     // 'catch'
        {
          break;
        }
      }
      this.eventHandler.endNonterminal("TryCatchExpr", this.e0);
    }

    private try_TryCatchExpr()
    {
      this.try_TryClause();
      for (;;)
      {
        this.lookahead1W(39);       // S^WS | '(:' | 'catch'
        this.try_CatchClause();
        this.lookahead1W(208);      // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
        if (this.token() != 92)     // 'catch'
        {
          break;
        }
      }
    }

    private parse_TryClause()
    {
      this.eventHandler.startNonterminal("TryClause", this.e0);
      this.consume(256);            // 'try'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.consume(281);            // '{'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_TryTargetExpr();
      this.consume(287);            // '}'
      this.eventHandler.endNonterminal("TryClause", this.e0);
    }

    private try_TryClause()
    {
      this.consumeT(256);           // 'try'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.consumeT(281);           // '{'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_TryTargetExpr();
      this.consumeT(287);           // '}'
    }

    private parse_TryTargetExpr()
    {
      this.eventHandler.startNonterminal("TryTargetExpr", this.e0);
      this.parse_Expr();
      this.eventHandler.endNonterminal("TryTargetExpr", this.e0);
    }

    private try_TryTargetExpr()
    {
      this.try_Expr();
    }

    private parse_CatchClause()
    {
      this.eventHandler.startNonterminal("CatchClause", this.e0);
      this.consume(92);             // 'catch'
      this.lookahead1W(249);        // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_CatchErrorList();
      this.consume(281);            // '{'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.consume(287);            // '}'
      this.eventHandler.endNonterminal("CatchClause", this.e0);
    }

    private try_CatchClause()
    {
      this.consumeT(92);            // 'catch'
      this.lookahead1W(249);        // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_CatchErrorList();
      this.consumeT(281);           // '{'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.consumeT(287);           // '}'
    }

    private parse_CatchErrorList()
    {
      this.eventHandler.startNonterminal("CatchErrorList", this.e0);
      this.parse_NameTest();
      for (;;)
      {
        this.lookahead1W(140);      // S^WS | '(:' | '{' | '|'
        if (this.token() != 284)    // '|'
        {
          break;
        }
        this.consume(284);          // '|'
        this.lookahead1W(249);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_NameTest();
      }
      this.eventHandler.endNonterminal("CatchErrorList", this.e0);
    }

    private try_CatchErrorList()
    {
      this.try_NameTest();
      for (;;)
      {
        this.lookahead1W(140);      // S^WS | '(:' | '{' | '|'
        if (this.token() != 284)    // '|'
        {
          break;
        }
        this.consumeT(284);         // '|'
        this.lookahead1W(249);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_NameTest();
      }
    }

    private parse_OrExpr()
    {
      this.eventHandler.startNonterminal("OrExpr", this.e0);
      this.parse_AndExpr();
      for (;;)
      {
        if (this.token() != 204)    // 'or'
        {
          break;
        }
        this.consume(204);          // 'or'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_AndExpr();
      }
      this.eventHandler.endNonterminal("OrExpr", this.e0);
    }

    private try_OrExpr()
    {
      this.try_AndExpr();
      for (;;)
      {
        if (this.token() != 204)    // 'or'
        {
          break;
        }
        this.consumeT(204);         // 'or'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_AndExpr();
      }
    }

    private parse_AndExpr()
    {
      this.eventHandler.startNonterminal("AndExpr", this.e0);
      this.parse_NotExpr();
      for (;;)
      {
        if (this.token() != 76)     // 'and'
        {
          break;
        }
        this.consume(76);           // 'and'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_NotExpr();
      }
      this.eventHandler.endNonterminal("AndExpr", this.e0);
    }

    private try_AndExpr()
    {
      this.try_NotExpr();
      for (;;)
      {
        if (this.token() != 76)     // 'and'
        {
          break;
        }
        this.consumeT(76);          // 'and'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_NotExpr();
      }
    }

    private parse_NotExpr()
    {
      this.eventHandler.startNonterminal("NotExpr", this.e0);
      if (this.token() == 196)      // 'not'
      {
        this.consume(196);          // 'not'
      }
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      this.whitespace();
      this.parse_ComparisonExpr();
      this.eventHandler.endNonterminal("NotExpr", this.e0);
    }

    private try_NotExpr()
    {
      if (this.token() == 196)      // 'not'
      {
        this.consumeT(196);         // 'not'
      }
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      this.try_ComparisonExpr();
    }

    private parse_ComparisonExpr()
    {
      this.eventHandler.startNonterminal("ComparisonExpr", this.e0);
      this.parse_FTContainsExpr();
      if (this.token() == 27        // '!='
       || this.token() == 55        // '<'
       || this.token() == 58        // '<<'
       || this.token() == 59        // '<='
       || this.token() == 61        // '='
       || this.token() == 62        // '>'
       || this.token() == 63        // '>='
       || this.token() == 64        // '>>'
       || this.token() == 129       // 'eq'
       || this.token() == 148       // 'ge'
       || this.token() == 152       // 'gt'
       || this.token() == 166       // 'is'
       || this.token() == 175       // 'le'
       || this.token() == 181       // 'lt'
       || this.token() == 189)      // 'ne'
      {
        switch (this.token())
        {
        case 129:                   // 'eq'
        case 148:                   // 'ge'
        case 152:                   // 'gt'
        case 175:                   // 'le'
        case 181:                   // 'lt'
        case 189:                   // 'ne'
          this.whitespace();
          this.parse_ValueComp();
          break;
        case 58:                    // '<<'
        case 64:                    // '>>'
        case 166:                   // 'is'
          this.whitespace();
          this.parse_NodeComp();
          break;
        default:
          this.whitespace();
          this.parse_GeneralComp();
        }
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_FTContainsExpr();
      }
      this.eventHandler.endNonterminal("ComparisonExpr", this.e0);
    }

    private try_ComparisonExpr()
    {
      this.try_FTContainsExpr();
      if (this.token() == 27        // '!='
       || this.token() == 55        // '<'
       || this.token() == 58        // '<<'
       || this.token() == 59        // '<='
       || this.token() == 61        // '='
       || this.token() == 62        // '>'
       || this.token() == 63        // '>='
       || this.token() == 64        // '>>'
       || this.token() == 129       // 'eq'
       || this.token() == 148       // 'ge'
       || this.token() == 152       // 'gt'
       || this.token() == 166       // 'is'
       || this.token() == 175       // 'le'
       || this.token() == 181       // 'lt'
       || this.token() == 189)      // 'ne'
      {
        switch (this.token())
        {
        case 129:                   // 'eq'
        case 148:                   // 'ge'
        case 152:                   // 'gt'
        case 175:                   // 'le'
        case 181:                   // 'lt'
        case 189:                   // 'ne'
          this.try_ValueComp();
          break;
        case 58:                    // '<<'
        case 64:                    // '>>'
        case 166:                   // 'is'
          this.try_NodeComp();
          break;
        default:
          this.try_GeneralComp();
        }
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_FTContainsExpr();
      }
    }

    private parse_FTContainsExpr()
    {
      this.eventHandler.startNonterminal("FTContainsExpr", this.e0);
      this.parse_StringConcatExpr();
      if (this.token() == 100)      // 'contains'
      {
        this.consume(100);          // 'contains'
        this.lookahead1W(79);       // S^WS | '(:' | 'text'
        this.consume(249);          // 'text'
        this.lookahead1W(177);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.whitespace();
        this.parse_FTSelection();
        if (this.token() == 277)    // 'without'
        {
          this.whitespace();
          this.parse_FTIgnoreOption();
        }
      }
      this.eventHandler.endNonterminal("FTContainsExpr", this.e0);
    }

    private try_FTContainsExpr()
    {
      this.try_StringConcatExpr();
      if (this.token() == 100)      // 'contains'
      {
        this.consumeT(100);         // 'contains'
        this.lookahead1W(79);       // S^WS | '(:' | 'text'
        this.consumeT(249);         // 'text'
        this.lookahead1W(177);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.try_FTSelection();
        if (this.token() == 277)    // 'without'
        {
          this.try_FTIgnoreOption();
        }
      }
    }

    private parse_StringConcatExpr()
    {
      this.eventHandler.startNonterminal("StringConcatExpr", this.e0);
      this.parse_RangeExpr();
      for (;;)
      {
        if (this.token() != 285)    // '||'
        {
          break;
        }
        this.consume(285);          // '||'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_RangeExpr();
      }
      this.eventHandler.endNonterminal("StringConcatExpr", this.e0);
    }

    private try_StringConcatExpr()
    {
      this.try_RangeExpr();
      for (;;)
      {
        if (this.token() != 285)    // '||'
        {
          break;
        }
        this.consumeT(285);         // '||'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_RangeExpr();
      }
    }

    private parse_RangeExpr()
    {
      this.eventHandler.startNonterminal("RangeExpr", this.e0);
      this.parse_AdditiveExpr();
      if (this.token() == 253)      // 'to'
      {
        this.consume(253);          // 'to'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_AdditiveExpr();
      }
      this.eventHandler.endNonterminal("RangeExpr", this.e0);
    }

    private try_RangeExpr()
    {
      this.try_AdditiveExpr();
      if (this.token() == 253)      // 'to'
      {
        this.consumeT(253);         // 'to'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_AdditiveExpr();
      }
    }

    private parse_AdditiveExpr()
    {
      this.eventHandler.startNonterminal("AdditiveExpr", this.e0);
      this.parse_MultiplicativeExpr();
      for (;;)
      {
        if (this.token() != 41      // '+'
         && this.token() != 43)     // '-'
        {
          break;
        }
        switch (this.token())
        {
        case 41:                    // '+'
          this.consume(41);         // '+'
          break;
        default:
          this.consume(43);         // '-'
        }
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_MultiplicativeExpr();
      }
      this.eventHandler.endNonterminal("AdditiveExpr", this.e0);
    }

    private try_AdditiveExpr()
    {
      this.try_MultiplicativeExpr();
      for (;;)
      {
        if (this.token() != 41      // '+'
         && this.token() != 43)     // '-'
        {
          break;
        }
        switch (this.token())
        {
        case 41:                    // '+'
          this.consumeT(41);        // '+'
          break;
        default:
          this.consumeT(43);        // '-'
        }
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_MultiplicativeExpr();
      }
    }

    private parse_MultiplicativeExpr()
    {
      this.eventHandler.startNonterminal("MultiplicativeExpr", this.e0);
      this.parse_UnionExpr();
      for (;;)
      {
        if (this.token() != 39      // '*'
         && this.token() != 119     // 'div'
         && this.token() != 153     // 'idiv'
         && this.token() != 183)    // 'mod'
        {
          break;
        }
        switch (this.token())
        {
        case 39:                    // '*'
          this.consume(39);         // '*'
          break;
        case 119:                   // 'div'
          this.consume(119);        // 'div'
          break;
        case 153:                   // 'idiv'
          this.consume(153);        // 'idiv'
          break;
        default:
          this.consume(183);        // 'mod'
        }
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_UnionExpr();
      }
      this.eventHandler.endNonterminal("MultiplicativeExpr", this.e0);
    }

    private try_MultiplicativeExpr()
    {
      this.try_UnionExpr();
      for (;;)
      {
        if (this.token() != 39      // '*'
         && this.token() != 119     // 'div'
         && this.token() != 153     // 'idiv'
         && this.token() != 183)    // 'mod'
        {
          break;
        }
        switch (this.token())
        {
        case 39:                    // '*'
          this.consumeT(39);        // '*'
          break;
        case 119:                   // 'div'
          this.consumeT(119);       // 'div'
          break;
        case 153:                   // 'idiv'
          this.consumeT(153);       // 'idiv'
          break;
        default:
          this.consumeT(183);       // 'mod'
        }
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_UnionExpr();
      }
    }

    private parse_UnionExpr()
    {
      this.eventHandler.startNonterminal("UnionExpr", this.e0);
      this.parse_IntersectExceptExpr();
      for (;;)
      {
        if (this.token() != 260     // 'union'
         && this.token() != 284)    // '|'
        {
          break;
        }
        switch (this.token())
        {
        case 260:                   // 'union'
          this.consume(260);        // 'union'
          break;
        default:
          this.consume(284);        // '|'
        }
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_IntersectExceptExpr();
      }
      this.eventHandler.endNonterminal("UnionExpr", this.e0);
    }

    private try_UnionExpr()
    {
      this.try_IntersectExceptExpr();
      for (;;)
      {
        if (this.token() != 260     // 'union'
         && this.token() != 284)    // '|'
        {
          break;
        }
        switch (this.token())
        {
        case 260:                   // 'union'
          this.consumeT(260);       // 'union'
          break;
        default:
          this.consumeT(284);       // '|'
        }
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_IntersectExceptExpr();
      }
    }

    private parse_IntersectExceptExpr()
    {
      this.eventHandler.startNonterminal("IntersectExceptExpr", this.e0);
      this.parse_InstanceofExpr();
      for (;;)
      {
        this.lookahead1W(222);      // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        if (this.token() != 132     // 'except'
         && this.token() != 164)    // 'intersect'
        {
          break;
        }
        switch (this.token())
        {
        case 164:                   // 'intersect'
          this.consume(164);        // 'intersect'
          break;
        default:
          this.consume(132);        // 'except'
        }
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_InstanceofExpr();
      }
      this.eventHandler.endNonterminal("IntersectExceptExpr", this.e0);
    }

    private try_IntersectExceptExpr()
    {
      this.try_InstanceofExpr();
      for (;;)
      {
        this.lookahead1W(222);      // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        if (this.token() != 132     // 'except'
         && this.token() != 164)    // 'intersect'
        {
          break;
        }
        switch (this.token())
        {
        case 164:                   // 'intersect'
          this.consumeT(164);       // 'intersect'
          break;
        default:
          this.consumeT(132);       // 'except'
        }
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_InstanceofExpr();
      }
    }

    private parse_InstanceofExpr()
    {
      this.eventHandler.startNonterminal("InstanceofExpr", this.e0);
      this.parse_TreatExpr();
      this.lookahead1W(223);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (this.token() == 162)      // 'instance'
      {
        this.consume(162);          // 'instance'
        this.lookahead1W(67);       // S^WS | '(:' | 'of'
        this.consume(200);          // 'of'
        this.lookahead1W(254);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_SequenceType();
      }
      this.eventHandler.endNonterminal("InstanceofExpr", this.e0);
    }

    private try_InstanceofExpr()
    {
      this.try_TreatExpr();
      this.lookahead1W(223);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (this.token() == 162)      // 'instance'
      {
        this.consumeT(162);         // 'instance'
        this.lookahead1W(67);       // S^WS | '(:' | 'of'
        this.consumeT(200);         // 'of'
        this.lookahead1W(254);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_SequenceType();
      }
    }

    private parse_TreatExpr()
    {
      this.eventHandler.startNonterminal("TreatExpr", this.e0);
      this.parse_CastableExpr();
      this.lookahead1W(224);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      if (this.token() == 254)      // 'treat'
      {
        this.consume(254);          // 'treat'
        this.lookahead1W(33);       // S^WS | '(:' | 'as'
        this.consume(80);           // 'as'
        this.lookahead1W(254);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_SequenceType();
      }
      this.eventHandler.endNonterminal("TreatExpr", this.e0);
    }

    private try_TreatExpr()
    {
      this.try_CastableExpr();
      this.lookahead1W(224);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      if (this.token() == 254)      // 'treat'
      {
        this.consumeT(254);         // 'treat'
        this.lookahead1W(33);       // S^WS | '(:' | 'as'
        this.consumeT(80);          // 'as'
        this.lookahead1W(254);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_SequenceType();
      }
    }

    private parse_CastableExpr()
    {
      this.eventHandler.startNonterminal("CastableExpr", this.e0);
      this.parse_CastExpr();
      this.lookahead1W(225);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      if (this.token() == 91)       // 'castable'
      {
        this.consume(91);           // 'castable'
        this.lookahead1W(33);       // S^WS | '(:' | 'as'
        this.consume(80);           // 'as'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_SingleType();
      }
      this.eventHandler.endNonterminal("CastableExpr", this.e0);
    }

    private try_CastableExpr()
    {
      this.try_CastExpr();
      this.lookahead1W(225);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      if (this.token() == 91)       // 'castable'
      {
        this.consumeT(91);          // 'castable'
        this.lookahead1W(33);       // S^WS | '(:' | 'as'
        this.consumeT(80);          // 'as'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_SingleType();
      }
    }

    private parse_CastExpr()
    {
      this.eventHandler.startNonterminal("CastExpr", this.e0);
      this.parse_UnaryExpr();
      this.lookahead1W(227);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      if (this.token() == 90)       // 'cast'
      {
        this.consume(90);           // 'cast'
        this.lookahead1W(33);       // S^WS | '(:' | 'as'
        this.consume(80);           // 'as'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_SingleType();
      }
      this.eventHandler.endNonterminal("CastExpr", this.e0);
    }

    private try_CastExpr()
    {
      this.try_UnaryExpr();
      this.lookahead1W(227);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      if (this.token() == 90)       // 'cast'
      {
        this.consumeT(90);          // 'cast'
        this.lookahead1W(33);       // S^WS | '(:' | 'as'
        this.consumeT(80);          // 'as'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_SingleType();
      }
    }

    private parse_UnaryExpr()
    {
      this.eventHandler.startNonterminal("UnaryExpr", this.e0);
      for (;;)
      {
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        if (this.token() != 41      // '+'
         && this.token() != 43)     // '-'
        {
          break;
        }
        switch (this.token())
        {
        case 43:                    // '-'
          this.consume(43);         // '-'
          break;
        default:
          this.consume(41);         // '+'
        }
      }
      this.whitespace();
      this.parse_ValueExpr();
      this.eventHandler.endNonterminal("UnaryExpr", this.e0);
    }

    private try_UnaryExpr()
    {
      for (;;)
      {
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        if (this.token() != 41      // '+'
         && this.token() != 43)     // '-'
        {
          break;
        }
        switch (this.token())
        {
        case 43:                    // '-'
          this.consumeT(43);        // '-'
          break;
        default:
          this.consumeT(41);        // '+'
        }
      }
      this.try_ValueExpr();
    }

    private parse_ValueExpr()
    {
      this.eventHandler.startNonterminal("ValueExpr", this.e0);
      switch (this.token())
      {
      case 266:                     // 'validate'
        this.lookahead2W(188);      // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.tokenSequence())
      {
      case 89354:                   // 'validate' 'lax'
      case 125706:                  // 'validate' 'strict'
      case 132362:                  // 'validate' 'type'
      case 144138:                  // 'validate' '{'
        this.parse_ValidateExpr();
        break;
      case 36:                      // '(#'
        this.parse_ExtensionExpr();
        break;
      default:
        this.parse_SimpleMapExpr();
      }
      this.eventHandler.endNonterminal("ValueExpr", this.e0);
    }

    private try_ValueExpr()
    {
      switch (this.token())
      {
      case 266:                     // 'validate'
        this.lookahead2W(188);      // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.tokenSequence())
      {
      case 89354:                   // 'validate' 'lax'
      case 125706:                  // 'validate' 'strict'
      case 132362:                  // 'validate' 'type'
      case 144138:                  // 'validate' '{'
        this.try_ValidateExpr();
        break;
      case 36:                      // '(#'
        this.try_ExtensionExpr();
        break;
      default:
        this.try_SimpleMapExpr();
      }
    }

    private parse_SimpleMapExpr()
    {
      this.eventHandler.startNonterminal("SimpleMapExpr", this.e0);
      this.parse_PathExpr();
      for (;;)
      {
        if (this.token() != 26)     // '!'
        {
          break;
        }
        this.consume(26);           // '!'
        this.lookahead1W(263);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_PathExpr();
      }
      this.eventHandler.endNonterminal("SimpleMapExpr", this.e0);
    }

    private try_SimpleMapExpr()
    {
      this.try_PathExpr();
      for (;;)
      {
        if (this.token() != 26)     // '!'
        {
          break;
        }
        this.consumeT(26);          // '!'
        this.lookahead1W(263);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        this.try_PathExpr();
      }
    }

    private parse_GeneralComp()
    {
      this.eventHandler.startNonterminal("GeneralComp", this.e0);
      switch (this.token())
      {
      case 61:                      // '='
        this.consume(61);           // '='
        break;
      case 27:                      // '!='
        this.consume(27);           // '!='
        break;
      case 55:                      // '<'
        this.consume(55);           // '<'
        break;
      case 59:                      // '<='
        this.consume(59);           // '<='
        break;
      case 62:                      // '>'
        this.consume(62);           // '>'
        break;
      default:
        this.consume(63);           // '>='
      }
      this.eventHandler.endNonterminal("GeneralComp", this.e0);
    }

    private try_GeneralComp()
    {
      switch (this.token())
      {
      case 61:                      // '='
        this.consumeT(61);          // '='
        break;
      case 27:                      // '!='
        this.consumeT(27);          // '!='
        break;
      case 55:                      // '<'
        this.consumeT(55);          // '<'
        break;
      case 59:                      // '<='
        this.consumeT(59);          // '<='
        break;
      case 62:                      // '>'
        this.consumeT(62);          // '>'
        break;
      default:
        this.consumeT(63);          // '>='
      }
    }

    private parse_ValueComp()
    {
      this.eventHandler.startNonterminal("ValueComp", this.e0);
      switch (this.token())
      {
      case 129:                     // 'eq'
        this.consume(129);          // 'eq'
        break;
      case 189:                     // 'ne'
        this.consume(189);          // 'ne'
        break;
      case 181:                     // 'lt'
        this.consume(181);          // 'lt'
        break;
      case 175:                     // 'le'
        this.consume(175);          // 'le'
        break;
      case 152:                     // 'gt'
        this.consume(152);          // 'gt'
        break;
      default:
        this.consume(148);          // 'ge'
      }
      this.eventHandler.endNonterminal("ValueComp", this.e0);
    }

    private try_ValueComp()
    {
      switch (this.token())
      {
      case 129:                     // 'eq'
        this.consumeT(129);         // 'eq'
        break;
      case 189:                     // 'ne'
        this.consumeT(189);         // 'ne'
        break;
      case 181:                     // 'lt'
        this.consumeT(181);         // 'lt'
        break;
      case 175:                     // 'le'
        this.consumeT(175);         // 'le'
        break;
      case 152:                     // 'gt'
        this.consumeT(152);         // 'gt'
        break;
      default:
        this.consumeT(148);         // 'ge'
      }
    }

    private parse_NodeComp()
    {
      this.eventHandler.startNonterminal("NodeComp", this.e0);
      switch (this.token())
      {
      case 166:                     // 'is'
        this.consume(166);          // 'is'
        break;
      case 58:                      // '<<'
        this.consume(58);           // '<<'
        break;
      default:
        this.consume(64);           // '>>'
      }
      this.eventHandler.endNonterminal("NodeComp", this.e0);
    }

    private try_NodeComp()
    {
      switch (this.token())
      {
      case 166:                     // 'is'
        this.consumeT(166);         // 'is'
        break;
      case 58:                      // '<<'
        this.consumeT(58);          // '<<'
        break;
      default:
        this.consumeT(64);          // '>>'
      }
    }

    private parse_ValidateExpr()
    {
      this.eventHandler.startNonterminal("ValidateExpr", this.e0);
      this.consume(266);            // 'validate'
      this.lookahead1W(175);        // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
      if (this.token() != 281)      // '{'
      {
        switch (this.token())
        {
        case 258:                   // 'type'
          this.consume(258);        // 'type'
          this.lookahead1W(246);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          this.whitespace();
          this.parse_TypeName();
          break;
        default:
          this.whitespace();
          this.parse_ValidationMode();
        }
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.consume(281);            // '{'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.consume(287);            // '}'
      this.eventHandler.endNonterminal("ValidateExpr", this.e0);
    }

    private try_ValidateExpr()
    {
      this.consumeT(266);           // 'validate'
      this.lookahead1W(175);        // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
      if (this.token() != 281)      // '{'
      {
        switch (this.token())
        {
        case 258:                   // 'type'
          this.consumeT(258);       // 'type'
          this.lookahead1W(246);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          this.try_TypeName();
          break;
        default:
          this.try_ValidationMode();
        }
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.consumeT(281);           // '{'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.consumeT(287);           // '}'
    }

    private parse_ValidationMode()
    {
      this.eventHandler.startNonterminal("ValidationMode", this.e0);
      switch (this.token())
      {
      case 174:                     // 'lax'
        this.consume(174);          // 'lax'
        break;
      default:
        this.consume(245);          // 'strict'
      }
      this.eventHandler.endNonterminal("ValidationMode", this.e0);
    }

    private try_ValidationMode()
    {
      switch (this.token())
      {
      case 174:                     // 'lax'
        this.consumeT(174);         // 'lax'
        break;
      default:
        this.consumeT(245);         // 'strict'
      }
    }

    private parse_ExtensionExpr()
    {
      this.eventHandler.startNonterminal("ExtensionExpr", this.e0);
      for (;;)
      {
        this.whitespace();
        this.parse_Pragma();
        this.lookahead1W(104);      // S^WS | '(#' | '(:' | '{'
        if (this.token() != 36)     // '(#'
        {
          break;
        }
      }
      this.consume(281);            // '{'
      this.lookahead1W(275);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      if (this.token() != 287)      // '}'
      {
        this.whitespace();
        this.parse_Expr();
      }
      this.consume(287);            // '}'
      this.eventHandler.endNonterminal("ExtensionExpr", this.e0);
    }

    private try_ExtensionExpr()
    {
      for (;;)
      {
        this.try_Pragma();
        this.lookahead1W(104);      // S^WS | '(#' | '(:' | '{'
        if (this.token() != 36)     // '(#'
        {
          break;
        }
      }
      this.consumeT(281);           // '{'
      this.lookahead1W(275);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      if (this.token() != 287)      // '}'
      {
        this.try_Expr();
      }
      this.consumeT(287);           // '}'
    }

    private parse_Pragma()
    {
      this.eventHandler.startNonterminal("Pragma", this.e0);
      this.consume(36);             // '(#'
      this.lookahead1(243);         // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.token() == 21)       // S
      {
        this.consume(21);           // S
      }
      this.parse_EQName();
      this.lookahead1(10);          // S | '#)'
      if (this.token() == 21)       // S
      {
        this.consume(21);           // S
        this.lookahead1(0);         // PragmaContents
        this.consume(1);            // PragmaContents
      }
      this.lookahead1(5);           // '#)'
      this.consume(30);             // '#)'
      this.eventHandler.endNonterminal("Pragma", this.e0);
    }

    private try_Pragma()
    {
      this.consumeT(36);            // '(#'
      this.lookahead1(243);         // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.token() == 21)       // S
      {
        this.consumeT(21);          // S
      }
      this.try_EQName();
      this.lookahead1(10);          // S | '#)'
      if (this.token() == 21)       // S
      {
        this.consumeT(21);          // S
        this.lookahead1(0);         // PragmaContents
        this.consumeT(1);           // PragmaContents
      }
      this.lookahead1(5);           // '#)'
      this.consumeT(30);            // '#)'
    }

    private parse_PathExpr()
    {
      this.eventHandler.startNonterminal("PathExpr", this.e0);
      switch (this.token())
      {
      case 47:                      // '/'
        this.consume(47);           // '/'
        this.lookahead1W(289);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '!' | '!=' | '$' | '$$' | '%' | '(' | '(:' | ')' | '*' | '+' | ',' |
                                    // '-' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | '{' | '{|' | '|' | '||' | '|}' | '}'
        switch (this.token())
        {
        case 25:                    // EOF
        case 26:                    // '!'
        case 27:                    // '!='
        case 38:                    // ')'
        case 39:                    // '*'
        case 41:                    // '+'
        case 42:                    // ','
        case 43:                    // '-'
        case 50:                    // ':'
        case 54:                    // ';'
        case 58:                    // '<<'
        case 59:                    // '<='
        case 61:                    // '='
        case 62:                    // '>'
        case 63:                    // '>='
        case 64:                    // '>>'
        case 70:                    // ']'
        case 88:                    // 'by'
        case 100:                   // 'contains'
        case 209:                   // 'paragraphs'
        case 237:                   // 'sentences'
        case 252:                   // 'times'
        case 279:                   // 'words'
        case 284:                   // '|'
        case 285:                   // '||'
        case 286:                   // '|}'
        case 287:                   // '}'
          break;
        default:
          this.whitespace();
          this.parse_RelativePathExpr();
        }
        break;
      case 48:                      // '//'
        this.consume(48);           // '//'
        this.lookahead1W(260);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_RelativePathExpr();
        break;
      default:
        this.parse_RelativePathExpr();
      }
      this.eventHandler.endNonterminal("PathExpr", this.e0);
    }

    private try_PathExpr()
    {
      switch (this.token())
      {
      case 47:                      // '/'
        this.consumeT(47);          // '/'
        this.lookahead1W(289);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '!' | '!=' | '$' | '$$' | '%' | '(' | '(:' | ')' | '*' | '+' | ',' |
                                    // '-' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | '{' | '{|' | '|' | '||' | '|}' | '}'
        switch (this.token())
        {
        case 25:                    // EOF
        case 26:                    // '!'
        case 27:                    // '!='
        case 38:                    // ')'
        case 39:                    // '*'
        case 41:                    // '+'
        case 42:                    // ','
        case 43:                    // '-'
        case 50:                    // ':'
        case 54:                    // ';'
        case 58:                    // '<<'
        case 59:                    // '<='
        case 61:                    // '='
        case 62:                    // '>'
        case 63:                    // '>='
        case 64:                    // '>>'
        case 70:                    // ']'
        case 88:                    // 'by'
        case 100:                   // 'contains'
        case 209:                   // 'paragraphs'
        case 237:                   // 'sentences'
        case 252:                   // 'times'
        case 279:                   // 'words'
        case 284:                   // '|'
        case 285:                   // '||'
        case 286:                   // '|}'
        case 287:                   // '}'
          break;
        default:
          this.try_RelativePathExpr();
        }
        break;
      case 48:                      // '//'
        this.consumeT(48);          // '//'
        this.lookahead1W(260);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        this.try_RelativePathExpr();
        break;
      default:
        this.try_RelativePathExpr();
      }
    }

    private parse_RelativePathExpr()
    {
      this.eventHandler.startNonterminal("RelativePathExpr", this.e0);
      this.parse_PostfixExpr();
      for (;;)
      {
        switch (this.token())
        {
        case 26:                    // '!'
          this.lookahead2W(265);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.tokenSequence() != 25  // EOF
         && this.tokenSequence() != 27  // '!='
         && this.tokenSequence() != 38  // ')'
         && this.tokenSequence() != 39  // '*'
         && this.tokenSequence() != 41  // '+'
         && this.tokenSequence() != 42  // ','
         && this.tokenSequence() != 43  // '-'
         && this.tokenSequence() != 47  // '/'
         && this.tokenSequence() != 48  // '//'
         && this.tokenSequence() != 50  // ':'
         && this.tokenSequence() != 54  // ';'
         && this.tokenSequence() != 55  // '<'
         && this.tokenSequence() != 58  // '<<'
         && this.tokenSequence() != 59  // '<='
         && this.tokenSequence() != 61  // '='
         && this.tokenSequence() != 62  // '>'
         && this.tokenSequence() != 63  // '>='
         && this.tokenSequence() != 64  // '>>'
         && this.tokenSequence() != 70  // ']'
         && this.tokenSequence() != 71  // 'after'
         && this.tokenSequence() != 76  // 'and'
         && this.tokenSequence() != 80  // 'as'
         && this.tokenSequence() != 81  // 'ascending'
         && this.tokenSequence() != 82  // 'at'
         && this.tokenSequence() != 85  // 'before'
         && this.tokenSequence() != 88  // 'by'
         && this.tokenSequence() != 89  // 'case'
         && this.tokenSequence() != 90  // 'cast'
         && this.tokenSequence() != 91  // 'castable'
         && this.tokenSequence() != 95  // 'collation'
         && this.tokenSequence() != 100 // 'contains'
         && this.tokenSequence() != 106 // 'count'
         && this.tokenSequence() != 110 // 'default'
         && this.tokenSequence() != 114 // 'descending'
         && this.tokenSequence() != 119 // 'div'
         && this.tokenSequence() != 123 // 'else'
         && this.tokenSequence() != 124 // 'empty'
         && this.tokenSequence() != 127 // 'end'
         && this.tokenSequence() != 129 // 'eq'
         && this.tokenSequence() != 132 // 'except'
         && this.tokenSequence() != 139 // 'for'
         && this.tokenSequence() != 148 // 'ge'
         && this.tokenSequence() != 150 // 'group'
         && this.tokenSequence() != 152 // 'gt'
         && this.tokenSequence() != 153 // 'idiv'
         && this.tokenSequence() != 162 // 'instance'
         && this.tokenSequence() != 164 // 'intersect'
         && this.tokenSequence() != 165 // 'into'
         && this.tokenSequence() != 166 // 'is'
         && this.tokenSequence() != 175 // 'le'
         && this.tokenSequence() != 177 // 'let'
         && this.tokenSequence() != 181 // 'lt'
         && this.tokenSequence() != 183 // 'mod'
         && this.tokenSequence() != 184 // 'modify'
         && this.tokenSequence() != 189 // 'ne'
         && this.tokenSequence() != 202 // 'only'
         && this.tokenSequence() != 204 // 'or'
         && this.tokenSequence() != 205 // 'order'
         && this.tokenSequence() != 209 // 'paragraphs'
         && this.tokenSequence() != 224 // 'return'
         && this.tokenSequence() != 228 // 'satisfies'
         && this.tokenSequence() != 237 // 'sentences'
         && this.tokenSequence() != 241 // 'stable'
         && this.tokenSequence() != 242 // 'start'
         && this.tokenSequence() != 252 // 'times'
         && this.tokenSequence() != 253 // 'to'
         && this.tokenSequence() != 254 // 'treat'
         && this.tokenSequence() != 260 // 'union'
         && this.tokenSequence() != 272 // 'where'
         && this.tokenSequence() != 276 // 'with'
         && this.tokenSequence() != 279 // 'words'
         && this.tokenSequence() != 284 // '|'
         && this.tokenSequence() != 285 // '||'
         && this.tokenSequence() != 286 // '|}'
         && this.tokenSequence() != 287 // '}'
         && this.tokenSequence() != 2586  // '!' Wildcard
         && this.tokenSequence() != 23578 // '!' '..'
         && this.tokenSequence() != 24090 // '!' '/'
         && this.tokenSequence() != 24602 // '!' '//'
         && this.tokenSequence() != 34330)  // '!' '@'
        {
          this.lk = this.memoized(3, this.e0);
          if (this.lk == 0)
          {
            var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
            var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
            var b2A = this.b2; var e2A = this.e2;
            try
            {
              switch (this.token())
              {
              case 47:              // '/'
                this.consumeT(47);  // '/'
                break;
              case 48:              // '//'
                this.consumeT(48);  // '//'
                break;
              default:
                this.consumeT(26);  // '!'
              }
              this.lookahead1W(264);  // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                      // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '<' | '<!--' |
                                      // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                      // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                      // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                      // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                      // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' |
                                      // 'count' | 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                      // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                      // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                      // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                      // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                      // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                      // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                      // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                      // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                      // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                      // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                      // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                      // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' |
                                      // 'schema-element' | 'score' | 'select' | 'self' | 'sliding' | 'some' |
                                      // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                      // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                      // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                      // 'where' | 'while' | 'with' | '{' | '{|'
              this.try_StepExpr();
              this.lk = -1;
            }
            catch (p1A)
            {
              this.lk = -2;
            }
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(3, this.e0, this.lk);
          }
        }
        if (this.tokenSequence() != -1
         && this.tokenSequence() != 47  // '/'
         && this.tokenSequence() != 48  // '//'
         && this.tokenSequence() != 2586  // '!' Wildcard
         && this.tokenSequence() != 23578 // '!' '..'
         && this.tokenSequence() != 34330)  // '!' '@'
        {
          break;
        }
        switch (this.token())
        {
        case 47:                    // '/'
          this.consume(47);         // '/'
          break;
        case 48:                    // '//'
          this.consume(48);         // '//'
          break;
        default:
          this.consume(26);         // '!'
        }
        this.lookahead1W(264);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_StepExpr();
      }
      this.eventHandler.endNonterminal("RelativePathExpr", this.e0);
    }

    private try_RelativePathExpr()
    {
      this.try_PostfixExpr();
      for (;;)
      {
        switch (this.token())
        {
        case 26:                    // '!'
          this.lookahead2W(265);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.tokenSequence() != 25  // EOF
         && this.tokenSequence() != 27  // '!='
         && this.tokenSequence() != 38  // ')'
         && this.tokenSequence() != 39  // '*'
         && this.tokenSequence() != 41  // '+'
         && this.tokenSequence() != 42  // ','
         && this.tokenSequence() != 43  // '-'
         && this.tokenSequence() != 47  // '/'
         && this.tokenSequence() != 48  // '//'
         && this.tokenSequence() != 50  // ':'
         && this.tokenSequence() != 54  // ';'
         && this.tokenSequence() != 55  // '<'
         && this.tokenSequence() != 58  // '<<'
         && this.tokenSequence() != 59  // '<='
         && this.tokenSequence() != 61  // '='
         && this.tokenSequence() != 62  // '>'
         && this.tokenSequence() != 63  // '>='
         && this.tokenSequence() != 64  // '>>'
         && this.tokenSequence() != 70  // ']'
         && this.tokenSequence() != 71  // 'after'
         && this.tokenSequence() != 76  // 'and'
         && this.tokenSequence() != 80  // 'as'
         && this.tokenSequence() != 81  // 'ascending'
         && this.tokenSequence() != 82  // 'at'
         && this.tokenSequence() != 85  // 'before'
         && this.tokenSequence() != 88  // 'by'
         && this.tokenSequence() != 89  // 'case'
         && this.tokenSequence() != 90  // 'cast'
         && this.tokenSequence() != 91  // 'castable'
         && this.tokenSequence() != 95  // 'collation'
         && this.tokenSequence() != 100 // 'contains'
         && this.tokenSequence() != 106 // 'count'
         && this.tokenSequence() != 110 // 'default'
         && this.tokenSequence() != 114 // 'descending'
         && this.tokenSequence() != 119 // 'div'
         && this.tokenSequence() != 123 // 'else'
         && this.tokenSequence() != 124 // 'empty'
         && this.tokenSequence() != 127 // 'end'
         && this.tokenSequence() != 129 // 'eq'
         && this.tokenSequence() != 132 // 'except'
         && this.tokenSequence() != 139 // 'for'
         && this.tokenSequence() != 148 // 'ge'
         && this.tokenSequence() != 150 // 'group'
         && this.tokenSequence() != 152 // 'gt'
         && this.tokenSequence() != 153 // 'idiv'
         && this.tokenSequence() != 162 // 'instance'
         && this.tokenSequence() != 164 // 'intersect'
         && this.tokenSequence() != 165 // 'into'
         && this.tokenSequence() != 166 // 'is'
         && this.tokenSequence() != 175 // 'le'
         && this.tokenSequence() != 177 // 'let'
         && this.tokenSequence() != 181 // 'lt'
         && this.tokenSequence() != 183 // 'mod'
         && this.tokenSequence() != 184 // 'modify'
         && this.tokenSequence() != 189 // 'ne'
         && this.tokenSequence() != 202 // 'only'
         && this.tokenSequence() != 204 // 'or'
         && this.tokenSequence() != 205 // 'order'
         && this.tokenSequence() != 209 // 'paragraphs'
         && this.tokenSequence() != 224 // 'return'
         && this.tokenSequence() != 228 // 'satisfies'
         && this.tokenSequence() != 237 // 'sentences'
         && this.tokenSequence() != 241 // 'stable'
         && this.tokenSequence() != 242 // 'start'
         && this.tokenSequence() != 252 // 'times'
         && this.tokenSequence() != 253 // 'to'
         && this.tokenSequence() != 254 // 'treat'
         && this.tokenSequence() != 260 // 'union'
         && this.tokenSequence() != 272 // 'where'
         && this.tokenSequence() != 276 // 'with'
         && this.tokenSequence() != 279 // 'words'
         && this.tokenSequence() != 284 // '|'
         && this.tokenSequence() != 285 // '||'
         && this.tokenSequence() != 286 // '|}'
         && this.tokenSequence() != 287 // '}'
         && this.tokenSequence() != 2586  // '!' Wildcard
         && this.tokenSequence() != 23578 // '!' '..'
         && this.tokenSequence() != 24090 // '!' '/'
         && this.tokenSequence() != 24602 // '!' '//'
         && this.tokenSequence() != 34330)  // '!' '@'
        {
          this.lk = this.memoized(3, this.e0);
          if (this.lk == 0)
          {
            var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
            var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
            var b2A = this.b2; var e2A = this.e2;
            try
            {
              switch (this.token())
              {
              case 47:              // '/'
                this.consumeT(47);  // '/'
                break;
              case 48:              // '//'
                this.consumeT(48);  // '//'
                break;
              default:
                this.consumeT(26);  // '!'
              }
              this.lookahead1W(264);  // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                      // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '<' | '<!--' |
                                      // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                      // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                      // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                      // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                      // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' |
                                      // 'count' | 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                      // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                      // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                      // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                      // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                      // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                      // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                      // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                      // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                      // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                      // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                      // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                      // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' |
                                      // 'schema-element' | 'score' | 'select' | 'self' | 'sliding' | 'some' |
                                      // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                      // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                      // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                      // 'where' | 'while' | 'with' | '{' | '{|'
              this.try_StepExpr();
              this.memoize(3, e0A, -1);
              continue;
            }
            catch (p1A)
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.memoize(3, e0A, -2);
              break;
            }
          }
        }
        if (this.tokenSequence() != -1
         && this.tokenSequence() != 47  // '/'
         && this.tokenSequence() != 48  // '//'
         && this.tokenSequence() != 2586  // '!' Wildcard
         && this.tokenSequence() != 23578 // '!' '..'
         && this.tokenSequence() != 34330)  // '!' '@'
        {
          break;
        }
        switch (this.token())
        {
        case 47:                    // '/'
          this.consumeT(47);        // '/'
          break;
        case 48:                    // '//'
          this.consumeT(48);        // '//'
          break;
        default:
          this.consumeT(26);        // '!'
        }
        this.lookahead1W(264);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_StepExpr();
      }
    }

    private parse_StepExpr()
    {
      this.eventHandler.startNonterminal("StepExpr", this.e0);
      switch (this.token())
      {
      case 83:                      // 'attribute'
        this.lookahead2W(288);      // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 122:                     // 'element'
        this.lookahead2W(287);      // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 187:                     // 'namespace'
      case 220:                     // 'processing-instruction'
        this.lookahead2W(285);      // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 135:                     // 'false'
      case 197:                     // 'null'
      case 255:                     // 'true'
        this.lookahead2W(237);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
        break;
      case 97:                      // 'comment'
      case 120:                     // 'document'
      case 206:                     // 'ordered'
      case 249:                     // 'text'
      case 262:                     // 'unordered'
        this.lookahead2W(239);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 79:                      // 'array'
      case 125:                     // 'empty-sequence'
      case 154:                     // 'if'
      case 167:                     // 'item'
      case 169:                     // 'json-item'
      case 247:                     // 'structured-item'
      case 248:                     // 'switch'
      case 259:                     // 'typeswitch'
        this.lookahead2W(230);      // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 94:                      // 'child'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
      case 234:                     // 'self'
        this.lookahead2W(238);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
        break;
      case 6:                       // EQName^Token
      case 71:                      // 'after'
      case 73:                      // 'allowing'
      case 76:                      // 'and'
      case 78:                      // 'append'
      case 80:                      // 'as'
      case 81:                      // 'ascending'
      case 82:                      // 'at'
      case 84:                      // 'base-uri'
      case 85:                      // 'before'
      case 86:                      // 'boundary-space'
      case 87:                      // 'break'
      case 89:                      // 'case'
      case 90:                      // 'cast'
      case 91:                      // 'castable'
      case 92:                      // 'catch'
      case 95:                      // 'collation'
      case 98:                      // 'constraint'
      case 99:                      // 'construction'
      case 102:                     // 'context'
      case 103:                     // 'continue'
      case 104:                     // 'copy'
      case 105:                     // 'copy-namespaces'
      case 106:                     // 'count'
      case 107:                     // 'decimal-format'
      case 109:                     // 'declare'
      case 110:                     // 'default'
      case 111:                     // 'delete'
      case 114:                     // 'descending'
      case 119:                     // 'div'
      case 121:                     // 'document-node'
      case 123:                     // 'else'
      case 124:                     // 'empty'
      case 126:                     // 'encoding'
      case 127:                     // 'end'
      case 129:                     // 'eq'
      case 130:                     // 'every'
      case 132:                     // 'except'
      case 133:                     // 'exit'
      case 134:                     // 'external'
      case 136:                     // 'first'
      case 139:                     // 'for'
      case 142:                     // 'from'
      case 143:                     // 'ft-option'
      case 147:                     // 'function'
      case 148:                     // 'ge'
      case 150:                     // 'group'
      case 152:                     // 'gt'
      case 153:                     // 'idiv'
      case 155:                     // 'import'
      case 156:                     // 'in'
      case 157:                     // 'index'
      case 161:                     // 'insert'
      case 162:                     // 'instance'
      case 163:                     // 'integrity'
      case 164:                     // 'intersect'
      case 165:                     // 'into'
      case 166:                     // 'is'
      case 168:                     // 'json'
      case 170:                     // 'jsoniq'
      case 173:                     // 'last'
      case 174:                     // 'lax'
      case 175:                     // 'le'
      case 177:                     // 'let'
      case 179:                     // 'loop'
      case 181:                     // 'lt'
      case 183:                     // 'mod'
      case 184:                     // 'modify'
      case 185:                     // 'module'
      case 188:                     // 'namespace-node'
      case 189:                     // 'ne'
      case 194:                     // 'node'
      case 195:                     // 'nodes'
      case 198:                     // 'object'
      case 202:                     // 'only'
      case 203:                     // 'option'
      case 204:                     // 'or'
      case 205:                     // 'order'
      case 207:                     // 'ordering'
      case 222:                     // 'rename'
      case 223:                     // 'replace'
      case 224:                     // 'return'
      case 225:                     // 'returning'
      case 226:                     // 'revalidation'
      case 228:                     // 'satisfies'
      case 229:                     // 'schema'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
      case 232:                     // 'score'
      case 233:                     // 'select'
      case 239:                     // 'sliding'
      case 240:                     // 'some'
      case 241:                     // 'stable'
      case 242:                     // 'start'
      case 245:                     // 'strict'
      case 253:                     // 'to'
      case 254:                     // 'treat'
      case 256:                     // 'try'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 266:                     // 'validate'
      case 267:                     // 'value'
      case 268:                     // 'variable'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
        this.lookahead2W(234);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 12935 // 'false' EOF
       || this.tokenSequence() == 12997 // 'null' EOF
       || this.tokenSequence() == 13055 // 'true' EOF
       || this.tokenSequence() == 13447 // 'false' '!'
       || this.tokenSequence() == 13509 // 'null' '!'
       || this.tokenSequence() == 13567 // 'true' '!'
       || this.tokenSequence() == 13959 // 'false' '!='
       || this.tokenSequence() == 14021 // 'null' '!='
       || this.tokenSequence() == 14079 // 'true' '!='
       || this.tokenSequence() == 19591 // 'false' ')'
       || this.tokenSequence() == 19653 // 'null' ')'
       || this.tokenSequence() == 19711 // 'true' ')'
       || this.tokenSequence() == 20103 // 'false' '*'
       || this.tokenSequence() == 20165 // 'null' '*'
       || this.tokenSequence() == 20223 // 'true' '*'
       || this.tokenSequence() == 21127 // 'false' '+'
       || this.tokenSequence() == 21189 // 'null' '+'
       || this.tokenSequence() == 21247 // 'true' '+'
       || this.tokenSequence() == 21639 // 'false' ','
       || this.tokenSequence() == 21701 // 'null' ','
       || this.tokenSequence() == 21759 // 'true' ','
       || this.tokenSequence() == 22151 // 'false' '-'
       || this.tokenSequence() == 22213 // 'null' '-'
       || this.tokenSequence() == 22271 // 'true' '-'
       || this.tokenSequence() == 24199 // 'false' '/'
       || this.tokenSequence() == 24261 // 'null' '/'
       || this.tokenSequence() == 24319 // 'true' '/'
       || this.tokenSequence() == 24711 // 'false' '//'
       || this.tokenSequence() == 24773 // 'null' '//'
       || this.tokenSequence() == 24831 // 'true' '//'
       || this.tokenSequence() == 25735 // 'false' ':'
       || this.tokenSequence() == 25797 // 'null' ':'
       || this.tokenSequence() == 25855 // 'true' ':'
       || this.tokenSequence() == 27783 // 'false' ';'
       || this.tokenSequence() == 27845 // 'null' ';'
       || this.tokenSequence() == 27903 // 'true' ';'
       || this.tokenSequence() == 28295 // 'false' '<'
       || this.tokenSequence() == 28357 // 'null' '<'
       || this.tokenSequence() == 28415 // 'true' '<'
       || this.tokenSequence() == 29831 // 'false' '<<'
       || this.tokenSequence() == 29893 // 'null' '<<'
       || this.tokenSequence() == 29951 // 'true' '<<'
       || this.tokenSequence() == 30343 // 'false' '<='
       || this.tokenSequence() == 30405 // 'null' '<='
       || this.tokenSequence() == 30463 // 'true' '<='
       || this.tokenSequence() == 31367 // 'false' '='
       || this.tokenSequence() == 31429 // 'null' '='
       || this.tokenSequence() == 31487 // 'true' '='
       || this.tokenSequence() == 31879 // 'false' '>'
       || this.tokenSequence() == 31941 // 'null' '>'
       || this.tokenSequence() == 31999 // 'true' '>'
       || this.tokenSequence() == 32391 // 'false' '>='
       || this.tokenSequence() == 32453 // 'null' '>='
       || this.tokenSequence() == 32511 // 'true' '>='
       || this.tokenSequence() == 32903 // 'false' '>>'
       || this.tokenSequence() == 32965 // 'null' '>>'
       || this.tokenSequence() == 33023 // 'true' '>>'
       || this.tokenSequence() == 35463 // 'false' '['
       || this.tokenSequence() == 35525 // 'null' '['
       || this.tokenSequence() == 35583 // 'true' '['
       || this.tokenSequence() == 35975 // 'false' ']'
       || this.tokenSequence() == 36037 // 'null' ']'
       || this.tokenSequence() == 36095 // 'true' ']'
       || this.tokenSequence() == 36435 // 'attribute' 'after'
       || this.tokenSequence() == 36474 // 'element' 'after'
       || this.tokenSequence() == 36487 // 'false' 'after'
       || this.tokenSequence() == 36539 // 'namespace' 'after'
       || this.tokenSequence() == 36549 // 'null' 'after'
       || this.tokenSequence() == 36572 // 'processing-instruction' 'after'
       || this.tokenSequence() == 36607 // 'true' 'after'
       || this.tokenSequence() == 38995 // 'attribute' 'and'
       || this.tokenSequence() == 39034 // 'element' 'and'
       || this.tokenSequence() == 39047 // 'false' 'and'
       || this.tokenSequence() == 39099 // 'namespace' 'and'
       || this.tokenSequence() == 39109 // 'null' 'and'
       || this.tokenSequence() == 39132 // 'processing-instruction' 'and'
       || this.tokenSequence() == 39167 // 'true' 'and'
       || this.tokenSequence() == 41043 // 'attribute' 'as'
       || this.tokenSequence() == 41082 // 'element' 'as'
       || this.tokenSequence() == 41095 // 'false' 'as'
       || this.tokenSequence() == 41147 // 'namespace' 'as'
       || this.tokenSequence() == 41157 // 'null' 'as'
       || this.tokenSequence() == 41180 // 'processing-instruction' 'as'
       || this.tokenSequence() == 41215 // 'true' 'as'
       || this.tokenSequence() == 41555 // 'attribute' 'ascending'
       || this.tokenSequence() == 41594 // 'element' 'ascending'
       || this.tokenSequence() == 41607 // 'false' 'ascending'
       || this.tokenSequence() == 41659 // 'namespace' 'ascending'
       || this.tokenSequence() == 41669 // 'null' 'ascending'
       || this.tokenSequence() == 41692 // 'processing-instruction' 'ascending'
       || this.tokenSequence() == 41727 // 'true' 'ascending'
       || this.tokenSequence() == 42067 // 'attribute' 'at'
       || this.tokenSequence() == 42106 // 'element' 'at'
       || this.tokenSequence() == 42119 // 'false' 'at'
       || this.tokenSequence() == 42171 // 'namespace' 'at'
       || this.tokenSequence() == 42181 // 'null' 'at'
       || this.tokenSequence() == 42204 // 'processing-instruction' 'at'
       || this.tokenSequence() == 42239 // 'true' 'at'
       || this.tokenSequence() == 43603 // 'attribute' 'before'
       || this.tokenSequence() == 43642 // 'element' 'before'
       || this.tokenSequence() == 43655 // 'false' 'before'
       || this.tokenSequence() == 43707 // 'namespace' 'before'
       || this.tokenSequence() == 43717 // 'null' 'before'
       || this.tokenSequence() == 43740 // 'processing-instruction' 'before'
       || this.tokenSequence() == 43775 // 'true' 'before'
       || this.tokenSequence() == 45191 // 'false' 'by'
       || this.tokenSequence() == 45253 // 'null' 'by'
       || this.tokenSequence() == 45311 // 'true' 'by'
       || this.tokenSequence() == 45651 // 'attribute' 'case'
       || this.tokenSequence() == 45690 // 'element' 'case'
       || this.tokenSequence() == 45703 // 'false' 'case'
       || this.tokenSequence() == 45755 // 'namespace' 'case'
       || this.tokenSequence() == 45765 // 'null' 'case'
       || this.tokenSequence() == 45788 // 'processing-instruction' 'case'
       || this.tokenSequence() == 45823 // 'true' 'case'
       || this.tokenSequence() == 46163 // 'attribute' 'cast'
       || this.tokenSequence() == 46202 // 'element' 'cast'
       || this.tokenSequence() == 46215 // 'false' 'cast'
       || this.tokenSequence() == 46267 // 'namespace' 'cast'
       || this.tokenSequence() == 46277 // 'null' 'cast'
       || this.tokenSequence() == 46300 // 'processing-instruction' 'cast'
       || this.tokenSequence() == 46335 // 'true' 'cast'
       || this.tokenSequence() == 46675 // 'attribute' 'castable'
       || this.tokenSequence() == 46714 // 'element' 'castable'
       || this.tokenSequence() == 46727 // 'false' 'castable'
       || this.tokenSequence() == 46779 // 'namespace' 'castable'
       || this.tokenSequence() == 46789 // 'null' 'castable'
       || this.tokenSequence() == 46812 // 'processing-instruction' 'castable'
       || this.tokenSequence() == 46847 // 'true' 'castable'
       || this.tokenSequence() == 48723 // 'attribute' 'collation'
       || this.tokenSequence() == 48762 // 'element' 'collation'
       || this.tokenSequence() == 48775 // 'false' 'collation'
       || this.tokenSequence() == 48827 // 'namespace' 'collation'
       || this.tokenSequence() == 48837 // 'null' 'collation'
       || this.tokenSequence() == 48860 // 'processing-instruction' 'collation'
       || this.tokenSequence() == 48895 // 'true' 'collation'
       || this.tokenSequence() == 51335 // 'false' 'contains'
       || this.tokenSequence() == 51397 // 'null' 'contains'
       || this.tokenSequence() == 51455 // 'true' 'contains'
       || this.tokenSequence() == 54355 // 'attribute' 'count'
       || this.tokenSequence() == 54394 // 'element' 'count'
       || this.tokenSequence() == 54407 // 'false' 'count'
       || this.tokenSequence() == 54459 // 'namespace' 'count'
       || this.tokenSequence() == 54469 // 'null' 'count'
       || this.tokenSequence() == 54492 // 'processing-instruction' 'count'
       || this.tokenSequence() == 54527 // 'true' 'count'
       || this.tokenSequence() == 56403 // 'attribute' 'default'
       || this.tokenSequence() == 56442 // 'element' 'default'
       || this.tokenSequence() == 56455 // 'false' 'default'
       || this.tokenSequence() == 56507 // 'namespace' 'default'
       || this.tokenSequence() == 56517 // 'null' 'default'
       || this.tokenSequence() == 56540 // 'processing-instruction' 'default'
       || this.tokenSequence() == 56575 // 'true' 'default'
       || this.tokenSequence() == 58451 // 'attribute' 'descending'
       || this.tokenSequence() == 58490 // 'element' 'descending'
       || this.tokenSequence() == 58503 // 'false' 'descending'
       || this.tokenSequence() == 58555 // 'namespace' 'descending'
       || this.tokenSequence() == 58565 // 'null' 'descending'
       || this.tokenSequence() == 58588 // 'processing-instruction' 'descending'
       || this.tokenSequence() == 58623 // 'true' 'descending'
       || this.tokenSequence() == 61011 // 'attribute' 'div'
       || this.tokenSequence() == 61050 // 'element' 'div'
       || this.tokenSequence() == 61063 // 'false' 'div'
       || this.tokenSequence() == 61115 // 'namespace' 'div'
       || this.tokenSequence() == 61125 // 'null' 'div'
       || this.tokenSequence() == 61148 // 'processing-instruction' 'div'
       || this.tokenSequence() == 61183 // 'true' 'div'
       || this.tokenSequence() == 63059 // 'attribute' 'else'
       || this.tokenSequence() == 63098 // 'element' 'else'
       || this.tokenSequence() == 63111 // 'false' 'else'
       || this.tokenSequence() == 63163 // 'namespace' 'else'
       || this.tokenSequence() == 63173 // 'null' 'else'
       || this.tokenSequence() == 63196 // 'processing-instruction' 'else'
       || this.tokenSequence() == 63231 // 'true' 'else'
       || this.tokenSequence() == 63571 // 'attribute' 'empty'
       || this.tokenSequence() == 63610 // 'element' 'empty'
       || this.tokenSequence() == 63623 // 'false' 'empty'
       || this.tokenSequence() == 63675 // 'namespace' 'empty'
       || this.tokenSequence() == 63685 // 'null' 'empty'
       || this.tokenSequence() == 63708 // 'processing-instruction' 'empty'
       || this.tokenSequence() == 63743 // 'true' 'empty'
       || this.tokenSequence() == 65107 // 'attribute' 'end'
       || this.tokenSequence() == 65146 // 'element' 'end'
       || this.tokenSequence() == 65159 // 'false' 'end'
       || this.tokenSequence() == 65211 // 'namespace' 'end'
       || this.tokenSequence() == 65221 // 'null' 'end'
       || this.tokenSequence() == 65244 // 'processing-instruction' 'end'
       || this.tokenSequence() == 65279 // 'true' 'end'
       || this.tokenSequence() == 66131 // 'attribute' 'eq'
       || this.tokenSequence() == 66170 // 'element' 'eq'
       || this.tokenSequence() == 66183 // 'false' 'eq'
       || this.tokenSequence() == 66235 // 'namespace' 'eq'
       || this.tokenSequence() == 66245 // 'null' 'eq'
       || this.tokenSequence() == 66268 // 'processing-instruction' 'eq'
       || this.tokenSequence() == 66303 // 'true' 'eq'
       || this.tokenSequence() == 67667 // 'attribute' 'except'
       || this.tokenSequence() == 67706 // 'element' 'except'
       || this.tokenSequence() == 67719 // 'false' 'except'
       || this.tokenSequence() == 67771 // 'namespace' 'except'
       || this.tokenSequence() == 67781 // 'null' 'except'
       || this.tokenSequence() == 67804 // 'processing-instruction' 'except'
       || this.tokenSequence() == 67839 // 'true' 'except'
       || this.tokenSequence() == 71251 // 'attribute' 'for'
       || this.tokenSequence() == 71290 // 'element' 'for'
       || this.tokenSequence() == 71303 // 'false' 'for'
       || this.tokenSequence() == 71355 // 'namespace' 'for'
       || this.tokenSequence() == 71365 // 'null' 'for'
       || this.tokenSequence() == 71388 // 'processing-instruction' 'for'
       || this.tokenSequence() == 71423 // 'true' 'for'
       || this.tokenSequence() == 75859 // 'attribute' 'ge'
       || this.tokenSequence() == 75898 // 'element' 'ge'
       || this.tokenSequence() == 75911 // 'false' 'ge'
       || this.tokenSequence() == 75963 // 'namespace' 'ge'
       || this.tokenSequence() == 75973 // 'null' 'ge'
       || this.tokenSequence() == 75996 // 'processing-instruction' 'ge'
       || this.tokenSequence() == 76031 // 'true' 'ge'
       || this.tokenSequence() == 76883 // 'attribute' 'group'
       || this.tokenSequence() == 76922 // 'element' 'group'
       || this.tokenSequence() == 76935 // 'false' 'group'
       || this.tokenSequence() == 76987 // 'namespace' 'group'
       || this.tokenSequence() == 76997 // 'null' 'group'
       || this.tokenSequence() == 77020 // 'processing-instruction' 'group'
       || this.tokenSequence() == 77055 // 'true' 'group'
       || this.tokenSequence() == 77907 // 'attribute' 'gt'
       || this.tokenSequence() == 77946 // 'element' 'gt'
       || this.tokenSequence() == 77959 // 'false' 'gt'
       || this.tokenSequence() == 78011 // 'namespace' 'gt'
       || this.tokenSequence() == 78021 // 'null' 'gt'
       || this.tokenSequence() == 78044 // 'processing-instruction' 'gt'
       || this.tokenSequence() == 78079 // 'true' 'gt'
       || this.tokenSequence() == 78419 // 'attribute' 'idiv'
       || this.tokenSequence() == 78458 // 'element' 'idiv'
       || this.tokenSequence() == 78471 // 'false' 'idiv'
       || this.tokenSequence() == 78523 // 'namespace' 'idiv'
       || this.tokenSequence() == 78533 // 'null' 'idiv'
       || this.tokenSequence() == 78556 // 'processing-instruction' 'idiv'
       || this.tokenSequence() == 78591 // 'true' 'idiv'
       || this.tokenSequence() == 83027 // 'attribute' 'instance'
       || this.tokenSequence() == 83066 // 'element' 'instance'
       || this.tokenSequence() == 83079 // 'false' 'instance'
       || this.tokenSequence() == 83131 // 'namespace' 'instance'
       || this.tokenSequence() == 83141 // 'null' 'instance'
       || this.tokenSequence() == 83164 // 'processing-instruction' 'instance'
       || this.tokenSequence() == 83199 // 'true' 'instance'
       || this.tokenSequence() == 84051 // 'attribute' 'intersect'
       || this.tokenSequence() == 84090 // 'element' 'intersect'
       || this.tokenSequence() == 84103 // 'false' 'intersect'
       || this.tokenSequence() == 84155 // 'namespace' 'intersect'
       || this.tokenSequence() == 84165 // 'null' 'intersect'
       || this.tokenSequence() == 84188 // 'processing-instruction' 'intersect'
       || this.tokenSequence() == 84223 // 'true' 'intersect'
       || this.tokenSequence() == 84563 // 'attribute' 'into'
       || this.tokenSequence() == 84602 // 'element' 'into'
       || this.tokenSequence() == 84615 // 'false' 'into'
       || this.tokenSequence() == 84667 // 'namespace' 'into'
       || this.tokenSequence() == 84677 // 'null' 'into'
       || this.tokenSequence() == 84700 // 'processing-instruction' 'into'
       || this.tokenSequence() == 84735 // 'true' 'into'
       || this.tokenSequence() == 85075 // 'attribute' 'is'
       || this.tokenSequence() == 85114 // 'element' 'is'
       || this.tokenSequence() == 85127 // 'false' 'is'
       || this.tokenSequence() == 85179 // 'namespace' 'is'
       || this.tokenSequence() == 85189 // 'null' 'is'
       || this.tokenSequence() == 85212 // 'processing-instruction' 'is'
       || this.tokenSequence() == 85247 // 'true' 'is'
       || this.tokenSequence() == 89683 // 'attribute' 'le'
       || this.tokenSequence() == 89722 // 'element' 'le'
       || this.tokenSequence() == 89735 // 'false' 'le'
       || this.tokenSequence() == 89787 // 'namespace' 'le'
       || this.tokenSequence() == 89797 // 'null' 'le'
       || this.tokenSequence() == 89820 // 'processing-instruction' 'le'
       || this.tokenSequence() == 89855 // 'true' 'le'
       || this.tokenSequence() == 90707 // 'attribute' 'let'
       || this.tokenSequence() == 90746 // 'element' 'let'
       || this.tokenSequence() == 90759 // 'false' 'let'
       || this.tokenSequence() == 90811 // 'namespace' 'let'
       || this.tokenSequence() == 90821 // 'null' 'let'
       || this.tokenSequence() == 90844 // 'processing-instruction' 'let'
       || this.tokenSequence() == 90879 // 'true' 'let'
       || this.tokenSequence() == 92755 // 'attribute' 'lt'
       || this.tokenSequence() == 92794 // 'element' 'lt'
       || this.tokenSequence() == 92807 // 'false' 'lt'
       || this.tokenSequence() == 92859 // 'namespace' 'lt'
       || this.tokenSequence() == 92869 // 'null' 'lt'
       || this.tokenSequence() == 92892 // 'processing-instruction' 'lt'
       || this.tokenSequence() == 92927 // 'true' 'lt'
       || this.tokenSequence() == 93779 // 'attribute' 'mod'
       || this.tokenSequence() == 93818 // 'element' 'mod'
       || this.tokenSequence() == 93831 // 'false' 'mod'
       || this.tokenSequence() == 93883 // 'namespace' 'mod'
       || this.tokenSequence() == 93893 // 'null' 'mod'
       || this.tokenSequence() == 93916 // 'processing-instruction' 'mod'
       || this.tokenSequence() == 93951 // 'true' 'mod'
       || this.tokenSequence() == 94291 // 'attribute' 'modify'
       || this.tokenSequence() == 94330 // 'element' 'modify'
       || this.tokenSequence() == 94343 // 'false' 'modify'
       || this.tokenSequence() == 94395 // 'namespace' 'modify'
       || this.tokenSequence() == 94405 // 'null' 'modify'
       || this.tokenSequence() == 94428 // 'processing-instruction' 'modify'
       || this.tokenSequence() == 94463 // 'true' 'modify'
       || this.tokenSequence() == 96851 // 'attribute' 'ne'
       || this.tokenSequence() == 96890 // 'element' 'ne'
       || this.tokenSequence() == 96903 // 'false' 'ne'
       || this.tokenSequence() == 96955 // 'namespace' 'ne'
       || this.tokenSequence() == 96965 // 'null' 'ne'
       || this.tokenSequence() == 96988 // 'processing-instruction' 'ne'
       || this.tokenSequence() == 97023 // 'true' 'ne'
       || this.tokenSequence() == 103507  // 'attribute' 'only'
       || this.tokenSequence() == 103546  // 'element' 'only'
       || this.tokenSequence() == 103559  // 'false' 'only'
       || this.tokenSequence() == 103611  // 'namespace' 'only'
       || this.tokenSequence() == 103621  // 'null' 'only'
       || this.tokenSequence() == 103644  // 'processing-instruction' 'only'
       || this.tokenSequence() == 103679  // 'true' 'only'
       || this.tokenSequence() == 104531  // 'attribute' 'or'
       || this.tokenSequence() == 104570  // 'element' 'or'
       || this.tokenSequence() == 104583  // 'false' 'or'
       || this.tokenSequence() == 104635  // 'namespace' 'or'
       || this.tokenSequence() == 104645  // 'null' 'or'
       || this.tokenSequence() == 104668  // 'processing-instruction' 'or'
       || this.tokenSequence() == 104703  // 'true' 'or'
       || this.tokenSequence() == 105043  // 'attribute' 'order'
       || this.tokenSequence() == 105082  // 'element' 'order'
       || this.tokenSequence() == 105095  // 'false' 'order'
       || this.tokenSequence() == 105147  // 'namespace' 'order'
       || this.tokenSequence() == 105157  // 'null' 'order'
       || this.tokenSequence() == 105180  // 'processing-instruction' 'order'
       || this.tokenSequence() == 105215  // 'true' 'order'
       || this.tokenSequence() == 107143  // 'false' 'paragraphs'
       || this.tokenSequence() == 107205  // 'null' 'paragraphs'
       || this.tokenSequence() == 107263  // 'true' 'paragraphs'
       || this.tokenSequence() == 114771  // 'attribute' 'return'
       || this.tokenSequence() == 114810  // 'element' 'return'
       || this.tokenSequence() == 114823  // 'false' 'return'
       || this.tokenSequence() == 114875  // 'namespace' 'return'
       || this.tokenSequence() == 114885  // 'null' 'return'
       || this.tokenSequence() == 114908  // 'processing-instruction' 'return'
       || this.tokenSequence() == 114943  // 'true' 'return'
       || this.tokenSequence() == 116819  // 'attribute' 'satisfies'
       || this.tokenSequence() == 116858  // 'element' 'satisfies'
       || this.tokenSequence() == 116871  // 'false' 'satisfies'
       || this.tokenSequence() == 116923  // 'namespace' 'satisfies'
       || this.tokenSequence() == 116933  // 'null' 'satisfies'
       || this.tokenSequence() == 116956  // 'processing-instruction' 'satisfies'
       || this.tokenSequence() == 116991  // 'true' 'satisfies'
       || this.tokenSequence() == 121479  // 'false' 'sentences'
       || this.tokenSequence() == 121541  // 'null' 'sentences'
       || this.tokenSequence() == 121599  // 'true' 'sentences'
       || this.tokenSequence() == 123475  // 'attribute' 'stable'
       || this.tokenSequence() == 123514  // 'element' 'stable'
       || this.tokenSequence() == 123527  // 'false' 'stable'
       || this.tokenSequence() == 123579  // 'namespace' 'stable'
       || this.tokenSequence() == 123589  // 'null' 'stable'
       || this.tokenSequence() == 123612  // 'processing-instruction' 'stable'
       || this.tokenSequence() == 123647  // 'true' 'stable'
       || this.tokenSequence() == 123987  // 'attribute' 'start'
       || this.tokenSequence() == 124026  // 'element' 'start'
       || this.tokenSequence() == 124039  // 'false' 'start'
       || this.tokenSequence() == 124091  // 'namespace' 'start'
       || this.tokenSequence() == 124101  // 'null' 'start'
       || this.tokenSequence() == 124124  // 'processing-instruction' 'start'
       || this.tokenSequence() == 124159  // 'true' 'start'
       || this.tokenSequence() == 129159  // 'false' 'times'
       || this.tokenSequence() == 129221  // 'null' 'times'
       || this.tokenSequence() == 129279  // 'true' 'times'
       || this.tokenSequence() == 129619  // 'attribute' 'to'
       || this.tokenSequence() == 129658  // 'element' 'to'
       || this.tokenSequence() == 129671  // 'false' 'to'
       || this.tokenSequence() == 129723  // 'namespace' 'to'
       || this.tokenSequence() == 129733  // 'null' 'to'
       || this.tokenSequence() == 129756  // 'processing-instruction' 'to'
       || this.tokenSequence() == 129791  // 'true' 'to'
       || this.tokenSequence() == 130131  // 'attribute' 'treat'
       || this.tokenSequence() == 130170  // 'element' 'treat'
       || this.tokenSequence() == 130183  // 'false' 'treat'
       || this.tokenSequence() == 130235  // 'namespace' 'treat'
       || this.tokenSequence() == 130245  // 'null' 'treat'
       || this.tokenSequence() == 130268  // 'processing-instruction' 'treat'
       || this.tokenSequence() == 130303  // 'true' 'treat'
       || this.tokenSequence() == 133203  // 'attribute' 'union'
       || this.tokenSequence() == 133242  // 'element' 'union'
       || this.tokenSequence() == 133255  // 'false' 'union'
       || this.tokenSequence() == 133307  // 'namespace' 'union'
       || this.tokenSequence() == 133317  // 'null' 'union'
       || this.tokenSequence() == 133340  // 'processing-instruction' 'union'
       || this.tokenSequence() == 133375  // 'true' 'union'
       || this.tokenSequence() == 139347  // 'attribute' 'where'
       || this.tokenSequence() == 139386  // 'element' 'where'
       || this.tokenSequence() == 139399  // 'false' 'where'
       || this.tokenSequence() == 139451  // 'namespace' 'where'
       || this.tokenSequence() == 139461  // 'null' 'where'
       || this.tokenSequence() == 139484  // 'processing-instruction' 'where'
       || this.tokenSequence() == 139519  // 'true' 'where'
       || this.tokenSequence() == 141395  // 'attribute' 'with'
       || this.tokenSequence() == 141434  // 'element' 'with'
       || this.tokenSequence() == 141447  // 'false' 'with'
       || this.tokenSequence() == 141499  // 'namespace' 'with'
       || this.tokenSequence() == 141509  // 'null' 'with'
       || this.tokenSequence() == 141532  // 'processing-instruction' 'with'
       || this.tokenSequence() == 141567  // 'true' 'with'
       || this.tokenSequence() == 142983  // 'false' 'words'
       || this.tokenSequence() == 143045  // 'null' 'words'
       || this.tokenSequence() == 143103  // 'true' 'words'
       || this.tokenSequence() == 145543  // 'false' '|'
       || this.tokenSequence() == 145605  // 'null' '|'
       || this.tokenSequence() == 145663  // 'true' '|'
       || this.tokenSequence() == 146055  // 'false' '||'
       || this.tokenSequence() == 146117  // 'null' '||'
       || this.tokenSequence() == 146175  // 'true' '||'
       || this.tokenSequence() == 146567  // 'false' '|}'
       || this.tokenSequence() == 146629  // 'null' '|}'
       || this.tokenSequence() == 146687  // 'true' '|}'
       || this.tokenSequence() == 147079  // 'false' '}'
       || this.tokenSequence() == 147141  // 'null' '}'
       || this.tokenSequence() == 147199) // 'true' '}'
      {
        this.lk = this.memoized(4, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_PostfixExpr();
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(4, this.e0, this.lk);
        }
      }
      switch (this.tokenSequence())
      {
      case -1:
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 31:                      // '$'
      case 32:                      // '$$'
      case 33:                      // '%'
      case 35:                      // '('
      case 55:                      // '<'
      case 56:                      // '<!--'
      case 60:                      // '<?'
      case 69:                      // '['
      case 281:                     // '{'
      case 283:                     // '{|'
      case 3155:                    // 'attribute' EQName^Token
      case 3194:                    // 'element' EQName^Token
      case 9915:                    // 'namespace' NCName^Token
      case 9948:                    // 'processing-instruction' NCName^Token
      case 14854:                   // EQName^Token '#'
      case 14919:                   // 'after' '#'
      case 14921:                   // 'allowing' '#'
      case 14922:                   // 'ancestor' '#'
      case 14923:                   // 'ancestor-or-self' '#'
      case 14924:                   // 'and' '#'
      case 14926:                   // 'append' '#'
      case 14927:                   // 'array' '#'
      case 14928:                   // 'as' '#'
      case 14929:                   // 'ascending' '#'
      case 14930:                   // 'at' '#'
      case 14931:                   // 'attribute' '#'
      case 14932:                   // 'base-uri' '#'
      case 14933:                   // 'before' '#'
      case 14934:                   // 'boundary-space' '#'
      case 14935:                   // 'break' '#'
      case 14937:                   // 'case' '#'
      case 14938:                   // 'cast' '#'
      case 14939:                   // 'castable' '#'
      case 14940:                   // 'catch' '#'
      case 14942:                   // 'child' '#'
      case 14943:                   // 'collation' '#'
      case 14945:                   // 'comment' '#'
      case 14946:                   // 'constraint' '#'
      case 14947:                   // 'construction' '#'
      case 14950:                   // 'context' '#'
      case 14951:                   // 'continue' '#'
      case 14952:                   // 'copy' '#'
      case 14953:                   // 'copy-namespaces' '#'
      case 14954:                   // 'count' '#'
      case 14955:                   // 'decimal-format' '#'
      case 14957:                   // 'declare' '#'
      case 14958:                   // 'default' '#'
      case 14959:                   // 'delete' '#'
      case 14960:                   // 'descendant' '#'
      case 14961:                   // 'descendant-or-self' '#'
      case 14962:                   // 'descending' '#'
      case 14967:                   // 'div' '#'
      case 14968:                   // 'document' '#'
      case 14969:                   // 'document-node' '#'
      case 14970:                   // 'element' '#'
      case 14971:                   // 'else' '#'
      case 14972:                   // 'empty' '#'
      case 14973:                   // 'empty-sequence' '#'
      case 14974:                   // 'encoding' '#'
      case 14975:                   // 'end' '#'
      case 14977:                   // 'eq' '#'
      case 14978:                   // 'every' '#'
      case 14980:                   // 'except' '#'
      case 14981:                   // 'exit' '#'
      case 14982:                   // 'external' '#'
      case 14983:                   // 'false' '#'
      case 14984:                   // 'first' '#'
      case 14985:                   // 'following' '#'
      case 14986:                   // 'following-sibling' '#'
      case 14987:                   // 'for' '#'
      case 14990:                   // 'from' '#'
      case 14991:                   // 'ft-option' '#'
      case 14995:                   // 'function' '#'
      case 14996:                   // 'ge' '#'
      case 14998:                   // 'group' '#'
      case 15000:                   // 'gt' '#'
      case 15001:                   // 'idiv' '#'
      case 15002:                   // 'if' '#'
      case 15003:                   // 'import' '#'
      case 15004:                   // 'in' '#'
      case 15005:                   // 'index' '#'
      case 15009:                   // 'insert' '#'
      case 15010:                   // 'instance' '#'
      case 15011:                   // 'integrity' '#'
      case 15012:                   // 'intersect' '#'
      case 15013:                   // 'into' '#'
      case 15014:                   // 'is' '#'
      case 15015:                   // 'item' '#'
      case 15016:                   // 'json' '#'
      case 15017:                   // 'json-item' '#'
      case 15018:                   // 'jsoniq' '#'
      case 15021:                   // 'last' '#'
      case 15022:                   // 'lax' '#'
      case 15023:                   // 'le' '#'
      case 15025:                   // 'let' '#'
      case 15027:                   // 'loop' '#'
      case 15029:                   // 'lt' '#'
      case 15031:                   // 'mod' '#'
      case 15032:                   // 'modify' '#'
      case 15033:                   // 'module' '#'
      case 15035:                   // 'namespace' '#'
      case 15036:                   // 'namespace-node' '#'
      case 15037:                   // 'ne' '#'
      case 15042:                   // 'node' '#'
      case 15043:                   // 'nodes' '#'
      case 15045:                   // 'null' '#'
      case 15046:                   // 'object' '#'
      case 15050:                   // 'only' '#'
      case 15051:                   // 'option' '#'
      case 15052:                   // 'or' '#'
      case 15053:                   // 'order' '#'
      case 15054:                   // 'ordered' '#'
      case 15055:                   // 'ordering' '#'
      case 15058:                   // 'parent' '#'
      case 15064:                   // 'preceding' '#'
      case 15065:                   // 'preceding-sibling' '#'
      case 15068:                   // 'processing-instruction' '#'
      case 15070:                   // 'rename' '#'
      case 15071:                   // 'replace' '#'
      case 15072:                   // 'return' '#'
      case 15073:                   // 'returning' '#'
      case 15074:                   // 'revalidation' '#'
      case 15076:                   // 'satisfies' '#'
      case 15077:                   // 'schema' '#'
      case 15078:                   // 'schema-attribute' '#'
      case 15079:                   // 'schema-element' '#'
      case 15080:                   // 'score' '#'
      case 15081:                   // 'select' '#'
      case 15082:                   // 'self' '#'
      case 15087:                   // 'sliding' '#'
      case 15088:                   // 'some' '#'
      case 15089:                   // 'stable' '#'
      case 15090:                   // 'start' '#'
      case 15093:                   // 'strict' '#'
      case 15095:                   // 'structured-item' '#'
      case 15096:                   // 'switch' '#'
      case 15097:                   // 'text' '#'
      case 15101:                   // 'to' '#'
      case 15102:                   // 'treat' '#'
      case 15103:                   // 'true' '#'
      case 15104:                   // 'try' '#'
      case 15105:                   // 'tumbling' '#'
      case 15106:                   // 'type' '#'
      case 15107:                   // 'typeswitch' '#'
      case 15108:                   // 'union' '#'
      case 15110:                   // 'unordered' '#'
      case 15111:                   // 'updating' '#'
      case 15114:                   // 'validate' '#'
      case 15115:                   // 'value' '#'
      case 15116:                   // 'variable' '#'
      case 15117:                   // 'version' '#'
      case 15120:                   // 'where' '#'
      case 15121:                   // 'while' '#'
      case 15124:                   // 'with' '#'
      case 17926:                   // EQName^Token '('
      case 17991:                   // 'after' '('
      case 17993:                   // 'allowing' '('
      case 17994:                   // 'ancestor' '('
      case 17995:                   // 'ancestor-or-self' '('
      case 17996:                   // 'and' '('
      case 17998:                   // 'append' '('
      case 18000:                   // 'as' '('
      case 18001:                   // 'ascending' '('
      case 18002:                   // 'at' '('
      case 18004:                   // 'base-uri' '('
      case 18005:                   // 'before' '('
      case 18006:                   // 'boundary-space' '('
      case 18007:                   // 'break' '('
      case 18009:                   // 'case' '('
      case 18010:                   // 'cast' '('
      case 18011:                   // 'castable' '('
      case 18012:                   // 'catch' '('
      case 18014:                   // 'child' '('
      case 18015:                   // 'collation' '('
      case 18018:                   // 'constraint' '('
      case 18019:                   // 'construction' '('
      case 18022:                   // 'context' '('
      case 18023:                   // 'continue' '('
      case 18024:                   // 'copy' '('
      case 18025:                   // 'copy-namespaces' '('
      case 18026:                   // 'count' '('
      case 18027:                   // 'decimal-format' '('
      case 18029:                   // 'declare' '('
      case 18030:                   // 'default' '('
      case 18031:                   // 'delete' '('
      case 18032:                   // 'descendant' '('
      case 18033:                   // 'descendant-or-self' '('
      case 18034:                   // 'descending' '('
      case 18039:                   // 'div' '('
      case 18040:                   // 'document' '('
      case 18043:                   // 'else' '('
      case 18044:                   // 'empty' '('
      case 18046:                   // 'encoding' '('
      case 18047:                   // 'end' '('
      case 18049:                   // 'eq' '('
      case 18050:                   // 'every' '('
      case 18052:                   // 'except' '('
      case 18053:                   // 'exit' '('
      case 18054:                   // 'external' '('
      case 18055:                   // 'false' '('
      case 18056:                   // 'first' '('
      case 18057:                   // 'following' '('
      case 18058:                   // 'following-sibling' '('
      case 18059:                   // 'for' '('
      case 18062:                   // 'from' '('
      case 18063:                   // 'ft-option' '('
      case 18067:                   // 'function' '('
      case 18068:                   // 'ge' '('
      case 18070:                   // 'group' '('
      case 18072:                   // 'gt' '('
      case 18073:                   // 'idiv' '('
      case 18075:                   // 'import' '('
      case 18076:                   // 'in' '('
      case 18077:                   // 'index' '('
      case 18081:                   // 'insert' '('
      case 18082:                   // 'instance' '('
      case 18083:                   // 'integrity' '('
      case 18084:                   // 'intersect' '('
      case 18085:                   // 'into' '('
      case 18086:                   // 'is' '('
      case 18088:                   // 'json' '('
      case 18090:                   // 'jsoniq' '('
      case 18093:                   // 'last' '('
      case 18094:                   // 'lax' '('
      case 18095:                   // 'le' '('
      case 18097:                   // 'let' '('
      case 18099:                   // 'loop' '('
      case 18101:                   // 'lt' '('
      case 18103:                   // 'mod' '('
      case 18104:                   // 'modify' '('
      case 18105:                   // 'module' '('
      case 18107:                   // 'namespace' '('
      case 18109:                   // 'ne' '('
      case 18115:                   // 'nodes' '('
      case 18117:                   // 'null' '('
      case 18118:                   // 'object' '('
      case 18122:                   // 'only' '('
      case 18123:                   // 'option' '('
      case 18124:                   // 'or' '('
      case 18125:                   // 'order' '('
      case 18126:                   // 'ordered' '('
      case 18127:                   // 'ordering' '('
      case 18130:                   // 'parent' '('
      case 18136:                   // 'preceding' '('
      case 18137:                   // 'preceding-sibling' '('
      case 18142:                   // 'rename' '('
      case 18143:                   // 'replace' '('
      case 18144:                   // 'return' '('
      case 18145:                   // 'returning' '('
      case 18146:                   // 'revalidation' '('
      case 18148:                   // 'satisfies' '('
      case 18149:                   // 'schema' '('
      case 18152:                   // 'score' '('
      case 18153:                   // 'select' '('
      case 18154:                   // 'self' '('
      case 18159:                   // 'sliding' '('
      case 18160:                   // 'some' '('
      case 18161:                   // 'stable' '('
      case 18162:                   // 'start' '('
      case 18165:                   // 'strict' '('
      case 18173:                   // 'to' '('
      case 18174:                   // 'treat' '('
      case 18175:                   // 'true' '('
      case 18176:                   // 'try' '('
      case 18177:                   // 'tumbling' '('
      case 18178:                   // 'type' '('
      case 18180:                   // 'union' '('
      case 18182:                   // 'unordered' '('
      case 18183:                   // 'updating' '('
      case 18186:                   // 'validate' '('
      case 18187:                   // 'value' '('
      case 18188:                   // 'variable' '('
      case 18189:                   // 'version' '('
      case 18192:                   // 'where' '('
      case 18193:                   // 'while' '('
      case 18196:                   // 'with' '('
      case 23175:                   // 'false' '.'
      case 23237:                   // 'null' '.'
      case 23295:                   // 'true' '.'
      case 37459:                   // 'attribute' 'allowing'
      case 37498:                   // 'element' 'allowing'
      case 37563:                   // 'namespace' 'allowing'
      case 37596:                   // 'processing-instruction' 'allowing'
      case 37971:                   // 'attribute' 'ancestor'
      case 38010:                   // 'element' 'ancestor'
      case 38075:                   // 'namespace' 'ancestor'
      case 38108:                   // 'processing-instruction' 'ancestor'
      case 38483:                   // 'attribute' 'ancestor-or-self'
      case 38522:                   // 'element' 'ancestor-or-self'
      case 38587:                   // 'namespace' 'ancestor-or-self'
      case 38620:                   // 'processing-instruction' 'ancestor-or-self'
      case 40019:                   // 'attribute' 'append'
      case 40058:                   // 'element' 'append'
      case 40123:                   // 'namespace' 'append'
      case 40156:                   // 'processing-instruction' 'append'
      case 40531:                   // 'attribute' 'array'
      case 40570:                   // 'element' 'array'
      case 42579:                   // 'attribute' 'attribute'
      case 42618:                   // 'element' 'attribute'
      case 42683:                   // 'namespace' 'attribute'
      case 42716:                   // 'processing-instruction' 'attribute'
      case 43091:                   // 'attribute' 'base-uri'
      case 43130:                   // 'element' 'base-uri'
      case 43195:                   // 'namespace' 'base-uri'
      case 43228:                   // 'processing-instruction' 'base-uri'
      case 44115:                   // 'attribute' 'boundary-space'
      case 44154:                   // 'element' 'boundary-space'
      case 44219:                   // 'namespace' 'boundary-space'
      case 44252:                   // 'processing-instruction' 'boundary-space'
      case 44627:                   // 'attribute' 'break'
      case 44666:                   // 'element' 'break'
      case 44731:                   // 'namespace' 'break'
      case 44764:                   // 'processing-instruction' 'break'
      case 47187:                   // 'attribute' 'catch'
      case 47226:                   // 'element' 'catch'
      case 47291:                   // 'namespace' 'catch'
      case 47324:                   // 'processing-instruction' 'catch'
      case 48211:                   // 'attribute' 'child'
      case 48250:                   // 'element' 'child'
      case 48315:                   // 'namespace' 'child'
      case 48348:                   // 'processing-instruction' 'child'
      case 49747:                   // 'attribute' 'comment'
      case 49786:                   // 'element' 'comment'
      case 49851:                   // 'namespace' 'comment'
      case 49884:                   // 'processing-instruction' 'comment'
      case 50259:                   // 'attribute' 'constraint'
      case 50298:                   // 'element' 'constraint'
      case 50363:                   // 'namespace' 'constraint'
      case 50396:                   // 'processing-instruction' 'constraint'
      case 50771:                   // 'attribute' 'construction'
      case 50810:                   // 'element' 'construction'
      case 50875:                   // 'namespace' 'construction'
      case 50908:                   // 'processing-instruction' 'construction'
      case 52307:                   // 'attribute' 'context'
      case 52346:                   // 'element' 'context'
      case 52411:                   // 'namespace' 'context'
      case 52444:                   // 'processing-instruction' 'context'
      case 52819:                   // 'attribute' 'continue'
      case 52858:                   // 'element' 'continue'
      case 52923:                   // 'namespace' 'continue'
      case 52956:                   // 'processing-instruction' 'continue'
      case 53331:                   // 'attribute' 'copy'
      case 53370:                   // 'element' 'copy'
      case 53435:                   // 'namespace' 'copy'
      case 53468:                   // 'processing-instruction' 'copy'
      case 53843:                   // 'attribute' 'copy-namespaces'
      case 53882:                   // 'element' 'copy-namespaces'
      case 53947:                   // 'namespace' 'copy-namespaces'
      case 53980:                   // 'processing-instruction' 'copy-namespaces'
      case 54867:                   // 'attribute' 'decimal-format'
      case 54906:                   // 'element' 'decimal-format'
      case 54971:                   // 'namespace' 'decimal-format'
      case 55004:                   // 'processing-instruction' 'decimal-format'
      case 55891:                   // 'attribute' 'declare'
      case 55930:                   // 'element' 'declare'
      case 55995:                   // 'namespace' 'declare'
      case 56028:                   // 'processing-instruction' 'declare'
      case 56915:                   // 'attribute' 'delete'
      case 56954:                   // 'element' 'delete'
      case 57019:                   // 'namespace' 'delete'
      case 57052:                   // 'processing-instruction' 'delete'
      case 57427:                   // 'attribute' 'descendant'
      case 57466:                   // 'element' 'descendant'
      case 57531:                   // 'namespace' 'descendant'
      case 57564:                   // 'processing-instruction' 'descendant'
      case 57939:                   // 'attribute' 'descendant-or-self'
      case 57978:                   // 'element' 'descendant-or-self'
      case 58043:                   // 'namespace' 'descendant-or-self'
      case 58076:                   // 'processing-instruction' 'descendant-or-self'
      case 61523:                   // 'attribute' 'document'
      case 61562:                   // 'element' 'document'
      case 61627:                   // 'namespace' 'document'
      case 61660:                   // 'processing-instruction' 'document'
      case 62035:                   // 'attribute' 'document-node'
      case 62074:                   // 'element' 'document-node'
      case 62139:                   // 'namespace' 'document-node'
      case 62172:                   // 'processing-instruction' 'document-node'
      case 62547:                   // 'attribute' 'element'
      case 62586:                   // 'element' 'element'
      case 62651:                   // 'namespace' 'element'
      case 62684:                   // 'processing-instruction' 'element'
      case 64083:                   // 'attribute' 'empty-sequence'
      case 64122:                   // 'element' 'empty-sequence'
      case 64187:                   // 'namespace' 'empty-sequence'
      case 64220:                   // 'processing-instruction' 'empty-sequence'
      case 64595:                   // 'attribute' 'encoding'
      case 64634:                   // 'element' 'encoding'
      case 64699:                   // 'namespace' 'encoding'
      case 64732:                   // 'processing-instruction' 'encoding'
      case 66643:                   // 'attribute' 'every'
      case 66682:                   // 'element' 'every'
      case 66747:                   // 'namespace' 'every'
      case 66780:                   // 'processing-instruction' 'every'
      case 68179:                   // 'attribute' 'exit'
      case 68218:                   // 'element' 'exit'
      case 68283:                   // 'namespace' 'exit'
      case 68316:                   // 'processing-instruction' 'exit'
      case 68691:                   // 'attribute' 'external'
      case 68730:                   // 'element' 'external'
      case 68795:                   // 'namespace' 'external'
      case 68828:                   // 'processing-instruction' 'external'
      case 69203:                   // 'attribute' 'false'
      case 69242:                   // 'element' 'false'
      case 69307:                   // 'namespace' 'false'
      case 69340:                   // 'processing-instruction' 'false'
      case 69715:                   // 'attribute' 'first'
      case 69754:                   // 'element' 'first'
      case 69819:                   // 'namespace' 'first'
      case 69852:                   // 'processing-instruction' 'first'
      case 70227:                   // 'attribute' 'following'
      case 70266:                   // 'element' 'following'
      case 70331:                   // 'namespace' 'following'
      case 70364:                   // 'processing-instruction' 'following'
      case 70739:                   // 'attribute' 'following-sibling'
      case 70778:                   // 'element' 'following-sibling'
      case 70843:                   // 'namespace' 'following-sibling'
      case 70876:                   // 'processing-instruction' 'following-sibling'
      case 72787:                   // 'attribute' 'from'
      case 72826:                   // 'element' 'from'
      case 72891:                   // 'namespace' 'from'
      case 72924:                   // 'processing-instruction' 'from'
      case 73299:                   // 'attribute' 'ft-option'
      case 73338:                   // 'element' 'ft-option'
      case 73403:                   // 'namespace' 'ft-option'
      case 73436:                   // 'processing-instruction' 'ft-option'
      case 75347:                   // 'attribute' 'function'
      case 75386:                   // 'element' 'function'
      case 75451:                   // 'namespace' 'function'
      case 75484:                   // 'processing-instruction' 'function'
      case 78931:                   // 'attribute' 'if'
      case 78970:                   // 'element' 'if'
      case 79035:                   // 'namespace' 'if'
      case 79068:                   // 'processing-instruction' 'if'
      case 79443:                   // 'attribute' 'import'
      case 79482:                   // 'element' 'import'
      case 79547:                   // 'namespace' 'import'
      case 79580:                   // 'processing-instruction' 'import'
      case 79955:                   // 'attribute' 'in'
      case 79994:                   // 'element' 'in'
      case 80059:                   // 'namespace' 'in'
      case 80092:                   // 'processing-instruction' 'in'
      case 80467:                   // 'attribute' 'index'
      case 80506:                   // 'element' 'index'
      case 80571:                   // 'namespace' 'index'
      case 80604:                   // 'processing-instruction' 'index'
      case 82515:                   // 'attribute' 'insert'
      case 82554:                   // 'element' 'insert'
      case 82619:                   // 'namespace' 'insert'
      case 82652:                   // 'processing-instruction' 'insert'
      case 83539:                   // 'attribute' 'integrity'
      case 83578:                   // 'element' 'integrity'
      case 83643:                   // 'namespace' 'integrity'
      case 83676:                   // 'processing-instruction' 'integrity'
      case 85587:                   // 'attribute' 'item'
      case 85626:                   // 'element' 'item'
      case 85691:                   // 'namespace' 'item'
      case 85724:                   // 'processing-instruction' 'item'
      case 86099:                   // 'attribute' 'json'
      case 86138:                   // 'element' 'json'
      case 86203:                   // 'namespace' 'json'
      case 86236:                   // 'processing-instruction' 'json'
      case 86611:                   // 'attribute' 'json-item'
      case 86650:                   // 'element' 'json-item'
      case 87123:                   // 'attribute' 'jsoniq'
      case 87162:                   // 'element' 'jsoniq'
      case 87227:                   // 'namespace' 'jsoniq'
      case 87260:                   // 'processing-instruction' 'jsoniq'
      case 88659:                   // 'attribute' 'last'
      case 88698:                   // 'element' 'last'
      case 88763:                   // 'namespace' 'last'
      case 88796:                   // 'processing-instruction' 'last'
      case 89171:                   // 'attribute' 'lax'
      case 89210:                   // 'element' 'lax'
      case 89275:                   // 'namespace' 'lax'
      case 89308:                   // 'processing-instruction' 'lax'
      case 91731:                   // 'attribute' 'loop'
      case 91770:                   // 'element' 'loop'
      case 91835:                   // 'namespace' 'loop'
      case 91868:                   // 'processing-instruction' 'loop'
      case 94803:                   // 'attribute' 'module'
      case 94842:                   // 'element' 'module'
      case 94907:                   // 'namespace' 'module'
      case 94940:                   // 'processing-instruction' 'module'
      case 95827:                   // 'attribute' 'namespace'
      case 95866:                   // 'element' 'namespace'
      case 95931:                   // 'namespace' 'namespace'
      case 95964:                   // 'processing-instruction' 'namespace'
      case 96339:                   // 'attribute' 'namespace-node'
      case 96378:                   // 'element' 'namespace-node'
      case 96443:                   // 'namespace' 'namespace-node'
      case 96476:                   // 'processing-instruction' 'namespace-node'
      case 99411:                   // 'attribute' 'node'
      case 99450:                   // 'element' 'node'
      case 99515:                   // 'namespace' 'node'
      case 99548:                   // 'processing-instruction' 'node'
      case 99923:                   // 'attribute' 'nodes'
      case 99962:                   // 'element' 'nodes'
      case 100027:                  // 'namespace' 'nodes'
      case 100060:                  // 'processing-instruction' 'nodes'
      case 100947:                  // 'attribute' 'null'
      case 100986:                  // 'element' 'null'
      case 101051:                  // 'namespace' 'null'
      case 101084:                  // 'processing-instruction' 'null'
      case 101459:                  // 'attribute' 'object'
      case 101498:                  // 'element' 'object'
      case 101563:                  // 'namespace' 'object'
      case 101596:                  // 'processing-instruction' 'object'
      case 104019:                  // 'attribute' 'option'
      case 104058:                  // 'element' 'option'
      case 104123:                  // 'namespace' 'option'
      case 104156:                  // 'processing-instruction' 'option'
      case 105555:                  // 'attribute' 'ordered'
      case 105594:                  // 'element' 'ordered'
      case 105659:                  // 'namespace' 'ordered'
      case 105692:                  // 'processing-instruction' 'ordered'
      case 106067:                  // 'attribute' 'ordering'
      case 106106:                  // 'element' 'ordering'
      case 106171:                  // 'namespace' 'ordering'
      case 106204:                  // 'processing-instruction' 'ordering'
      case 107603:                  // 'attribute' 'parent'
      case 107642:                  // 'element' 'parent'
      case 107707:                  // 'namespace' 'parent'
      case 107740:                  // 'processing-instruction' 'parent'
      case 110675:                  // 'attribute' 'preceding'
      case 110714:                  // 'element' 'preceding'
      case 110779:                  // 'namespace' 'preceding'
      case 110812:                  // 'processing-instruction' 'preceding'
      case 111187:                  // 'attribute' 'preceding-sibling'
      case 111226:                  // 'element' 'preceding-sibling'
      case 111291:                  // 'namespace' 'preceding-sibling'
      case 111324:                  // 'processing-instruction' 'preceding-sibling'
      case 112723:                  // 'attribute' 'processing-instruction'
      case 112762:                  // 'element' 'processing-instruction'
      case 112827:                  // 'namespace' 'processing-instruction'
      case 112860:                  // 'processing-instruction' 'processing-instruction'
      case 113747:                  // 'attribute' 'rename'
      case 113786:                  // 'element' 'rename'
      case 113851:                  // 'namespace' 'rename'
      case 113884:                  // 'processing-instruction' 'rename'
      case 114259:                  // 'attribute' 'replace'
      case 114298:                  // 'element' 'replace'
      case 114363:                  // 'namespace' 'replace'
      case 114396:                  // 'processing-instruction' 'replace'
      case 115283:                  // 'attribute' 'returning'
      case 115322:                  // 'element' 'returning'
      case 115387:                  // 'namespace' 'returning'
      case 115420:                  // 'processing-instruction' 'returning'
      case 115795:                  // 'attribute' 'revalidation'
      case 115834:                  // 'element' 'revalidation'
      case 115899:                  // 'namespace' 'revalidation'
      case 115932:                  // 'processing-instruction' 'revalidation'
      case 117331:                  // 'attribute' 'schema'
      case 117370:                  // 'element' 'schema'
      case 117435:                  // 'namespace' 'schema'
      case 117468:                  // 'processing-instruction' 'schema'
      case 117843:                  // 'attribute' 'schema-attribute'
      case 117882:                  // 'element' 'schema-attribute'
      case 117947:                  // 'namespace' 'schema-attribute'
      case 117980:                  // 'processing-instruction' 'schema-attribute'
      case 118355:                  // 'attribute' 'schema-element'
      case 118394:                  // 'element' 'schema-element'
      case 118459:                  // 'namespace' 'schema-element'
      case 118492:                  // 'processing-instruction' 'schema-element'
      case 118867:                  // 'attribute' 'score'
      case 118906:                  // 'element' 'score'
      case 118971:                  // 'namespace' 'score'
      case 119004:                  // 'processing-instruction' 'score'
      case 119379:                  // 'attribute' 'select'
      case 119418:                  // 'element' 'select'
      case 119483:                  // 'namespace' 'select'
      case 119516:                  // 'processing-instruction' 'select'
      case 119891:                  // 'attribute' 'self'
      case 119930:                  // 'element' 'self'
      case 119995:                  // 'namespace' 'self'
      case 120028:                  // 'processing-instruction' 'self'
      case 122451:                  // 'attribute' 'sliding'
      case 122490:                  // 'element' 'sliding'
      case 122555:                  // 'namespace' 'sliding'
      case 122588:                  // 'processing-instruction' 'sliding'
      case 122963:                  // 'attribute' 'some'
      case 123002:                  // 'element' 'some'
      case 123067:                  // 'namespace' 'some'
      case 123100:                  // 'processing-instruction' 'some'
      case 125523:                  // 'attribute' 'strict'
      case 125562:                  // 'element' 'strict'
      case 125627:                  // 'namespace' 'strict'
      case 125660:                  // 'processing-instruction' 'strict'
      case 126547:                  // 'attribute' 'structured-item'
      case 126586:                  // 'element' 'structured-item'
      case 127059:                  // 'attribute' 'switch'
      case 127098:                  // 'element' 'switch'
      case 127163:                  // 'namespace' 'switch'
      case 127196:                  // 'processing-instruction' 'switch'
      case 127571:                  // 'attribute' 'text'
      case 127610:                  // 'element' 'text'
      case 127675:                  // 'namespace' 'text'
      case 127708:                  // 'processing-instruction' 'text'
      case 130643:                  // 'attribute' 'true'
      case 130682:                  // 'element' 'true'
      case 130747:                  // 'namespace' 'true'
      case 130780:                  // 'processing-instruction' 'true'
      case 131155:                  // 'attribute' 'try'
      case 131194:                  // 'element' 'try'
      case 131259:                  // 'namespace' 'try'
      case 131292:                  // 'processing-instruction' 'try'
      case 131667:                  // 'attribute' 'tumbling'
      case 131706:                  // 'element' 'tumbling'
      case 131771:                  // 'namespace' 'tumbling'
      case 131804:                  // 'processing-instruction' 'tumbling'
      case 132179:                  // 'attribute' 'type'
      case 132218:                  // 'element' 'type'
      case 132283:                  // 'namespace' 'type'
      case 132316:                  // 'processing-instruction' 'type'
      case 132691:                  // 'attribute' 'typeswitch'
      case 132730:                  // 'element' 'typeswitch'
      case 132795:                  // 'namespace' 'typeswitch'
      case 132828:                  // 'processing-instruction' 'typeswitch'
      case 134227:                  // 'attribute' 'unordered'
      case 134266:                  // 'element' 'unordered'
      case 134331:                  // 'namespace' 'unordered'
      case 134364:                  // 'processing-instruction' 'unordered'
      case 134739:                  // 'attribute' 'updating'
      case 134778:                  // 'element' 'updating'
      case 134843:                  // 'namespace' 'updating'
      case 134876:                  // 'processing-instruction' 'updating'
      case 136275:                  // 'attribute' 'validate'
      case 136314:                  // 'element' 'validate'
      case 136379:                  // 'namespace' 'validate'
      case 136412:                  // 'processing-instruction' 'validate'
      case 136787:                  // 'attribute' 'value'
      case 136826:                  // 'element' 'value'
      case 136891:                  // 'namespace' 'value'
      case 136924:                  // 'processing-instruction' 'value'
      case 137299:                  // 'attribute' 'variable'
      case 137338:                  // 'element' 'variable'
      case 137403:                  // 'namespace' 'variable'
      case 137436:                  // 'processing-instruction' 'variable'
      case 137811:                  // 'attribute' 'version'
      case 137850:                  // 'element' 'version'
      case 137915:                  // 'namespace' 'version'
      case 137948:                  // 'processing-instruction' 'version'
      case 139859:                  // 'attribute' 'while'
      case 139898:                  // 'element' 'while'
      case 139963:                  // 'namespace' 'while'
      case 139996:                  // 'processing-instruction' 'while'
      case 143955:                  // 'attribute' '{'
      case 143969:                  // 'comment' '{'
      case 143992:                  // 'document' '{'
      case 143994:                  // 'element' '{'
      case 144059:                  // 'namespace' '{'
      case 144078:                  // 'ordered' '{'
      case 144092:                  // 'processing-instruction' '{'
      case 144121:                  // 'text' '{'
      case 144134:                  // 'unordered' '{'
        this.parse_PostfixExpr();
        break;
      default:
        this.parse_AxisStep();
      }
      this.eventHandler.endNonterminal("StepExpr", this.e0);
    }

    private try_StepExpr()
    {
      switch (this.token())
      {
      case 83:                      // 'attribute'
        this.lookahead2W(288);      // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 122:                     // 'element'
        this.lookahead2W(287);      // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 187:                     // 'namespace'
      case 220:                     // 'processing-instruction'
        this.lookahead2W(285);      // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 135:                     // 'false'
      case 197:                     // 'null'
      case 255:                     // 'true'
        this.lookahead2W(237);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
        break;
      case 97:                      // 'comment'
      case 120:                     // 'document'
      case 206:                     // 'ordered'
      case 249:                     // 'text'
      case 262:                     // 'unordered'
        this.lookahead2W(239);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 79:                      // 'array'
      case 125:                     // 'empty-sequence'
      case 154:                     // 'if'
      case 167:                     // 'item'
      case 169:                     // 'json-item'
      case 247:                     // 'structured-item'
      case 248:                     // 'switch'
      case 259:                     // 'typeswitch'
        this.lookahead2W(230);      // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 94:                      // 'child'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
      case 234:                     // 'self'
        this.lookahead2W(238);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
        break;
      case 6:                       // EQName^Token
      case 71:                      // 'after'
      case 73:                      // 'allowing'
      case 76:                      // 'and'
      case 78:                      // 'append'
      case 80:                      // 'as'
      case 81:                      // 'ascending'
      case 82:                      // 'at'
      case 84:                      // 'base-uri'
      case 85:                      // 'before'
      case 86:                      // 'boundary-space'
      case 87:                      // 'break'
      case 89:                      // 'case'
      case 90:                      // 'cast'
      case 91:                      // 'castable'
      case 92:                      // 'catch'
      case 95:                      // 'collation'
      case 98:                      // 'constraint'
      case 99:                      // 'construction'
      case 102:                     // 'context'
      case 103:                     // 'continue'
      case 104:                     // 'copy'
      case 105:                     // 'copy-namespaces'
      case 106:                     // 'count'
      case 107:                     // 'decimal-format'
      case 109:                     // 'declare'
      case 110:                     // 'default'
      case 111:                     // 'delete'
      case 114:                     // 'descending'
      case 119:                     // 'div'
      case 121:                     // 'document-node'
      case 123:                     // 'else'
      case 124:                     // 'empty'
      case 126:                     // 'encoding'
      case 127:                     // 'end'
      case 129:                     // 'eq'
      case 130:                     // 'every'
      case 132:                     // 'except'
      case 133:                     // 'exit'
      case 134:                     // 'external'
      case 136:                     // 'first'
      case 139:                     // 'for'
      case 142:                     // 'from'
      case 143:                     // 'ft-option'
      case 147:                     // 'function'
      case 148:                     // 'ge'
      case 150:                     // 'group'
      case 152:                     // 'gt'
      case 153:                     // 'idiv'
      case 155:                     // 'import'
      case 156:                     // 'in'
      case 157:                     // 'index'
      case 161:                     // 'insert'
      case 162:                     // 'instance'
      case 163:                     // 'integrity'
      case 164:                     // 'intersect'
      case 165:                     // 'into'
      case 166:                     // 'is'
      case 168:                     // 'json'
      case 170:                     // 'jsoniq'
      case 173:                     // 'last'
      case 174:                     // 'lax'
      case 175:                     // 'le'
      case 177:                     // 'let'
      case 179:                     // 'loop'
      case 181:                     // 'lt'
      case 183:                     // 'mod'
      case 184:                     // 'modify'
      case 185:                     // 'module'
      case 188:                     // 'namespace-node'
      case 189:                     // 'ne'
      case 194:                     // 'node'
      case 195:                     // 'nodes'
      case 198:                     // 'object'
      case 202:                     // 'only'
      case 203:                     // 'option'
      case 204:                     // 'or'
      case 205:                     // 'order'
      case 207:                     // 'ordering'
      case 222:                     // 'rename'
      case 223:                     // 'replace'
      case 224:                     // 'return'
      case 225:                     // 'returning'
      case 226:                     // 'revalidation'
      case 228:                     // 'satisfies'
      case 229:                     // 'schema'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
      case 232:                     // 'score'
      case 233:                     // 'select'
      case 239:                     // 'sliding'
      case 240:                     // 'some'
      case 241:                     // 'stable'
      case 242:                     // 'start'
      case 245:                     // 'strict'
      case 253:                     // 'to'
      case 254:                     // 'treat'
      case 256:                     // 'try'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 266:                     // 'validate'
      case 267:                     // 'value'
      case 268:                     // 'variable'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
        this.lookahead2W(234);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 12935 // 'false' EOF
       || this.tokenSequence() == 12997 // 'null' EOF
       || this.tokenSequence() == 13055 // 'true' EOF
       || this.tokenSequence() == 13447 // 'false' '!'
       || this.tokenSequence() == 13509 // 'null' '!'
       || this.tokenSequence() == 13567 // 'true' '!'
       || this.tokenSequence() == 13959 // 'false' '!='
       || this.tokenSequence() == 14021 // 'null' '!='
       || this.tokenSequence() == 14079 // 'true' '!='
       || this.tokenSequence() == 19591 // 'false' ')'
       || this.tokenSequence() == 19653 // 'null' ')'
       || this.tokenSequence() == 19711 // 'true' ')'
       || this.tokenSequence() == 20103 // 'false' '*'
       || this.tokenSequence() == 20165 // 'null' '*'
       || this.tokenSequence() == 20223 // 'true' '*'
       || this.tokenSequence() == 21127 // 'false' '+'
       || this.tokenSequence() == 21189 // 'null' '+'
       || this.tokenSequence() == 21247 // 'true' '+'
       || this.tokenSequence() == 21639 // 'false' ','
       || this.tokenSequence() == 21701 // 'null' ','
       || this.tokenSequence() == 21759 // 'true' ','
       || this.tokenSequence() == 22151 // 'false' '-'
       || this.tokenSequence() == 22213 // 'null' '-'
       || this.tokenSequence() == 22271 // 'true' '-'
       || this.tokenSequence() == 24199 // 'false' '/'
       || this.tokenSequence() == 24261 // 'null' '/'
       || this.tokenSequence() == 24319 // 'true' '/'
       || this.tokenSequence() == 24711 // 'false' '//'
       || this.tokenSequence() == 24773 // 'null' '//'
       || this.tokenSequence() == 24831 // 'true' '//'
       || this.tokenSequence() == 25735 // 'false' ':'
       || this.tokenSequence() == 25797 // 'null' ':'
       || this.tokenSequence() == 25855 // 'true' ':'
       || this.tokenSequence() == 27783 // 'false' ';'
       || this.tokenSequence() == 27845 // 'null' ';'
       || this.tokenSequence() == 27903 // 'true' ';'
       || this.tokenSequence() == 28295 // 'false' '<'
       || this.tokenSequence() == 28357 // 'null' '<'
       || this.tokenSequence() == 28415 // 'true' '<'
       || this.tokenSequence() == 29831 // 'false' '<<'
       || this.tokenSequence() == 29893 // 'null' '<<'
       || this.tokenSequence() == 29951 // 'true' '<<'
       || this.tokenSequence() == 30343 // 'false' '<='
       || this.tokenSequence() == 30405 // 'null' '<='
       || this.tokenSequence() == 30463 // 'true' '<='
       || this.tokenSequence() == 31367 // 'false' '='
       || this.tokenSequence() == 31429 // 'null' '='
       || this.tokenSequence() == 31487 // 'true' '='
       || this.tokenSequence() == 31879 // 'false' '>'
       || this.tokenSequence() == 31941 // 'null' '>'
       || this.tokenSequence() == 31999 // 'true' '>'
       || this.tokenSequence() == 32391 // 'false' '>='
       || this.tokenSequence() == 32453 // 'null' '>='
       || this.tokenSequence() == 32511 // 'true' '>='
       || this.tokenSequence() == 32903 // 'false' '>>'
       || this.tokenSequence() == 32965 // 'null' '>>'
       || this.tokenSequence() == 33023 // 'true' '>>'
       || this.tokenSequence() == 35463 // 'false' '['
       || this.tokenSequence() == 35525 // 'null' '['
       || this.tokenSequence() == 35583 // 'true' '['
       || this.tokenSequence() == 35975 // 'false' ']'
       || this.tokenSequence() == 36037 // 'null' ']'
       || this.tokenSequence() == 36095 // 'true' ']'
       || this.tokenSequence() == 36435 // 'attribute' 'after'
       || this.tokenSequence() == 36474 // 'element' 'after'
       || this.tokenSequence() == 36487 // 'false' 'after'
       || this.tokenSequence() == 36539 // 'namespace' 'after'
       || this.tokenSequence() == 36549 // 'null' 'after'
       || this.tokenSequence() == 36572 // 'processing-instruction' 'after'
       || this.tokenSequence() == 36607 // 'true' 'after'
       || this.tokenSequence() == 38995 // 'attribute' 'and'
       || this.tokenSequence() == 39034 // 'element' 'and'
       || this.tokenSequence() == 39047 // 'false' 'and'
       || this.tokenSequence() == 39099 // 'namespace' 'and'
       || this.tokenSequence() == 39109 // 'null' 'and'
       || this.tokenSequence() == 39132 // 'processing-instruction' 'and'
       || this.tokenSequence() == 39167 // 'true' 'and'
       || this.tokenSequence() == 41043 // 'attribute' 'as'
       || this.tokenSequence() == 41082 // 'element' 'as'
       || this.tokenSequence() == 41095 // 'false' 'as'
       || this.tokenSequence() == 41147 // 'namespace' 'as'
       || this.tokenSequence() == 41157 // 'null' 'as'
       || this.tokenSequence() == 41180 // 'processing-instruction' 'as'
       || this.tokenSequence() == 41215 // 'true' 'as'
       || this.tokenSequence() == 41555 // 'attribute' 'ascending'
       || this.tokenSequence() == 41594 // 'element' 'ascending'
       || this.tokenSequence() == 41607 // 'false' 'ascending'
       || this.tokenSequence() == 41659 // 'namespace' 'ascending'
       || this.tokenSequence() == 41669 // 'null' 'ascending'
       || this.tokenSequence() == 41692 // 'processing-instruction' 'ascending'
       || this.tokenSequence() == 41727 // 'true' 'ascending'
       || this.tokenSequence() == 42067 // 'attribute' 'at'
       || this.tokenSequence() == 42106 // 'element' 'at'
       || this.tokenSequence() == 42119 // 'false' 'at'
       || this.tokenSequence() == 42171 // 'namespace' 'at'
       || this.tokenSequence() == 42181 // 'null' 'at'
       || this.tokenSequence() == 42204 // 'processing-instruction' 'at'
       || this.tokenSequence() == 42239 // 'true' 'at'
       || this.tokenSequence() == 43603 // 'attribute' 'before'
       || this.tokenSequence() == 43642 // 'element' 'before'
       || this.tokenSequence() == 43655 // 'false' 'before'
       || this.tokenSequence() == 43707 // 'namespace' 'before'
       || this.tokenSequence() == 43717 // 'null' 'before'
       || this.tokenSequence() == 43740 // 'processing-instruction' 'before'
       || this.tokenSequence() == 43775 // 'true' 'before'
       || this.tokenSequence() == 45191 // 'false' 'by'
       || this.tokenSequence() == 45253 // 'null' 'by'
       || this.tokenSequence() == 45311 // 'true' 'by'
       || this.tokenSequence() == 45651 // 'attribute' 'case'
       || this.tokenSequence() == 45690 // 'element' 'case'
       || this.tokenSequence() == 45703 // 'false' 'case'
       || this.tokenSequence() == 45755 // 'namespace' 'case'
       || this.tokenSequence() == 45765 // 'null' 'case'
       || this.tokenSequence() == 45788 // 'processing-instruction' 'case'
       || this.tokenSequence() == 45823 // 'true' 'case'
       || this.tokenSequence() == 46163 // 'attribute' 'cast'
       || this.tokenSequence() == 46202 // 'element' 'cast'
       || this.tokenSequence() == 46215 // 'false' 'cast'
       || this.tokenSequence() == 46267 // 'namespace' 'cast'
       || this.tokenSequence() == 46277 // 'null' 'cast'
       || this.tokenSequence() == 46300 // 'processing-instruction' 'cast'
       || this.tokenSequence() == 46335 // 'true' 'cast'
       || this.tokenSequence() == 46675 // 'attribute' 'castable'
       || this.tokenSequence() == 46714 // 'element' 'castable'
       || this.tokenSequence() == 46727 // 'false' 'castable'
       || this.tokenSequence() == 46779 // 'namespace' 'castable'
       || this.tokenSequence() == 46789 // 'null' 'castable'
       || this.tokenSequence() == 46812 // 'processing-instruction' 'castable'
       || this.tokenSequence() == 46847 // 'true' 'castable'
       || this.tokenSequence() == 48723 // 'attribute' 'collation'
       || this.tokenSequence() == 48762 // 'element' 'collation'
       || this.tokenSequence() == 48775 // 'false' 'collation'
       || this.tokenSequence() == 48827 // 'namespace' 'collation'
       || this.tokenSequence() == 48837 // 'null' 'collation'
       || this.tokenSequence() == 48860 // 'processing-instruction' 'collation'
       || this.tokenSequence() == 48895 // 'true' 'collation'
       || this.tokenSequence() == 51335 // 'false' 'contains'
       || this.tokenSequence() == 51397 // 'null' 'contains'
       || this.tokenSequence() == 51455 // 'true' 'contains'
       || this.tokenSequence() == 54355 // 'attribute' 'count'
       || this.tokenSequence() == 54394 // 'element' 'count'
       || this.tokenSequence() == 54407 // 'false' 'count'
       || this.tokenSequence() == 54459 // 'namespace' 'count'
       || this.tokenSequence() == 54469 // 'null' 'count'
       || this.tokenSequence() == 54492 // 'processing-instruction' 'count'
       || this.tokenSequence() == 54527 // 'true' 'count'
       || this.tokenSequence() == 56403 // 'attribute' 'default'
       || this.tokenSequence() == 56442 // 'element' 'default'
       || this.tokenSequence() == 56455 // 'false' 'default'
       || this.tokenSequence() == 56507 // 'namespace' 'default'
       || this.tokenSequence() == 56517 // 'null' 'default'
       || this.tokenSequence() == 56540 // 'processing-instruction' 'default'
       || this.tokenSequence() == 56575 // 'true' 'default'
       || this.tokenSequence() == 58451 // 'attribute' 'descending'
       || this.tokenSequence() == 58490 // 'element' 'descending'
       || this.tokenSequence() == 58503 // 'false' 'descending'
       || this.tokenSequence() == 58555 // 'namespace' 'descending'
       || this.tokenSequence() == 58565 // 'null' 'descending'
       || this.tokenSequence() == 58588 // 'processing-instruction' 'descending'
       || this.tokenSequence() == 58623 // 'true' 'descending'
       || this.tokenSequence() == 61011 // 'attribute' 'div'
       || this.tokenSequence() == 61050 // 'element' 'div'
       || this.tokenSequence() == 61063 // 'false' 'div'
       || this.tokenSequence() == 61115 // 'namespace' 'div'
       || this.tokenSequence() == 61125 // 'null' 'div'
       || this.tokenSequence() == 61148 // 'processing-instruction' 'div'
       || this.tokenSequence() == 61183 // 'true' 'div'
       || this.tokenSequence() == 63059 // 'attribute' 'else'
       || this.tokenSequence() == 63098 // 'element' 'else'
       || this.tokenSequence() == 63111 // 'false' 'else'
       || this.tokenSequence() == 63163 // 'namespace' 'else'
       || this.tokenSequence() == 63173 // 'null' 'else'
       || this.tokenSequence() == 63196 // 'processing-instruction' 'else'
       || this.tokenSequence() == 63231 // 'true' 'else'
       || this.tokenSequence() == 63571 // 'attribute' 'empty'
       || this.tokenSequence() == 63610 // 'element' 'empty'
       || this.tokenSequence() == 63623 // 'false' 'empty'
       || this.tokenSequence() == 63675 // 'namespace' 'empty'
       || this.tokenSequence() == 63685 // 'null' 'empty'
       || this.tokenSequence() == 63708 // 'processing-instruction' 'empty'
       || this.tokenSequence() == 63743 // 'true' 'empty'
       || this.tokenSequence() == 65107 // 'attribute' 'end'
       || this.tokenSequence() == 65146 // 'element' 'end'
       || this.tokenSequence() == 65159 // 'false' 'end'
       || this.tokenSequence() == 65211 // 'namespace' 'end'
       || this.tokenSequence() == 65221 // 'null' 'end'
       || this.tokenSequence() == 65244 // 'processing-instruction' 'end'
       || this.tokenSequence() == 65279 // 'true' 'end'
       || this.tokenSequence() == 66131 // 'attribute' 'eq'
       || this.tokenSequence() == 66170 // 'element' 'eq'
       || this.tokenSequence() == 66183 // 'false' 'eq'
       || this.tokenSequence() == 66235 // 'namespace' 'eq'
       || this.tokenSequence() == 66245 // 'null' 'eq'
       || this.tokenSequence() == 66268 // 'processing-instruction' 'eq'
       || this.tokenSequence() == 66303 // 'true' 'eq'
       || this.tokenSequence() == 67667 // 'attribute' 'except'
       || this.tokenSequence() == 67706 // 'element' 'except'
       || this.tokenSequence() == 67719 // 'false' 'except'
       || this.tokenSequence() == 67771 // 'namespace' 'except'
       || this.tokenSequence() == 67781 // 'null' 'except'
       || this.tokenSequence() == 67804 // 'processing-instruction' 'except'
       || this.tokenSequence() == 67839 // 'true' 'except'
       || this.tokenSequence() == 71251 // 'attribute' 'for'
       || this.tokenSequence() == 71290 // 'element' 'for'
       || this.tokenSequence() == 71303 // 'false' 'for'
       || this.tokenSequence() == 71355 // 'namespace' 'for'
       || this.tokenSequence() == 71365 // 'null' 'for'
       || this.tokenSequence() == 71388 // 'processing-instruction' 'for'
       || this.tokenSequence() == 71423 // 'true' 'for'
       || this.tokenSequence() == 75859 // 'attribute' 'ge'
       || this.tokenSequence() == 75898 // 'element' 'ge'
       || this.tokenSequence() == 75911 // 'false' 'ge'
       || this.tokenSequence() == 75963 // 'namespace' 'ge'
       || this.tokenSequence() == 75973 // 'null' 'ge'
       || this.tokenSequence() == 75996 // 'processing-instruction' 'ge'
       || this.tokenSequence() == 76031 // 'true' 'ge'
       || this.tokenSequence() == 76883 // 'attribute' 'group'
       || this.tokenSequence() == 76922 // 'element' 'group'
       || this.tokenSequence() == 76935 // 'false' 'group'
       || this.tokenSequence() == 76987 // 'namespace' 'group'
       || this.tokenSequence() == 76997 // 'null' 'group'
       || this.tokenSequence() == 77020 // 'processing-instruction' 'group'
       || this.tokenSequence() == 77055 // 'true' 'group'
       || this.tokenSequence() == 77907 // 'attribute' 'gt'
       || this.tokenSequence() == 77946 // 'element' 'gt'
       || this.tokenSequence() == 77959 // 'false' 'gt'
       || this.tokenSequence() == 78011 // 'namespace' 'gt'
       || this.tokenSequence() == 78021 // 'null' 'gt'
       || this.tokenSequence() == 78044 // 'processing-instruction' 'gt'
       || this.tokenSequence() == 78079 // 'true' 'gt'
       || this.tokenSequence() == 78419 // 'attribute' 'idiv'
       || this.tokenSequence() == 78458 // 'element' 'idiv'
       || this.tokenSequence() == 78471 // 'false' 'idiv'
       || this.tokenSequence() == 78523 // 'namespace' 'idiv'
       || this.tokenSequence() == 78533 // 'null' 'idiv'
       || this.tokenSequence() == 78556 // 'processing-instruction' 'idiv'
       || this.tokenSequence() == 78591 // 'true' 'idiv'
       || this.tokenSequence() == 83027 // 'attribute' 'instance'
       || this.tokenSequence() == 83066 // 'element' 'instance'
       || this.tokenSequence() == 83079 // 'false' 'instance'
       || this.tokenSequence() == 83131 // 'namespace' 'instance'
       || this.tokenSequence() == 83141 // 'null' 'instance'
       || this.tokenSequence() == 83164 // 'processing-instruction' 'instance'
       || this.tokenSequence() == 83199 // 'true' 'instance'
       || this.tokenSequence() == 84051 // 'attribute' 'intersect'
       || this.tokenSequence() == 84090 // 'element' 'intersect'
       || this.tokenSequence() == 84103 // 'false' 'intersect'
       || this.tokenSequence() == 84155 // 'namespace' 'intersect'
       || this.tokenSequence() == 84165 // 'null' 'intersect'
       || this.tokenSequence() == 84188 // 'processing-instruction' 'intersect'
       || this.tokenSequence() == 84223 // 'true' 'intersect'
       || this.tokenSequence() == 84563 // 'attribute' 'into'
       || this.tokenSequence() == 84602 // 'element' 'into'
       || this.tokenSequence() == 84615 // 'false' 'into'
       || this.tokenSequence() == 84667 // 'namespace' 'into'
       || this.tokenSequence() == 84677 // 'null' 'into'
       || this.tokenSequence() == 84700 // 'processing-instruction' 'into'
       || this.tokenSequence() == 84735 // 'true' 'into'
       || this.tokenSequence() == 85075 // 'attribute' 'is'
       || this.tokenSequence() == 85114 // 'element' 'is'
       || this.tokenSequence() == 85127 // 'false' 'is'
       || this.tokenSequence() == 85179 // 'namespace' 'is'
       || this.tokenSequence() == 85189 // 'null' 'is'
       || this.tokenSequence() == 85212 // 'processing-instruction' 'is'
       || this.tokenSequence() == 85247 // 'true' 'is'
       || this.tokenSequence() == 89683 // 'attribute' 'le'
       || this.tokenSequence() == 89722 // 'element' 'le'
       || this.tokenSequence() == 89735 // 'false' 'le'
       || this.tokenSequence() == 89787 // 'namespace' 'le'
       || this.tokenSequence() == 89797 // 'null' 'le'
       || this.tokenSequence() == 89820 // 'processing-instruction' 'le'
       || this.tokenSequence() == 89855 // 'true' 'le'
       || this.tokenSequence() == 90707 // 'attribute' 'let'
       || this.tokenSequence() == 90746 // 'element' 'let'
       || this.tokenSequence() == 90759 // 'false' 'let'
       || this.tokenSequence() == 90811 // 'namespace' 'let'
       || this.tokenSequence() == 90821 // 'null' 'let'
       || this.tokenSequence() == 90844 // 'processing-instruction' 'let'
       || this.tokenSequence() == 90879 // 'true' 'let'
       || this.tokenSequence() == 92755 // 'attribute' 'lt'
       || this.tokenSequence() == 92794 // 'element' 'lt'
       || this.tokenSequence() == 92807 // 'false' 'lt'
       || this.tokenSequence() == 92859 // 'namespace' 'lt'
       || this.tokenSequence() == 92869 // 'null' 'lt'
       || this.tokenSequence() == 92892 // 'processing-instruction' 'lt'
       || this.tokenSequence() == 92927 // 'true' 'lt'
       || this.tokenSequence() == 93779 // 'attribute' 'mod'
       || this.tokenSequence() == 93818 // 'element' 'mod'
       || this.tokenSequence() == 93831 // 'false' 'mod'
       || this.tokenSequence() == 93883 // 'namespace' 'mod'
       || this.tokenSequence() == 93893 // 'null' 'mod'
       || this.tokenSequence() == 93916 // 'processing-instruction' 'mod'
       || this.tokenSequence() == 93951 // 'true' 'mod'
       || this.tokenSequence() == 94291 // 'attribute' 'modify'
       || this.tokenSequence() == 94330 // 'element' 'modify'
       || this.tokenSequence() == 94343 // 'false' 'modify'
       || this.tokenSequence() == 94395 // 'namespace' 'modify'
       || this.tokenSequence() == 94405 // 'null' 'modify'
       || this.tokenSequence() == 94428 // 'processing-instruction' 'modify'
       || this.tokenSequence() == 94463 // 'true' 'modify'
       || this.tokenSequence() == 96851 // 'attribute' 'ne'
       || this.tokenSequence() == 96890 // 'element' 'ne'
       || this.tokenSequence() == 96903 // 'false' 'ne'
       || this.tokenSequence() == 96955 // 'namespace' 'ne'
       || this.tokenSequence() == 96965 // 'null' 'ne'
       || this.tokenSequence() == 96988 // 'processing-instruction' 'ne'
       || this.tokenSequence() == 97023 // 'true' 'ne'
       || this.tokenSequence() == 103507  // 'attribute' 'only'
       || this.tokenSequence() == 103546  // 'element' 'only'
       || this.tokenSequence() == 103559  // 'false' 'only'
       || this.tokenSequence() == 103611  // 'namespace' 'only'
       || this.tokenSequence() == 103621  // 'null' 'only'
       || this.tokenSequence() == 103644  // 'processing-instruction' 'only'
       || this.tokenSequence() == 103679  // 'true' 'only'
       || this.tokenSequence() == 104531  // 'attribute' 'or'
       || this.tokenSequence() == 104570  // 'element' 'or'
       || this.tokenSequence() == 104583  // 'false' 'or'
       || this.tokenSequence() == 104635  // 'namespace' 'or'
       || this.tokenSequence() == 104645  // 'null' 'or'
       || this.tokenSequence() == 104668  // 'processing-instruction' 'or'
       || this.tokenSequence() == 104703  // 'true' 'or'
       || this.tokenSequence() == 105043  // 'attribute' 'order'
       || this.tokenSequence() == 105082  // 'element' 'order'
       || this.tokenSequence() == 105095  // 'false' 'order'
       || this.tokenSequence() == 105147  // 'namespace' 'order'
       || this.tokenSequence() == 105157  // 'null' 'order'
       || this.tokenSequence() == 105180  // 'processing-instruction' 'order'
       || this.tokenSequence() == 105215  // 'true' 'order'
       || this.tokenSequence() == 107143  // 'false' 'paragraphs'
       || this.tokenSequence() == 107205  // 'null' 'paragraphs'
       || this.tokenSequence() == 107263  // 'true' 'paragraphs'
       || this.tokenSequence() == 114771  // 'attribute' 'return'
       || this.tokenSequence() == 114810  // 'element' 'return'
       || this.tokenSequence() == 114823  // 'false' 'return'
       || this.tokenSequence() == 114875  // 'namespace' 'return'
       || this.tokenSequence() == 114885  // 'null' 'return'
       || this.tokenSequence() == 114908  // 'processing-instruction' 'return'
       || this.tokenSequence() == 114943  // 'true' 'return'
       || this.tokenSequence() == 116819  // 'attribute' 'satisfies'
       || this.tokenSequence() == 116858  // 'element' 'satisfies'
       || this.tokenSequence() == 116871  // 'false' 'satisfies'
       || this.tokenSequence() == 116923  // 'namespace' 'satisfies'
       || this.tokenSequence() == 116933  // 'null' 'satisfies'
       || this.tokenSequence() == 116956  // 'processing-instruction' 'satisfies'
       || this.tokenSequence() == 116991  // 'true' 'satisfies'
       || this.tokenSequence() == 121479  // 'false' 'sentences'
       || this.tokenSequence() == 121541  // 'null' 'sentences'
       || this.tokenSequence() == 121599  // 'true' 'sentences'
       || this.tokenSequence() == 123475  // 'attribute' 'stable'
       || this.tokenSequence() == 123514  // 'element' 'stable'
       || this.tokenSequence() == 123527  // 'false' 'stable'
       || this.tokenSequence() == 123579  // 'namespace' 'stable'
       || this.tokenSequence() == 123589  // 'null' 'stable'
       || this.tokenSequence() == 123612  // 'processing-instruction' 'stable'
       || this.tokenSequence() == 123647  // 'true' 'stable'
       || this.tokenSequence() == 123987  // 'attribute' 'start'
       || this.tokenSequence() == 124026  // 'element' 'start'
       || this.tokenSequence() == 124039  // 'false' 'start'
       || this.tokenSequence() == 124091  // 'namespace' 'start'
       || this.tokenSequence() == 124101  // 'null' 'start'
       || this.tokenSequence() == 124124  // 'processing-instruction' 'start'
       || this.tokenSequence() == 124159  // 'true' 'start'
       || this.tokenSequence() == 129159  // 'false' 'times'
       || this.tokenSequence() == 129221  // 'null' 'times'
       || this.tokenSequence() == 129279  // 'true' 'times'
       || this.tokenSequence() == 129619  // 'attribute' 'to'
       || this.tokenSequence() == 129658  // 'element' 'to'
       || this.tokenSequence() == 129671  // 'false' 'to'
       || this.tokenSequence() == 129723  // 'namespace' 'to'
       || this.tokenSequence() == 129733  // 'null' 'to'
       || this.tokenSequence() == 129756  // 'processing-instruction' 'to'
       || this.tokenSequence() == 129791  // 'true' 'to'
       || this.tokenSequence() == 130131  // 'attribute' 'treat'
       || this.tokenSequence() == 130170  // 'element' 'treat'
       || this.tokenSequence() == 130183  // 'false' 'treat'
       || this.tokenSequence() == 130235  // 'namespace' 'treat'
       || this.tokenSequence() == 130245  // 'null' 'treat'
       || this.tokenSequence() == 130268  // 'processing-instruction' 'treat'
       || this.tokenSequence() == 130303  // 'true' 'treat'
       || this.tokenSequence() == 133203  // 'attribute' 'union'
       || this.tokenSequence() == 133242  // 'element' 'union'
       || this.tokenSequence() == 133255  // 'false' 'union'
       || this.tokenSequence() == 133307  // 'namespace' 'union'
       || this.tokenSequence() == 133317  // 'null' 'union'
       || this.tokenSequence() == 133340  // 'processing-instruction' 'union'
       || this.tokenSequence() == 133375  // 'true' 'union'
       || this.tokenSequence() == 139347  // 'attribute' 'where'
       || this.tokenSequence() == 139386  // 'element' 'where'
       || this.tokenSequence() == 139399  // 'false' 'where'
       || this.tokenSequence() == 139451  // 'namespace' 'where'
       || this.tokenSequence() == 139461  // 'null' 'where'
       || this.tokenSequence() == 139484  // 'processing-instruction' 'where'
       || this.tokenSequence() == 139519  // 'true' 'where'
       || this.tokenSequence() == 141395  // 'attribute' 'with'
       || this.tokenSequence() == 141434  // 'element' 'with'
       || this.tokenSequence() == 141447  // 'false' 'with'
       || this.tokenSequence() == 141499  // 'namespace' 'with'
       || this.tokenSequence() == 141509  // 'null' 'with'
       || this.tokenSequence() == 141532  // 'processing-instruction' 'with'
       || this.tokenSequence() == 141567  // 'true' 'with'
       || this.tokenSequence() == 142983  // 'false' 'words'
       || this.tokenSequence() == 143045  // 'null' 'words'
       || this.tokenSequence() == 143103  // 'true' 'words'
       || this.tokenSequence() == 145543  // 'false' '|'
       || this.tokenSequence() == 145605  // 'null' '|'
       || this.tokenSequence() == 145663  // 'true' '|'
       || this.tokenSequence() == 146055  // 'false' '||'
       || this.tokenSequence() == 146117  // 'null' '||'
       || this.tokenSequence() == 146175  // 'true' '||'
       || this.tokenSequence() == 146567  // 'false' '|}'
       || this.tokenSequence() == 146629  // 'null' '|}'
       || this.tokenSequence() == 146687  // 'true' '|}'
       || this.tokenSequence() == 147079  // 'false' '}'
       || this.tokenSequence() == 147141  // 'null' '}'
       || this.tokenSequence() == 147199) // 'true' '}'
      {
        this.lk = this.memoized(4, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_PostfixExpr();
            this.memoize(4, e0A, -1);
            this.lk = -3;
          }
          catch (p1A)
          {
            this.lk = -2;
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(4, e0A, -2);
          }
        }
      }
      switch (this.tokenSequence())
      {
      case -1:
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 31:                      // '$'
      case 32:                      // '$$'
      case 33:                      // '%'
      case 35:                      // '('
      case 55:                      // '<'
      case 56:                      // '<!--'
      case 60:                      // '<?'
      case 69:                      // '['
      case 281:                     // '{'
      case 283:                     // '{|'
      case 3155:                    // 'attribute' EQName^Token
      case 3194:                    // 'element' EQName^Token
      case 9915:                    // 'namespace' NCName^Token
      case 9948:                    // 'processing-instruction' NCName^Token
      case 14854:                   // EQName^Token '#'
      case 14919:                   // 'after' '#'
      case 14921:                   // 'allowing' '#'
      case 14922:                   // 'ancestor' '#'
      case 14923:                   // 'ancestor-or-self' '#'
      case 14924:                   // 'and' '#'
      case 14926:                   // 'append' '#'
      case 14927:                   // 'array' '#'
      case 14928:                   // 'as' '#'
      case 14929:                   // 'ascending' '#'
      case 14930:                   // 'at' '#'
      case 14931:                   // 'attribute' '#'
      case 14932:                   // 'base-uri' '#'
      case 14933:                   // 'before' '#'
      case 14934:                   // 'boundary-space' '#'
      case 14935:                   // 'break' '#'
      case 14937:                   // 'case' '#'
      case 14938:                   // 'cast' '#'
      case 14939:                   // 'castable' '#'
      case 14940:                   // 'catch' '#'
      case 14942:                   // 'child' '#'
      case 14943:                   // 'collation' '#'
      case 14945:                   // 'comment' '#'
      case 14946:                   // 'constraint' '#'
      case 14947:                   // 'construction' '#'
      case 14950:                   // 'context' '#'
      case 14951:                   // 'continue' '#'
      case 14952:                   // 'copy' '#'
      case 14953:                   // 'copy-namespaces' '#'
      case 14954:                   // 'count' '#'
      case 14955:                   // 'decimal-format' '#'
      case 14957:                   // 'declare' '#'
      case 14958:                   // 'default' '#'
      case 14959:                   // 'delete' '#'
      case 14960:                   // 'descendant' '#'
      case 14961:                   // 'descendant-or-self' '#'
      case 14962:                   // 'descending' '#'
      case 14967:                   // 'div' '#'
      case 14968:                   // 'document' '#'
      case 14969:                   // 'document-node' '#'
      case 14970:                   // 'element' '#'
      case 14971:                   // 'else' '#'
      case 14972:                   // 'empty' '#'
      case 14973:                   // 'empty-sequence' '#'
      case 14974:                   // 'encoding' '#'
      case 14975:                   // 'end' '#'
      case 14977:                   // 'eq' '#'
      case 14978:                   // 'every' '#'
      case 14980:                   // 'except' '#'
      case 14981:                   // 'exit' '#'
      case 14982:                   // 'external' '#'
      case 14983:                   // 'false' '#'
      case 14984:                   // 'first' '#'
      case 14985:                   // 'following' '#'
      case 14986:                   // 'following-sibling' '#'
      case 14987:                   // 'for' '#'
      case 14990:                   // 'from' '#'
      case 14991:                   // 'ft-option' '#'
      case 14995:                   // 'function' '#'
      case 14996:                   // 'ge' '#'
      case 14998:                   // 'group' '#'
      case 15000:                   // 'gt' '#'
      case 15001:                   // 'idiv' '#'
      case 15002:                   // 'if' '#'
      case 15003:                   // 'import' '#'
      case 15004:                   // 'in' '#'
      case 15005:                   // 'index' '#'
      case 15009:                   // 'insert' '#'
      case 15010:                   // 'instance' '#'
      case 15011:                   // 'integrity' '#'
      case 15012:                   // 'intersect' '#'
      case 15013:                   // 'into' '#'
      case 15014:                   // 'is' '#'
      case 15015:                   // 'item' '#'
      case 15016:                   // 'json' '#'
      case 15017:                   // 'json-item' '#'
      case 15018:                   // 'jsoniq' '#'
      case 15021:                   // 'last' '#'
      case 15022:                   // 'lax' '#'
      case 15023:                   // 'le' '#'
      case 15025:                   // 'let' '#'
      case 15027:                   // 'loop' '#'
      case 15029:                   // 'lt' '#'
      case 15031:                   // 'mod' '#'
      case 15032:                   // 'modify' '#'
      case 15033:                   // 'module' '#'
      case 15035:                   // 'namespace' '#'
      case 15036:                   // 'namespace-node' '#'
      case 15037:                   // 'ne' '#'
      case 15042:                   // 'node' '#'
      case 15043:                   // 'nodes' '#'
      case 15045:                   // 'null' '#'
      case 15046:                   // 'object' '#'
      case 15050:                   // 'only' '#'
      case 15051:                   // 'option' '#'
      case 15052:                   // 'or' '#'
      case 15053:                   // 'order' '#'
      case 15054:                   // 'ordered' '#'
      case 15055:                   // 'ordering' '#'
      case 15058:                   // 'parent' '#'
      case 15064:                   // 'preceding' '#'
      case 15065:                   // 'preceding-sibling' '#'
      case 15068:                   // 'processing-instruction' '#'
      case 15070:                   // 'rename' '#'
      case 15071:                   // 'replace' '#'
      case 15072:                   // 'return' '#'
      case 15073:                   // 'returning' '#'
      case 15074:                   // 'revalidation' '#'
      case 15076:                   // 'satisfies' '#'
      case 15077:                   // 'schema' '#'
      case 15078:                   // 'schema-attribute' '#'
      case 15079:                   // 'schema-element' '#'
      case 15080:                   // 'score' '#'
      case 15081:                   // 'select' '#'
      case 15082:                   // 'self' '#'
      case 15087:                   // 'sliding' '#'
      case 15088:                   // 'some' '#'
      case 15089:                   // 'stable' '#'
      case 15090:                   // 'start' '#'
      case 15093:                   // 'strict' '#'
      case 15095:                   // 'structured-item' '#'
      case 15096:                   // 'switch' '#'
      case 15097:                   // 'text' '#'
      case 15101:                   // 'to' '#'
      case 15102:                   // 'treat' '#'
      case 15103:                   // 'true' '#'
      case 15104:                   // 'try' '#'
      case 15105:                   // 'tumbling' '#'
      case 15106:                   // 'type' '#'
      case 15107:                   // 'typeswitch' '#'
      case 15108:                   // 'union' '#'
      case 15110:                   // 'unordered' '#'
      case 15111:                   // 'updating' '#'
      case 15114:                   // 'validate' '#'
      case 15115:                   // 'value' '#'
      case 15116:                   // 'variable' '#'
      case 15117:                   // 'version' '#'
      case 15120:                   // 'where' '#'
      case 15121:                   // 'while' '#'
      case 15124:                   // 'with' '#'
      case 17926:                   // EQName^Token '('
      case 17991:                   // 'after' '('
      case 17993:                   // 'allowing' '('
      case 17994:                   // 'ancestor' '('
      case 17995:                   // 'ancestor-or-self' '('
      case 17996:                   // 'and' '('
      case 17998:                   // 'append' '('
      case 18000:                   // 'as' '('
      case 18001:                   // 'ascending' '('
      case 18002:                   // 'at' '('
      case 18004:                   // 'base-uri' '('
      case 18005:                   // 'before' '('
      case 18006:                   // 'boundary-space' '('
      case 18007:                   // 'break' '('
      case 18009:                   // 'case' '('
      case 18010:                   // 'cast' '('
      case 18011:                   // 'castable' '('
      case 18012:                   // 'catch' '('
      case 18014:                   // 'child' '('
      case 18015:                   // 'collation' '('
      case 18018:                   // 'constraint' '('
      case 18019:                   // 'construction' '('
      case 18022:                   // 'context' '('
      case 18023:                   // 'continue' '('
      case 18024:                   // 'copy' '('
      case 18025:                   // 'copy-namespaces' '('
      case 18026:                   // 'count' '('
      case 18027:                   // 'decimal-format' '('
      case 18029:                   // 'declare' '('
      case 18030:                   // 'default' '('
      case 18031:                   // 'delete' '('
      case 18032:                   // 'descendant' '('
      case 18033:                   // 'descendant-or-self' '('
      case 18034:                   // 'descending' '('
      case 18039:                   // 'div' '('
      case 18040:                   // 'document' '('
      case 18043:                   // 'else' '('
      case 18044:                   // 'empty' '('
      case 18046:                   // 'encoding' '('
      case 18047:                   // 'end' '('
      case 18049:                   // 'eq' '('
      case 18050:                   // 'every' '('
      case 18052:                   // 'except' '('
      case 18053:                   // 'exit' '('
      case 18054:                   // 'external' '('
      case 18055:                   // 'false' '('
      case 18056:                   // 'first' '('
      case 18057:                   // 'following' '('
      case 18058:                   // 'following-sibling' '('
      case 18059:                   // 'for' '('
      case 18062:                   // 'from' '('
      case 18063:                   // 'ft-option' '('
      case 18067:                   // 'function' '('
      case 18068:                   // 'ge' '('
      case 18070:                   // 'group' '('
      case 18072:                   // 'gt' '('
      case 18073:                   // 'idiv' '('
      case 18075:                   // 'import' '('
      case 18076:                   // 'in' '('
      case 18077:                   // 'index' '('
      case 18081:                   // 'insert' '('
      case 18082:                   // 'instance' '('
      case 18083:                   // 'integrity' '('
      case 18084:                   // 'intersect' '('
      case 18085:                   // 'into' '('
      case 18086:                   // 'is' '('
      case 18088:                   // 'json' '('
      case 18090:                   // 'jsoniq' '('
      case 18093:                   // 'last' '('
      case 18094:                   // 'lax' '('
      case 18095:                   // 'le' '('
      case 18097:                   // 'let' '('
      case 18099:                   // 'loop' '('
      case 18101:                   // 'lt' '('
      case 18103:                   // 'mod' '('
      case 18104:                   // 'modify' '('
      case 18105:                   // 'module' '('
      case 18107:                   // 'namespace' '('
      case 18109:                   // 'ne' '('
      case 18115:                   // 'nodes' '('
      case 18117:                   // 'null' '('
      case 18118:                   // 'object' '('
      case 18122:                   // 'only' '('
      case 18123:                   // 'option' '('
      case 18124:                   // 'or' '('
      case 18125:                   // 'order' '('
      case 18126:                   // 'ordered' '('
      case 18127:                   // 'ordering' '('
      case 18130:                   // 'parent' '('
      case 18136:                   // 'preceding' '('
      case 18137:                   // 'preceding-sibling' '('
      case 18142:                   // 'rename' '('
      case 18143:                   // 'replace' '('
      case 18144:                   // 'return' '('
      case 18145:                   // 'returning' '('
      case 18146:                   // 'revalidation' '('
      case 18148:                   // 'satisfies' '('
      case 18149:                   // 'schema' '('
      case 18152:                   // 'score' '('
      case 18153:                   // 'select' '('
      case 18154:                   // 'self' '('
      case 18159:                   // 'sliding' '('
      case 18160:                   // 'some' '('
      case 18161:                   // 'stable' '('
      case 18162:                   // 'start' '('
      case 18165:                   // 'strict' '('
      case 18173:                   // 'to' '('
      case 18174:                   // 'treat' '('
      case 18175:                   // 'true' '('
      case 18176:                   // 'try' '('
      case 18177:                   // 'tumbling' '('
      case 18178:                   // 'type' '('
      case 18180:                   // 'union' '('
      case 18182:                   // 'unordered' '('
      case 18183:                   // 'updating' '('
      case 18186:                   // 'validate' '('
      case 18187:                   // 'value' '('
      case 18188:                   // 'variable' '('
      case 18189:                   // 'version' '('
      case 18192:                   // 'where' '('
      case 18193:                   // 'while' '('
      case 18196:                   // 'with' '('
      case 23175:                   // 'false' '.'
      case 23237:                   // 'null' '.'
      case 23295:                   // 'true' '.'
      case 37459:                   // 'attribute' 'allowing'
      case 37498:                   // 'element' 'allowing'
      case 37563:                   // 'namespace' 'allowing'
      case 37596:                   // 'processing-instruction' 'allowing'
      case 37971:                   // 'attribute' 'ancestor'
      case 38010:                   // 'element' 'ancestor'
      case 38075:                   // 'namespace' 'ancestor'
      case 38108:                   // 'processing-instruction' 'ancestor'
      case 38483:                   // 'attribute' 'ancestor-or-self'
      case 38522:                   // 'element' 'ancestor-or-self'
      case 38587:                   // 'namespace' 'ancestor-or-self'
      case 38620:                   // 'processing-instruction' 'ancestor-or-self'
      case 40019:                   // 'attribute' 'append'
      case 40058:                   // 'element' 'append'
      case 40123:                   // 'namespace' 'append'
      case 40156:                   // 'processing-instruction' 'append'
      case 40531:                   // 'attribute' 'array'
      case 40570:                   // 'element' 'array'
      case 42579:                   // 'attribute' 'attribute'
      case 42618:                   // 'element' 'attribute'
      case 42683:                   // 'namespace' 'attribute'
      case 42716:                   // 'processing-instruction' 'attribute'
      case 43091:                   // 'attribute' 'base-uri'
      case 43130:                   // 'element' 'base-uri'
      case 43195:                   // 'namespace' 'base-uri'
      case 43228:                   // 'processing-instruction' 'base-uri'
      case 44115:                   // 'attribute' 'boundary-space'
      case 44154:                   // 'element' 'boundary-space'
      case 44219:                   // 'namespace' 'boundary-space'
      case 44252:                   // 'processing-instruction' 'boundary-space'
      case 44627:                   // 'attribute' 'break'
      case 44666:                   // 'element' 'break'
      case 44731:                   // 'namespace' 'break'
      case 44764:                   // 'processing-instruction' 'break'
      case 47187:                   // 'attribute' 'catch'
      case 47226:                   // 'element' 'catch'
      case 47291:                   // 'namespace' 'catch'
      case 47324:                   // 'processing-instruction' 'catch'
      case 48211:                   // 'attribute' 'child'
      case 48250:                   // 'element' 'child'
      case 48315:                   // 'namespace' 'child'
      case 48348:                   // 'processing-instruction' 'child'
      case 49747:                   // 'attribute' 'comment'
      case 49786:                   // 'element' 'comment'
      case 49851:                   // 'namespace' 'comment'
      case 49884:                   // 'processing-instruction' 'comment'
      case 50259:                   // 'attribute' 'constraint'
      case 50298:                   // 'element' 'constraint'
      case 50363:                   // 'namespace' 'constraint'
      case 50396:                   // 'processing-instruction' 'constraint'
      case 50771:                   // 'attribute' 'construction'
      case 50810:                   // 'element' 'construction'
      case 50875:                   // 'namespace' 'construction'
      case 50908:                   // 'processing-instruction' 'construction'
      case 52307:                   // 'attribute' 'context'
      case 52346:                   // 'element' 'context'
      case 52411:                   // 'namespace' 'context'
      case 52444:                   // 'processing-instruction' 'context'
      case 52819:                   // 'attribute' 'continue'
      case 52858:                   // 'element' 'continue'
      case 52923:                   // 'namespace' 'continue'
      case 52956:                   // 'processing-instruction' 'continue'
      case 53331:                   // 'attribute' 'copy'
      case 53370:                   // 'element' 'copy'
      case 53435:                   // 'namespace' 'copy'
      case 53468:                   // 'processing-instruction' 'copy'
      case 53843:                   // 'attribute' 'copy-namespaces'
      case 53882:                   // 'element' 'copy-namespaces'
      case 53947:                   // 'namespace' 'copy-namespaces'
      case 53980:                   // 'processing-instruction' 'copy-namespaces'
      case 54867:                   // 'attribute' 'decimal-format'
      case 54906:                   // 'element' 'decimal-format'
      case 54971:                   // 'namespace' 'decimal-format'
      case 55004:                   // 'processing-instruction' 'decimal-format'
      case 55891:                   // 'attribute' 'declare'
      case 55930:                   // 'element' 'declare'
      case 55995:                   // 'namespace' 'declare'
      case 56028:                   // 'processing-instruction' 'declare'
      case 56915:                   // 'attribute' 'delete'
      case 56954:                   // 'element' 'delete'
      case 57019:                   // 'namespace' 'delete'
      case 57052:                   // 'processing-instruction' 'delete'
      case 57427:                   // 'attribute' 'descendant'
      case 57466:                   // 'element' 'descendant'
      case 57531:                   // 'namespace' 'descendant'
      case 57564:                   // 'processing-instruction' 'descendant'
      case 57939:                   // 'attribute' 'descendant-or-self'
      case 57978:                   // 'element' 'descendant-or-self'
      case 58043:                   // 'namespace' 'descendant-or-self'
      case 58076:                   // 'processing-instruction' 'descendant-or-self'
      case 61523:                   // 'attribute' 'document'
      case 61562:                   // 'element' 'document'
      case 61627:                   // 'namespace' 'document'
      case 61660:                   // 'processing-instruction' 'document'
      case 62035:                   // 'attribute' 'document-node'
      case 62074:                   // 'element' 'document-node'
      case 62139:                   // 'namespace' 'document-node'
      case 62172:                   // 'processing-instruction' 'document-node'
      case 62547:                   // 'attribute' 'element'
      case 62586:                   // 'element' 'element'
      case 62651:                   // 'namespace' 'element'
      case 62684:                   // 'processing-instruction' 'element'
      case 64083:                   // 'attribute' 'empty-sequence'
      case 64122:                   // 'element' 'empty-sequence'
      case 64187:                   // 'namespace' 'empty-sequence'
      case 64220:                   // 'processing-instruction' 'empty-sequence'
      case 64595:                   // 'attribute' 'encoding'
      case 64634:                   // 'element' 'encoding'
      case 64699:                   // 'namespace' 'encoding'
      case 64732:                   // 'processing-instruction' 'encoding'
      case 66643:                   // 'attribute' 'every'
      case 66682:                   // 'element' 'every'
      case 66747:                   // 'namespace' 'every'
      case 66780:                   // 'processing-instruction' 'every'
      case 68179:                   // 'attribute' 'exit'
      case 68218:                   // 'element' 'exit'
      case 68283:                   // 'namespace' 'exit'
      case 68316:                   // 'processing-instruction' 'exit'
      case 68691:                   // 'attribute' 'external'
      case 68730:                   // 'element' 'external'
      case 68795:                   // 'namespace' 'external'
      case 68828:                   // 'processing-instruction' 'external'
      case 69203:                   // 'attribute' 'false'
      case 69242:                   // 'element' 'false'
      case 69307:                   // 'namespace' 'false'
      case 69340:                   // 'processing-instruction' 'false'
      case 69715:                   // 'attribute' 'first'
      case 69754:                   // 'element' 'first'
      case 69819:                   // 'namespace' 'first'
      case 69852:                   // 'processing-instruction' 'first'
      case 70227:                   // 'attribute' 'following'
      case 70266:                   // 'element' 'following'
      case 70331:                   // 'namespace' 'following'
      case 70364:                   // 'processing-instruction' 'following'
      case 70739:                   // 'attribute' 'following-sibling'
      case 70778:                   // 'element' 'following-sibling'
      case 70843:                   // 'namespace' 'following-sibling'
      case 70876:                   // 'processing-instruction' 'following-sibling'
      case 72787:                   // 'attribute' 'from'
      case 72826:                   // 'element' 'from'
      case 72891:                   // 'namespace' 'from'
      case 72924:                   // 'processing-instruction' 'from'
      case 73299:                   // 'attribute' 'ft-option'
      case 73338:                   // 'element' 'ft-option'
      case 73403:                   // 'namespace' 'ft-option'
      case 73436:                   // 'processing-instruction' 'ft-option'
      case 75347:                   // 'attribute' 'function'
      case 75386:                   // 'element' 'function'
      case 75451:                   // 'namespace' 'function'
      case 75484:                   // 'processing-instruction' 'function'
      case 78931:                   // 'attribute' 'if'
      case 78970:                   // 'element' 'if'
      case 79035:                   // 'namespace' 'if'
      case 79068:                   // 'processing-instruction' 'if'
      case 79443:                   // 'attribute' 'import'
      case 79482:                   // 'element' 'import'
      case 79547:                   // 'namespace' 'import'
      case 79580:                   // 'processing-instruction' 'import'
      case 79955:                   // 'attribute' 'in'
      case 79994:                   // 'element' 'in'
      case 80059:                   // 'namespace' 'in'
      case 80092:                   // 'processing-instruction' 'in'
      case 80467:                   // 'attribute' 'index'
      case 80506:                   // 'element' 'index'
      case 80571:                   // 'namespace' 'index'
      case 80604:                   // 'processing-instruction' 'index'
      case 82515:                   // 'attribute' 'insert'
      case 82554:                   // 'element' 'insert'
      case 82619:                   // 'namespace' 'insert'
      case 82652:                   // 'processing-instruction' 'insert'
      case 83539:                   // 'attribute' 'integrity'
      case 83578:                   // 'element' 'integrity'
      case 83643:                   // 'namespace' 'integrity'
      case 83676:                   // 'processing-instruction' 'integrity'
      case 85587:                   // 'attribute' 'item'
      case 85626:                   // 'element' 'item'
      case 85691:                   // 'namespace' 'item'
      case 85724:                   // 'processing-instruction' 'item'
      case 86099:                   // 'attribute' 'json'
      case 86138:                   // 'element' 'json'
      case 86203:                   // 'namespace' 'json'
      case 86236:                   // 'processing-instruction' 'json'
      case 86611:                   // 'attribute' 'json-item'
      case 86650:                   // 'element' 'json-item'
      case 87123:                   // 'attribute' 'jsoniq'
      case 87162:                   // 'element' 'jsoniq'
      case 87227:                   // 'namespace' 'jsoniq'
      case 87260:                   // 'processing-instruction' 'jsoniq'
      case 88659:                   // 'attribute' 'last'
      case 88698:                   // 'element' 'last'
      case 88763:                   // 'namespace' 'last'
      case 88796:                   // 'processing-instruction' 'last'
      case 89171:                   // 'attribute' 'lax'
      case 89210:                   // 'element' 'lax'
      case 89275:                   // 'namespace' 'lax'
      case 89308:                   // 'processing-instruction' 'lax'
      case 91731:                   // 'attribute' 'loop'
      case 91770:                   // 'element' 'loop'
      case 91835:                   // 'namespace' 'loop'
      case 91868:                   // 'processing-instruction' 'loop'
      case 94803:                   // 'attribute' 'module'
      case 94842:                   // 'element' 'module'
      case 94907:                   // 'namespace' 'module'
      case 94940:                   // 'processing-instruction' 'module'
      case 95827:                   // 'attribute' 'namespace'
      case 95866:                   // 'element' 'namespace'
      case 95931:                   // 'namespace' 'namespace'
      case 95964:                   // 'processing-instruction' 'namespace'
      case 96339:                   // 'attribute' 'namespace-node'
      case 96378:                   // 'element' 'namespace-node'
      case 96443:                   // 'namespace' 'namespace-node'
      case 96476:                   // 'processing-instruction' 'namespace-node'
      case 99411:                   // 'attribute' 'node'
      case 99450:                   // 'element' 'node'
      case 99515:                   // 'namespace' 'node'
      case 99548:                   // 'processing-instruction' 'node'
      case 99923:                   // 'attribute' 'nodes'
      case 99962:                   // 'element' 'nodes'
      case 100027:                  // 'namespace' 'nodes'
      case 100060:                  // 'processing-instruction' 'nodes'
      case 100947:                  // 'attribute' 'null'
      case 100986:                  // 'element' 'null'
      case 101051:                  // 'namespace' 'null'
      case 101084:                  // 'processing-instruction' 'null'
      case 101459:                  // 'attribute' 'object'
      case 101498:                  // 'element' 'object'
      case 101563:                  // 'namespace' 'object'
      case 101596:                  // 'processing-instruction' 'object'
      case 104019:                  // 'attribute' 'option'
      case 104058:                  // 'element' 'option'
      case 104123:                  // 'namespace' 'option'
      case 104156:                  // 'processing-instruction' 'option'
      case 105555:                  // 'attribute' 'ordered'
      case 105594:                  // 'element' 'ordered'
      case 105659:                  // 'namespace' 'ordered'
      case 105692:                  // 'processing-instruction' 'ordered'
      case 106067:                  // 'attribute' 'ordering'
      case 106106:                  // 'element' 'ordering'
      case 106171:                  // 'namespace' 'ordering'
      case 106204:                  // 'processing-instruction' 'ordering'
      case 107603:                  // 'attribute' 'parent'
      case 107642:                  // 'element' 'parent'
      case 107707:                  // 'namespace' 'parent'
      case 107740:                  // 'processing-instruction' 'parent'
      case 110675:                  // 'attribute' 'preceding'
      case 110714:                  // 'element' 'preceding'
      case 110779:                  // 'namespace' 'preceding'
      case 110812:                  // 'processing-instruction' 'preceding'
      case 111187:                  // 'attribute' 'preceding-sibling'
      case 111226:                  // 'element' 'preceding-sibling'
      case 111291:                  // 'namespace' 'preceding-sibling'
      case 111324:                  // 'processing-instruction' 'preceding-sibling'
      case 112723:                  // 'attribute' 'processing-instruction'
      case 112762:                  // 'element' 'processing-instruction'
      case 112827:                  // 'namespace' 'processing-instruction'
      case 112860:                  // 'processing-instruction' 'processing-instruction'
      case 113747:                  // 'attribute' 'rename'
      case 113786:                  // 'element' 'rename'
      case 113851:                  // 'namespace' 'rename'
      case 113884:                  // 'processing-instruction' 'rename'
      case 114259:                  // 'attribute' 'replace'
      case 114298:                  // 'element' 'replace'
      case 114363:                  // 'namespace' 'replace'
      case 114396:                  // 'processing-instruction' 'replace'
      case 115283:                  // 'attribute' 'returning'
      case 115322:                  // 'element' 'returning'
      case 115387:                  // 'namespace' 'returning'
      case 115420:                  // 'processing-instruction' 'returning'
      case 115795:                  // 'attribute' 'revalidation'
      case 115834:                  // 'element' 'revalidation'
      case 115899:                  // 'namespace' 'revalidation'
      case 115932:                  // 'processing-instruction' 'revalidation'
      case 117331:                  // 'attribute' 'schema'
      case 117370:                  // 'element' 'schema'
      case 117435:                  // 'namespace' 'schema'
      case 117468:                  // 'processing-instruction' 'schema'
      case 117843:                  // 'attribute' 'schema-attribute'
      case 117882:                  // 'element' 'schema-attribute'
      case 117947:                  // 'namespace' 'schema-attribute'
      case 117980:                  // 'processing-instruction' 'schema-attribute'
      case 118355:                  // 'attribute' 'schema-element'
      case 118394:                  // 'element' 'schema-element'
      case 118459:                  // 'namespace' 'schema-element'
      case 118492:                  // 'processing-instruction' 'schema-element'
      case 118867:                  // 'attribute' 'score'
      case 118906:                  // 'element' 'score'
      case 118971:                  // 'namespace' 'score'
      case 119004:                  // 'processing-instruction' 'score'
      case 119379:                  // 'attribute' 'select'
      case 119418:                  // 'element' 'select'
      case 119483:                  // 'namespace' 'select'
      case 119516:                  // 'processing-instruction' 'select'
      case 119891:                  // 'attribute' 'self'
      case 119930:                  // 'element' 'self'
      case 119995:                  // 'namespace' 'self'
      case 120028:                  // 'processing-instruction' 'self'
      case 122451:                  // 'attribute' 'sliding'
      case 122490:                  // 'element' 'sliding'
      case 122555:                  // 'namespace' 'sliding'
      case 122588:                  // 'processing-instruction' 'sliding'
      case 122963:                  // 'attribute' 'some'
      case 123002:                  // 'element' 'some'
      case 123067:                  // 'namespace' 'some'
      case 123100:                  // 'processing-instruction' 'some'
      case 125523:                  // 'attribute' 'strict'
      case 125562:                  // 'element' 'strict'
      case 125627:                  // 'namespace' 'strict'
      case 125660:                  // 'processing-instruction' 'strict'
      case 126547:                  // 'attribute' 'structured-item'
      case 126586:                  // 'element' 'structured-item'
      case 127059:                  // 'attribute' 'switch'
      case 127098:                  // 'element' 'switch'
      case 127163:                  // 'namespace' 'switch'
      case 127196:                  // 'processing-instruction' 'switch'
      case 127571:                  // 'attribute' 'text'
      case 127610:                  // 'element' 'text'
      case 127675:                  // 'namespace' 'text'
      case 127708:                  // 'processing-instruction' 'text'
      case 130643:                  // 'attribute' 'true'
      case 130682:                  // 'element' 'true'
      case 130747:                  // 'namespace' 'true'
      case 130780:                  // 'processing-instruction' 'true'
      case 131155:                  // 'attribute' 'try'
      case 131194:                  // 'element' 'try'
      case 131259:                  // 'namespace' 'try'
      case 131292:                  // 'processing-instruction' 'try'
      case 131667:                  // 'attribute' 'tumbling'
      case 131706:                  // 'element' 'tumbling'
      case 131771:                  // 'namespace' 'tumbling'
      case 131804:                  // 'processing-instruction' 'tumbling'
      case 132179:                  // 'attribute' 'type'
      case 132218:                  // 'element' 'type'
      case 132283:                  // 'namespace' 'type'
      case 132316:                  // 'processing-instruction' 'type'
      case 132691:                  // 'attribute' 'typeswitch'
      case 132730:                  // 'element' 'typeswitch'
      case 132795:                  // 'namespace' 'typeswitch'
      case 132828:                  // 'processing-instruction' 'typeswitch'
      case 134227:                  // 'attribute' 'unordered'
      case 134266:                  // 'element' 'unordered'
      case 134331:                  // 'namespace' 'unordered'
      case 134364:                  // 'processing-instruction' 'unordered'
      case 134739:                  // 'attribute' 'updating'
      case 134778:                  // 'element' 'updating'
      case 134843:                  // 'namespace' 'updating'
      case 134876:                  // 'processing-instruction' 'updating'
      case 136275:                  // 'attribute' 'validate'
      case 136314:                  // 'element' 'validate'
      case 136379:                  // 'namespace' 'validate'
      case 136412:                  // 'processing-instruction' 'validate'
      case 136787:                  // 'attribute' 'value'
      case 136826:                  // 'element' 'value'
      case 136891:                  // 'namespace' 'value'
      case 136924:                  // 'processing-instruction' 'value'
      case 137299:                  // 'attribute' 'variable'
      case 137338:                  // 'element' 'variable'
      case 137403:                  // 'namespace' 'variable'
      case 137436:                  // 'processing-instruction' 'variable'
      case 137811:                  // 'attribute' 'version'
      case 137850:                  // 'element' 'version'
      case 137915:                  // 'namespace' 'version'
      case 137948:                  // 'processing-instruction' 'version'
      case 139859:                  // 'attribute' 'while'
      case 139898:                  // 'element' 'while'
      case 139963:                  // 'namespace' 'while'
      case 139996:                  // 'processing-instruction' 'while'
      case 143955:                  // 'attribute' '{'
      case 143969:                  // 'comment' '{'
      case 143992:                  // 'document' '{'
      case 143994:                  // 'element' '{'
      case 144059:                  // 'namespace' '{'
      case 144078:                  // 'ordered' '{'
      case 144092:                  // 'processing-instruction' '{'
      case 144121:                  // 'text' '{'
      case 144134:                  // 'unordered' '{'
        this.try_PostfixExpr();
        break;
      case -3:
        break;
      default:
        this.try_AxisStep();
      }
    }

    private parse_AxisStep()
    {
      this.eventHandler.startNonterminal("AxisStep", this.e0);
      switch (this.token())
      {
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
        this.lookahead2W(232);      // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.tokenSequence())
      {
      case 46:                      // '..'
      case 26698:                   // 'ancestor' '::'
      case 26699:                   // 'ancestor-or-self' '::'
      case 26834:                   // 'parent' '::'
      case 26840:                   // 'preceding' '::'
      case 26841:                   // 'preceding-sibling' '::'
        this.parse_ReverseStep();
        break;
      default:
        this.parse_ForwardStep();
      }
      this.lookahead1W(228);        // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      this.whitespace();
      this.parse_PredicateList();
      this.eventHandler.endNonterminal("AxisStep", this.e0);
    }

    private try_AxisStep()
    {
      switch (this.token())
      {
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
        this.lookahead2W(232);      // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.tokenSequence())
      {
      case 46:                      // '..'
      case 26698:                   // 'ancestor' '::'
      case 26699:                   // 'ancestor-or-self' '::'
      case 26834:                   // 'parent' '::'
      case 26840:                   // 'preceding' '::'
      case 26841:                   // 'preceding-sibling' '::'
        this.try_ReverseStep();
        break;
      default:
        this.try_ForwardStep();
      }
      this.lookahead1W(228);        // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      this.try_PredicateList();
    }

    private parse_ForwardStep()
    {
      this.eventHandler.startNonterminal("ForwardStep", this.e0);
      switch (this.token())
      {
      case 83:                      // 'attribute'
        this.lookahead2W(236);      // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      case 94:                      // 'child'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 234:                     // 'self'
        this.lookahead2W(232);      // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.tokenSequence())
      {
      case 26707:                   // 'attribute' '::'
      case 26718:                   // 'child' '::'
      case 26736:                   // 'descendant' '::'
      case 26737:                   // 'descendant-or-self' '::'
      case 26761:                   // 'following' '::'
      case 26762:                   // 'following-sibling' '::'
      case 26858:                   // 'self' '::'
        this.parse_ForwardAxis();
        this.lookahead1W(249);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_NodeTest();
        break;
      default:
        this.parse_AbbrevForwardStep();
      }
      this.eventHandler.endNonterminal("ForwardStep", this.e0);
    }

    private try_ForwardStep()
    {
      switch (this.token())
      {
      case 83:                      // 'attribute'
        this.lookahead2W(236);      // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      case 94:                      // 'child'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 234:                     // 'self'
        this.lookahead2W(232);      // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.tokenSequence())
      {
      case 26707:                   // 'attribute' '::'
      case 26718:                   // 'child' '::'
      case 26736:                   // 'descendant' '::'
      case 26737:                   // 'descendant-or-self' '::'
      case 26761:                   // 'following' '::'
      case 26762:                   // 'following-sibling' '::'
      case 26858:                   // 'self' '::'
        this.try_ForwardAxis();
        this.lookahead1W(249);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_NodeTest();
        break;
      default:
        this.try_AbbrevForwardStep();
      }
    }

    private parse_ForwardAxis()
    {
      this.eventHandler.startNonterminal("ForwardAxis", this.e0);
      switch (this.token())
      {
      case 94:                      // 'child'
        this.consume(94);           // 'child'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consume(52);           // '::'
        break;
      case 112:                     // 'descendant'
        this.consume(112);          // 'descendant'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consume(52);           // '::'
        break;
      case 83:                      // 'attribute'
        this.consume(83);           // 'attribute'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consume(52);           // '::'
        break;
      case 234:                     // 'self'
        this.consume(234);          // 'self'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consume(52);           // '::'
        break;
      case 113:                     // 'descendant-or-self'
        this.consume(113);          // 'descendant-or-self'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consume(52);           // '::'
        break;
      case 138:                     // 'following-sibling'
        this.consume(138);          // 'following-sibling'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consume(52);           // '::'
        break;
      default:
        this.consume(137);          // 'following'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consume(52);           // '::'
      }
      this.eventHandler.endNonterminal("ForwardAxis", this.e0);
    }

    private try_ForwardAxis()
    {
      switch (this.token())
      {
      case 94:                      // 'child'
        this.consumeT(94);          // 'child'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consumeT(52);          // '::'
        break;
      case 112:                     // 'descendant'
        this.consumeT(112);         // 'descendant'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consumeT(52);          // '::'
        break;
      case 83:                      // 'attribute'
        this.consumeT(83);          // 'attribute'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consumeT(52);          // '::'
        break;
      case 234:                     // 'self'
        this.consumeT(234);         // 'self'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consumeT(52);          // '::'
        break;
      case 113:                     // 'descendant-or-self'
        this.consumeT(113);         // 'descendant-or-self'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consumeT(52);          // '::'
        break;
      case 138:                     // 'following-sibling'
        this.consumeT(138);         // 'following-sibling'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consumeT(52);          // '::'
        break;
      default:
        this.consumeT(137);         // 'following'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consumeT(52);          // '::'
      }
    }

    private parse_AbbrevForwardStep()
    {
      this.eventHandler.startNonterminal("AbbrevForwardStep", this.e0);
      if (this.token() == 67)       // '@'
      {
        this.consume(67);           // '@'
      }
      this.lookahead1W(249);        // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_NodeTest();
      this.eventHandler.endNonterminal("AbbrevForwardStep", this.e0);
    }

    private try_AbbrevForwardStep()
    {
      if (this.token() == 67)       // '@'
      {
        this.consumeT(67);          // '@'
      }
      this.lookahead1W(249);        // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_NodeTest();
    }

    private parse_ReverseStep()
    {
      this.eventHandler.startNonterminal("ReverseStep", this.e0);
      switch (this.token())
      {
      case 46:                      // '..'
        this.parse_AbbrevReverseStep();
        break;
      default:
        this.parse_ReverseAxis();
        this.lookahead1W(249);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_NodeTest();
      }
      this.eventHandler.endNonterminal("ReverseStep", this.e0);
    }

    private try_ReverseStep()
    {
      switch (this.token())
      {
      case 46:                      // '..'
        this.try_AbbrevReverseStep();
        break;
      default:
        this.try_ReverseAxis();
        this.lookahead1W(249);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_NodeTest();
      }
    }

    private parse_ReverseAxis()
    {
      this.eventHandler.startNonterminal("ReverseAxis", this.e0);
      switch (this.token())
      {
      case 210:                     // 'parent'
        this.consume(210);          // 'parent'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consume(52);           // '::'
        break;
      case 74:                      // 'ancestor'
        this.consume(74);           // 'ancestor'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consume(52);           // '::'
        break;
      case 217:                     // 'preceding-sibling'
        this.consume(217);          // 'preceding-sibling'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consume(52);           // '::'
        break;
      case 216:                     // 'preceding'
        this.consume(216);          // 'preceding'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consume(52);           // '::'
        break;
      default:
        this.consume(75);           // 'ancestor-or-self'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consume(52);           // '::'
      }
      this.eventHandler.endNonterminal("ReverseAxis", this.e0);
    }

    private try_ReverseAxis()
    {
      switch (this.token())
      {
      case 210:                     // 'parent'
        this.consumeT(210);         // 'parent'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consumeT(52);          // '::'
        break;
      case 74:                      // 'ancestor'
        this.consumeT(74);          // 'ancestor'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consumeT(52);          // '::'
        break;
      case 217:                     // 'preceding-sibling'
        this.consumeT(217);         // 'preceding-sibling'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consumeT(52);          // '::'
        break;
      case 216:                     // 'preceding'
        this.consumeT(216);         // 'preceding'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consumeT(52);          // '::'
        break;
      default:
        this.consumeT(75);          // 'ancestor-or-self'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.consumeT(52);          // '::'
      }
    }

    private parse_AbbrevReverseStep()
    {
      this.eventHandler.startNonterminal("AbbrevReverseStep", this.e0);
      this.consume(46);             // '..'
      this.eventHandler.endNonterminal("AbbrevReverseStep", this.e0);
    }

    private try_AbbrevReverseStep()
    {
      this.consumeT(46);            // '..'
    }

    private parse_NodeTest()
    {
      this.eventHandler.startNonterminal("NodeTest", this.e0);
      switch (this.token())
      {
      case 83:                      // 'attribute'
      case 97:                      // 'comment'
      case 121:                     // 'document-node'
      case 122:                     // 'element'
      case 188:                     // 'namespace-node'
      case 194:                     // 'node'
      case 220:                     // 'processing-instruction'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
      case 249:                     // 'text'
        this.lookahead2W(231);      // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.tokenSequence())
      {
      case 18003:                   // 'attribute' '('
      case 18017:                   // 'comment' '('
      case 18041:                   // 'document-node' '('
      case 18042:                   // 'element' '('
      case 18108:                   // 'namespace-node' '('
      case 18114:                   // 'node' '('
      case 18140:                   // 'processing-instruction' '('
      case 18150:                   // 'schema-attribute' '('
      case 18151:                   // 'schema-element' '('
      case 18169:                   // 'text' '('
        this.parse_KindTest();
        break;
      default:
        this.parse_NameTest();
      }
      this.eventHandler.endNonterminal("NodeTest", this.e0);
    }

    private try_NodeTest()
    {
      switch (this.token())
      {
      case 83:                      // 'attribute'
      case 97:                      // 'comment'
      case 121:                     // 'document-node'
      case 122:                     // 'element'
      case 188:                     // 'namespace-node'
      case 194:                     // 'node'
      case 220:                     // 'processing-instruction'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
      case 249:                     // 'text'
        this.lookahead2W(231);      // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.tokenSequence())
      {
      case 18003:                   // 'attribute' '('
      case 18017:                   // 'comment' '('
      case 18041:                   // 'document-node' '('
      case 18042:                   // 'element' '('
      case 18108:                   // 'namespace-node' '('
      case 18114:                   // 'node' '('
      case 18140:                   // 'processing-instruction' '('
      case 18150:                   // 'schema-attribute' '('
      case 18151:                   // 'schema-element' '('
      case 18169:                   // 'text' '('
        this.try_KindTest();
        break;
      default:
        this.try_NameTest();
      }
    }

    private parse_NameTest()
    {
      this.eventHandler.startNonterminal("NameTest", this.e0);
      switch (this.token())
      {
      case 5:                       // Wildcard
        this.consume(5);            // Wildcard
        break;
      default:
        this.parse_EQName();
      }
      this.eventHandler.endNonterminal("NameTest", this.e0);
    }

    private try_NameTest()
    {
      switch (this.token())
      {
      case 5:                       // Wildcard
        this.consumeT(5);           // Wildcard
        break;
      default:
        this.try_EQName();
      }
    }

    private parse_PostfixExpr()
    {
      this.eventHandler.startNonterminal("PostfixExpr", this.e0);
      this.parse_PrimaryExpr();
      for (;;)
      {
        this.lookahead1W(235);      // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        if (this.token() != 35      // '('
         && this.token() != 45      // '.'
         && this.token() != 69)     // '['
        {
          break;
        }
        switch (this.token())
        {
        case 69:                    // '['
          this.lookahead2W(273);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.tokenSequence() == 35397)  // '[' '['
        {
          this.lk = this.memoized(5, this.e0);
          if (this.lk == 0)
          {
            var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
            var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
            var b2A = this.b2; var e2A = this.e2;
            try
            {
              this.try_Predicate();
              this.lk = -1;
            }
            catch (p1A)
            {
              this.lk = -4;
            }
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(5, this.e0, this.lk);
          }
        }
        switch (this.tokenSequence())
        {
        case 35:                    // '('
          this.whitespace();
          this.parse_ArgumentList();
          break;
        case 45:                    // '.'
          this.whitespace();
          this.parse_ObjectLookup();
          break;
        case -4:
          this.whitespace();
          this.parse_ArrayLookup();
          break;
        case 35909:                 // '[' ']'
          this.whitespace();
          this.parse_ArrayUnboxing();
          break;
        default:
          this.whitespace();
          this.parse_Predicate();
        }
      }
      this.eventHandler.endNonterminal("PostfixExpr", this.e0);
    }

    private try_PostfixExpr()
    {
      this.try_PrimaryExpr();
      for (;;)
      {
        this.lookahead1W(235);      // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        if (this.token() != 35      // '('
         && this.token() != 45      // '.'
         && this.token() != 69)     // '['
        {
          break;
        }
        switch (this.token())
        {
        case 69:                    // '['
          this.lookahead2W(273);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.tokenSequence() == 35397)  // '[' '['
        {
          this.lk = this.memoized(5, this.e0);
          if (this.lk == 0)
          {
            var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
            var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
            var b2A = this.b2; var e2A = this.e2;
            try
            {
              this.try_Predicate();
              this.memoize(5, e0A, -1);
              this.lk = -6;
            }
            catch (p1A)
            {
              this.lk = -4;
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.memoize(5, e0A, -4);
            }
          }
        }
        switch (this.tokenSequence())
        {
        case 35:                    // '('
          this.try_ArgumentList();
          break;
        case 45:                    // '.'
          this.try_ObjectLookup();
          break;
        case -4:
          this.try_ArrayLookup();
          break;
        case 35909:                 // '[' ']'
          this.try_ArrayUnboxing();
          break;
        case -6:
          break;
        default:
          this.try_Predicate();
        }
      }
    }

    private parse_ObjectLookup()
    {
      this.eventHandler.startNonterminal("ObjectLookup", this.e0);
      this.consume(45);             // '.'
      this.lookahead1W(251);        // StringLiteral | NCName^Token | S^WS | '$' | '$$' | '(' | '(:' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
      switch (this.token())
      {
      case 11:                      // StringLiteral
        this.consume(11);           // StringLiteral
        break;
      case 35:                      // '('
        this.whitespace();
        this.parse_ParenthesizedExpr();
        break;
      case 31:                      // '$'
        this.whitespace();
        this.parse_VarRef();
        break;
      case 32:                      // '$$'
        this.whitespace();
        this.parse_ContextItemExpr();
        break;
      default:
        this.whitespace();
        this.parse_NCName();
      }
      this.eventHandler.endNonterminal("ObjectLookup", this.e0);
    }

    private try_ObjectLookup()
    {
      this.consumeT(45);            // '.'
      this.lookahead1W(251);        // StringLiteral | NCName^Token | S^WS | '$' | '$$' | '(' | '(:' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
      switch (this.token())
      {
      case 11:                      // StringLiteral
        this.consumeT(11);          // StringLiteral
        break;
      case 35:                      // '('
        this.try_ParenthesizedExpr();
        break;
      case 31:                      // '$'
        this.try_VarRef();
        break;
      case 32:                      // '$$'
        this.try_ContextItemExpr();
        break;
      default:
        this.try_NCName();
      }
    }

    private parse_ArrayLookup()
    {
      this.eventHandler.startNonterminal("ArrayLookup", this.e0);
      this.consume(69);             // '['
      this.lookahead1W(31);         // S^WS | '(:' | '['
      this.consume(69);             // '['
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.consume(70);             // ']'
      this.lookahead1W(32);         // S^WS | '(:' | ']'
      this.consume(70);             // ']'
      this.eventHandler.endNonterminal("ArrayLookup", this.e0);
    }

    private try_ArrayLookup()
    {
      this.consumeT(69);            // '['
      this.lookahead1W(31);         // S^WS | '(:' | '['
      this.consumeT(69);            // '['
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.consumeT(70);            // ']'
      this.lookahead1W(32);         // S^WS | '(:' | ']'
      this.consumeT(70);            // ']'
    }

    private parse_ArrayUnboxing()
    {
      this.eventHandler.startNonterminal("ArrayUnboxing", this.e0);
      this.consume(69);             // '['
      this.lookahead1W(32);         // S^WS | '(:' | ']'
      this.consume(70);             // ']'
      this.eventHandler.endNonterminal("ArrayUnboxing", this.e0);
    }

    private try_ArrayUnboxing()
    {
      this.consumeT(69);            // '['
      this.lookahead1W(32);         // S^WS | '(:' | ']'
      this.consumeT(70);            // ']'
    }

    private parse_ArgumentList()
    {
      this.eventHandler.startNonterminal("ArgumentList", this.e0);
      this.consume(35);             // '('
      this.lookahead1W(280);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      if (this.token() != 38)       // ')'
      {
        this.whitespace();
        this.parse_Argument();
        for (;;)
        {
          this.lookahead1W(105);    // S^WS | '(:' | ')' | ','
          if (this.token() != 42)   // ','
          {
            break;
          }
          this.consume(42);         // ','
          this.lookahead1W(272);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          this.whitespace();
          this.parse_Argument();
        }
      }
      this.consume(38);             // ')'
      this.eventHandler.endNonterminal("ArgumentList", this.e0);
    }

    private try_ArgumentList()
    {
      this.consumeT(35);            // '('
      this.lookahead1W(280);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      if (this.token() != 38)       // ')'
      {
        this.try_Argument();
        for (;;)
        {
          this.lookahead1W(105);    // S^WS | '(:' | ')' | ','
          if (this.token() != 42)   // ','
          {
            break;
          }
          this.consumeT(42);        // ','
          this.lookahead1W(272);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          this.try_Argument();
        }
      }
      this.consumeT(38);            // ')'
    }

    private parse_PredicateList()
    {
      this.eventHandler.startNonterminal("PredicateList", this.e0);
      for (;;)
      {
        this.lookahead1W(228);      // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        if (this.token() != 69)     // '['
        {
          break;
        }
        this.whitespace();
        this.parse_Predicate();
      }
      this.eventHandler.endNonterminal("PredicateList", this.e0);
    }

    private try_PredicateList()
    {
      for (;;)
      {
        this.lookahead1W(228);      // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        if (this.token() != 69)     // '['
        {
          break;
        }
        this.try_Predicate();
      }
    }

    private parse_Predicate()
    {
      this.eventHandler.startNonterminal("Predicate", this.e0);
      this.consume(69);             // '['
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.consume(70);             // ']'
      this.eventHandler.endNonterminal("Predicate", this.e0);
    }

    private try_Predicate()
    {
      this.consumeT(69);            // '['
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.consumeT(70);            // ']'
    }

    private parse_Literal()
    {
      this.eventHandler.startNonterminal("Literal", this.e0);
      switch (this.token())
      {
      case 11:                      // StringLiteral
        this.consume(11);           // StringLiteral
        break;
      case 135:                     // 'false'
      case 255:                     // 'true'
        this.parse_BooleanLiteral();
        break;
      case 197:                     // 'null'
        this.parse_NullLiteral();
        break;
      default:
        this.parse_NumericLiteral();
      }
      this.eventHandler.endNonterminal("Literal", this.e0);
    }

    private try_Literal()
    {
      switch (this.token())
      {
      case 11:                      // StringLiteral
        this.consumeT(11);          // StringLiteral
        break;
      case 135:                     // 'false'
      case 255:                     // 'true'
        this.try_BooleanLiteral();
        break;
      case 197:                     // 'null'
        this.try_NullLiteral();
        break;
      default:
        this.try_NumericLiteral();
      }
    }

    private parse_BooleanLiteral()
    {
      this.eventHandler.startNonterminal("BooleanLiteral", this.e0);
      switch (this.token())
      {
      case 255:                     // 'true'
        this.consume(255);          // 'true'
        break;
      default:
        this.consume(135);          // 'false'
      }
      this.eventHandler.endNonterminal("BooleanLiteral", this.e0);
    }

    private try_BooleanLiteral()
    {
      switch (this.token())
      {
      case 255:                     // 'true'
        this.consumeT(255);         // 'true'
        break;
      default:
        this.consumeT(135);         // 'false'
      }
    }

    private parse_NullLiteral()
    {
      this.eventHandler.startNonterminal("NullLiteral", this.e0);
      this.consume(197);            // 'null'
      this.eventHandler.endNonterminal("NullLiteral", this.e0);
    }

    private try_NullLiteral()
    {
      this.consumeT(197);           // 'null'
    }

    private parse_NumericLiteral()
    {
      this.eventHandler.startNonterminal("NumericLiteral", this.e0);
      switch (this.token())
      {
      case 8:                       // IntegerLiteral
        this.consume(8);            // IntegerLiteral
        break;
      case 9:                       // DecimalLiteral
        this.consume(9);            // DecimalLiteral
        break;
      default:
        this.consume(10);           // DoubleLiteral
      }
      this.eventHandler.endNonterminal("NumericLiteral", this.e0);
    }

    private try_NumericLiteral()
    {
      switch (this.token())
      {
      case 8:                       // IntegerLiteral
        this.consumeT(8);           // IntegerLiteral
        break;
      case 9:                       // DecimalLiteral
        this.consumeT(9);           // DecimalLiteral
        break;
      default:
        this.consumeT(10);          // DoubleLiteral
      }
    }

    private parse_VarRef()
    {
      this.eventHandler.startNonterminal("VarRef", this.e0);
      this.consume(31);             // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.eventHandler.endNonterminal("VarRef", this.e0);
    }

    private try_VarRef()
    {
      this.consumeT(31);            // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
    }

    private parse_VarName()
    {
      this.eventHandler.startNonterminal("VarName", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("VarName", this.e0);
    }

    private try_VarName()
    {
      this.try_EQName();
    }

    private parse_ParenthesizedExpr()
    {
      this.eventHandler.startNonterminal("ParenthesizedExpr", this.e0);
      this.consume(35);             // '('
      this.lookahead1W(270);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      if (this.token() != 38)       // ')'
      {
        this.whitespace();
        this.parse_Expr();
      }
      this.consume(38);             // ')'
      this.eventHandler.endNonterminal("ParenthesizedExpr", this.e0);
    }

    private try_ParenthesizedExpr()
    {
      this.consumeT(35);            // '('
      this.lookahead1W(270);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      if (this.token() != 38)       // ')'
      {
        this.try_Expr();
      }
      this.consumeT(38);            // ')'
    }

    private parse_ContextItemExpr()
    {
      this.eventHandler.startNonterminal("ContextItemExpr", this.e0);
      this.consume(32);             // '$$'
      this.eventHandler.endNonterminal("ContextItemExpr", this.e0);
    }

    private try_ContextItemExpr()
    {
      this.consumeT(32);            // '$$'
    }

    private parse_OrderedExpr()
    {
      this.eventHandler.startNonterminal("OrderedExpr", this.e0);
      this.consume(206);            // 'ordered'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.consume(281);            // '{'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.consume(287);            // '}'
      this.eventHandler.endNonterminal("OrderedExpr", this.e0);
    }

    private try_OrderedExpr()
    {
      this.consumeT(206);           // 'ordered'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.consumeT(281);           // '{'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.consumeT(287);           // '}'
    }

    private parse_UnorderedExpr()
    {
      this.eventHandler.startNonterminal("UnorderedExpr", this.e0);
      this.consume(262);            // 'unordered'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.consume(281);            // '{'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.consume(287);            // '}'
      this.eventHandler.endNonterminal("UnorderedExpr", this.e0);
    }

    private try_UnorderedExpr()
    {
      this.consumeT(262);           // 'unordered'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.consumeT(281);           // '{'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.consumeT(287);           // '}'
    }

    private parse_FunctionCall()
    {
      this.eventHandler.startNonterminal("FunctionCall", this.e0);
      this.parse_FunctionName();
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.whitespace();
      this.parse_ArgumentList();
      this.eventHandler.endNonterminal("FunctionCall", this.e0);
    }

    private try_FunctionCall()
    {
      this.try_FunctionName();
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.try_ArgumentList();
    }

    private parse_Argument()
    {
      this.eventHandler.startNonterminal("Argument", this.e0);
      switch (this.token())
      {
      case 65:                      // '?'
        this.parse_ArgumentPlaceholder();
        break;
      default:
        this.parse_ExprSingle();
      }
      this.eventHandler.endNonterminal("Argument", this.e0);
    }

    private try_Argument()
    {
      switch (this.token())
      {
      case 65:                      // '?'
        this.try_ArgumentPlaceholder();
        break;
      default:
        this.try_ExprSingle();
      }
    }

    private parse_ArgumentPlaceholder()
    {
      this.eventHandler.startNonterminal("ArgumentPlaceholder", this.e0);
      this.consume(65);             // '?'
      this.eventHandler.endNonterminal("ArgumentPlaceholder", this.e0);
    }

    private try_ArgumentPlaceholder()
    {
      this.consumeT(65);            // '?'
    }

    private parse_Constructor()
    {
      this.eventHandler.startNonterminal("Constructor", this.e0);
      switch (this.token())
      {
      case 55:                      // '<'
      case 56:                      // '<!--'
      case 60:                      // '<?'
        this.parse_DirectConstructor();
        break;
      default:
        this.parse_ComputedConstructor();
      }
      this.eventHandler.endNonterminal("Constructor", this.e0);
    }

    private try_Constructor()
    {
      switch (this.token())
      {
      case 55:                      // '<'
      case 56:                      // '<!--'
      case 60:                      // '<?'
        this.try_DirectConstructor();
        break;
      default:
        this.try_ComputedConstructor();
      }
    }

    private parse_DirectConstructor()
    {
      this.eventHandler.startNonterminal("DirectConstructor", this.e0);
      switch (this.token())
      {
      case 55:                      // '<'
        this.parse_DirElemConstructor();
        break;
      case 56:                      // '<!--'
        this.parse_DirCommentConstructor();
        break;
      default:
        this.parse_DirPIConstructor();
      }
      this.eventHandler.endNonterminal("DirectConstructor", this.e0);
    }

    private try_DirectConstructor()
    {
      switch (this.token())
      {
      case 55:                      // '<'
        this.try_DirElemConstructor();
        break;
      case 56:                      // '<!--'
        this.try_DirCommentConstructor();
        break;
      default:
        this.try_DirPIConstructor();
      }
    }

    private parse_DirElemConstructor()
    {
      this.eventHandler.startNonterminal("DirElemConstructor", this.e0);
      this.consume(55);             // '<'
      this.lookahead1(4);           // QName
      this.consume(20);             // QName
      this.parse_DirAttributeList();
      switch (this.token())
      {
      case 49:                      // '/>'
        this.consume(49);           // '/>'
        break;
      default:
        this.consume(62);           // '>'
        for (;;)
        {
          this.lookahead1(196);     // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
          if (this.token() == 57)   // '</'
          {
            break;
          }
          this.parse_DirElemContent();
        }
        this.consume(57);           // '</'
        this.lookahead1(4);         // QName
        this.consume(20);           // QName
        this.lookahead1(12);        // S | '>'
        if (this.token() == 21)     // S
        {
          this.consume(21);         // S
        }
        this.lookahead1(8);         // '>'
        this.consume(62);           // '>'
      }
      this.eventHandler.endNonterminal("DirElemConstructor", this.e0);
    }

    private try_DirElemConstructor()
    {
      this.consumeT(55);            // '<'
      this.lookahead1(4);           // QName
      this.consumeT(20);            // QName
      this.try_DirAttributeList();
      switch (this.token())
      {
      case 49:                      // '/>'
        this.consumeT(49);          // '/>'
        break;
      default:
        this.consumeT(62);          // '>'
        for (;;)
        {
          this.lookahead1(196);     // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
          if (this.token() == 57)   // '</'
          {
            break;
          }
          this.try_DirElemContent();
        }
        this.consumeT(57);          // '</'
        this.lookahead1(4);         // QName
        this.consumeT(20);          // QName
        this.lookahead1(12);        // S | '>'
        if (this.token() == 21)     // S
        {
          this.consumeT(21);        // S
        }
        this.lookahead1(8);         // '>'
        this.consumeT(62);          // '>'
      }
    }

    private parse_DirAttributeList()
    {
      this.eventHandler.startNonterminal("DirAttributeList", this.e0);
      for (;;)
      {
        this.lookahead1(19);        // S | '/>' | '>'
        if (this.token() != 21)     // S
        {
          break;
        }
        this.consume(21);           // S
        this.lookahead1(94);        // QName | S | '/>' | '>'
        if (this.token() == 20)     // QName
        {
          this.consume(20);         // QName
          this.lookahead1(11);      // S | '='
          if (this.token() == 21)   // S
          {
            this.consume(21);       // S
          }
          this.lookahead1(7);       // '='
          this.consume(61);         // '='
          this.lookahead1(18);      // S | '"' | "'"
          if (this.token() == 21)   // S
          {
            this.consume(21);       // S
          }
          this.parse_DirAttributeValue();
        }
      }
      this.eventHandler.endNonterminal("DirAttributeList", this.e0);
    }

    private try_DirAttributeList()
    {
      for (;;)
      {
        this.lookahead1(19);        // S | '/>' | '>'
        if (this.token() != 21)     // S
        {
          break;
        }
        this.consumeT(21);          // S
        this.lookahead1(94);        // QName | S | '/>' | '>'
        if (this.token() == 20)     // QName
        {
          this.consumeT(20);        // QName
          this.lookahead1(11);      // S | '='
          if (this.token() == 21)   // S
          {
            this.consumeT(21);      // S
          }
          this.lookahead1(7);       // '='
          this.consumeT(61);        // '='
          this.lookahead1(18);      // S | '"' | "'"
          if (this.token() == 21)   // S
          {
            this.consumeT(21);      // S
          }
          this.try_DirAttributeValue();
        }
      }
    }

    private parse_DirAttributeValue()
    {
      this.eventHandler.startNonterminal("DirAttributeValue", this.e0);
      this.lookahead1(14);          // '"' | "'"
      switch (this.token())
      {
      case 28:                      // '"'
        this.consume(28);           // '"'
        for (;;)
        {
          this.lookahead1(185);     // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
          if (this.token() == 28)   // '"'
          {
            break;
          }
          switch (this.token())
          {
          case 13:                  // EscapeQuot
            this.consume(13);       // EscapeQuot
            break;
          default:
            this.parse_QuotAttrValueContent();
          }
        }
        this.consume(28);           // '"'
        break;
      default:
        this.consume(34);           // "'"
        for (;;)
        {
          this.lookahead1(186);     // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
          if (this.token() == 34)   // "'"
          {
            break;
          }
          switch (this.token())
          {
          case 14:                  // EscapeApos
            this.consume(14);       // EscapeApos
            break;
          default:
            this.parse_AposAttrValueContent();
          }
        }
        this.consume(34);           // "'"
      }
      this.eventHandler.endNonterminal("DirAttributeValue", this.e0);
    }

    private try_DirAttributeValue()
    {
      this.lookahead1(14);          // '"' | "'"
      switch (this.token())
      {
      case 28:                      // '"'
        this.consumeT(28);          // '"'
        for (;;)
        {
          this.lookahead1(185);     // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
          if (this.token() == 28)   // '"'
          {
            break;
          }
          switch (this.token())
          {
          case 13:                  // EscapeQuot
            this.consumeT(13);      // EscapeQuot
            break;
          default:
            this.try_QuotAttrValueContent();
          }
        }
        this.consumeT(28);          // '"'
        break;
      default:
        this.consumeT(34);          // "'"
        for (;;)
        {
          this.lookahead1(186);     // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
          if (this.token() == 34)   // "'"
          {
            break;
          }
          switch (this.token())
          {
          case 14:                  // EscapeApos
            this.consumeT(14);      // EscapeApos
            break;
          default:
            this.try_AposAttrValueContent();
          }
        }
        this.consumeT(34);          // "'"
      }
    }

    private parse_QuotAttrValueContent()
    {
      this.eventHandler.startNonterminal("QuotAttrValueContent", this.e0);
      switch (this.token())
      {
      case 16:                      // QuotAttrContentChar
        this.consume(16);           // QuotAttrContentChar
        break;
      default:
        this.parse_CommonContent();
      }
      this.eventHandler.endNonterminal("QuotAttrValueContent", this.e0);
    }

    private try_QuotAttrValueContent()
    {
      switch (this.token())
      {
      case 16:                      // QuotAttrContentChar
        this.consumeT(16);          // QuotAttrContentChar
        break;
      default:
        this.try_CommonContent();
      }
    }

    private parse_AposAttrValueContent()
    {
      this.eventHandler.startNonterminal("AposAttrValueContent", this.e0);
      switch (this.token())
      {
      case 17:                      // AposAttrContentChar
        this.consume(17);           // AposAttrContentChar
        break;
      default:
        this.parse_CommonContent();
      }
      this.eventHandler.endNonterminal("AposAttrValueContent", this.e0);
    }

    private try_AposAttrValueContent()
    {
      switch (this.token())
      {
      case 17:                      // AposAttrContentChar
        this.consumeT(17);          // AposAttrContentChar
        break;
      default:
        this.try_CommonContent();
      }
    }

    private parse_DirElemContent()
    {
      this.eventHandler.startNonterminal("DirElemContent", this.e0);
      switch (this.token())
      {
      case 55:                      // '<'
      case 56:                      // '<!--'
      case 60:                      // '<?'
        this.parse_DirectConstructor();
        break;
      case 4:                       // CDataSection
        this.consume(4);            // CDataSection
        break;
      case 15:                      // ElementContentChar
        this.consume(15);           // ElementContentChar
        break;
      default:
        this.parse_CommonContent();
      }
      this.eventHandler.endNonterminal("DirElemContent", this.e0);
    }

    private try_DirElemContent()
    {
      switch (this.token())
      {
      case 55:                      // '<'
      case 56:                      // '<!--'
      case 60:                      // '<?'
        this.try_DirectConstructor();
        break;
      case 4:                       // CDataSection
        this.consumeT(4);           // CDataSection
        break;
      case 15:                      // ElementContentChar
        this.consumeT(15);          // ElementContentChar
        break;
      default:
        this.try_CommonContent();
      }
    }

    private parse_DirCommentConstructor()
    {
      this.eventHandler.startNonterminal("DirCommentConstructor", this.e0);
      this.consume(56);             // '<!--'
      this.lookahead1(1);           // DirCommentContents
      this.consume(2);              // DirCommentContents
      this.lookahead1(6);           // '-->'
      this.consume(44);             // '-->'
      this.eventHandler.endNonterminal("DirCommentConstructor", this.e0);
    }

    private try_DirCommentConstructor()
    {
      this.consumeT(56);            // '<!--'
      this.lookahead1(1);           // DirCommentContents
      this.consumeT(2);             // DirCommentContents
      this.lookahead1(6);           // '-->'
      this.consumeT(44);            // '-->'
    }

    private parse_DirPIConstructor()
    {
      this.eventHandler.startNonterminal("DirPIConstructor", this.e0);
      this.consume(60);             // '<?'
      this.lookahead1(3);           // PITarget
      this.consume(18);             // PITarget
      this.lookahead1(13);          // S | '?>'
      if (this.token() == 21)       // S
      {
        this.consume(21);           // S
        this.lookahead1(2);         // DirPIContents
        this.consume(3);            // DirPIContents
      }
      this.lookahead1(9);           // '?>'
      this.consume(66);             // '?>'
      this.eventHandler.endNonterminal("DirPIConstructor", this.e0);
    }

    private try_DirPIConstructor()
    {
      this.consumeT(60);            // '<?'
      this.lookahead1(3);           // PITarget
      this.consumeT(18);            // PITarget
      this.lookahead1(13);          // S | '?>'
      if (this.token() == 21)       // S
      {
        this.consumeT(21);          // S
        this.lookahead1(2);         // DirPIContents
        this.consumeT(3);           // DirPIContents
      }
      this.lookahead1(9);           // '?>'
      this.consumeT(66);            // '?>'
    }

    private parse_ComputedConstructor()
    {
      this.eventHandler.startNonterminal("ComputedConstructor", this.e0);
      switch (this.token())
      {
      case 120:                     // 'document'
        this.parse_CompDocConstructor();
        break;
      case 122:                     // 'element'
        this.parse_CompElemConstructor();
        break;
      case 83:                      // 'attribute'
        this.parse_CompAttrConstructor();
        break;
      case 187:                     // 'namespace'
        this.parse_CompNamespaceConstructor();
        break;
      case 249:                     // 'text'
        this.parse_CompTextConstructor();
        break;
      case 97:                      // 'comment'
        this.parse_CompCommentConstructor();
        break;
      default:
        this.parse_CompPIConstructor();
      }
      this.eventHandler.endNonterminal("ComputedConstructor", this.e0);
    }

    private try_ComputedConstructor()
    {
      switch (this.token())
      {
      case 120:                     // 'document'
        this.try_CompDocConstructor();
        break;
      case 122:                     // 'element'
        this.try_CompElemConstructor();
        break;
      case 83:                      // 'attribute'
        this.try_CompAttrConstructor();
        break;
      case 187:                     // 'namespace'
        this.try_CompNamespaceConstructor();
        break;
      case 249:                     // 'text'
        this.try_CompTextConstructor();
        break;
      case 97:                      // 'comment'
        this.try_CompCommentConstructor();
        break;
      default:
        this.try_CompPIConstructor();
      }
    }

    private parse_CompElemConstructor()
    {
      this.eventHandler.startNonterminal("CompElemConstructor", this.e0);
      this.consume(122);            // 'element'
      this.lookahead1W(250);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
      switch (this.token())
      {
      case 281:                     // '{'
        this.consume(281);          // '{'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_Expr();
        this.consume(287);          // '}'
        break;
      default:
        this.whitespace();
        this.parse_EQName();
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.consume(281);            // '{'
      this.lookahead1W(281);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      if (this.token() != 287)      // '}'
      {
        this.whitespace();
        this.parse_ContentExpr();
      }
      this.consume(287);            // '}'
      this.eventHandler.endNonterminal("CompElemConstructor", this.e0);
    }

    private try_CompElemConstructor()
    {
      this.consumeT(122);           // 'element'
      this.lookahead1W(250);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
      switch (this.token())
      {
      case 281:                     // '{'
        this.consumeT(281);         // '{'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_Expr();
        this.consumeT(287);         // '}'
        break;
      default:
        this.try_EQName();
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.consumeT(281);           // '{'
      this.lookahead1W(281);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      if (this.token() != 287)      // '}'
      {
        this.try_ContentExpr();
      }
      this.consumeT(287);           // '}'
    }

    private parse_CompNamespaceConstructor()
    {
      this.eventHandler.startNonterminal("CompNamespaceConstructor", this.e0);
      this.consume(187);            // 'namespace'
      this.lookahead1W(242);        // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      switch (this.token())
      {
      case 281:                     // '{'
        this.consume(281);          // '{'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_PrefixExpr();
        this.consume(287);          // '}'
        break;
      default:
        this.whitespace();
        this.parse_Prefix();
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.consume(281);            // '{'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_URIExpr();
      this.consume(287);            // '}'
      this.eventHandler.endNonterminal("CompNamespaceConstructor", this.e0);
    }

    private try_CompNamespaceConstructor()
    {
      this.consumeT(187);           // 'namespace'
      this.lookahead1W(242);        // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      switch (this.token())
      {
      case 281:                     // '{'
        this.consumeT(281);         // '{'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_PrefixExpr();
        this.consumeT(287);         // '}'
        break;
      default:
        this.try_Prefix();
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.consumeT(281);           // '{'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_URIExpr();
      this.consumeT(287);           // '}'
    }

    private parse_Prefix()
    {
      this.eventHandler.startNonterminal("Prefix", this.e0);
      this.parse_NCName();
      this.eventHandler.endNonterminal("Prefix", this.e0);
    }

    private try_Prefix()
    {
      this.try_NCName();
    }

    private parse_PrefixExpr()
    {
      this.eventHandler.startNonterminal("PrefixExpr", this.e0);
      this.parse_Expr();
      this.eventHandler.endNonterminal("PrefixExpr", this.e0);
    }

    private try_PrefixExpr()
    {
      this.try_Expr();
    }

    private parse_URIExpr()
    {
      this.eventHandler.startNonterminal("URIExpr", this.e0);
      this.parse_Expr();
      this.eventHandler.endNonterminal("URIExpr", this.e0);
    }

    private try_URIExpr()
    {
      this.try_Expr();
    }

    private parse_FunctionItemExpr()
    {
      this.eventHandler.startNonterminal("FunctionItemExpr", this.e0);
      switch (this.token())
      {
      case 147:                     // 'function'
        this.lookahead2W(95);       // S^WS | '#' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.tokenSequence())
      {
      case 33:                      // '%'
      case 18067:                   // 'function' '('
        this.parse_InlineFunctionExpr();
        break;
      default:
        this.parse_NamedFunctionRef();
      }
      this.eventHandler.endNonterminal("FunctionItemExpr", this.e0);
    }

    private try_FunctionItemExpr()
    {
      switch (this.token())
      {
      case 147:                     // 'function'
        this.lookahead2W(95);       // S^WS | '#' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.tokenSequence())
      {
      case 33:                      // '%'
      case 18067:                   // 'function' '('
        this.try_InlineFunctionExpr();
        break;
      default:
        this.try_NamedFunctionRef();
      }
    }

    private parse_NamedFunctionRef()
    {
      this.eventHandler.startNonterminal("NamedFunctionRef", this.e0);
      this.parse_EQName();
      this.lookahead1W(20);         // S^WS | '#' | '(:'
      this.consume(29);             // '#'
      this.lookahead1W(16);         // IntegerLiteral | S^WS | '(:'
      this.consume(8);              // IntegerLiteral
      this.eventHandler.endNonterminal("NamedFunctionRef", this.e0);
    }

    private try_NamedFunctionRef()
    {
      this.try_EQName();
      this.lookahead1W(20);         // S^WS | '#' | '(:'
      this.consumeT(29);            // '#'
      this.lookahead1W(16);         // IntegerLiteral | S^WS | '(:'
      this.consumeT(8);             // IntegerLiteral
    }

    private parse_InlineFunctionExpr()
    {
      this.eventHandler.startNonterminal("InlineFunctionExpr", this.e0);
      for (;;)
      {
        this.lookahead1W(101);      // S^WS | '%' | '(:' | 'function'
        if (this.token() != 33)     // '%'
        {
          break;
        }
        this.whitespace();
        this.parse_Annotation();
      }
      this.consume(147);            // 'function'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consume(35);             // '('
      this.lookahead1W(98);         // S^WS | '$' | '(:' | ')'
      if (this.token() == 31)       // '$'
      {
        this.whitespace();
        this.parse_ParamList();
      }
      this.consume(38);             // ')'
      this.lookahead1W(115);        // S^WS | '(:' | 'as' | '{'
      if (this.token() == 80)       // 'as'
      {
        this.consume(80);           // 'as'
        this.lookahead1W(254);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_SequenceType();
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.whitespace();
      this.parse_FunctionBody();
      this.eventHandler.endNonterminal("InlineFunctionExpr", this.e0);
    }

    private try_InlineFunctionExpr()
    {
      for (;;)
      {
        this.lookahead1W(101);      // S^WS | '%' | '(:' | 'function'
        if (this.token() != 33)     // '%'
        {
          break;
        }
        this.try_Annotation();
      }
      this.consumeT(147);           // 'function'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consumeT(35);            // '('
      this.lookahead1W(98);         // S^WS | '$' | '(:' | ')'
      if (this.token() == 31)       // '$'
      {
        this.try_ParamList();
      }
      this.consumeT(38);            // ')'
      this.lookahead1W(115);        // S^WS | '(:' | 'as' | '{'
      if (this.token() == 80)       // 'as'
      {
        this.consumeT(80);          // 'as'
        this.lookahead1W(254);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_SequenceType();
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.try_FunctionBody();
    }

    private parse_SingleType()
    {
      this.eventHandler.startNonterminal("SingleType", this.e0);
      this.parse_SimpleTypeName();
      this.lookahead1W(226);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      if (this.token() == 65)       // '?'
      {
        this.consume(65);           // '?'
      }
      this.eventHandler.endNonterminal("SingleType", this.e0);
    }

    private try_SingleType()
    {
      this.try_SimpleTypeName();
      this.lookahead1W(226);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      if (this.token() == 65)       // '?'
      {
        this.consumeT(65);          // '?'
      }
    }

    private parse_TypeDeclaration()
    {
      this.eventHandler.startNonterminal("TypeDeclaration", this.e0);
      this.consume(80);             // 'as'
      this.lookahead1W(254);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_SequenceType();
      this.eventHandler.endNonterminal("TypeDeclaration", this.e0);
    }

    private try_TypeDeclaration()
    {
      this.consumeT(80);            // 'as'
      this.lookahead1W(254);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_SequenceType();
    }

    private parse_SequenceType()
    {
      this.eventHandler.startNonterminal("SequenceType", this.e0);
      switch (this.token())
      {
      case 35:                      // '('
        this.lookahead2W(259);      // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      case 125:                     // 'empty-sequence'
        this.lookahead2W(233);      // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.tokenSequence())
      {
      case 18045:                   // 'empty-sequence' '('
      case 19491:                   // '(' ')'
        if (this.token() == 125)    // 'empty-sequence'
        {
          this.consume(125);        // 'empty-sequence'
        }
        this.lookahead1W(22);       // S^WS | '(' | '(:'
        this.consume(35);           // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.consume(38);           // ')'
        break;
      default:
        this.parse_ItemType();
        this.lookahead1W(229);      // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        switch (this.token())
        {
        case 40:                    // '*'
        case 41:                    // '+'
        case 65:                    // '?'
          this.whitespace();
          this.parse_OccurrenceIndicator();
          break;
        default:
          break;
        }
      }
      this.eventHandler.endNonterminal("SequenceType", this.e0);
    }

    private try_SequenceType()
    {
      switch (this.token())
      {
      case 35:                      // '('
        this.lookahead2W(259);      // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      case 125:                     // 'empty-sequence'
        this.lookahead2W(233);      // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.tokenSequence())
      {
      case 18045:                   // 'empty-sequence' '('
      case 19491:                   // '(' ')'
        if (this.token() == 125)    // 'empty-sequence'
        {
          this.consumeT(125);       // 'empty-sequence'
        }
        this.lookahead1W(22);       // S^WS | '(' | '(:'
        this.consumeT(35);          // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.consumeT(38);          // ')'
        break;
      default:
        this.try_ItemType();
        this.lookahead1W(229);      // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        switch (this.token())
        {
        case 40:                    // '*'
        case 41:                    // '+'
        case 65:                    // '?'
          this.try_OccurrenceIndicator();
          break;
        default:
          break;
        }
      }
    }

    private parse_OccurrenceIndicator()
    {
      this.eventHandler.startNonterminal("OccurrenceIndicator", this.e0);
      switch (this.token())
      {
      case 65:                      // '?'
        this.consume(65);           // '?'
        break;
      case 40:                      // '*'
        this.consume(40);           // '*'
        break;
      default:
        this.consume(41);           // '+'
      }
      this.eventHandler.endNonterminal("OccurrenceIndicator", this.e0);
    }

    private try_OccurrenceIndicator()
    {
      switch (this.token())
      {
      case 65:                      // '?'
        this.consumeT(65);          // '?'
        break;
      case 40:                      // '*'
        this.consumeT(40);          // '*'
        break;
      default:
        this.consumeT(41);          // '+'
      }
    }

    private parse_ItemType()
    {
      this.eventHandler.startNonterminal("ItemType", this.e0);
      switch (this.token())
      {
      case 79:                      // 'array'
      case 83:                      // 'attribute'
      case 97:                      // 'comment'
      case 121:                     // 'document-node'
      case 122:                     // 'element'
      case 147:                     // 'function'
      case 167:                     // 'item'
      case 169:                     // 'json-item'
      case 188:                     // 'namespace-node'
      case 194:                     // 'node'
      case 198:                     // 'object'
      case 220:                     // 'processing-instruction'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
      case 247:                     // 'structured-item'
      case 249:                     // 'text'
        this.lookahead2W(233);      // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 12879 // 'array' EOF
       || this.tokenSequence() == 12969 // 'json-item' EOF
       || this.tokenSequence() == 12998 // 'object' EOF
       || this.tokenSequence() == 13047 // 'structured-item' EOF
       || this.tokenSequence() == 13903 // 'array' '!='
       || this.tokenSequence() == 13993 // 'json-item' '!='
       || this.tokenSequence() == 14022 // 'object' '!='
       || this.tokenSequence() == 14071 // 'structured-item' '!='
       || this.tokenSequence() == 19535 // 'array' ')'
       || this.tokenSequence() == 19625 // 'json-item' ')'
       || this.tokenSequence() == 19654 // 'object' ')'
       || this.tokenSequence() == 19703 // 'structured-item' ')'
       || this.tokenSequence() == 20047 // 'array' '*'
       || this.tokenSequence() == 20137 // 'json-item' '*'
       || this.tokenSequence() == 20166 // 'object' '*'
       || this.tokenSequence() == 20215 // 'structured-item' '*'
       || this.tokenSequence() == 20559 // 'array' '*'
       || this.tokenSequence() == 20649 // 'json-item' '*'
       || this.tokenSequence() == 20678 // 'object' '*'
       || this.tokenSequence() == 20727 // 'structured-item' '*'
       || this.tokenSequence() == 21071 // 'array' '+'
       || this.tokenSequence() == 21161 // 'json-item' '+'
       || this.tokenSequence() == 21190 // 'object' '+'
       || this.tokenSequence() == 21239 // 'structured-item' '+'
       || this.tokenSequence() == 21583 // 'array' ','
       || this.tokenSequence() == 21673 // 'json-item' ','
       || this.tokenSequence() == 21702 // 'object' ','
       || this.tokenSequence() == 21751 // 'structured-item' ','
       || this.tokenSequence() == 22095 // 'array' '-'
       || this.tokenSequence() == 22185 // 'json-item' '-'
       || this.tokenSequence() == 22214 // 'object' '-'
       || this.tokenSequence() == 22263 // 'structured-item' '-'
       || this.tokenSequence() == 25679 // 'array' ':'
       || this.tokenSequence() == 25769 // 'json-item' ':'
       || this.tokenSequence() == 25798 // 'object' ':'
       || this.tokenSequence() == 25847 // 'structured-item' ':'
       || this.tokenSequence() == 27215 // 'array' ':='
       || this.tokenSequence() == 27305 // 'json-item' ':='
       || this.tokenSequence() == 27334 // 'object' ':='
       || this.tokenSequence() == 27383 // 'structured-item' ':='
       || this.tokenSequence() == 27727 // 'array' ';'
       || this.tokenSequence() == 27817 // 'json-item' ';'
       || this.tokenSequence() == 27846 // 'object' ';'
       || this.tokenSequence() == 27895 // 'structured-item' ';'
       || this.tokenSequence() == 28239 // 'array' '<'
       || this.tokenSequence() == 28329 // 'json-item' '<'
       || this.tokenSequence() == 28358 // 'object' '<'
       || this.tokenSequence() == 28407 // 'structured-item' '<'
       || this.tokenSequence() == 29775 // 'array' '<<'
       || this.tokenSequence() == 29865 // 'json-item' '<<'
       || this.tokenSequence() == 29894 // 'object' '<<'
       || this.tokenSequence() == 29943 // 'structured-item' '<<'
       || this.tokenSequence() == 30287 // 'array' '<='
       || this.tokenSequence() == 30377 // 'json-item' '<='
       || this.tokenSequence() == 30406 // 'object' '<='
       || this.tokenSequence() == 30455 // 'structured-item' '<='
       || this.tokenSequence() == 31311 // 'array' '='
       || this.tokenSequence() == 31401 // 'json-item' '='
       || this.tokenSequence() == 31430 // 'object' '='
       || this.tokenSequence() == 31479 // 'structured-item' '='
       || this.tokenSequence() == 31823 // 'array' '>'
       || this.tokenSequence() == 31913 // 'json-item' '>'
       || this.tokenSequence() == 31942 // 'object' '>'
       || this.tokenSequence() == 31991 // 'structured-item' '>'
       || this.tokenSequence() == 32335 // 'array' '>='
       || this.tokenSequence() == 32425 // 'json-item' '>='
       || this.tokenSequence() == 32454 // 'object' '>='
       || this.tokenSequence() == 32503 // 'structured-item' '>='
       || this.tokenSequence() == 32847 // 'array' '>>'
       || this.tokenSequence() == 32937 // 'json-item' '>>'
       || this.tokenSequence() == 32966 // 'object' '>>'
       || this.tokenSequence() == 33015 // 'structured-item' '>>'
       || this.tokenSequence() == 33359 // 'array' '?'
       || this.tokenSequence() == 33449 // 'json-item' '?'
       || this.tokenSequence() == 33478 // 'object' '?'
       || this.tokenSequence() == 33527 // 'structured-item' '?'
       || this.tokenSequence() == 35919 // 'array' ']'
       || this.tokenSequence() == 36009 // 'json-item' ']'
       || this.tokenSequence() == 36038 // 'object' ']'
       || this.tokenSequence() == 36087 // 'structured-item' ']'
       || this.tokenSequence() == 36431 // 'array' 'after'
       || this.tokenSequence() == 36521 // 'json-item' 'after'
       || this.tokenSequence() == 36550 // 'object' 'after'
       || this.tokenSequence() == 36599 // 'structured-item' 'after'
       || this.tokenSequence() == 37455 // 'array' 'allowing'
       || this.tokenSequence() == 37545 // 'json-item' 'allowing'
       || this.tokenSequence() == 37574 // 'object' 'allowing'
       || this.tokenSequence() == 37623 // 'structured-item' 'allowing'
       || this.tokenSequence() == 38991 // 'array' 'and'
       || this.tokenSequence() == 39081 // 'json-item' 'and'
       || this.tokenSequence() == 39110 // 'object' 'and'
       || this.tokenSequence() == 39159 // 'structured-item' 'and'
       || this.tokenSequence() == 41039 // 'array' 'as'
       || this.tokenSequence() == 41129 // 'json-item' 'as'
       || this.tokenSequence() == 41158 // 'object' 'as'
       || this.tokenSequence() == 41207 // 'structured-item' 'as'
       || this.tokenSequence() == 41551 // 'array' 'ascending'
       || this.tokenSequence() == 41641 // 'json-item' 'ascending'
       || this.tokenSequence() == 41670 // 'object' 'ascending'
       || this.tokenSequence() == 41719 // 'structured-item' 'ascending'
       || this.tokenSequence() == 42063 // 'array' 'at'
       || this.tokenSequence() == 42153 // 'json-item' 'at'
       || this.tokenSequence() == 42182 // 'object' 'at'
       || this.tokenSequence() == 42231 // 'structured-item' 'at'
       || this.tokenSequence() == 43599 // 'array' 'before'
       || this.tokenSequence() == 43689 // 'json-item' 'before'
       || this.tokenSequence() == 43718 // 'object' 'before'
       || this.tokenSequence() == 43767 // 'structured-item' 'before'
       || this.tokenSequence() == 45647 // 'array' 'case'
       || this.tokenSequence() == 45737 // 'json-item' 'case'
       || this.tokenSequence() == 45766 // 'object' 'case'
       || this.tokenSequence() == 45815 // 'structured-item' 'case'
       || this.tokenSequence() == 48719 // 'array' 'collation'
       || this.tokenSequence() == 48809 // 'json-item' 'collation'
       || this.tokenSequence() == 48838 // 'object' 'collation'
       || this.tokenSequence() == 48887 // 'structured-item' 'collation'
       || this.tokenSequence() == 51279 // 'array' 'contains'
       || this.tokenSequence() == 51369 // 'json-item' 'contains'
       || this.tokenSequence() == 51398 // 'object' 'contains'
       || this.tokenSequence() == 51447 // 'structured-item' 'contains'
       || this.tokenSequence() == 54351 // 'array' 'count'
       || this.tokenSequence() == 54441 // 'json-item' 'count'
       || this.tokenSequence() == 54470 // 'object' 'count'
       || this.tokenSequence() == 54519 // 'structured-item' 'count'
       || this.tokenSequence() == 56399 // 'array' 'default'
       || this.tokenSequence() == 56489 // 'json-item' 'default'
       || this.tokenSequence() == 56518 // 'object' 'default'
       || this.tokenSequence() == 56567 // 'structured-item' 'default'
       || this.tokenSequence() == 58447 // 'array' 'descending'
       || this.tokenSequence() == 58537 // 'json-item' 'descending'
       || this.tokenSequence() == 58566 // 'object' 'descending'
       || this.tokenSequence() == 58615 // 'structured-item' 'descending'
       || this.tokenSequence() == 61007 // 'array' 'div'
       || this.tokenSequence() == 61097 // 'json-item' 'div'
       || this.tokenSequence() == 61126 // 'object' 'div'
       || this.tokenSequence() == 61175 // 'structured-item' 'div'
       || this.tokenSequence() == 63055 // 'array' 'else'
       || this.tokenSequence() == 63145 // 'json-item' 'else'
       || this.tokenSequence() == 63174 // 'object' 'else'
       || this.tokenSequence() == 63223 // 'structured-item' 'else'
       || this.tokenSequence() == 63567 // 'array' 'empty'
       || this.tokenSequence() == 63657 // 'json-item' 'empty'
       || this.tokenSequence() == 63686 // 'object' 'empty'
       || this.tokenSequence() == 63735 // 'structured-item' 'empty'
       || this.tokenSequence() == 65103 // 'array' 'end'
       || this.tokenSequence() == 65193 // 'json-item' 'end'
       || this.tokenSequence() == 65222 // 'object' 'end'
       || this.tokenSequence() == 65271 // 'structured-item' 'end'
       || this.tokenSequence() == 66127 // 'array' 'eq'
       || this.tokenSequence() == 66217 // 'json-item' 'eq'
       || this.tokenSequence() == 66246 // 'object' 'eq'
       || this.tokenSequence() == 66295 // 'structured-item' 'eq'
       || this.tokenSequence() == 67663 // 'array' 'except'
       || this.tokenSequence() == 67753 // 'json-item' 'except'
       || this.tokenSequence() == 67782 // 'object' 'except'
       || this.tokenSequence() == 67831 // 'structured-item' 'except'
       || this.tokenSequence() == 68687 // 'array' 'external'
       || this.tokenSequence() == 68777 // 'json-item' 'external'
       || this.tokenSequence() == 68806 // 'object' 'external'
       || this.tokenSequence() == 68855 // 'structured-item' 'external'
       || this.tokenSequence() == 71247 // 'array' 'for'
       || this.tokenSequence() == 71337 // 'json-item' 'for'
       || this.tokenSequence() == 71366 // 'object' 'for'
       || this.tokenSequence() == 71415 // 'structured-item' 'for'
       || this.tokenSequence() == 75855 // 'array' 'ge'
       || this.tokenSequence() == 75945 // 'json-item' 'ge'
       || this.tokenSequence() == 75974 // 'object' 'ge'
       || this.tokenSequence() == 76023 // 'structured-item' 'ge'
       || this.tokenSequence() == 76879 // 'array' 'group'
       || this.tokenSequence() == 76969 // 'json-item' 'group'
       || this.tokenSequence() == 76998 // 'object' 'group'
       || this.tokenSequence() == 77047 // 'structured-item' 'group'
       || this.tokenSequence() == 77903 // 'array' 'gt'
       || this.tokenSequence() == 77993 // 'json-item' 'gt'
       || this.tokenSequence() == 78022 // 'object' 'gt'
       || this.tokenSequence() == 78071 // 'structured-item' 'gt'
       || this.tokenSequence() == 78415 // 'array' 'idiv'
       || this.tokenSequence() == 78505 // 'json-item' 'idiv'
       || this.tokenSequence() == 78534 // 'object' 'idiv'
       || this.tokenSequence() == 78583 // 'structured-item' 'idiv'
       || this.tokenSequence() == 79951 // 'array' 'in'
       || this.tokenSequence() == 80041 // 'json-item' 'in'
       || this.tokenSequence() == 80070 // 'object' 'in'
       || this.tokenSequence() == 80119 // 'structured-item' 'in'
       || this.tokenSequence() == 83023 // 'array' 'instance'
       || this.tokenSequence() == 83113 // 'json-item' 'instance'
       || this.tokenSequence() == 83142 // 'object' 'instance'
       || this.tokenSequence() == 83191 // 'structured-item' 'instance'
       || this.tokenSequence() == 84047 // 'array' 'intersect'
       || this.tokenSequence() == 84137 // 'json-item' 'intersect'
       || this.tokenSequence() == 84166 // 'object' 'intersect'
       || this.tokenSequence() == 84215 // 'structured-item' 'intersect'
       || this.tokenSequence() == 84559 // 'array' 'into'
       || this.tokenSequence() == 84649 // 'json-item' 'into'
       || this.tokenSequence() == 84678 // 'object' 'into'
       || this.tokenSequence() == 84727 // 'structured-item' 'into'
       || this.tokenSequence() == 85071 // 'array' 'is'
       || this.tokenSequence() == 85161 // 'json-item' 'is'
       || this.tokenSequence() == 85190 // 'object' 'is'
       || this.tokenSequence() == 85239 // 'structured-item' 'is'
       || this.tokenSequence() == 89679 // 'array' 'le'
       || this.tokenSequence() == 89769 // 'json-item' 'le'
       || this.tokenSequence() == 89798 // 'object' 'le'
       || this.tokenSequence() == 89847 // 'structured-item' 'le'
       || this.tokenSequence() == 90703 // 'array' 'let'
       || this.tokenSequence() == 90793 // 'json-item' 'let'
       || this.tokenSequence() == 90822 // 'object' 'let'
       || this.tokenSequence() == 90871 // 'structured-item' 'let'
       || this.tokenSequence() == 92751 // 'array' 'lt'
       || this.tokenSequence() == 92841 // 'json-item' 'lt'
       || this.tokenSequence() == 92870 // 'object' 'lt'
       || this.tokenSequence() == 92919 // 'structured-item' 'lt'
       || this.tokenSequence() == 93775 // 'array' 'mod'
       || this.tokenSequence() == 93865 // 'json-item' 'mod'
       || this.tokenSequence() == 93894 // 'object' 'mod'
       || this.tokenSequence() == 93943 // 'structured-item' 'mod'
       || this.tokenSequence() == 94287 // 'array' 'modify'
       || this.tokenSequence() == 94377 // 'json-item' 'modify'
       || this.tokenSequence() == 94406 // 'object' 'modify'
       || this.tokenSequence() == 94455 // 'structured-item' 'modify'
       || this.tokenSequence() == 96847 // 'array' 'ne'
       || this.tokenSequence() == 96937 // 'json-item' 'ne'
       || this.tokenSequence() == 96966 // 'object' 'ne'
       || this.tokenSequence() == 97015 // 'structured-item' 'ne'
       || this.tokenSequence() == 103503  // 'array' 'only'
       || this.tokenSequence() == 103593  // 'json-item' 'only'
       || this.tokenSequence() == 103622  // 'object' 'only'
       || this.tokenSequence() == 103671  // 'structured-item' 'only'
       || this.tokenSequence() == 104527  // 'array' 'or'
       || this.tokenSequence() == 104617  // 'json-item' 'or'
       || this.tokenSequence() == 104646  // 'object' 'or'
       || this.tokenSequence() == 104695  // 'structured-item' 'or'
       || this.tokenSequence() == 105039  // 'array' 'order'
       || this.tokenSequence() == 105129  // 'json-item' 'order'
       || this.tokenSequence() == 105158  // 'object' 'order'
       || this.tokenSequence() == 105207  // 'structured-item' 'order'
       || this.tokenSequence() == 107087  // 'array' 'paragraphs'
       || this.tokenSequence() == 107177  // 'json-item' 'paragraphs'
       || this.tokenSequence() == 107206  // 'object' 'paragraphs'
       || this.tokenSequence() == 107255  // 'structured-item' 'paragraphs'
       || this.tokenSequence() == 114767  // 'array' 'return'
       || this.tokenSequence() == 114857  // 'json-item' 'return'
       || this.tokenSequence() == 114886  // 'object' 'return'
       || this.tokenSequence() == 114935  // 'structured-item' 'return'
       || this.tokenSequence() == 116815  // 'array' 'satisfies'
       || this.tokenSequence() == 116905  // 'json-item' 'satisfies'
       || this.tokenSequence() == 116934  // 'object' 'satisfies'
       || this.tokenSequence() == 116983  // 'structured-item' 'satisfies'
       || this.tokenSequence() == 118863  // 'array' 'score'
       || this.tokenSequence() == 118953  // 'json-item' 'score'
       || this.tokenSequence() == 118982  // 'object' 'score'
       || this.tokenSequence() == 119031  // 'structured-item' 'score'
       || this.tokenSequence() == 121423  // 'array' 'sentences'
       || this.tokenSequence() == 121513  // 'json-item' 'sentences'
       || this.tokenSequence() == 121542  // 'object' 'sentences'
       || this.tokenSequence() == 121591  // 'structured-item' 'sentences'
       || this.tokenSequence() == 123471  // 'array' 'stable'
       || this.tokenSequence() == 123561  // 'json-item' 'stable'
       || this.tokenSequence() == 123590  // 'object' 'stable'
       || this.tokenSequence() == 123639  // 'structured-item' 'stable'
       || this.tokenSequence() == 123983  // 'array' 'start'
       || this.tokenSequence() == 124073  // 'json-item' 'start'
       || this.tokenSequence() == 124102  // 'object' 'start'
       || this.tokenSequence() == 124151  // 'structured-item' 'start'
       || this.tokenSequence() == 129103  // 'array' 'times'
       || this.tokenSequence() == 129193  // 'json-item' 'times'
       || this.tokenSequence() == 129222  // 'object' 'times'
       || this.tokenSequence() == 129271  // 'structured-item' 'times'
       || this.tokenSequence() == 129615  // 'array' 'to'
       || this.tokenSequence() == 129705  // 'json-item' 'to'
       || this.tokenSequence() == 129734  // 'object' 'to'
       || this.tokenSequence() == 129783  // 'structured-item' 'to'
       || this.tokenSequence() == 133199  // 'array' 'union'
       || this.tokenSequence() == 133289  // 'json-item' 'union'
       || this.tokenSequence() == 133318  // 'object' 'union'
       || this.tokenSequence() == 133367  // 'structured-item' 'union'
       || this.tokenSequence() == 139343  // 'array' 'where'
       || this.tokenSequence() == 139433  // 'json-item' 'where'
       || this.tokenSequence() == 139462  // 'object' 'where'
       || this.tokenSequence() == 139511  // 'structured-item' 'where'
       || this.tokenSequence() == 141391  // 'array' 'with'
       || this.tokenSequence() == 141481  // 'json-item' 'with'
       || this.tokenSequence() == 141510  // 'object' 'with'
       || this.tokenSequence() == 141559  // 'structured-item' 'with'
       || this.tokenSequence() == 142927  // 'array' 'words'
       || this.tokenSequence() == 143017  // 'json-item' 'words'
       || this.tokenSequence() == 143046  // 'object' 'words'
       || this.tokenSequence() == 143095  // 'structured-item' 'words'
       || this.tokenSequence() == 143951  // 'array' '{'
       || this.tokenSequence() == 144041  // 'json-item' '{'
       || this.tokenSequence() == 144070  // 'object' '{'
       || this.tokenSequence() == 144119  // 'structured-item' '{'
       || this.tokenSequence() == 145487  // 'array' '|'
       || this.tokenSequence() == 145577  // 'json-item' '|'
       || this.tokenSequence() == 145606  // 'object' '|'
       || this.tokenSequence() == 145655  // 'structured-item' '|'
       || this.tokenSequence() == 145999  // 'array' '||'
       || this.tokenSequence() == 146089  // 'json-item' '||'
       || this.tokenSequence() == 146118  // 'object' '||'
       || this.tokenSequence() == 146167  // 'structured-item' '||'
       || this.tokenSequence() == 146511  // 'array' '|}'
       || this.tokenSequence() == 146601  // 'json-item' '|}'
       || this.tokenSequence() == 146630  // 'object' '|}'
       || this.tokenSequence() == 146679  // 'structured-item' '|}'
       || this.tokenSequence() == 147023  // 'array' '}'
       || this.tokenSequence() == 147113  // 'json-item' '}'
       || this.tokenSequence() == 147142  // 'object' '}'
       || this.tokenSequence() == 147191) // 'structured-item' '}'
      {
        this.lk = this.memoized(6, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_AtomicOrUnionType();
            this.lk = -4;
          }
          catch (p4A)
          {
            try
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.try_JSONTest();
              this.lk = -6;
            }
            catch (p6A)
            {
              this.lk = -7;
            }
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(6, this.e0, this.lk);
        }
      }
      switch (this.tokenSequence())
      {
      case 18003:                   // 'attribute' '('
      case 18017:                   // 'comment' '('
      case 18041:                   // 'document-node' '('
      case 18042:                   // 'element' '('
      case 18108:                   // 'namespace-node' '('
      case 18114:                   // 'node' '('
      case 18140:                   // 'processing-instruction' '('
      case 18150:                   // 'schema-attribute' '('
      case 18151:                   // 'schema-element' '('
      case 18169:                   // 'text' '('
        this.parse_KindTest();
        break;
      case 18087:                   // 'item' '('
        this.consume(167);          // 'item'
        this.lookahead1W(22);       // S^WS | '(' | '(:'
        this.consume(35);           // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.consume(38);           // ')'
        break;
      case 33:                      // '%'
      case 18067:                   // 'function' '('
        this.parse_FunctionTest();
        break;
      case 35:                      // '('
        this.parse_ParenthesizedItemType();
        break;
      case -6:
      case 17999:                   // 'array' '('
      case 18089:                   // 'json-item' '('
      case 18118:                   // 'object' '('
        this.parse_JSONTest();
        break;
      case -7:
      case 18167:                   // 'structured-item' '('
        this.parse_StructuredItemTest();
        break;
      default:
        this.parse_AtomicOrUnionType();
      }
      this.eventHandler.endNonterminal("ItemType", this.e0);
    }

    private try_ItemType()
    {
      switch (this.token())
      {
      case 79:                      // 'array'
      case 83:                      // 'attribute'
      case 97:                      // 'comment'
      case 121:                     // 'document-node'
      case 122:                     // 'element'
      case 147:                     // 'function'
      case 167:                     // 'item'
      case 169:                     // 'json-item'
      case 188:                     // 'namespace-node'
      case 194:                     // 'node'
      case 198:                     // 'object'
      case 220:                     // 'processing-instruction'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
      case 247:                     // 'structured-item'
      case 249:                     // 'text'
        this.lookahead2W(233);      // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 12879 // 'array' EOF
       || this.tokenSequence() == 12969 // 'json-item' EOF
       || this.tokenSequence() == 12998 // 'object' EOF
       || this.tokenSequence() == 13047 // 'structured-item' EOF
       || this.tokenSequence() == 13903 // 'array' '!='
       || this.tokenSequence() == 13993 // 'json-item' '!='
       || this.tokenSequence() == 14022 // 'object' '!='
       || this.tokenSequence() == 14071 // 'structured-item' '!='
       || this.tokenSequence() == 19535 // 'array' ')'
       || this.tokenSequence() == 19625 // 'json-item' ')'
       || this.tokenSequence() == 19654 // 'object' ')'
       || this.tokenSequence() == 19703 // 'structured-item' ')'
       || this.tokenSequence() == 20047 // 'array' '*'
       || this.tokenSequence() == 20137 // 'json-item' '*'
       || this.tokenSequence() == 20166 // 'object' '*'
       || this.tokenSequence() == 20215 // 'structured-item' '*'
       || this.tokenSequence() == 20559 // 'array' '*'
       || this.tokenSequence() == 20649 // 'json-item' '*'
       || this.tokenSequence() == 20678 // 'object' '*'
       || this.tokenSequence() == 20727 // 'structured-item' '*'
       || this.tokenSequence() == 21071 // 'array' '+'
       || this.tokenSequence() == 21161 // 'json-item' '+'
       || this.tokenSequence() == 21190 // 'object' '+'
       || this.tokenSequence() == 21239 // 'structured-item' '+'
       || this.tokenSequence() == 21583 // 'array' ','
       || this.tokenSequence() == 21673 // 'json-item' ','
       || this.tokenSequence() == 21702 // 'object' ','
       || this.tokenSequence() == 21751 // 'structured-item' ','
       || this.tokenSequence() == 22095 // 'array' '-'
       || this.tokenSequence() == 22185 // 'json-item' '-'
       || this.tokenSequence() == 22214 // 'object' '-'
       || this.tokenSequence() == 22263 // 'structured-item' '-'
       || this.tokenSequence() == 25679 // 'array' ':'
       || this.tokenSequence() == 25769 // 'json-item' ':'
       || this.tokenSequence() == 25798 // 'object' ':'
       || this.tokenSequence() == 25847 // 'structured-item' ':'
       || this.tokenSequence() == 27215 // 'array' ':='
       || this.tokenSequence() == 27305 // 'json-item' ':='
       || this.tokenSequence() == 27334 // 'object' ':='
       || this.tokenSequence() == 27383 // 'structured-item' ':='
       || this.tokenSequence() == 27727 // 'array' ';'
       || this.tokenSequence() == 27817 // 'json-item' ';'
       || this.tokenSequence() == 27846 // 'object' ';'
       || this.tokenSequence() == 27895 // 'structured-item' ';'
       || this.tokenSequence() == 28239 // 'array' '<'
       || this.tokenSequence() == 28329 // 'json-item' '<'
       || this.tokenSequence() == 28358 // 'object' '<'
       || this.tokenSequence() == 28407 // 'structured-item' '<'
       || this.tokenSequence() == 29775 // 'array' '<<'
       || this.tokenSequence() == 29865 // 'json-item' '<<'
       || this.tokenSequence() == 29894 // 'object' '<<'
       || this.tokenSequence() == 29943 // 'structured-item' '<<'
       || this.tokenSequence() == 30287 // 'array' '<='
       || this.tokenSequence() == 30377 // 'json-item' '<='
       || this.tokenSequence() == 30406 // 'object' '<='
       || this.tokenSequence() == 30455 // 'structured-item' '<='
       || this.tokenSequence() == 31311 // 'array' '='
       || this.tokenSequence() == 31401 // 'json-item' '='
       || this.tokenSequence() == 31430 // 'object' '='
       || this.tokenSequence() == 31479 // 'structured-item' '='
       || this.tokenSequence() == 31823 // 'array' '>'
       || this.tokenSequence() == 31913 // 'json-item' '>'
       || this.tokenSequence() == 31942 // 'object' '>'
       || this.tokenSequence() == 31991 // 'structured-item' '>'
       || this.tokenSequence() == 32335 // 'array' '>='
       || this.tokenSequence() == 32425 // 'json-item' '>='
       || this.tokenSequence() == 32454 // 'object' '>='
       || this.tokenSequence() == 32503 // 'structured-item' '>='
       || this.tokenSequence() == 32847 // 'array' '>>'
       || this.tokenSequence() == 32937 // 'json-item' '>>'
       || this.tokenSequence() == 32966 // 'object' '>>'
       || this.tokenSequence() == 33015 // 'structured-item' '>>'
       || this.tokenSequence() == 33359 // 'array' '?'
       || this.tokenSequence() == 33449 // 'json-item' '?'
       || this.tokenSequence() == 33478 // 'object' '?'
       || this.tokenSequence() == 33527 // 'structured-item' '?'
       || this.tokenSequence() == 35919 // 'array' ']'
       || this.tokenSequence() == 36009 // 'json-item' ']'
       || this.tokenSequence() == 36038 // 'object' ']'
       || this.tokenSequence() == 36087 // 'structured-item' ']'
       || this.tokenSequence() == 36431 // 'array' 'after'
       || this.tokenSequence() == 36521 // 'json-item' 'after'
       || this.tokenSequence() == 36550 // 'object' 'after'
       || this.tokenSequence() == 36599 // 'structured-item' 'after'
       || this.tokenSequence() == 37455 // 'array' 'allowing'
       || this.tokenSequence() == 37545 // 'json-item' 'allowing'
       || this.tokenSequence() == 37574 // 'object' 'allowing'
       || this.tokenSequence() == 37623 // 'structured-item' 'allowing'
       || this.tokenSequence() == 38991 // 'array' 'and'
       || this.tokenSequence() == 39081 // 'json-item' 'and'
       || this.tokenSequence() == 39110 // 'object' 'and'
       || this.tokenSequence() == 39159 // 'structured-item' 'and'
       || this.tokenSequence() == 41039 // 'array' 'as'
       || this.tokenSequence() == 41129 // 'json-item' 'as'
       || this.tokenSequence() == 41158 // 'object' 'as'
       || this.tokenSequence() == 41207 // 'structured-item' 'as'
       || this.tokenSequence() == 41551 // 'array' 'ascending'
       || this.tokenSequence() == 41641 // 'json-item' 'ascending'
       || this.tokenSequence() == 41670 // 'object' 'ascending'
       || this.tokenSequence() == 41719 // 'structured-item' 'ascending'
       || this.tokenSequence() == 42063 // 'array' 'at'
       || this.tokenSequence() == 42153 // 'json-item' 'at'
       || this.tokenSequence() == 42182 // 'object' 'at'
       || this.tokenSequence() == 42231 // 'structured-item' 'at'
       || this.tokenSequence() == 43599 // 'array' 'before'
       || this.tokenSequence() == 43689 // 'json-item' 'before'
       || this.tokenSequence() == 43718 // 'object' 'before'
       || this.tokenSequence() == 43767 // 'structured-item' 'before'
       || this.tokenSequence() == 45647 // 'array' 'case'
       || this.tokenSequence() == 45737 // 'json-item' 'case'
       || this.tokenSequence() == 45766 // 'object' 'case'
       || this.tokenSequence() == 45815 // 'structured-item' 'case'
       || this.tokenSequence() == 48719 // 'array' 'collation'
       || this.tokenSequence() == 48809 // 'json-item' 'collation'
       || this.tokenSequence() == 48838 // 'object' 'collation'
       || this.tokenSequence() == 48887 // 'structured-item' 'collation'
       || this.tokenSequence() == 51279 // 'array' 'contains'
       || this.tokenSequence() == 51369 // 'json-item' 'contains'
       || this.tokenSequence() == 51398 // 'object' 'contains'
       || this.tokenSequence() == 51447 // 'structured-item' 'contains'
       || this.tokenSequence() == 54351 // 'array' 'count'
       || this.tokenSequence() == 54441 // 'json-item' 'count'
       || this.tokenSequence() == 54470 // 'object' 'count'
       || this.tokenSequence() == 54519 // 'structured-item' 'count'
       || this.tokenSequence() == 56399 // 'array' 'default'
       || this.tokenSequence() == 56489 // 'json-item' 'default'
       || this.tokenSequence() == 56518 // 'object' 'default'
       || this.tokenSequence() == 56567 // 'structured-item' 'default'
       || this.tokenSequence() == 58447 // 'array' 'descending'
       || this.tokenSequence() == 58537 // 'json-item' 'descending'
       || this.tokenSequence() == 58566 // 'object' 'descending'
       || this.tokenSequence() == 58615 // 'structured-item' 'descending'
       || this.tokenSequence() == 61007 // 'array' 'div'
       || this.tokenSequence() == 61097 // 'json-item' 'div'
       || this.tokenSequence() == 61126 // 'object' 'div'
       || this.tokenSequence() == 61175 // 'structured-item' 'div'
       || this.tokenSequence() == 63055 // 'array' 'else'
       || this.tokenSequence() == 63145 // 'json-item' 'else'
       || this.tokenSequence() == 63174 // 'object' 'else'
       || this.tokenSequence() == 63223 // 'structured-item' 'else'
       || this.tokenSequence() == 63567 // 'array' 'empty'
       || this.tokenSequence() == 63657 // 'json-item' 'empty'
       || this.tokenSequence() == 63686 // 'object' 'empty'
       || this.tokenSequence() == 63735 // 'structured-item' 'empty'
       || this.tokenSequence() == 65103 // 'array' 'end'
       || this.tokenSequence() == 65193 // 'json-item' 'end'
       || this.tokenSequence() == 65222 // 'object' 'end'
       || this.tokenSequence() == 65271 // 'structured-item' 'end'
       || this.tokenSequence() == 66127 // 'array' 'eq'
       || this.tokenSequence() == 66217 // 'json-item' 'eq'
       || this.tokenSequence() == 66246 // 'object' 'eq'
       || this.tokenSequence() == 66295 // 'structured-item' 'eq'
       || this.tokenSequence() == 67663 // 'array' 'except'
       || this.tokenSequence() == 67753 // 'json-item' 'except'
       || this.tokenSequence() == 67782 // 'object' 'except'
       || this.tokenSequence() == 67831 // 'structured-item' 'except'
       || this.tokenSequence() == 68687 // 'array' 'external'
       || this.tokenSequence() == 68777 // 'json-item' 'external'
       || this.tokenSequence() == 68806 // 'object' 'external'
       || this.tokenSequence() == 68855 // 'structured-item' 'external'
       || this.tokenSequence() == 71247 // 'array' 'for'
       || this.tokenSequence() == 71337 // 'json-item' 'for'
       || this.tokenSequence() == 71366 // 'object' 'for'
       || this.tokenSequence() == 71415 // 'structured-item' 'for'
       || this.tokenSequence() == 75855 // 'array' 'ge'
       || this.tokenSequence() == 75945 // 'json-item' 'ge'
       || this.tokenSequence() == 75974 // 'object' 'ge'
       || this.tokenSequence() == 76023 // 'structured-item' 'ge'
       || this.tokenSequence() == 76879 // 'array' 'group'
       || this.tokenSequence() == 76969 // 'json-item' 'group'
       || this.tokenSequence() == 76998 // 'object' 'group'
       || this.tokenSequence() == 77047 // 'structured-item' 'group'
       || this.tokenSequence() == 77903 // 'array' 'gt'
       || this.tokenSequence() == 77993 // 'json-item' 'gt'
       || this.tokenSequence() == 78022 // 'object' 'gt'
       || this.tokenSequence() == 78071 // 'structured-item' 'gt'
       || this.tokenSequence() == 78415 // 'array' 'idiv'
       || this.tokenSequence() == 78505 // 'json-item' 'idiv'
       || this.tokenSequence() == 78534 // 'object' 'idiv'
       || this.tokenSequence() == 78583 // 'structured-item' 'idiv'
       || this.tokenSequence() == 79951 // 'array' 'in'
       || this.tokenSequence() == 80041 // 'json-item' 'in'
       || this.tokenSequence() == 80070 // 'object' 'in'
       || this.tokenSequence() == 80119 // 'structured-item' 'in'
       || this.tokenSequence() == 83023 // 'array' 'instance'
       || this.tokenSequence() == 83113 // 'json-item' 'instance'
       || this.tokenSequence() == 83142 // 'object' 'instance'
       || this.tokenSequence() == 83191 // 'structured-item' 'instance'
       || this.tokenSequence() == 84047 // 'array' 'intersect'
       || this.tokenSequence() == 84137 // 'json-item' 'intersect'
       || this.tokenSequence() == 84166 // 'object' 'intersect'
       || this.tokenSequence() == 84215 // 'structured-item' 'intersect'
       || this.tokenSequence() == 84559 // 'array' 'into'
       || this.tokenSequence() == 84649 // 'json-item' 'into'
       || this.tokenSequence() == 84678 // 'object' 'into'
       || this.tokenSequence() == 84727 // 'structured-item' 'into'
       || this.tokenSequence() == 85071 // 'array' 'is'
       || this.tokenSequence() == 85161 // 'json-item' 'is'
       || this.tokenSequence() == 85190 // 'object' 'is'
       || this.tokenSequence() == 85239 // 'structured-item' 'is'
       || this.tokenSequence() == 89679 // 'array' 'le'
       || this.tokenSequence() == 89769 // 'json-item' 'le'
       || this.tokenSequence() == 89798 // 'object' 'le'
       || this.tokenSequence() == 89847 // 'structured-item' 'le'
       || this.tokenSequence() == 90703 // 'array' 'let'
       || this.tokenSequence() == 90793 // 'json-item' 'let'
       || this.tokenSequence() == 90822 // 'object' 'let'
       || this.tokenSequence() == 90871 // 'structured-item' 'let'
       || this.tokenSequence() == 92751 // 'array' 'lt'
       || this.tokenSequence() == 92841 // 'json-item' 'lt'
       || this.tokenSequence() == 92870 // 'object' 'lt'
       || this.tokenSequence() == 92919 // 'structured-item' 'lt'
       || this.tokenSequence() == 93775 // 'array' 'mod'
       || this.tokenSequence() == 93865 // 'json-item' 'mod'
       || this.tokenSequence() == 93894 // 'object' 'mod'
       || this.tokenSequence() == 93943 // 'structured-item' 'mod'
       || this.tokenSequence() == 94287 // 'array' 'modify'
       || this.tokenSequence() == 94377 // 'json-item' 'modify'
       || this.tokenSequence() == 94406 // 'object' 'modify'
       || this.tokenSequence() == 94455 // 'structured-item' 'modify'
       || this.tokenSequence() == 96847 // 'array' 'ne'
       || this.tokenSequence() == 96937 // 'json-item' 'ne'
       || this.tokenSequence() == 96966 // 'object' 'ne'
       || this.tokenSequence() == 97015 // 'structured-item' 'ne'
       || this.tokenSequence() == 103503  // 'array' 'only'
       || this.tokenSequence() == 103593  // 'json-item' 'only'
       || this.tokenSequence() == 103622  // 'object' 'only'
       || this.tokenSequence() == 103671  // 'structured-item' 'only'
       || this.tokenSequence() == 104527  // 'array' 'or'
       || this.tokenSequence() == 104617  // 'json-item' 'or'
       || this.tokenSequence() == 104646  // 'object' 'or'
       || this.tokenSequence() == 104695  // 'structured-item' 'or'
       || this.tokenSequence() == 105039  // 'array' 'order'
       || this.tokenSequence() == 105129  // 'json-item' 'order'
       || this.tokenSequence() == 105158  // 'object' 'order'
       || this.tokenSequence() == 105207  // 'structured-item' 'order'
       || this.tokenSequence() == 107087  // 'array' 'paragraphs'
       || this.tokenSequence() == 107177  // 'json-item' 'paragraphs'
       || this.tokenSequence() == 107206  // 'object' 'paragraphs'
       || this.tokenSequence() == 107255  // 'structured-item' 'paragraphs'
       || this.tokenSequence() == 114767  // 'array' 'return'
       || this.tokenSequence() == 114857  // 'json-item' 'return'
       || this.tokenSequence() == 114886  // 'object' 'return'
       || this.tokenSequence() == 114935  // 'structured-item' 'return'
       || this.tokenSequence() == 116815  // 'array' 'satisfies'
       || this.tokenSequence() == 116905  // 'json-item' 'satisfies'
       || this.tokenSequence() == 116934  // 'object' 'satisfies'
       || this.tokenSequence() == 116983  // 'structured-item' 'satisfies'
       || this.tokenSequence() == 118863  // 'array' 'score'
       || this.tokenSequence() == 118953  // 'json-item' 'score'
       || this.tokenSequence() == 118982  // 'object' 'score'
       || this.tokenSequence() == 119031  // 'structured-item' 'score'
       || this.tokenSequence() == 121423  // 'array' 'sentences'
       || this.tokenSequence() == 121513  // 'json-item' 'sentences'
       || this.tokenSequence() == 121542  // 'object' 'sentences'
       || this.tokenSequence() == 121591  // 'structured-item' 'sentences'
       || this.tokenSequence() == 123471  // 'array' 'stable'
       || this.tokenSequence() == 123561  // 'json-item' 'stable'
       || this.tokenSequence() == 123590  // 'object' 'stable'
       || this.tokenSequence() == 123639  // 'structured-item' 'stable'
       || this.tokenSequence() == 123983  // 'array' 'start'
       || this.tokenSequence() == 124073  // 'json-item' 'start'
       || this.tokenSequence() == 124102  // 'object' 'start'
       || this.tokenSequence() == 124151  // 'structured-item' 'start'
       || this.tokenSequence() == 129103  // 'array' 'times'
       || this.tokenSequence() == 129193  // 'json-item' 'times'
       || this.tokenSequence() == 129222  // 'object' 'times'
       || this.tokenSequence() == 129271  // 'structured-item' 'times'
       || this.tokenSequence() == 129615  // 'array' 'to'
       || this.tokenSequence() == 129705  // 'json-item' 'to'
       || this.tokenSequence() == 129734  // 'object' 'to'
       || this.tokenSequence() == 129783  // 'structured-item' 'to'
       || this.tokenSequence() == 133199  // 'array' 'union'
       || this.tokenSequence() == 133289  // 'json-item' 'union'
       || this.tokenSequence() == 133318  // 'object' 'union'
       || this.tokenSequence() == 133367  // 'structured-item' 'union'
       || this.tokenSequence() == 139343  // 'array' 'where'
       || this.tokenSequence() == 139433  // 'json-item' 'where'
       || this.tokenSequence() == 139462  // 'object' 'where'
       || this.tokenSequence() == 139511  // 'structured-item' 'where'
       || this.tokenSequence() == 141391  // 'array' 'with'
       || this.tokenSequence() == 141481  // 'json-item' 'with'
       || this.tokenSequence() == 141510  // 'object' 'with'
       || this.tokenSequence() == 141559  // 'structured-item' 'with'
       || this.tokenSequence() == 142927  // 'array' 'words'
       || this.tokenSequence() == 143017  // 'json-item' 'words'
       || this.tokenSequence() == 143046  // 'object' 'words'
       || this.tokenSequence() == 143095  // 'structured-item' 'words'
       || this.tokenSequence() == 143951  // 'array' '{'
       || this.tokenSequence() == 144041  // 'json-item' '{'
       || this.tokenSequence() == 144070  // 'object' '{'
       || this.tokenSequence() == 144119  // 'structured-item' '{'
       || this.tokenSequence() == 145487  // 'array' '|'
       || this.tokenSequence() == 145577  // 'json-item' '|'
       || this.tokenSequence() == 145606  // 'object' '|'
       || this.tokenSequence() == 145655  // 'structured-item' '|'
       || this.tokenSequence() == 145999  // 'array' '||'
       || this.tokenSequence() == 146089  // 'json-item' '||'
       || this.tokenSequence() == 146118  // 'object' '||'
       || this.tokenSequence() == 146167  // 'structured-item' '||'
       || this.tokenSequence() == 146511  // 'array' '|}'
       || this.tokenSequence() == 146601  // 'json-item' '|}'
       || this.tokenSequence() == 146630  // 'object' '|}'
       || this.tokenSequence() == 146679  // 'structured-item' '|}'
       || this.tokenSequence() == 147023  // 'array' '}'
       || this.tokenSequence() == 147113  // 'json-item' '}'
       || this.tokenSequence() == 147142  // 'object' '}'
       || this.tokenSequence() == 147191) // 'structured-item' '}'
      {
        this.lk = this.memoized(6, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_AtomicOrUnionType();
            this.memoize(6, e0A, -4);
            this.lk = -8;
          }
          catch (p4A)
          {
            try
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.try_JSONTest();
              this.memoize(6, e0A, -6);
              this.lk = -8;
            }
            catch (p6A)
            {
              this.lk = -7;
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.memoize(6, e0A, -7);
            }
          }
        }
      }
      switch (this.tokenSequence())
      {
      case 18003:                   // 'attribute' '('
      case 18017:                   // 'comment' '('
      case 18041:                   // 'document-node' '('
      case 18042:                   // 'element' '('
      case 18108:                   // 'namespace-node' '('
      case 18114:                   // 'node' '('
      case 18140:                   // 'processing-instruction' '('
      case 18150:                   // 'schema-attribute' '('
      case 18151:                   // 'schema-element' '('
      case 18169:                   // 'text' '('
        this.try_KindTest();
        break;
      case 18087:                   // 'item' '('
        this.consumeT(167);         // 'item'
        this.lookahead1W(22);       // S^WS | '(' | '(:'
        this.consumeT(35);          // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.consumeT(38);          // ')'
        break;
      case 33:                      // '%'
      case 18067:                   // 'function' '('
        this.try_FunctionTest();
        break;
      case 35:                      // '('
        this.try_ParenthesizedItemType();
        break;
      case -6:
      case 17999:                   // 'array' '('
      case 18089:                   // 'json-item' '('
      case 18118:                   // 'object' '('
        this.try_JSONTest();
        break;
      case -7:
      case 18167:                   // 'structured-item' '('
        this.try_StructuredItemTest();
        break;
      case -8:
        break;
      default:
        this.try_AtomicOrUnionType();
      }
    }

    private parse_JSONTest()
    {
      this.eventHandler.startNonterminal("JSONTest", this.e0);
      switch (this.token())
      {
      case 169:                     // 'json-item'
        this.parse_JSONItemTest();
        break;
      case 198:                     // 'object'
        this.parse_JSONObjectTest();
        break;
      default:
        this.parse_JSONArrayTest();
      }
      this.eventHandler.endNonterminal("JSONTest", this.e0);
    }

    private try_JSONTest()
    {
      switch (this.token())
      {
      case 169:                     // 'json-item'
        this.try_JSONItemTest();
        break;
      case 198:                     // 'object'
        this.try_JSONObjectTest();
        break;
      default:
        this.try_JSONArrayTest();
      }
    }

    private parse_StructuredItemTest()
    {
      this.eventHandler.startNonterminal("StructuredItemTest", this.e0);
      this.consume(247);            // 'structured-item'
      this.lookahead1W(233);        // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      if (this.token() == 35)       // '('
      {
        this.consume(35);           // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.consume(38);           // ')'
      }
      this.eventHandler.endNonterminal("StructuredItemTest", this.e0);
    }

    private try_StructuredItemTest()
    {
      this.consumeT(247);           // 'structured-item'
      this.lookahead1W(233);        // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      if (this.token() == 35)       // '('
      {
        this.consumeT(35);          // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.consumeT(38);          // ')'
      }
    }

    private parse_JSONItemTest()
    {
      this.eventHandler.startNonterminal("JSONItemTest", this.e0);
      this.consume(169);            // 'json-item'
      this.lookahead1W(233);        // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      if (this.token() == 35)       // '('
      {
        this.consume(35);           // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.consume(38);           // ')'
      }
      this.eventHandler.endNonterminal("JSONItemTest", this.e0);
    }

    private try_JSONItemTest()
    {
      this.consumeT(169);           // 'json-item'
      this.lookahead1W(233);        // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      if (this.token() == 35)       // '('
      {
        this.consumeT(35);          // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.consumeT(38);          // ')'
      }
    }

    private parse_JSONObjectTest()
    {
      this.eventHandler.startNonterminal("JSONObjectTest", this.e0);
      this.consume(198);            // 'object'
      this.lookahead1W(233);        // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      if (this.token() == 35)       // '('
      {
        this.consume(35);           // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.consume(38);           // ')'
      }
      this.eventHandler.endNonterminal("JSONObjectTest", this.e0);
    }

    private try_JSONObjectTest()
    {
      this.consumeT(198);           // 'object'
      this.lookahead1W(233);        // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      if (this.token() == 35)       // '('
      {
        this.consumeT(35);          // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.consumeT(38);          // ')'
      }
    }

    private parse_JSONArrayTest()
    {
      this.eventHandler.startNonterminal("JSONArrayTest", this.e0);
      this.consume(79);             // 'array'
      this.lookahead1W(233);        // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      if (this.token() == 35)       // '('
      {
        this.consume(35);           // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.consume(38);           // ')'
      }
      this.eventHandler.endNonterminal("JSONArrayTest", this.e0);
    }

    private try_JSONArrayTest()
    {
      this.consumeT(79);            // 'array'
      this.lookahead1W(233);        // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      if (this.token() == 35)       // '('
      {
        this.consumeT(35);          // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.consumeT(38);          // ')'
      }
    }

    private parse_AtomicOrUnionType()
    {
      this.eventHandler.startNonterminal("AtomicOrUnionType", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("AtomicOrUnionType", this.e0);
    }

    private try_AtomicOrUnionType()
    {
      this.try_EQName();
    }

    private parse_KindTest()
    {
      this.eventHandler.startNonterminal("KindTest", this.e0);
      switch (this.token())
      {
      case 121:                     // 'document-node'
        this.parse_DocumentTest();
        break;
      case 122:                     // 'element'
        this.parse_ElementTest();
        break;
      case 83:                      // 'attribute'
        this.parse_AttributeTest();
        break;
      case 231:                     // 'schema-element'
        this.parse_SchemaElementTest();
        break;
      case 230:                     // 'schema-attribute'
        this.parse_SchemaAttributeTest();
        break;
      case 220:                     // 'processing-instruction'
        this.parse_PITest();
        break;
      case 97:                      // 'comment'
        this.parse_CommentTest();
        break;
      case 249:                     // 'text'
        this.parse_TextTest();
        break;
      case 188:                     // 'namespace-node'
        this.parse_NamespaceNodeTest();
        break;
      default:
        this.parse_AnyKindTest();
      }
      this.eventHandler.endNonterminal("KindTest", this.e0);
    }

    private try_KindTest()
    {
      switch (this.token())
      {
      case 121:                     // 'document-node'
        this.try_DocumentTest();
        break;
      case 122:                     // 'element'
        this.try_ElementTest();
        break;
      case 83:                      // 'attribute'
        this.try_AttributeTest();
        break;
      case 231:                     // 'schema-element'
        this.try_SchemaElementTest();
        break;
      case 230:                     // 'schema-attribute'
        this.try_SchemaAttributeTest();
        break;
      case 220:                     // 'processing-instruction'
        this.try_PITest();
        break;
      case 97:                      // 'comment'
        this.try_CommentTest();
        break;
      case 249:                     // 'text'
        this.try_TextTest();
        break;
      case 188:                     // 'namespace-node'
        this.try_NamespaceNodeTest();
        break;
      default:
        this.try_AnyKindTest();
      }
    }

    private parse_AnyKindTest()
    {
      this.eventHandler.startNonterminal("AnyKindTest", this.e0);
      this.consume(194);            // 'node'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consume(35);             // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consume(38);             // ')'
      this.eventHandler.endNonterminal("AnyKindTest", this.e0);
    }

    private try_AnyKindTest()
    {
      this.consumeT(194);           // 'node'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consumeT(35);            // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consumeT(38);            // ')'
    }

    private parse_DocumentTest()
    {
      this.eventHandler.startNonterminal("DocumentTest", this.e0);
      this.consume(121);            // 'document-node'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consume(35);             // '('
      this.lookahead1W(154);        // S^WS | '(:' | ')' | 'element' | 'schema-element'
      if (this.token() != 38)       // ')'
      {
        switch (this.token())
        {
        case 122:                   // 'element'
          this.whitespace();
          this.parse_ElementTest();
          break;
        default:
          this.whitespace();
          this.parse_SchemaElementTest();
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consume(38);             // ')'
      this.eventHandler.endNonterminal("DocumentTest", this.e0);
    }

    private try_DocumentTest()
    {
      this.consumeT(121);           // 'document-node'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consumeT(35);            // '('
      this.lookahead1W(154);        // S^WS | '(:' | ')' | 'element' | 'schema-element'
      if (this.token() != 38)       // ')'
      {
        switch (this.token())
        {
        case 122:                   // 'element'
          this.try_ElementTest();
          break;
        default:
          this.try_SchemaElementTest();
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consumeT(38);            // ')'
    }

    private parse_TextTest()
    {
      this.eventHandler.startNonterminal("TextTest", this.e0);
      this.consume(249);            // 'text'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consume(35);             // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consume(38);             // ')'
      this.eventHandler.endNonterminal("TextTest", this.e0);
    }

    private try_TextTest()
    {
      this.consumeT(249);           // 'text'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consumeT(35);            // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consumeT(38);            // ')'
    }

    private parse_CommentTest()
    {
      this.eventHandler.startNonterminal("CommentTest", this.e0);
      this.consume(97);             // 'comment'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consume(35);             // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consume(38);             // ')'
      this.eventHandler.endNonterminal("CommentTest", this.e0);
    }

    private try_CommentTest()
    {
      this.consumeT(97);            // 'comment'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consumeT(35);            // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consumeT(38);            // ')'
    }

    private parse_NamespaceNodeTest()
    {
      this.eventHandler.startNonterminal("NamespaceNodeTest", this.e0);
      this.consume(188);            // 'namespace-node'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consume(35);             // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consume(38);             // ')'
      this.eventHandler.endNonterminal("NamespaceNodeTest", this.e0);
    }

    private try_NamespaceNodeTest()
    {
      this.consumeT(188);           // 'namespace-node'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consumeT(35);            // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consumeT(38);            // ')'
    }

    private parse_PITest()
    {
      this.eventHandler.startNonterminal("PITest", this.e0);
      this.consume(220);            // 'processing-instruction'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consume(35);             // '('
      this.lookahead1W(244);        // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
      if (this.token() != 38)       // ')'
      {
        switch (this.token())
        {
        case 11:                    // StringLiteral
          this.consume(11);         // StringLiteral
          break;
        default:
          this.whitespace();
          this.parse_NCName();
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consume(38);             // ')'
      this.eventHandler.endNonterminal("PITest", this.e0);
    }

    private try_PITest()
    {
      this.consumeT(220);           // 'processing-instruction'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consumeT(35);            // '('
      this.lookahead1W(244);        // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
      if (this.token() != 38)       // ')'
      {
        switch (this.token())
        {
        case 11:                    // StringLiteral
          this.consumeT(11);        // StringLiteral
          break;
        default:
          this.try_NCName();
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consumeT(38);            // ')'
    }

    private parse_AttributeTest()
    {
      this.eventHandler.startNonterminal("AttributeTest", this.e0);
      this.consume(83);             // 'attribute'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consume(35);             // '('
      this.lookahead1W(255);        // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.token() != 38)       // ')'
      {
        this.whitespace();
        this.parse_AttribNameOrWildcard();
        this.lookahead1W(105);      // S^WS | '(:' | ')' | ','
        if (this.token() == 42)     // ','
        {
          this.consume(42);         // ','
          this.lookahead1W(246);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          this.whitespace();
          this.parse_TypeName();
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consume(38);             // ')'
      this.eventHandler.endNonterminal("AttributeTest", this.e0);
    }

    private try_AttributeTest()
    {
      this.consumeT(83);            // 'attribute'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consumeT(35);            // '('
      this.lookahead1W(255);        // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.token() != 38)       // ')'
      {
        this.try_AttribNameOrWildcard();
        this.lookahead1W(105);      // S^WS | '(:' | ')' | ','
        if (this.token() == 42)     // ','
        {
          this.consumeT(42);        // ','
          this.lookahead1W(246);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          this.try_TypeName();
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consumeT(38);            // ')'
    }

    private parse_AttribNameOrWildcard()
    {
      this.eventHandler.startNonterminal("AttribNameOrWildcard", this.e0);
      switch (this.token())
      {
      case 39:                      // '*'
        this.consume(39);           // '*'
        break;
      default:
        this.parse_AttributeName();
      }
      this.eventHandler.endNonterminal("AttribNameOrWildcard", this.e0);
    }

    private try_AttribNameOrWildcard()
    {
      switch (this.token())
      {
      case 39:                      // '*'
        this.consumeT(39);          // '*'
        break;
      default:
        this.try_AttributeName();
      }
    }

    private parse_SchemaAttributeTest()
    {
      this.eventHandler.startNonterminal("SchemaAttributeTest", this.e0);
      this.consume(230);            // 'schema-attribute'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consume(35);             // '('
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_AttributeDeclaration();
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consume(38);             // ')'
      this.eventHandler.endNonterminal("SchemaAttributeTest", this.e0);
    }

    private try_SchemaAttributeTest()
    {
      this.consumeT(230);           // 'schema-attribute'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consumeT(35);            // '('
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_AttributeDeclaration();
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consumeT(38);            // ')'
    }

    private parse_AttributeDeclaration()
    {
      this.eventHandler.startNonterminal("AttributeDeclaration", this.e0);
      this.parse_AttributeName();
      this.eventHandler.endNonterminal("AttributeDeclaration", this.e0);
    }

    private try_AttributeDeclaration()
    {
      this.try_AttributeName();
    }

    private parse_ElementTest()
    {
      this.eventHandler.startNonterminal("ElementTest", this.e0);
      this.consume(122);            // 'element'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consume(35);             // '('
      this.lookahead1W(255);        // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.token() != 38)       // ')'
      {
        this.whitespace();
        this.parse_ElementNameOrWildcard();
        this.lookahead1W(105);      // S^WS | '(:' | ')' | ','
        if (this.token() == 42)     // ','
        {
          this.consume(42);         // ','
          this.lookahead1W(246);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          this.whitespace();
          this.parse_TypeName();
          this.lookahead1W(106);    // S^WS | '(:' | ')' | '?'
          if (this.token() == 65)   // '?'
          {
            this.consume(65);       // '?'
          }
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consume(38);             // ')'
      this.eventHandler.endNonterminal("ElementTest", this.e0);
    }

    private try_ElementTest()
    {
      this.consumeT(122);           // 'element'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consumeT(35);            // '('
      this.lookahead1W(255);        // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.token() != 38)       // ')'
      {
        this.try_ElementNameOrWildcard();
        this.lookahead1W(105);      // S^WS | '(:' | ')' | ','
        if (this.token() == 42)     // ','
        {
          this.consumeT(42);        // ','
          this.lookahead1W(246);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          this.try_TypeName();
          this.lookahead1W(106);    // S^WS | '(:' | ')' | '?'
          if (this.token() == 65)   // '?'
          {
            this.consumeT(65);      // '?'
          }
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consumeT(38);            // ')'
    }

    private parse_ElementNameOrWildcard()
    {
      this.eventHandler.startNonterminal("ElementNameOrWildcard", this.e0);
      switch (this.token())
      {
      case 39:                      // '*'
        this.consume(39);           // '*'
        break;
      default:
        this.parse_ElementName();
      }
      this.eventHandler.endNonterminal("ElementNameOrWildcard", this.e0);
    }

    private try_ElementNameOrWildcard()
    {
      switch (this.token())
      {
      case 39:                      // '*'
        this.consumeT(39);          // '*'
        break;
      default:
        this.try_ElementName();
      }
    }

    private parse_SchemaElementTest()
    {
      this.eventHandler.startNonterminal("SchemaElementTest", this.e0);
      this.consume(231);            // 'schema-element'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consume(35);             // '('
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_ElementDeclaration();
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consume(38);             // ')'
      this.eventHandler.endNonterminal("SchemaElementTest", this.e0);
    }

    private try_SchemaElementTest()
    {
      this.consumeT(231);           // 'schema-element'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consumeT(35);            // '('
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_ElementDeclaration();
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consumeT(38);            // ')'
    }

    private parse_ElementDeclaration()
    {
      this.eventHandler.startNonterminal("ElementDeclaration", this.e0);
      this.parse_ElementName();
      this.eventHandler.endNonterminal("ElementDeclaration", this.e0);
    }

    private try_ElementDeclaration()
    {
      this.try_ElementName();
    }

    private parse_AttributeName()
    {
      this.eventHandler.startNonterminal("AttributeName", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("AttributeName", this.e0);
    }

    private try_AttributeName()
    {
      this.try_EQName();
    }

    private parse_ElementName()
    {
      this.eventHandler.startNonterminal("ElementName", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("ElementName", this.e0);
    }

    private try_ElementName()
    {
      this.try_EQName();
    }

    private parse_SimpleTypeName()
    {
      this.eventHandler.startNonterminal("SimpleTypeName", this.e0);
      this.parse_TypeName();
      this.eventHandler.endNonterminal("SimpleTypeName", this.e0);
    }

    private try_SimpleTypeName()
    {
      this.try_TypeName();
    }

    private parse_TypeName()
    {
      this.eventHandler.startNonterminal("TypeName", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("TypeName", this.e0);
    }

    private try_TypeName()
    {
      this.try_EQName();
    }

    private parse_FunctionTest()
    {
      this.eventHandler.startNonterminal("FunctionTest", this.e0);
      for (;;)
      {
        this.lookahead1W(101);      // S^WS | '%' | '(:' | 'function'
        if (this.token() != 33)     // '%'
        {
          break;
        }
        this.whitespace();
        this.parse_Annotation();
      }
      switch (this.token())
      {
      case 147:                     // 'function'
        this.lookahead2W(22);       // S^WS | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      this.lk = this.memoized(7, this.e0);
      if (this.lk == 0)
      {
        var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
        var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
        var b2A = this.b2; var e2A = this.e2;
        try
        {
          this.try_AnyFunctionTest();
          this.lk = -1;
        }
        catch (p1A)
        {
          this.lk = -2;
        }
        this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
        this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
        this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
        this.memoize(7, this.e0, this.lk);
      }
      switch (this.tokenSequence())
      {
      case -1:
        this.whitespace();
        this.parse_AnyFunctionTest();
        break;
      default:
        this.whitespace();
        this.parse_TypedFunctionTest();
      }
      this.eventHandler.endNonterminal("FunctionTest", this.e0);
    }

    private try_FunctionTest()
    {
      for (;;)
      {
        this.lookahead1W(101);      // S^WS | '%' | '(:' | 'function'
        if (this.token() != 33)     // '%'
        {
          break;
        }
        this.try_Annotation();
      }
      switch (this.token())
      {
      case 147:                     // 'function'
        this.lookahead2W(22);       // S^WS | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      this.lk = this.memoized(7, this.e0);
      if (this.lk == 0)
      {
        var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
        var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
        var b2A = this.b2; var e2A = this.e2;
        try
        {
          this.try_AnyFunctionTest();
          this.memoize(7, e0A, -1);
          this.lk = -3;
        }
        catch (p1A)
        {
          this.lk = -2;
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(7, e0A, -2);
        }
      }
      switch (this.tokenSequence())
      {
      case -1:
        this.try_AnyFunctionTest();
        break;
      case -3:
        break;
      default:
        this.try_TypedFunctionTest();
      }
    }

    private parse_AnyFunctionTest()
    {
      this.eventHandler.startNonterminal("AnyFunctionTest", this.e0);
      this.consume(147);            // 'function'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consume(35);             // '('
      this.lookahead1W(24);         // S^WS | '(:' | '*'
      this.consume(39);             // '*'
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consume(38);             // ')'
      this.eventHandler.endNonterminal("AnyFunctionTest", this.e0);
    }

    private try_AnyFunctionTest()
    {
      this.consumeT(147);           // 'function'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consumeT(35);            // '('
      this.lookahead1W(24);         // S^WS | '(:' | '*'
      this.consumeT(39);            // '*'
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consumeT(38);            // ')'
    }

    private parse_TypedFunctionTest()
    {
      this.eventHandler.startNonterminal("TypedFunctionTest", this.e0);
      this.consume(147);            // 'function'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consume(35);             // '('
      this.lookahead1W(259);        // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.token() != 38)       // ')'
      {
        this.whitespace();
        this.parse_SequenceType();
        for (;;)
        {
          this.lookahead1W(105);    // S^WS | '(:' | ')' | ','
          if (this.token() != 42)   // ','
          {
            break;
          }
          this.consume(42);         // ','
          this.lookahead1W(254);    // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          this.whitespace();
          this.parse_SequenceType();
        }
      }
      this.consume(38);             // ')'
      this.lookahead1W(33);         // S^WS | '(:' | 'as'
      this.consume(80);             // 'as'
      this.lookahead1W(254);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_SequenceType();
      this.eventHandler.endNonterminal("TypedFunctionTest", this.e0);
    }

    private try_TypedFunctionTest()
    {
      this.consumeT(147);           // 'function'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consumeT(35);            // '('
      this.lookahead1W(259);        // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.token() != 38)       // ')'
      {
        this.try_SequenceType();
        for (;;)
        {
          this.lookahead1W(105);    // S^WS | '(:' | ')' | ','
          if (this.token() != 42)   // ','
          {
            break;
          }
          this.consumeT(42);        // ','
          this.lookahead1W(254);    // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          this.try_SequenceType();
        }
      }
      this.consumeT(38);            // ')'
      this.lookahead1W(33);         // S^WS | '(:' | 'as'
      this.consumeT(80);            // 'as'
      this.lookahead1W(254);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_SequenceType();
    }

    private parse_ParenthesizedItemType()
    {
      this.eventHandler.startNonterminal("ParenthesizedItemType", this.e0);
      this.consume(35);             // '('
      this.lookahead1W(254);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_ItemType();
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consume(38);             // ')'
      this.eventHandler.endNonterminal("ParenthesizedItemType", this.e0);
    }

    private try_ParenthesizedItemType()
    {
      this.consumeT(35);            // '('
      this.lookahead1W(254);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_ItemType();
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.consumeT(38);            // ')'
    }

    private parse_RevalidationDecl()
    {
      this.eventHandler.startNonterminal("RevalidationDecl", this.e0);
      this.consume(109);            // 'declare'
      this.lookahead1W(75);         // S^WS | '(:' | 'revalidation'
      this.consume(226);            // 'revalidation'
      this.lookahead1W(162);        // S^WS | '(:' | 'lax' | 'skip' | 'strict'
      switch (this.token())
      {
      case 245:                     // 'strict'
        this.consume(245);          // 'strict'
        break;
      case 174:                     // 'lax'
        this.consume(174);          // 'lax'
        break;
      default:
        this.consume(238);          // 'skip'
      }
      this.eventHandler.endNonterminal("RevalidationDecl", this.e0);
    }

    private parse_InsertExprTargetChoice()
    {
      this.eventHandler.startNonterminal("InsertExprTargetChoice", this.e0);
      switch (this.token())
      {
      case 71:                      // 'after'
        this.consume(71);           // 'after'
        break;
      case 85:                      // 'before'
        this.consume(85);           // 'before'
        break;
      default:
        if (this.token() == 80)     // 'as'
        {
          this.consume(80);         // 'as'
          this.lookahead1W(123);    // S^WS | '(:' | 'first' | 'last'
          switch (this.token())
          {
          case 136:                 // 'first'
            this.consume(136);      // 'first'
            break;
          default:
            this.consume(173);      // 'last'
          }
        }
        this.lookahead1W(57);       // S^WS | '(:' | 'into'
        this.consume(165);          // 'into'
      }
      this.eventHandler.endNonterminal("InsertExprTargetChoice", this.e0);
    }

    private try_InsertExprTargetChoice()
    {
      switch (this.token())
      {
      case 71:                      // 'after'
        this.consumeT(71);          // 'after'
        break;
      case 85:                      // 'before'
        this.consumeT(85);          // 'before'
        break;
      default:
        if (this.token() == 80)     // 'as'
        {
          this.consumeT(80);        // 'as'
          this.lookahead1W(123);    // S^WS | '(:' | 'first' | 'last'
          switch (this.token())
          {
          case 136:                 // 'first'
            this.consumeT(136);     // 'first'
            break;
          default:
            this.consumeT(173);     // 'last'
          }
        }
        this.lookahead1W(57);       // S^WS | '(:' | 'into'
        this.consumeT(165);         // 'into'
      }
    }

    private parse_InsertExpr()
    {
      this.eventHandler.startNonterminal("InsertExpr", this.e0);
      this.consume(161);            // 'insert'
      this.lookahead1W(133);        // S^WS | '(:' | 'node' | 'nodes'
      switch (this.token())
      {
      case 194:                     // 'node'
        this.consume(194);          // 'node'
        break;
      default:
        this.consume(195);          // 'nodes'
      }
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_SourceExpr();
      this.whitespace();
      this.parse_InsertExprTargetChoice();
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_TargetExpr();
      this.eventHandler.endNonterminal("InsertExpr", this.e0);
    }

    private try_InsertExpr()
    {
      this.consumeT(161);           // 'insert'
      this.lookahead1W(133);        // S^WS | '(:' | 'node' | 'nodes'
      switch (this.token())
      {
      case 194:                     // 'node'
        this.consumeT(194);         // 'node'
        break;
      default:
        this.consumeT(195);         // 'nodes'
      }
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_SourceExpr();
      this.try_InsertExprTargetChoice();
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_TargetExpr();
    }

    private parse_DeleteExpr()
    {
      this.eventHandler.startNonterminal("DeleteExpr", this.e0);
      this.consume(111);            // 'delete'
      this.lookahead1W(133);        // S^WS | '(:' | 'node' | 'nodes'
      switch (this.token())
      {
      case 194:                     // 'node'
        this.consume(194);          // 'node'
        break;
      default:
        this.consume(195);          // 'nodes'
      }
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_TargetExpr();
      this.eventHandler.endNonterminal("DeleteExpr", this.e0);
    }

    private try_DeleteExpr()
    {
      this.consumeT(111);           // 'delete'
      this.lookahead1W(133);        // S^WS | '(:' | 'node' | 'nodes'
      switch (this.token())
      {
      case 194:                     // 'node'
        this.consumeT(194);         // 'node'
        break;
      default:
        this.consumeT(195);         // 'nodes'
      }
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_TargetExpr();
    }

    private parse_ReplaceExpr()
    {
      this.eventHandler.startNonterminal("ReplaceExpr", this.e0);
      this.consume(223);            // 'replace'
      this.lookahead1W(134);        // S^WS | '(:' | 'node' | 'value'
      if (this.token() == 267)      // 'value'
      {
        this.consume(267);          // 'value'
        this.lookahead1W(67);       // S^WS | '(:' | 'of'
        this.consume(200);          // 'of'
      }
      this.lookahead1W(65);         // S^WS | '(:' | 'node'
      this.consume(194);            // 'node'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_TargetExpr();
      this.consume(276);            // 'with'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("ReplaceExpr", this.e0);
    }

    private try_ReplaceExpr()
    {
      this.consumeT(223);           // 'replace'
      this.lookahead1W(134);        // S^WS | '(:' | 'node' | 'value'
      if (this.token() == 267)      // 'value'
      {
        this.consumeT(267);         // 'value'
        this.lookahead1W(67);       // S^WS | '(:' | 'of'
        this.consumeT(200);         // 'of'
      }
      this.lookahead1W(65);         // S^WS | '(:' | 'node'
      this.consumeT(194);           // 'node'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_TargetExpr();
      this.consumeT(276);           // 'with'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_RenameExpr()
    {
      this.eventHandler.startNonterminal("RenameExpr", this.e0);
      this.consume(222);            // 'rename'
      this.lookahead1W(65);         // S^WS | '(:' | 'node'
      this.consume(194);            // 'node'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_TargetExpr();
      this.consume(80);             // 'as'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_NewNameExpr();
      this.eventHandler.endNonterminal("RenameExpr", this.e0);
    }

    private try_RenameExpr()
    {
      this.consumeT(222);           // 'rename'
      this.lookahead1W(65);         // S^WS | '(:' | 'node'
      this.consumeT(194);           // 'node'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_TargetExpr();
      this.consumeT(80);            // 'as'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_NewNameExpr();
    }

    private parse_SourceExpr()
    {
      this.eventHandler.startNonterminal("SourceExpr", this.e0);
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("SourceExpr", this.e0);
    }

    private try_SourceExpr()
    {
      this.try_ExprSingle();
    }

    private parse_TargetExpr()
    {
      this.eventHandler.startNonterminal("TargetExpr", this.e0);
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("TargetExpr", this.e0);
    }

    private try_TargetExpr()
    {
      this.try_ExprSingle();
    }

    private parse_NewNameExpr()
    {
      this.eventHandler.startNonterminal("NewNameExpr", this.e0);
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("NewNameExpr", this.e0);
    }

    private try_NewNameExpr()
    {
      this.try_ExprSingle();
    }

    private parse_TransformExpr()
    {
      this.eventHandler.startNonterminal("TransformExpr", this.e0);
      this.consume(104);            // 'copy'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.whitespace();
      this.parse_TransformSpec();
      for (;;)
      {
        if (this.token() != 42)     // ','
        {
          break;
        }
        this.consume(42);           // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.whitespace();
        this.parse_TransformSpec();
      }
      this.consume(184);            // 'modify'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.consume(224);            // 'return'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("TransformExpr", this.e0);
    }

    private try_TransformExpr()
    {
      this.consumeT(104);           // 'copy'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.try_TransformSpec();
      for (;;)
      {
        if (this.token() != 42)     // ','
        {
          break;
        }
        this.consumeT(42);          // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.try_TransformSpec();
      }
      this.consumeT(184);           // 'modify'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
      this.consumeT(224);           // 'return'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_TransformSpec()
    {
      this.eventHandler.startNonterminal("TransformSpec", this.e0);
      this.consume(31);             // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(28);         // S^WS | '(:' | ':='
      this.consume(53);             // ':='
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("TransformSpec", this.e0);
    }

    private try_TransformSpec()
    {
      this.consumeT(31);            // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
      this.lookahead1W(28);         // S^WS | '(:' | ':='
      this.consumeT(53);            // ':='
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_FTSelection()
    {
      this.eventHandler.startNonterminal("FTSelection", this.e0);
      this.parse_FTOr();
      for (;;)
      {
        this.lookahead1W(212);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
        switch (this.token())
        {
        case 82:                    // 'at'
          this.lookahead2W(161);    // S^WS | '(:' | 'end' | 'position' | 'start'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.tokenSequence() != 116 // 'different'
         && this.tokenSequence() != 118 // 'distance'
         && this.tokenSequence() != 128 // 'entire'
         && this.tokenSequence() != 206 // 'ordered'
         && this.tokenSequence() != 227 // 'same'
         && this.tokenSequence() != 275 // 'window'
         && this.tokenSequence() != 65106 // 'at' 'end'
         && this.tokenSequence() != 123986) // 'at' 'start'
        {
          break;
        }
        this.whitespace();
        this.parse_FTPosFilter();
      }
      this.eventHandler.endNonterminal("FTSelection", this.e0);
    }

    private try_FTSelection()
    {
      this.try_FTOr();
      for (;;)
      {
        this.lookahead1W(212);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
        switch (this.token())
        {
        case 82:                    // 'at'
          this.lookahead2W(161);    // S^WS | '(:' | 'end' | 'position' | 'start'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.tokenSequence() != 116 // 'different'
         && this.tokenSequence() != 118 // 'distance'
         && this.tokenSequence() != 128 // 'entire'
         && this.tokenSequence() != 206 // 'ordered'
         && this.tokenSequence() != 227 // 'same'
         && this.tokenSequence() != 275 // 'window'
         && this.tokenSequence() != 65106 // 'at' 'end'
         && this.tokenSequence() != 123986) // 'at' 'start'
        {
          break;
        }
        this.try_FTPosFilter();
      }
    }

    private parse_FTWeight()
    {
      this.eventHandler.startNonterminal("FTWeight", this.e0);
      this.consume(270);            // 'weight'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.consume(281);            // '{'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.consume(287);            // '}'
      this.eventHandler.endNonterminal("FTWeight", this.e0);
    }

    private try_FTWeight()
    {
      this.consumeT(270);           // 'weight'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.consumeT(281);           // '{'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.consumeT(287);           // '}'
    }

    private parse_FTOr()
    {
      this.eventHandler.startNonterminal("FTOr", this.e0);
      this.parse_FTAnd();
      for (;;)
      {
        if (this.token() != 146)    // 'ftor'
        {
          break;
        }
        this.consume(146);          // 'ftor'
        this.lookahead1W(177);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.whitespace();
        this.parse_FTAnd();
      }
      this.eventHandler.endNonterminal("FTOr", this.e0);
    }

    private try_FTOr()
    {
      this.try_FTAnd();
      for (;;)
      {
        if (this.token() != 146)    // 'ftor'
        {
          break;
        }
        this.consumeT(146);         // 'ftor'
        this.lookahead1W(177);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.try_FTAnd();
      }
    }

    private parse_FTAnd()
    {
      this.eventHandler.startNonterminal("FTAnd", this.e0);
      this.parse_FTMildNot();
      for (;;)
      {
        if (this.token() != 144)    // 'ftand'
        {
          break;
        }
        this.consume(144);          // 'ftand'
        this.lookahead1W(177);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.whitespace();
        this.parse_FTMildNot();
      }
      this.eventHandler.endNonterminal("FTAnd", this.e0);
    }

    private try_FTAnd()
    {
      this.try_FTMildNot();
      for (;;)
      {
        if (this.token() != 144)    // 'ftand'
        {
          break;
        }
        this.consumeT(144);         // 'ftand'
        this.lookahead1W(177);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.try_FTMildNot();
      }
    }

    private parse_FTMildNot()
    {
      this.eventHandler.startNonterminal("FTMildNot", this.e0);
      this.parse_FTUnaryNot();
      for (;;)
      {
        this.lookahead1W(213);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
        if (this.token() != 196)    // 'not'
        {
          break;
        }
        this.consume(196);          // 'not'
        this.lookahead1W(56);       // S^WS | '(:' | 'in'
        this.consume(156);          // 'in'
        this.lookahead1W(177);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.whitespace();
        this.parse_FTUnaryNot();
      }
      this.eventHandler.endNonterminal("FTMildNot", this.e0);
    }

    private try_FTMildNot()
    {
      this.try_FTUnaryNot();
      for (;;)
      {
        this.lookahead1W(213);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
        if (this.token() != 196)    // 'not'
        {
          break;
        }
        this.consumeT(196);         // 'not'
        this.lookahead1W(56);       // S^WS | '(:' | 'in'
        this.consumeT(156);         // 'in'
        this.lookahead1W(177);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.try_FTUnaryNot();
      }
    }

    private parse_FTUnaryNot()
    {
      this.eventHandler.startNonterminal("FTUnaryNot", this.e0);
      if (this.token() == 145)      // 'ftnot'
      {
        this.consume(145);          // 'ftnot'
      }
      this.lookahead1W(164);        // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
      this.whitespace();
      this.parse_FTPrimaryWithOptions();
      this.eventHandler.endNonterminal("FTUnaryNot", this.e0);
    }

    private try_FTUnaryNot()
    {
      if (this.token() == 145)      // 'ftnot'
      {
        this.consumeT(145);         // 'ftnot'
      }
      this.lookahead1W(164);        // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
      this.try_FTPrimaryWithOptions();
    }

    private parse_FTPrimaryWithOptions()
    {
      this.eventHandler.startNonterminal("FTPrimaryWithOptions", this.e0);
      this.parse_FTPrimary();
      this.lookahead1W(214);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (this.token() == 265)      // 'using'
      {
        this.whitespace();
        this.parse_FTMatchOptions();
      }
      if (this.token() == 270)      // 'weight'
      {
        this.whitespace();
        this.parse_FTWeight();
      }
      this.eventHandler.endNonterminal("FTPrimaryWithOptions", this.e0);
    }

    private try_FTPrimaryWithOptions()
    {
      this.try_FTPrimary();
      this.lookahead1W(214);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (this.token() == 265)      // 'using'
      {
        this.try_FTMatchOptions();
      }
      if (this.token() == 270)      // 'weight'
      {
        this.try_FTWeight();
      }
    }

    private parse_FTPrimary()
    {
      this.eventHandler.startNonterminal("FTPrimary", this.e0);
      switch (this.token())
      {
      case 35:                      // '('
        this.consume(35);           // '('
        this.lookahead1W(177);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.whitespace();
        this.parse_FTSelection();
        this.consume(38);           // ')'
        break;
      case 36:                      // '(#'
        this.parse_FTExtensionSelection();
        break;
      default:
        this.parse_FTWords();
        this.lookahead1W(215);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
        if (this.token() == 199)    // 'occurs'
        {
          this.whitespace();
          this.parse_FTTimes();
        }
      }
      this.eventHandler.endNonterminal("FTPrimary", this.e0);
    }

    private try_FTPrimary()
    {
      switch (this.token())
      {
      case 35:                      // '('
        this.consumeT(35);          // '('
        this.lookahead1W(177);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.try_FTSelection();
        this.consumeT(38);          // ')'
        break;
      case 36:                      // '(#'
        this.try_FTExtensionSelection();
        break;
      default:
        this.try_FTWords();
        this.lookahead1W(215);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
        if (this.token() == 199)    // 'occurs'
        {
          this.try_FTTimes();
        }
      }
    }

    private parse_FTWords()
    {
      this.eventHandler.startNonterminal("FTWords", this.e0);
      this.parse_FTWordsValue();
      this.lookahead1W(221);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (this.token() == 72        // 'all'
       || this.token() == 77        // 'any'
       || this.token() == 214)      // 'phrase'
      {
        this.whitespace();
        this.parse_FTAnyallOption();
      }
      this.eventHandler.endNonterminal("FTWords", this.e0);
    }

    private try_FTWords()
    {
      this.try_FTWordsValue();
      this.lookahead1W(221);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (this.token() == 72        // 'all'
       || this.token() == 77        // 'any'
       || this.token() == 214)      // 'phrase'
      {
        this.try_FTAnyallOption();
      }
    }

    private parse_FTWordsValue()
    {
      this.eventHandler.startNonterminal("FTWordsValue", this.e0);
      switch (this.token())
      {
      case 11:                      // StringLiteral
        this.consume(11);           // StringLiteral
        break;
      default:
        this.consume(281);          // '{'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_Expr();
        this.consume(287);          // '}'
      }
      this.eventHandler.endNonterminal("FTWordsValue", this.e0);
    }

    private try_FTWordsValue()
    {
      switch (this.token())
      {
      case 11:                      // StringLiteral
        this.consumeT(11);          // StringLiteral
        break;
      default:
        this.consumeT(281);         // '{'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_Expr();
        this.consumeT(287);         // '}'
      }
    }

    private parse_FTExtensionSelection()
    {
      this.eventHandler.startNonterminal("FTExtensionSelection", this.e0);
      for (;;)
      {
        this.whitespace();
        this.parse_Pragma();
        this.lookahead1W(104);      // S^WS | '(#' | '(:' | '{'
        if (this.token() != 36)     // '(#'
        {
          break;
        }
      }
      this.consume(281);            // '{'
      this.lookahead1W(184);        // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
      if (this.token() != 287)      // '}'
      {
        this.whitespace();
        this.parse_FTSelection();
      }
      this.consume(287);            // '}'
      this.eventHandler.endNonterminal("FTExtensionSelection", this.e0);
    }

    private try_FTExtensionSelection()
    {
      for (;;)
      {
        this.try_Pragma();
        this.lookahead1W(104);      // S^WS | '(#' | '(:' | '{'
        if (this.token() != 36)     // '(#'
        {
          break;
        }
      }
      this.consumeT(281);           // '{'
      this.lookahead1W(184);        // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
      if (this.token() != 287)      // '}'
      {
        this.try_FTSelection();
      }
      this.consumeT(287);           // '}'
    }

    private parse_FTAnyallOption()
    {
      this.eventHandler.startNonterminal("FTAnyallOption", this.e0);
      switch (this.token())
      {
      case 77:                      // 'any'
        this.consume(77);           // 'any'
        this.lookahead1W(218);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
        if (this.token() == 278)    // 'word'
        {
          this.consume(278);        // 'word'
        }
        break;
      case 72:                      // 'all'
        this.consume(72);           // 'all'
        this.lookahead1W(219);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
        if (this.token() == 279)    // 'words'
        {
          this.consume(279);        // 'words'
        }
        break;
      default:
        this.consume(214);          // 'phrase'
      }
      this.eventHandler.endNonterminal("FTAnyallOption", this.e0);
    }

    private try_FTAnyallOption()
    {
      switch (this.token())
      {
      case 77:                      // 'any'
        this.consumeT(77);          // 'any'
        this.lookahead1W(218);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
        if (this.token() == 278)    // 'word'
        {
          this.consumeT(278);       // 'word'
        }
        break;
      case 72:                      // 'all'
        this.consumeT(72);          // 'all'
        this.lookahead1W(219);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
        if (this.token() == 279)    // 'words'
        {
          this.consumeT(279);       // 'words'
        }
        break;
      default:
        this.consumeT(214);         // 'phrase'
      }
    }

    private parse_FTTimes()
    {
      this.eventHandler.startNonterminal("FTTimes", this.e0);
      this.consume(199);            // 'occurs'
      this.lookahead1W(159);        // S^WS | '(:' | 'at' | 'exactly' | 'from'
      this.whitespace();
      this.parse_FTRange();
      this.consume(252);            // 'times'
      this.eventHandler.endNonterminal("FTTimes", this.e0);
    }

    private try_FTTimes()
    {
      this.consumeT(199);           // 'occurs'
      this.lookahead1W(159);        // S^WS | '(:' | 'at' | 'exactly' | 'from'
      this.try_FTRange();
      this.consumeT(252);           // 'times'
    }

    private parse_FTRange()
    {
      this.eventHandler.startNonterminal("FTRange", this.e0);
      switch (this.token())
      {
      case 131:                     // 'exactly'
        this.consume(131);          // 'exactly'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_AdditiveExpr();
        break;
      case 82:                      // 'at'
        this.consume(82);           // 'at'
        this.lookahead1W(129);      // S^WS | '(:' | 'least' | 'most'
        switch (this.token())
        {
        case 176:                   // 'least'
          this.consume(176);        // 'least'
          this.lookahead1W(266);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
          this.whitespace();
          this.parse_AdditiveExpr();
          break;
        default:
          this.consume(186);        // 'most'
          this.lookahead1W(266);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
          this.whitespace();
          this.parse_AdditiveExpr();
        }
        break;
      default:
        this.consume(142);          // 'from'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_AdditiveExpr();
        this.consume(253);          // 'to'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_AdditiveExpr();
      }
      this.eventHandler.endNonterminal("FTRange", this.e0);
    }

    private try_FTRange()
    {
      switch (this.token())
      {
      case 131:                     // 'exactly'
        this.consumeT(131);         // 'exactly'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_AdditiveExpr();
        break;
      case 82:                      // 'at'
        this.consumeT(82);          // 'at'
        this.lookahead1W(129);      // S^WS | '(:' | 'least' | 'most'
        switch (this.token())
        {
        case 176:                   // 'least'
          this.consumeT(176);       // 'least'
          this.lookahead1W(266);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
          this.try_AdditiveExpr();
          break;
        default:
          this.consumeT(186);       // 'most'
          this.lookahead1W(266);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
          this.try_AdditiveExpr();
        }
        break;
      default:
        this.consumeT(142);         // 'from'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_AdditiveExpr();
        this.consumeT(253);         // 'to'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_AdditiveExpr();
      }
    }

    private parse_FTPosFilter()
    {
      this.eventHandler.startNonterminal("FTPosFilter", this.e0);
      switch (this.token())
      {
      case 206:                     // 'ordered'
        this.parse_FTOrder();
        break;
      case 275:                     // 'window'
        this.parse_FTWindow();
        break;
      case 118:                     // 'distance'
        this.parse_FTDistance();
        break;
      case 116:                     // 'different'
      case 227:                     // 'same'
        this.parse_FTScope();
        break;
      default:
        this.parse_FTContent();
      }
      this.eventHandler.endNonterminal("FTPosFilter", this.e0);
    }

    private try_FTPosFilter()
    {
      switch (this.token())
      {
      case 206:                     // 'ordered'
        this.try_FTOrder();
        break;
      case 275:                     // 'window'
        this.try_FTWindow();
        break;
      case 118:                     // 'distance'
        this.try_FTDistance();
        break;
      case 116:                     // 'different'
      case 227:                     // 'same'
        this.try_FTScope();
        break;
      default:
        this.try_FTContent();
      }
    }

    private parse_FTOrder()
    {
      this.eventHandler.startNonterminal("FTOrder", this.e0);
      this.consume(206);            // 'ordered'
      this.eventHandler.endNonterminal("FTOrder", this.e0);
    }

    private try_FTOrder()
    {
      this.consumeT(206);           // 'ordered'
    }

    private parse_FTWindow()
    {
      this.eventHandler.startNonterminal("FTWindow", this.e0);
      this.consume(275);            // 'window'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      this.whitespace();
      this.parse_AdditiveExpr();
      this.whitespace();
      this.parse_FTUnit();
      this.eventHandler.endNonterminal("FTWindow", this.e0);
    }

    private try_FTWindow()
    {
      this.consumeT(275);           // 'window'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      this.try_AdditiveExpr();
      this.try_FTUnit();
    }

    private parse_FTDistance()
    {
      this.eventHandler.startNonterminal("FTDistance", this.e0);
      this.consume(118);            // 'distance'
      this.lookahead1W(159);        // S^WS | '(:' | 'at' | 'exactly' | 'from'
      this.whitespace();
      this.parse_FTRange();
      this.whitespace();
      this.parse_FTUnit();
      this.eventHandler.endNonterminal("FTDistance", this.e0);
    }

    private try_FTDistance()
    {
      this.consumeT(118);           // 'distance'
      this.lookahead1W(159);        // S^WS | '(:' | 'at' | 'exactly' | 'from'
      this.try_FTRange();
      this.try_FTUnit();
    }

    private parse_FTUnit()
    {
      this.eventHandler.startNonterminal("FTUnit", this.e0);
      switch (this.token())
      {
      case 279:                     // 'words'
        this.consume(279);          // 'words'
        break;
      case 237:                     // 'sentences'
        this.consume(237);          // 'sentences'
        break;
      default:
        this.consume(209);          // 'paragraphs'
      }
      this.eventHandler.endNonterminal("FTUnit", this.e0);
    }

    private try_FTUnit()
    {
      switch (this.token())
      {
      case 279:                     // 'words'
        this.consumeT(279);         // 'words'
        break;
      case 237:                     // 'sentences'
        this.consumeT(237);         // 'sentences'
        break;
      default:
        this.consumeT(209);         // 'paragraphs'
      }
    }

    private parse_FTScope()
    {
      this.eventHandler.startNonterminal("FTScope", this.e0);
      switch (this.token())
      {
      case 227:                     // 'same'
        this.consume(227);          // 'same'
        break;
      default:
        this.consume(116);          // 'different'
      }
      this.lookahead1W(136);        // S^WS | '(:' | 'paragraph' | 'sentence'
      this.whitespace();
      this.parse_FTBigUnit();
      this.eventHandler.endNonterminal("FTScope", this.e0);
    }

    private try_FTScope()
    {
      switch (this.token())
      {
      case 227:                     // 'same'
        this.consumeT(227);         // 'same'
        break;
      default:
        this.consumeT(116);         // 'different'
      }
      this.lookahead1W(136);        // S^WS | '(:' | 'paragraph' | 'sentence'
      this.try_FTBigUnit();
    }

    private parse_FTBigUnit()
    {
      this.eventHandler.startNonterminal("FTBigUnit", this.e0);
      switch (this.token())
      {
      case 236:                     // 'sentence'
        this.consume(236);          // 'sentence'
        break;
      default:
        this.consume(208);          // 'paragraph'
      }
      this.eventHandler.endNonterminal("FTBigUnit", this.e0);
    }

    private try_FTBigUnit()
    {
      switch (this.token())
      {
      case 236:                     // 'sentence'
        this.consumeT(236);         // 'sentence'
        break;
      default:
        this.consumeT(208);         // 'paragraph'
      }
    }

    private parse_FTContent()
    {
      this.eventHandler.startNonterminal("FTContent", this.e0);
      switch (this.token())
      {
      case 82:                      // 'at'
        this.consume(82);           // 'at'
        this.lookahead1W(121);      // S^WS | '(:' | 'end' | 'start'
        switch (this.token())
        {
        case 242:                   // 'start'
          this.consume(242);        // 'start'
          break;
        default:
          this.consume(127);        // 'end'
        }
        break;
      default:
        this.consume(128);          // 'entire'
        this.lookahead1W(45);       // S^WS | '(:' | 'content'
        this.consume(101);          // 'content'
      }
      this.eventHandler.endNonterminal("FTContent", this.e0);
    }

    private try_FTContent()
    {
      switch (this.token())
      {
      case 82:                      // 'at'
        this.consumeT(82);          // 'at'
        this.lookahead1W(121);      // S^WS | '(:' | 'end' | 'start'
        switch (this.token())
        {
        case 242:                   // 'start'
          this.consumeT(242);       // 'start'
          break;
        default:
          this.consumeT(127);       // 'end'
        }
        break;
      default:
        this.consumeT(128);         // 'entire'
        this.lookahead1W(45);       // S^WS | '(:' | 'content'
        this.consumeT(101);         // 'content'
      }
    }

    private parse_FTMatchOptions()
    {
      this.eventHandler.startNonterminal("FTMatchOptions", this.e0);
      for (;;)
      {
        this.consume(265);          // 'using'
        this.lookahead1W(205);      // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
        this.whitespace();
        this.parse_FTMatchOption();
        this.lookahead1W(214);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
        if (this.token() != 265)    // 'using'
        {
          break;
        }
      }
      this.eventHandler.endNonterminal("FTMatchOptions", this.e0);
    }

    private try_FTMatchOptions()
    {
      for (;;)
      {
        this.consumeT(265);         // 'using'
        this.lookahead1W(205);      // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
        this.try_FTMatchOption();
        this.lookahead1W(214);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
        if (this.token() != 265)    // 'using'
        {
          break;
        }
      }
    }

    private parse_FTMatchOption()
    {
      this.eventHandler.startNonterminal("FTMatchOption", this.e0);
      switch (this.token())
      {
      case 191:                     // 'no'
        this.lookahead2W(176);      // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.tokenSequence())
      {
      case 172:                     // 'language'
        this.parse_FTLanguageOption();
        break;
      case 274:                     // 'wildcards'
      case 140479:                  // 'no' 'wildcards'
        this.parse_FTWildCardOption();
        break;
      case 251:                     // 'thesaurus'
      case 128703:                  // 'no' 'thesaurus'
        this.parse_FTThesaurusOption();
        break;
      case 243:                     // 'stemming'
      case 124607:                  // 'no' 'stemming'
        this.parse_FTStemOption();
        break;
      case 115:                     // 'diacritics'
        this.parse_FTDiacriticsOption();
        break;
      case 244:                     // 'stop'
      case 125119:                  // 'no' 'stop'
        this.parse_FTStopWordOption();
        break;
      case 203:                     // 'option'
        this.parse_FTExtensionOption();
        break;
      default:
        this.parse_FTCaseOption();
      }
      this.eventHandler.endNonterminal("FTMatchOption", this.e0);
    }

    private try_FTMatchOption()
    {
      switch (this.token())
      {
      case 191:                     // 'no'
        this.lookahead2W(176);      // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.tokenSequence())
      {
      case 172:                     // 'language'
        this.try_FTLanguageOption();
        break;
      case 274:                     // 'wildcards'
      case 140479:                  // 'no' 'wildcards'
        this.try_FTWildCardOption();
        break;
      case 251:                     // 'thesaurus'
      case 128703:                  // 'no' 'thesaurus'
        this.try_FTThesaurusOption();
        break;
      case 243:                     // 'stemming'
      case 124607:                  // 'no' 'stemming'
        this.try_FTStemOption();
        break;
      case 115:                     // 'diacritics'
        this.try_FTDiacriticsOption();
        break;
      case 244:                     // 'stop'
      case 125119:                  // 'no' 'stop'
        this.try_FTStopWordOption();
        break;
      case 203:                     // 'option'
        this.try_FTExtensionOption();
        break;
      default:
        this.try_FTCaseOption();
      }
    }

    private parse_FTCaseOption()
    {
      this.eventHandler.startNonterminal("FTCaseOption", this.e0);
      switch (this.token())
      {
      case 89:                      // 'case'
        this.consume(89);           // 'case'
        this.lookahead1W(128);      // S^WS | '(:' | 'insensitive' | 'sensitive'
        switch (this.token())
        {
        case 160:                   // 'insensitive'
          this.consume(160);        // 'insensitive'
          break;
        default:
          this.consume(235);        // 'sensitive'
        }
        break;
      case 180:                     // 'lowercase'
        this.consume(180);          // 'lowercase'
        break;
      default:
        this.consume(264);          // 'uppercase'
      }
      this.eventHandler.endNonterminal("FTCaseOption", this.e0);
    }

    private try_FTCaseOption()
    {
      switch (this.token())
      {
      case 89:                      // 'case'
        this.consumeT(89);          // 'case'
        this.lookahead1W(128);      // S^WS | '(:' | 'insensitive' | 'sensitive'
        switch (this.token())
        {
        case 160:                   // 'insensitive'
          this.consumeT(160);       // 'insensitive'
          break;
        default:
          this.consumeT(235);       // 'sensitive'
        }
        break;
      case 180:                     // 'lowercase'
        this.consumeT(180);         // 'lowercase'
        break;
      default:
        this.consumeT(264);         // 'uppercase'
      }
    }

    private parse_FTDiacriticsOption()
    {
      this.eventHandler.startNonterminal("FTDiacriticsOption", this.e0);
      this.consume(115);            // 'diacritics'
      this.lookahead1W(128);        // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (this.token())
      {
      case 160:                     // 'insensitive'
        this.consume(160);          // 'insensitive'
        break;
      default:
        this.consume(235);          // 'sensitive'
      }
      this.eventHandler.endNonterminal("FTDiacriticsOption", this.e0);
    }

    private try_FTDiacriticsOption()
    {
      this.consumeT(115);           // 'diacritics'
      this.lookahead1W(128);        // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (this.token())
      {
      case 160:                     // 'insensitive'
        this.consumeT(160);         // 'insensitive'
        break;
      default:
        this.consumeT(235);         // 'sensitive'
      }
    }

    private parse_FTStemOption()
    {
      this.eventHandler.startNonterminal("FTStemOption", this.e0);
      switch (this.token())
      {
      case 243:                     // 'stemming'
        this.consume(243);          // 'stemming'
        break;
      default:
        this.consume(191);          // 'no'
        this.lookahead1W(77);       // S^WS | '(:' | 'stemming'
        this.consume(243);          // 'stemming'
      }
      this.eventHandler.endNonterminal("FTStemOption", this.e0);
    }

    private try_FTStemOption()
    {
      switch (this.token())
      {
      case 243:                     // 'stemming'
        this.consumeT(243);         // 'stemming'
        break;
      default:
        this.consumeT(191);         // 'no'
        this.lookahead1W(77);       // S^WS | '(:' | 'stemming'
        this.consumeT(243);         // 'stemming'
      }
    }

    private parse_FTThesaurusOption()
    {
      this.eventHandler.startNonterminal("FTThesaurusOption", this.e0);
      switch (this.token())
      {
      case 251:                     // 'thesaurus'
        this.consume(251);          // 'thesaurus'
        this.lookahead1W(152);      // S^WS | '(' | '(:' | 'at' | 'default'
        switch (this.token())
        {
        case 82:                    // 'at'
          this.whitespace();
          this.parse_FTThesaurusID();
          break;
        case 110:                   // 'default'
          this.consume(110);        // 'default'
          break;
        default:
          this.consume(35);         // '('
          this.lookahead1W(116);    // S^WS | '(:' | 'at' | 'default'
          switch (this.token())
          {
          case 82:                  // 'at'
            this.whitespace();
            this.parse_FTThesaurusID();
            break;
          default:
            this.consume(110);      // 'default'
          }
          for (;;)
          {
            this.lookahead1W(105);  // S^WS | '(:' | ')' | ','
            if (this.token() != 42) // ','
            {
              break;
            }
            this.consume(42);       // ','
            this.lookahead1W(34);   // S^WS | '(:' | 'at'
            this.whitespace();
            this.parse_FTThesaurusID();
          }
          this.consume(38);         // ')'
        }
        break;
      default:
        this.consume(191);          // 'no'
        this.lookahead1W(81);       // S^WS | '(:' | 'thesaurus'
        this.consume(251);          // 'thesaurus'
      }
      this.eventHandler.endNonterminal("FTThesaurusOption", this.e0);
    }

    private try_FTThesaurusOption()
    {
      switch (this.token())
      {
      case 251:                     // 'thesaurus'
        this.consumeT(251);         // 'thesaurus'
        this.lookahead1W(152);      // S^WS | '(' | '(:' | 'at' | 'default'
        switch (this.token())
        {
        case 82:                    // 'at'
          this.try_FTThesaurusID();
          break;
        case 110:                   // 'default'
          this.consumeT(110);       // 'default'
          break;
        default:
          this.consumeT(35);        // '('
          this.lookahead1W(116);    // S^WS | '(:' | 'at' | 'default'
          switch (this.token())
          {
          case 82:                  // 'at'
            this.try_FTThesaurusID();
            break;
          default:
            this.consumeT(110);     // 'default'
          }
          for (;;)
          {
            this.lookahead1W(105);  // S^WS | '(:' | ')' | ','
            if (this.token() != 42) // ','
            {
              break;
            }
            this.consumeT(42);      // ','
            this.lookahead1W(34);   // S^WS | '(:' | 'at'
            this.try_FTThesaurusID();
          }
          this.consumeT(38);        // ')'
        }
        break;
      default:
        this.consumeT(191);         // 'no'
        this.lookahead1W(81);       // S^WS | '(:' | 'thesaurus'
        this.consumeT(251);         // 'thesaurus'
      }
    }

    private parse_FTThesaurusID()
    {
      this.eventHandler.startNonterminal("FTThesaurusID", this.e0);
      this.consume(82);             // 'at'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.consume(7);              // URILiteral
      this.lookahead1W(220);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
      if (this.token() == 221)      // 'relationship'
      {
        this.consume(221);          // 'relationship'
        this.lookahead1W(17);       // StringLiteral | S^WS | '(:'
        this.consume(11);           // StringLiteral
      }
      this.lookahead1W(216);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      switch (this.token())
      {
      case 82:                      // 'at'
        this.lookahead2W(183);      // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 131 // 'exactly'
       || this.tokenSequence() == 142 // 'from'
       || this.tokenSequence() == 90194 // 'at' 'least'
       || this.tokenSequence() == 95314)  // 'at' 'most'
      {
        this.whitespace();
        this.parse_FTLiteralRange();
        this.lookahead1W(61);       // S^WS | '(:' | 'levels'
        this.consume(178);          // 'levels'
      }
      this.eventHandler.endNonterminal("FTThesaurusID", this.e0);
    }

    private try_FTThesaurusID()
    {
      this.consumeT(82);            // 'at'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.consumeT(7);             // URILiteral
      this.lookahead1W(220);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
      if (this.token() == 221)      // 'relationship'
      {
        this.consumeT(221);         // 'relationship'
        this.lookahead1W(17);       // StringLiteral | S^WS | '(:'
        this.consumeT(11);          // StringLiteral
      }
      this.lookahead1W(216);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      switch (this.token())
      {
      case 82:                      // 'at'
        this.lookahead2W(183);      // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 131 // 'exactly'
       || this.tokenSequence() == 142 // 'from'
       || this.tokenSequence() == 90194 // 'at' 'least'
       || this.tokenSequence() == 95314)  // 'at' 'most'
      {
        this.try_FTLiteralRange();
        this.lookahead1W(61);       // S^WS | '(:' | 'levels'
        this.consumeT(178);         // 'levels'
      }
    }

    private parse_FTLiteralRange()
    {
      this.eventHandler.startNonterminal("FTLiteralRange", this.e0);
      switch (this.token())
      {
      case 131:                     // 'exactly'
        this.consume(131);          // 'exactly'
        this.lookahead1W(16);       // IntegerLiteral | S^WS | '(:'
        this.consume(8);            // IntegerLiteral
        break;
      case 82:                      // 'at'
        this.consume(82);           // 'at'
        this.lookahead1W(129);      // S^WS | '(:' | 'least' | 'most'
        switch (this.token())
        {
        case 176:                   // 'least'
          this.consume(176);        // 'least'
          this.lookahead1W(16);     // IntegerLiteral | S^WS | '(:'
          this.consume(8);          // IntegerLiteral
          break;
        default:
          this.consume(186);        // 'most'
          this.lookahead1W(16);     // IntegerLiteral | S^WS | '(:'
          this.consume(8);          // IntegerLiteral
        }
        break;
      default:
        this.consume(142);          // 'from'
        this.lookahead1W(16);       // IntegerLiteral | S^WS | '(:'
        this.consume(8);            // IntegerLiteral
        this.lookahead1W(82);       // S^WS | '(:' | 'to'
        this.consume(253);          // 'to'
        this.lookahead1W(16);       // IntegerLiteral | S^WS | '(:'
        this.consume(8);            // IntegerLiteral
      }
      this.eventHandler.endNonterminal("FTLiteralRange", this.e0);
    }

    private try_FTLiteralRange()
    {
      switch (this.token())
      {
      case 131:                     // 'exactly'
        this.consumeT(131);         // 'exactly'
        this.lookahead1W(16);       // IntegerLiteral | S^WS | '(:'
        this.consumeT(8);           // IntegerLiteral
        break;
      case 82:                      // 'at'
        this.consumeT(82);          // 'at'
        this.lookahead1W(129);      // S^WS | '(:' | 'least' | 'most'
        switch (this.token())
        {
        case 176:                   // 'least'
          this.consumeT(176);       // 'least'
          this.lookahead1W(16);     // IntegerLiteral | S^WS | '(:'
          this.consumeT(8);         // IntegerLiteral
          break;
        default:
          this.consumeT(186);       // 'most'
          this.lookahead1W(16);     // IntegerLiteral | S^WS | '(:'
          this.consumeT(8);         // IntegerLiteral
        }
        break;
      default:
        this.consumeT(142);         // 'from'
        this.lookahead1W(16);       // IntegerLiteral | S^WS | '(:'
        this.consumeT(8);           // IntegerLiteral
        this.lookahead1W(82);       // S^WS | '(:' | 'to'
        this.consumeT(253);         // 'to'
        this.lookahead1W(16);       // IntegerLiteral | S^WS | '(:'
        this.consumeT(8);           // IntegerLiteral
      }
    }

    private parse_FTStopWordOption()
    {
      this.eventHandler.startNonterminal("FTStopWordOption", this.e0);
      switch (this.token())
      {
      case 244:                     // 'stop'
        this.consume(244);          // 'stop'
        this.lookahead1W(89);       // S^WS | '(:' | 'words'
        this.consume(279);          // 'words'
        this.lookahead1W(152);      // S^WS | '(' | '(:' | 'at' | 'default'
        switch (this.token())
        {
        case 110:                   // 'default'
          this.consume(110);        // 'default'
          for (;;)
          {
            this.lookahead1W(217);  // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
            if (this.token() != 132 // 'except'
             && this.token() != 260)  // 'union'
            {
              break;
            }
            this.whitespace();
            this.parse_FTStopWordsInclExcl();
          }
          break;
        default:
          this.whitespace();
          this.parse_FTStopWords();
          for (;;)
          {
            this.lookahead1W(217);  // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
            if (this.token() != 132 // 'except'
             && this.token() != 260)  // 'union'
            {
              break;
            }
            this.whitespace();
            this.parse_FTStopWordsInclExcl();
          }
        }
        break;
      default:
        this.consume(191);          // 'no'
        this.lookahead1W(78);       // S^WS | '(:' | 'stop'
        this.consume(244);          // 'stop'
        this.lookahead1W(89);       // S^WS | '(:' | 'words'
        this.consume(279);          // 'words'
      }
      this.eventHandler.endNonterminal("FTStopWordOption", this.e0);
    }

    private try_FTStopWordOption()
    {
      switch (this.token())
      {
      case 244:                     // 'stop'
        this.consumeT(244);         // 'stop'
        this.lookahead1W(89);       // S^WS | '(:' | 'words'
        this.consumeT(279);         // 'words'
        this.lookahead1W(152);      // S^WS | '(' | '(:' | 'at' | 'default'
        switch (this.token())
        {
        case 110:                   // 'default'
          this.consumeT(110);       // 'default'
          for (;;)
          {
            this.lookahead1W(217);  // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
            if (this.token() != 132 // 'except'
             && this.token() != 260)  // 'union'
            {
              break;
            }
            this.try_FTStopWordsInclExcl();
          }
          break;
        default:
          this.try_FTStopWords();
          for (;;)
          {
            this.lookahead1W(217);  // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
            if (this.token() != 132 // 'except'
             && this.token() != 260)  // 'union'
            {
              break;
            }
            this.try_FTStopWordsInclExcl();
          }
        }
        break;
      default:
        this.consumeT(191);         // 'no'
        this.lookahead1W(78);       // S^WS | '(:' | 'stop'
        this.consumeT(244);         // 'stop'
        this.lookahead1W(89);       // S^WS | '(:' | 'words'
        this.consumeT(279);         // 'words'
      }
    }

    private parse_FTStopWords()
    {
      this.eventHandler.startNonterminal("FTStopWords", this.e0);
      switch (this.token())
      {
      case 82:                      // 'at'
        this.consume(82);           // 'at'
        this.lookahead1W(15);       // URILiteral | S^WS | '(:'
        this.consume(7);            // URILiteral
        break;
      default:
        this.consume(35);           // '('
        this.lookahead1W(17);       // StringLiteral | S^WS | '(:'
        this.consume(11);           // StringLiteral
        for (;;)
        {
          this.lookahead1W(105);    // S^WS | '(:' | ')' | ','
          if (this.token() != 42)   // ','
          {
            break;
          }
          this.consume(42);         // ','
          this.lookahead1W(17);     // StringLiteral | S^WS | '(:'
          this.consume(11);         // StringLiteral
        }
        this.consume(38);           // ')'
      }
      this.eventHandler.endNonterminal("FTStopWords", this.e0);
    }

    private try_FTStopWords()
    {
      switch (this.token())
      {
      case 82:                      // 'at'
        this.consumeT(82);          // 'at'
        this.lookahead1W(15);       // URILiteral | S^WS | '(:'
        this.consumeT(7);           // URILiteral
        break;
      default:
        this.consumeT(35);          // '('
        this.lookahead1W(17);       // StringLiteral | S^WS | '(:'
        this.consumeT(11);          // StringLiteral
        for (;;)
        {
          this.lookahead1W(105);    // S^WS | '(:' | ')' | ','
          if (this.token() != 42)   // ','
          {
            break;
          }
          this.consumeT(42);        // ','
          this.lookahead1W(17);     // StringLiteral | S^WS | '(:'
          this.consumeT(11);        // StringLiteral
        }
        this.consumeT(38);          // ')'
      }
    }

    private parse_FTStopWordsInclExcl()
    {
      this.eventHandler.startNonterminal("FTStopWordsInclExcl", this.e0);
      switch (this.token())
      {
      case 260:                     // 'union'
        this.consume(260);          // 'union'
        break;
      default:
        this.consume(132);          // 'except'
      }
      this.lookahead1W(103);        // S^WS | '(' | '(:' | 'at'
      this.whitespace();
      this.parse_FTStopWords();
      this.eventHandler.endNonterminal("FTStopWordsInclExcl", this.e0);
    }

    private try_FTStopWordsInclExcl()
    {
      switch (this.token())
      {
      case 260:                     // 'union'
        this.consumeT(260);         // 'union'
        break;
      default:
        this.consumeT(132);         // 'except'
      }
      this.lookahead1W(103);        // S^WS | '(' | '(:' | 'at'
      this.try_FTStopWords();
    }

    private parse_FTLanguageOption()
    {
      this.eventHandler.startNonterminal("FTLanguageOption", this.e0);
      this.consume(172);            // 'language'
      this.lookahead1W(17);         // StringLiteral | S^WS | '(:'
      this.consume(11);             // StringLiteral
      this.eventHandler.endNonterminal("FTLanguageOption", this.e0);
    }

    private try_FTLanguageOption()
    {
      this.consumeT(172);           // 'language'
      this.lookahead1W(17);         // StringLiteral | S^WS | '(:'
      this.consumeT(11);            // StringLiteral
    }

    private parse_FTWildCardOption()
    {
      this.eventHandler.startNonterminal("FTWildCardOption", this.e0);
      switch (this.token())
      {
      case 274:                     // 'wildcards'
        this.consume(274);          // 'wildcards'
        break;
      default:
        this.consume(191);          // 'no'
        this.lookahead1W(87);       // S^WS | '(:' | 'wildcards'
        this.consume(274);          // 'wildcards'
      }
      this.eventHandler.endNonterminal("FTWildCardOption", this.e0);
    }

    private try_FTWildCardOption()
    {
      switch (this.token())
      {
      case 274:                     // 'wildcards'
        this.consumeT(274);         // 'wildcards'
        break;
      default:
        this.consumeT(191);         // 'no'
        this.lookahead1W(87);       // S^WS | '(:' | 'wildcards'
        this.consumeT(274);         // 'wildcards'
      }
    }

    private parse_FTExtensionOption()
    {
      this.eventHandler.startNonterminal("FTExtensionOption", this.e0);
      this.consume(203);            // 'option'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(17);         // StringLiteral | S^WS | '(:'
      this.consume(11);             // StringLiteral
      this.eventHandler.endNonterminal("FTExtensionOption", this.e0);
    }

    private try_FTExtensionOption()
    {
      this.consumeT(203);           // 'option'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_EQName();
      this.lookahead1W(17);         // StringLiteral | S^WS | '(:'
      this.consumeT(11);            // StringLiteral
    }

    private parse_FTIgnoreOption()
    {
      this.eventHandler.startNonterminal("FTIgnoreOption", this.e0);
      this.consume(277);            // 'without'
      this.lookahead1W(45);         // S^WS | '(:' | 'content'
      this.consume(101);            // 'content'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      this.whitespace();
      this.parse_UnionExpr();
      this.eventHandler.endNonterminal("FTIgnoreOption", this.e0);
    }

    private try_FTIgnoreOption()
    {
      this.consumeT(277);           // 'without'
      this.lookahead1W(45);         // S^WS | '(:' | 'content'
      this.consumeT(101);           // 'content'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      this.try_UnionExpr();
    }

    private parse_CollectionDecl()
    {
      this.eventHandler.startNonterminal("CollectionDecl", this.e0);
      this.consume(96);             // 'collection'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(111);        // S^WS | '(:' | ';' | 'as'
      if (this.token() == 80)       // 'as'
      {
        this.whitespace();
        this.parse_CollectionTypeDecl();
      }
      this.eventHandler.endNonterminal("CollectionDecl", this.e0);
    }

    private parse_CollectionTypeDecl()
    {
      this.eventHandler.startNonterminal("CollectionTypeDecl", this.e0);
      this.consume(80);             // 'as'
      this.lookahead1W(200);        // S^WS | '(:' | 'attribute' | 'comment' | 'document-node' | 'element' |
                                    // 'namespace-node' | 'node' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'text'
      this.whitespace();
      this.parse_KindTest();
      this.lookahead1W(171);        // S^WS | '(:' | '*' | '+' | ';' | '?'
      if (this.token() != 54)       // ';'
      {
        this.whitespace();
        this.parse_OccurrenceIndicator();
      }
      this.eventHandler.endNonterminal("CollectionTypeDecl", this.e0);
    }

    private parse_IndexName()
    {
      this.eventHandler.startNonterminal("IndexName", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("IndexName", this.e0);
    }

    private parse_IndexDomainExpr()
    {
      this.eventHandler.startNonterminal("IndexDomainExpr", this.e0);
      this.parse_PathExpr();
      this.eventHandler.endNonterminal("IndexDomainExpr", this.e0);
    }

    private parse_IndexKeySpec()
    {
      this.eventHandler.startNonterminal("IndexKeySpec", this.e0);
      this.parse_IndexKeyExpr();
      if (this.token() == 80)       // 'as'
      {
        this.whitespace();
        this.parse_IndexKeyTypeDecl();
      }
      this.lookahead1W(156);        // S^WS | '(:' | ',' | ';' | 'collation'
      if (this.token() == 95)       // 'collation'
      {
        this.whitespace();
        this.parse_IndexKeyCollation();
      }
      this.eventHandler.endNonterminal("IndexKeySpec", this.e0);
    }

    private parse_IndexKeyExpr()
    {
      this.eventHandler.startNonterminal("IndexKeyExpr", this.e0);
      this.parse_PathExpr();
      this.eventHandler.endNonterminal("IndexKeyExpr", this.e0);
    }

    private parse_IndexKeyTypeDecl()
    {
      this.eventHandler.startNonterminal("IndexKeyTypeDecl", this.e0);
      this.consume(80);             // 'as'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_AtomicType();
      this.lookahead1W(189);        // S^WS | '(:' | '*' | '+' | ',' | ';' | '?' | 'collation'
      if (this.token() == 40        // '*'
       || this.token() == 41        // '+'
       || this.token() == 65)       // '?'
      {
        this.whitespace();
        this.parse_OccurrenceIndicator();
      }
      this.eventHandler.endNonterminal("IndexKeyTypeDecl", this.e0);
    }

    private parse_AtomicType()
    {
      this.eventHandler.startNonterminal("AtomicType", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("AtomicType", this.e0);
    }

    private parse_IndexKeyCollation()
    {
      this.eventHandler.startNonterminal("IndexKeyCollation", this.e0);
      this.consume(95);             // 'collation'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.consume(7);              // URILiteral
      this.eventHandler.endNonterminal("IndexKeyCollation", this.e0);
    }

    private parse_IndexDecl()
    {
      this.eventHandler.startNonterminal("IndexDecl", this.e0);
      this.consume(157);            // 'index'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_IndexName();
      this.lookahead1W(68);         // S^WS | '(:' | 'on'
      this.consume(201);            // 'on'
      this.lookahead1W(66);         // S^WS | '(:' | 'nodes'
      this.consume(195);            // 'nodes'
      this.lookahead1W(263);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      this.whitespace();
      this.parse_IndexDomainExpr();
      this.consume(88);             // 'by'
      this.lookahead1W(263);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      this.whitespace();
      this.parse_IndexKeySpec();
      for (;;)
      {
        this.lookahead1W(107);      // S^WS | '(:' | ',' | ';'
        if (this.token() != 42)     // ','
        {
          break;
        }
        this.consume(42);           // ','
        this.lookahead1W(263);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_IndexKeySpec();
      }
      this.eventHandler.endNonterminal("IndexDecl", this.e0);
    }

    private parse_ICDecl()
    {
      this.eventHandler.startNonterminal("ICDecl", this.e0);
      this.consume(163);            // 'integrity'
      this.lookahead1W(43);         // S^WS | '(:' | 'constraint'
      this.consume(98);             // 'constraint'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(124);        // S^WS | '(:' | 'foreign' | 'on'
      switch (this.token())
      {
      case 201:                     // 'on'
        this.whitespace();
        this.parse_ICCollection();
        break;
      default:
        this.whitespace();
        this.parse_ICForeignKey();
      }
      this.eventHandler.endNonterminal("ICDecl", this.e0);
    }

    private parse_ICCollection()
    {
      this.eventHandler.startNonterminal("ICCollection", this.e0);
      this.consume(201);            // 'on'
      this.lookahead1W(42);         // S^WS | '(:' | 'collection'
      this.consume(96);             // 'collection'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(150);        // S^WS | '$' | '(:' | 'foreach' | 'node'
      switch (this.token())
      {
      case 31:                      // '$'
        this.whitespace();
        this.parse_ICCollSequence();
        break;
      case 194:                     // 'node'
        this.whitespace();
        this.parse_ICCollSequenceUnique();
        break;
      default:
        this.whitespace();
        this.parse_ICCollNode();
      }
      this.eventHandler.endNonterminal("ICCollection", this.e0);
    }

    private parse_ICCollSequence()
    {
      this.eventHandler.startNonterminal("ICCollSequence", this.e0);
      this.parse_VarRef();
      this.lookahead1W(40);         // S^WS | '(:' | 'check'
      this.consume(93);             // 'check'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("ICCollSequence", this.e0);
    }

    private parse_ICCollSequenceUnique()
    {
      this.eventHandler.startNonterminal("ICCollSequenceUnique", this.e0);
      this.consume(194);            // 'node'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.whitespace();
      this.parse_VarRef();
      this.lookahead1W(40);         // S^WS | '(:' | 'check'
      this.consume(93);             // 'check'
      this.lookahead1W(83);         // S^WS | '(:' | 'unique'
      this.consume(261);            // 'unique'
      this.lookahead1W(60);         // S^WS | '(:' | 'key'
      this.consume(171);            // 'key'
      this.lookahead1W(263);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      this.whitespace();
      this.parse_PathExpr();
      this.eventHandler.endNonterminal("ICCollSequenceUnique", this.e0);
    }

    private parse_ICCollNode()
    {
      this.eventHandler.startNonterminal("ICCollNode", this.e0);
      this.consume(140);            // 'foreach'
      this.lookahead1W(65);         // S^WS | '(:' | 'node'
      this.consume(194);            // 'node'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.whitespace();
      this.parse_VarRef();
      this.lookahead1W(40);         // S^WS | '(:' | 'check'
      this.consume(93);             // 'check'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("ICCollNode", this.e0);
    }

    private parse_ICForeignKey()
    {
      this.eventHandler.startNonterminal("ICForeignKey", this.e0);
      this.consume(141);            // 'foreign'
      this.lookahead1W(60);         // S^WS | '(:' | 'key'
      this.consume(171);            // 'key'
      this.lookahead1W(54);         // S^WS | '(:' | 'from'
      this.whitespace();
      this.parse_ICForeignKeySource();
      this.whitespace();
      this.parse_ICForeignKeyTarget();
      this.eventHandler.endNonterminal("ICForeignKey", this.e0);
    }

    private parse_ICForeignKeySource()
    {
      this.eventHandler.startNonterminal("ICForeignKeySource", this.e0);
      this.consume(142);            // 'from'
      this.lookahead1W(42);         // S^WS | '(:' | 'collection'
      this.whitespace();
      this.parse_ICForeignKeyValues();
      this.eventHandler.endNonterminal("ICForeignKeySource", this.e0);
    }

    private parse_ICForeignKeyTarget()
    {
      this.eventHandler.startNonterminal("ICForeignKeyTarget", this.e0);
      this.consume(253);            // 'to'
      this.lookahead1W(42);         // S^WS | '(:' | 'collection'
      this.whitespace();
      this.parse_ICForeignKeyValues();
      this.eventHandler.endNonterminal("ICForeignKeyTarget", this.e0);
    }

    private parse_ICForeignKeyValues()
    {
      this.eventHandler.startNonterminal("ICForeignKeyValues", this.e0);
      this.consume(96);             // 'collection'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(65);         // S^WS | '(:' | 'node'
      this.consume(194);            // 'node'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.whitespace();
      this.parse_VarRef();
      this.lookahead1W(60);         // S^WS | '(:' | 'key'
      this.consume(171);            // 'key'
      this.lookahead1W(263);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      this.whitespace();
      this.parse_PathExpr();
      this.eventHandler.endNonterminal("ICForeignKeyValues", this.e0);
    }

    private try_Comment()
    {
      this.consumeT(37);            // '(:'
      for (;;)
      {
        this.lookahead1(92);        // CommentContents | '(:' | ':)'
        if (this.token() == 51)     // ':)'
        {
          break;
        }
        switch (this.token())
        {
        case 24:                    // CommentContents
          this.consumeT(24);        // CommentContents
          break;
        default:
          this.try_Comment();
        }
      }
      this.consumeT(51);            // ':)'
    }

    private try_Whitespace()
    {
      switch (this.token())
      {
      case 22:                      // S^WS
        this.consumeT(22);          // S^WS
        break;
      default:
        this.try_Comment();
      }
    }

    private parse_EQName()
    {
      this.eventHandler.startNonterminal("EQName", this.e0);
      this.lookahead1(241);         // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
      switch (this.token())
      {
      case 83:                      // 'attribute'
        this.consume(83);           // 'attribute'
        break;
      case 97:                      // 'comment'
        this.consume(97);           // 'comment'
        break;
      case 121:                     // 'document-node'
        this.consume(121);          // 'document-node'
        break;
      case 122:                     // 'element'
        this.consume(122);          // 'element'
        break;
      case 125:                     // 'empty-sequence'
        this.consume(125);          // 'empty-sequence'
        break;
      case 147:                     // 'function'
        this.consume(147);          // 'function'
        break;
      case 154:                     // 'if'
        this.consume(154);          // 'if'
        break;
      case 167:                     // 'item'
        this.consume(167);          // 'item'
        break;
      case 188:                     // 'namespace-node'
        this.consume(188);          // 'namespace-node'
        break;
      case 194:                     // 'node'
        this.consume(194);          // 'node'
        break;
      case 220:                     // 'processing-instruction'
        this.consume(220);          // 'processing-instruction'
        break;
      case 230:                     // 'schema-attribute'
        this.consume(230);          // 'schema-attribute'
        break;
      case 231:                     // 'schema-element'
        this.consume(231);          // 'schema-element'
        break;
      case 248:                     // 'switch'
        this.consume(248);          // 'switch'
        break;
      case 249:                     // 'text'
        this.consume(249);          // 'text'
        break;
      case 259:                     // 'typeswitch'
        this.consume(259);          // 'typeswitch'
        break;
      case 79:                      // 'array'
        this.consume(79);           // 'array'
        break;
      case 169:                     // 'json-item'
        this.consume(169);          // 'json-item'
        break;
      case 247:                     // 'structured-item'
        this.consume(247);          // 'structured-item'
        break;
      default:
        this.parse_FunctionName();
      }
      this.eventHandler.endNonterminal("EQName", this.e0);
    }

    private try_EQName()
    {
      this.lookahead1(241);         // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
      switch (this.token())
      {
      case 83:                      // 'attribute'
        this.consumeT(83);          // 'attribute'
        break;
      case 97:                      // 'comment'
        this.consumeT(97);          // 'comment'
        break;
      case 121:                     // 'document-node'
        this.consumeT(121);         // 'document-node'
        break;
      case 122:                     // 'element'
        this.consumeT(122);         // 'element'
        break;
      case 125:                     // 'empty-sequence'
        this.consumeT(125);         // 'empty-sequence'
        break;
      case 147:                     // 'function'
        this.consumeT(147);         // 'function'
        break;
      case 154:                     // 'if'
        this.consumeT(154);         // 'if'
        break;
      case 167:                     // 'item'
        this.consumeT(167);         // 'item'
        break;
      case 188:                     // 'namespace-node'
        this.consumeT(188);         // 'namespace-node'
        break;
      case 194:                     // 'node'
        this.consumeT(194);         // 'node'
        break;
      case 220:                     // 'processing-instruction'
        this.consumeT(220);         // 'processing-instruction'
        break;
      case 230:                     // 'schema-attribute'
        this.consumeT(230);         // 'schema-attribute'
        break;
      case 231:                     // 'schema-element'
        this.consumeT(231);         // 'schema-element'
        break;
      case 248:                     // 'switch'
        this.consumeT(248);         // 'switch'
        break;
      case 249:                     // 'text'
        this.consumeT(249);         // 'text'
        break;
      case 259:                     // 'typeswitch'
        this.consumeT(259);         // 'typeswitch'
        break;
      case 79:                      // 'array'
        this.consumeT(79);          // 'array'
        break;
      case 169:                     // 'json-item'
        this.consumeT(169);         // 'json-item'
        break;
      case 247:                     // 'structured-item'
        this.consumeT(247);         // 'structured-item'
        break;
      default:
        this.try_FunctionName();
      }
    }

    private parse_FunctionName()
    {
      this.eventHandler.startNonterminal("FunctionName", this.e0);
      switch (this.token())
      {
      case 6:                       // EQName^Token
        this.consume(6);            // EQName^Token
        break;
      case 71:                      // 'after'
        this.consume(71);           // 'after'
        break;
      case 74:                      // 'ancestor'
        this.consume(74);           // 'ancestor'
        break;
      case 75:                      // 'ancestor-or-self'
        this.consume(75);           // 'ancestor-or-self'
        break;
      case 76:                      // 'and'
        this.consume(76);           // 'and'
        break;
      case 80:                      // 'as'
        this.consume(80);           // 'as'
        break;
      case 81:                      // 'ascending'
        this.consume(81);           // 'ascending'
        break;
      case 85:                      // 'before'
        this.consume(85);           // 'before'
        break;
      case 89:                      // 'case'
        this.consume(89);           // 'case'
        break;
      case 90:                      // 'cast'
        this.consume(90);           // 'cast'
        break;
      case 91:                      // 'castable'
        this.consume(91);           // 'castable'
        break;
      case 94:                      // 'child'
        this.consume(94);           // 'child'
        break;
      case 95:                      // 'collation'
        this.consume(95);           // 'collation'
        break;
      case 104:                     // 'copy'
        this.consume(104);          // 'copy'
        break;
      case 106:                     // 'count'
        this.consume(106);          // 'count'
        break;
      case 109:                     // 'declare'
        this.consume(109);          // 'declare'
        break;
      case 110:                     // 'default'
        this.consume(110);          // 'default'
        break;
      case 111:                     // 'delete'
        this.consume(111);          // 'delete'
        break;
      case 112:                     // 'descendant'
        this.consume(112);          // 'descendant'
        break;
      case 113:                     // 'descendant-or-self'
        this.consume(113);          // 'descendant-or-self'
        break;
      case 114:                     // 'descending'
        this.consume(114);          // 'descending'
        break;
      case 119:                     // 'div'
        this.consume(119);          // 'div'
        break;
      case 120:                     // 'document'
        this.consume(120);          // 'document'
        break;
      case 123:                     // 'else'
        this.consume(123);          // 'else'
        break;
      case 124:                     // 'empty'
        this.consume(124);          // 'empty'
        break;
      case 127:                     // 'end'
        this.consume(127);          // 'end'
        break;
      case 129:                     // 'eq'
        this.consume(129);          // 'eq'
        break;
      case 130:                     // 'every'
        this.consume(130);          // 'every'
        break;
      case 132:                     // 'except'
        this.consume(132);          // 'except'
        break;
      case 136:                     // 'first'
        this.consume(136);          // 'first'
        break;
      case 137:                     // 'following'
        this.consume(137);          // 'following'
        break;
      case 138:                     // 'following-sibling'
        this.consume(138);          // 'following-sibling'
        break;
      case 139:                     // 'for'
        this.consume(139);          // 'for'
        break;
      case 148:                     // 'ge'
        this.consume(148);          // 'ge'
        break;
      case 150:                     // 'group'
        this.consume(150);          // 'group'
        break;
      case 152:                     // 'gt'
        this.consume(152);          // 'gt'
        break;
      case 153:                     // 'idiv'
        this.consume(153);          // 'idiv'
        break;
      case 155:                     // 'import'
        this.consume(155);          // 'import'
        break;
      case 161:                     // 'insert'
        this.consume(161);          // 'insert'
        break;
      case 162:                     // 'instance'
        this.consume(162);          // 'instance'
        break;
      case 164:                     // 'intersect'
        this.consume(164);          // 'intersect'
        break;
      case 165:                     // 'into'
        this.consume(165);          // 'into'
        break;
      case 166:                     // 'is'
        this.consume(166);          // 'is'
        break;
      case 173:                     // 'last'
        this.consume(173);          // 'last'
        break;
      case 175:                     // 'le'
        this.consume(175);          // 'le'
        break;
      case 177:                     // 'let'
        this.consume(177);          // 'let'
        break;
      case 181:                     // 'lt'
        this.consume(181);          // 'lt'
        break;
      case 183:                     // 'mod'
        this.consume(183);          // 'mod'
        break;
      case 184:                     // 'modify'
        this.consume(184);          // 'modify'
        break;
      case 185:                     // 'module'
        this.consume(185);          // 'module'
        break;
      case 187:                     // 'namespace'
        this.consume(187);          // 'namespace'
        break;
      case 189:                     // 'ne'
        this.consume(189);          // 'ne'
        break;
      case 202:                     // 'only'
        this.consume(202);          // 'only'
        break;
      case 204:                     // 'or'
        this.consume(204);          // 'or'
        break;
      case 205:                     // 'order'
        this.consume(205);          // 'order'
        break;
      case 206:                     // 'ordered'
        this.consume(206);          // 'ordered'
        break;
      case 210:                     // 'parent'
        this.consume(210);          // 'parent'
        break;
      case 216:                     // 'preceding'
        this.consume(216);          // 'preceding'
        break;
      case 217:                     // 'preceding-sibling'
        this.consume(217);          // 'preceding-sibling'
        break;
      case 222:                     // 'rename'
        this.consume(222);          // 'rename'
        break;
      case 223:                     // 'replace'
        this.consume(223);          // 'replace'
        break;
      case 224:                     // 'return'
        this.consume(224);          // 'return'
        break;
      case 228:                     // 'satisfies'
        this.consume(228);          // 'satisfies'
        break;
      case 234:                     // 'self'
        this.consume(234);          // 'self'
        break;
      case 240:                     // 'some'
        this.consume(240);          // 'some'
        break;
      case 241:                     // 'stable'
        this.consume(241);          // 'stable'
        break;
      case 242:                     // 'start'
        this.consume(242);          // 'start'
        break;
      case 253:                     // 'to'
        this.consume(253);          // 'to'
        break;
      case 254:                     // 'treat'
        this.consume(254);          // 'treat'
        break;
      case 256:                     // 'try'
        this.consume(256);          // 'try'
        break;
      case 260:                     // 'union'
        this.consume(260);          // 'union'
        break;
      case 262:                     // 'unordered'
        this.consume(262);          // 'unordered'
        break;
      case 266:                     // 'validate'
        this.consume(266);          // 'validate'
        break;
      case 272:                     // 'where'
        this.consume(272);          // 'where'
        break;
      case 276:                     // 'with'
        this.consume(276);          // 'with'
        break;
      case 170:                     // 'jsoniq'
        this.consume(170);          // 'jsoniq'
        break;
      case 73:                      // 'allowing'
        this.consume(73);           // 'allowing'
        break;
      case 82:                      // 'at'
        this.consume(82);           // 'at'
        break;
      case 84:                      // 'base-uri'
        this.consume(84);           // 'base-uri'
        break;
      case 86:                      // 'boundary-space'
        this.consume(86);           // 'boundary-space'
        break;
      case 87:                      // 'break'
        this.consume(87);           // 'break'
        break;
      case 92:                      // 'catch'
        this.consume(92);           // 'catch'
        break;
      case 99:                      // 'construction'
        this.consume(99);           // 'construction'
        break;
      case 102:                     // 'context'
        this.consume(102);          // 'context'
        break;
      case 103:                     // 'continue'
        this.consume(103);          // 'continue'
        break;
      case 105:                     // 'copy-namespaces'
        this.consume(105);          // 'copy-namespaces'
        break;
      case 107:                     // 'decimal-format'
        this.consume(107);          // 'decimal-format'
        break;
      case 126:                     // 'encoding'
        this.consume(126);          // 'encoding'
        break;
      case 133:                     // 'exit'
        this.consume(133);          // 'exit'
        break;
      case 134:                     // 'external'
        this.consume(134);          // 'external'
        break;
      case 143:                     // 'ft-option'
        this.consume(143);          // 'ft-option'
        break;
      case 156:                     // 'in'
        this.consume(156);          // 'in'
        break;
      case 157:                     // 'index'
        this.consume(157);          // 'index'
        break;
      case 163:                     // 'integrity'
        this.consume(163);          // 'integrity'
        break;
      case 174:                     // 'lax'
        this.consume(174);          // 'lax'
        break;
      case 195:                     // 'nodes'
        this.consume(195);          // 'nodes'
        break;
      case 203:                     // 'option'
        this.consume(203);          // 'option'
        break;
      case 207:                     // 'ordering'
        this.consume(207);          // 'ordering'
        break;
      case 226:                     // 'revalidation'
        this.consume(226);          // 'revalidation'
        break;
      case 229:                     // 'schema'
        this.consume(229);          // 'schema'
        break;
      case 232:                     // 'score'
        this.consume(232);          // 'score'
        break;
      case 239:                     // 'sliding'
        this.consume(239);          // 'sliding'
        break;
      case 245:                     // 'strict'
        this.consume(245);          // 'strict'
        break;
      case 257:                     // 'tumbling'
        this.consume(257);          // 'tumbling'
        break;
      case 258:                     // 'type'
        this.consume(258);          // 'type'
        break;
      case 263:                     // 'updating'
        this.consume(263);          // 'updating'
        break;
      case 267:                     // 'value'
        this.consume(267);          // 'value'
        break;
      case 268:                     // 'variable'
        this.consume(268);          // 'variable'
        break;
      case 269:                     // 'version'
        this.consume(269);          // 'version'
        break;
      case 273:                     // 'while'
        this.consume(273);          // 'while'
        break;
      case 98:                      // 'constraint'
        this.consume(98);           // 'constraint'
        break;
      case 179:                     // 'loop'
        this.consume(179);          // 'loop'
        break;
      case 225:                     // 'returning'
        this.consume(225);          // 'returning'
        break;
      case 78:                      // 'append'
        this.consume(78);           // 'append'
        break;
      case 135:                     // 'false'
        this.consume(135);          // 'false'
        break;
      case 142:                     // 'from'
        this.consume(142);          // 'from'
        break;
      case 197:                     // 'null'
        this.consume(197);          // 'null'
        break;
      case 168:                     // 'json'
        this.consume(168);          // 'json'
        break;
      case 198:                     // 'object'
        this.consume(198);          // 'object'
        break;
      case 233:                     // 'select'
        this.consume(233);          // 'select'
        break;
      default:
        this.consume(255);          // 'true'
      }
      this.eventHandler.endNonterminal("FunctionName", this.e0);
    }

    private try_FunctionName()
    {
      switch (this.token())
      {
      case 6:                       // EQName^Token
        this.consumeT(6);           // EQName^Token
        break;
      case 71:                      // 'after'
        this.consumeT(71);          // 'after'
        break;
      case 74:                      // 'ancestor'
        this.consumeT(74);          // 'ancestor'
        break;
      case 75:                      // 'ancestor-or-self'
        this.consumeT(75);          // 'ancestor-or-self'
        break;
      case 76:                      // 'and'
        this.consumeT(76);          // 'and'
        break;
      case 80:                      // 'as'
        this.consumeT(80);          // 'as'
        break;
      case 81:                      // 'ascending'
        this.consumeT(81);          // 'ascending'
        break;
      case 85:                      // 'before'
        this.consumeT(85);          // 'before'
        break;
      case 89:                      // 'case'
        this.consumeT(89);          // 'case'
        break;
      case 90:                      // 'cast'
        this.consumeT(90);          // 'cast'
        break;
      case 91:                      // 'castable'
        this.consumeT(91);          // 'castable'
        break;
      case 94:                      // 'child'
        this.consumeT(94);          // 'child'
        break;
      case 95:                      // 'collation'
        this.consumeT(95);          // 'collation'
        break;
      case 104:                     // 'copy'
        this.consumeT(104);         // 'copy'
        break;
      case 106:                     // 'count'
        this.consumeT(106);         // 'count'
        break;
      case 109:                     // 'declare'
        this.consumeT(109);         // 'declare'
        break;
      case 110:                     // 'default'
        this.consumeT(110);         // 'default'
        break;
      case 111:                     // 'delete'
        this.consumeT(111);         // 'delete'
        break;
      case 112:                     // 'descendant'
        this.consumeT(112);         // 'descendant'
        break;
      case 113:                     // 'descendant-or-self'
        this.consumeT(113);         // 'descendant-or-self'
        break;
      case 114:                     // 'descending'
        this.consumeT(114);         // 'descending'
        break;
      case 119:                     // 'div'
        this.consumeT(119);         // 'div'
        break;
      case 120:                     // 'document'
        this.consumeT(120);         // 'document'
        break;
      case 123:                     // 'else'
        this.consumeT(123);         // 'else'
        break;
      case 124:                     // 'empty'
        this.consumeT(124);         // 'empty'
        break;
      case 127:                     // 'end'
        this.consumeT(127);         // 'end'
        break;
      case 129:                     // 'eq'
        this.consumeT(129);         // 'eq'
        break;
      case 130:                     // 'every'
        this.consumeT(130);         // 'every'
        break;
      case 132:                     // 'except'
        this.consumeT(132);         // 'except'
        break;
      case 136:                     // 'first'
        this.consumeT(136);         // 'first'
        break;
      case 137:                     // 'following'
        this.consumeT(137);         // 'following'
        break;
      case 138:                     // 'following-sibling'
        this.consumeT(138);         // 'following-sibling'
        break;
      case 139:                     // 'for'
        this.consumeT(139);         // 'for'
        break;
      case 148:                     // 'ge'
        this.consumeT(148);         // 'ge'
        break;
      case 150:                     // 'group'
        this.consumeT(150);         // 'group'
        break;
      case 152:                     // 'gt'
        this.consumeT(152);         // 'gt'
        break;
      case 153:                     // 'idiv'
        this.consumeT(153);         // 'idiv'
        break;
      case 155:                     // 'import'
        this.consumeT(155);         // 'import'
        break;
      case 161:                     // 'insert'
        this.consumeT(161);         // 'insert'
        break;
      case 162:                     // 'instance'
        this.consumeT(162);         // 'instance'
        break;
      case 164:                     // 'intersect'
        this.consumeT(164);         // 'intersect'
        break;
      case 165:                     // 'into'
        this.consumeT(165);         // 'into'
        break;
      case 166:                     // 'is'
        this.consumeT(166);         // 'is'
        break;
      case 173:                     // 'last'
        this.consumeT(173);         // 'last'
        break;
      case 175:                     // 'le'
        this.consumeT(175);         // 'le'
        break;
      case 177:                     // 'let'
        this.consumeT(177);         // 'let'
        break;
      case 181:                     // 'lt'
        this.consumeT(181);         // 'lt'
        break;
      case 183:                     // 'mod'
        this.consumeT(183);         // 'mod'
        break;
      case 184:                     // 'modify'
        this.consumeT(184);         // 'modify'
        break;
      case 185:                     // 'module'
        this.consumeT(185);         // 'module'
        break;
      case 187:                     // 'namespace'
        this.consumeT(187);         // 'namespace'
        break;
      case 189:                     // 'ne'
        this.consumeT(189);         // 'ne'
        break;
      case 202:                     // 'only'
        this.consumeT(202);         // 'only'
        break;
      case 204:                     // 'or'
        this.consumeT(204);         // 'or'
        break;
      case 205:                     // 'order'
        this.consumeT(205);         // 'order'
        break;
      case 206:                     // 'ordered'
        this.consumeT(206);         // 'ordered'
        break;
      case 210:                     // 'parent'
        this.consumeT(210);         // 'parent'
        break;
      case 216:                     // 'preceding'
        this.consumeT(216);         // 'preceding'
        break;
      case 217:                     // 'preceding-sibling'
        this.consumeT(217);         // 'preceding-sibling'
        break;
      case 222:                     // 'rename'
        this.consumeT(222);         // 'rename'
        break;
      case 223:                     // 'replace'
        this.consumeT(223);         // 'replace'
        break;
      case 224:                     // 'return'
        this.consumeT(224);         // 'return'
        break;
      case 228:                     // 'satisfies'
        this.consumeT(228);         // 'satisfies'
        break;
      case 234:                     // 'self'
        this.consumeT(234);         // 'self'
        break;
      case 240:                     // 'some'
        this.consumeT(240);         // 'some'
        break;
      case 241:                     // 'stable'
        this.consumeT(241);         // 'stable'
        break;
      case 242:                     // 'start'
        this.consumeT(242);         // 'start'
        break;
      case 253:                     // 'to'
        this.consumeT(253);         // 'to'
        break;
      case 254:                     // 'treat'
        this.consumeT(254);         // 'treat'
        break;
      case 256:                     // 'try'
        this.consumeT(256);         // 'try'
        break;
      case 260:                     // 'union'
        this.consumeT(260);         // 'union'
        break;
      case 262:                     // 'unordered'
        this.consumeT(262);         // 'unordered'
        break;
      case 266:                     // 'validate'
        this.consumeT(266);         // 'validate'
        break;
      case 272:                     // 'where'
        this.consumeT(272);         // 'where'
        break;
      case 276:                     // 'with'
        this.consumeT(276);         // 'with'
        break;
      case 170:                     // 'jsoniq'
        this.consumeT(170);         // 'jsoniq'
        break;
      case 73:                      // 'allowing'
        this.consumeT(73);          // 'allowing'
        break;
      case 82:                      // 'at'
        this.consumeT(82);          // 'at'
        break;
      case 84:                      // 'base-uri'
        this.consumeT(84);          // 'base-uri'
        break;
      case 86:                      // 'boundary-space'
        this.consumeT(86);          // 'boundary-space'
        break;
      case 87:                      // 'break'
        this.consumeT(87);          // 'break'
        break;
      case 92:                      // 'catch'
        this.consumeT(92);          // 'catch'
        break;
      case 99:                      // 'construction'
        this.consumeT(99);          // 'construction'
        break;
      case 102:                     // 'context'
        this.consumeT(102);         // 'context'
        break;
      case 103:                     // 'continue'
        this.consumeT(103);         // 'continue'
        break;
      case 105:                     // 'copy-namespaces'
        this.consumeT(105);         // 'copy-namespaces'
        break;
      case 107:                     // 'decimal-format'
        this.consumeT(107);         // 'decimal-format'
        break;
      case 126:                     // 'encoding'
        this.consumeT(126);         // 'encoding'
        break;
      case 133:                     // 'exit'
        this.consumeT(133);         // 'exit'
        break;
      case 134:                     // 'external'
        this.consumeT(134);         // 'external'
        break;
      case 143:                     // 'ft-option'
        this.consumeT(143);         // 'ft-option'
        break;
      case 156:                     // 'in'
        this.consumeT(156);         // 'in'
        break;
      case 157:                     // 'index'
        this.consumeT(157);         // 'index'
        break;
      case 163:                     // 'integrity'
        this.consumeT(163);         // 'integrity'
        break;
      case 174:                     // 'lax'
        this.consumeT(174);         // 'lax'
        break;
      case 195:                     // 'nodes'
        this.consumeT(195);         // 'nodes'
        break;
      case 203:                     // 'option'
        this.consumeT(203);         // 'option'
        break;
      case 207:                     // 'ordering'
        this.consumeT(207);         // 'ordering'
        break;
      case 226:                     // 'revalidation'
        this.consumeT(226);         // 'revalidation'
        break;
      case 229:                     // 'schema'
        this.consumeT(229);         // 'schema'
        break;
      case 232:                     // 'score'
        this.consumeT(232);         // 'score'
        break;
      case 239:                     // 'sliding'
        this.consumeT(239);         // 'sliding'
        break;
      case 245:                     // 'strict'
        this.consumeT(245);         // 'strict'
        break;
      case 257:                     // 'tumbling'
        this.consumeT(257);         // 'tumbling'
        break;
      case 258:                     // 'type'
        this.consumeT(258);         // 'type'
        break;
      case 263:                     // 'updating'
        this.consumeT(263);         // 'updating'
        break;
      case 267:                     // 'value'
        this.consumeT(267);         // 'value'
        break;
      case 268:                     // 'variable'
        this.consumeT(268);         // 'variable'
        break;
      case 269:                     // 'version'
        this.consumeT(269);         // 'version'
        break;
      case 273:                     // 'while'
        this.consumeT(273);         // 'while'
        break;
      case 98:                      // 'constraint'
        this.consumeT(98);          // 'constraint'
        break;
      case 179:                     // 'loop'
        this.consumeT(179);         // 'loop'
        break;
      case 225:                     // 'returning'
        this.consumeT(225);         // 'returning'
        break;
      case 78:                      // 'append'
        this.consumeT(78);          // 'append'
        break;
      case 135:                     // 'false'
        this.consumeT(135);         // 'false'
        break;
      case 142:                     // 'from'
        this.consumeT(142);         // 'from'
        break;
      case 197:                     // 'null'
        this.consumeT(197);         // 'null'
        break;
      case 168:                     // 'json'
        this.consumeT(168);         // 'json'
        break;
      case 198:                     // 'object'
        this.consumeT(198);         // 'object'
        break;
      case 233:                     // 'select'
        this.consumeT(233);         // 'select'
        break;
      default:
        this.consumeT(255);         // 'true'
      }
    }

    private parse_NCName()
    {
      this.eventHandler.startNonterminal("NCName", this.e0);
      switch (this.token())
      {
      case 19:                      // NCName^Token
        this.consume(19);           // NCName^Token
        break;
      case 71:                      // 'after'
        this.consume(71);           // 'after'
        break;
      case 76:                      // 'and'
        this.consume(76);           // 'and'
        break;
      case 80:                      // 'as'
        this.consume(80);           // 'as'
        break;
      case 81:                      // 'ascending'
        this.consume(81);           // 'ascending'
        break;
      case 85:                      // 'before'
        this.consume(85);           // 'before'
        break;
      case 89:                      // 'case'
        this.consume(89);           // 'case'
        break;
      case 90:                      // 'cast'
        this.consume(90);           // 'cast'
        break;
      case 91:                      // 'castable'
        this.consume(91);           // 'castable'
        break;
      case 95:                      // 'collation'
        this.consume(95);           // 'collation'
        break;
      case 106:                     // 'count'
        this.consume(106);          // 'count'
        break;
      case 110:                     // 'default'
        this.consume(110);          // 'default'
        break;
      case 114:                     // 'descending'
        this.consume(114);          // 'descending'
        break;
      case 119:                     // 'div'
        this.consume(119);          // 'div'
        break;
      case 123:                     // 'else'
        this.consume(123);          // 'else'
        break;
      case 124:                     // 'empty'
        this.consume(124);          // 'empty'
        break;
      case 127:                     // 'end'
        this.consume(127);          // 'end'
        break;
      case 129:                     // 'eq'
        this.consume(129);          // 'eq'
        break;
      case 132:                     // 'except'
        this.consume(132);          // 'except'
        break;
      case 139:                     // 'for'
        this.consume(139);          // 'for'
        break;
      case 148:                     // 'ge'
        this.consume(148);          // 'ge'
        break;
      case 150:                     // 'group'
        this.consume(150);          // 'group'
        break;
      case 152:                     // 'gt'
        this.consume(152);          // 'gt'
        break;
      case 153:                     // 'idiv'
        this.consume(153);          // 'idiv'
        break;
      case 162:                     // 'instance'
        this.consume(162);          // 'instance'
        break;
      case 164:                     // 'intersect'
        this.consume(164);          // 'intersect'
        break;
      case 165:                     // 'into'
        this.consume(165);          // 'into'
        break;
      case 166:                     // 'is'
        this.consume(166);          // 'is'
        break;
      case 175:                     // 'le'
        this.consume(175);          // 'le'
        break;
      case 177:                     // 'let'
        this.consume(177);          // 'let'
        break;
      case 181:                     // 'lt'
        this.consume(181);          // 'lt'
        break;
      case 183:                     // 'mod'
        this.consume(183);          // 'mod'
        break;
      case 184:                     // 'modify'
        this.consume(184);          // 'modify'
        break;
      case 189:                     // 'ne'
        this.consume(189);          // 'ne'
        break;
      case 202:                     // 'only'
        this.consume(202);          // 'only'
        break;
      case 204:                     // 'or'
        this.consume(204);          // 'or'
        break;
      case 205:                     // 'order'
        this.consume(205);          // 'order'
        break;
      case 224:                     // 'return'
        this.consume(224);          // 'return'
        break;
      case 228:                     // 'satisfies'
        this.consume(228);          // 'satisfies'
        break;
      case 241:                     // 'stable'
        this.consume(241);          // 'stable'
        break;
      case 242:                     // 'start'
        this.consume(242);          // 'start'
        break;
      case 253:                     // 'to'
        this.consume(253);          // 'to'
        break;
      case 254:                     // 'treat'
        this.consume(254);          // 'treat'
        break;
      case 260:                     // 'union'
        this.consume(260);          // 'union'
        break;
      case 272:                     // 'where'
        this.consume(272);          // 'where'
        break;
      case 276:                     // 'with'
        this.consume(276);          // 'with'
        break;
      case 74:                      // 'ancestor'
        this.consume(74);           // 'ancestor'
        break;
      case 75:                      // 'ancestor-or-self'
        this.consume(75);           // 'ancestor-or-self'
        break;
      case 83:                      // 'attribute'
        this.consume(83);           // 'attribute'
        break;
      case 94:                      // 'child'
        this.consume(94);           // 'child'
        break;
      case 97:                      // 'comment'
        this.consume(97);           // 'comment'
        break;
      case 104:                     // 'copy'
        this.consume(104);          // 'copy'
        break;
      case 109:                     // 'declare'
        this.consume(109);          // 'declare'
        break;
      case 111:                     // 'delete'
        this.consume(111);          // 'delete'
        break;
      case 112:                     // 'descendant'
        this.consume(112);          // 'descendant'
        break;
      case 113:                     // 'descendant-or-self'
        this.consume(113);          // 'descendant-or-self'
        break;
      case 120:                     // 'document'
        this.consume(120);          // 'document'
        break;
      case 121:                     // 'document-node'
        this.consume(121);          // 'document-node'
        break;
      case 122:                     // 'element'
        this.consume(122);          // 'element'
        break;
      case 125:                     // 'empty-sequence'
        this.consume(125);          // 'empty-sequence'
        break;
      case 130:                     // 'every'
        this.consume(130);          // 'every'
        break;
      case 136:                     // 'first'
        this.consume(136);          // 'first'
        break;
      case 137:                     // 'following'
        this.consume(137);          // 'following'
        break;
      case 138:                     // 'following-sibling'
        this.consume(138);          // 'following-sibling'
        break;
      case 147:                     // 'function'
        this.consume(147);          // 'function'
        break;
      case 154:                     // 'if'
        this.consume(154);          // 'if'
        break;
      case 155:                     // 'import'
        this.consume(155);          // 'import'
        break;
      case 161:                     // 'insert'
        this.consume(161);          // 'insert'
        break;
      case 167:                     // 'item'
        this.consume(167);          // 'item'
        break;
      case 173:                     // 'last'
        this.consume(173);          // 'last'
        break;
      case 185:                     // 'module'
        this.consume(185);          // 'module'
        break;
      case 187:                     // 'namespace'
        this.consume(187);          // 'namespace'
        break;
      case 188:                     // 'namespace-node'
        this.consume(188);          // 'namespace-node'
        break;
      case 194:                     // 'node'
        this.consume(194);          // 'node'
        break;
      case 206:                     // 'ordered'
        this.consume(206);          // 'ordered'
        break;
      case 210:                     // 'parent'
        this.consume(210);          // 'parent'
        break;
      case 216:                     // 'preceding'
        this.consume(216);          // 'preceding'
        break;
      case 217:                     // 'preceding-sibling'
        this.consume(217);          // 'preceding-sibling'
        break;
      case 220:                     // 'processing-instruction'
        this.consume(220);          // 'processing-instruction'
        break;
      case 222:                     // 'rename'
        this.consume(222);          // 'rename'
        break;
      case 223:                     // 'replace'
        this.consume(223);          // 'replace'
        break;
      case 230:                     // 'schema-attribute'
        this.consume(230);          // 'schema-attribute'
        break;
      case 231:                     // 'schema-element'
        this.consume(231);          // 'schema-element'
        break;
      case 234:                     // 'self'
        this.consume(234);          // 'self'
        break;
      case 240:                     // 'some'
        this.consume(240);          // 'some'
        break;
      case 248:                     // 'switch'
        this.consume(248);          // 'switch'
        break;
      case 249:                     // 'text'
        this.consume(249);          // 'text'
        break;
      case 256:                     // 'try'
        this.consume(256);          // 'try'
        break;
      case 259:                     // 'typeswitch'
        this.consume(259);          // 'typeswitch'
        break;
      case 262:                     // 'unordered'
        this.consume(262);          // 'unordered'
        break;
      case 266:                     // 'validate'
        this.consume(266);          // 'validate'
        break;
      case 268:                     // 'variable'
        this.consume(268);          // 'variable'
        break;
      case 170:                     // 'jsoniq'
        this.consume(170);          // 'jsoniq'
        break;
      case 73:                      // 'allowing'
        this.consume(73);           // 'allowing'
        break;
      case 82:                      // 'at'
        this.consume(82);           // 'at'
        break;
      case 84:                      // 'base-uri'
        this.consume(84);           // 'base-uri'
        break;
      case 86:                      // 'boundary-space'
        this.consume(86);           // 'boundary-space'
        break;
      case 87:                      // 'break'
        this.consume(87);           // 'break'
        break;
      case 92:                      // 'catch'
        this.consume(92);           // 'catch'
        break;
      case 99:                      // 'construction'
        this.consume(99);           // 'construction'
        break;
      case 102:                     // 'context'
        this.consume(102);          // 'context'
        break;
      case 103:                     // 'continue'
        this.consume(103);          // 'continue'
        break;
      case 105:                     // 'copy-namespaces'
        this.consume(105);          // 'copy-namespaces'
        break;
      case 107:                     // 'decimal-format'
        this.consume(107);          // 'decimal-format'
        break;
      case 126:                     // 'encoding'
        this.consume(126);          // 'encoding'
        break;
      case 133:                     // 'exit'
        this.consume(133);          // 'exit'
        break;
      case 134:                     // 'external'
        this.consume(134);          // 'external'
        break;
      case 143:                     // 'ft-option'
        this.consume(143);          // 'ft-option'
        break;
      case 156:                     // 'in'
        this.consume(156);          // 'in'
        break;
      case 157:                     // 'index'
        this.consume(157);          // 'index'
        break;
      case 163:                     // 'integrity'
        this.consume(163);          // 'integrity'
        break;
      case 174:                     // 'lax'
        this.consume(174);          // 'lax'
        break;
      case 195:                     // 'nodes'
        this.consume(195);          // 'nodes'
        break;
      case 203:                     // 'option'
        this.consume(203);          // 'option'
        break;
      case 207:                     // 'ordering'
        this.consume(207);          // 'ordering'
        break;
      case 226:                     // 'revalidation'
        this.consume(226);          // 'revalidation'
        break;
      case 229:                     // 'schema'
        this.consume(229);          // 'schema'
        break;
      case 232:                     // 'score'
        this.consume(232);          // 'score'
        break;
      case 239:                     // 'sliding'
        this.consume(239);          // 'sliding'
        break;
      case 245:                     // 'strict'
        this.consume(245);          // 'strict'
        break;
      case 257:                     // 'tumbling'
        this.consume(257);          // 'tumbling'
        break;
      case 258:                     // 'type'
        this.consume(258);          // 'type'
        break;
      case 263:                     // 'updating'
        this.consume(263);          // 'updating'
        break;
      case 267:                     // 'value'
        this.consume(267);          // 'value'
        break;
      case 269:                     // 'version'
        this.consume(269);          // 'version'
        break;
      case 273:                     // 'while'
        this.consume(273);          // 'while'
        break;
      case 98:                      // 'constraint'
        this.consume(98);           // 'constraint'
        break;
      case 179:                     // 'loop'
        this.consume(179);          // 'loop'
        break;
      case 225:                     // 'returning'
        this.consume(225);          // 'returning'
        break;
      case 78:                      // 'append'
        this.consume(78);           // 'append'
        break;
      case 135:                     // 'false'
        this.consume(135);          // 'false'
        break;
      case 142:                     // 'from'
        this.consume(142);          // 'from'
        break;
      case 197:                     // 'null'
        this.consume(197);          // 'null'
        break;
      case 168:                     // 'json'
        this.consume(168);          // 'json'
        break;
      case 198:                     // 'object'
        this.consume(198);          // 'object'
        break;
      case 233:                     // 'select'
        this.consume(233);          // 'select'
        break;
      default:
        this.consume(255);          // 'true'
      }
      this.eventHandler.endNonterminal("NCName", this.e0);
    }

    private try_NCName()
    {
      switch (this.token())
      {
      case 19:                      // NCName^Token
        this.consumeT(19);          // NCName^Token
        break;
      case 71:                      // 'after'
        this.consumeT(71);          // 'after'
        break;
      case 76:                      // 'and'
        this.consumeT(76);          // 'and'
        break;
      case 80:                      // 'as'
        this.consumeT(80);          // 'as'
        break;
      case 81:                      // 'ascending'
        this.consumeT(81);          // 'ascending'
        break;
      case 85:                      // 'before'
        this.consumeT(85);          // 'before'
        break;
      case 89:                      // 'case'
        this.consumeT(89);          // 'case'
        break;
      case 90:                      // 'cast'
        this.consumeT(90);          // 'cast'
        break;
      case 91:                      // 'castable'
        this.consumeT(91);          // 'castable'
        break;
      case 95:                      // 'collation'
        this.consumeT(95);          // 'collation'
        break;
      case 106:                     // 'count'
        this.consumeT(106);         // 'count'
        break;
      case 110:                     // 'default'
        this.consumeT(110);         // 'default'
        break;
      case 114:                     // 'descending'
        this.consumeT(114);         // 'descending'
        break;
      case 119:                     // 'div'
        this.consumeT(119);         // 'div'
        break;
      case 123:                     // 'else'
        this.consumeT(123);         // 'else'
        break;
      case 124:                     // 'empty'
        this.consumeT(124);         // 'empty'
        break;
      case 127:                     // 'end'
        this.consumeT(127);         // 'end'
        break;
      case 129:                     // 'eq'
        this.consumeT(129);         // 'eq'
        break;
      case 132:                     // 'except'
        this.consumeT(132);         // 'except'
        break;
      case 139:                     // 'for'
        this.consumeT(139);         // 'for'
        break;
      case 148:                     // 'ge'
        this.consumeT(148);         // 'ge'
        break;
      case 150:                     // 'group'
        this.consumeT(150);         // 'group'
        break;
      case 152:                     // 'gt'
        this.consumeT(152);         // 'gt'
        break;
      case 153:                     // 'idiv'
        this.consumeT(153);         // 'idiv'
        break;
      case 162:                     // 'instance'
        this.consumeT(162);         // 'instance'
        break;
      case 164:                     // 'intersect'
        this.consumeT(164);         // 'intersect'
        break;
      case 165:                     // 'into'
        this.consumeT(165);         // 'into'
        break;
      case 166:                     // 'is'
        this.consumeT(166);         // 'is'
        break;
      case 175:                     // 'le'
        this.consumeT(175);         // 'le'
        break;
      case 177:                     // 'let'
        this.consumeT(177);         // 'let'
        break;
      case 181:                     // 'lt'
        this.consumeT(181);         // 'lt'
        break;
      case 183:                     // 'mod'
        this.consumeT(183);         // 'mod'
        break;
      case 184:                     // 'modify'
        this.consumeT(184);         // 'modify'
        break;
      case 189:                     // 'ne'
        this.consumeT(189);         // 'ne'
        break;
      case 202:                     // 'only'
        this.consumeT(202);         // 'only'
        break;
      case 204:                     // 'or'
        this.consumeT(204);         // 'or'
        break;
      case 205:                     // 'order'
        this.consumeT(205);         // 'order'
        break;
      case 224:                     // 'return'
        this.consumeT(224);         // 'return'
        break;
      case 228:                     // 'satisfies'
        this.consumeT(228);         // 'satisfies'
        break;
      case 241:                     // 'stable'
        this.consumeT(241);         // 'stable'
        break;
      case 242:                     // 'start'
        this.consumeT(242);         // 'start'
        break;
      case 253:                     // 'to'
        this.consumeT(253);         // 'to'
        break;
      case 254:                     // 'treat'
        this.consumeT(254);         // 'treat'
        break;
      case 260:                     // 'union'
        this.consumeT(260);         // 'union'
        break;
      case 272:                     // 'where'
        this.consumeT(272);         // 'where'
        break;
      case 276:                     // 'with'
        this.consumeT(276);         // 'with'
        break;
      case 74:                      // 'ancestor'
        this.consumeT(74);          // 'ancestor'
        break;
      case 75:                      // 'ancestor-or-self'
        this.consumeT(75);          // 'ancestor-or-self'
        break;
      case 83:                      // 'attribute'
        this.consumeT(83);          // 'attribute'
        break;
      case 94:                      // 'child'
        this.consumeT(94);          // 'child'
        break;
      case 97:                      // 'comment'
        this.consumeT(97);          // 'comment'
        break;
      case 104:                     // 'copy'
        this.consumeT(104);         // 'copy'
        break;
      case 109:                     // 'declare'
        this.consumeT(109);         // 'declare'
        break;
      case 111:                     // 'delete'
        this.consumeT(111);         // 'delete'
        break;
      case 112:                     // 'descendant'
        this.consumeT(112);         // 'descendant'
        break;
      case 113:                     // 'descendant-or-self'
        this.consumeT(113);         // 'descendant-or-self'
        break;
      case 120:                     // 'document'
        this.consumeT(120);         // 'document'
        break;
      case 121:                     // 'document-node'
        this.consumeT(121);         // 'document-node'
        break;
      case 122:                     // 'element'
        this.consumeT(122);         // 'element'
        break;
      case 125:                     // 'empty-sequence'
        this.consumeT(125);         // 'empty-sequence'
        break;
      case 130:                     // 'every'
        this.consumeT(130);         // 'every'
        break;
      case 136:                     // 'first'
        this.consumeT(136);         // 'first'
        break;
      case 137:                     // 'following'
        this.consumeT(137);         // 'following'
        break;
      case 138:                     // 'following-sibling'
        this.consumeT(138);         // 'following-sibling'
        break;
      case 147:                     // 'function'
        this.consumeT(147);         // 'function'
        break;
      case 154:                     // 'if'
        this.consumeT(154);         // 'if'
        break;
      case 155:                     // 'import'
        this.consumeT(155);         // 'import'
        break;
      case 161:                     // 'insert'
        this.consumeT(161);         // 'insert'
        break;
      case 167:                     // 'item'
        this.consumeT(167);         // 'item'
        break;
      case 173:                     // 'last'
        this.consumeT(173);         // 'last'
        break;
      case 185:                     // 'module'
        this.consumeT(185);         // 'module'
        break;
      case 187:                     // 'namespace'
        this.consumeT(187);         // 'namespace'
        break;
      case 188:                     // 'namespace-node'
        this.consumeT(188);         // 'namespace-node'
        break;
      case 194:                     // 'node'
        this.consumeT(194);         // 'node'
        break;
      case 206:                     // 'ordered'
        this.consumeT(206);         // 'ordered'
        break;
      case 210:                     // 'parent'
        this.consumeT(210);         // 'parent'
        break;
      case 216:                     // 'preceding'
        this.consumeT(216);         // 'preceding'
        break;
      case 217:                     // 'preceding-sibling'
        this.consumeT(217);         // 'preceding-sibling'
        break;
      case 220:                     // 'processing-instruction'
        this.consumeT(220);         // 'processing-instruction'
        break;
      case 222:                     // 'rename'
        this.consumeT(222);         // 'rename'
        break;
      case 223:                     // 'replace'
        this.consumeT(223);         // 'replace'
        break;
      case 230:                     // 'schema-attribute'
        this.consumeT(230);         // 'schema-attribute'
        break;
      case 231:                     // 'schema-element'
        this.consumeT(231);         // 'schema-element'
        break;
      case 234:                     // 'self'
        this.consumeT(234);         // 'self'
        break;
      case 240:                     // 'some'
        this.consumeT(240);         // 'some'
        break;
      case 248:                     // 'switch'
        this.consumeT(248);         // 'switch'
        break;
      case 249:                     // 'text'
        this.consumeT(249);         // 'text'
        break;
      case 256:                     // 'try'
        this.consumeT(256);         // 'try'
        break;
      case 259:                     // 'typeswitch'
        this.consumeT(259);         // 'typeswitch'
        break;
      case 262:                     // 'unordered'
        this.consumeT(262);         // 'unordered'
        break;
      case 266:                     // 'validate'
        this.consumeT(266);         // 'validate'
        break;
      case 268:                     // 'variable'
        this.consumeT(268);         // 'variable'
        break;
      case 170:                     // 'jsoniq'
        this.consumeT(170);         // 'jsoniq'
        break;
      case 73:                      // 'allowing'
        this.consumeT(73);          // 'allowing'
        break;
      case 82:                      // 'at'
        this.consumeT(82);          // 'at'
        break;
      case 84:                      // 'base-uri'
        this.consumeT(84);          // 'base-uri'
        break;
      case 86:                      // 'boundary-space'
        this.consumeT(86);          // 'boundary-space'
        break;
      case 87:                      // 'break'
        this.consumeT(87);          // 'break'
        break;
      case 92:                      // 'catch'
        this.consumeT(92);          // 'catch'
        break;
      case 99:                      // 'construction'
        this.consumeT(99);          // 'construction'
        break;
      case 102:                     // 'context'
        this.consumeT(102);         // 'context'
        break;
      case 103:                     // 'continue'
        this.consumeT(103);         // 'continue'
        break;
      case 105:                     // 'copy-namespaces'
        this.consumeT(105);         // 'copy-namespaces'
        break;
      case 107:                     // 'decimal-format'
        this.consumeT(107);         // 'decimal-format'
        break;
      case 126:                     // 'encoding'
        this.consumeT(126);         // 'encoding'
        break;
      case 133:                     // 'exit'
        this.consumeT(133);         // 'exit'
        break;
      case 134:                     // 'external'
        this.consumeT(134);         // 'external'
        break;
      case 143:                     // 'ft-option'
        this.consumeT(143);         // 'ft-option'
        break;
      case 156:                     // 'in'
        this.consumeT(156);         // 'in'
        break;
      case 157:                     // 'index'
        this.consumeT(157);         // 'index'
        break;
      case 163:                     // 'integrity'
        this.consumeT(163);         // 'integrity'
        break;
      case 174:                     // 'lax'
        this.consumeT(174);         // 'lax'
        break;
      case 195:                     // 'nodes'
        this.consumeT(195);         // 'nodes'
        break;
      case 203:                     // 'option'
        this.consumeT(203);         // 'option'
        break;
      case 207:                     // 'ordering'
        this.consumeT(207);         // 'ordering'
        break;
      case 226:                     // 'revalidation'
        this.consumeT(226);         // 'revalidation'
        break;
      case 229:                     // 'schema'
        this.consumeT(229);         // 'schema'
        break;
      case 232:                     // 'score'
        this.consumeT(232);         // 'score'
        break;
      case 239:                     // 'sliding'
        this.consumeT(239);         // 'sliding'
        break;
      case 245:                     // 'strict'
        this.consumeT(245);         // 'strict'
        break;
      case 257:                     // 'tumbling'
        this.consumeT(257);         // 'tumbling'
        break;
      case 258:                     // 'type'
        this.consumeT(258);         // 'type'
        break;
      case 263:                     // 'updating'
        this.consumeT(263);         // 'updating'
        break;
      case 267:                     // 'value'
        this.consumeT(267);         // 'value'
        break;
      case 269:                     // 'version'
        this.consumeT(269);         // 'version'
        break;
      case 273:                     // 'while'
        this.consumeT(273);         // 'while'
        break;
      case 98:                      // 'constraint'
        this.consumeT(98);          // 'constraint'
        break;
      case 179:                     // 'loop'
        this.consumeT(179);         // 'loop'
        break;
      case 225:                     // 'returning'
        this.consumeT(225);         // 'returning'
        break;
      case 78:                      // 'append'
        this.consumeT(78);          // 'append'
        break;
      case 135:                     // 'false'
        this.consumeT(135);         // 'false'
        break;
      case 142:                     // 'from'
        this.consumeT(142);         // 'from'
        break;
      case 197:                     // 'null'
        this.consumeT(197);         // 'null'
        break;
      case 168:                     // 'json'
        this.consumeT(168);         // 'json'
        break;
      case 198:                     // 'object'
        this.consumeT(198);         // 'object'
        break;
      case 233:                     // 'select'
        this.consumeT(233);         // 'select'
        break;
      default:
        this.consumeT(255);         // 'true'
      }
    }

    private parse_MainModule()
    {
      this.eventHandler.startNonterminal("MainModule", this.e0);
      this.parse_Prolog();
      this.whitespace();
      this.parse_Program();
      this.eventHandler.endNonterminal("MainModule", this.e0);
    }

    private parse_Program()
    {
      this.eventHandler.startNonterminal("Program", this.e0);
      this.parse_StatementsAndOptionalExpr();
      this.eventHandler.endNonterminal("Program", this.e0);
    }

    private parse_Statements()
    {
      this.eventHandler.startNonterminal("Statements", this.e0);
      for (;;)
      {
        this.lookahead1W(284);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        switch (this.token())
        {
        case 35:                    // '('
          this.lookahead2W(270);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        case 36:                    // '(#'
          this.lookahead2(243);     // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
          break;
        case 47:                    // '/'
          this.lookahead2W(286);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '!' | '!=' | '$' | '$$' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|' | '|' | '||' |
                                    // '}'
          break;
        case 48:                    // '//'
          this.lookahead2W(260);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
          break;
        case 55:                    // '<'
          this.lookahead2(4);       // QName
          break;
        case 56:                    // '<!--'
          this.lookahead2(1);       // DirCommentContents
          break;
        case 60:                    // '<?'
          this.lookahead2(3);       // PITarget
          break;
        case 69:                    // '['
          this.lookahead2W(273);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        case 78:                    // 'append'
          this.lookahead2W(269);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        case 133:                   // 'exit'
          this.lookahead2W(147);    // S^WS | '#' | '(' | '(:' | 'returning'
          break;
        case 139:                   // 'for'
          this.lookahead2W(179);    // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
          break;
        case 161:                   // 'insert'
          this.lookahead2W(276);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        case 177:                   // 'let'
          this.lookahead2W(166);    // S^WS | '#' | '$' | '(' | '(:' | 'score'
          break;
        case 187:                   // 'namespace'
          this.lookahead2W(247);    // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
          break;
        case 220:                   // 'processing-instruction'
          this.lookahead2W(245);    // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
          break;
        case 223:                   // 'replace'
          this.lookahead2W(170);    // S^WS | '#' | '(' | '(:' | 'node' | 'value'
          break;
        case 266:                   // 'validate'
          this.lookahead2W(188);    // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
          break;
        case 281:                   // '{'
          this.lookahead2W(283);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
          break;
        case 283:                   // '{|'
          this.lookahead2W(274);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '|}'
          break;
        case 31:                    // '$'
        case 33:                    // '%'
          this.lookahead2W(246);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          break;
        case 83:                    // 'attribute'
        case 122:                   // 'element'
          this.lookahead2W(253);    // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
          break;
        case 87:                    // 'break'
        case 103:                   // 'continue'
          this.lookahead2W(145);    // S^WS | '#' | '(' | '(:' | 'loop'
          break;
        case 97:                    // 'comment'
        case 249:                   // 'text'
          this.lookahead2W(97);     // S^WS | '#' | '(:' | '{'
          break;
        case 111:                   // 'delete'
        case 222:                   // 'rename'
          this.lookahead2W(261);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
          break;
        case 41:                    // '+'
        case 43:                    // '-'
        case 196:                   // 'not'
          this.lookahead2W(266);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
          break;
        case 135:                   // 'false'
        case 197:                   // 'null'
        case 255:                   // 'true'
          this.lookahead2W(211);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 104:                   // 'copy'
        case 130:                   // 'every'
        case 240:                   // 'some'
        case 268:                   // 'variable'
          this.lookahead2W(143);    // S^WS | '#' | '$' | '(' | '(:'
          break;
        case 120:                   // 'document'
        case 206:                   // 'ordered'
        case 256:                   // 'try'
        case 262:                   // 'unordered'
          this.lookahead2W(148);    // S^WS | '#' | '(' | '(:' | '{'
          break;
        case 8:                     // IntegerLiteral
        case 9:                     // DecimalLiteral
        case 10:                    // DoubleLiteral
        case 11:                    // StringLiteral
        case 32:                    // '$$'
          this.lookahead2W(210);    // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 79:                    // 'array'
        case 121:                   // 'document-node'
        case 125:                   // 'empty-sequence'
        case 167:                   // 'item'
        case 169:                   // 'json-item'
        case 188:                   // 'namespace-node'
        case 194:                   // 'node'
        case 230:                   // 'schema-attribute'
        case 231:                   // 'schema-element'
        case 247:                   // 'structured-item'
          this.lookahead2W(20);     // S^WS | '#' | '(:'
          break;
        case 6:                     // EQName^Token
        case 71:                    // 'after'
        case 73:                    // 'allowing'
        case 74:                    // 'ancestor'
        case 75:                    // 'ancestor-or-self'
        case 76:                    // 'and'
        case 80:                    // 'as'
        case 81:                    // 'ascending'
        case 82:                    // 'at'
        case 84:                    // 'base-uri'
        case 85:                    // 'before'
        case 86:                    // 'boundary-space'
        case 89:                    // 'case'
        case 90:                    // 'cast'
        case 91:                    // 'castable'
        case 92:                    // 'catch'
        case 94:                    // 'child'
        case 95:                    // 'collation'
        case 98:                    // 'constraint'
        case 99:                    // 'construction'
        case 102:                   // 'context'
        case 105:                   // 'copy-namespaces'
        case 106:                   // 'count'
        case 107:                   // 'decimal-format'
        case 109:                   // 'declare'
        case 110:                   // 'default'
        case 112:                   // 'descendant'
        case 113:                   // 'descendant-or-self'
        case 114:                   // 'descending'
        case 119:                   // 'div'
        case 123:                   // 'else'
        case 124:                   // 'empty'
        case 126:                   // 'encoding'
        case 127:                   // 'end'
        case 129:                   // 'eq'
        case 132:                   // 'except'
        case 134:                   // 'external'
        case 136:                   // 'first'
        case 137:                   // 'following'
        case 138:                   // 'following-sibling'
        case 142:                   // 'from'
        case 143:                   // 'ft-option'
        case 147:                   // 'function'
        case 148:                   // 'ge'
        case 150:                   // 'group'
        case 152:                   // 'gt'
        case 153:                   // 'idiv'
        case 154:                   // 'if'
        case 155:                   // 'import'
        case 156:                   // 'in'
        case 157:                   // 'index'
        case 162:                   // 'instance'
        case 163:                   // 'integrity'
        case 164:                   // 'intersect'
        case 165:                   // 'into'
        case 166:                   // 'is'
        case 168:                   // 'json'
        case 170:                   // 'jsoniq'
        case 173:                   // 'last'
        case 174:                   // 'lax'
        case 175:                   // 'le'
        case 179:                   // 'loop'
        case 181:                   // 'lt'
        case 183:                   // 'mod'
        case 184:                   // 'modify'
        case 185:                   // 'module'
        case 189:                   // 'ne'
        case 195:                   // 'nodes'
        case 198:                   // 'object'
        case 202:                   // 'only'
        case 203:                   // 'option'
        case 204:                   // 'or'
        case 205:                   // 'order'
        case 207:                   // 'ordering'
        case 210:                   // 'parent'
        case 216:                   // 'preceding'
        case 217:                   // 'preceding-sibling'
        case 224:                   // 'return'
        case 225:                   // 'returning'
        case 226:                   // 'revalidation'
        case 228:                   // 'satisfies'
        case 229:                   // 'schema'
        case 232:                   // 'score'
        case 233:                   // 'select'
        case 234:                   // 'self'
        case 239:                   // 'sliding'
        case 241:                   // 'stable'
        case 242:                   // 'start'
        case 245:                   // 'strict'
        case 248:                   // 'switch'
        case 253:                   // 'to'
        case 254:                   // 'treat'
        case 257:                   // 'tumbling'
        case 258:                   // 'type'
        case 259:                   // 'typeswitch'
        case 260:                   // 'union'
        case 263:                   // 'updating'
        case 267:                   // 'value'
        case 269:                   // 'version'
        case 272:                   // 'where'
        case 273:                   // 'while'
        case 276:                   // 'with'
          this.lookahead2W(95);     // S^WS | '#' | '(' | '(:'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.tokenSequence() != 25  // EOF
         && this.tokenSequence() != 54  // ';'
         && this.tokenSequence() != 287 // '}'
         && this.tokenSequence() != 12808 // IntegerLiteral EOF
         && this.tokenSequence() != 12809 // DecimalLiteral EOF
         && this.tokenSequence() != 12810 // DoubleLiteral EOF
         && this.tokenSequence() != 12811 // StringLiteral EOF
         && this.tokenSequence() != 12832 // '$$' EOF
         && this.tokenSequence() != 12847 // '/' EOF
         && this.tokenSequence() != 12935 // 'false' EOF
         && this.tokenSequence() != 12997 // 'null' EOF
         && this.tokenSequence() != 13055 // 'true' EOF
         && this.tokenSequence() != 16140 // 'variable' '$'
         && this.tokenSequence() != 21512 // IntegerLiteral ','
         && this.tokenSequence() != 21513 // DecimalLiteral ','
         && this.tokenSequence() != 21514 // DoubleLiteral ','
         && this.tokenSequence() != 21515 // StringLiteral ','
         && this.tokenSequence() != 21536 // '$$' ','
         && this.tokenSequence() != 21551 // '/' ','
         && this.tokenSequence() != 21639 // 'false' ','
         && this.tokenSequence() != 21701 // 'null' ','
         && this.tokenSequence() != 21759 // 'true' ','
         && this.tokenSequence() != 27656 // IntegerLiteral ';'
         && this.tokenSequence() != 27657 // DecimalLiteral ';'
         && this.tokenSequence() != 27658 // DoubleLiteral ';'
         && this.tokenSequence() != 27659 // StringLiteral ';'
         && this.tokenSequence() != 27680 // '$$' ';'
         && this.tokenSequence() != 27695 // '/' ';'
         && this.tokenSequence() != 27783 // 'false' ';'
         && this.tokenSequence() != 27845 // 'null' ';'
         && this.tokenSequence() != 27903 // 'true' ';'
         && this.tokenSequence() != 91735 // 'break' 'loop'
         && this.tokenSequence() != 91751 // 'continue' 'loop'
         && this.tokenSequence() != 115333  // 'exit' 'returning'
         && this.tokenSequence() != 146952  // IntegerLiteral '}'
         && this.tokenSequence() != 146953  // DecimalLiteral '}'
         && this.tokenSequence() != 146954  // DoubleLiteral '}'
         && this.tokenSequence() != 146955  // StringLiteral '}'
         && this.tokenSequence() != 146976  // '$$' '}'
         && this.tokenSequence() != 146991  // '/' '}'
         && this.tokenSequence() != 147079  // 'false' '}'
         && this.tokenSequence() != 147141  // 'null' '}'
         && this.tokenSequence() != 147199) // 'true' '}'
        {
          this.lk = this.memoized(8, this.e0);
          if (this.lk == 0)
          {
            var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
            var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
            var b2A = this.b2; var e2A = this.e2;
            try
            {
              this.try_Statement();
              this.lk = -1;
            }
            catch (p1A)
            {
              this.lk = -2;
            }
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(8, this.e0, this.lk);
          }
        }
        if (this.tokenSequence() != -1
         && this.tokenSequence() != 54  // ';'
         && this.tokenSequence() != 16140 // 'variable' '$'
         && this.tokenSequence() != 27656 // IntegerLiteral ';'
         && this.tokenSequence() != 27657 // DecimalLiteral ';'
         && this.tokenSequence() != 27658 // DoubleLiteral ';'
         && this.tokenSequence() != 27659 // StringLiteral ';'
         && this.tokenSequence() != 27680 // '$$' ';'
         && this.tokenSequence() != 27695 // '/' ';'
         && this.tokenSequence() != 27783 // 'false' ';'
         && this.tokenSequence() != 27845 // 'null' ';'
         && this.tokenSequence() != 27903 // 'true' ';'
         && this.tokenSequence() != 91735 // 'break' 'loop'
         && this.tokenSequence() != 91751 // 'continue' 'loop'
         && this.tokenSequence() != 115333) // 'exit' 'returning'
        {
          break;
        }
        this.whitespace();
        this.parse_Statement();
      }
      this.eventHandler.endNonterminal("Statements", this.e0);
    }

    private try_Statements()
    {
      for (;;)
      {
        this.lookahead1W(284);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        switch (this.token())
        {
        case 35:                    // '('
          this.lookahead2W(270);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        case 36:                    // '(#'
          this.lookahead2(243);     // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
          break;
        case 47:                    // '/'
          this.lookahead2W(286);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '!' | '!=' | '$' | '$$' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|' | '|' | '||' |
                                    // '}'
          break;
        case 48:                    // '//'
          this.lookahead2W(260);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
          break;
        case 55:                    // '<'
          this.lookahead2(4);       // QName
          break;
        case 56:                    // '<!--'
          this.lookahead2(1);       // DirCommentContents
          break;
        case 60:                    // '<?'
          this.lookahead2(3);       // PITarget
          break;
        case 69:                    // '['
          this.lookahead2W(273);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        case 78:                    // 'append'
          this.lookahead2W(269);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        case 133:                   // 'exit'
          this.lookahead2W(147);    // S^WS | '#' | '(' | '(:' | 'returning'
          break;
        case 139:                   // 'for'
          this.lookahead2W(179);    // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
          break;
        case 161:                   // 'insert'
          this.lookahead2W(276);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        case 177:                   // 'let'
          this.lookahead2W(166);    // S^WS | '#' | '$' | '(' | '(:' | 'score'
          break;
        case 187:                   // 'namespace'
          this.lookahead2W(247);    // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
          break;
        case 220:                   // 'processing-instruction'
          this.lookahead2W(245);    // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
          break;
        case 223:                   // 'replace'
          this.lookahead2W(170);    // S^WS | '#' | '(' | '(:' | 'node' | 'value'
          break;
        case 266:                   // 'validate'
          this.lookahead2W(188);    // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
          break;
        case 281:                   // '{'
          this.lookahead2W(283);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
          break;
        case 283:                   // '{|'
          this.lookahead2W(274);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '|}'
          break;
        case 31:                    // '$'
        case 33:                    // '%'
          this.lookahead2W(246);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          break;
        case 83:                    // 'attribute'
        case 122:                   // 'element'
          this.lookahead2W(253);    // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
          break;
        case 87:                    // 'break'
        case 103:                   // 'continue'
          this.lookahead2W(145);    // S^WS | '#' | '(' | '(:' | 'loop'
          break;
        case 97:                    // 'comment'
        case 249:                   // 'text'
          this.lookahead2W(97);     // S^WS | '#' | '(:' | '{'
          break;
        case 111:                   // 'delete'
        case 222:                   // 'rename'
          this.lookahead2W(261);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
          break;
        case 41:                    // '+'
        case 43:                    // '-'
        case 196:                   // 'not'
          this.lookahead2W(266);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
          break;
        case 135:                   // 'false'
        case 197:                   // 'null'
        case 255:                   // 'true'
          this.lookahead2W(211);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 104:                   // 'copy'
        case 130:                   // 'every'
        case 240:                   // 'some'
        case 268:                   // 'variable'
          this.lookahead2W(143);    // S^WS | '#' | '$' | '(' | '(:'
          break;
        case 120:                   // 'document'
        case 206:                   // 'ordered'
        case 256:                   // 'try'
        case 262:                   // 'unordered'
          this.lookahead2W(148);    // S^WS | '#' | '(' | '(:' | '{'
          break;
        case 8:                     // IntegerLiteral
        case 9:                     // DecimalLiteral
        case 10:                    // DoubleLiteral
        case 11:                    // StringLiteral
        case 32:                    // '$$'
          this.lookahead2W(210);    // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 79:                    // 'array'
        case 121:                   // 'document-node'
        case 125:                   // 'empty-sequence'
        case 167:                   // 'item'
        case 169:                   // 'json-item'
        case 188:                   // 'namespace-node'
        case 194:                   // 'node'
        case 230:                   // 'schema-attribute'
        case 231:                   // 'schema-element'
        case 247:                   // 'structured-item'
          this.lookahead2W(20);     // S^WS | '#' | '(:'
          break;
        case 6:                     // EQName^Token
        case 71:                    // 'after'
        case 73:                    // 'allowing'
        case 74:                    // 'ancestor'
        case 75:                    // 'ancestor-or-self'
        case 76:                    // 'and'
        case 80:                    // 'as'
        case 81:                    // 'ascending'
        case 82:                    // 'at'
        case 84:                    // 'base-uri'
        case 85:                    // 'before'
        case 86:                    // 'boundary-space'
        case 89:                    // 'case'
        case 90:                    // 'cast'
        case 91:                    // 'castable'
        case 92:                    // 'catch'
        case 94:                    // 'child'
        case 95:                    // 'collation'
        case 98:                    // 'constraint'
        case 99:                    // 'construction'
        case 102:                   // 'context'
        case 105:                   // 'copy-namespaces'
        case 106:                   // 'count'
        case 107:                   // 'decimal-format'
        case 109:                   // 'declare'
        case 110:                   // 'default'
        case 112:                   // 'descendant'
        case 113:                   // 'descendant-or-self'
        case 114:                   // 'descending'
        case 119:                   // 'div'
        case 123:                   // 'else'
        case 124:                   // 'empty'
        case 126:                   // 'encoding'
        case 127:                   // 'end'
        case 129:                   // 'eq'
        case 132:                   // 'except'
        case 134:                   // 'external'
        case 136:                   // 'first'
        case 137:                   // 'following'
        case 138:                   // 'following-sibling'
        case 142:                   // 'from'
        case 143:                   // 'ft-option'
        case 147:                   // 'function'
        case 148:                   // 'ge'
        case 150:                   // 'group'
        case 152:                   // 'gt'
        case 153:                   // 'idiv'
        case 154:                   // 'if'
        case 155:                   // 'import'
        case 156:                   // 'in'
        case 157:                   // 'index'
        case 162:                   // 'instance'
        case 163:                   // 'integrity'
        case 164:                   // 'intersect'
        case 165:                   // 'into'
        case 166:                   // 'is'
        case 168:                   // 'json'
        case 170:                   // 'jsoniq'
        case 173:                   // 'last'
        case 174:                   // 'lax'
        case 175:                   // 'le'
        case 179:                   // 'loop'
        case 181:                   // 'lt'
        case 183:                   // 'mod'
        case 184:                   // 'modify'
        case 185:                   // 'module'
        case 189:                   // 'ne'
        case 195:                   // 'nodes'
        case 198:                   // 'object'
        case 202:                   // 'only'
        case 203:                   // 'option'
        case 204:                   // 'or'
        case 205:                   // 'order'
        case 207:                   // 'ordering'
        case 210:                   // 'parent'
        case 216:                   // 'preceding'
        case 217:                   // 'preceding-sibling'
        case 224:                   // 'return'
        case 225:                   // 'returning'
        case 226:                   // 'revalidation'
        case 228:                   // 'satisfies'
        case 229:                   // 'schema'
        case 232:                   // 'score'
        case 233:                   // 'select'
        case 234:                   // 'self'
        case 239:                   // 'sliding'
        case 241:                   // 'stable'
        case 242:                   // 'start'
        case 245:                   // 'strict'
        case 248:                   // 'switch'
        case 253:                   // 'to'
        case 254:                   // 'treat'
        case 257:                   // 'tumbling'
        case 258:                   // 'type'
        case 259:                   // 'typeswitch'
        case 260:                   // 'union'
        case 263:                   // 'updating'
        case 267:                   // 'value'
        case 269:                   // 'version'
        case 272:                   // 'where'
        case 273:                   // 'while'
        case 276:                   // 'with'
          this.lookahead2W(95);     // S^WS | '#' | '(' | '(:'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.tokenSequence() != 25  // EOF
         && this.tokenSequence() != 54  // ';'
         && this.tokenSequence() != 287 // '}'
         && this.tokenSequence() != 12808 // IntegerLiteral EOF
         && this.tokenSequence() != 12809 // DecimalLiteral EOF
         && this.tokenSequence() != 12810 // DoubleLiteral EOF
         && this.tokenSequence() != 12811 // StringLiteral EOF
         && this.tokenSequence() != 12832 // '$$' EOF
         && this.tokenSequence() != 12847 // '/' EOF
         && this.tokenSequence() != 12935 // 'false' EOF
         && this.tokenSequence() != 12997 // 'null' EOF
         && this.tokenSequence() != 13055 // 'true' EOF
         && this.tokenSequence() != 16140 // 'variable' '$'
         && this.tokenSequence() != 21512 // IntegerLiteral ','
         && this.tokenSequence() != 21513 // DecimalLiteral ','
         && this.tokenSequence() != 21514 // DoubleLiteral ','
         && this.tokenSequence() != 21515 // StringLiteral ','
         && this.tokenSequence() != 21536 // '$$' ','
         && this.tokenSequence() != 21551 // '/' ','
         && this.tokenSequence() != 21639 // 'false' ','
         && this.tokenSequence() != 21701 // 'null' ','
         && this.tokenSequence() != 21759 // 'true' ','
         && this.tokenSequence() != 27656 // IntegerLiteral ';'
         && this.tokenSequence() != 27657 // DecimalLiteral ';'
         && this.tokenSequence() != 27658 // DoubleLiteral ';'
         && this.tokenSequence() != 27659 // StringLiteral ';'
         && this.tokenSequence() != 27680 // '$$' ';'
         && this.tokenSequence() != 27695 // '/' ';'
         && this.tokenSequence() != 27783 // 'false' ';'
         && this.tokenSequence() != 27845 // 'null' ';'
         && this.tokenSequence() != 27903 // 'true' ';'
         && this.tokenSequence() != 91735 // 'break' 'loop'
         && this.tokenSequence() != 91751 // 'continue' 'loop'
         && this.tokenSequence() != 115333  // 'exit' 'returning'
         && this.tokenSequence() != 146952  // IntegerLiteral '}'
         && this.tokenSequence() != 146953  // DecimalLiteral '}'
         && this.tokenSequence() != 146954  // DoubleLiteral '}'
         && this.tokenSequence() != 146955  // StringLiteral '}'
         && this.tokenSequence() != 146976  // '$$' '}'
         && this.tokenSequence() != 146991  // '/' '}'
         && this.tokenSequence() != 147079  // 'false' '}'
         && this.tokenSequence() != 147141  // 'null' '}'
         && this.tokenSequence() != 147199) // 'true' '}'
        {
          this.lk = this.memoized(8, this.e0);
          if (this.lk == 0)
          {
            var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
            var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
            var b2A = this.b2; var e2A = this.e2;
            try
            {
              this.try_Statement();
              this.memoize(8, e0A, -1);
              continue;
            }
            catch (p1A)
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.memoize(8, e0A, -2);
              break;
            }
          }
        }
        if (this.tokenSequence() != -1
         && this.tokenSequence() != 54  // ';'
         && this.tokenSequence() != 16140 // 'variable' '$'
         && this.tokenSequence() != 27656 // IntegerLiteral ';'
         && this.tokenSequence() != 27657 // DecimalLiteral ';'
         && this.tokenSequence() != 27658 // DoubleLiteral ';'
         && this.tokenSequence() != 27659 // StringLiteral ';'
         && this.tokenSequence() != 27680 // '$$' ';'
         && this.tokenSequence() != 27695 // '/' ';'
         && this.tokenSequence() != 27783 // 'false' ';'
         && this.tokenSequence() != 27845 // 'null' ';'
         && this.tokenSequence() != 27903 // 'true' ';'
         && this.tokenSequence() != 91735 // 'break' 'loop'
         && this.tokenSequence() != 91751 // 'continue' 'loop'
         && this.tokenSequence() != 115333) // 'exit' 'returning'
        {
          break;
        }
        this.try_Statement();
      }
    }

    private parse_StatementsAndExpr()
    {
      this.eventHandler.startNonterminal("StatementsAndExpr", this.e0);
      this.parse_Statements();
      this.whitespace();
      this.parse_Expr();
      this.eventHandler.endNonterminal("StatementsAndExpr", this.e0);
    }

    private try_StatementsAndExpr()
    {
      this.try_Statements();
      this.try_Expr();
    }

    private parse_StatementsAndOptionalExpr()
    {
      this.eventHandler.startNonterminal("StatementsAndOptionalExpr", this.e0);
      this.parse_Statements();
      if (this.token() != 25        // EOF
       && this.token() != 287)      // '}'
      {
        this.whitespace();
        this.parse_Expr();
      }
      this.eventHandler.endNonterminal("StatementsAndOptionalExpr", this.e0);
    }

    private try_StatementsAndOptionalExpr()
    {
      this.try_Statements();
      if (this.token() != 25        // EOF
       && this.token() != 287)      // '}'
      {
        this.try_Expr();
      }
    }

    private parse_Statement()
    {
      this.eventHandler.startNonterminal("Statement", this.e0);
      switch (this.token())
      {
      case 133:                     // 'exit'
        this.lookahead2W(147);      // S^WS | '#' | '(' | '(:' | 'returning'
        break;
      case 139:                     // 'for'
        this.lookahead2W(179);      // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
        break;
      case 177:                     // 'let'
        this.lookahead2W(166);      // S^WS | '#' | '$' | '(' | '(:' | 'score'
        break;
      case 256:                     // 'try'
        this.lookahead2W(148);      // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 268:                     // 'variable'
        this.lookahead2W(143);      // S^WS | '#' | '$' | '(' | '(:'
        break;
      case 281:                     // '{'
        this.lookahead2W(283);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        break;
      case 31:                      // '$'
      case 33:                      // '%'
        this.lookahead2W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      case 87:                      // 'break'
      case 103:                     // 'continue'
        this.lookahead2W(145);      // S^WS | '#' | '(' | '(:' | 'loop'
        break;
      case 154:                     // 'if'
      case 248:                     // 'switch'
      case 259:                     // 'typeswitch'
      case 273:                     // 'while'
        this.lookahead2W(95);       // S^WS | '#' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() != 6 // EQName^Token
       && this.tokenSequence() != 8 // IntegerLiteral
       && this.tokenSequence() != 9 // DecimalLiteral
       && this.tokenSequence() != 10  // DoubleLiteral
       && this.tokenSequence() != 11  // StringLiteral
       && this.tokenSequence() != 32  // '$$'
       && this.tokenSequence() != 35  // '('
       && this.tokenSequence() != 36  // '(#'
       && this.tokenSequence() != 41  // '+'
       && this.tokenSequence() != 43  // '-'
       && this.tokenSequence() != 47  // '/'
       && this.tokenSequence() != 48  // '//'
       && this.tokenSequence() != 54  // ';'
       && this.tokenSequence() != 55  // '<'
       && this.tokenSequence() != 56  // '<!--'
       && this.tokenSequence() != 60  // '<?'
       && this.tokenSequence() != 69  // '['
       && this.tokenSequence() != 71  // 'after'
       && this.tokenSequence() != 73  // 'allowing'
       && this.tokenSequence() != 74  // 'ancestor'
       && this.tokenSequence() != 75  // 'ancestor-or-self'
       && this.tokenSequence() != 76  // 'and'
       && this.tokenSequence() != 78  // 'append'
       && this.tokenSequence() != 79  // 'array'
       && this.tokenSequence() != 80  // 'as'
       && this.tokenSequence() != 81  // 'ascending'
       && this.tokenSequence() != 82  // 'at'
       && this.tokenSequence() != 83  // 'attribute'
       && this.tokenSequence() != 84  // 'base-uri'
       && this.tokenSequence() != 85  // 'before'
       && this.tokenSequence() != 86  // 'boundary-space'
       && this.tokenSequence() != 89  // 'case'
       && this.tokenSequence() != 90  // 'cast'
       && this.tokenSequence() != 91  // 'castable'
       && this.tokenSequence() != 92  // 'catch'
       && this.tokenSequence() != 94  // 'child'
       && this.tokenSequence() != 95  // 'collation'
       && this.tokenSequence() != 97  // 'comment'
       && this.tokenSequence() != 98  // 'constraint'
       && this.tokenSequence() != 99  // 'construction'
       && this.tokenSequence() != 102 // 'context'
       && this.tokenSequence() != 104 // 'copy'
       && this.tokenSequence() != 105 // 'copy-namespaces'
       && this.tokenSequence() != 106 // 'count'
       && this.tokenSequence() != 107 // 'decimal-format'
       && this.tokenSequence() != 109 // 'declare'
       && this.tokenSequence() != 110 // 'default'
       && this.tokenSequence() != 111 // 'delete'
       && this.tokenSequence() != 112 // 'descendant'
       && this.tokenSequence() != 113 // 'descendant-or-self'
       && this.tokenSequence() != 114 // 'descending'
       && this.tokenSequence() != 119 // 'div'
       && this.tokenSequence() != 120 // 'document'
       && this.tokenSequence() != 121 // 'document-node'
       && this.tokenSequence() != 122 // 'element'
       && this.tokenSequence() != 123 // 'else'
       && this.tokenSequence() != 124 // 'empty'
       && this.tokenSequence() != 125 // 'empty-sequence'
       && this.tokenSequence() != 126 // 'encoding'
       && this.tokenSequence() != 127 // 'end'
       && this.tokenSequence() != 129 // 'eq'
       && this.tokenSequence() != 130 // 'every'
       && this.tokenSequence() != 132 // 'except'
       && this.tokenSequence() != 134 // 'external'
       && this.tokenSequence() != 135 // 'false'
       && this.tokenSequence() != 136 // 'first'
       && this.tokenSequence() != 137 // 'following'
       && this.tokenSequence() != 138 // 'following-sibling'
       && this.tokenSequence() != 142 // 'from'
       && this.tokenSequence() != 143 // 'ft-option'
       && this.tokenSequence() != 147 // 'function'
       && this.tokenSequence() != 148 // 'ge'
       && this.tokenSequence() != 150 // 'group'
       && this.tokenSequence() != 152 // 'gt'
       && this.tokenSequence() != 153 // 'idiv'
       && this.tokenSequence() != 155 // 'import'
       && this.tokenSequence() != 156 // 'in'
       && this.tokenSequence() != 157 // 'index'
       && this.tokenSequence() != 161 // 'insert'
       && this.tokenSequence() != 162 // 'instance'
       && this.tokenSequence() != 163 // 'integrity'
       && this.tokenSequence() != 164 // 'intersect'
       && this.tokenSequence() != 165 // 'into'
       && this.tokenSequence() != 166 // 'is'
       && this.tokenSequence() != 167 // 'item'
       && this.tokenSequence() != 168 // 'json'
       && this.tokenSequence() != 169 // 'json-item'
       && this.tokenSequence() != 170 // 'jsoniq'
       && this.tokenSequence() != 173 // 'last'
       && this.tokenSequence() != 174 // 'lax'
       && this.tokenSequence() != 175 // 'le'
       && this.tokenSequence() != 179 // 'loop'
       && this.tokenSequence() != 181 // 'lt'
       && this.tokenSequence() != 183 // 'mod'
       && this.tokenSequence() != 184 // 'modify'
       && this.tokenSequence() != 185 // 'module'
       && this.tokenSequence() != 187 // 'namespace'
       && this.tokenSequence() != 188 // 'namespace-node'
       && this.tokenSequence() != 189 // 'ne'
       && this.tokenSequence() != 194 // 'node'
       && this.tokenSequence() != 195 // 'nodes'
       && this.tokenSequence() != 196 // 'not'
       && this.tokenSequence() != 197 // 'null'
       && this.tokenSequence() != 198 // 'object'
       && this.tokenSequence() != 202 // 'only'
       && this.tokenSequence() != 203 // 'option'
       && this.tokenSequence() != 204 // 'or'
       && this.tokenSequence() != 205 // 'order'
       && this.tokenSequence() != 206 // 'ordered'
       && this.tokenSequence() != 207 // 'ordering'
       && this.tokenSequence() != 210 // 'parent'
       && this.tokenSequence() != 216 // 'preceding'
       && this.tokenSequence() != 217 // 'preceding-sibling'
       && this.tokenSequence() != 220 // 'processing-instruction'
       && this.tokenSequence() != 222 // 'rename'
       && this.tokenSequence() != 223 // 'replace'
       && this.tokenSequence() != 224 // 'return'
       && this.tokenSequence() != 225 // 'returning'
       && this.tokenSequence() != 226 // 'revalidation'
       && this.tokenSequence() != 228 // 'satisfies'
       && this.tokenSequence() != 229 // 'schema'
       && this.tokenSequence() != 230 // 'schema-attribute'
       && this.tokenSequence() != 231 // 'schema-element'
       && this.tokenSequence() != 232 // 'score'
       && this.tokenSequence() != 233 // 'select'
       && this.tokenSequence() != 234 // 'self'
       && this.tokenSequence() != 239 // 'sliding'
       && this.tokenSequence() != 240 // 'some'
       && this.tokenSequence() != 241 // 'stable'
       && this.tokenSequence() != 242 // 'start'
       && this.tokenSequence() != 245 // 'strict'
       && this.tokenSequence() != 247 // 'structured-item'
       && this.tokenSequence() != 249 // 'text'
       && this.tokenSequence() != 253 // 'to'
       && this.tokenSequence() != 254 // 'treat'
       && this.tokenSequence() != 255 // 'true'
       && this.tokenSequence() != 257 // 'tumbling'
       && this.tokenSequence() != 258 // 'type'
       && this.tokenSequence() != 260 // 'union'
       && this.tokenSequence() != 262 // 'unordered'
       && this.tokenSequence() != 263 // 'updating'
       && this.tokenSequence() != 266 // 'validate'
       && this.tokenSequence() != 267 // 'value'
       && this.tokenSequence() != 269 // 'version'
       && this.tokenSequence() != 272 // 'where'
       && this.tokenSequence() != 276 // 'with'
       && this.tokenSequence() != 283 // '{|'
       && this.tokenSequence() != 10009 // '{' NCName^Token
       && this.tokenSequence() != 14935 // 'break' '#'
       && this.tokenSequence() != 14951 // 'continue' '#'
       && this.tokenSequence() != 14981 // 'exit' '#'
       && this.tokenSequence() != 14987 // 'for' '#'
       && this.tokenSequence() != 15002 // 'if' '#'
       && this.tokenSequence() != 15025 // 'let' '#'
       && this.tokenSequence() != 15096 // 'switch' '#'
       && this.tokenSequence() != 15104 // 'try' '#'
       && this.tokenSequence() != 15107 // 'typeswitch' '#'
       && this.tokenSequence() != 15116 // 'variable' '#'
       && this.tokenSequence() != 15121 // 'while' '#'
       && this.tokenSequence() != 16011 // 'for' '$'
       && this.tokenSequence() != 16049 // 'let' '$'
       && this.tokenSequence() != 16140 // 'variable' '$'
       && this.tokenSequence() != 18007 // 'break' '('
       && this.tokenSequence() != 18023 // 'continue' '('
       && this.tokenSequence() != 18053 // 'exit' '('
       && this.tokenSequence() != 18059 // 'for' '('
       && this.tokenSequence() != 18074 // 'if' '('
       && this.tokenSequence() != 18097 // 'let' '('
       && this.tokenSequence() != 18168 // 'switch' '('
       && this.tokenSequence() != 18176 // 'try' '('
       && this.tokenSequence() != 18179 // 'typeswitch' '('
       && this.tokenSequence() != 18188 // 'variable' '('
       && this.tokenSequence() != 91735 // 'break' 'loop'
       && this.tokenSequence() != 91751 // 'continue' 'loop'
       && this.tokenSequence() != 115333  // 'exit' 'returning'
       && this.tokenSequence() != 118961  // 'let' 'score'
       && this.tokenSequence() != 122507  // 'for' 'sliding'
       && this.tokenSequence() != 131723  // 'for' 'tumbling'
       && this.tokenSequence() != 144128  // 'try' '{'
       && this.tokenSequence() != 147225) // '{' '}'
      {
        this.lk = this.memoized(9, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_ApplyStatement();
            this.lk = -1;
          }
          catch (p1A)
          {
            try
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.try_AssignStatement();
              this.lk = -2;
            }
            catch (p2A)
            {
              try
              {
                this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                this.try_BlockStatement();
                this.lk = -3;
              }
              catch (p3A)
              {
                try
                {
                  this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                  this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                  this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                  this.try_VarDeclStatement();
                  this.lk = -12;
                }
                catch (p12A)
                {
                  this.lk = -13;
                }
              }
            }
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(9, this.e0, this.lk);
        }
      }
      switch (this.tokenSequence())
      {
      case -2:
        this.parse_AssignStatement();
        break;
      case -3:
        this.parse_BlockStatement();
        break;
      case 91735:                   // 'break' 'loop'
        this.parse_BreakStatement();
        break;
      case 91751:                   // 'continue' 'loop'
        this.parse_ContinueStatement();
        break;
      case 115333:                  // 'exit' 'returning'
        this.parse_ExitStatement();
        break;
      case 16011:                   // 'for' '$'
      case 16049:                   // 'let' '$'
      case 118961:                  // 'let' 'score'
      case 122507:                  // 'for' 'sliding'
      case 131723:                  // 'for' 'tumbling'
        this.parse_FLWORStatement();
        break;
      case 18074:                   // 'if' '('
        this.parse_IfStatement();
        break;
      case 18168:                   // 'switch' '('
        this.parse_SwitchStatement();
        break;
      case 144128:                  // 'try' '{'
        this.parse_TryCatchStatement();
        break;
      case 18179:                   // 'typeswitch' '('
        this.parse_TypeswitchStatement();
        break;
      case -12:
      case 16140:                   // 'variable' '$'
        this.parse_VarDeclStatement();
        break;
      case -13:
        this.parse_WhileStatement();
        break;
      case 54:                      // ';'
        this.parse_VoidStatement();
        break;
      default:
        this.parse_ApplyStatement();
      }
      this.eventHandler.endNonterminal("Statement", this.e0);
    }

    private try_Statement()
    {
      switch (this.token())
      {
      case 133:                     // 'exit'
        this.lookahead2W(147);      // S^WS | '#' | '(' | '(:' | 'returning'
        break;
      case 139:                     // 'for'
        this.lookahead2W(179);      // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
        break;
      case 177:                     // 'let'
        this.lookahead2W(166);      // S^WS | '#' | '$' | '(' | '(:' | 'score'
        break;
      case 256:                     // 'try'
        this.lookahead2W(148);      // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 268:                     // 'variable'
        this.lookahead2W(143);      // S^WS | '#' | '$' | '(' | '(:'
        break;
      case 281:                     // '{'
        this.lookahead2W(283);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        break;
      case 31:                      // '$'
      case 33:                      // '%'
        this.lookahead2W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      case 87:                      // 'break'
      case 103:                     // 'continue'
        this.lookahead2W(145);      // S^WS | '#' | '(' | '(:' | 'loop'
        break;
      case 154:                     // 'if'
      case 248:                     // 'switch'
      case 259:                     // 'typeswitch'
      case 273:                     // 'while'
        this.lookahead2W(95);       // S^WS | '#' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() != 6 // EQName^Token
       && this.tokenSequence() != 8 // IntegerLiteral
       && this.tokenSequence() != 9 // DecimalLiteral
       && this.tokenSequence() != 10  // DoubleLiteral
       && this.tokenSequence() != 11  // StringLiteral
       && this.tokenSequence() != 32  // '$$'
       && this.tokenSequence() != 35  // '('
       && this.tokenSequence() != 36  // '(#'
       && this.tokenSequence() != 41  // '+'
       && this.tokenSequence() != 43  // '-'
       && this.tokenSequence() != 47  // '/'
       && this.tokenSequence() != 48  // '//'
       && this.tokenSequence() != 54  // ';'
       && this.tokenSequence() != 55  // '<'
       && this.tokenSequence() != 56  // '<!--'
       && this.tokenSequence() != 60  // '<?'
       && this.tokenSequence() != 69  // '['
       && this.tokenSequence() != 71  // 'after'
       && this.tokenSequence() != 73  // 'allowing'
       && this.tokenSequence() != 74  // 'ancestor'
       && this.tokenSequence() != 75  // 'ancestor-or-self'
       && this.tokenSequence() != 76  // 'and'
       && this.tokenSequence() != 78  // 'append'
       && this.tokenSequence() != 79  // 'array'
       && this.tokenSequence() != 80  // 'as'
       && this.tokenSequence() != 81  // 'ascending'
       && this.tokenSequence() != 82  // 'at'
       && this.tokenSequence() != 83  // 'attribute'
       && this.tokenSequence() != 84  // 'base-uri'
       && this.tokenSequence() != 85  // 'before'
       && this.tokenSequence() != 86  // 'boundary-space'
       && this.tokenSequence() != 89  // 'case'
       && this.tokenSequence() != 90  // 'cast'
       && this.tokenSequence() != 91  // 'castable'
       && this.tokenSequence() != 92  // 'catch'
       && this.tokenSequence() != 94  // 'child'
       && this.tokenSequence() != 95  // 'collation'
       && this.tokenSequence() != 97  // 'comment'
       && this.tokenSequence() != 98  // 'constraint'
       && this.tokenSequence() != 99  // 'construction'
       && this.tokenSequence() != 102 // 'context'
       && this.tokenSequence() != 104 // 'copy'
       && this.tokenSequence() != 105 // 'copy-namespaces'
       && this.tokenSequence() != 106 // 'count'
       && this.tokenSequence() != 107 // 'decimal-format'
       && this.tokenSequence() != 109 // 'declare'
       && this.tokenSequence() != 110 // 'default'
       && this.tokenSequence() != 111 // 'delete'
       && this.tokenSequence() != 112 // 'descendant'
       && this.tokenSequence() != 113 // 'descendant-or-self'
       && this.tokenSequence() != 114 // 'descending'
       && this.tokenSequence() != 119 // 'div'
       && this.tokenSequence() != 120 // 'document'
       && this.tokenSequence() != 121 // 'document-node'
       && this.tokenSequence() != 122 // 'element'
       && this.tokenSequence() != 123 // 'else'
       && this.tokenSequence() != 124 // 'empty'
       && this.tokenSequence() != 125 // 'empty-sequence'
       && this.tokenSequence() != 126 // 'encoding'
       && this.tokenSequence() != 127 // 'end'
       && this.tokenSequence() != 129 // 'eq'
       && this.tokenSequence() != 130 // 'every'
       && this.tokenSequence() != 132 // 'except'
       && this.tokenSequence() != 134 // 'external'
       && this.tokenSequence() != 135 // 'false'
       && this.tokenSequence() != 136 // 'first'
       && this.tokenSequence() != 137 // 'following'
       && this.tokenSequence() != 138 // 'following-sibling'
       && this.tokenSequence() != 142 // 'from'
       && this.tokenSequence() != 143 // 'ft-option'
       && this.tokenSequence() != 147 // 'function'
       && this.tokenSequence() != 148 // 'ge'
       && this.tokenSequence() != 150 // 'group'
       && this.tokenSequence() != 152 // 'gt'
       && this.tokenSequence() != 153 // 'idiv'
       && this.tokenSequence() != 155 // 'import'
       && this.tokenSequence() != 156 // 'in'
       && this.tokenSequence() != 157 // 'index'
       && this.tokenSequence() != 161 // 'insert'
       && this.tokenSequence() != 162 // 'instance'
       && this.tokenSequence() != 163 // 'integrity'
       && this.tokenSequence() != 164 // 'intersect'
       && this.tokenSequence() != 165 // 'into'
       && this.tokenSequence() != 166 // 'is'
       && this.tokenSequence() != 167 // 'item'
       && this.tokenSequence() != 168 // 'json'
       && this.tokenSequence() != 169 // 'json-item'
       && this.tokenSequence() != 170 // 'jsoniq'
       && this.tokenSequence() != 173 // 'last'
       && this.tokenSequence() != 174 // 'lax'
       && this.tokenSequence() != 175 // 'le'
       && this.tokenSequence() != 179 // 'loop'
       && this.tokenSequence() != 181 // 'lt'
       && this.tokenSequence() != 183 // 'mod'
       && this.tokenSequence() != 184 // 'modify'
       && this.tokenSequence() != 185 // 'module'
       && this.tokenSequence() != 187 // 'namespace'
       && this.tokenSequence() != 188 // 'namespace-node'
       && this.tokenSequence() != 189 // 'ne'
       && this.tokenSequence() != 194 // 'node'
       && this.tokenSequence() != 195 // 'nodes'
       && this.tokenSequence() != 196 // 'not'
       && this.tokenSequence() != 197 // 'null'
       && this.tokenSequence() != 198 // 'object'
       && this.tokenSequence() != 202 // 'only'
       && this.tokenSequence() != 203 // 'option'
       && this.tokenSequence() != 204 // 'or'
       && this.tokenSequence() != 205 // 'order'
       && this.tokenSequence() != 206 // 'ordered'
       && this.tokenSequence() != 207 // 'ordering'
       && this.tokenSequence() != 210 // 'parent'
       && this.tokenSequence() != 216 // 'preceding'
       && this.tokenSequence() != 217 // 'preceding-sibling'
       && this.tokenSequence() != 220 // 'processing-instruction'
       && this.tokenSequence() != 222 // 'rename'
       && this.tokenSequence() != 223 // 'replace'
       && this.tokenSequence() != 224 // 'return'
       && this.tokenSequence() != 225 // 'returning'
       && this.tokenSequence() != 226 // 'revalidation'
       && this.tokenSequence() != 228 // 'satisfies'
       && this.tokenSequence() != 229 // 'schema'
       && this.tokenSequence() != 230 // 'schema-attribute'
       && this.tokenSequence() != 231 // 'schema-element'
       && this.tokenSequence() != 232 // 'score'
       && this.tokenSequence() != 233 // 'select'
       && this.tokenSequence() != 234 // 'self'
       && this.tokenSequence() != 239 // 'sliding'
       && this.tokenSequence() != 240 // 'some'
       && this.tokenSequence() != 241 // 'stable'
       && this.tokenSequence() != 242 // 'start'
       && this.tokenSequence() != 245 // 'strict'
       && this.tokenSequence() != 247 // 'structured-item'
       && this.tokenSequence() != 249 // 'text'
       && this.tokenSequence() != 253 // 'to'
       && this.tokenSequence() != 254 // 'treat'
       && this.tokenSequence() != 255 // 'true'
       && this.tokenSequence() != 257 // 'tumbling'
       && this.tokenSequence() != 258 // 'type'
       && this.tokenSequence() != 260 // 'union'
       && this.tokenSequence() != 262 // 'unordered'
       && this.tokenSequence() != 263 // 'updating'
       && this.tokenSequence() != 266 // 'validate'
       && this.tokenSequence() != 267 // 'value'
       && this.tokenSequence() != 269 // 'version'
       && this.tokenSequence() != 272 // 'where'
       && this.tokenSequence() != 276 // 'with'
       && this.tokenSequence() != 283 // '{|'
       && this.tokenSequence() != 10009 // '{' NCName^Token
       && this.tokenSequence() != 14935 // 'break' '#'
       && this.tokenSequence() != 14951 // 'continue' '#'
       && this.tokenSequence() != 14981 // 'exit' '#'
       && this.tokenSequence() != 14987 // 'for' '#'
       && this.tokenSequence() != 15002 // 'if' '#'
       && this.tokenSequence() != 15025 // 'let' '#'
       && this.tokenSequence() != 15096 // 'switch' '#'
       && this.tokenSequence() != 15104 // 'try' '#'
       && this.tokenSequence() != 15107 // 'typeswitch' '#'
       && this.tokenSequence() != 15116 // 'variable' '#'
       && this.tokenSequence() != 15121 // 'while' '#'
       && this.tokenSequence() != 16011 // 'for' '$'
       && this.tokenSequence() != 16049 // 'let' '$'
       && this.tokenSequence() != 16140 // 'variable' '$'
       && this.tokenSequence() != 18007 // 'break' '('
       && this.tokenSequence() != 18023 // 'continue' '('
       && this.tokenSequence() != 18053 // 'exit' '('
       && this.tokenSequence() != 18059 // 'for' '('
       && this.tokenSequence() != 18074 // 'if' '('
       && this.tokenSequence() != 18097 // 'let' '('
       && this.tokenSequence() != 18168 // 'switch' '('
       && this.tokenSequence() != 18176 // 'try' '('
       && this.tokenSequence() != 18179 // 'typeswitch' '('
       && this.tokenSequence() != 18188 // 'variable' '('
       && this.tokenSequence() != 91735 // 'break' 'loop'
       && this.tokenSequence() != 91751 // 'continue' 'loop'
       && this.tokenSequence() != 115333  // 'exit' 'returning'
       && this.tokenSequence() != 118961  // 'let' 'score'
       && this.tokenSequence() != 122507  // 'for' 'sliding'
       && this.tokenSequence() != 131723  // 'for' 'tumbling'
       && this.tokenSequence() != 144128  // 'try' '{'
       && this.tokenSequence() != 147225) // '{' '}'
      {
        this.lk = this.memoized(9, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_ApplyStatement();
            this.memoize(9, e0A, -1);
            this.lk = -15;
          }
          catch (p1A)
          {
            try
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.try_AssignStatement();
              this.memoize(9, e0A, -2);
              this.lk = -15;
            }
            catch (p2A)
            {
              try
              {
                this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                this.try_BlockStatement();
                this.memoize(9, e0A, -3);
                this.lk = -15;
              }
              catch (p3A)
              {
                try
                {
                  this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                  this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                  this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                  this.try_VarDeclStatement();
                  this.memoize(9, e0A, -12);
                  this.lk = -15;
                }
                catch (p12A)
                {
                  this.lk = -13;
                  this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                  this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                  this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                  this.memoize(9, e0A, -13);
                }
              }
            }
          }
        }
      }
      switch (this.tokenSequence())
      {
      case -2:
        this.try_AssignStatement();
        break;
      case -3:
        this.try_BlockStatement();
        break;
      case 91735:                   // 'break' 'loop'
        this.try_BreakStatement();
        break;
      case 91751:                   // 'continue' 'loop'
        this.try_ContinueStatement();
        break;
      case 115333:                  // 'exit' 'returning'
        this.try_ExitStatement();
        break;
      case 16011:                   // 'for' '$'
      case 16049:                   // 'let' '$'
      case 118961:                  // 'let' 'score'
      case 122507:                  // 'for' 'sliding'
      case 131723:                  // 'for' 'tumbling'
        this.try_FLWORStatement();
        break;
      case 18074:                   // 'if' '('
        this.try_IfStatement();
        break;
      case 18168:                   // 'switch' '('
        this.try_SwitchStatement();
        break;
      case 144128:                  // 'try' '{'
        this.try_TryCatchStatement();
        break;
      case 18179:                   // 'typeswitch' '('
        this.try_TypeswitchStatement();
        break;
      case -12:
      case 16140:                   // 'variable' '$'
        this.try_VarDeclStatement();
        break;
      case -13:
        this.try_WhileStatement();
        break;
      case 54:                      // ';'
        this.try_VoidStatement();
        break;
      case -15:
        break;
      default:
        this.try_ApplyStatement();
      }
    }

    private parse_ApplyStatement()
    {
      this.eventHandler.startNonterminal("ApplyStatement", this.e0);
      this.parse_ExprSimple();
      this.consume(54);             // ';'
      this.eventHandler.endNonterminal("ApplyStatement", this.e0);
    }

    private try_ApplyStatement()
    {
      this.try_ExprSimple();
      this.consumeT(54);            // ';'
    }

    private parse_AssignStatement()
    {
      this.eventHandler.startNonterminal("AssignStatement", this.e0);
      this.consume(31);             // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(28);         // S^WS | '(:' | ':='
      this.consume(53);             // ':='
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.consume(54);             // ';'
      this.eventHandler.endNonterminal("AssignStatement", this.e0);
    }

    private try_AssignStatement()
    {
      this.consumeT(31);            // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
      this.lookahead1W(28);         // S^WS | '(:' | ':='
      this.consumeT(53);            // ':='
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
      this.consumeT(54);            // ';'
    }

    private parse_BlockStatement()
    {
      this.eventHandler.startNonterminal("BlockStatement", this.e0);
      this.consume(281);            // '{'
      this.lookahead1W(271);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.lookahead1W(281);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      this.whitespace();
      this.parse_Statements();
      this.consume(287);            // '}'
      this.eventHandler.endNonterminal("BlockStatement", this.e0);
    }

    private try_BlockStatement()
    {
      this.consumeT(281);           // '{'
      this.lookahead1W(271);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Statement();
      this.lookahead1W(281);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      this.try_Statements();
      this.consumeT(287);           // '}'
    }

    private parse_BreakStatement()
    {
      this.eventHandler.startNonterminal("BreakStatement", this.e0);
      this.consume(87);             // 'break'
      this.lookahead1W(62);         // S^WS | '(:' | 'loop'
      this.consume(179);            // 'loop'
      this.lookahead1W(29);         // S^WS | '(:' | ';'
      this.consume(54);             // ';'
      this.eventHandler.endNonterminal("BreakStatement", this.e0);
    }

    private try_BreakStatement()
    {
      this.consumeT(87);            // 'break'
      this.lookahead1W(62);         // S^WS | '(:' | 'loop'
      this.consumeT(179);           // 'loop'
      this.lookahead1W(29);         // S^WS | '(:' | ';'
      this.consumeT(54);            // ';'
    }

    private parse_ContinueStatement()
    {
      this.eventHandler.startNonterminal("ContinueStatement", this.e0);
      this.consume(103);            // 'continue'
      this.lookahead1W(62);         // S^WS | '(:' | 'loop'
      this.consume(179);            // 'loop'
      this.lookahead1W(29);         // S^WS | '(:' | ';'
      this.consume(54);             // ';'
      this.eventHandler.endNonterminal("ContinueStatement", this.e0);
    }

    private try_ContinueStatement()
    {
      this.consumeT(103);           // 'continue'
      this.lookahead1W(62);         // S^WS | '(:' | 'loop'
      this.consumeT(179);           // 'loop'
      this.lookahead1W(29);         // S^WS | '(:' | ';'
      this.consumeT(54);            // ';'
    }

    private parse_ExitStatement()
    {
      this.eventHandler.startNonterminal("ExitStatement", this.e0);
      this.consume(133);            // 'exit'
      this.lookahead1W(74);         // S^WS | '(:' | 'returning'
      this.consume(225);            // 'returning'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.consume(54);             // ';'
      this.eventHandler.endNonterminal("ExitStatement", this.e0);
    }

    private try_ExitStatement()
    {
      this.consumeT(133);           // 'exit'
      this.lookahead1W(74);         // S^WS | '(:' | 'returning'
      this.consumeT(225);           // 'returning'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
      this.consumeT(54);            // ';'
    }

    private parse_FLWORStatement()
    {
      this.eventHandler.startNonterminal("FLWORStatement", this.e0);
      this.parse_InitialClause();
      for (;;)
      {
        this.lookahead1W(195);      // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
        if (this.token() == 224)    // 'return'
        {
          break;
        }
        this.whitespace();
        this.parse_IntermediateClause();
      }
      this.whitespace();
      this.parse_ReturnStatement();
      this.eventHandler.endNonterminal("FLWORStatement", this.e0);
    }

    private try_FLWORStatement()
    {
      this.try_InitialClause();
      for (;;)
      {
        this.lookahead1W(195);      // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
        if (this.token() == 224)    // 'return'
        {
          break;
        }
        this.try_IntermediateClause();
      }
      this.try_ReturnStatement();
    }

    private parse_ReturnStatement()
    {
      this.eventHandler.startNonterminal("ReturnStatement", this.e0);
      this.consume(224);            // 'return'
      this.lookahead1W(271);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.eventHandler.endNonterminal("ReturnStatement", this.e0);
    }

    private try_ReturnStatement()
    {
      this.consumeT(224);           // 'return'
      this.lookahead1W(271);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Statement();
    }

    private parse_IfStatement()
    {
      this.eventHandler.startNonterminal("IfStatement", this.e0);
      this.consume(154);            // 'if'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consume(35);             // '('
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.consume(38);             // ')'
      this.lookahead1W(80);         // S^WS | '(:' | 'then'
      this.consume(250);            // 'then'
      this.lookahead1W(271);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.lookahead1W(51);         // S^WS | '(:' | 'else'
      this.consume(123);            // 'else'
      this.lookahead1W(271);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.eventHandler.endNonterminal("IfStatement", this.e0);
    }

    private try_IfStatement()
    {
      this.consumeT(154);           // 'if'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consumeT(35);            // '('
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.consumeT(38);            // ')'
      this.lookahead1W(80);         // S^WS | '(:' | 'then'
      this.consumeT(250);           // 'then'
      this.lookahead1W(271);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Statement();
      this.lookahead1W(51);         // S^WS | '(:' | 'else'
      this.consumeT(123);           // 'else'
      this.lookahead1W(271);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Statement();
    }

    private parse_SwitchStatement()
    {
      this.eventHandler.startNonterminal("SwitchStatement", this.e0);
      this.consume(248);            // 'switch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consume(35);             // '('
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.consume(38);             // ')'
      for (;;)
      {
        this.lookahead1W(38);       // S^WS | '(:' | 'case'
        this.whitespace();
        this.parse_SwitchCaseStatement();
        this.lookahead1W(117);      // S^WS | '(:' | 'case' | 'default'
        if (this.token() != 89)     // 'case'
        {
          break;
        }
      }
      this.consume(110);            // 'default'
      this.lookahead1W(73);         // S^WS | '(:' | 'return'
      this.consume(224);            // 'return'
      this.lookahead1W(271);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.eventHandler.endNonterminal("SwitchStatement", this.e0);
    }

    private try_SwitchStatement()
    {
      this.consumeT(248);           // 'switch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consumeT(35);            // '('
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.consumeT(38);            // ')'
      for (;;)
      {
        this.lookahead1W(38);       // S^WS | '(:' | 'case'
        this.try_SwitchCaseStatement();
        this.lookahead1W(117);      // S^WS | '(:' | 'case' | 'default'
        if (this.token() != 89)     // 'case'
        {
          break;
        }
      }
      this.consumeT(110);           // 'default'
      this.lookahead1W(73);         // S^WS | '(:' | 'return'
      this.consumeT(224);           // 'return'
      this.lookahead1W(271);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Statement();
    }

    private parse_SwitchCaseStatement()
    {
      this.eventHandler.startNonterminal("SwitchCaseStatement", this.e0);
      for (;;)
      {
        this.consume(89);           // 'case'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_SwitchCaseOperand();
        if (this.token() != 89)     // 'case'
        {
          break;
        }
      }
      this.consume(224);            // 'return'
      this.lookahead1W(271);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.eventHandler.endNonterminal("SwitchCaseStatement", this.e0);
    }

    private try_SwitchCaseStatement()
    {
      for (;;)
      {
        this.consumeT(89);          // 'case'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_SwitchCaseOperand();
        if (this.token() != 89)     // 'case'
        {
          break;
        }
      }
      this.consumeT(224);           // 'return'
      this.lookahead1W(271);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Statement();
    }

    private parse_TryCatchStatement()
    {
      this.eventHandler.startNonterminal("TryCatchStatement", this.e0);
      this.consume(256);            // 'try'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.whitespace();
      this.parse_BlockStatement();
      for (;;)
      {
        this.lookahead1W(39);       // S^WS | '(:' | 'catch'
        this.consume(92);           // 'catch'
        this.lookahead1W(249);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_CatchErrorList();
        this.whitespace();
        this.parse_BlockStatement();
        this.lookahead1W(284);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        switch (this.token())
        {
        case 92:                    // 'catch'
          this.lookahead2W(256);    // Wildcard | EQName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.tokenSequence() != 2652  // 'catch' Wildcard
         && this.tokenSequence() != 3164  // 'catch' EQName^Token
         && this.tokenSequence() != 36444 // 'catch' 'after'
         && this.tokenSequence() != 37468 // 'catch' 'allowing'
         && this.tokenSequence() != 37980 // 'catch' 'ancestor'
         && this.tokenSequence() != 38492 // 'catch' 'ancestor-or-self'
         && this.tokenSequence() != 39004 // 'catch' 'and'
         && this.tokenSequence() != 40028 // 'catch' 'append'
         && this.tokenSequence() != 40540 // 'catch' 'array'
         && this.tokenSequence() != 41052 // 'catch' 'as'
         && this.tokenSequence() != 41564 // 'catch' 'ascending'
         && this.tokenSequence() != 42076 // 'catch' 'at'
         && this.tokenSequence() != 42588 // 'catch' 'attribute'
         && this.tokenSequence() != 43100 // 'catch' 'base-uri'
         && this.tokenSequence() != 43612 // 'catch' 'before'
         && this.tokenSequence() != 44124 // 'catch' 'boundary-space'
         && this.tokenSequence() != 44636 // 'catch' 'break'
         && this.tokenSequence() != 45660 // 'catch' 'case'
         && this.tokenSequence() != 46172 // 'catch' 'cast'
         && this.tokenSequence() != 46684 // 'catch' 'castable'
         && this.tokenSequence() != 47196 // 'catch' 'catch'
         && this.tokenSequence() != 48220 // 'catch' 'child'
         && this.tokenSequence() != 48732 // 'catch' 'collation'
         && this.tokenSequence() != 49756 // 'catch' 'comment'
         && this.tokenSequence() != 50268 // 'catch' 'constraint'
         && this.tokenSequence() != 50780 // 'catch' 'construction'
         && this.tokenSequence() != 52316 // 'catch' 'context'
         && this.tokenSequence() != 52828 // 'catch' 'continue'
         && this.tokenSequence() != 53340 // 'catch' 'copy'
         && this.tokenSequence() != 53852 // 'catch' 'copy-namespaces'
         && this.tokenSequence() != 54364 // 'catch' 'count'
         && this.tokenSequence() != 54876 // 'catch' 'decimal-format'
         && this.tokenSequence() != 55900 // 'catch' 'declare'
         && this.tokenSequence() != 56412 // 'catch' 'default'
         && this.tokenSequence() != 56924 // 'catch' 'delete'
         && this.tokenSequence() != 57436 // 'catch' 'descendant'
         && this.tokenSequence() != 57948 // 'catch' 'descendant-or-self'
         && this.tokenSequence() != 58460 // 'catch' 'descending'
         && this.tokenSequence() != 61020 // 'catch' 'div'
         && this.tokenSequence() != 61532 // 'catch' 'document'
         && this.tokenSequence() != 62044 // 'catch' 'document-node'
         && this.tokenSequence() != 62556 // 'catch' 'element'
         && this.tokenSequence() != 63068 // 'catch' 'else'
         && this.tokenSequence() != 63580 // 'catch' 'empty'
         && this.tokenSequence() != 64092 // 'catch' 'empty-sequence'
         && this.tokenSequence() != 64604 // 'catch' 'encoding'
         && this.tokenSequence() != 65116 // 'catch' 'end'
         && this.tokenSequence() != 66140 // 'catch' 'eq'
         && this.tokenSequence() != 66652 // 'catch' 'every'
         && this.tokenSequence() != 67676 // 'catch' 'except'
         && this.tokenSequence() != 68188 // 'catch' 'exit'
         && this.tokenSequence() != 68700 // 'catch' 'external'
         && this.tokenSequence() != 69212 // 'catch' 'false'
         && this.tokenSequence() != 69724 // 'catch' 'first'
         && this.tokenSequence() != 70236 // 'catch' 'following'
         && this.tokenSequence() != 70748 // 'catch' 'following-sibling'
         && this.tokenSequence() != 71260 // 'catch' 'for'
         && this.tokenSequence() != 72796 // 'catch' 'from'
         && this.tokenSequence() != 73308 // 'catch' 'ft-option'
         && this.tokenSequence() != 75356 // 'catch' 'function'
         && this.tokenSequence() != 75868 // 'catch' 'ge'
         && this.tokenSequence() != 76892 // 'catch' 'group'
         && this.tokenSequence() != 77916 // 'catch' 'gt'
         && this.tokenSequence() != 78428 // 'catch' 'idiv'
         && this.tokenSequence() != 78940 // 'catch' 'if'
         && this.tokenSequence() != 79452 // 'catch' 'import'
         && this.tokenSequence() != 79964 // 'catch' 'in'
         && this.tokenSequence() != 80476 // 'catch' 'index'
         && this.tokenSequence() != 82524 // 'catch' 'insert'
         && this.tokenSequence() != 83036 // 'catch' 'instance'
         && this.tokenSequence() != 83548 // 'catch' 'integrity'
         && this.tokenSequence() != 84060 // 'catch' 'intersect'
         && this.tokenSequence() != 84572 // 'catch' 'into'
         && this.tokenSequence() != 85084 // 'catch' 'is'
         && this.tokenSequence() != 85596 // 'catch' 'item'
         && this.tokenSequence() != 86108 // 'catch' 'json'
         && this.tokenSequence() != 86620 // 'catch' 'json-item'
         && this.tokenSequence() != 87132 // 'catch' 'jsoniq'
         && this.tokenSequence() != 88668 // 'catch' 'last'
         && this.tokenSequence() != 89180 // 'catch' 'lax'
         && this.tokenSequence() != 89692 // 'catch' 'le'
         && this.tokenSequence() != 90716 // 'catch' 'let'
         && this.tokenSequence() != 91740 // 'catch' 'loop'
         && this.tokenSequence() != 92764 // 'catch' 'lt'
         && this.tokenSequence() != 93788 // 'catch' 'mod'
         && this.tokenSequence() != 94300 // 'catch' 'modify'
         && this.tokenSequence() != 94812 // 'catch' 'module'
         && this.tokenSequence() != 95836 // 'catch' 'namespace'
         && this.tokenSequence() != 96348 // 'catch' 'namespace-node'
         && this.tokenSequence() != 96860 // 'catch' 'ne'
         && this.tokenSequence() != 99420 // 'catch' 'node'
         && this.tokenSequence() != 99932 // 'catch' 'nodes'
         && this.tokenSequence() != 100956  // 'catch' 'null'
         && this.tokenSequence() != 101468  // 'catch' 'object'
         && this.tokenSequence() != 103516  // 'catch' 'only'
         && this.tokenSequence() != 104028  // 'catch' 'option'
         && this.tokenSequence() != 104540  // 'catch' 'or'
         && this.tokenSequence() != 105052  // 'catch' 'order'
         && this.tokenSequence() != 105564  // 'catch' 'ordered'
         && this.tokenSequence() != 106076  // 'catch' 'ordering'
         && this.tokenSequence() != 107612  // 'catch' 'parent'
         && this.tokenSequence() != 110684  // 'catch' 'preceding'
         && this.tokenSequence() != 111196  // 'catch' 'preceding-sibling'
         && this.tokenSequence() != 112732  // 'catch' 'processing-instruction'
         && this.tokenSequence() != 113756  // 'catch' 'rename'
         && this.tokenSequence() != 114268  // 'catch' 'replace'
         && this.tokenSequence() != 114780  // 'catch' 'return'
         && this.tokenSequence() != 115292  // 'catch' 'returning'
         && this.tokenSequence() != 115804  // 'catch' 'revalidation'
         && this.tokenSequence() != 116828  // 'catch' 'satisfies'
         && this.tokenSequence() != 117340  // 'catch' 'schema'
         && this.tokenSequence() != 117852  // 'catch' 'schema-attribute'
         && this.tokenSequence() != 118364  // 'catch' 'schema-element'
         && this.tokenSequence() != 118876  // 'catch' 'score'
         && this.tokenSequence() != 119388  // 'catch' 'select'
         && this.tokenSequence() != 119900  // 'catch' 'self'
         && this.tokenSequence() != 122460  // 'catch' 'sliding'
         && this.tokenSequence() != 122972  // 'catch' 'some'
         && this.tokenSequence() != 123484  // 'catch' 'stable'
         && this.tokenSequence() != 123996  // 'catch' 'start'
         && this.tokenSequence() != 125532  // 'catch' 'strict'
         && this.tokenSequence() != 126556  // 'catch' 'structured-item'
         && this.tokenSequence() != 127068  // 'catch' 'switch'
         && this.tokenSequence() != 127580  // 'catch' 'text'
         && this.tokenSequence() != 129628  // 'catch' 'to'
         && this.tokenSequence() != 130140  // 'catch' 'treat'
         && this.tokenSequence() != 130652  // 'catch' 'true'
         && this.tokenSequence() != 131164  // 'catch' 'try'
         && this.tokenSequence() != 131676  // 'catch' 'tumbling'
         && this.tokenSequence() != 132188  // 'catch' 'type'
         && this.tokenSequence() != 132700  // 'catch' 'typeswitch'
         && this.tokenSequence() != 133212  // 'catch' 'union'
         && this.tokenSequence() != 134236  // 'catch' 'unordered'
         && this.tokenSequence() != 134748  // 'catch' 'updating'
         && this.tokenSequence() != 136284  // 'catch' 'validate'
         && this.tokenSequence() != 136796  // 'catch' 'value'
         && this.tokenSequence() != 137308  // 'catch' 'variable'
         && this.tokenSequence() != 137820  // 'catch' 'version'
         && this.tokenSequence() != 139356  // 'catch' 'where'
         && this.tokenSequence() != 139868  // 'catch' 'while'
         && this.tokenSequence() != 141404) // 'catch' 'with'
        {
          break;
        }
      }
      this.eventHandler.endNonterminal("TryCatchStatement", this.e0);
    }

    private try_TryCatchStatement()
    {
      this.consumeT(256);           // 'try'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.try_BlockStatement();
      for (;;)
      {
        this.lookahead1W(39);       // S^WS | '(:' | 'catch'
        this.consumeT(92);          // 'catch'
        this.lookahead1W(249);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_CatchErrorList();
        this.try_BlockStatement();
        this.lookahead1W(284);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        switch (this.token())
        {
        case 92:                    // 'catch'
          this.lookahead2W(256);    // Wildcard | EQName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.tokenSequence() != 2652  // 'catch' Wildcard
         && this.tokenSequence() != 3164  // 'catch' EQName^Token
         && this.tokenSequence() != 36444 // 'catch' 'after'
         && this.tokenSequence() != 37468 // 'catch' 'allowing'
         && this.tokenSequence() != 37980 // 'catch' 'ancestor'
         && this.tokenSequence() != 38492 // 'catch' 'ancestor-or-self'
         && this.tokenSequence() != 39004 // 'catch' 'and'
         && this.tokenSequence() != 40028 // 'catch' 'append'
         && this.tokenSequence() != 40540 // 'catch' 'array'
         && this.tokenSequence() != 41052 // 'catch' 'as'
         && this.tokenSequence() != 41564 // 'catch' 'ascending'
         && this.tokenSequence() != 42076 // 'catch' 'at'
         && this.tokenSequence() != 42588 // 'catch' 'attribute'
         && this.tokenSequence() != 43100 // 'catch' 'base-uri'
         && this.tokenSequence() != 43612 // 'catch' 'before'
         && this.tokenSequence() != 44124 // 'catch' 'boundary-space'
         && this.tokenSequence() != 44636 // 'catch' 'break'
         && this.tokenSequence() != 45660 // 'catch' 'case'
         && this.tokenSequence() != 46172 // 'catch' 'cast'
         && this.tokenSequence() != 46684 // 'catch' 'castable'
         && this.tokenSequence() != 47196 // 'catch' 'catch'
         && this.tokenSequence() != 48220 // 'catch' 'child'
         && this.tokenSequence() != 48732 // 'catch' 'collation'
         && this.tokenSequence() != 49756 // 'catch' 'comment'
         && this.tokenSequence() != 50268 // 'catch' 'constraint'
         && this.tokenSequence() != 50780 // 'catch' 'construction'
         && this.tokenSequence() != 52316 // 'catch' 'context'
         && this.tokenSequence() != 52828 // 'catch' 'continue'
         && this.tokenSequence() != 53340 // 'catch' 'copy'
         && this.tokenSequence() != 53852 // 'catch' 'copy-namespaces'
         && this.tokenSequence() != 54364 // 'catch' 'count'
         && this.tokenSequence() != 54876 // 'catch' 'decimal-format'
         && this.tokenSequence() != 55900 // 'catch' 'declare'
         && this.tokenSequence() != 56412 // 'catch' 'default'
         && this.tokenSequence() != 56924 // 'catch' 'delete'
         && this.tokenSequence() != 57436 // 'catch' 'descendant'
         && this.tokenSequence() != 57948 // 'catch' 'descendant-or-self'
         && this.tokenSequence() != 58460 // 'catch' 'descending'
         && this.tokenSequence() != 61020 // 'catch' 'div'
         && this.tokenSequence() != 61532 // 'catch' 'document'
         && this.tokenSequence() != 62044 // 'catch' 'document-node'
         && this.tokenSequence() != 62556 // 'catch' 'element'
         && this.tokenSequence() != 63068 // 'catch' 'else'
         && this.tokenSequence() != 63580 // 'catch' 'empty'
         && this.tokenSequence() != 64092 // 'catch' 'empty-sequence'
         && this.tokenSequence() != 64604 // 'catch' 'encoding'
         && this.tokenSequence() != 65116 // 'catch' 'end'
         && this.tokenSequence() != 66140 // 'catch' 'eq'
         && this.tokenSequence() != 66652 // 'catch' 'every'
         && this.tokenSequence() != 67676 // 'catch' 'except'
         && this.tokenSequence() != 68188 // 'catch' 'exit'
         && this.tokenSequence() != 68700 // 'catch' 'external'
         && this.tokenSequence() != 69212 // 'catch' 'false'
         && this.tokenSequence() != 69724 // 'catch' 'first'
         && this.tokenSequence() != 70236 // 'catch' 'following'
         && this.tokenSequence() != 70748 // 'catch' 'following-sibling'
         && this.tokenSequence() != 71260 // 'catch' 'for'
         && this.tokenSequence() != 72796 // 'catch' 'from'
         && this.tokenSequence() != 73308 // 'catch' 'ft-option'
         && this.tokenSequence() != 75356 // 'catch' 'function'
         && this.tokenSequence() != 75868 // 'catch' 'ge'
         && this.tokenSequence() != 76892 // 'catch' 'group'
         && this.tokenSequence() != 77916 // 'catch' 'gt'
         && this.tokenSequence() != 78428 // 'catch' 'idiv'
         && this.tokenSequence() != 78940 // 'catch' 'if'
         && this.tokenSequence() != 79452 // 'catch' 'import'
         && this.tokenSequence() != 79964 // 'catch' 'in'
         && this.tokenSequence() != 80476 // 'catch' 'index'
         && this.tokenSequence() != 82524 // 'catch' 'insert'
         && this.tokenSequence() != 83036 // 'catch' 'instance'
         && this.tokenSequence() != 83548 // 'catch' 'integrity'
         && this.tokenSequence() != 84060 // 'catch' 'intersect'
         && this.tokenSequence() != 84572 // 'catch' 'into'
         && this.tokenSequence() != 85084 // 'catch' 'is'
         && this.tokenSequence() != 85596 // 'catch' 'item'
         && this.tokenSequence() != 86108 // 'catch' 'json'
         && this.tokenSequence() != 86620 // 'catch' 'json-item'
         && this.tokenSequence() != 87132 // 'catch' 'jsoniq'
         && this.tokenSequence() != 88668 // 'catch' 'last'
         && this.tokenSequence() != 89180 // 'catch' 'lax'
         && this.tokenSequence() != 89692 // 'catch' 'le'
         && this.tokenSequence() != 90716 // 'catch' 'let'
         && this.tokenSequence() != 91740 // 'catch' 'loop'
         && this.tokenSequence() != 92764 // 'catch' 'lt'
         && this.tokenSequence() != 93788 // 'catch' 'mod'
         && this.tokenSequence() != 94300 // 'catch' 'modify'
         && this.tokenSequence() != 94812 // 'catch' 'module'
         && this.tokenSequence() != 95836 // 'catch' 'namespace'
         && this.tokenSequence() != 96348 // 'catch' 'namespace-node'
         && this.tokenSequence() != 96860 // 'catch' 'ne'
         && this.tokenSequence() != 99420 // 'catch' 'node'
         && this.tokenSequence() != 99932 // 'catch' 'nodes'
         && this.tokenSequence() != 100956  // 'catch' 'null'
         && this.tokenSequence() != 101468  // 'catch' 'object'
         && this.tokenSequence() != 103516  // 'catch' 'only'
         && this.tokenSequence() != 104028  // 'catch' 'option'
         && this.tokenSequence() != 104540  // 'catch' 'or'
         && this.tokenSequence() != 105052  // 'catch' 'order'
         && this.tokenSequence() != 105564  // 'catch' 'ordered'
         && this.tokenSequence() != 106076  // 'catch' 'ordering'
         && this.tokenSequence() != 107612  // 'catch' 'parent'
         && this.tokenSequence() != 110684  // 'catch' 'preceding'
         && this.tokenSequence() != 111196  // 'catch' 'preceding-sibling'
         && this.tokenSequence() != 112732  // 'catch' 'processing-instruction'
         && this.tokenSequence() != 113756  // 'catch' 'rename'
         && this.tokenSequence() != 114268  // 'catch' 'replace'
         && this.tokenSequence() != 114780  // 'catch' 'return'
         && this.tokenSequence() != 115292  // 'catch' 'returning'
         && this.tokenSequence() != 115804  // 'catch' 'revalidation'
         && this.tokenSequence() != 116828  // 'catch' 'satisfies'
         && this.tokenSequence() != 117340  // 'catch' 'schema'
         && this.tokenSequence() != 117852  // 'catch' 'schema-attribute'
         && this.tokenSequence() != 118364  // 'catch' 'schema-element'
         && this.tokenSequence() != 118876  // 'catch' 'score'
         && this.tokenSequence() != 119388  // 'catch' 'select'
         && this.tokenSequence() != 119900  // 'catch' 'self'
         && this.tokenSequence() != 122460  // 'catch' 'sliding'
         && this.tokenSequence() != 122972  // 'catch' 'some'
         && this.tokenSequence() != 123484  // 'catch' 'stable'
         && this.tokenSequence() != 123996  // 'catch' 'start'
         && this.tokenSequence() != 125532  // 'catch' 'strict'
         && this.tokenSequence() != 126556  // 'catch' 'structured-item'
         && this.tokenSequence() != 127068  // 'catch' 'switch'
         && this.tokenSequence() != 127580  // 'catch' 'text'
         && this.tokenSequence() != 129628  // 'catch' 'to'
         && this.tokenSequence() != 130140  // 'catch' 'treat'
         && this.tokenSequence() != 130652  // 'catch' 'true'
         && this.tokenSequence() != 131164  // 'catch' 'try'
         && this.tokenSequence() != 131676  // 'catch' 'tumbling'
         && this.tokenSequence() != 132188  // 'catch' 'type'
         && this.tokenSequence() != 132700  // 'catch' 'typeswitch'
         && this.tokenSequence() != 133212  // 'catch' 'union'
         && this.tokenSequence() != 134236  // 'catch' 'unordered'
         && this.tokenSequence() != 134748  // 'catch' 'updating'
         && this.tokenSequence() != 136284  // 'catch' 'validate'
         && this.tokenSequence() != 136796  // 'catch' 'value'
         && this.tokenSequence() != 137308  // 'catch' 'variable'
         && this.tokenSequence() != 137820  // 'catch' 'version'
         && this.tokenSequence() != 139356  // 'catch' 'where'
         && this.tokenSequence() != 139868  // 'catch' 'while'
         && this.tokenSequence() != 141404) // 'catch' 'with'
        {
          break;
        }
      }
    }

    private parse_TypeswitchStatement()
    {
      this.eventHandler.startNonterminal("TypeswitchStatement", this.e0);
      this.consume(259);            // 'typeswitch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consume(35);             // '('
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.consume(38);             // ')'
      for (;;)
      {
        this.lookahead1W(38);       // S^WS | '(:' | 'case'
        this.whitespace();
        this.parse_CaseStatement();
        this.lookahead1W(117);      // S^WS | '(:' | 'case' | 'default'
        if (this.token() != 89)     // 'case'
        {
          break;
        }
      }
      this.consume(110);            // 'default'
      this.lookahead1W(99);         // S^WS | '$' | '(:' | 'return'
      if (this.token() == 31)       // '$'
      {
        this.consume(31);           // '$'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_VarName();
      }
      this.lookahead1W(73);         // S^WS | '(:' | 'return'
      this.consume(224);            // 'return'
      this.lookahead1W(271);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.eventHandler.endNonterminal("TypeswitchStatement", this.e0);
    }

    private try_TypeswitchStatement()
    {
      this.consumeT(259);           // 'typeswitch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consumeT(35);            // '('
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.consumeT(38);            // ')'
      for (;;)
      {
        this.lookahead1W(38);       // S^WS | '(:' | 'case'
        this.try_CaseStatement();
        this.lookahead1W(117);      // S^WS | '(:' | 'case' | 'default'
        if (this.token() != 89)     // 'case'
        {
          break;
        }
      }
      this.consumeT(110);           // 'default'
      this.lookahead1W(99);         // S^WS | '$' | '(:' | 'return'
      if (this.token() == 31)       // '$'
      {
        this.consumeT(31);          // '$'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_VarName();
      }
      this.lookahead1W(73);         // S^WS | '(:' | 'return'
      this.consumeT(224);           // 'return'
      this.lookahead1W(271);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Statement();
    }

    private parse_CaseStatement()
    {
      this.eventHandler.startNonterminal("CaseStatement", this.e0);
      this.consume(89);             // 'case'
      this.lookahead1W(258);        // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.token() == 31)       // '$'
      {
        this.consume(31);           // '$'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_VarName();
        this.lookahead1W(33);       // S^WS | '(:' | 'as'
        this.consume(80);           // 'as'
      }
      this.lookahead1W(254);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_SequenceType();
      this.lookahead1W(73);         // S^WS | '(:' | 'return'
      this.consume(224);            // 'return'
      this.lookahead1W(271);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.eventHandler.endNonterminal("CaseStatement", this.e0);
    }

    private try_CaseStatement()
    {
      this.consumeT(89);            // 'case'
      this.lookahead1W(258);        // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.token() == 31)       // '$'
      {
        this.consumeT(31);          // '$'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_VarName();
        this.lookahead1W(33);       // S^WS | '(:' | 'as'
        this.consumeT(80);          // 'as'
      }
      this.lookahead1W(254);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_SequenceType();
      this.lookahead1W(73);         // S^WS | '(:' | 'return'
      this.consumeT(224);           // 'return'
      this.lookahead1W(271);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Statement();
    }

    private parse_VarDeclStatement()
    {
      this.eventHandler.startNonterminal("VarDeclStatement", this.e0);
      for (;;)
      {
        this.lookahead1W(102);      // S^WS | '%' | '(:' | 'variable'
        if (this.token() != 33)     // '%'
        {
          break;
        }
        this.whitespace();
        this.parse_Annotation();
      }
      this.consume(268);            // 'variable'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.consume(31);             // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(172);        // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (this.token() == 80)       // 'as'
      {
        this.whitespace();
        this.parse_TypeDeclaration();
      }
      this.lookahead1W(155);        // S^WS | '(:' | ',' | ':=' | ';'
      if (this.token() == 53)       // ':='
      {
        this.consume(53);           // ':='
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_ExprSingle();
      }
      for (;;)
      {
        if (this.token() != 42)     // ','
        {
          break;
        }
        this.consume(42);           // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.consume(31);           // '$'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_VarName();
        this.lookahead1W(172);      // S^WS | '(:' | ',' | ':=' | ';' | 'as'
        if (this.token() == 80)     // 'as'
        {
          this.whitespace();
          this.parse_TypeDeclaration();
        }
        this.lookahead1W(155);      // S^WS | '(:' | ',' | ':=' | ';'
        if (this.token() == 53)     // ':='
        {
          this.consume(53);         // ':='
          this.lookahead1W(267);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          this.whitespace();
          this.parse_ExprSingle();
        }
      }
      this.consume(54);             // ';'
      this.eventHandler.endNonterminal("VarDeclStatement", this.e0);
    }

    private try_VarDeclStatement()
    {
      for (;;)
      {
        this.lookahead1W(102);      // S^WS | '%' | '(:' | 'variable'
        if (this.token() != 33)     // '%'
        {
          break;
        }
        this.try_Annotation();
      }
      this.consumeT(268);           // 'variable'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.consumeT(31);            // '$'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
      this.lookahead1W(172);        // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (this.token() == 80)       // 'as'
      {
        this.try_TypeDeclaration();
      }
      this.lookahead1W(155);        // S^WS | '(:' | ',' | ':=' | ';'
      if (this.token() == 53)       // ':='
      {
        this.consumeT(53);          // ':='
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_ExprSingle();
      }
      for (;;)
      {
        if (this.token() != 42)     // ','
        {
          break;
        }
        this.consumeT(42);          // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.consumeT(31);          // '$'
        this.lookahead1W(246);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_VarName();
        this.lookahead1W(172);      // S^WS | '(:' | ',' | ':=' | ';' | 'as'
        if (this.token() == 80)     // 'as'
        {
          this.try_TypeDeclaration();
        }
        this.lookahead1W(155);      // S^WS | '(:' | ',' | ':=' | ';'
        if (this.token() == 53)     // ':='
        {
          this.consumeT(53);        // ':='
          this.lookahead1W(267);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          this.try_ExprSingle();
        }
      }
      this.consumeT(54);            // ';'
    }

    private parse_WhileStatement()
    {
      this.eventHandler.startNonterminal("WhileStatement", this.e0);
      this.consume(273);            // 'while'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consume(35);             // '('
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.consume(38);             // ')'
      this.lookahead1W(271);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.eventHandler.endNonterminal("WhileStatement", this.e0);
    }

    private try_WhileStatement()
    {
      this.consumeT(273);           // 'while'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consumeT(35);            // '('
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.consumeT(38);            // ')'
      this.lookahead1W(271);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Statement();
    }

    private parse_VoidStatement()
    {
      this.eventHandler.startNonterminal("VoidStatement", this.e0);
      this.consume(54);             // ';'
      this.eventHandler.endNonterminal("VoidStatement", this.e0);
    }

    private try_VoidStatement()
    {
      this.consumeT(54);            // ';'
    }

    private parse_ExprSingle()
    {
      this.eventHandler.startNonterminal("ExprSingle", this.e0);
      switch (this.token())
      {
      case 139:                     // 'for'
        this.lookahead2W(179);      // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
        break;
      case 177:                     // 'let'
        this.lookahead2W(166);      // S^WS | '#' | '$' | '(' | '(:' | 'score'
        break;
      case 256:                     // 'try'
        this.lookahead2W(148);      // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 154:                     // 'if'
      case 248:                     // 'switch'
      case 259:                     // 'typeswitch'
        this.lookahead2W(95);       // S^WS | '#' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.tokenSequence())
      {
      case 16011:                   // 'for' '$'
      case 16049:                   // 'let' '$'
      case 118961:                  // 'let' 'score'
      case 122507:                  // 'for' 'sliding'
      case 131723:                  // 'for' 'tumbling'
        this.parse_FLWORExpr();
        break;
      case 18074:                   // 'if' '('
        this.parse_IfExpr();
        break;
      case 18168:                   // 'switch' '('
        this.parse_SwitchExpr();
        break;
      case 144128:                  // 'try' '{'
        this.parse_TryCatchExpr();
        break;
      case 18179:                   // 'typeswitch' '('
        this.parse_TypeswitchExpr();
        break;
      default:
        this.parse_ExprSimple();
      }
      this.eventHandler.endNonterminal("ExprSingle", this.e0);
    }

    private try_ExprSingle()
    {
      switch (this.token())
      {
      case 139:                     // 'for'
        this.lookahead2W(179);      // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
        break;
      case 177:                     // 'let'
        this.lookahead2W(166);      // S^WS | '#' | '$' | '(' | '(:' | 'score'
        break;
      case 256:                     // 'try'
        this.lookahead2W(148);      // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 154:                     // 'if'
      case 248:                     // 'switch'
      case 259:                     // 'typeswitch'
        this.lookahead2W(95);       // S^WS | '#' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.tokenSequence())
      {
      case 16011:                   // 'for' '$'
      case 16049:                   // 'let' '$'
      case 118961:                  // 'let' 'score'
      case 122507:                  // 'for' 'sliding'
      case 131723:                  // 'for' 'tumbling'
        this.try_FLWORExpr();
        break;
      case 18074:                   // 'if' '('
        this.try_IfExpr();
        break;
      case 18168:                   // 'switch' '('
        this.try_SwitchExpr();
        break;
      case 144128:                  // 'try' '{'
        this.try_TryCatchExpr();
        break;
      case 18179:                   // 'typeswitch' '('
        this.try_TypeswitchExpr();
        break;
      default:
        this.try_ExprSimple();
      }
    }

    private parse_ExprSimple()
    {
      this.eventHandler.startNonterminal("ExprSimple", this.e0);
      switch (this.token())
      {
      case 78:                      // 'append'
        this.lookahead2W(269);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 161:                     // 'insert'
        this.lookahead2W(276);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 223:                     // 'replace'
        this.lookahead2W(170);      // S^WS | '#' | '(' | '(:' | 'node' | 'value'
        break;
      case 111:                     // 'delete'
      case 222:                     // 'rename'
        this.lookahead2W(261);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      case 104:                     // 'copy'
      case 130:                     // 'every'
      case 240:                     // 'some'
        this.lookahead2W(143);      // S^WS | '#' | '$' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 17998 // 'append' '('
       || this.tokenSequence() == 18031 // 'delete' '('
       || this.tokenSequence() == 18081 // 'insert' '('
       || this.tokenSequence() == 18142 // 'rename' '('
       || this.tokenSequence() == 99439 // 'delete' 'node'
       || this.tokenSequence() == 99489 // 'insert' 'node'
       || this.tokenSequence() == 99550 // 'rename' 'node'
       || this.tokenSequence() == 99951 // 'delete' 'nodes'
       || this.tokenSequence() == 100001  // 'insert' 'nodes'
       || this.tokenSequence() == 136927) // 'replace' 'value'
      {
        this.lk = this.memoized(10, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_OrExpr();
            this.lk = -2;
          }
          catch (p2A)
          {
            try
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.try_InsertExpr();
              this.lk = -3;
            }
            catch (p3A)
            {
              try
              {
                this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                this.try_DeleteExpr();
                this.lk = -4;
              }
              catch (p4A)
              {
                try
                {
                  this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                  this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                  this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                  this.try_RenameExpr();
                  this.lk = -5;
                }
                catch (p5A)
                {
                  try
                  {
                    this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                    this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                    this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                    this.try_ReplaceExpr();
                    this.lk = -6;
                  }
                  catch (p6A)
                  {
                    try
                    {
                      this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                      this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                      this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                      this.try_JSONDeleteExpr();
                      this.lk = -8;
                    }
                    catch (p8A)
                    {
                      try
                      {
                        this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                        this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                        this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                        this.try_JSONInsertExpr();
                        this.lk = -9;
                      }
                      catch (p9A)
                      {
                        try
                        {
                          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                          this.try_JSONRenameExpr();
                          this.lk = -10;
                        }
                        catch (p10A)
                        {
                          try
                          {
                            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                            this.try_JSONReplaceExpr();
                            this.lk = -11;
                          }
                          catch (p11A)
                          {
                            this.lk = -12;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(10, this.e0, this.lk);
        }
      }
      switch (this.tokenSequence())
      {
      case 16002:                   // 'every' '$'
      case 16112:                   // 'some' '$'
        this.parse_QuantifiedExpr();
        break;
      case -3:
        this.parse_InsertExpr();
        break;
      case -4:
        this.parse_DeleteExpr();
        break;
      case -5:
        this.parse_RenameExpr();
        break;
      case -6:
      case 99551:                   // 'replace' 'node'
        this.parse_ReplaceExpr();
        break;
      case 15976:                   // 'copy' '$'
        this.parse_TransformExpr();
        break;
      case -8:
      case 3183:                    // 'delete' EQName^Token
      case 4207:                    // 'delete' IntegerLiteral
      case 4719:                    // 'delete' DecimalLiteral
      case 5231:                    // 'delete' DoubleLiteral
      case 5743:                    // 'delete' StringLiteral
      case 15983:                   // 'delete' '$'
      case 16495:                   // 'delete' '$$'
      case 17007:                   // 'delete' '%'
      case 28271:                   // 'delete' '<'
      case 28783:                   // 'delete' '<!--'
      case 30831:                   // 'delete' '<?'
      case 35439:                   // 'delete' '['
      case 36463:                   // 'delete' 'after'
      case 37487:                   // 'delete' 'allowing'
      case 37999:                   // 'delete' 'ancestor'
      case 38511:                   // 'delete' 'ancestor-or-self'
      case 39023:                   // 'delete' 'and'
      case 40047:                   // 'delete' 'append'
      case 40559:                   // 'delete' 'array'
      case 41071:                   // 'delete' 'as'
      case 41583:                   // 'delete' 'ascending'
      case 42095:                   // 'delete' 'at'
      case 42607:                   // 'delete' 'attribute'
      case 43119:                   // 'delete' 'base-uri'
      case 43631:                   // 'delete' 'before'
      case 44143:                   // 'delete' 'boundary-space'
      case 44655:                   // 'delete' 'break'
      case 45679:                   // 'delete' 'case'
      case 46191:                   // 'delete' 'cast'
      case 46703:                   // 'delete' 'castable'
      case 47215:                   // 'delete' 'catch'
      case 48239:                   // 'delete' 'child'
      case 48751:                   // 'delete' 'collation'
      case 49775:                   // 'delete' 'comment'
      case 50287:                   // 'delete' 'constraint'
      case 50799:                   // 'delete' 'construction'
      case 52335:                   // 'delete' 'context'
      case 52847:                   // 'delete' 'continue'
      case 53359:                   // 'delete' 'copy'
      case 53871:                   // 'delete' 'copy-namespaces'
      case 54383:                   // 'delete' 'count'
      case 54895:                   // 'delete' 'decimal-format'
      case 55919:                   // 'delete' 'declare'
      case 56431:                   // 'delete' 'default'
      case 56943:                   // 'delete' 'delete'
      case 57455:                   // 'delete' 'descendant'
      case 57967:                   // 'delete' 'descendant-or-self'
      case 58479:                   // 'delete' 'descending'
      case 61039:                   // 'delete' 'div'
      case 61551:                   // 'delete' 'document'
      case 62063:                   // 'delete' 'document-node'
      case 62575:                   // 'delete' 'element'
      case 63087:                   // 'delete' 'else'
      case 63599:                   // 'delete' 'empty'
      case 64111:                   // 'delete' 'empty-sequence'
      case 64623:                   // 'delete' 'encoding'
      case 65135:                   // 'delete' 'end'
      case 66159:                   // 'delete' 'eq'
      case 66671:                   // 'delete' 'every'
      case 67695:                   // 'delete' 'except'
      case 68207:                   // 'delete' 'exit'
      case 68719:                   // 'delete' 'external'
      case 69231:                   // 'delete' 'false'
      case 69743:                   // 'delete' 'first'
      case 70255:                   // 'delete' 'following'
      case 70767:                   // 'delete' 'following-sibling'
      case 71279:                   // 'delete' 'for'
      case 72815:                   // 'delete' 'from'
      case 73327:                   // 'delete' 'ft-option'
      case 75375:                   // 'delete' 'function'
      case 75887:                   // 'delete' 'ge'
      case 76911:                   // 'delete' 'group'
      case 77935:                   // 'delete' 'gt'
      case 78447:                   // 'delete' 'idiv'
      case 78959:                   // 'delete' 'if'
      case 79471:                   // 'delete' 'import'
      case 79983:                   // 'delete' 'in'
      case 80495:                   // 'delete' 'index'
      case 82543:                   // 'delete' 'insert'
      case 83055:                   // 'delete' 'instance'
      case 83567:                   // 'delete' 'integrity'
      case 84079:                   // 'delete' 'intersect'
      case 84591:                   // 'delete' 'into'
      case 85103:                   // 'delete' 'is'
      case 85615:                   // 'delete' 'item'
      case 86127:                   // 'delete' 'json'
      case 86639:                   // 'delete' 'json-item'
      case 87151:                   // 'delete' 'jsoniq'
      case 88687:                   // 'delete' 'last'
      case 89199:                   // 'delete' 'lax'
      case 89711:                   // 'delete' 'le'
      case 90735:                   // 'delete' 'let'
      case 91759:                   // 'delete' 'loop'
      case 92783:                   // 'delete' 'lt'
      case 93807:                   // 'delete' 'mod'
      case 94319:                   // 'delete' 'modify'
      case 94831:                   // 'delete' 'module'
      case 95855:                   // 'delete' 'namespace'
      case 96367:                   // 'delete' 'namespace-node'
      case 96879:                   // 'delete' 'ne'
      case 100975:                  // 'delete' 'null'
      case 101487:                  // 'delete' 'object'
      case 103535:                  // 'delete' 'only'
      case 104047:                  // 'delete' 'option'
      case 104559:                  // 'delete' 'or'
      case 105071:                  // 'delete' 'order'
      case 105583:                  // 'delete' 'ordered'
      case 106095:                  // 'delete' 'ordering'
      case 107631:                  // 'delete' 'parent'
      case 110703:                  // 'delete' 'preceding'
      case 111215:                  // 'delete' 'preceding-sibling'
      case 112751:                  // 'delete' 'processing-instruction'
      case 113775:                  // 'delete' 'rename'
      case 114287:                  // 'delete' 'replace'
      case 114799:                  // 'delete' 'return'
      case 115311:                  // 'delete' 'returning'
      case 115823:                  // 'delete' 'revalidation'
      case 116847:                  // 'delete' 'satisfies'
      case 117359:                  // 'delete' 'schema'
      case 117871:                  // 'delete' 'schema-attribute'
      case 118383:                  // 'delete' 'schema-element'
      case 118895:                  // 'delete' 'score'
      case 119407:                  // 'delete' 'select'
      case 119919:                  // 'delete' 'self'
      case 122479:                  // 'delete' 'sliding'
      case 122991:                  // 'delete' 'some'
      case 123503:                  // 'delete' 'stable'
      case 124015:                  // 'delete' 'start'
      case 125551:                  // 'delete' 'strict'
      case 126575:                  // 'delete' 'structured-item'
      case 127087:                  // 'delete' 'switch'
      case 127599:                  // 'delete' 'text'
      case 129647:                  // 'delete' 'to'
      case 130159:                  // 'delete' 'treat'
      case 130671:                  // 'delete' 'true'
      case 131183:                  // 'delete' 'try'
      case 131695:                  // 'delete' 'tumbling'
      case 132207:                  // 'delete' 'type'
      case 132719:                  // 'delete' 'typeswitch'
      case 133231:                  // 'delete' 'union'
      case 134255:                  // 'delete' 'unordered'
      case 134767:                  // 'delete' 'updating'
      case 136303:                  // 'delete' 'validate'
      case 136815:                  // 'delete' 'value'
      case 137327:                  // 'delete' 'variable'
      case 137839:                  // 'delete' 'version'
      case 139375:                  // 'delete' 'where'
      case 139887:                  // 'delete' 'while'
      case 141423:                  // 'delete' 'with'
      case 143983:                  // 'delete' '{'
      case 145007:                  // 'delete' '{|'
        this.parse_JSONDeleteExpr();
        break;
      case -9:
      case 3233:                    // 'insert' EQName^Token
      case 4257:                    // 'insert' IntegerLiteral
      case 4769:                    // 'insert' DecimalLiteral
      case 5281:                    // 'insert' DoubleLiteral
      case 5793:                    // 'insert' StringLiteral
      case 9889:                    // 'insert' NCName^Token
      case 16033:                   // 'insert' '$'
      case 16545:                   // 'insert' '$$'
      case 17057:                   // 'insert' '%'
      case 18593:                   // 'insert' '(#'
      case 21153:                   // 'insert' '+'
      case 22177:                   // 'insert' '-'
      case 24225:                   // 'insert' '/'
      case 24737:                   // 'insert' '//'
      case 28321:                   // 'insert' '<'
      case 28833:                   // 'insert' '<!--'
      case 30881:                   // 'insert' '<?'
      case 35489:                   // 'insert' '['
      case 36513:                   // 'insert' 'after'
      case 37537:                   // 'insert' 'allowing'
      case 38049:                   // 'insert' 'ancestor'
      case 38561:                   // 'insert' 'ancestor-or-self'
      case 39073:                   // 'insert' 'and'
      case 40097:                   // 'insert' 'append'
      case 40609:                   // 'insert' 'array'
      case 41121:                   // 'insert' 'as'
      case 41633:                   // 'insert' 'ascending'
      case 42145:                   // 'insert' 'at'
      case 42657:                   // 'insert' 'attribute'
      case 43169:                   // 'insert' 'base-uri'
      case 43681:                   // 'insert' 'before'
      case 44193:                   // 'insert' 'boundary-space'
      case 44705:                   // 'insert' 'break'
      case 45729:                   // 'insert' 'case'
      case 46241:                   // 'insert' 'cast'
      case 46753:                   // 'insert' 'castable'
      case 47265:                   // 'insert' 'catch'
      case 48289:                   // 'insert' 'child'
      case 48801:                   // 'insert' 'collation'
      case 49825:                   // 'insert' 'comment'
      case 50337:                   // 'insert' 'constraint'
      case 50849:                   // 'insert' 'construction'
      case 52385:                   // 'insert' 'context'
      case 52897:                   // 'insert' 'continue'
      case 53409:                   // 'insert' 'copy'
      case 53921:                   // 'insert' 'copy-namespaces'
      case 54433:                   // 'insert' 'count'
      case 54945:                   // 'insert' 'decimal-format'
      case 55969:                   // 'insert' 'declare'
      case 56481:                   // 'insert' 'default'
      case 56993:                   // 'insert' 'delete'
      case 57505:                   // 'insert' 'descendant'
      case 58017:                   // 'insert' 'descendant-or-self'
      case 58529:                   // 'insert' 'descending'
      case 61089:                   // 'insert' 'div'
      case 61601:                   // 'insert' 'document'
      case 62113:                   // 'insert' 'document-node'
      case 62625:                   // 'insert' 'element'
      case 63137:                   // 'insert' 'else'
      case 63649:                   // 'insert' 'empty'
      case 64161:                   // 'insert' 'empty-sequence'
      case 64673:                   // 'insert' 'encoding'
      case 65185:                   // 'insert' 'end'
      case 66209:                   // 'insert' 'eq'
      case 66721:                   // 'insert' 'every'
      case 67745:                   // 'insert' 'except'
      case 68257:                   // 'insert' 'exit'
      case 68769:                   // 'insert' 'external'
      case 69281:                   // 'insert' 'false'
      case 69793:                   // 'insert' 'first'
      case 70305:                   // 'insert' 'following'
      case 70817:                   // 'insert' 'following-sibling'
      case 71329:                   // 'insert' 'for'
      case 72865:                   // 'insert' 'from'
      case 73377:                   // 'insert' 'ft-option'
      case 75425:                   // 'insert' 'function'
      case 75937:                   // 'insert' 'ge'
      case 76961:                   // 'insert' 'group'
      case 77985:                   // 'insert' 'gt'
      case 78497:                   // 'insert' 'idiv'
      case 79009:                   // 'insert' 'if'
      case 79521:                   // 'insert' 'import'
      case 80033:                   // 'insert' 'in'
      case 80545:                   // 'insert' 'index'
      case 82593:                   // 'insert' 'insert'
      case 83105:                   // 'insert' 'instance'
      case 83617:                   // 'insert' 'integrity'
      case 84129:                   // 'insert' 'intersect'
      case 84641:                   // 'insert' 'into'
      case 85153:                   // 'insert' 'is'
      case 85665:                   // 'insert' 'item'
      case 86177:                   // 'insert' 'json'
      case 86689:                   // 'insert' 'json-item'
      case 87201:                   // 'insert' 'jsoniq'
      case 88737:                   // 'insert' 'last'
      case 89249:                   // 'insert' 'lax'
      case 89761:                   // 'insert' 'le'
      case 90785:                   // 'insert' 'let'
      case 91809:                   // 'insert' 'loop'
      case 92833:                   // 'insert' 'lt'
      case 93857:                   // 'insert' 'mod'
      case 94369:                   // 'insert' 'modify'
      case 94881:                   // 'insert' 'module'
      case 95905:                   // 'insert' 'namespace'
      case 96417:                   // 'insert' 'namespace-node'
      case 96929:                   // 'insert' 'ne'
      case 100513:                  // 'insert' 'not'
      case 101025:                  // 'insert' 'null'
      case 101537:                  // 'insert' 'object'
      case 103585:                  // 'insert' 'only'
      case 104097:                  // 'insert' 'option'
      case 104609:                  // 'insert' 'or'
      case 105121:                  // 'insert' 'order'
      case 105633:                  // 'insert' 'ordered'
      case 106145:                  // 'insert' 'ordering'
      case 107681:                  // 'insert' 'parent'
      case 110753:                  // 'insert' 'preceding'
      case 111265:                  // 'insert' 'preceding-sibling'
      case 112801:                  // 'insert' 'processing-instruction'
      case 113825:                  // 'insert' 'rename'
      case 114337:                  // 'insert' 'replace'
      case 114849:                  // 'insert' 'return'
      case 115361:                  // 'insert' 'returning'
      case 115873:                  // 'insert' 'revalidation'
      case 116897:                  // 'insert' 'satisfies'
      case 117409:                  // 'insert' 'schema'
      case 117921:                  // 'insert' 'schema-attribute'
      case 118433:                  // 'insert' 'schema-element'
      case 118945:                  // 'insert' 'score'
      case 119457:                  // 'insert' 'select'
      case 119969:                  // 'insert' 'self'
      case 122529:                  // 'insert' 'sliding'
      case 123041:                  // 'insert' 'some'
      case 123553:                  // 'insert' 'stable'
      case 124065:                  // 'insert' 'start'
      case 125601:                  // 'insert' 'strict'
      case 126625:                  // 'insert' 'structured-item'
      case 127137:                  // 'insert' 'switch'
      case 127649:                  // 'insert' 'text'
      case 129697:                  // 'insert' 'to'
      case 130209:                  // 'insert' 'treat'
      case 130721:                  // 'insert' 'true'
      case 131233:                  // 'insert' 'try'
      case 131745:                  // 'insert' 'tumbling'
      case 132257:                  // 'insert' 'type'
      case 132769:                  // 'insert' 'typeswitch'
      case 133281:                  // 'insert' 'union'
      case 134305:                  // 'insert' 'unordered'
      case 134817:                  // 'insert' 'updating'
      case 136353:                  // 'insert' 'validate'
      case 136865:                  // 'insert' 'value'
      case 137377:                  // 'insert' 'variable'
      case 137889:                  // 'insert' 'version'
      case 139425:                  // 'insert' 'where'
      case 139937:                  // 'insert' 'while'
      case 141473:                  // 'insert' 'with'
      case 144033:                  // 'insert' '{'
      case 145057:                  // 'insert' '{|'
        this.parse_JSONInsertExpr();
        break;
      case -10:
      case 3294:                    // 'rename' EQName^Token
      case 4318:                    // 'rename' IntegerLiteral
      case 4830:                    // 'rename' DecimalLiteral
      case 5342:                    // 'rename' DoubleLiteral
      case 5854:                    // 'rename' StringLiteral
      case 16094:                   // 'rename' '$'
      case 16606:                   // 'rename' '$$'
      case 17118:                   // 'rename' '%'
      case 28382:                   // 'rename' '<'
      case 28894:                   // 'rename' '<!--'
      case 30942:                   // 'rename' '<?'
      case 35550:                   // 'rename' '['
      case 36574:                   // 'rename' 'after'
      case 37598:                   // 'rename' 'allowing'
      case 38110:                   // 'rename' 'ancestor'
      case 38622:                   // 'rename' 'ancestor-or-self'
      case 39134:                   // 'rename' 'and'
      case 40158:                   // 'rename' 'append'
      case 40670:                   // 'rename' 'array'
      case 41182:                   // 'rename' 'as'
      case 41694:                   // 'rename' 'ascending'
      case 42206:                   // 'rename' 'at'
      case 42718:                   // 'rename' 'attribute'
      case 43230:                   // 'rename' 'base-uri'
      case 43742:                   // 'rename' 'before'
      case 44254:                   // 'rename' 'boundary-space'
      case 44766:                   // 'rename' 'break'
      case 45790:                   // 'rename' 'case'
      case 46302:                   // 'rename' 'cast'
      case 46814:                   // 'rename' 'castable'
      case 47326:                   // 'rename' 'catch'
      case 48350:                   // 'rename' 'child'
      case 48862:                   // 'rename' 'collation'
      case 49886:                   // 'rename' 'comment'
      case 50398:                   // 'rename' 'constraint'
      case 50910:                   // 'rename' 'construction'
      case 52446:                   // 'rename' 'context'
      case 52958:                   // 'rename' 'continue'
      case 53470:                   // 'rename' 'copy'
      case 53982:                   // 'rename' 'copy-namespaces'
      case 54494:                   // 'rename' 'count'
      case 55006:                   // 'rename' 'decimal-format'
      case 56030:                   // 'rename' 'declare'
      case 56542:                   // 'rename' 'default'
      case 57054:                   // 'rename' 'delete'
      case 57566:                   // 'rename' 'descendant'
      case 58078:                   // 'rename' 'descendant-or-self'
      case 58590:                   // 'rename' 'descending'
      case 61150:                   // 'rename' 'div'
      case 61662:                   // 'rename' 'document'
      case 62174:                   // 'rename' 'document-node'
      case 62686:                   // 'rename' 'element'
      case 63198:                   // 'rename' 'else'
      case 63710:                   // 'rename' 'empty'
      case 64222:                   // 'rename' 'empty-sequence'
      case 64734:                   // 'rename' 'encoding'
      case 65246:                   // 'rename' 'end'
      case 66270:                   // 'rename' 'eq'
      case 66782:                   // 'rename' 'every'
      case 67806:                   // 'rename' 'except'
      case 68318:                   // 'rename' 'exit'
      case 68830:                   // 'rename' 'external'
      case 69342:                   // 'rename' 'false'
      case 69854:                   // 'rename' 'first'
      case 70366:                   // 'rename' 'following'
      case 70878:                   // 'rename' 'following-sibling'
      case 71390:                   // 'rename' 'for'
      case 72926:                   // 'rename' 'from'
      case 73438:                   // 'rename' 'ft-option'
      case 75486:                   // 'rename' 'function'
      case 75998:                   // 'rename' 'ge'
      case 77022:                   // 'rename' 'group'
      case 78046:                   // 'rename' 'gt'
      case 78558:                   // 'rename' 'idiv'
      case 79070:                   // 'rename' 'if'
      case 79582:                   // 'rename' 'import'
      case 80094:                   // 'rename' 'in'
      case 80606:                   // 'rename' 'index'
      case 82654:                   // 'rename' 'insert'
      case 83166:                   // 'rename' 'instance'
      case 83678:                   // 'rename' 'integrity'
      case 84190:                   // 'rename' 'intersect'
      case 84702:                   // 'rename' 'into'
      case 85214:                   // 'rename' 'is'
      case 85726:                   // 'rename' 'item'
      case 86238:                   // 'rename' 'json'
      case 86750:                   // 'rename' 'json-item'
      case 87262:                   // 'rename' 'jsoniq'
      case 88798:                   // 'rename' 'last'
      case 89310:                   // 'rename' 'lax'
      case 89822:                   // 'rename' 'le'
      case 90846:                   // 'rename' 'let'
      case 91870:                   // 'rename' 'loop'
      case 92894:                   // 'rename' 'lt'
      case 93918:                   // 'rename' 'mod'
      case 94430:                   // 'rename' 'modify'
      case 94942:                   // 'rename' 'module'
      case 95966:                   // 'rename' 'namespace'
      case 96478:                   // 'rename' 'namespace-node'
      case 96990:                   // 'rename' 'ne'
      case 100062:                  // 'rename' 'nodes'
      case 101086:                  // 'rename' 'null'
      case 101598:                  // 'rename' 'object'
      case 103646:                  // 'rename' 'only'
      case 104158:                  // 'rename' 'option'
      case 104670:                  // 'rename' 'or'
      case 105182:                  // 'rename' 'order'
      case 105694:                  // 'rename' 'ordered'
      case 106206:                  // 'rename' 'ordering'
      case 107742:                  // 'rename' 'parent'
      case 110814:                  // 'rename' 'preceding'
      case 111326:                  // 'rename' 'preceding-sibling'
      case 112862:                  // 'rename' 'processing-instruction'
      case 113886:                  // 'rename' 'rename'
      case 114398:                  // 'rename' 'replace'
      case 114910:                  // 'rename' 'return'
      case 115422:                  // 'rename' 'returning'
      case 115934:                  // 'rename' 'revalidation'
      case 116958:                  // 'rename' 'satisfies'
      case 117470:                  // 'rename' 'schema'
      case 117982:                  // 'rename' 'schema-attribute'
      case 118494:                  // 'rename' 'schema-element'
      case 119006:                  // 'rename' 'score'
      case 119518:                  // 'rename' 'select'
      case 120030:                  // 'rename' 'self'
      case 122590:                  // 'rename' 'sliding'
      case 123102:                  // 'rename' 'some'
      case 123614:                  // 'rename' 'stable'
      case 124126:                  // 'rename' 'start'
      case 125662:                  // 'rename' 'strict'
      case 126686:                  // 'rename' 'structured-item'
      case 127198:                  // 'rename' 'switch'
      case 127710:                  // 'rename' 'text'
      case 129758:                  // 'rename' 'to'
      case 130270:                  // 'rename' 'treat'
      case 130782:                  // 'rename' 'true'
      case 131294:                  // 'rename' 'try'
      case 131806:                  // 'rename' 'tumbling'
      case 132318:                  // 'rename' 'type'
      case 132830:                  // 'rename' 'typeswitch'
      case 133342:                  // 'rename' 'union'
      case 134366:                  // 'rename' 'unordered'
      case 134878:                  // 'rename' 'updating'
      case 136414:                  // 'rename' 'validate'
      case 136926:                  // 'rename' 'value'
      case 137438:                  // 'rename' 'variable'
      case 137950:                  // 'rename' 'version'
      case 139486:                  // 'rename' 'where'
      case 139998:                  // 'rename' 'while'
      case 141534:                  // 'rename' 'with'
      case 144094:                  // 'rename' '{'
      case 145118:                  // 'rename' '{|'
        this.parse_JSONRenameExpr();
        break;
      case -11:
        this.parse_JSONReplaceExpr();
        break;
      case -12:
      case 3150:                    // 'append' EQName^Token
      case 4174:                    // 'append' IntegerLiteral
      case 4686:                    // 'append' DecimalLiteral
      case 5198:                    // 'append' DoubleLiteral
      case 5710:                    // 'append' StringLiteral
      case 15950:                   // 'append' '$'
      case 16462:                   // 'append' '$$'
      case 16974:                   // 'append' '%'
      case 18510:                   // 'append' '(#'
      case 21070:                   // 'append' '+'
      case 22094:                   // 'append' '-'
      case 24142:                   // 'append' '/'
      case 24654:                   // 'append' '//'
      case 28238:                   // 'append' '<'
      case 28750:                   // 'append' '<!--'
      case 30798:                   // 'append' '<?'
      case 35406:                   // 'append' '['
      case 36430:                   // 'append' 'after'
      case 37454:                   // 'append' 'allowing'
      case 37966:                   // 'append' 'ancestor'
      case 38478:                   // 'append' 'ancestor-or-self'
      case 38990:                   // 'append' 'and'
      case 40014:                   // 'append' 'append'
      case 40526:                   // 'append' 'array'
      case 41038:                   // 'append' 'as'
      case 41550:                   // 'append' 'ascending'
      case 42062:                   // 'append' 'at'
      case 42574:                   // 'append' 'attribute'
      case 43086:                   // 'append' 'base-uri'
      case 43598:                   // 'append' 'before'
      case 44110:                   // 'append' 'boundary-space'
      case 44622:                   // 'append' 'break'
      case 45646:                   // 'append' 'case'
      case 46158:                   // 'append' 'cast'
      case 46670:                   // 'append' 'castable'
      case 47182:                   // 'append' 'catch'
      case 48206:                   // 'append' 'child'
      case 48718:                   // 'append' 'collation'
      case 49742:                   // 'append' 'comment'
      case 50254:                   // 'append' 'constraint'
      case 50766:                   // 'append' 'construction'
      case 52302:                   // 'append' 'context'
      case 52814:                   // 'append' 'continue'
      case 53326:                   // 'append' 'copy'
      case 53838:                   // 'append' 'copy-namespaces'
      case 54350:                   // 'append' 'count'
      case 54862:                   // 'append' 'decimal-format'
      case 55886:                   // 'append' 'declare'
      case 56398:                   // 'append' 'default'
      case 56910:                   // 'append' 'delete'
      case 57422:                   // 'append' 'descendant'
      case 57934:                   // 'append' 'descendant-or-self'
      case 58446:                   // 'append' 'descending'
      case 61006:                   // 'append' 'div'
      case 61518:                   // 'append' 'document'
      case 62030:                   // 'append' 'document-node'
      case 62542:                   // 'append' 'element'
      case 63054:                   // 'append' 'else'
      case 63566:                   // 'append' 'empty'
      case 64078:                   // 'append' 'empty-sequence'
      case 64590:                   // 'append' 'encoding'
      case 65102:                   // 'append' 'end'
      case 66126:                   // 'append' 'eq'
      case 66638:                   // 'append' 'every'
      case 67662:                   // 'append' 'except'
      case 68174:                   // 'append' 'exit'
      case 68686:                   // 'append' 'external'
      case 69198:                   // 'append' 'false'
      case 69710:                   // 'append' 'first'
      case 70222:                   // 'append' 'following'
      case 70734:                   // 'append' 'following-sibling'
      case 71246:                   // 'append' 'for'
      case 72782:                   // 'append' 'from'
      case 73294:                   // 'append' 'ft-option'
      case 75342:                   // 'append' 'function'
      case 75854:                   // 'append' 'ge'
      case 76878:                   // 'append' 'group'
      case 77902:                   // 'append' 'gt'
      case 78414:                   // 'append' 'idiv'
      case 78926:                   // 'append' 'if'
      case 79438:                   // 'append' 'import'
      case 79950:                   // 'append' 'in'
      case 80462:                   // 'append' 'index'
      case 82510:                   // 'append' 'insert'
      case 83022:                   // 'append' 'instance'
      case 83534:                   // 'append' 'integrity'
      case 84046:                   // 'append' 'intersect'
      case 84558:                   // 'append' 'into'
      case 85070:                   // 'append' 'is'
      case 85582:                   // 'append' 'item'
      case 86094:                   // 'append' 'json'
      case 86606:                   // 'append' 'json-item'
      case 87118:                   // 'append' 'jsoniq'
      case 88654:                   // 'append' 'last'
      case 89166:                   // 'append' 'lax'
      case 89678:                   // 'append' 'le'
      case 90702:                   // 'append' 'let'
      case 91726:                   // 'append' 'loop'
      case 92750:                   // 'append' 'lt'
      case 93774:                   // 'append' 'mod'
      case 94286:                   // 'append' 'modify'
      case 94798:                   // 'append' 'module'
      case 95822:                   // 'append' 'namespace'
      case 96334:                   // 'append' 'namespace-node'
      case 96846:                   // 'append' 'ne'
      case 99406:                   // 'append' 'node'
      case 99918:                   // 'append' 'nodes'
      case 100430:                  // 'append' 'not'
      case 100942:                  // 'append' 'null'
      case 101454:                  // 'append' 'object'
      case 103502:                  // 'append' 'only'
      case 104014:                  // 'append' 'option'
      case 104526:                  // 'append' 'or'
      case 105038:                  // 'append' 'order'
      case 105550:                  // 'append' 'ordered'
      case 106062:                  // 'append' 'ordering'
      case 107598:                  // 'append' 'parent'
      case 110670:                  // 'append' 'preceding'
      case 111182:                  // 'append' 'preceding-sibling'
      case 112718:                  // 'append' 'processing-instruction'
      case 113742:                  // 'append' 'rename'
      case 114254:                  // 'append' 'replace'
      case 114766:                  // 'append' 'return'
      case 115278:                  // 'append' 'returning'
      case 115790:                  // 'append' 'revalidation'
      case 116814:                  // 'append' 'satisfies'
      case 117326:                  // 'append' 'schema'
      case 117838:                  // 'append' 'schema-attribute'
      case 118350:                  // 'append' 'schema-element'
      case 118862:                  // 'append' 'score'
      case 119374:                  // 'append' 'select'
      case 119886:                  // 'append' 'self'
      case 122446:                  // 'append' 'sliding'
      case 122958:                  // 'append' 'some'
      case 123470:                  // 'append' 'stable'
      case 123982:                  // 'append' 'start'
      case 125518:                  // 'append' 'strict'
      case 126542:                  // 'append' 'structured-item'
      case 127054:                  // 'append' 'switch'
      case 127566:                  // 'append' 'text'
      case 129614:                  // 'append' 'to'
      case 130126:                  // 'append' 'treat'
      case 130638:                  // 'append' 'true'
      case 131150:                  // 'append' 'try'
      case 131662:                  // 'append' 'tumbling'
      case 132174:                  // 'append' 'type'
      case 132686:                  // 'append' 'typeswitch'
      case 133198:                  // 'append' 'union'
      case 134222:                  // 'append' 'unordered'
      case 134734:                  // 'append' 'updating'
      case 136270:                  // 'append' 'validate'
      case 136782:                  // 'append' 'value'
      case 137294:                  // 'append' 'variable'
      case 137806:                  // 'append' 'version'
      case 139342:                  // 'append' 'where'
      case 139854:                  // 'append' 'while'
      case 141390:                  // 'append' 'with'
      case 143950:                  // 'append' '{'
      case 144974:                  // 'append' '{|'
        this.parse_JSONAppendExpr();
        break;
      default:
        this.parse_OrExpr();
      }
      this.eventHandler.endNonterminal("ExprSimple", this.e0);
    }

    private try_ExprSimple()
    {
      switch (this.token())
      {
      case 78:                      // 'append'
        this.lookahead2W(269);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 161:                     // 'insert'
        this.lookahead2W(276);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 223:                     // 'replace'
        this.lookahead2W(170);      // S^WS | '#' | '(' | '(:' | 'node' | 'value'
        break;
      case 111:                     // 'delete'
      case 222:                     // 'rename'
        this.lookahead2W(261);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      case 104:                     // 'copy'
      case 130:                     // 'every'
      case 240:                     // 'some'
        this.lookahead2W(143);      // S^WS | '#' | '$' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 17998 // 'append' '('
       || this.tokenSequence() == 18031 // 'delete' '('
       || this.tokenSequence() == 18081 // 'insert' '('
       || this.tokenSequence() == 18142 // 'rename' '('
       || this.tokenSequence() == 99439 // 'delete' 'node'
       || this.tokenSequence() == 99489 // 'insert' 'node'
       || this.tokenSequence() == 99550 // 'rename' 'node'
       || this.tokenSequence() == 99951 // 'delete' 'nodes'
       || this.tokenSequence() == 100001  // 'insert' 'nodes'
       || this.tokenSequence() == 136927) // 'replace' 'value'
      {
        this.lk = this.memoized(10, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_OrExpr();
            this.memoize(10, e0A, -2);
            this.lk = -13;
          }
          catch (p2A)
          {
            try
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.try_InsertExpr();
              this.memoize(10, e0A, -3);
              this.lk = -13;
            }
            catch (p3A)
            {
              try
              {
                this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                this.try_DeleteExpr();
                this.memoize(10, e0A, -4);
                this.lk = -13;
              }
              catch (p4A)
              {
                try
                {
                  this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                  this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                  this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                  this.try_RenameExpr();
                  this.memoize(10, e0A, -5);
                  this.lk = -13;
                }
                catch (p5A)
                {
                  try
                  {
                    this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                    this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                    this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                    this.try_ReplaceExpr();
                    this.memoize(10, e0A, -6);
                    this.lk = -13;
                  }
                  catch (p6A)
                  {
                    try
                    {
                      this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                      this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                      this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                      this.try_JSONDeleteExpr();
                      this.memoize(10, e0A, -8);
                      this.lk = -13;
                    }
                    catch (p8A)
                    {
                      try
                      {
                        this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                        this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                        this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                        this.try_JSONInsertExpr();
                        this.memoize(10, e0A, -9);
                        this.lk = -13;
                      }
                      catch (p9A)
                      {
                        try
                        {
                          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                          this.try_JSONRenameExpr();
                          this.memoize(10, e0A, -10);
                          this.lk = -13;
                        }
                        catch (p10A)
                        {
                          try
                          {
                            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                            this.try_JSONReplaceExpr();
                            this.memoize(10, e0A, -11);
                            this.lk = -13;
                          }
                          catch (p11A)
                          {
                            this.lk = -12;
                            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                            this.memoize(10, e0A, -12);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      switch (this.tokenSequence())
      {
      case 16002:                   // 'every' '$'
      case 16112:                   // 'some' '$'
        this.try_QuantifiedExpr();
        break;
      case -3:
        this.try_InsertExpr();
        break;
      case -4:
        this.try_DeleteExpr();
        break;
      case -5:
        this.try_RenameExpr();
        break;
      case -6:
      case 99551:                   // 'replace' 'node'
        this.try_ReplaceExpr();
        break;
      case 15976:                   // 'copy' '$'
        this.try_TransformExpr();
        break;
      case -8:
      case 3183:                    // 'delete' EQName^Token
      case 4207:                    // 'delete' IntegerLiteral
      case 4719:                    // 'delete' DecimalLiteral
      case 5231:                    // 'delete' DoubleLiteral
      case 5743:                    // 'delete' StringLiteral
      case 15983:                   // 'delete' '$'
      case 16495:                   // 'delete' '$$'
      case 17007:                   // 'delete' '%'
      case 28271:                   // 'delete' '<'
      case 28783:                   // 'delete' '<!--'
      case 30831:                   // 'delete' '<?'
      case 35439:                   // 'delete' '['
      case 36463:                   // 'delete' 'after'
      case 37487:                   // 'delete' 'allowing'
      case 37999:                   // 'delete' 'ancestor'
      case 38511:                   // 'delete' 'ancestor-or-self'
      case 39023:                   // 'delete' 'and'
      case 40047:                   // 'delete' 'append'
      case 40559:                   // 'delete' 'array'
      case 41071:                   // 'delete' 'as'
      case 41583:                   // 'delete' 'ascending'
      case 42095:                   // 'delete' 'at'
      case 42607:                   // 'delete' 'attribute'
      case 43119:                   // 'delete' 'base-uri'
      case 43631:                   // 'delete' 'before'
      case 44143:                   // 'delete' 'boundary-space'
      case 44655:                   // 'delete' 'break'
      case 45679:                   // 'delete' 'case'
      case 46191:                   // 'delete' 'cast'
      case 46703:                   // 'delete' 'castable'
      case 47215:                   // 'delete' 'catch'
      case 48239:                   // 'delete' 'child'
      case 48751:                   // 'delete' 'collation'
      case 49775:                   // 'delete' 'comment'
      case 50287:                   // 'delete' 'constraint'
      case 50799:                   // 'delete' 'construction'
      case 52335:                   // 'delete' 'context'
      case 52847:                   // 'delete' 'continue'
      case 53359:                   // 'delete' 'copy'
      case 53871:                   // 'delete' 'copy-namespaces'
      case 54383:                   // 'delete' 'count'
      case 54895:                   // 'delete' 'decimal-format'
      case 55919:                   // 'delete' 'declare'
      case 56431:                   // 'delete' 'default'
      case 56943:                   // 'delete' 'delete'
      case 57455:                   // 'delete' 'descendant'
      case 57967:                   // 'delete' 'descendant-or-self'
      case 58479:                   // 'delete' 'descending'
      case 61039:                   // 'delete' 'div'
      case 61551:                   // 'delete' 'document'
      case 62063:                   // 'delete' 'document-node'
      case 62575:                   // 'delete' 'element'
      case 63087:                   // 'delete' 'else'
      case 63599:                   // 'delete' 'empty'
      case 64111:                   // 'delete' 'empty-sequence'
      case 64623:                   // 'delete' 'encoding'
      case 65135:                   // 'delete' 'end'
      case 66159:                   // 'delete' 'eq'
      case 66671:                   // 'delete' 'every'
      case 67695:                   // 'delete' 'except'
      case 68207:                   // 'delete' 'exit'
      case 68719:                   // 'delete' 'external'
      case 69231:                   // 'delete' 'false'
      case 69743:                   // 'delete' 'first'
      case 70255:                   // 'delete' 'following'
      case 70767:                   // 'delete' 'following-sibling'
      case 71279:                   // 'delete' 'for'
      case 72815:                   // 'delete' 'from'
      case 73327:                   // 'delete' 'ft-option'
      case 75375:                   // 'delete' 'function'
      case 75887:                   // 'delete' 'ge'
      case 76911:                   // 'delete' 'group'
      case 77935:                   // 'delete' 'gt'
      case 78447:                   // 'delete' 'idiv'
      case 78959:                   // 'delete' 'if'
      case 79471:                   // 'delete' 'import'
      case 79983:                   // 'delete' 'in'
      case 80495:                   // 'delete' 'index'
      case 82543:                   // 'delete' 'insert'
      case 83055:                   // 'delete' 'instance'
      case 83567:                   // 'delete' 'integrity'
      case 84079:                   // 'delete' 'intersect'
      case 84591:                   // 'delete' 'into'
      case 85103:                   // 'delete' 'is'
      case 85615:                   // 'delete' 'item'
      case 86127:                   // 'delete' 'json'
      case 86639:                   // 'delete' 'json-item'
      case 87151:                   // 'delete' 'jsoniq'
      case 88687:                   // 'delete' 'last'
      case 89199:                   // 'delete' 'lax'
      case 89711:                   // 'delete' 'le'
      case 90735:                   // 'delete' 'let'
      case 91759:                   // 'delete' 'loop'
      case 92783:                   // 'delete' 'lt'
      case 93807:                   // 'delete' 'mod'
      case 94319:                   // 'delete' 'modify'
      case 94831:                   // 'delete' 'module'
      case 95855:                   // 'delete' 'namespace'
      case 96367:                   // 'delete' 'namespace-node'
      case 96879:                   // 'delete' 'ne'
      case 100975:                  // 'delete' 'null'
      case 101487:                  // 'delete' 'object'
      case 103535:                  // 'delete' 'only'
      case 104047:                  // 'delete' 'option'
      case 104559:                  // 'delete' 'or'
      case 105071:                  // 'delete' 'order'
      case 105583:                  // 'delete' 'ordered'
      case 106095:                  // 'delete' 'ordering'
      case 107631:                  // 'delete' 'parent'
      case 110703:                  // 'delete' 'preceding'
      case 111215:                  // 'delete' 'preceding-sibling'
      case 112751:                  // 'delete' 'processing-instruction'
      case 113775:                  // 'delete' 'rename'
      case 114287:                  // 'delete' 'replace'
      case 114799:                  // 'delete' 'return'
      case 115311:                  // 'delete' 'returning'
      case 115823:                  // 'delete' 'revalidation'
      case 116847:                  // 'delete' 'satisfies'
      case 117359:                  // 'delete' 'schema'
      case 117871:                  // 'delete' 'schema-attribute'
      case 118383:                  // 'delete' 'schema-element'
      case 118895:                  // 'delete' 'score'
      case 119407:                  // 'delete' 'select'
      case 119919:                  // 'delete' 'self'
      case 122479:                  // 'delete' 'sliding'
      case 122991:                  // 'delete' 'some'
      case 123503:                  // 'delete' 'stable'
      case 124015:                  // 'delete' 'start'
      case 125551:                  // 'delete' 'strict'
      case 126575:                  // 'delete' 'structured-item'
      case 127087:                  // 'delete' 'switch'
      case 127599:                  // 'delete' 'text'
      case 129647:                  // 'delete' 'to'
      case 130159:                  // 'delete' 'treat'
      case 130671:                  // 'delete' 'true'
      case 131183:                  // 'delete' 'try'
      case 131695:                  // 'delete' 'tumbling'
      case 132207:                  // 'delete' 'type'
      case 132719:                  // 'delete' 'typeswitch'
      case 133231:                  // 'delete' 'union'
      case 134255:                  // 'delete' 'unordered'
      case 134767:                  // 'delete' 'updating'
      case 136303:                  // 'delete' 'validate'
      case 136815:                  // 'delete' 'value'
      case 137327:                  // 'delete' 'variable'
      case 137839:                  // 'delete' 'version'
      case 139375:                  // 'delete' 'where'
      case 139887:                  // 'delete' 'while'
      case 141423:                  // 'delete' 'with'
      case 143983:                  // 'delete' '{'
      case 145007:                  // 'delete' '{|'
        this.try_JSONDeleteExpr();
        break;
      case -9:
      case 3233:                    // 'insert' EQName^Token
      case 4257:                    // 'insert' IntegerLiteral
      case 4769:                    // 'insert' DecimalLiteral
      case 5281:                    // 'insert' DoubleLiteral
      case 5793:                    // 'insert' StringLiteral
      case 9889:                    // 'insert' NCName^Token
      case 16033:                   // 'insert' '$'
      case 16545:                   // 'insert' '$$'
      case 17057:                   // 'insert' '%'
      case 18593:                   // 'insert' '(#'
      case 21153:                   // 'insert' '+'
      case 22177:                   // 'insert' '-'
      case 24225:                   // 'insert' '/'
      case 24737:                   // 'insert' '//'
      case 28321:                   // 'insert' '<'
      case 28833:                   // 'insert' '<!--'
      case 30881:                   // 'insert' '<?'
      case 35489:                   // 'insert' '['
      case 36513:                   // 'insert' 'after'
      case 37537:                   // 'insert' 'allowing'
      case 38049:                   // 'insert' 'ancestor'
      case 38561:                   // 'insert' 'ancestor-or-self'
      case 39073:                   // 'insert' 'and'
      case 40097:                   // 'insert' 'append'
      case 40609:                   // 'insert' 'array'
      case 41121:                   // 'insert' 'as'
      case 41633:                   // 'insert' 'ascending'
      case 42145:                   // 'insert' 'at'
      case 42657:                   // 'insert' 'attribute'
      case 43169:                   // 'insert' 'base-uri'
      case 43681:                   // 'insert' 'before'
      case 44193:                   // 'insert' 'boundary-space'
      case 44705:                   // 'insert' 'break'
      case 45729:                   // 'insert' 'case'
      case 46241:                   // 'insert' 'cast'
      case 46753:                   // 'insert' 'castable'
      case 47265:                   // 'insert' 'catch'
      case 48289:                   // 'insert' 'child'
      case 48801:                   // 'insert' 'collation'
      case 49825:                   // 'insert' 'comment'
      case 50337:                   // 'insert' 'constraint'
      case 50849:                   // 'insert' 'construction'
      case 52385:                   // 'insert' 'context'
      case 52897:                   // 'insert' 'continue'
      case 53409:                   // 'insert' 'copy'
      case 53921:                   // 'insert' 'copy-namespaces'
      case 54433:                   // 'insert' 'count'
      case 54945:                   // 'insert' 'decimal-format'
      case 55969:                   // 'insert' 'declare'
      case 56481:                   // 'insert' 'default'
      case 56993:                   // 'insert' 'delete'
      case 57505:                   // 'insert' 'descendant'
      case 58017:                   // 'insert' 'descendant-or-self'
      case 58529:                   // 'insert' 'descending'
      case 61089:                   // 'insert' 'div'
      case 61601:                   // 'insert' 'document'
      case 62113:                   // 'insert' 'document-node'
      case 62625:                   // 'insert' 'element'
      case 63137:                   // 'insert' 'else'
      case 63649:                   // 'insert' 'empty'
      case 64161:                   // 'insert' 'empty-sequence'
      case 64673:                   // 'insert' 'encoding'
      case 65185:                   // 'insert' 'end'
      case 66209:                   // 'insert' 'eq'
      case 66721:                   // 'insert' 'every'
      case 67745:                   // 'insert' 'except'
      case 68257:                   // 'insert' 'exit'
      case 68769:                   // 'insert' 'external'
      case 69281:                   // 'insert' 'false'
      case 69793:                   // 'insert' 'first'
      case 70305:                   // 'insert' 'following'
      case 70817:                   // 'insert' 'following-sibling'
      case 71329:                   // 'insert' 'for'
      case 72865:                   // 'insert' 'from'
      case 73377:                   // 'insert' 'ft-option'
      case 75425:                   // 'insert' 'function'
      case 75937:                   // 'insert' 'ge'
      case 76961:                   // 'insert' 'group'
      case 77985:                   // 'insert' 'gt'
      case 78497:                   // 'insert' 'idiv'
      case 79009:                   // 'insert' 'if'
      case 79521:                   // 'insert' 'import'
      case 80033:                   // 'insert' 'in'
      case 80545:                   // 'insert' 'index'
      case 82593:                   // 'insert' 'insert'
      case 83105:                   // 'insert' 'instance'
      case 83617:                   // 'insert' 'integrity'
      case 84129:                   // 'insert' 'intersect'
      case 84641:                   // 'insert' 'into'
      case 85153:                   // 'insert' 'is'
      case 85665:                   // 'insert' 'item'
      case 86177:                   // 'insert' 'json'
      case 86689:                   // 'insert' 'json-item'
      case 87201:                   // 'insert' 'jsoniq'
      case 88737:                   // 'insert' 'last'
      case 89249:                   // 'insert' 'lax'
      case 89761:                   // 'insert' 'le'
      case 90785:                   // 'insert' 'let'
      case 91809:                   // 'insert' 'loop'
      case 92833:                   // 'insert' 'lt'
      case 93857:                   // 'insert' 'mod'
      case 94369:                   // 'insert' 'modify'
      case 94881:                   // 'insert' 'module'
      case 95905:                   // 'insert' 'namespace'
      case 96417:                   // 'insert' 'namespace-node'
      case 96929:                   // 'insert' 'ne'
      case 100513:                  // 'insert' 'not'
      case 101025:                  // 'insert' 'null'
      case 101537:                  // 'insert' 'object'
      case 103585:                  // 'insert' 'only'
      case 104097:                  // 'insert' 'option'
      case 104609:                  // 'insert' 'or'
      case 105121:                  // 'insert' 'order'
      case 105633:                  // 'insert' 'ordered'
      case 106145:                  // 'insert' 'ordering'
      case 107681:                  // 'insert' 'parent'
      case 110753:                  // 'insert' 'preceding'
      case 111265:                  // 'insert' 'preceding-sibling'
      case 112801:                  // 'insert' 'processing-instruction'
      case 113825:                  // 'insert' 'rename'
      case 114337:                  // 'insert' 'replace'
      case 114849:                  // 'insert' 'return'
      case 115361:                  // 'insert' 'returning'
      case 115873:                  // 'insert' 'revalidation'
      case 116897:                  // 'insert' 'satisfies'
      case 117409:                  // 'insert' 'schema'
      case 117921:                  // 'insert' 'schema-attribute'
      case 118433:                  // 'insert' 'schema-element'
      case 118945:                  // 'insert' 'score'
      case 119457:                  // 'insert' 'select'
      case 119969:                  // 'insert' 'self'
      case 122529:                  // 'insert' 'sliding'
      case 123041:                  // 'insert' 'some'
      case 123553:                  // 'insert' 'stable'
      case 124065:                  // 'insert' 'start'
      case 125601:                  // 'insert' 'strict'
      case 126625:                  // 'insert' 'structured-item'
      case 127137:                  // 'insert' 'switch'
      case 127649:                  // 'insert' 'text'
      case 129697:                  // 'insert' 'to'
      case 130209:                  // 'insert' 'treat'
      case 130721:                  // 'insert' 'true'
      case 131233:                  // 'insert' 'try'
      case 131745:                  // 'insert' 'tumbling'
      case 132257:                  // 'insert' 'type'
      case 132769:                  // 'insert' 'typeswitch'
      case 133281:                  // 'insert' 'union'
      case 134305:                  // 'insert' 'unordered'
      case 134817:                  // 'insert' 'updating'
      case 136353:                  // 'insert' 'validate'
      case 136865:                  // 'insert' 'value'
      case 137377:                  // 'insert' 'variable'
      case 137889:                  // 'insert' 'version'
      case 139425:                  // 'insert' 'where'
      case 139937:                  // 'insert' 'while'
      case 141473:                  // 'insert' 'with'
      case 144033:                  // 'insert' '{'
      case 145057:                  // 'insert' '{|'
        this.try_JSONInsertExpr();
        break;
      case -10:
      case 3294:                    // 'rename' EQName^Token
      case 4318:                    // 'rename' IntegerLiteral
      case 4830:                    // 'rename' DecimalLiteral
      case 5342:                    // 'rename' DoubleLiteral
      case 5854:                    // 'rename' StringLiteral
      case 16094:                   // 'rename' '$'
      case 16606:                   // 'rename' '$$'
      case 17118:                   // 'rename' '%'
      case 28382:                   // 'rename' '<'
      case 28894:                   // 'rename' '<!--'
      case 30942:                   // 'rename' '<?'
      case 35550:                   // 'rename' '['
      case 36574:                   // 'rename' 'after'
      case 37598:                   // 'rename' 'allowing'
      case 38110:                   // 'rename' 'ancestor'
      case 38622:                   // 'rename' 'ancestor-or-self'
      case 39134:                   // 'rename' 'and'
      case 40158:                   // 'rename' 'append'
      case 40670:                   // 'rename' 'array'
      case 41182:                   // 'rename' 'as'
      case 41694:                   // 'rename' 'ascending'
      case 42206:                   // 'rename' 'at'
      case 42718:                   // 'rename' 'attribute'
      case 43230:                   // 'rename' 'base-uri'
      case 43742:                   // 'rename' 'before'
      case 44254:                   // 'rename' 'boundary-space'
      case 44766:                   // 'rename' 'break'
      case 45790:                   // 'rename' 'case'
      case 46302:                   // 'rename' 'cast'
      case 46814:                   // 'rename' 'castable'
      case 47326:                   // 'rename' 'catch'
      case 48350:                   // 'rename' 'child'
      case 48862:                   // 'rename' 'collation'
      case 49886:                   // 'rename' 'comment'
      case 50398:                   // 'rename' 'constraint'
      case 50910:                   // 'rename' 'construction'
      case 52446:                   // 'rename' 'context'
      case 52958:                   // 'rename' 'continue'
      case 53470:                   // 'rename' 'copy'
      case 53982:                   // 'rename' 'copy-namespaces'
      case 54494:                   // 'rename' 'count'
      case 55006:                   // 'rename' 'decimal-format'
      case 56030:                   // 'rename' 'declare'
      case 56542:                   // 'rename' 'default'
      case 57054:                   // 'rename' 'delete'
      case 57566:                   // 'rename' 'descendant'
      case 58078:                   // 'rename' 'descendant-or-self'
      case 58590:                   // 'rename' 'descending'
      case 61150:                   // 'rename' 'div'
      case 61662:                   // 'rename' 'document'
      case 62174:                   // 'rename' 'document-node'
      case 62686:                   // 'rename' 'element'
      case 63198:                   // 'rename' 'else'
      case 63710:                   // 'rename' 'empty'
      case 64222:                   // 'rename' 'empty-sequence'
      case 64734:                   // 'rename' 'encoding'
      case 65246:                   // 'rename' 'end'
      case 66270:                   // 'rename' 'eq'
      case 66782:                   // 'rename' 'every'
      case 67806:                   // 'rename' 'except'
      case 68318:                   // 'rename' 'exit'
      case 68830:                   // 'rename' 'external'
      case 69342:                   // 'rename' 'false'
      case 69854:                   // 'rename' 'first'
      case 70366:                   // 'rename' 'following'
      case 70878:                   // 'rename' 'following-sibling'
      case 71390:                   // 'rename' 'for'
      case 72926:                   // 'rename' 'from'
      case 73438:                   // 'rename' 'ft-option'
      case 75486:                   // 'rename' 'function'
      case 75998:                   // 'rename' 'ge'
      case 77022:                   // 'rename' 'group'
      case 78046:                   // 'rename' 'gt'
      case 78558:                   // 'rename' 'idiv'
      case 79070:                   // 'rename' 'if'
      case 79582:                   // 'rename' 'import'
      case 80094:                   // 'rename' 'in'
      case 80606:                   // 'rename' 'index'
      case 82654:                   // 'rename' 'insert'
      case 83166:                   // 'rename' 'instance'
      case 83678:                   // 'rename' 'integrity'
      case 84190:                   // 'rename' 'intersect'
      case 84702:                   // 'rename' 'into'
      case 85214:                   // 'rename' 'is'
      case 85726:                   // 'rename' 'item'
      case 86238:                   // 'rename' 'json'
      case 86750:                   // 'rename' 'json-item'
      case 87262:                   // 'rename' 'jsoniq'
      case 88798:                   // 'rename' 'last'
      case 89310:                   // 'rename' 'lax'
      case 89822:                   // 'rename' 'le'
      case 90846:                   // 'rename' 'let'
      case 91870:                   // 'rename' 'loop'
      case 92894:                   // 'rename' 'lt'
      case 93918:                   // 'rename' 'mod'
      case 94430:                   // 'rename' 'modify'
      case 94942:                   // 'rename' 'module'
      case 95966:                   // 'rename' 'namespace'
      case 96478:                   // 'rename' 'namespace-node'
      case 96990:                   // 'rename' 'ne'
      case 100062:                  // 'rename' 'nodes'
      case 101086:                  // 'rename' 'null'
      case 101598:                  // 'rename' 'object'
      case 103646:                  // 'rename' 'only'
      case 104158:                  // 'rename' 'option'
      case 104670:                  // 'rename' 'or'
      case 105182:                  // 'rename' 'order'
      case 105694:                  // 'rename' 'ordered'
      case 106206:                  // 'rename' 'ordering'
      case 107742:                  // 'rename' 'parent'
      case 110814:                  // 'rename' 'preceding'
      case 111326:                  // 'rename' 'preceding-sibling'
      case 112862:                  // 'rename' 'processing-instruction'
      case 113886:                  // 'rename' 'rename'
      case 114398:                  // 'rename' 'replace'
      case 114910:                  // 'rename' 'return'
      case 115422:                  // 'rename' 'returning'
      case 115934:                  // 'rename' 'revalidation'
      case 116958:                  // 'rename' 'satisfies'
      case 117470:                  // 'rename' 'schema'
      case 117982:                  // 'rename' 'schema-attribute'
      case 118494:                  // 'rename' 'schema-element'
      case 119006:                  // 'rename' 'score'
      case 119518:                  // 'rename' 'select'
      case 120030:                  // 'rename' 'self'
      case 122590:                  // 'rename' 'sliding'
      case 123102:                  // 'rename' 'some'
      case 123614:                  // 'rename' 'stable'
      case 124126:                  // 'rename' 'start'
      case 125662:                  // 'rename' 'strict'
      case 126686:                  // 'rename' 'structured-item'
      case 127198:                  // 'rename' 'switch'
      case 127710:                  // 'rename' 'text'
      case 129758:                  // 'rename' 'to'
      case 130270:                  // 'rename' 'treat'
      case 130782:                  // 'rename' 'true'
      case 131294:                  // 'rename' 'try'
      case 131806:                  // 'rename' 'tumbling'
      case 132318:                  // 'rename' 'type'
      case 132830:                  // 'rename' 'typeswitch'
      case 133342:                  // 'rename' 'union'
      case 134366:                  // 'rename' 'unordered'
      case 134878:                  // 'rename' 'updating'
      case 136414:                  // 'rename' 'validate'
      case 136926:                  // 'rename' 'value'
      case 137438:                  // 'rename' 'variable'
      case 137950:                  // 'rename' 'version'
      case 139486:                  // 'rename' 'where'
      case 139998:                  // 'rename' 'while'
      case 141534:                  // 'rename' 'with'
      case 144094:                  // 'rename' '{'
      case 145118:                  // 'rename' '{|'
        this.try_JSONRenameExpr();
        break;
      case -11:
        this.try_JSONReplaceExpr();
        break;
      case -12:
      case 3150:                    // 'append' EQName^Token
      case 4174:                    // 'append' IntegerLiteral
      case 4686:                    // 'append' DecimalLiteral
      case 5198:                    // 'append' DoubleLiteral
      case 5710:                    // 'append' StringLiteral
      case 15950:                   // 'append' '$'
      case 16462:                   // 'append' '$$'
      case 16974:                   // 'append' '%'
      case 18510:                   // 'append' '(#'
      case 21070:                   // 'append' '+'
      case 22094:                   // 'append' '-'
      case 24142:                   // 'append' '/'
      case 24654:                   // 'append' '//'
      case 28238:                   // 'append' '<'
      case 28750:                   // 'append' '<!--'
      case 30798:                   // 'append' '<?'
      case 35406:                   // 'append' '['
      case 36430:                   // 'append' 'after'
      case 37454:                   // 'append' 'allowing'
      case 37966:                   // 'append' 'ancestor'
      case 38478:                   // 'append' 'ancestor-or-self'
      case 38990:                   // 'append' 'and'
      case 40014:                   // 'append' 'append'
      case 40526:                   // 'append' 'array'
      case 41038:                   // 'append' 'as'
      case 41550:                   // 'append' 'ascending'
      case 42062:                   // 'append' 'at'
      case 42574:                   // 'append' 'attribute'
      case 43086:                   // 'append' 'base-uri'
      case 43598:                   // 'append' 'before'
      case 44110:                   // 'append' 'boundary-space'
      case 44622:                   // 'append' 'break'
      case 45646:                   // 'append' 'case'
      case 46158:                   // 'append' 'cast'
      case 46670:                   // 'append' 'castable'
      case 47182:                   // 'append' 'catch'
      case 48206:                   // 'append' 'child'
      case 48718:                   // 'append' 'collation'
      case 49742:                   // 'append' 'comment'
      case 50254:                   // 'append' 'constraint'
      case 50766:                   // 'append' 'construction'
      case 52302:                   // 'append' 'context'
      case 52814:                   // 'append' 'continue'
      case 53326:                   // 'append' 'copy'
      case 53838:                   // 'append' 'copy-namespaces'
      case 54350:                   // 'append' 'count'
      case 54862:                   // 'append' 'decimal-format'
      case 55886:                   // 'append' 'declare'
      case 56398:                   // 'append' 'default'
      case 56910:                   // 'append' 'delete'
      case 57422:                   // 'append' 'descendant'
      case 57934:                   // 'append' 'descendant-or-self'
      case 58446:                   // 'append' 'descending'
      case 61006:                   // 'append' 'div'
      case 61518:                   // 'append' 'document'
      case 62030:                   // 'append' 'document-node'
      case 62542:                   // 'append' 'element'
      case 63054:                   // 'append' 'else'
      case 63566:                   // 'append' 'empty'
      case 64078:                   // 'append' 'empty-sequence'
      case 64590:                   // 'append' 'encoding'
      case 65102:                   // 'append' 'end'
      case 66126:                   // 'append' 'eq'
      case 66638:                   // 'append' 'every'
      case 67662:                   // 'append' 'except'
      case 68174:                   // 'append' 'exit'
      case 68686:                   // 'append' 'external'
      case 69198:                   // 'append' 'false'
      case 69710:                   // 'append' 'first'
      case 70222:                   // 'append' 'following'
      case 70734:                   // 'append' 'following-sibling'
      case 71246:                   // 'append' 'for'
      case 72782:                   // 'append' 'from'
      case 73294:                   // 'append' 'ft-option'
      case 75342:                   // 'append' 'function'
      case 75854:                   // 'append' 'ge'
      case 76878:                   // 'append' 'group'
      case 77902:                   // 'append' 'gt'
      case 78414:                   // 'append' 'idiv'
      case 78926:                   // 'append' 'if'
      case 79438:                   // 'append' 'import'
      case 79950:                   // 'append' 'in'
      case 80462:                   // 'append' 'index'
      case 82510:                   // 'append' 'insert'
      case 83022:                   // 'append' 'instance'
      case 83534:                   // 'append' 'integrity'
      case 84046:                   // 'append' 'intersect'
      case 84558:                   // 'append' 'into'
      case 85070:                   // 'append' 'is'
      case 85582:                   // 'append' 'item'
      case 86094:                   // 'append' 'json'
      case 86606:                   // 'append' 'json-item'
      case 87118:                   // 'append' 'jsoniq'
      case 88654:                   // 'append' 'last'
      case 89166:                   // 'append' 'lax'
      case 89678:                   // 'append' 'le'
      case 90702:                   // 'append' 'let'
      case 91726:                   // 'append' 'loop'
      case 92750:                   // 'append' 'lt'
      case 93774:                   // 'append' 'mod'
      case 94286:                   // 'append' 'modify'
      case 94798:                   // 'append' 'module'
      case 95822:                   // 'append' 'namespace'
      case 96334:                   // 'append' 'namespace-node'
      case 96846:                   // 'append' 'ne'
      case 99406:                   // 'append' 'node'
      case 99918:                   // 'append' 'nodes'
      case 100430:                  // 'append' 'not'
      case 100942:                  // 'append' 'null'
      case 101454:                  // 'append' 'object'
      case 103502:                  // 'append' 'only'
      case 104014:                  // 'append' 'option'
      case 104526:                  // 'append' 'or'
      case 105038:                  // 'append' 'order'
      case 105550:                  // 'append' 'ordered'
      case 106062:                  // 'append' 'ordering'
      case 107598:                  // 'append' 'parent'
      case 110670:                  // 'append' 'preceding'
      case 111182:                  // 'append' 'preceding-sibling'
      case 112718:                  // 'append' 'processing-instruction'
      case 113742:                  // 'append' 'rename'
      case 114254:                  // 'append' 'replace'
      case 114766:                  // 'append' 'return'
      case 115278:                  // 'append' 'returning'
      case 115790:                  // 'append' 'revalidation'
      case 116814:                  // 'append' 'satisfies'
      case 117326:                  // 'append' 'schema'
      case 117838:                  // 'append' 'schema-attribute'
      case 118350:                  // 'append' 'schema-element'
      case 118862:                  // 'append' 'score'
      case 119374:                  // 'append' 'select'
      case 119886:                  // 'append' 'self'
      case 122446:                  // 'append' 'sliding'
      case 122958:                  // 'append' 'some'
      case 123470:                  // 'append' 'stable'
      case 123982:                  // 'append' 'start'
      case 125518:                  // 'append' 'strict'
      case 126542:                  // 'append' 'structured-item'
      case 127054:                  // 'append' 'switch'
      case 127566:                  // 'append' 'text'
      case 129614:                  // 'append' 'to'
      case 130126:                  // 'append' 'treat'
      case 130638:                  // 'append' 'true'
      case 131150:                  // 'append' 'try'
      case 131662:                  // 'append' 'tumbling'
      case 132174:                  // 'append' 'type'
      case 132686:                  // 'append' 'typeswitch'
      case 133198:                  // 'append' 'union'
      case 134222:                  // 'append' 'unordered'
      case 134734:                  // 'append' 'updating'
      case 136270:                  // 'append' 'validate'
      case 136782:                  // 'append' 'value'
      case 137294:                  // 'append' 'variable'
      case 137806:                  // 'append' 'version'
      case 139342:                  // 'append' 'where'
      case 139854:                  // 'append' 'while'
      case 141390:                  // 'append' 'with'
      case 143950:                  // 'append' '{'
      case 144974:                  // 'append' '{|'
        this.try_JSONAppendExpr();
        break;
      case -13:
        break;
      default:
        this.try_OrExpr();
      }
    }

    private parse_JSONDeleteExpr()
    {
      this.eventHandler.startNonterminal("JSONDeleteExpr", this.e0);
      this.consume(111);            // 'delete'
      this.lookahead1W(260);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      switch (this.token())
      {
      case 168:                     // 'json'
        this.lookahead2W(261);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 18088)  // 'json' '('
      {
        this.lk = this.memoized(11, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.consumeT(168);     // 'json'
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(11, this.e0, this.lk);
        }
      }
      if (this.tokenSequence() == -1
       || this.tokenSequence() == 3240  // 'json' EQName^Token
       || this.tokenSequence() == 4264  // 'json' IntegerLiteral
       || this.tokenSequence() == 4776  // 'json' DecimalLiteral
       || this.tokenSequence() == 5288  // 'json' DoubleLiteral
       || this.tokenSequence() == 5800  // 'json' StringLiteral
       || this.tokenSequence() == 16040 // 'json' '$'
       || this.tokenSequence() == 16552 // 'json' '$$'
       || this.tokenSequence() == 17064 // 'json' '%'
       || this.tokenSequence() == 28328 // 'json' '<'
       || this.tokenSequence() == 28840 // 'json' '<!--'
       || this.tokenSequence() == 30888 // 'json' '<?'
       || this.tokenSequence() == 35496 // 'json' '['
       || this.tokenSequence() == 36520 // 'json' 'after'
       || this.tokenSequence() == 37544 // 'json' 'allowing'
       || this.tokenSequence() == 38056 // 'json' 'ancestor'
       || this.tokenSequence() == 38568 // 'json' 'ancestor-or-self'
       || this.tokenSequence() == 39080 // 'json' 'and'
       || this.tokenSequence() == 40104 // 'json' 'append'
       || this.tokenSequence() == 40616 // 'json' 'array'
       || this.tokenSequence() == 41128 // 'json' 'as'
       || this.tokenSequence() == 41640 // 'json' 'ascending'
       || this.tokenSequence() == 42152 // 'json' 'at'
       || this.tokenSequence() == 42664 // 'json' 'attribute'
       || this.tokenSequence() == 43176 // 'json' 'base-uri'
       || this.tokenSequence() == 43688 // 'json' 'before'
       || this.tokenSequence() == 44200 // 'json' 'boundary-space'
       || this.tokenSequence() == 44712 // 'json' 'break'
       || this.tokenSequence() == 45736 // 'json' 'case'
       || this.tokenSequence() == 46248 // 'json' 'cast'
       || this.tokenSequence() == 46760 // 'json' 'castable'
       || this.tokenSequence() == 47272 // 'json' 'catch'
       || this.tokenSequence() == 48296 // 'json' 'child'
       || this.tokenSequence() == 48808 // 'json' 'collation'
       || this.tokenSequence() == 49832 // 'json' 'comment'
       || this.tokenSequence() == 50344 // 'json' 'constraint'
       || this.tokenSequence() == 50856 // 'json' 'construction'
       || this.tokenSequence() == 52392 // 'json' 'context'
       || this.tokenSequence() == 52904 // 'json' 'continue'
       || this.tokenSequence() == 53416 // 'json' 'copy'
       || this.tokenSequence() == 53928 // 'json' 'copy-namespaces'
       || this.tokenSequence() == 54440 // 'json' 'count'
       || this.tokenSequence() == 54952 // 'json' 'decimal-format'
       || this.tokenSequence() == 55976 // 'json' 'declare'
       || this.tokenSequence() == 56488 // 'json' 'default'
       || this.tokenSequence() == 57000 // 'json' 'delete'
       || this.tokenSequence() == 57512 // 'json' 'descendant'
       || this.tokenSequence() == 58024 // 'json' 'descendant-or-self'
       || this.tokenSequence() == 58536 // 'json' 'descending'
       || this.tokenSequence() == 61096 // 'json' 'div'
       || this.tokenSequence() == 61608 // 'json' 'document'
       || this.tokenSequence() == 62120 // 'json' 'document-node'
       || this.tokenSequence() == 62632 // 'json' 'element'
       || this.tokenSequence() == 63144 // 'json' 'else'
       || this.tokenSequence() == 63656 // 'json' 'empty'
       || this.tokenSequence() == 64168 // 'json' 'empty-sequence'
       || this.tokenSequence() == 64680 // 'json' 'encoding'
       || this.tokenSequence() == 65192 // 'json' 'end'
       || this.tokenSequence() == 66216 // 'json' 'eq'
       || this.tokenSequence() == 66728 // 'json' 'every'
       || this.tokenSequence() == 67752 // 'json' 'except'
       || this.tokenSequence() == 68264 // 'json' 'exit'
       || this.tokenSequence() == 68776 // 'json' 'external'
       || this.tokenSequence() == 69288 // 'json' 'false'
       || this.tokenSequence() == 69800 // 'json' 'first'
       || this.tokenSequence() == 70312 // 'json' 'following'
       || this.tokenSequence() == 70824 // 'json' 'following-sibling'
       || this.tokenSequence() == 71336 // 'json' 'for'
       || this.tokenSequence() == 72872 // 'json' 'from'
       || this.tokenSequence() == 73384 // 'json' 'ft-option'
       || this.tokenSequence() == 75432 // 'json' 'function'
       || this.tokenSequence() == 75944 // 'json' 'ge'
       || this.tokenSequence() == 76968 // 'json' 'group'
       || this.tokenSequence() == 77992 // 'json' 'gt'
       || this.tokenSequence() == 78504 // 'json' 'idiv'
       || this.tokenSequence() == 79016 // 'json' 'if'
       || this.tokenSequence() == 79528 // 'json' 'import'
       || this.tokenSequence() == 80040 // 'json' 'in'
       || this.tokenSequence() == 80552 // 'json' 'index'
       || this.tokenSequence() == 82600 // 'json' 'insert'
       || this.tokenSequence() == 83112 // 'json' 'instance'
       || this.tokenSequence() == 83624 // 'json' 'integrity'
       || this.tokenSequence() == 84136 // 'json' 'intersect'
       || this.tokenSequence() == 84648 // 'json' 'into'
       || this.tokenSequence() == 85160 // 'json' 'is'
       || this.tokenSequence() == 85672 // 'json' 'item'
       || this.tokenSequence() == 86184 // 'json' 'json'
       || this.tokenSequence() == 86696 // 'json' 'json-item'
       || this.tokenSequence() == 87208 // 'json' 'jsoniq'
       || this.tokenSequence() == 88744 // 'json' 'last'
       || this.tokenSequence() == 89256 // 'json' 'lax'
       || this.tokenSequence() == 89768 // 'json' 'le'
       || this.tokenSequence() == 90792 // 'json' 'let'
       || this.tokenSequence() == 91816 // 'json' 'loop'
       || this.tokenSequence() == 92840 // 'json' 'lt'
       || this.tokenSequence() == 93864 // 'json' 'mod'
       || this.tokenSequence() == 94376 // 'json' 'modify'
       || this.tokenSequence() == 94888 // 'json' 'module'
       || this.tokenSequence() == 95912 // 'json' 'namespace'
       || this.tokenSequence() == 96424 // 'json' 'namespace-node'
       || this.tokenSequence() == 96936 // 'json' 'ne'
       || this.tokenSequence() == 99496 // 'json' 'node'
       || this.tokenSequence() == 100008  // 'json' 'nodes'
       || this.tokenSequence() == 101032  // 'json' 'null'
       || this.tokenSequence() == 101544  // 'json' 'object'
       || this.tokenSequence() == 103592  // 'json' 'only'
       || this.tokenSequence() == 104104  // 'json' 'option'
       || this.tokenSequence() == 104616  // 'json' 'or'
       || this.tokenSequence() == 105128  // 'json' 'order'
       || this.tokenSequence() == 105640  // 'json' 'ordered'
       || this.tokenSequence() == 106152  // 'json' 'ordering'
       || this.tokenSequence() == 107688  // 'json' 'parent'
       || this.tokenSequence() == 110760  // 'json' 'preceding'
       || this.tokenSequence() == 111272  // 'json' 'preceding-sibling'
       || this.tokenSequence() == 112808  // 'json' 'processing-instruction'
       || this.tokenSequence() == 113832  // 'json' 'rename'
       || this.tokenSequence() == 114344  // 'json' 'replace'
       || this.tokenSequence() == 114856  // 'json' 'return'
       || this.tokenSequence() == 115368  // 'json' 'returning'
       || this.tokenSequence() == 115880  // 'json' 'revalidation'
       || this.tokenSequence() == 116904  // 'json' 'satisfies'
       || this.tokenSequence() == 117416  // 'json' 'schema'
       || this.tokenSequence() == 117928  // 'json' 'schema-attribute'
       || this.tokenSequence() == 118440  // 'json' 'schema-element'
       || this.tokenSequence() == 118952  // 'json' 'score'
       || this.tokenSequence() == 119464  // 'json' 'select'
       || this.tokenSequence() == 119976  // 'json' 'self'
       || this.tokenSequence() == 122536  // 'json' 'sliding'
       || this.tokenSequence() == 123048  // 'json' 'some'
       || this.tokenSequence() == 123560  // 'json' 'stable'
       || this.tokenSequence() == 124072  // 'json' 'start'
       || this.tokenSequence() == 125608  // 'json' 'strict'
       || this.tokenSequence() == 126632  // 'json' 'structured-item'
       || this.tokenSequence() == 127144  // 'json' 'switch'
       || this.tokenSequence() == 127656  // 'json' 'text'
       || this.tokenSequence() == 129704  // 'json' 'to'
       || this.tokenSequence() == 130216  // 'json' 'treat'
       || this.tokenSequence() == 130728  // 'json' 'true'
       || this.tokenSequence() == 131240  // 'json' 'try'
       || this.tokenSequence() == 131752  // 'json' 'tumbling'
       || this.tokenSequence() == 132264  // 'json' 'type'
       || this.tokenSequence() == 132776  // 'json' 'typeswitch'
       || this.tokenSequence() == 133288  // 'json' 'union'
       || this.tokenSequence() == 134312  // 'json' 'unordered'
       || this.tokenSequence() == 134824  // 'json' 'updating'
       || this.tokenSequence() == 136360  // 'json' 'validate'
       || this.tokenSequence() == 136872  // 'json' 'value'
       || this.tokenSequence() == 137384  // 'json' 'variable'
       || this.tokenSequence() == 137896  // 'json' 'version'
       || this.tokenSequence() == 139432  // 'json' 'where'
       || this.tokenSequence() == 139944  // 'json' 'while'
       || this.tokenSequence() == 141480  // 'json' 'with'
       || this.tokenSequence() == 144040  // 'json' '{'
       || this.tokenSequence() == 145064) // 'json' '{|'
      {
        this.consume(168);          // 'json'
      }
      this.lookahead1W(260);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      this.whitespace();
      this.parse_PostfixExpr();
      this.eventHandler.endNonterminal("JSONDeleteExpr", this.e0);
    }

    private try_JSONDeleteExpr()
    {
      this.consumeT(111);           // 'delete'
      this.lookahead1W(260);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      switch (this.token())
      {
      case 168:                     // 'json'
        this.lookahead2W(261);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 18088)  // 'json' '('
      {
        this.lk = this.memoized(11, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.consumeT(168);     // 'json'
            this.memoize(11, e0A, -1);
          }
          catch (p1A)
          {
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(11, e0A, -2);
          }
          this.lk = -2;
        }
      }
      if (this.tokenSequence() == -1
       || this.tokenSequence() == 3240  // 'json' EQName^Token
       || this.tokenSequence() == 4264  // 'json' IntegerLiteral
       || this.tokenSequence() == 4776  // 'json' DecimalLiteral
       || this.tokenSequence() == 5288  // 'json' DoubleLiteral
       || this.tokenSequence() == 5800  // 'json' StringLiteral
       || this.tokenSequence() == 16040 // 'json' '$'
       || this.tokenSequence() == 16552 // 'json' '$$'
       || this.tokenSequence() == 17064 // 'json' '%'
       || this.tokenSequence() == 28328 // 'json' '<'
       || this.tokenSequence() == 28840 // 'json' '<!--'
       || this.tokenSequence() == 30888 // 'json' '<?'
       || this.tokenSequence() == 35496 // 'json' '['
       || this.tokenSequence() == 36520 // 'json' 'after'
       || this.tokenSequence() == 37544 // 'json' 'allowing'
       || this.tokenSequence() == 38056 // 'json' 'ancestor'
       || this.tokenSequence() == 38568 // 'json' 'ancestor-or-self'
       || this.tokenSequence() == 39080 // 'json' 'and'
       || this.tokenSequence() == 40104 // 'json' 'append'
       || this.tokenSequence() == 40616 // 'json' 'array'
       || this.tokenSequence() == 41128 // 'json' 'as'
       || this.tokenSequence() == 41640 // 'json' 'ascending'
       || this.tokenSequence() == 42152 // 'json' 'at'
       || this.tokenSequence() == 42664 // 'json' 'attribute'
       || this.tokenSequence() == 43176 // 'json' 'base-uri'
       || this.tokenSequence() == 43688 // 'json' 'before'
       || this.tokenSequence() == 44200 // 'json' 'boundary-space'
       || this.tokenSequence() == 44712 // 'json' 'break'
       || this.tokenSequence() == 45736 // 'json' 'case'
       || this.tokenSequence() == 46248 // 'json' 'cast'
       || this.tokenSequence() == 46760 // 'json' 'castable'
       || this.tokenSequence() == 47272 // 'json' 'catch'
       || this.tokenSequence() == 48296 // 'json' 'child'
       || this.tokenSequence() == 48808 // 'json' 'collation'
       || this.tokenSequence() == 49832 // 'json' 'comment'
       || this.tokenSequence() == 50344 // 'json' 'constraint'
       || this.tokenSequence() == 50856 // 'json' 'construction'
       || this.tokenSequence() == 52392 // 'json' 'context'
       || this.tokenSequence() == 52904 // 'json' 'continue'
       || this.tokenSequence() == 53416 // 'json' 'copy'
       || this.tokenSequence() == 53928 // 'json' 'copy-namespaces'
       || this.tokenSequence() == 54440 // 'json' 'count'
       || this.tokenSequence() == 54952 // 'json' 'decimal-format'
       || this.tokenSequence() == 55976 // 'json' 'declare'
       || this.tokenSequence() == 56488 // 'json' 'default'
       || this.tokenSequence() == 57000 // 'json' 'delete'
       || this.tokenSequence() == 57512 // 'json' 'descendant'
       || this.tokenSequence() == 58024 // 'json' 'descendant-or-self'
       || this.tokenSequence() == 58536 // 'json' 'descending'
       || this.tokenSequence() == 61096 // 'json' 'div'
       || this.tokenSequence() == 61608 // 'json' 'document'
       || this.tokenSequence() == 62120 // 'json' 'document-node'
       || this.tokenSequence() == 62632 // 'json' 'element'
       || this.tokenSequence() == 63144 // 'json' 'else'
       || this.tokenSequence() == 63656 // 'json' 'empty'
       || this.tokenSequence() == 64168 // 'json' 'empty-sequence'
       || this.tokenSequence() == 64680 // 'json' 'encoding'
       || this.tokenSequence() == 65192 // 'json' 'end'
       || this.tokenSequence() == 66216 // 'json' 'eq'
       || this.tokenSequence() == 66728 // 'json' 'every'
       || this.tokenSequence() == 67752 // 'json' 'except'
       || this.tokenSequence() == 68264 // 'json' 'exit'
       || this.tokenSequence() == 68776 // 'json' 'external'
       || this.tokenSequence() == 69288 // 'json' 'false'
       || this.tokenSequence() == 69800 // 'json' 'first'
       || this.tokenSequence() == 70312 // 'json' 'following'
       || this.tokenSequence() == 70824 // 'json' 'following-sibling'
       || this.tokenSequence() == 71336 // 'json' 'for'
       || this.tokenSequence() == 72872 // 'json' 'from'
       || this.tokenSequence() == 73384 // 'json' 'ft-option'
       || this.tokenSequence() == 75432 // 'json' 'function'
       || this.tokenSequence() == 75944 // 'json' 'ge'
       || this.tokenSequence() == 76968 // 'json' 'group'
       || this.tokenSequence() == 77992 // 'json' 'gt'
       || this.tokenSequence() == 78504 // 'json' 'idiv'
       || this.tokenSequence() == 79016 // 'json' 'if'
       || this.tokenSequence() == 79528 // 'json' 'import'
       || this.tokenSequence() == 80040 // 'json' 'in'
       || this.tokenSequence() == 80552 // 'json' 'index'
       || this.tokenSequence() == 82600 // 'json' 'insert'
       || this.tokenSequence() == 83112 // 'json' 'instance'
       || this.tokenSequence() == 83624 // 'json' 'integrity'
       || this.tokenSequence() == 84136 // 'json' 'intersect'
       || this.tokenSequence() == 84648 // 'json' 'into'
       || this.tokenSequence() == 85160 // 'json' 'is'
       || this.tokenSequence() == 85672 // 'json' 'item'
       || this.tokenSequence() == 86184 // 'json' 'json'
       || this.tokenSequence() == 86696 // 'json' 'json-item'
       || this.tokenSequence() == 87208 // 'json' 'jsoniq'
       || this.tokenSequence() == 88744 // 'json' 'last'
       || this.tokenSequence() == 89256 // 'json' 'lax'
       || this.tokenSequence() == 89768 // 'json' 'le'
       || this.tokenSequence() == 90792 // 'json' 'let'
       || this.tokenSequence() == 91816 // 'json' 'loop'
       || this.tokenSequence() == 92840 // 'json' 'lt'
       || this.tokenSequence() == 93864 // 'json' 'mod'
       || this.tokenSequence() == 94376 // 'json' 'modify'
       || this.tokenSequence() == 94888 // 'json' 'module'
       || this.tokenSequence() == 95912 // 'json' 'namespace'
       || this.tokenSequence() == 96424 // 'json' 'namespace-node'
       || this.tokenSequence() == 96936 // 'json' 'ne'
       || this.tokenSequence() == 99496 // 'json' 'node'
       || this.tokenSequence() == 100008  // 'json' 'nodes'
       || this.tokenSequence() == 101032  // 'json' 'null'
       || this.tokenSequence() == 101544  // 'json' 'object'
       || this.tokenSequence() == 103592  // 'json' 'only'
       || this.tokenSequence() == 104104  // 'json' 'option'
       || this.tokenSequence() == 104616  // 'json' 'or'
       || this.tokenSequence() == 105128  // 'json' 'order'
       || this.tokenSequence() == 105640  // 'json' 'ordered'
       || this.tokenSequence() == 106152  // 'json' 'ordering'
       || this.tokenSequence() == 107688  // 'json' 'parent'
       || this.tokenSequence() == 110760  // 'json' 'preceding'
       || this.tokenSequence() == 111272  // 'json' 'preceding-sibling'
       || this.tokenSequence() == 112808  // 'json' 'processing-instruction'
       || this.tokenSequence() == 113832  // 'json' 'rename'
       || this.tokenSequence() == 114344  // 'json' 'replace'
       || this.tokenSequence() == 114856  // 'json' 'return'
       || this.tokenSequence() == 115368  // 'json' 'returning'
       || this.tokenSequence() == 115880  // 'json' 'revalidation'
       || this.tokenSequence() == 116904  // 'json' 'satisfies'
       || this.tokenSequence() == 117416  // 'json' 'schema'
       || this.tokenSequence() == 117928  // 'json' 'schema-attribute'
       || this.tokenSequence() == 118440  // 'json' 'schema-element'
       || this.tokenSequence() == 118952  // 'json' 'score'
       || this.tokenSequence() == 119464  // 'json' 'select'
       || this.tokenSequence() == 119976  // 'json' 'self'
       || this.tokenSequence() == 122536  // 'json' 'sliding'
       || this.tokenSequence() == 123048  // 'json' 'some'
       || this.tokenSequence() == 123560  // 'json' 'stable'
       || this.tokenSequence() == 124072  // 'json' 'start'
       || this.tokenSequence() == 125608  // 'json' 'strict'
       || this.tokenSequence() == 126632  // 'json' 'structured-item'
       || this.tokenSequence() == 127144  // 'json' 'switch'
       || this.tokenSequence() == 127656  // 'json' 'text'
       || this.tokenSequence() == 129704  // 'json' 'to'
       || this.tokenSequence() == 130216  // 'json' 'treat'
       || this.tokenSequence() == 130728  // 'json' 'true'
       || this.tokenSequence() == 131240  // 'json' 'try'
       || this.tokenSequence() == 131752  // 'json' 'tumbling'
       || this.tokenSequence() == 132264  // 'json' 'type'
       || this.tokenSequence() == 132776  // 'json' 'typeswitch'
       || this.tokenSequence() == 133288  // 'json' 'union'
       || this.tokenSequence() == 134312  // 'json' 'unordered'
       || this.tokenSequence() == 134824  // 'json' 'updating'
       || this.tokenSequence() == 136360  // 'json' 'validate'
       || this.tokenSequence() == 136872  // 'json' 'value'
       || this.tokenSequence() == 137384  // 'json' 'variable'
       || this.tokenSequence() == 137896  // 'json' 'version'
       || this.tokenSequence() == 139432  // 'json' 'where'
       || this.tokenSequence() == 139944  // 'json' 'while'
       || this.tokenSequence() == 141480  // 'json' 'with'
       || this.tokenSequence() == 144040  // 'json' '{'
       || this.tokenSequence() == 145064) // 'json' '{|'
      {
        this.consumeT(168);         // 'json'
      }
      this.lookahead1W(260);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      this.try_PostfixExpr();
    }

    private parse_JSONInsertExpr()
    {
      this.eventHandler.startNonterminal("JSONInsertExpr", this.e0);
      switch (this.token())
      {
      case 161:                     // 'insert'
        this.lookahead2W(268);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() != 9889) // 'insert' NCName^Token
      {
        this.lk = this.memoized(12, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.consumeT(161);     // 'insert'
            this.lookahead1W(267);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            switch (this.token())
            {
            case 168:               // 'json'
              this.lookahead2W(269);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                      // StringLiteral | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                      // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                      // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                      // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                      // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                      // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                      // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                      // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                      // 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                      // 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' |
                                      // 'external' | 'false' | 'first' | 'following' | 'following-sibling' | 'for' |
                                      // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                      // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                      // 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' |
                                      // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                      // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' | 'null' | 'object' |
                                      // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                      // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                      // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                      // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                      // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                      // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                      // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                      // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
              break;
            default:
              this.lk = this.l1;
            }
            if (this.tokenSequence() == 18088)  // 'json' '('
            {
              this.lk = this.memoized(13, this.e0);
              if (this.lk == 0)
              {
                var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
                var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
                var b2B = this.b2; var e2B = this.e2;
                try
                {
                  this.consumeT(168); // 'json'
                  this.memoize(13, e0B, -1);
                }
                catch (p1B)
                {
                  this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
                  this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
                  this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
                  this.memoize(13, e0B, -2);
                }
                this.lk = -2;
              }
            }
            if (this.tokenSequence() == -1
             || this.tokenSequence() == 3240  // 'json' EQName^Token
             || this.tokenSequence() == 4264  // 'json' IntegerLiteral
             || this.tokenSequence() == 4776  // 'json' DecimalLiteral
             || this.tokenSequence() == 5288  // 'json' DoubleLiteral
             || this.tokenSequence() == 5800  // 'json' StringLiteral
             || this.tokenSequence() == 16040 // 'json' '$'
             || this.tokenSequence() == 16552 // 'json' '$$'
             || this.tokenSequence() == 17064 // 'json' '%'
             || this.tokenSequence() == 18600 // 'json' '(#'
             || this.tokenSequence() == 21160 // 'json' '+'
             || this.tokenSequence() == 22184 // 'json' '-'
             || this.tokenSequence() == 24232 // 'json' '/'
             || this.tokenSequence() == 24744 // 'json' '//'
             || this.tokenSequence() == 28328 // 'json' '<'
             || this.tokenSequence() == 28840 // 'json' '<!--'
             || this.tokenSequence() == 30888 // 'json' '<?'
             || this.tokenSequence() == 35496 // 'json' '['
             || this.tokenSequence() == 36520 // 'json' 'after'
             || this.tokenSequence() == 37544 // 'json' 'allowing'
             || this.tokenSequence() == 38056 // 'json' 'ancestor'
             || this.tokenSequence() == 38568 // 'json' 'ancestor-or-self'
             || this.tokenSequence() == 39080 // 'json' 'and'
             || this.tokenSequence() == 40104 // 'json' 'append'
             || this.tokenSequence() == 40616 // 'json' 'array'
             || this.tokenSequence() == 41128 // 'json' 'as'
             || this.tokenSequence() == 41640 // 'json' 'ascending'
             || this.tokenSequence() == 42152 // 'json' 'at'
             || this.tokenSequence() == 42664 // 'json' 'attribute'
             || this.tokenSequence() == 43176 // 'json' 'base-uri'
             || this.tokenSequence() == 43688 // 'json' 'before'
             || this.tokenSequence() == 44200 // 'json' 'boundary-space'
             || this.tokenSequence() == 44712 // 'json' 'break'
             || this.tokenSequence() == 45736 // 'json' 'case'
             || this.tokenSequence() == 46248 // 'json' 'cast'
             || this.tokenSequence() == 46760 // 'json' 'castable'
             || this.tokenSequence() == 47272 // 'json' 'catch'
             || this.tokenSequence() == 48296 // 'json' 'child'
             || this.tokenSequence() == 48808 // 'json' 'collation'
             || this.tokenSequence() == 49832 // 'json' 'comment'
             || this.tokenSequence() == 50344 // 'json' 'constraint'
             || this.tokenSequence() == 50856 // 'json' 'construction'
             || this.tokenSequence() == 52392 // 'json' 'context'
             || this.tokenSequence() == 52904 // 'json' 'continue'
             || this.tokenSequence() == 53416 // 'json' 'copy'
             || this.tokenSequence() == 53928 // 'json' 'copy-namespaces'
             || this.tokenSequence() == 54440 // 'json' 'count'
             || this.tokenSequence() == 54952 // 'json' 'decimal-format'
             || this.tokenSequence() == 55976 // 'json' 'declare'
             || this.tokenSequence() == 56488 // 'json' 'default'
             || this.tokenSequence() == 57000 // 'json' 'delete'
             || this.tokenSequence() == 57512 // 'json' 'descendant'
             || this.tokenSequence() == 58024 // 'json' 'descendant-or-self'
             || this.tokenSequence() == 58536 // 'json' 'descending'
             || this.tokenSequence() == 61096 // 'json' 'div'
             || this.tokenSequence() == 61608 // 'json' 'document'
             || this.tokenSequence() == 62120 // 'json' 'document-node'
             || this.tokenSequence() == 62632 // 'json' 'element'
             || this.tokenSequence() == 63144 // 'json' 'else'
             || this.tokenSequence() == 63656 // 'json' 'empty'
             || this.tokenSequence() == 64168 // 'json' 'empty-sequence'
             || this.tokenSequence() == 64680 // 'json' 'encoding'
             || this.tokenSequence() == 65192 // 'json' 'end'
             || this.tokenSequence() == 66216 // 'json' 'eq'
             || this.tokenSequence() == 66728 // 'json' 'every'
             || this.tokenSequence() == 67752 // 'json' 'except'
             || this.tokenSequence() == 68264 // 'json' 'exit'
             || this.tokenSequence() == 68776 // 'json' 'external'
             || this.tokenSequence() == 69288 // 'json' 'false'
             || this.tokenSequence() == 69800 // 'json' 'first'
             || this.tokenSequence() == 70312 // 'json' 'following'
             || this.tokenSequence() == 70824 // 'json' 'following-sibling'
             || this.tokenSequence() == 71336 // 'json' 'for'
             || this.tokenSequence() == 72872 // 'json' 'from'
             || this.tokenSequence() == 73384 // 'json' 'ft-option'
             || this.tokenSequence() == 75432 // 'json' 'function'
             || this.tokenSequence() == 75944 // 'json' 'ge'
             || this.tokenSequence() == 76968 // 'json' 'group'
             || this.tokenSequence() == 77992 // 'json' 'gt'
             || this.tokenSequence() == 78504 // 'json' 'idiv'
             || this.tokenSequence() == 79016 // 'json' 'if'
             || this.tokenSequence() == 79528 // 'json' 'import'
             || this.tokenSequence() == 80040 // 'json' 'in'
             || this.tokenSequence() == 80552 // 'json' 'index'
             || this.tokenSequence() == 82600 // 'json' 'insert'
             || this.tokenSequence() == 83112 // 'json' 'instance'
             || this.tokenSequence() == 83624 // 'json' 'integrity'
             || this.tokenSequence() == 84136 // 'json' 'intersect'
             || this.tokenSequence() == 84648 // 'json' 'into'
             || this.tokenSequence() == 85160 // 'json' 'is'
             || this.tokenSequence() == 85672 // 'json' 'item'
             || this.tokenSequence() == 86184 // 'json' 'json'
             || this.tokenSequence() == 86696 // 'json' 'json-item'
             || this.tokenSequence() == 87208 // 'json' 'jsoniq'
             || this.tokenSequence() == 88744 // 'json' 'last'
             || this.tokenSequence() == 89256 // 'json' 'lax'
             || this.tokenSequence() == 89768 // 'json' 'le'
             || this.tokenSequence() == 90792 // 'json' 'let'
             || this.tokenSequence() == 91816 // 'json' 'loop'
             || this.tokenSequence() == 92840 // 'json' 'lt'
             || this.tokenSequence() == 93864 // 'json' 'mod'
             || this.tokenSequence() == 94376 // 'json' 'modify'
             || this.tokenSequence() == 94888 // 'json' 'module'
             || this.tokenSequence() == 95912 // 'json' 'namespace'
             || this.tokenSequence() == 96424 // 'json' 'namespace-node'
             || this.tokenSequence() == 96936 // 'json' 'ne'
             || this.tokenSequence() == 99496 // 'json' 'node'
             || this.tokenSequence() == 100008  // 'json' 'nodes'
             || this.tokenSequence() == 100520  // 'json' 'not'
             || this.tokenSequence() == 101032  // 'json' 'null'
             || this.tokenSequence() == 101544  // 'json' 'object'
             || this.tokenSequence() == 103592  // 'json' 'only'
             || this.tokenSequence() == 104104  // 'json' 'option'
             || this.tokenSequence() == 104616  // 'json' 'or'
             || this.tokenSequence() == 105128  // 'json' 'order'
             || this.tokenSequence() == 105640  // 'json' 'ordered'
             || this.tokenSequence() == 106152  // 'json' 'ordering'
             || this.tokenSequence() == 107688  // 'json' 'parent'
             || this.tokenSequence() == 110760  // 'json' 'preceding'
             || this.tokenSequence() == 111272  // 'json' 'preceding-sibling'
             || this.tokenSequence() == 112808  // 'json' 'processing-instruction'
             || this.tokenSequence() == 113832  // 'json' 'rename'
             || this.tokenSequence() == 114344  // 'json' 'replace'
             || this.tokenSequence() == 114856  // 'json' 'return'
             || this.tokenSequence() == 115368  // 'json' 'returning'
             || this.tokenSequence() == 115880  // 'json' 'revalidation'
             || this.tokenSequence() == 116904  // 'json' 'satisfies'
             || this.tokenSequence() == 117416  // 'json' 'schema'
             || this.tokenSequence() == 117928  // 'json' 'schema-attribute'
             || this.tokenSequence() == 118440  // 'json' 'schema-element'
             || this.tokenSequence() == 118952  // 'json' 'score'
             || this.tokenSequence() == 119464  // 'json' 'select'
             || this.tokenSequence() == 119976  // 'json' 'self'
             || this.tokenSequence() == 122536  // 'json' 'sliding'
             || this.tokenSequence() == 123048  // 'json' 'some'
             || this.tokenSequence() == 123560  // 'json' 'stable'
             || this.tokenSequence() == 124072  // 'json' 'start'
             || this.tokenSequence() == 125608  // 'json' 'strict'
             || this.tokenSequence() == 126632  // 'json' 'structured-item'
             || this.tokenSequence() == 127144  // 'json' 'switch'
             || this.tokenSequence() == 127656  // 'json' 'text'
             || this.tokenSequence() == 129704  // 'json' 'to'
             || this.tokenSequence() == 130216  // 'json' 'treat'
             || this.tokenSequence() == 130728  // 'json' 'true'
             || this.tokenSequence() == 131240  // 'json' 'try'
             || this.tokenSequence() == 131752  // 'json' 'tumbling'
             || this.tokenSequence() == 132264  // 'json' 'type'
             || this.tokenSequence() == 132776  // 'json' 'typeswitch'
             || this.tokenSequence() == 133288  // 'json' 'union'
             || this.tokenSequence() == 134312  // 'json' 'unordered'
             || this.tokenSequence() == 134824  // 'json' 'updating'
             || this.tokenSequence() == 136360  // 'json' 'validate'
             || this.tokenSequence() == 136872  // 'json' 'value'
             || this.tokenSequence() == 137384  // 'json' 'variable'
             || this.tokenSequence() == 137896  // 'json' 'version'
             || this.tokenSequence() == 139432  // 'json' 'where'
             || this.tokenSequence() == 139944  // 'json' 'while'
             || this.tokenSequence() == 141480  // 'json' 'with'
             || this.tokenSequence() == 144040  // 'json' '{'
             || this.tokenSequence() == 145064) // 'json' '{|'
            {
              this.consumeT(168);   // 'json'
            }
            this.lookahead1W(267);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            this.try_ExprSingle();
            this.consumeT(165);     // 'into'
            this.lookahead1W(267);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            this.try_ExprSingle();
            switch (this.token())
            {
            case 82:                // 'at'
              this.lookahead2W(72); // S^WS | '(:' | 'position'
              break;
            default:
              this.lk = this.l1;
            }
            if (this.tokenSequence() == 110162) // 'at' 'position'
            {
              this.lk = this.memoized(14, this.e0);
              if (this.lk == 0)
              {
                var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
                var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
                var b2B = this.b2; var e2B = this.e2;
                try
                {
                  this.consumeT(82);  // 'at'
                  this.lookahead1W(72); // S^WS | '(:' | 'position'
                  this.consumeT(215); // 'position'
                  this.lookahead1W(267);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                          // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                          // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' |
                                          // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                          // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                          // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                          // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                          // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                          // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                          // 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                          // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                          // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                          // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                          // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                          // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                          // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' |
                                          // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                          // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                          // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                          // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                          // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                          // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' |
                                          // 'schema-element' | 'score' | 'select' | 'self' | 'sliding' | 'some' |
                                          // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                          // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                          // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                          // 'version' | 'where' | 'while' | 'with' | '{' | '{|'
                  this.try_ExprSingle();
                  this.memoize(14, e0B, -1);
                }
                catch (p1B)
                {
                  this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
                  this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
                  this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
                  this.memoize(14, e0B, -2);
                }
                this.lk = -2;
              }
            }
            if (this.tokenSequence() == -1)
            {
              this.consumeT(82);    // 'at'
              this.lookahead1W(72); // S^WS | '(:' | 'position'
              this.consumeT(215);   // 'position'
              this.lookahead1W(267);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                      // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                      // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                      // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                      // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                      // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                      // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                      // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                      // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                      // 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                      // 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' |
                                      // 'external' | 'false' | 'first' | 'following' | 'following-sibling' | 'for' |
                                      // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                      // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                      // 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' |
                                      // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                      // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' | 'null' | 'object' |
                                      // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                      // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                      // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                      // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                      // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                      // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                      // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                      // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
              this.try_ExprSingle();
            }
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(12, this.e0, this.lk);
        }
      }
      switch (this.tokenSequence())
      {
      case -1:
        this.consume(161);          // 'insert'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        switch (this.token())
        {
        case 168:                   // 'json'
          this.lookahead2W(269);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.tokenSequence() == 18088)  // 'json' '('
        {
          this.lk = this.memoized(13, this.e0);
          if (this.lk == 0)
          {
            var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
            var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
            var b2B = this.b2; var e2B = this.e2;
            try
            {
              this.consumeT(168);   // 'json'
              this.lk = -1;
            }
            catch (p1B)
            {
              this.lk = -2;
            }
            this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
            this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
            this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
            this.memoize(13, this.e0, this.lk);
          }
        }
        if (this.tokenSequence() == -1
         || this.tokenSequence() == 3240  // 'json' EQName^Token
         || this.tokenSequence() == 4264  // 'json' IntegerLiteral
         || this.tokenSequence() == 4776  // 'json' DecimalLiteral
         || this.tokenSequence() == 5288  // 'json' DoubleLiteral
         || this.tokenSequence() == 5800  // 'json' StringLiteral
         || this.tokenSequence() == 16040 // 'json' '$'
         || this.tokenSequence() == 16552 // 'json' '$$'
         || this.tokenSequence() == 17064 // 'json' '%'
         || this.tokenSequence() == 18600 // 'json' '(#'
         || this.tokenSequence() == 21160 // 'json' '+'
         || this.tokenSequence() == 22184 // 'json' '-'
         || this.tokenSequence() == 24232 // 'json' '/'
         || this.tokenSequence() == 24744 // 'json' '//'
         || this.tokenSequence() == 28328 // 'json' '<'
         || this.tokenSequence() == 28840 // 'json' '<!--'
         || this.tokenSequence() == 30888 // 'json' '<?'
         || this.tokenSequence() == 35496 // 'json' '['
         || this.tokenSequence() == 36520 // 'json' 'after'
         || this.tokenSequence() == 37544 // 'json' 'allowing'
         || this.tokenSequence() == 38056 // 'json' 'ancestor'
         || this.tokenSequence() == 38568 // 'json' 'ancestor-or-self'
         || this.tokenSequence() == 39080 // 'json' 'and'
         || this.tokenSequence() == 40104 // 'json' 'append'
         || this.tokenSequence() == 40616 // 'json' 'array'
         || this.tokenSequence() == 41128 // 'json' 'as'
         || this.tokenSequence() == 41640 // 'json' 'ascending'
         || this.tokenSequence() == 42152 // 'json' 'at'
         || this.tokenSequence() == 42664 // 'json' 'attribute'
         || this.tokenSequence() == 43176 // 'json' 'base-uri'
         || this.tokenSequence() == 43688 // 'json' 'before'
         || this.tokenSequence() == 44200 // 'json' 'boundary-space'
         || this.tokenSequence() == 44712 // 'json' 'break'
         || this.tokenSequence() == 45736 // 'json' 'case'
         || this.tokenSequence() == 46248 // 'json' 'cast'
         || this.tokenSequence() == 46760 // 'json' 'castable'
         || this.tokenSequence() == 47272 // 'json' 'catch'
         || this.tokenSequence() == 48296 // 'json' 'child'
         || this.tokenSequence() == 48808 // 'json' 'collation'
         || this.tokenSequence() == 49832 // 'json' 'comment'
         || this.tokenSequence() == 50344 // 'json' 'constraint'
         || this.tokenSequence() == 50856 // 'json' 'construction'
         || this.tokenSequence() == 52392 // 'json' 'context'
         || this.tokenSequence() == 52904 // 'json' 'continue'
         || this.tokenSequence() == 53416 // 'json' 'copy'
         || this.tokenSequence() == 53928 // 'json' 'copy-namespaces'
         || this.tokenSequence() == 54440 // 'json' 'count'
         || this.tokenSequence() == 54952 // 'json' 'decimal-format'
         || this.tokenSequence() == 55976 // 'json' 'declare'
         || this.tokenSequence() == 56488 // 'json' 'default'
         || this.tokenSequence() == 57000 // 'json' 'delete'
         || this.tokenSequence() == 57512 // 'json' 'descendant'
         || this.tokenSequence() == 58024 // 'json' 'descendant-or-self'
         || this.tokenSequence() == 58536 // 'json' 'descending'
         || this.tokenSequence() == 61096 // 'json' 'div'
         || this.tokenSequence() == 61608 // 'json' 'document'
         || this.tokenSequence() == 62120 // 'json' 'document-node'
         || this.tokenSequence() == 62632 // 'json' 'element'
         || this.tokenSequence() == 63144 // 'json' 'else'
         || this.tokenSequence() == 63656 // 'json' 'empty'
         || this.tokenSequence() == 64168 // 'json' 'empty-sequence'
         || this.tokenSequence() == 64680 // 'json' 'encoding'
         || this.tokenSequence() == 65192 // 'json' 'end'
         || this.tokenSequence() == 66216 // 'json' 'eq'
         || this.tokenSequence() == 66728 // 'json' 'every'
         || this.tokenSequence() == 67752 // 'json' 'except'
         || this.tokenSequence() == 68264 // 'json' 'exit'
         || this.tokenSequence() == 68776 // 'json' 'external'
         || this.tokenSequence() == 69288 // 'json' 'false'
         || this.tokenSequence() == 69800 // 'json' 'first'
         || this.tokenSequence() == 70312 // 'json' 'following'
         || this.tokenSequence() == 70824 // 'json' 'following-sibling'
         || this.tokenSequence() == 71336 // 'json' 'for'
         || this.tokenSequence() == 72872 // 'json' 'from'
         || this.tokenSequence() == 73384 // 'json' 'ft-option'
         || this.tokenSequence() == 75432 // 'json' 'function'
         || this.tokenSequence() == 75944 // 'json' 'ge'
         || this.tokenSequence() == 76968 // 'json' 'group'
         || this.tokenSequence() == 77992 // 'json' 'gt'
         || this.tokenSequence() == 78504 // 'json' 'idiv'
         || this.tokenSequence() == 79016 // 'json' 'if'
         || this.tokenSequence() == 79528 // 'json' 'import'
         || this.tokenSequence() == 80040 // 'json' 'in'
         || this.tokenSequence() == 80552 // 'json' 'index'
         || this.tokenSequence() == 82600 // 'json' 'insert'
         || this.tokenSequence() == 83112 // 'json' 'instance'
         || this.tokenSequence() == 83624 // 'json' 'integrity'
         || this.tokenSequence() == 84136 // 'json' 'intersect'
         || this.tokenSequence() == 84648 // 'json' 'into'
         || this.tokenSequence() == 85160 // 'json' 'is'
         || this.tokenSequence() == 85672 // 'json' 'item'
         || this.tokenSequence() == 86184 // 'json' 'json'
         || this.tokenSequence() == 86696 // 'json' 'json-item'
         || this.tokenSequence() == 87208 // 'json' 'jsoniq'
         || this.tokenSequence() == 88744 // 'json' 'last'
         || this.tokenSequence() == 89256 // 'json' 'lax'
         || this.tokenSequence() == 89768 // 'json' 'le'
         || this.tokenSequence() == 90792 // 'json' 'let'
         || this.tokenSequence() == 91816 // 'json' 'loop'
         || this.tokenSequence() == 92840 // 'json' 'lt'
         || this.tokenSequence() == 93864 // 'json' 'mod'
         || this.tokenSequence() == 94376 // 'json' 'modify'
         || this.tokenSequence() == 94888 // 'json' 'module'
         || this.tokenSequence() == 95912 // 'json' 'namespace'
         || this.tokenSequence() == 96424 // 'json' 'namespace-node'
         || this.tokenSequence() == 96936 // 'json' 'ne'
         || this.tokenSequence() == 99496 // 'json' 'node'
         || this.tokenSequence() == 100008  // 'json' 'nodes'
         || this.tokenSequence() == 100520  // 'json' 'not'
         || this.tokenSequence() == 101032  // 'json' 'null'
         || this.tokenSequence() == 101544  // 'json' 'object'
         || this.tokenSequence() == 103592  // 'json' 'only'
         || this.tokenSequence() == 104104  // 'json' 'option'
         || this.tokenSequence() == 104616  // 'json' 'or'
         || this.tokenSequence() == 105128  // 'json' 'order'
         || this.tokenSequence() == 105640  // 'json' 'ordered'
         || this.tokenSequence() == 106152  // 'json' 'ordering'
         || this.tokenSequence() == 107688  // 'json' 'parent'
         || this.tokenSequence() == 110760  // 'json' 'preceding'
         || this.tokenSequence() == 111272  // 'json' 'preceding-sibling'
         || this.tokenSequence() == 112808  // 'json' 'processing-instruction'
         || this.tokenSequence() == 113832  // 'json' 'rename'
         || this.tokenSequence() == 114344  // 'json' 'replace'
         || this.tokenSequence() == 114856  // 'json' 'return'
         || this.tokenSequence() == 115368  // 'json' 'returning'
         || this.tokenSequence() == 115880  // 'json' 'revalidation'
         || this.tokenSequence() == 116904  // 'json' 'satisfies'
         || this.tokenSequence() == 117416  // 'json' 'schema'
         || this.tokenSequence() == 117928  // 'json' 'schema-attribute'
         || this.tokenSequence() == 118440  // 'json' 'schema-element'
         || this.tokenSequence() == 118952  // 'json' 'score'
         || this.tokenSequence() == 119464  // 'json' 'select'
         || this.tokenSequence() == 119976  // 'json' 'self'
         || this.tokenSequence() == 122536  // 'json' 'sliding'
         || this.tokenSequence() == 123048  // 'json' 'some'
         || this.tokenSequence() == 123560  // 'json' 'stable'
         || this.tokenSequence() == 124072  // 'json' 'start'
         || this.tokenSequence() == 125608  // 'json' 'strict'
         || this.tokenSequence() == 126632  // 'json' 'structured-item'
         || this.tokenSequence() == 127144  // 'json' 'switch'
         || this.tokenSequence() == 127656  // 'json' 'text'
         || this.tokenSequence() == 129704  // 'json' 'to'
         || this.tokenSequence() == 130216  // 'json' 'treat'
         || this.tokenSequence() == 130728  // 'json' 'true'
         || this.tokenSequence() == 131240  // 'json' 'try'
         || this.tokenSequence() == 131752  // 'json' 'tumbling'
         || this.tokenSequence() == 132264  // 'json' 'type'
         || this.tokenSequence() == 132776  // 'json' 'typeswitch'
         || this.tokenSequence() == 133288  // 'json' 'union'
         || this.tokenSequence() == 134312  // 'json' 'unordered'
         || this.tokenSequence() == 134824  // 'json' 'updating'
         || this.tokenSequence() == 136360  // 'json' 'validate'
         || this.tokenSequence() == 136872  // 'json' 'value'
         || this.tokenSequence() == 137384  // 'json' 'variable'
         || this.tokenSequence() == 137896  // 'json' 'version'
         || this.tokenSequence() == 139432  // 'json' 'where'
         || this.tokenSequence() == 139944  // 'json' 'while'
         || this.tokenSequence() == 141480  // 'json' 'with'
         || this.tokenSequence() == 144040  // 'json' '{'
         || this.tokenSequence() == 145064) // 'json' '{|'
        {
          this.consume(168);        // 'json'
        }
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_ExprSingle();
        this.consume(165);          // 'into'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_ExprSingle();
        switch (this.token())
        {
        case 82:                    // 'at'
          this.lookahead2W(72);     // S^WS | '(:' | 'position'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.tokenSequence() == 110162) // 'at' 'position'
        {
          this.lk = this.memoized(14, this.e0);
          if (this.lk == 0)
          {
            var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
            var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
            var b2B = this.b2; var e2B = this.e2;
            try
            {
              this.consumeT(82);    // 'at'
              this.lookahead1W(72); // S^WS | '(:' | 'position'
              this.consumeT(215);   // 'position'
              this.lookahead1W(267);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                      // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                      // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                      // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                      // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                      // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                      // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                      // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                      // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                      // 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                      // 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' |
                                      // 'external' | 'false' | 'first' | 'following' | 'following-sibling' | 'for' |
                                      // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                      // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                      // 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' |
                                      // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                      // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' | 'null' | 'object' |
                                      // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                      // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                      // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                      // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                      // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                      // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                      // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                      // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
              this.try_ExprSingle();
              this.lk = -1;
            }
            catch (p1B)
            {
              this.lk = -2;
            }
            this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
            this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
            this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
            this.memoize(14, this.e0, this.lk);
          }
        }
        if (this.tokenSequence() == -1)
        {
          this.consume(82);         // 'at'
          this.lookahead1W(72);     // S^WS | '(:' | 'position'
          this.consume(215);        // 'position'
          this.lookahead1W(267);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          this.whitespace();
          this.parse_ExprSingle();
        }
        break;
      default:
        this.consume(161);          // 'insert'
        this.lookahead1W(268);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        switch (this.token())
        {
        case 168:                   // 'json'
          this.lookahead2W(282);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.tokenSequence() == 18088)  // 'json' '('
        {
          this.lk = this.memoized(15, this.e0);
          if (this.lk == 0)
          {
            var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
            var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
            var b2B = this.b2; var e2B = this.e2;
            try
            {
              this.consumeT(168);   // 'json'
              this.lk = -1;
            }
            catch (p1B)
            {
              this.lk = -2;
            }
            this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
            this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
            this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
            this.memoize(15, this.e0, this.lk);
          }
        }
        if (this.tokenSequence() == -1
         || this.tokenSequence() == 3240  // 'json' EQName^Token
         || this.tokenSequence() == 4264  // 'json' IntegerLiteral
         || this.tokenSequence() == 4776  // 'json' DecimalLiteral
         || this.tokenSequence() == 5288  // 'json' DoubleLiteral
         || this.tokenSequence() == 5800  // 'json' StringLiteral
         || this.tokenSequence() == 9896  // 'json' NCName^Token
         || this.tokenSequence() == 16040 // 'json' '$'
         || this.tokenSequence() == 16552 // 'json' '$$'
         || this.tokenSequence() == 17064 // 'json' '%'
         || this.tokenSequence() == 18600 // 'json' '(#'
         || this.tokenSequence() == 21160 // 'json' '+'
         || this.tokenSequence() == 22184 // 'json' '-'
         || this.tokenSequence() == 24232 // 'json' '/'
         || this.tokenSequence() == 24744 // 'json' '//'
         || this.tokenSequence() == 28328 // 'json' '<'
         || this.tokenSequence() == 28840 // 'json' '<!--'
         || this.tokenSequence() == 30888 // 'json' '<?'
         || this.tokenSequence() == 35496 // 'json' '['
         || this.tokenSequence() == 36520 // 'json' 'after'
         || this.tokenSequence() == 37544 // 'json' 'allowing'
         || this.tokenSequence() == 38056 // 'json' 'ancestor'
         || this.tokenSequence() == 38568 // 'json' 'ancestor-or-self'
         || this.tokenSequence() == 39080 // 'json' 'and'
         || this.tokenSequence() == 40104 // 'json' 'append'
         || this.tokenSequence() == 40616 // 'json' 'array'
         || this.tokenSequence() == 41128 // 'json' 'as'
         || this.tokenSequence() == 41640 // 'json' 'ascending'
         || this.tokenSequence() == 42152 // 'json' 'at'
         || this.tokenSequence() == 42664 // 'json' 'attribute'
         || this.tokenSequence() == 43176 // 'json' 'base-uri'
         || this.tokenSequence() == 43688 // 'json' 'before'
         || this.tokenSequence() == 44200 // 'json' 'boundary-space'
         || this.tokenSequence() == 44712 // 'json' 'break'
         || this.tokenSequence() == 45736 // 'json' 'case'
         || this.tokenSequence() == 46248 // 'json' 'cast'
         || this.tokenSequence() == 46760 // 'json' 'castable'
         || this.tokenSequence() == 47272 // 'json' 'catch'
         || this.tokenSequence() == 48296 // 'json' 'child'
         || this.tokenSequence() == 48808 // 'json' 'collation'
         || this.tokenSequence() == 49832 // 'json' 'comment'
         || this.tokenSequence() == 50344 // 'json' 'constraint'
         || this.tokenSequence() == 50856 // 'json' 'construction'
         || this.tokenSequence() == 52392 // 'json' 'context'
         || this.tokenSequence() == 52904 // 'json' 'continue'
         || this.tokenSequence() == 53416 // 'json' 'copy'
         || this.tokenSequence() == 53928 // 'json' 'copy-namespaces'
         || this.tokenSequence() == 54440 // 'json' 'count'
         || this.tokenSequence() == 54952 // 'json' 'decimal-format'
         || this.tokenSequence() == 55976 // 'json' 'declare'
         || this.tokenSequence() == 56488 // 'json' 'default'
         || this.tokenSequence() == 57000 // 'json' 'delete'
         || this.tokenSequence() == 57512 // 'json' 'descendant'
         || this.tokenSequence() == 58024 // 'json' 'descendant-or-self'
         || this.tokenSequence() == 58536 // 'json' 'descending'
         || this.tokenSequence() == 61096 // 'json' 'div'
         || this.tokenSequence() == 61608 // 'json' 'document'
         || this.tokenSequence() == 62120 // 'json' 'document-node'
         || this.tokenSequence() == 62632 // 'json' 'element'
         || this.tokenSequence() == 63144 // 'json' 'else'
         || this.tokenSequence() == 63656 // 'json' 'empty'
         || this.tokenSequence() == 64168 // 'json' 'empty-sequence'
         || this.tokenSequence() == 64680 // 'json' 'encoding'
         || this.tokenSequence() == 65192 // 'json' 'end'
         || this.tokenSequence() == 66216 // 'json' 'eq'
         || this.tokenSequence() == 66728 // 'json' 'every'
         || this.tokenSequence() == 67752 // 'json' 'except'
         || this.tokenSequence() == 68264 // 'json' 'exit'
         || this.tokenSequence() == 68776 // 'json' 'external'
         || this.tokenSequence() == 69288 // 'json' 'false'
         || this.tokenSequence() == 69800 // 'json' 'first'
         || this.tokenSequence() == 70312 // 'json' 'following'
         || this.tokenSequence() == 70824 // 'json' 'following-sibling'
         || this.tokenSequence() == 71336 // 'json' 'for'
         || this.tokenSequence() == 72872 // 'json' 'from'
         || this.tokenSequence() == 73384 // 'json' 'ft-option'
         || this.tokenSequence() == 75432 // 'json' 'function'
         || this.tokenSequence() == 75944 // 'json' 'ge'
         || this.tokenSequence() == 76968 // 'json' 'group'
         || this.tokenSequence() == 77992 // 'json' 'gt'
         || this.tokenSequence() == 78504 // 'json' 'idiv'
         || this.tokenSequence() == 79016 // 'json' 'if'
         || this.tokenSequence() == 79528 // 'json' 'import'
         || this.tokenSequence() == 80040 // 'json' 'in'
         || this.tokenSequence() == 80552 // 'json' 'index'
         || this.tokenSequence() == 82600 // 'json' 'insert'
         || this.tokenSequence() == 83112 // 'json' 'instance'
         || this.tokenSequence() == 83624 // 'json' 'integrity'
         || this.tokenSequence() == 84136 // 'json' 'intersect'
         || this.tokenSequence() == 84648 // 'json' 'into'
         || this.tokenSequence() == 85160 // 'json' 'is'
         || this.tokenSequence() == 85672 // 'json' 'item'
         || this.tokenSequence() == 86184 // 'json' 'json'
         || this.tokenSequence() == 86696 // 'json' 'json-item'
         || this.tokenSequence() == 87208 // 'json' 'jsoniq'
         || this.tokenSequence() == 88744 // 'json' 'last'
         || this.tokenSequence() == 89256 // 'json' 'lax'
         || this.tokenSequence() == 89768 // 'json' 'le'
         || this.tokenSequence() == 90792 // 'json' 'let'
         || this.tokenSequence() == 91816 // 'json' 'loop'
         || this.tokenSequence() == 92840 // 'json' 'lt'
         || this.tokenSequence() == 93864 // 'json' 'mod'
         || this.tokenSequence() == 94376 // 'json' 'modify'
         || this.tokenSequence() == 94888 // 'json' 'module'
         || this.tokenSequence() == 95912 // 'json' 'namespace'
         || this.tokenSequence() == 96424 // 'json' 'namespace-node'
         || this.tokenSequence() == 96936 // 'json' 'ne'
         || this.tokenSequence() == 99496 // 'json' 'node'
         || this.tokenSequence() == 100008  // 'json' 'nodes'
         || this.tokenSequence() == 100520  // 'json' 'not'
         || this.tokenSequence() == 101032  // 'json' 'null'
         || this.tokenSequence() == 101544  // 'json' 'object'
         || this.tokenSequence() == 103592  // 'json' 'only'
         || this.tokenSequence() == 104104  // 'json' 'option'
         || this.tokenSequence() == 104616  // 'json' 'or'
         || this.tokenSequence() == 105128  // 'json' 'order'
         || this.tokenSequence() == 105640  // 'json' 'ordered'
         || this.tokenSequence() == 106152  // 'json' 'ordering'
         || this.tokenSequence() == 107688  // 'json' 'parent'
         || this.tokenSequence() == 110760  // 'json' 'preceding'
         || this.tokenSequence() == 111272  // 'json' 'preceding-sibling'
         || this.tokenSequence() == 112808  // 'json' 'processing-instruction'
         || this.tokenSequence() == 113832  // 'json' 'rename'
         || this.tokenSequence() == 114344  // 'json' 'replace'
         || this.tokenSequence() == 114856  // 'json' 'return'
         || this.tokenSequence() == 115368  // 'json' 'returning'
         || this.tokenSequence() == 115880  // 'json' 'revalidation'
         || this.tokenSequence() == 116904  // 'json' 'satisfies'
         || this.tokenSequence() == 117416  // 'json' 'schema'
         || this.tokenSequence() == 117928  // 'json' 'schema-attribute'
         || this.tokenSequence() == 118440  // 'json' 'schema-element'
         || this.tokenSequence() == 118952  // 'json' 'score'
         || this.tokenSequence() == 119464  // 'json' 'select'
         || this.tokenSequence() == 119976  // 'json' 'self'
         || this.tokenSequence() == 122536  // 'json' 'sliding'
         || this.tokenSequence() == 123048  // 'json' 'some'
         || this.tokenSequence() == 123560  // 'json' 'stable'
         || this.tokenSequence() == 124072  // 'json' 'start'
         || this.tokenSequence() == 125608  // 'json' 'strict'
         || this.tokenSequence() == 126632  // 'json' 'structured-item'
         || this.tokenSequence() == 127144  // 'json' 'switch'
         || this.tokenSequence() == 127656  // 'json' 'text'
         || this.tokenSequence() == 129704  // 'json' 'to'
         || this.tokenSequence() == 130216  // 'json' 'treat'
         || this.tokenSequence() == 130728  // 'json' 'true'
         || this.tokenSequence() == 131240  // 'json' 'try'
         || this.tokenSequence() == 131752  // 'json' 'tumbling'
         || this.tokenSequence() == 132264  // 'json' 'type'
         || this.tokenSequence() == 132776  // 'json' 'typeswitch'
         || this.tokenSequence() == 133288  // 'json' 'union'
         || this.tokenSequence() == 134312  // 'json' 'unordered'
         || this.tokenSequence() == 134824  // 'json' 'updating'
         || this.tokenSequence() == 136360  // 'json' 'validate'
         || this.tokenSequence() == 136872  // 'json' 'value'
         || this.tokenSequence() == 137384  // 'json' 'variable'
         || this.tokenSequence() == 137896  // 'json' 'version'
         || this.tokenSequence() == 139432  // 'json' 'where'
         || this.tokenSequence() == 139944  // 'json' 'while'
         || this.tokenSequence() == 141480  // 'json' 'with'
         || this.tokenSequence() == 144040  // 'json' '{'
         || this.tokenSequence() == 145064) // 'json' '{|'
        {
          this.consume(168);        // 'json'
        }
        this.lookahead1W(268);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_PairConstructorList();
        this.consume(165);          // 'into'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_ExprSingle();
      }
      this.eventHandler.endNonterminal("JSONInsertExpr", this.e0);
    }

    private try_JSONInsertExpr()
    {
      switch (this.token())
      {
      case 161:                     // 'insert'
        this.lookahead2W(268);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() != 9889) // 'insert' NCName^Token
      {
        this.lk = this.memoized(12, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.consumeT(161);     // 'insert'
            this.lookahead1W(267);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            switch (this.token())
            {
            case 168:               // 'json'
              this.lookahead2W(269);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                      // StringLiteral | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                      // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                      // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                      // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                      // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                      // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                      // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                      // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                      // 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                      // 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' |
                                      // 'external' | 'false' | 'first' | 'following' | 'following-sibling' | 'for' |
                                      // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                      // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                      // 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' |
                                      // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                      // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' | 'null' | 'object' |
                                      // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                      // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                      // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                      // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                      // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                      // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                      // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                      // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
              break;
            default:
              this.lk = this.l1;
            }
            if (this.tokenSequence() == 18088)  // 'json' '('
            {
              this.lk = this.memoized(13, this.e0);
              if (this.lk == 0)
              {
                var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
                var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
                var b2B = this.b2; var e2B = this.e2;
                try
                {
                  this.consumeT(168); // 'json'
                  this.memoize(13, e0B, -1);
                }
                catch (p1B)
                {
                  this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
                  this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
                  this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
                  this.memoize(13, e0B, -2);
                }
                this.lk = -2;
              }
            }
            if (this.tokenSequence() == -1
             || this.tokenSequence() == 3240  // 'json' EQName^Token
             || this.tokenSequence() == 4264  // 'json' IntegerLiteral
             || this.tokenSequence() == 4776  // 'json' DecimalLiteral
             || this.tokenSequence() == 5288  // 'json' DoubleLiteral
             || this.tokenSequence() == 5800  // 'json' StringLiteral
             || this.tokenSequence() == 16040 // 'json' '$'
             || this.tokenSequence() == 16552 // 'json' '$$'
             || this.tokenSequence() == 17064 // 'json' '%'
             || this.tokenSequence() == 18600 // 'json' '(#'
             || this.tokenSequence() == 21160 // 'json' '+'
             || this.tokenSequence() == 22184 // 'json' '-'
             || this.tokenSequence() == 24232 // 'json' '/'
             || this.tokenSequence() == 24744 // 'json' '//'
             || this.tokenSequence() == 28328 // 'json' '<'
             || this.tokenSequence() == 28840 // 'json' '<!--'
             || this.tokenSequence() == 30888 // 'json' '<?'
             || this.tokenSequence() == 35496 // 'json' '['
             || this.tokenSequence() == 36520 // 'json' 'after'
             || this.tokenSequence() == 37544 // 'json' 'allowing'
             || this.tokenSequence() == 38056 // 'json' 'ancestor'
             || this.tokenSequence() == 38568 // 'json' 'ancestor-or-self'
             || this.tokenSequence() == 39080 // 'json' 'and'
             || this.tokenSequence() == 40104 // 'json' 'append'
             || this.tokenSequence() == 40616 // 'json' 'array'
             || this.tokenSequence() == 41128 // 'json' 'as'
             || this.tokenSequence() == 41640 // 'json' 'ascending'
             || this.tokenSequence() == 42152 // 'json' 'at'
             || this.tokenSequence() == 42664 // 'json' 'attribute'
             || this.tokenSequence() == 43176 // 'json' 'base-uri'
             || this.tokenSequence() == 43688 // 'json' 'before'
             || this.tokenSequence() == 44200 // 'json' 'boundary-space'
             || this.tokenSequence() == 44712 // 'json' 'break'
             || this.tokenSequence() == 45736 // 'json' 'case'
             || this.tokenSequence() == 46248 // 'json' 'cast'
             || this.tokenSequence() == 46760 // 'json' 'castable'
             || this.tokenSequence() == 47272 // 'json' 'catch'
             || this.tokenSequence() == 48296 // 'json' 'child'
             || this.tokenSequence() == 48808 // 'json' 'collation'
             || this.tokenSequence() == 49832 // 'json' 'comment'
             || this.tokenSequence() == 50344 // 'json' 'constraint'
             || this.tokenSequence() == 50856 // 'json' 'construction'
             || this.tokenSequence() == 52392 // 'json' 'context'
             || this.tokenSequence() == 52904 // 'json' 'continue'
             || this.tokenSequence() == 53416 // 'json' 'copy'
             || this.tokenSequence() == 53928 // 'json' 'copy-namespaces'
             || this.tokenSequence() == 54440 // 'json' 'count'
             || this.tokenSequence() == 54952 // 'json' 'decimal-format'
             || this.tokenSequence() == 55976 // 'json' 'declare'
             || this.tokenSequence() == 56488 // 'json' 'default'
             || this.tokenSequence() == 57000 // 'json' 'delete'
             || this.tokenSequence() == 57512 // 'json' 'descendant'
             || this.tokenSequence() == 58024 // 'json' 'descendant-or-self'
             || this.tokenSequence() == 58536 // 'json' 'descending'
             || this.tokenSequence() == 61096 // 'json' 'div'
             || this.tokenSequence() == 61608 // 'json' 'document'
             || this.tokenSequence() == 62120 // 'json' 'document-node'
             || this.tokenSequence() == 62632 // 'json' 'element'
             || this.tokenSequence() == 63144 // 'json' 'else'
             || this.tokenSequence() == 63656 // 'json' 'empty'
             || this.tokenSequence() == 64168 // 'json' 'empty-sequence'
             || this.tokenSequence() == 64680 // 'json' 'encoding'
             || this.tokenSequence() == 65192 // 'json' 'end'
             || this.tokenSequence() == 66216 // 'json' 'eq'
             || this.tokenSequence() == 66728 // 'json' 'every'
             || this.tokenSequence() == 67752 // 'json' 'except'
             || this.tokenSequence() == 68264 // 'json' 'exit'
             || this.tokenSequence() == 68776 // 'json' 'external'
             || this.tokenSequence() == 69288 // 'json' 'false'
             || this.tokenSequence() == 69800 // 'json' 'first'
             || this.tokenSequence() == 70312 // 'json' 'following'
             || this.tokenSequence() == 70824 // 'json' 'following-sibling'
             || this.tokenSequence() == 71336 // 'json' 'for'
             || this.tokenSequence() == 72872 // 'json' 'from'
             || this.tokenSequence() == 73384 // 'json' 'ft-option'
             || this.tokenSequence() == 75432 // 'json' 'function'
             || this.tokenSequence() == 75944 // 'json' 'ge'
             || this.tokenSequence() == 76968 // 'json' 'group'
             || this.tokenSequence() == 77992 // 'json' 'gt'
             || this.tokenSequence() == 78504 // 'json' 'idiv'
             || this.tokenSequence() == 79016 // 'json' 'if'
             || this.tokenSequence() == 79528 // 'json' 'import'
             || this.tokenSequence() == 80040 // 'json' 'in'
             || this.tokenSequence() == 80552 // 'json' 'index'
             || this.tokenSequence() == 82600 // 'json' 'insert'
             || this.tokenSequence() == 83112 // 'json' 'instance'
             || this.tokenSequence() == 83624 // 'json' 'integrity'
             || this.tokenSequence() == 84136 // 'json' 'intersect'
             || this.tokenSequence() == 84648 // 'json' 'into'
             || this.tokenSequence() == 85160 // 'json' 'is'
             || this.tokenSequence() == 85672 // 'json' 'item'
             || this.tokenSequence() == 86184 // 'json' 'json'
             || this.tokenSequence() == 86696 // 'json' 'json-item'
             || this.tokenSequence() == 87208 // 'json' 'jsoniq'
             || this.tokenSequence() == 88744 // 'json' 'last'
             || this.tokenSequence() == 89256 // 'json' 'lax'
             || this.tokenSequence() == 89768 // 'json' 'le'
             || this.tokenSequence() == 90792 // 'json' 'let'
             || this.tokenSequence() == 91816 // 'json' 'loop'
             || this.tokenSequence() == 92840 // 'json' 'lt'
             || this.tokenSequence() == 93864 // 'json' 'mod'
             || this.tokenSequence() == 94376 // 'json' 'modify'
             || this.tokenSequence() == 94888 // 'json' 'module'
             || this.tokenSequence() == 95912 // 'json' 'namespace'
             || this.tokenSequence() == 96424 // 'json' 'namespace-node'
             || this.tokenSequence() == 96936 // 'json' 'ne'
             || this.tokenSequence() == 99496 // 'json' 'node'
             || this.tokenSequence() == 100008  // 'json' 'nodes'
             || this.tokenSequence() == 100520  // 'json' 'not'
             || this.tokenSequence() == 101032  // 'json' 'null'
             || this.tokenSequence() == 101544  // 'json' 'object'
             || this.tokenSequence() == 103592  // 'json' 'only'
             || this.tokenSequence() == 104104  // 'json' 'option'
             || this.tokenSequence() == 104616  // 'json' 'or'
             || this.tokenSequence() == 105128  // 'json' 'order'
             || this.tokenSequence() == 105640  // 'json' 'ordered'
             || this.tokenSequence() == 106152  // 'json' 'ordering'
             || this.tokenSequence() == 107688  // 'json' 'parent'
             || this.tokenSequence() == 110760  // 'json' 'preceding'
             || this.tokenSequence() == 111272  // 'json' 'preceding-sibling'
             || this.tokenSequence() == 112808  // 'json' 'processing-instruction'
             || this.tokenSequence() == 113832  // 'json' 'rename'
             || this.tokenSequence() == 114344  // 'json' 'replace'
             || this.tokenSequence() == 114856  // 'json' 'return'
             || this.tokenSequence() == 115368  // 'json' 'returning'
             || this.tokenSequence() == 115880  // 'json' 'revalidation'
             || this.tokenSequence() == 116904  // 'json' 'satisfies'
             || this.tokenSequence() == 117416  // 'json' 'schema'
             || this.tokenSequence() == 117928  // 'json' 'schema-attribute'
             || this.tokenSequence() == 118440  // 'json' 'schema-element'
             || this.tokenSequence() == 118952  // 'json' 'score'
             || this.tokenSequence() == 119464  // 'json' 'select'
             || this.tokenSequence() == 119976  // 'json' 'self'
             || this.tokenSequence() == 122536  // 'json' 'sliding'
             || this.tokenSequence() == 123048  // 'json' 'some'
             || this.tokenSequence() == 123560  // 'json' 'stable'
             || this.tokenSequence() == 124072  // 'json' 'start'
             || this.tokenSequence() == 125608  // 'json' 'strict'
             || this.tokenSequence() == 126632  // 'json' 'structured-item'
             || this.tokenSequence() == 127144  // 'json' 'switch'
             || this.tokenSequence() == 127656  // 'json' 'text'
             || this.tokenSequence() == 129704  // 'json' 'to'
             || this.tokenSequence() == 130216  // 'json' 'treat'
             || this.tokenSequence() == 130728  // 'json' 'true'
             || this.tokenSequence() == 131240  // 'json' 'try'
             || this.tokenSequence() == 131752  // 'json' 'tumbling'
             || this.tokenSequence() == 132264  // 'json' 'type'
             || this.tokenSequence() == 132776  // 'json' 'typeswitch'
             || this.tokenSequence() == 133288  // 'json' 'union'
             || this.tokenSequence() == 134312  // 'json' 'unordered'
             || this.tokenSequence() == 134824  // 'json' 'updating'
             || this.tokenSequence() == 136360  // 'json' 'validate'
             || this.tokenSequence() == 136872  // 'json' 'value'
             || this.tokenSequence() == 137384  // 'json' 'variable'
             || this.tokenSequence() == 137896  // 'json' 'version'
             || this.tokenSequence() == 139432  // 'json' 'where'
             || this.tokenSequence() == 139944  // 'json' 'while'
             || this.tokenSequence() == 141480  // 'json' 'with'
             || this.tokenSequence() == 144040  // 'json' '{'
             || this.tokenSequence() == 145064) // 'json' '{|'
            {
              this.consumeT(168);   // 'json'
            }
            this.lookahead1W(267);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            this.try_ExprSingle();
            this.consumeT(165);     // 'into'
            this.lookahead1W(267);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            this.try_ExprSingle();
            switch (this.token())
            {
            case 82:                // 'at'
              this.lookahead2W(72); // S^WS | '(:' | 'position'
              break;
            default:
              this.lk = this.l1;
            }
            if (this.tokenSequence() == 110162) // 'at' 'position'
            {
              this.lk = this.memoized(14, this.e0);
              if (this.lk == 0)
              {
                var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
                var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
                var b2B = this.b2; var e2B = this.e2;
                try
                {
                  this.consumeT(82);  // 'at'
                  this.lookahead1W(72); // S^WS | '(:' | 'position'
                  this.consumeT(215); // 'position'
                  this.lookahead1W(267);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                          // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                          // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' |
                                          // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                          // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                          // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                          // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                          // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                          // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                          // 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                          // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                          // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                          // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                          // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                          // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                          // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' |
                                          // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                          // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                          // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                          // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                          // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                          // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' |
                                          // 'schema-element' | 'score' | 'select' | 'self' | 'sliding' | 'some' |
                                          // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                          // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                          // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                          // 'version' | 'where' | 'while' | 'with' | '{' | '{|'
                  this.try_ExprSingle();
                  this.memoize(14, e0B, -1);
                }
                catch (p1B)
                {
                  this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
                  this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
                  this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
                  this.memoize(14, e0B, -2);
                }
                this.lk = -2;
              }
            }
            if (this.tokenSequence() == -1)
            {
              this.consumeT(82);    // 'at'
              this.lookahead1W(72); // S^WS | '(:' | 'position'
              this.consumeT(215);   // 'position'
              this.lookahead1W(267);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                      // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                      // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                      // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                      // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                      // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                      // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                      // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                      // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                      // 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                      // 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' |
                                      // 'external' | 'false' | 'first' | 'following' | 'following-sibling' | 'for' |
                                      // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                      // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                      // 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' |
                                      // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                      // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' | 'null' | 'object' |
                                      // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                      // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                      // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                      // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                      // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                      // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                      // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                      // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
              this.try_ExprSingle();
            }
            this.memoize(12, e0A, -1);
            this.lk = -3;
          }
          catch (p1A)
          {
            this.lk = -2;
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(12, e0A, -2);
          }
        }
      }
      switch (this.tokenSequence())
      {
      case -1:
        this.consumeT(161);         // 'insert'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        switch (this.token())
        {
        case 168:                   // 'json'
          this.lookahead2W(269);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.tokenSequence() == 18088)  // 'json' '('
        {
          this.lk = this.memoized(13, this.e0);
          if (this.lk == 0)
          {
            var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
            var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
            var b2B = this.b2; var e2B = this.e2;
            try
            {
              this.consumeT(168);   // 'json'
              this.memoize(13, e0B, -1);
            }
            catch (p1B)
            {
              this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
              this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
              this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
              this.memoize(13, e0B, -2);
            }
            this.lk = -2;
          }
        }
        if (this.tokenSequence() == -1
         || this.tokenSequence() == 3240  // 'json' EQName^Token
         || this.tokenSequence() == 4264  // 'json' IntegerLiteral
         || this.tokenSequence() == 4776  // 'json' DecimalLiteral
         || this.tokenSequence() == 5288  // 'json' DoubleLiteral
         || this.tokenSequence() == 5800  // 'json' StringLiteral
         || this.tokenSequence() == 16040 // 'json' '$'
         || this.tokenSequence() == 16552 // 'json' '$$'
         || this.tokenSequence() == 17064 // 'json' '%'
         || this.tokenSequence() == 18600 // 'json' '(#'
         || this.tokenSequence() == 21160 // 'json' '+'
         || this.tokenSequence() == 22184 // 'json' '-'
         || this.tokenSequence() == 24232 // 'json' '/'
         || this.tokenSequence() == 24744 // 'json' '//'
         || this.tokenSequence() == 28328 // 'json' '<'
         || this.tokenSequence() == 28840 // 'json' '<!--'
         || this.tokenSequence() == 30888 // 'json' '<?'
         || this.tokenSequence() == 35496 // 'json' '['
         || this.tokenSequence() == 36520 // 'json' 'after'
         || this.tokenSequence() == 37544 // 'json' 'allowing'
         || this.tokenSequence() == 38056 // 'json' 'ancestor'
         || this.tokenSequence() == 38568 // 'json' 'ancestor-or-self'
         || this.tokenSequence() == 39080 // 'json' 'and'
         || this.tokenSequence() == 40104 // 'json' 'append'
         || this.tokenSequence() == 40616 // 'json' 'array'
         || this.tokenSequence() == 41128 // 'json' 'as'
         || this.tokenSequence() == 41640 // 'json' 'ascending'
         || this.tokenSequence() == 42152 // 'json' 'at'
         || this.tokenSequence() == 42664 // 'json' 'attribute'
         || this.tokenSequence() == 43176 // 'json' 'base-uri'
         || this.tokenSequence() == 43688 // 'json' 'before'
         || this.tokenSequence() == 44200 // 'json' 'boundary-space'
         || this.tokenSequence() == 44712 // 'json' 'break'
         || this.tokenSequence() == 45736 // 'json' 'case'
         || this.tokenSequence() == 46248 // 'json' 'cast'
         || this.tokenSequence() == 46760 // 'json' 'castable'
         || this.tokenSequence() == 47272 // 'json' 'catch'
         || this.tokenSequence() == 48296 // 'json' 'child'
         || this.tokenSequence() == 48808 // 'json' 'collation'
         || this.tokenSequence() == 49832 // 'json' 'comment'
         || this.tokenSequence() == 50344 // 'json' 'constraint'
         || this.tokenSequence() == 50856 // 'json' 'construction'
         || this.tokenSequence() == 52392 // 'json' 'context'
         || this.tokenSequence() == 52904 // 'json' 'continue'
         || this.tokenSequence() == 53416 // 'json' 'copy'
         || this.tokenSequence() == 53928 // 'json' 'copy-namespaces'
         || this.tokenSequence() == 54440 // 'json' 'count'
         || this.tokenSequence() == 54952 // 'json' 'decimal-format'
         || this.tokenSequence() == 55976 // 'json' 'declare'
         || this.tokenSequence() == 56488 // 'json' 'default'
         || this.tokenSequence() == 57000 // 'json' 'delete'
         || this.tokenSequence() == 57512 // 'json' 'descendant'
         || this.tokenSequence() == 58024 // 'json' 'descendant-or-self'
         || this.tokenSequence() == 58536 // 'json' 'descending'
         || this.tokenSequence() == 61096 // 'json' 'div'
         || this.tokenSequence() == 61608 // 'json' 'document'
         || this.tokenSequence() == 62120 // 'json' 'document-node'
         || this.tokenSequence() == 62632 // 'json' 'element'
         || this.tokenSequence() == 63144 // 'json' 'else'
         || this.tokenSequence() == 63656 // 'json' 'empty'
         || this.tokenSequence() == 64168 // 'json' 'empty-sequence'
         || this.tokenSequence() == 64680 // 'json' 'encoding'
         || this.tokenSequence() == 65192 // 'json' 'end'
         || this.tokenSequence() == 66216 // 'json' 'eq'
         || this.tokenSequence() == 66728 // 'json' 'every'
         || this.tokenSequence() == 67752 // 'json' 'except'
         || this.tokenSequence() == 68264 // 'json' 'exit'
         || this.tokenSequence() == 68776 // 'json' 'external'
         || this.tokenSequence() == 69288 // 'json' 'false'
         || this.tokenSequence() == 69800 // 'json' 'first'
         || this.tokenSequence() == 70312 // 'json' 'following'
         || this.tokenSequence() == 70824 // 'json' 'following-sibling'
         || this.tokenSequence() == 71336 // 'json' 'for'
         || this.tokenSequence() == 72872 // 'json' 'from'
         || this.tokenSequence() == 73384 // 'json' 'ft-option'
         || this.tokenSequence() == 75432 // 'json' 'function'
         || this.tokenSequence() == 75944 // 'json' 'ge'
         || this.tokenSequence() == 76968 // 'json' 'group'
         || this.tokenSequence() == 77992 // 'json' 'gt'
         || this.tokenSequence() == 78504 // 'json' 'idiv'
         || this.tokenSequence() == 79016 // 'json' 'if'
         || this.tokenSequence() == 79528 // 'json' 'import'
         || this.tokenSequence() == 80040 // 'json' 'in'
         || this.tokenSequence() == 80552 // 'json' 'index'
         || this.tokenSequence() == 82600 // 'json' 'insert'
         || this.tokenSequence() == 83112 // 'json' 'instance'
         || this.tokenSequence() == 83624 // 'json' 'integrity'
         || this.tokenSequence() == 84136 // 'json' 'intersect'
         || this.tokenSequence() == 84648 // 'json' 'into'
         || this.tokenSequence() == 85160 // 'json' 'is'
         || this.tokenSequence() == 85672 // 'json' 'item'
         || this.tokenSequence() == 86184 // 'json' 'json'
         || this.tokenSequence() == 86696 // 'json' 'json-item'
         || this.tokenSequence() == 87208 // 'json' 'jsoniq'
         || this.tokenSequence() == 88744 // 'json' 'last'
         || this.tokenSequence() == 89256 // 'json' 'lax'
         || this.tokenSequence() == 89768 // 'json' 'le'
         || this.tokenSequence() == 90792 // 'json' 'let'
         || this.tokenSequence() == 91816 // 'json' 'loop'
         || this.tokenSequence() == 92840 // 'json' 'lt'
         || this.tokenSequence() == 93864 // 'json' 'mod'
         || this.tokenSequence() == 94376 // 'json' 'modify'
         || this.tokenSequence() == 94888 // 'json' 'module'
         || this.tokenSequence() == 95912 // 'json' 'namespace'
         || this.tokenSequence() == 96424 // 'json' 'namespace-node'
         || this.tokenSequence() == 96936 // 'json' 'ne'
         || this.tokenSequence() == 99496 // 'json' 'node'
         || this.tokenSequence() == 100008  // 'json' 'nodes'
         || this.tokenSequence() == 100520  // 'json' 'not'
         || this.tokenSequence() == 101032  // 'json' 'null'
         || this.tokenSequence() == 101544  // 'json' 'object'
         || this.tokenSequence() == 103592  // 'json' 'only'
         || this.tokenSequence() == 104104  // 'json' 'option'
         || this.tokenSequence() == 104616  // 'json' 'or'
         || this.tokenSequence() == 105128  // 'json' 'order'
         || this.tokenSequence() == 105640  // 'json' 'ordered'
         || this.tokenSequence() == 106152  // 'json' 'ordering'
         || this.tokenSequence() == 107688  // 'json' 'parent'
         || this.tokenSequence() == 110760  // 'json' 'preceding'
         || this.tokenSequence() == 111272  // 'json' 'preceding-sibling'
         || this.tokenSequence() == 112808  // 'json' 'processing-instruction'
         || this.tokenSequence() == 113832  // 'json' 'rename'
         || this.tokenSequence() == 114344  // 'json' 'replace'
         || this.tokenSequence() == 114856  // 'json' 'return'
         || this.tokenSequence() == 115368  // 'json' 'returning'
         || this.tokenSequence() == 115880  // 'json' 'revalidation'
         || this.tokenSequence() == 116904  // 'json' 'satisfies'
         || this.tokenSequence() == 117416  // 'json' 'schema'
         || this.tokenSequence() == 117928  // 'json' 'schema-attribute'
         || this.tokenSequence() == 118440  // 'json' 'schema-element'
         || this.tokenSequence() == 118952  // 'json' 'score'
         || this.tokenSequence() == 119464  // 'json' 'select'
         || this.tokenSequence() == 119976  // 'json' 'self'
         || this.tokenSequence() == 122536  // 'json' 'sliding'
         || this.tokenSequence() == 123048  // 'json' 'some'
         || this.tokenSequence() == 123560  // 'json' 'stable'
         || this.tokenSequence() == 124072  // 'json' 'start'
         || this.tokenSequence() == 125608  // 'json' 'strict'
         || this.tokenSequence() == 126632  // 'json' 'structured-item'
         || this.tokenSequence() == 127144  // 'json' 'switch'
         || this.tokenSequence() == 127656  // 'json' 'text'
         || this.tokenSequence() == 129704  // 'json' 'to'
         || this.tokenSequence() == 130216  // 'json' 'treat'
         || this.tokenSequence() == 130728  // 'json' 'true'
         || this.tokenSequence() == 131240  // 'json' 'try'
         || this.tokenSequence() == 131752  // 'json' 'tumbling'
         || this.tokenSequence() == 132264  // 'json' 'type'
         || this.tokenSequence() == 132776  // 'json' 'typeswitch'
         || this.tokenSequence() == 133288  // 'json' 'union'
         || this.tokenSequence() == 134312  // 'json' 'unordered'
         || this.tokenSequence() == 134824  // 'json' 'updating'
         || this.tokenSequence() == 136360  // 'json' 'validate'
         || this.tokenSequence() == 136872  // 'json' 'value'
         || this.tokenSequence() == 137384  // 'json' 'variable'
         || this.tokenSequence() == 137896  // 'json' 'version'
         || this.tokenSequence() == 139432  // 'json' 'where'
         || this.tokenSequence() == 139944  // 'json' 'while'
         || this.tokenSequence() == 141480  // 'json' 'with'
         || this.tokenSequence() == 144040  // 'json' '{'
         || this.tokenSequence() == 145064) // 'json' '{|'
        {
          this.consumeT(168);       // 'json'
        }
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_ExprSingle();
        this.consumeT(165);         // 'into'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_ExprSingle();
        switch (this.token())
        {
        case 82:                    // 'at'
          this.lookahead2W(72);     // S^WS | '(:' | 'position'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.tokenSequence() == 110162) // 'at' 'position'
        {
          this.lk = this.memoized(14, this.e0);
          if (this.lk == 0)
          {
            var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
            var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
            var b2B = this.b2; var e2B = this.e2;
            try
            {
              this.consumeT(82);    // 'at'
              this.lookahead1W(72); // S^WS | '(:' | 'position'
              this.consumeT(215);   // 'position'
              this.lookahead1W(267);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                      // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                      // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                      // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                      // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                      // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                      // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                      // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                      // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                      // 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                      // 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' |
                                      // 'external' | 'false' | 'first' | 'following' | 'following-sibling' | 'for' |
                                      // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                      // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                      // 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' |
                                      // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                      // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' | 'null' | 'object' |
                                      // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                      // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                      // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                      // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                      // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                      // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                      // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                      // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
              this.try_ExprSingle();
              this.memoize(14, e0B, -1);
            }
            catch (p1B)
            {
              this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
              this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
              this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
              this.memoize(14, e0B, -2);
            }
            this.lk = -2;
          }
        }
        if (this.tokenSequence() == -1)
        {
          this.consumeT(82);        // 'at'
          this.lookahead1W(72);     // S^WS | '(:' | 'position'
          this.consumeT(215);       // 'position'
          this.lookahead1W(267);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          this.try_ExprSingle();
        }
        break;
      case -3:
        break;
      default:
        this.consumeT(161);         // 'insert'
        this.lookahead1W(268);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        switch (this.token())
        {
        case 168:                   // 'json'
          this.lookahead2W(282);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.tokenSequence() == 18088)  // 'json' '('
        {
          this.lk = this.memoized(15, this.e0);
          if (this.lk == 0)
          {
            var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
            var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
            var b2B = this.b2; var e2B = this.e2;
            try
            {
              this.consumeT(168);   // 'json'
              this.memoize(15, e0B, -1);
            }
            catch (p1B)
            {
              this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
              this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
              this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
              this.memoize(15, e0B, -2);
            }
            this.lk = -2;
          }
        }
        if (this.tokenSequence() == -1
         || this.tokenSequence() == 3240  // 'json' EQName^Token
         || this.tokenSequence() == 4264  // 'json' IntegerLiteral
         || this.tokenSequence() == 4776  // 'json' DecimalLiteral
         || this.tokenSequence() == 5288  // 'json' DoubleLiteral
         || this.tokenSequence() == 5800  // 'json' StringLiteral
         || this.tokenSequence() == 9896  // 'json' NCName^Token
         || this.tokenSequence() == 16040 // 'json' '$'
         || this.tokenSequence() == 16552 // 'json' '$$'
         || this.tokenSequence() == 17064 // 'json' '%'
         || this.tokenSequence() == 18600 // 'json' '(#'
         || this.tokenSequence() == 21160 // 'json' '+'
         || this.tokenSequence() == 22184 // 'json' '-'
         || this.tokenSequence() == 24232 // 'json' '/'
         || this.tokenSequence() == 24744 // 'json' '//'
         || this.tokenSequence() == 28328 // 'json' '<'
         || this.tokenSequence() == 28840 // 'json' '<!--'
         || this.tokenSequence() == 30888 // 'json' '<?'
         || this.tokenSequence() == 35496 // 'json' '['
         || this.tokenSequence() == 36520 // 'json' 'after'
         || this.tokenSequence() == 37544 // 'json' 'allowing'
         || this.tokenSequence() == 38056 // 'json' 'ancestor'
         || this.tokenSequence() == 38568 // 'json' 'ancestor-or-self'
         || this.tokenSequence() == 39080 // 'json' 'and'
         || this.tokenSequence() == 40104 // 'json' 'append'
         || this.tokenSequence() == 40616 // 'json' 'array'
         || this.tokenSequence() == 41128 // 'json' 'as'
         || this.tokenSequence() == 41640 // 'json' 'ascending'
         || this.tokenSequence() == 42152 // 'json' 'at'
         || this.tokenSequence() == 42664 // 'json' 'attribute'
         || this.tokenSequence() == 43176 // 'json' 'base-uri'
         || this.tokenSequence() == 43688 // 'json' 'before'
         || this.tokenSequence() == 44200 // 'json' 'boundary-space'
         || this.tokenSequence() == 44712 // 'json' 'break'
         || this.tokenSequence() == 45736 // 'json' 'case'
         || this.tokenSequence() == 46248 // 'json' 'cast'
         || this.tokenSequence() == 46760 // 'json' 'castable'
         || this.tokenSequence() == 47272 // 'json' 'catch'
         || this.tokenSequence() == 48296 // 'json' 'child'
         || this.tokenSequence() == 48808 // 'json' 'collation'
         || this.tokenSequence() == 49832 // 'json' 'comment'
         || this.tokenSequence() == 50344 // 'json' 'constraint'
         || this.tokenSequence() == 50856 // 'json' 'construction'
         || this.tokenSequence() == 52392 // 'json' 'context'
         || this.tokenSequence() == 52904 // 'json' 'continue'
         || this.tokenSequence() == 53416 // 'json' 'copy'
         || this.tokenSequence() == 53928 // 'json' 'copy-namespaces'
         || this.tokenSequence() == 54440 // 'json' 'count'
         || this.tokenSequence() == 54952 // 'json' 'decimal-format'
         || this.tokenSequence() == 55976 // 'json' 'declare'
         || this.tokenSequence() == 56488 // 'json' 'default'
         || this.tokenSequence() == 57000 // 'json' 'delete'
         || this.tokenSequence() == 57512 // 'json' 'descendant'
         || this.tokenSequence() == 58024 // 'json' 'descendant-or-self'
         || this.tokenSequence() == 58536 // 'json' 'descending'
         || this.tokenSequence() == 61096 // 'json' 'div'
         || this.tokenSequence() == 61608 // 'json' 'document'
         || this.tokenSequence() == 62120 // 'json' 'document-node'
         || this.tokenSequence() == 62632 // 'json' 'element'
         || this.tokenSequence() == 63144 // 'json' 'else'
         || this.tokenSequence() == 63656 // 'json' 'empty'
         || this.tokenSequence() == 64168 // 'json' 'empty-sequence'
         || this.tokenSequence() == 64680 // 'json' 'encoding'
         || this.tokenSequence() == 65192 // 'json' 'end'
         || this.tokenSequence() == 66216 // 'json' 'eq'
         || this.tokenSequence() == 66728 // 'json' 'every'
         || this.tokenSequence() == 67752 // 'json' 'except'
         || this.tokenSequence() == 68264 // 'json' 'exit'
         || this.tokenSequence() == 68776 // 'json' 'external'
         || this.tokenSequence() == 69288 // 'json' 'false'
         || this.tokenSequence() == 69800 // 'json' 'first'
         || this.tokenSequence() == 70312 // 'json' 'following'
         || this.tokenSequence() == 70824 // 'json' 'following-sibling'
         || this.tokenSequence() == 71336 // 'json' 'for'
         || this.tokenSequence() == 72872 // 'json' 'from'
         || this.tokenSequence() == 73384 // 'json' 'ft-option'
         || this.tokenSequence() == 75432 // 'json' 'function'
         || this.tokenSequence() == 75944 // 'json' 'ge'
         || this.tokenSequence() == 76968 // 'json' 'group'
         || this.tokenSequence() == 77992 // 'json' 'gt'
         || this.tokenSequence() == 78504 // 'json' 'idiv'
         || this.tokenSequence() == 79016 // 'json' 'if'
         || this.tokenSequence() == 79528 // 'json' 'import'
         || this.tokenSequence() == 80040 // 'json' 'in'
         || this.tokenSequence() == 80552 // 'json' 'index'
         || this.tokenSequence() == 82600 // 'json' 'insert'
         || this.tokenSequence() == 83112 // 'json' 'instance'
         || this.tokenSequence() == 83624 // 'json' 'integrity'
         || this.tokenSequence() == 84136 // 'json' 'intersect'
         || this.tokenSequence() == 84648 // 'json' 'into'
         || this.tokenSequence() == 85160 // 'json' 'is'
         || this.tokenSequence() == 85672 // 'json' 'item'
         || this.tokenSequence() == 86184 // 'json' 'json'
         || this.tokenSequence() == 86696 // 'json' 'json-item'
         || this.tokenSequence() == 87208 // 'json' 'jsoniq'
         || this.tokenSequence() == 88744 // 'json' 'last'
         || this.tokenSequence() == 89256 // 'json' 'lax'
         || this.tokenSequence() == 89768 // 'json' 'le'
         || this.tokenSequence() == 90792 // 'json' 'let'
         || this.tokenSequence() == 91816 // 'json' 'loop'
         || this.tokenSequence() == 92840 // 'json' 'lt'
         || this.tokenSequence() == 93864 // 'json' 'mod'
         || this.tokenSequence() == 94376 // 'json' 'modify'
         || this.tokenSequence() == 94888 // 'json' 'module'
         || this.tokenSequence() == 95912 // 'json' 'namespace'
         || this.tokenSequence() == 96424 // 'json' 'namespace-node'
         || this.tokenSequence() == 96936 // 'json' 'ne'
         || this.tokenSequence() == 99496 // 'json' 'node'
         || this.tokenSequence() == 100008  // 'json' 'nodes'
         || this.tokenSequence() == 100520  // 'json' 'not'
         || this.tokenSequence() == 101032  // 'json' 'null'
         || this.tokenSequence() == 101544  // 'json' 'object'
         || this.tokenSequence() == 103592  // 'json' 'only'
         || this.tokenSequence() == 104104  // 'json' 'option'
         || this.tokenSequence() == 104616  // 'json' 'or'
         || this.tokenSequence() == 105128  // 'json' 'order'
         || this.tokenSequence() == 105640  // 'json' 'ordered'
         || this.tokenSequence() == 106152  // 'json' 'ordering'
         || this.tokenSequence() == 107688  // 'json' 'parent'
         || this.tokenSequence() == 110760  // 'json' 'preceding'
         || this.tokenSequence() == 111272  // 'json' 'preceding-sibling'
         || this.tokenSequence() == 112808  // 'json' 'processing-instruction'
         || this.tokenSequence() == 113832  // 'json' 'rename'
         || this.tokenSequence() == 114344  // 'json' 'replace'
         || this.tokenSequence() == 114856  // 'json' 'return'
         || this.tokenSequence() == 115368  // 'json' 'returning'
         || this.tokenSequence() == 115880  // 'json' 'revalidation'
         || this.tokenSequence() == 116904  // 'json' 'satisfies'
         || this.tokenSequence() == 117416  // 'json' 'schema'
         || this.tokenSequence() == 117928  // 'json' 'schema-attribute'
         || this.tokenSequence() == 118440  // 'json' 'schema-element'
         || this.tokenSequence() == 118952  // 'json' 'score'
         || this.tokenSequence() == 119464  // 'json' 'select'
         || this.tokenSequence() == 119976  // 'json' 'self'
         || this.tokenSequence() == 122536  // 'json' 'sliding'
         || this.tokenSequence() == 123048  // 'json' 'some'
         || this.tokenSequence() == 123560  // 'json' 'stable'
         || this.tokenSequence() == 124072  // 'json' 'start'
         || this.tokenSequence() == 125608  // 'json' 'strict'
         || this.tokenSequence() == 126632  // 'json' 'structured-item'
         || this.tokenSequence() == 127144  // 'json' 'switch'
         || this.tokenSequence() == 127656  // 'json' 'text'
         || this.tokenSequence() == 129704  // 'json' 'to'
         || this.tokenSequence() == 130216  // 'json' 'treat'
         || this.tokenSequence() == 130728  // 'json' 'true'
         || this.tokenSequence() == 131240  // 'json' 'try'
         || this.tokenSequence() == 131752  // 'json' 'tumbling'
         || this.tokenSequence() == 132264  // 'json' 'type'
         || this.tokenSequence() == 132776  // 'json' 'typeswitch'
         || this.tokenSequence() == 133288  // 'json' 'union'
         || this.tokenSequence() == 134312  // 'json' 'unordered'
         || this.tokenSequence() == 134824  // 'json' 'updating'
         || this.tokenSequence() == 136360  // 'json' 'validate'
         || this.tokenSequence() == 136872  // 'json' 'value'
         || this.tokenSequence() == 137384  // 'json' 'variable'
         || this.tokenSequence() == 137896  // 'json' 'version'
         || this.tokenSequence() == 139432  // 'json' 'where'
         || this.tokenSequence() == 139944  // 'json' 'while'
         || this.tokenSequence() == 141480  // 'json' 'with'
         || this.tokenSequence() == 144040  // 'json' '{'
         || this.tokenSequence() == 145064) // 'json' '{|'
        {
          this.consumeT(168);       // 'json'
        }
        this.lookahead1W(268);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_PairConstructorList();
        this.consumeT(165);         // 'into'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_ExprSingle();
      }
    }

    private parse_JSONRenameExpr()
    {
      this.eventHandler.startNonterminal("JSONRenameExpr", this.e0);
      this.consume(222);            // 'rename'
      this.lookahead1W(260);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      switch (this.token())
      {
      case 168:                     // 'json'
        this.lookahead2W(261);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 18088)  // 'json' '('
      {
        this.lk = this.memoized(16, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.consumeT(168);     // 'json'
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(16, this.e0, this.lk);
        }
      }
      if (this.tokenSequence() == -1
       || this.tokenSequence() == 3240  // 'json' EQName^Token
       || this.tokenSequence() == 4264  // 'json' IntegerLiteral
       || this.tokenSequence() == 4776  // 'json' DecimalLiteral
       || this.tokenSequence() == 5288  // 'json' DoubleLiteral
       || this.tokenSequence() == 5800  // 'json' StringLiteral
       || this.tokenSequence() == 16040 // 'json' '$'
       || this.tokenSequence() == 16552 // 'json' '$$'
       || this.tokenSequence() == 17064 // 'json' '%'
       || this.tokenSequence() == 28328 // 'json' '<'
       || this.tokenSequence() == 28840 // 'json' '<!--'
       || this.tokenSequence() == 30888 // 'json' '<?'
       || this.tokenSequence() == 35496 // 'json' '['
       || this.tokenSequence() == 36520 // 'json' 'after'
       || this.tokenSequence() == 37544 // 'json' 'allowing'
       || this.tokenSequence() == 38056 // 'json' 'ancestor'
       || this.tokenSequence() == 38568 // 'json' 'ancestor-or-self'
       || this.tokenSequence() == 39080 // 'json' 'and'
       || this.tokenSequence() == 40104 // 'json' 'append'
       || this.tokenSequence() == 40616 // 'json' 'array'
       || this.tokenSequence() == 41128 // 'json' 'as'
       || this.tokenSequence() == 41640 // 'json' 'ascending'
       || this.tokenSequence() == 42152 // 'json' 'at'
       || this.tokenSequence() == 42664 // 'json' 'attribute'
       || this.tokenSequence() == 43176 // 'json' 'base-uri'
       || this.tokenSequence() == 43688 // 'json' 'before'
       || this.tokenSequence() == 44200 // 'json' 'boundary-space'
       || this.tokenSequence() == 44712 // 'json' 'break'
       || this.tokenSequence() == 45736 // 'json' 'case'
       || this.tokenSequence() == 46248 // 'json' 'cast'
       || this.tokenSequence() == 46760 // 'json' 'castable'
       || this.tokenSequence() == 47272 // 'json' 'catch'
       || this.tokenSequence() == 48296 // 'json' 'child'
       || this.tokenSequence() == 48808 // 'json' 'collation'
       || this.tokenSequence() == 49832 // 'json' 'comment'
       || this.tokenSequence() == 50344 // 'json' 'constraint'
       || this.tokenSequence() == 50856 // 'json' 'construction'
       || this.tokenSequence() == 52392 // 'json' 'context'
       || this.tokenSequence() == 52904 // 'json' 'continue'
       || this.tokenSequence() == 53416 // 'json' 'copy'
       || this.tokenSequence() == 53928 // 'json' 'copy-namespaces'
       || this.tokenSequence() == 54440 // 'json' 'count'
       || this.tokenSequence() == 54952 // 'json' 'decimal-format'
       || this.tokenSequence() == 55976 // 'json' 'declare'
       || this.tokenSequence() == 56488 // 'json' 'default'
       || this.tokenSequence() == 57000 // 'json' 'delete'
       || this.tokenSequence() == 57512 // 'json' 'descendant'
       || this.tokenSequence() == 58024 // 'json' 'descendant-or-self'
       || this.tokenSequence() == 58536 // 'json' 'descending'
       || this.tokenSequence() == 61096 // 'json' 'div'
       || this.tokenSequence() == 61608 // 'json' 'document'
       || this.tokenSequence() == 62120 // 'json' 'document-node'
       || this.tokenSequence() == 62632 // 'json' 'element'
       || this.tokenSequence() == 63144 // 'json' 'else'
       || this.tokenSequence() == 63656 // 'json' 'empty'
       || this.tokenSequence() == 64168 // 'json' 'empty-sequence'
       || this.tokenSequence() == 64680 // 'json' 'encoding'
       || this.tokenSequence() == 65192 // 'json' 'end'
       || this.tokenSequence() == 66216 // 'json' 'eq'
       || this.tokenSequence() == 66728 // 'json' 'every'
       || this.tokenSequence() == 67752 // 'json' 'except'
       || this.tokenSequence() == 68264 // 'json' 'exit'
       || this.tokenSequence() == 68776 // 'json' 'external'
       || this.tokenSequence() == 69288 // 'json' 'false'
       || this.tokenSequence() == 69800 // 'json' 'first'
       || this.tokenSequence() == 70312 // 'json' 'following'
       || this.tokenSequence() == 70824 // 'json' 'following-sibling'
       || this.tokenSequence() == 71336 // 'json' 'for'
       || this.tokenSequence() == 72872 // 'json' 'from'
       || this.tokenSequence() == 73384 // 'json' 'ft-option'
       || this.tokenSequence() == 75432 // 'json' 'function'
       || this.tokenSequence() == 75944 // 'json' 'ge'
       || this.tokenSequence() == 76968 // 'json' 'group'
       || this.tokenSequence() == 77992 // 'json' 'gt'
       || this.tokenSequence() == 78504 // 'json' 'idiv'
       || this.tokenSequence() == 79016 // 'json' 'if'
       || this.tokenSequence() == 79528 // 'json' 'import'
       || this.tokenSequence() == 80040 // 'json' 'in'
       || this.tokenSequence() == 80552 // 'json' 'index'
       || this.tokenSequence() == 82600 // 'json' 'insert'
       || this.tokenSequence() == 83112 // 'json' 'instance'
       || this.tokenSequence() == 83624 // 'json' 'integrity'
       || this.tokenSequence() == 84136 // 'json' 'intersect'
       || this.tokenSequence() == 84648 // 'json' 'into'
       || this.tokenSequence() == 85160 // 'json' 'is'
       || this.tokenSequence() == 85672 // 'json' 'item'
       || this.tokenSequence() == 86184 // 'json' 'json'
       || this.tokenSequence() == 86696 // 'json' 'json-item'
       || this.tokenSequence() == 87208 // 'json' 'jsoniq'
       || this.tokenSequence() == 88744 // 'json' 'last'
       || this.tokenSequence() == 89256 // 'json' 'lax'
       || this.tokenSequence() == 89768 // 'json' 'le'
       || this.tokenSequence() == 90792 // 'json' 'let'
       || this.tokenSequence() == 91816 // 'json' 'loop'
       || this.tokenSequence() == 92840 // 'json' 'lt'
       || this.tokenSequence() == 93864 // 'json' 'mod'
       || this.tokenSequence() == 94376 // 'json' 'modify'
       || this.tokenSequence() == 94888 // 'json' 'module'
       || this.tokenSequence() == 95912 // 'json' 'namespace'
       || this.tokenSequence() == 96424 // 'json' 'namespace-node'
       || this.tokenSequence() == 96936 // 'json' 'ne'
       || this.tokenSequence() == 99496 // 'json' 'node'
       || this.tokenSequence() == 100008  // 'json' 'nodes'
       || this.tokenSequence() == 101032  // 'json' 'null'
       || this.tokenSequence() == 101544  // 'json' 'object'
       || this.tokenSequence() == 103592  // 'json' 'only'
       || this.tokenSequence() == 104104  // 'json' 'option'
       || this.tokenSequence() == 104616  // 'json' 'or'
       || this.tokenSequence() == 105128  // 'json' 'order'
       || this.tokenSequence() == 105640  // 'json' 'ordered'
       || this.tokenSequence() == 106152  // 'json' 'ordering'
       || this.tokenSequence() == 107688  // 'json' 'parent'
       || this.tokenSequence() == 110760  // 'json' 'preceding'
       || this.tokenSequence() == 111272  // 'json' 'preceding-sibling'
       || this.tokenSequence() == 112808  // 'json' 'processing-instruction'
       || this.tokenSequence() == 113832  // 'json' 'rename'
       || this.tokenSequence() == 114344  // 'json' 'replace'
       || this.tokenSequence() == 114856  // 'json' 'return'
       || this.tokenSequence() == 115368  // 'json' 'returning'
       || this.tokenSequence() == 115880  // 'json' 'revalidation'
       || this.tokenSequence() == 116904  // 'json' 'satisfies'
       || this.tokenSequence() == 117416  // 'json' 'schema'
       || this.tokenSequence() == 117928  // 'json' 'schema-attribute'
       || this.tokenSequence() == 118440  // 'json' 'schema-element'
       || this.tokenSequence() == 118952  // 'json' 'score'
       || this.tokenSequence() == 119464  // 'json' 'select'
       || this.tokenSequence() == 119976  // 'json' 'self'
       || this.tokenSequence() == 122536  // 'json' 'sliding'
       || this.tokenSequence() == 123048  // 'json' 'some'
       || this.tokenSequence() == 123560  // 'json' 'stable'
       || this.tokenSequence() == 124072  // 'json' 'start'
       || this.tokenSequence() == 125608  // 'json' 'strict'
       || this.tokenSequence() == 126632  // 'json' 'structured-item'
       || this.tokenSequence() == 127144  // 'json' 'switch'
       || this.tokenSequence() == 127656  // 'json' 'text'
       || this.tokenSequence() == 129704  // 'json' 'to'
       || this.tokenSequence() == 130216  // 'json' 'treat'
       || this.tokenSequence() == 130728  // 'json' 'true'
       || this.tokenSequence() == 131240  // 'json' 'try'
       || this.tokenSequence() == 131752  // 'json' 'tumbling'
       || this.tokenSequence() == 132264  // 'json' 'type'
       || this.tokenSequence() == 132776  // 'json' 'typeswitch'
       || this.tokenSequence() == 133288  // 'json' 'union'
       || this.tokenSequence() == 134312  // 'json' 'unordered'
       || this.tokenSequence() == 134824  // 'json' 'updating'
       || this.tokenSequence() == 136360  // 'json' 'validate'
       || this.tokenSequence() == 136872  // 'json' 'value'
       || this.tokenSequence() == 137384  // 'json' 'variable'
       || this.tokenSequence() == 137896  // 'json' 'version'
       || this.tokenSequence() == 139432  // 'json' 'where'
       || this.tokenSequence() == 139944  // 'json' 'while'
       || this.tokenSequence() == 141480  // 'json' 'with'
       || this.tokenSequence() == 144040  // 'json' '{'
       || this.tokenSequence() == 145064) // 'json' '{|'
      {
        this.consume(168);          // 'json'
      }
      this.lookahead1W(260);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      this.whitespace();
      this.parse_PostfixExpr();
      this.consume(80);             // 'as'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("JSONRenameExpr", this.e0);
    }

    private try_JSONRenameExpr()
    {
      this.consumeT(222);           // 'rename'
      this.lookahead1W(260);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      switch (this.token())
      {
      case 168:                     // 'json'
        this.lookahead2W(261);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 18088)  // 'json' '('
      {
        this.lk = this.memoized(16, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.consumeT(168);     // 'json'
            this.memoize(16, e0A, -1);
          }
          catch (p1A)
          {
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(16, e0A, -2);
          }
          this.lk = -2;
        }
      }
      if (this.tokenSequence() == -1
       || this.tokenSequence() == 3240  // 'json' EQName^Token
       || this.tokenSequence() == 4264  // 'json' IntegerLiteral
       || this.tokenSequence() == 4776  // 'json' DecimalLiteral
       || this.tokenSequence() == 5288  // 'json' DoubleLiteral
       || this.tokenSequence() == 5800  // 'json' StringLiteral
       || this.tokenSequence() == 16040 // 'json' '$'
       || this.tokenSequence() == 16552 // 'json' '$$'
       || this.tokenSequence() == 17064 // 'json' '%'
       || this.tokenSequence() == 28328 // 'json' '<'
       || this.tokenSequence() == 28840 // 'json' '<!--'
       || this.tokenSequence() == 30888 // 'json' '<?'
       || this.tokenSequence() == 35496 // 'json' '['
       || this.tokenSequence() == 36520 // 'json' 'after'
       || this.tokenSequence() == 37544 // 'json' 'allowing'
       || this.tokenSequence() == 38056 // 'json' 'ancestor'
       || this.tokenSequence() == 38568 // 'json' 'ancestor-or-self'
       || this.tokenSequence() == 39080 // 'json' 'and'
       || this.tokenSequence() == 40104 // 'json' 'append'
       || this.tokenSequence() == 40616 // 'json' 'array'
       || this.tokenSequence() == 41128 // 'json' 'as'
       || this.tokenSequence() == 41640 // 'json' 'ascending'
       || this.tokenSequence() == 42152 // 'json' 'at'
       || this.tokenSequence() == 42664 // 'json' 'attribute'
       || this.tokenSequence() == 43176 // 'json' 'base-uri'
       || this.tokenSequence() == 43688 // 'json' 'before'
       || this.tokenSequence() == 44200 // 'json' 'boundary-space'
       || this.tokenSequence() == 44712 // 'json' 'break'
       || this.tokenSequence() == 45736 // 'json' 'case'
       || this.tokenSequence() == 46248 // 'json' 'cast'
       || this.tokenSequence() == 46760 // 'json' 'castable'
       || this.tokenSequence() == 47272 // 'json' 'catch'
       || this.tokenSequence() == 48296 // 'json' 'child'
       || this.tokenSequence() == 48808 // 'json' 'collation'
       || this.tokenSequence() == 49832 // 'json' 'comment'
       || this.tokenSequence() == 50344 // 'json' 'constraint'
       || this.tokenSequence() == 50856 // 'json' 'construction'
       || this.tokenSequence() == 52392 // 'json' 'context'
       || this.tokenSequence() == 52904 // 'json' 'continue'
       || this.tokenSequence() == 53416 // 'json' 'copy'
       || this.tokenSequence() == 53928 // 'json' 'copy-namespaces'
       || this.tokenSequence() == 54440 // 'json' 'count'
       || this.tokenSequence() == 54952 // 'json' 'decimal-format'
       || this.tokenSequence() == 55976 // 'json' 'declare'
       || this.tokenSequence() == 56488 // 'json' 'default'
       || this.tokenSequence() == 57000 // 'json' 'delete'
       || this.tokenSequence() == 57512 // 'json' 'descendant'
       || this.tokenSequence() == 58024 // 'json' 'descendant-or-self'
       || this.tokenSequence() == 58536 // 'json' 'descending'
       || this.tokenSequence() == 61096 // 'json' 'div'
       || this.tokenSequence() == 61608 // 'json' 'document'
       || this.tokenSequence() == 62120 // 'json' 'document-node'
       || this.tokenSequence() == 62632 // 'json' 'element'
       || this.tokenSequence() == 63144 // 'json' 'else'
       || this.tokenSequence() == 63656 // 'json' 'empty'
       || this.tokenSequence() == 64168 // 'json' 'empty-sequence'
       || this.tokenSequence() == 64680 // 'json' 'encoding'
       || this.tokenSequence() == 65192 // 'json' 'end'
       || this.tokenSequence() == 66216 // 'json' 'eq'
       || this.tokenSequence() == 66728 // 'json' 'every'
       || this.tokenSequence() == 67752 // 'json' 'except'
       || this.tokenSequence() == 68264 // 'json' 'exit'
       || this.tokenSequence() == 68776 // 'json' 'external'
       || this.tokenSequence() == 69288 // 'json' 'false'
       || this.tokenSequence() == 69800 // 'json' 'first'
       || this.tokenSequence() == 70312 // 'json' 'following'
       || this.tokenSequence() == 70824 // 'json' 'following-sibling'
       || this.tokenSequence() == 71336 // 'json' 'for'
       || this.tokenSequence() == 72872 // 'json' 'from'
       || this.tokenSequence() == 73384 // 'json' 'ft-option'
       || this.tokenSequence() == 75432 // 'json' 'function'
       || this.tokenSequence() == 75944 // 'json' 'ge'
       || this.tokenSequence() == 76968 // 'json' 'group'
       || this.tokenSequence() == 77992 // 'json' 'gt'
       || this.tokenSequence() == 78504 // 'json' 'idiv'
       || this.tokenSequence() == 79016 // 'json' 'if'
       || this.tokenSequence() == 79528 // 'json' 'import'
       || this.tokenSequence() == 80040 // 'json' 'in'
       || this.tokenSequence() == 80552 // 'json' 'index'
       || this.tokenSequence() == 82600 // 'json' 'insert'
       || this.tokenSequence() == 83112 // 'json' 'instance'
       || this.tokenSequence() == 83624 // 'json' 'integrity'
       || this.tokenSequence() == 84136 // 'json' 'intersect'
       || this.tokenSequence() == 84648 // 'json' 'into'
       || this.tokenSequence() == 85160 // 'json' 'is'
       || this.tokenSequence() == 85672 // 'json' 'item'
       || this.tokenSequence() == 86184 // 'json' 'json'
       || this.tokenSequence() == 86696 // 'json' 'json-item'
       || this.tokenSequence() == 87208 // 'json' 'jsoniq'
       || this.tokenSequence() == 88744 // 'json' 'last'
       || this.tokenSequence() == 89256 // 'json' 'lax'
       || this.tokenSequence() == 89768 // 'json' 'le'
       || this.tokenSequence() == 90792 // 'json' 'let'
       || this.tokenSequence() == 91816 // 'json' 'loop'
       || this.tokenSequence() == 92840 // 'json' 'lt'
       || this.tokenSequence() == 93864 // 'json' 'mod'
       || this.tokenSequence() == 94376 // 'json' 'modify'
       || this.tokenSequence() == 94888 // 'json' 'module'
       || this.tokenSequence() == 95912 // 'json' 'namespace'
       || this.tokenSequence() == 96424 // 'json' 'namespace-node'
       || this.tokenSequence() == 96936 // 'json' 'ne'
       || this.tokenSequence() == 99496 // 'json' 'node'
       || this.tokenSequence() == 100008  // 'json' 'nodes'
       || this.tokenSequence() == 101032  // 'json' 'null'
       || this.tokenSequence() == 101544  // 'json' 'object'
       || this.tokenSequence() == 103592  // 'json' 'only'
       || this.tokenSequence() == 104104  // 'json' 'option'
       || this.tokenSequence() == 104616  // 'json' 'or'
       || this.tokenSequence() == 105128  // 'json' 'order'
       || this.tokenSequence() == 105640  // 'json' 'ordered'
       || this.tokenSequence() == 106152  // 'json' 'ordering'
       || this.tokenSequence() == 107688  // 'json' 'parent'
       || this.tokenSequence() == 110760  // 'json' 'preceding'
       || this.tokenSequence() == 111272  // 'json' 'preceding-sibling'
       || this.tokenSequence() == 112808  // 'json' 'processing-instruction'
       || this.tokenSequence() == 113832  // 'json' 'rename'
       || this.tokenSequence() == 114344  // 'json' 'replace'
       || this.tokenSequence() == 114856  // 'json' 'return'
       || this.tokenSequence() == 115368  // 'json' 'returning'
       || this.tokenSequence() == 115880  // 'json' 'revalidation'
       || this.tokenSequence() == 116904  // 'json' 'satisfies'
       || this.tokenSequence() == 117416  // 'json' 'schema'
       || this.tokenSequence() == 117928  // 'json' 'schema-attribute'
       || this.tokenSequence() == 118440  // 'json' 'schema-element'
       || this.tokenSequence() == 118952  // 'json' 'score'
       || this.tokenSequence() == 119464  // 'json' 'select'
       || this.tokenSequence() == 119976  // 'json' 'self'
       || this.tokenSequence() == 122536  // 'json' 'sliding'
       || this.tokenSequence() == 123048  // 'json' 'some'
       || this.tokenSequence() == 123560  // 'json' 'stable'
       || this.tokenSequence() == 124072  // 'json' 'start'
       || this.tokenSequence() == 125608  // 'json' 'strict'
       || this.tokenSequence() == 126632  // 'json' 'structured-item'
       || this.tokenSequence() == 127144  // 'json' 'switch'
       || this.tokenSequence() == 127656  // 'json' 'text'
       || this.tokenSequence() == 129704  // 'json' 'to'
       || this.tokenSequence() == 130216  // 'json' 'treat'
       || this.tokenSequence() == 130728  // 'json' 'true'
       || this.tokenSequence() == 131240  // 'json' 'try'
       || this.tokenSequence() == 131752  // 'json' 'tumbling'
       || this.tokenSequence() == 132264  // 'json' 'type'
       || this.tokenSequence() == 132776  // 'json' 'typeswitch'
       || this.tokenSequence() == 133288  // 'json' 'union'
       || this.tokenSequence() == 134312  // 'json' 'unordered'
       || this.tokenSequence() == 134824  // 'json' 'updating'
       || this.tokenSequence() == 136360  // 'json' 'validate'
       || this.tokenSequence() == 136872  // 'json' 'value'
       || this.tokenSequence() == 137384  // 'json' 'variable'
       || this.tokenSequence() == 137896  // 'json' 'version'
       || this.tokenSequence() == 139432  // 'json' 'where'
       || this.tokenSequence() == 139944  // 'json' 'while'
       || this.tokenSequence() == 141480  // 'json' 'with'
       || this.tokenSequence() == 144040  // 'json' '{'
       || this.tokenSequence() == 145064) // 'json' '{|'
      {
        this.consumeT(168);         // 'json'
      }
      this.lookahead1W(260);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      this.try_PostfixExpr();
      this.consumeT(80);            // 'as'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_JSONReplaceExpr()
    {
      this.eventHandler.startNonterminal("JSONReplaceExpr", this.e0);
      this.consume(223);            // 'replace'
      this.lookahead1W(85);         // S^WS | '(:' | 'value'
      this.consume(267);            // 'value'
      this.lookahead1W(67);         // S^WS | '(:' | 'of'
      this.consume(200);            // 'of'
      this.lookahead1W(59);         // S^WS | '(:' | 'json'
      this.consume(168);            // 'json'
      this.lookahead1W(260);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      this.whitespace();
      this.parse_PostfixExpr();
      this.consume(276);            // 'with'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("JSONReplaceExpr", this.e0);
    }

    private try_JSONReplaceExpr()
    {
      this.consumeT(223);           // 'replace'
      this.lookahead1W(85);         // S^WS | '(:' | 'value'
      this.consumeT(267);           // 'value'
      this.lookahead1W(67);         // S^WS | '(:' | 'of'
      this.consumeT(200);           // 'of'
      this.lookahead1W(59);         // S^WS | '(:' | 'json'
      this.consumeT(168);           // 'json'
      this.lookahead1W(260);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      this.try_PostfixExpr();
      this.consumeT(276);           // 'with'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_JSONAppendExpr()
    {
      this.eventHandler.startNonterminal("JSONAppendExpr", this.e0);
      this.consume(78);             // 'append'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      switch (this.token())
      {
      case 168:                     // 'json'
        this.lookahead2W(269);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 18088)  // 'json' '('
      {
        this.lk = this.memoized(17, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.consumeT(168);     // 'json'
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(17, this.e0, this.lk);
        }
      }
      if (this.tokenSequence() == -1
       || this.tokenSequence() == 3240  // 'json' EQName^Token
       || this.tokenSequence() == 4264  // 'json' IntegerLiteral
       || this.tokenSequence() == 4776  // 'json' DecimalLiteral
       || this.tokenSequence() == 5288  // 'json' DoubleLiteral
       || this.tokenSequence() == 5800  // 'json' StringLiteral
       || this.tokenSequence() == 16040 // 'json' '$'
       || this.tokenSequence() == 16552 // 'json' '$$'
       || this.tokenSequence() == 17064 // 'json' '%'
       || this.tokenSequence() == 18600 // 'json' '(#'
       || this.tokenSequence() == 21160 // 'json' '+'
       || this.tokenSequence() == 22184 // 'json' '-'
       || this.tokenSequence() == 24232 // 'json' '/'
       || this.tokenSequence() == 24744 // 'json' '//'
       || this.tokenSequence() == 28328 // 'json' '<'
       || this.tokenSequence() == 28840 // 'json' '<!--'
       || this.tokenSequence() == 30888 // 'json' '<?'
       || this.tokenSequence() == 35496 // 'json' '['
       || this.tokenSequence() == 36520 // 'json' 'after'
       || this.tokenSequence() == 37544 // 'json' 'allowing'
       || this.tokenSequence() == 38056 // 'json' 'ancestor'
       || this.tokenSequence() == 38568 // 'json' 'ancestor-or-self'
       || this.tokenSequence() == 39080 // 'json' 'and'
       || this.tokenSequence() == 40104 // 'json' 'append'
       || this.tokenSequence() == 40616 // 'json' 'array'
       || this.tokenSequence() == 41128 // 'json' 'as'
       || this.tokenSequence() == 41640 // 'json' 'ascending'
       || this.tokenSequence() == 42152 // 'json' 'at'
       || this.tokenSequence() == 42664 // 'json' 'attribute'
       || this.tokenSequence() == 43176 // 'json' 'base-uri'
       || this.tokenSequence() == 43688 // 'json' 'before'
       || this.tokenSequence() == 44200 // 'json' 'boundary-space'
       || this.tokenSequence() == 44712 // 'json' 'break'
       || this.tokenSequence() == 45736 // 'json' 'case'
       || this.tokenSequence() == 46248 // 'json' 'cast'
       || this.tokenSequence() == 46760 // 'json' 'castable'
       || this.tokenSequence() == 47272 // 'json' 'catch'
       || this.tokenSequence() == 48296 // 'json' 'child'
       || this.tokenSequence() == 48808 // 'json' 'collation'
       || this.tokenSequence() == 49832 // 'json' 'comment'
       || this.tokenSequence() == 50344 // 'json' 'constraint'
       || this.tokenSequence() == 50856 // 'json' 'construction'
       || this.tokenSequence() == 52392 // 'json' 'context'
       || this.tokenSequence() == 52904 // 'json' 'continue'
       || this.tokenSequence() == 53416 // 'json' 'copy'
       || this.tokenSequence() == 53928 // 'json' 'copy-namespaces'
       || this.tokenSequence() == 54440 // 'json' 'count'
       || this.tokenSequence() == 54952 // 'json' 'decimal-format'
       || this.tokenSequence() == 55976 // 'json' 'declare'
       || this.tokenSequence() == 56488 // 'json' 'default'
       || this.tokenSequence() == 57000 // 'json' 'delete'
       || this.tokenSequence() == 57512 // 'json' 'descendant'
       || this.tokenSequence() == 58024 // 'json' 'descendant-or-self'
       || this.tokenSequence() == 58536 // 'json' 'descending'
       || this.tokenSequence() == 61096 // 'json' 'div'
       || this.tokenSequence() == 61608 // 'json' 'document'
       || this.tokenSequence() == 62120 // 'json' 'document-node'
       || this.tokenSequence() == 62632 // 'json' 'element'
       || this.tokenSequence() == 63144 // 'json' 'else'
       || this.tokenSequence() == 63656 // 'json' 'empty'
       || this.tokenSequence() == 64168 // 'json' 'empty-sequence'
       || this.tokenSequence() == 64680 // 'json' 'encoding'
       || this.tokenSequence() == 65192 // 'json' 'end'
       || this.tokenSequence() == 66216 // 'json' 'eq'
       || this.tokenSequence() == 66728 // 'json' 'every'
       || this.tokenSequence() == 67752 // 'json' 'except'
       || this.tokenSequence() == 68264 // 'json' 'exit'
       || this.tokenSequence() == 68776 // 'json' 'external'
       || this.tokenSequence() == 69288 // 'json' 'false'
       || this.tokenSequence() == 69800 // 'json' 'first'
       || this.tokenSequence() == 70312 // 'json' 'following'
       || this.tokenSequence() == 70824 // 'json' 'following-sibling'
       || this.tokenSequence() == 71336 // 'json' 'for'
       || this.tokenSequence() == 72872 // 'json' 'from'
       || this.tokenSequence() == 73384 // 'json' 'ft-option'
       || this.tokenSequence() == 75432 // 'json' 'function'
       || this.tokenSequence() == 75944 // 'json' 'ge'
       || this.tokenSequence() == 76968 // 'json' 'group'
       || this.tokenSequence() == 77992 // 'json' 'gt'
       || this.tokenSequence() == 78504 // 'json' 'idiv'
       || this.tokenSequence() == 79016 // 'json' 'if'
       || this.tokenSequence() == 79528 // 'json' 'import'
       || this.tokenSequence() == 80040 // 'json' 'in'
       || this.tokenSequence() == 80552 // 'json' 'index'
       || this.tokenSequence() == 82600 // 'json' 'insert'
       || this.tokenSequence() == 83112 // 'json' 'instance'
       || this.tokenSequence() == 83624 // 'json' 'integrity'
       || this.tokenSequence() == 84136 // 'json' 'intersect'
       || this.tokenSequence() == 84648 // 'json' 'into'
       || this.tokenSequence() == 85160 // 'json' 'is'
       || this.tokenSequence() == 85672 // 'json' 'item'
       || this.tokenSequence() == 86184 // 'json' 'json'
       || this.tokenSequence() == 86696 // 'json' 'json-item'
       || this.tokenSequence() == 87208 // 'json' 'jsoniq'
       || this.tokenSequence() == 88744 // 'json' 'last'
       || this.tokenSequence() == 89256 // 'json' 'lax'
       || this.tokenSequence() == 89768 // 'json' 'le'
       || this.tokenSequence() == 90792 // 'json' 'let'
       || this.tokenSequence() == 91816 // 'json' 'loop'
       || this.tokenSequence() == 92840 // 'json' 'lt'
       || this.tokenSequence() == 93864 // 'json' 'mod'
       || this.tokenSequence() == 94376 // 'json' 'modify'
       || this.tokenSequence() == 94888 // 'json' 'module'
       || this.tokenSequence() == 95912 // 'json' 'namespace'
       || this.tokenSequence() == 96424 // 'json' 'namespace-node'
       || this.tokenSequence() == 96936 // 'json' 'ne'
       || this.tokenSequence() == 99496 // 'json' 'node'
       || this.tokenSequence() == 100008  // 'json' 'nodes'
       || this.tokenSequence() == 100520  // 'json' 'not'
       || this.tokenSequence() == 101032  // 'json' 'null'
       || this.tokenSequence() == 101544  // 'json' 'object'
       || this.tokenSequence() == 103592  // 'json' 'only'
       || this.tokenSequence() == 104104  // 'json' 'option'
       || this.tokenSequence() == 104616  // 'json' 'or'
       || this.tokenSequence() == 105128  // 'json' 'order'
       || this.tokenSequence() == 105640  // 'json' 'ordered'
       || this.tokenSequence() == 106152  // 'json' 'ordering'
       || this.tokenSequence() == 107688  // 'json' 'parent'
       || this.tokenSequence() == 110760  // 'json' 'preceding'
       || this.tokenSequence() == 111272  // 'json' 'preceding-sibling'
       || this.tokenSequence() == 112808  // 'json' 'processing-instruction'
       || this.tokenSequence() == 113832  // 'json' 'rename'
       || this.tokenSequence() == 114344  // 'json' 'replace'
       || this.tokenSequence() == 114856  // 'json' 'return'
       || this.tokenSequence() == 115368  // 'json' 'returning'
       || this.tokenSequence() == 115880  // 'json' 'revalidation'
       || this.tokenSequence() == 116904  // 'json' 'satisfies'
       || this.tokenSequence() == 117416  // 'json' 'schema'
       || this.tokenSequence() == 117928  // 'json' 'schema-attribute'
       || this.tokenSequence() == 118440  // 'json' 'schema-element'
       || this.tokenSequence() == 118952  // 'json' 'score'
       || this.tokenSequence() == 119464  // 'json' 'select'
       || this.tokenSequence() == 119976  // 'json' 'self'
       || this.tokenSequence() == 122536  // 'json' 'sliding'
       || this.tokenSequence() == 123048  // 'json' 'some'
       || this.tokenSequence() == 123560  // 'json' 'stable'
       || this.tokenSequence() == 124072  // 'json' 'start'
       || this.tokenSequence() == 125608  // 'json' 'strict'
       || this.tokenSequence() == 126632  // 'json' 'structured-item'
       || this.tokenSequence() == 127144  // 'json' 'switch'
       || this.tokenSequence() == 127656  // 'json' 'text'
       || this.tokenSequence() == 129704  // 'json' 'to'
       || this.tokenSequence() == 130216  // 'json' 'treat'
       || this.tokenSequence() == 130728  // 'json' 'true'
       || this.tokenSequence() == 131240  // 'json' 'try'
       || this.tokenSequence() == 131752  // 'json' 'tumbling'
       || this.tokenSequence() == 132264  // 'json' 'type'
       || this.tokenSequence() == 132776  // 'json' 'typeswitch'
       || this.tokenSequence() == 133288  // 'json' 'union'
       || this.tokenSequence() == 134312  // 'json' 'unordered'
       || this.tokenSequence() == 134824  // 'json' 'updating'
       || this.tokenSequence() == 136360  // 'json' 'validate'
       || this.tokenSequence() == 136872  // 'json' 'value'
       || this.tokenSequence() == 137384  // 'json' 'variable'
       || this.tokenSequence() == 137896  // 'json' 'version'
       || this.tokenSequence() == 139432  // 'json' 'where'
       || this.tokenSequence() == 139944  // 'json' 'while'
       || this.tokenSequence() == 141480  // 'json' 'with'
       || this.tokenSequence() == 144040  // 'json' '{'
       || this.tokenSequence() == 145064) // 'json' '{|'
      {
        this.consume(168);          // 'json'
      }
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.consume(165);            // 'into'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("JSONAppendExpr", this.e0);
    }

    private try_JSONAppendExpr()
    {
      this.consumeT(78);            // 'append'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      switch (this.token())
      {
      case 168:                     // 'json'
        this.lookahead2W(269);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 18088)  // 'json' '('
      {
        this.lk = this.memoized(17, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.consumeT(168);     // 'json'
            this.memoize(17, e0A, -1);
          }
          catch (p1A)
          {
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(17, e0A, -2);
          }
          this.lk = -2;
        }
      }
      if (this.tokenSequence() == -1
       || this.tokenSequence() == 3240  // 'json' EQName^Token
       || this.tokenSequence() == 4264  // 'json' IntegerLiteral
       || this.tokenSequence() == 4776  // 'json' DecimalLiteral
       || this.tokenSequence() == 5288  // 'json' DoubleLiteral
       || this.tokenSequence() == 5800  // 'json' StringLiteral
       || this.tokenSequence() == 16040 // 'json' '$'
       || this.tokenSequence() == 16552 // 'json' '$$'
       || this.tokenSequence() == 17064 // 'json' '%'
       || this.tokenSequence() == 18600 // 'json' '(#'
       || this.tokenSequence() == 21160 // 'json' '+'
       || this.tokenSequence() == 22184 // 'json' '-'
       || this.tokenSequence() == 24232 // 'json' '/'
       || this.tokenSequence() == 24744 // 'json' '//'
       || this.tokenSequence() == 28328 // 'json' '<'
       || this.tokenSequence() == 28840 // 'json' '<!--'
       || this.tokenSequence() == 30888 // 'json' '<?'
       || this.tokenSequence() == 35496 // 'json' '['
       || this.tokenSequence() == 36520 // 'json' 'after'
       || this.tokenSequence() == 37544 // 'json' 'allowing'
       || this.tokenSequence() == 38056 // 'json' 'ancestor'
       || this.tokenSequence() == 38568 // 'json' 'ancestor-or-self'
       || this.tokenSequence() == 39080 // 'json' 'and'
       || this.tokenSequence() == 40104 // 'json' 'append'
       || this.tokenSequence() == 40616 // 'json' 'array'
       || this.tokenSequence() == 41128 // 'json' 'as'
       || this.tokenSequence() == 41640 // 'json' 'ascending'
       || this.tokenSequence() == 42152 // 'json' 'at'
       || this.tokenSequence() == 42664 // 'json' 'attribute'
       || this.tokenSequence() == 43176 // 'json' 'base-uri'
       || this.tokenSequence() == 43688 // 'json' 'before'
       || this.tokenSequence() == 44200 // 'json' 'boundary-space'
       || this.tokenSequence() == 44712 // 'json' 'break'
       || this.tokenSequence() == 45736 // 'json' 'case'
       || this.tokenSequence() == 46248 // 'json' 'cast'
       || this.tokenSequence() == 46760 // 'json' 'castable'
       || this.tokenSequence() == 47272 // 'json' 'catch'
       || this.tokenSequence() == 48296 // 'json' 'child'
       || this.tokenSequence() == 48808 // 'json' 'collation'
       || this.tokenSequence() == 49832 // 'json' 'comment'
       || this.tokenSequence() == 50344 // 'json' 'constraint'
       || this.tokenSequence() == 50856 // 'json' 'construction'
       || this.tokenSequence() == 52392 // 'json' 'context'
       || this.tokenSequence() == 52904 // 'json' 'continue'
       || this.tokenSequence() == 53416 // 'json' 'copy'
       || this.tokenSequence() == 53928 // 'json' 'copy-namespaces'
       || this.tokenSequence() == 54440 // 'json' 'count'
       || this.tokenSequence() == 54952 // 'json' 'decimal-format'
       || this.tokenSequence() == 55976 // 'json' 'declare'
       || this.tokenSequence() == 56488 // 'json' 'default'
       || this.tokenSequence() == 57000 // 'json' 'delete'
       || this.tokenSequence() == 57512 // 'json' 'descendant'
       || this.tokenSequence() == 58024 // 'json' 'descendant-or-self'
       || this.tokenSequence() == 58536 // 'json' 'descending'
       || this.tokenSequence() == 61096 // 'json' 'div'
       || this.tokenSequence() == 61608 // 'json' 'document'
       || this.tokenSequence() == 62120 // 'json' 'document-node'
       || this.tokenSequence() == 62632 // 'json' 'element'
       || this.tokenSequence() == 63144 // 'json' 'else'
       || this.tokenSequence() == 63656 // 'json' 'empty'
       || this.tokenSequence() == 64168 // 'json' 'empty-sequence'
       || this.tokenSequence() == 64680 // 'json' 'encoding'
       || this.tokenSequence() == 65192 // 'json' 'end'
       || this.tokenSequence() == 66216 // 'json' 'eq'
       || this.tokenSequence() == 66728 // 'json' 'every'
       || this.tokenSequence() == 67752 // 'json' 'except'
       || this.tokenSequence() == 68264 // 'json' 'exit'
       || this.tokenSequence() == 68776 // 'json' 'external'
       || this.tokenSequence() == 69288 // 'json' 'false'
       || this.tokenSequence() == 69800 // 'json' 'first'
       || this.tokenSequence() == 70312 // 'json' 'following'
       || this.tokenSequence() == 70824 // 'json' 'following-sibling'
       || this.tokenSequence() == 71336 // 'json' 'for'
       || this.tokenSequence() == 72872 // 'json' 'from'
       || this.tokenSequence() == 73384 // 'json' 'ft-option'
       || this.tokenSequence() == 75432 // 'json' 'function'
       || this.tokenSequence() == 75944 // 'json' 'ge'
       || this.tokenSequence() == 76968 // 'json' 'group'
       || this.tokenSequence() == 77992 // 'json' 'gt'
       || this.tokenSequence() == 78504 // 'json' 'idiv'
       || this.tokenSequence() == 79016 // 'json' 'if'
       || this.tokenSequence() == 79528 // 'json' 'import'
       || this.tokenSequence() == 80040 // 'json' 'in'
       || this.tokenSequence() == 80552 // 'json' 'index'
       || this.tokenSequence() == 82600 // 'json' 'insert'
       || this.tokenSequence() == 83112 // 'json' 'instance'
       || this.tokenSequence() == 83624 // 'json' 'integrity'
       || this.tokenSequence() == 84136 // 'json' 'intersect'
       || this.tokenSequence() == 84648 // 'json' 'into'
       || this.tokenSequence() == 85160 // 'json' 'is'
       || this.tokenSequence() == 85672 // 'json' 'item'
       || this.tokenSequence() == 86184 // 'json' 'json'
       || this.tokenSequence() == 86696 // 'json' 'json-item'
       || this.tokenSequence() == 87208 // 'json' 'jsoniq'
       || this.tokenSequence() == 88744 // 'json' 'last'
       || this.tokenSequence() == 89256 // 'json' 'lax'
       || this.tokenSequence() == 89768 // 'json' 'le'
       || this.tokenSequence() == 90792 // 'json' 'let'
       || this.tokenSequence() == 91816 // 'json' 'loop'
       || this.tokenSequence() == 92840 // 'json' 'lt'
       || this.tokenSequence() == 93864 // 'json' 'mod'
       || this.tokenSequence() == 94376 // 'json' 'modify'
       || this.tokenSequence() == 94888 // 'json' 'module'
       || this.tokenSequence() == 95912 // 'json' 'namespace'
       || this.tokenSequence() == 96424 // 'json' 'namespace-node'
       || this.tokenSequence() == 96936 // 'json' 'ne'
       || this.tokenSequence() == 99496 // 'json' 'node'
       || this.tokenSequence() == 100008  // 'json' 'nodes'
       || this.tokenSequence() == 100520  // 'json' 'not'
       || this.tokenSequence() == 101032  // 'json' 'null'
       || this.tokenSequence() == 101544  // 'json' 'object'
       || this.tokenSequence() == 103592  // 'json' 'only'
       || this.tokenSequence() == 104104  // 'json' 'option'
       || this.tokenSequence() == 104616  // 'json' 'or'
       || this.tokenSequence() == 105128  // 'json' 'order'
       || this.tokenSequence() == 105640  // 'json' 'ordered'
       || this.tokenSequence() == 106152  // 'json' 'ordering'
       || this.tokenSequence() == 107688  // 'json' 'parent'
       || this.tokenSequence() == 110760  // 'json' 'preceding'
       || this.tokenSequence() == 111272  // 'json' 'preceding-sibling'
       || this.tokenSequence() == 112808  // 'json' 'processing-instruction'
       || this.tokenSequence() == 113832  // 'json' 'rename'
       || this.tokenSequence() == 114344  // 'json' 'replace'
       || this.tokenSequence() == 114856  // 'json' 'return'
       || this.tokenSequence() == 115368  // 'json' 'returning'
       || this.tokenSequence() == 115880  // 'json' 'revalidation'
       || this.tokenSequence() == 116904  // 'json' 'satisfies'
       || this.tokenSequence() == 117416  // 'json' 'schema'
       || this.tokenSequence() == 117928  // 'json' 'schema-attribute'
       || this.tokenSequence() == 118440  // 'json' 'schema-element'
       || this.tokenSequence() == 118952  // 'json' 'score'
       || this.tokenSequence() == 119464  // 'json' 'select'
       || this.tokenSequence() == 119976  // 'json' 'self'
       || this.tokenSequence() == 122536  // 'json' 'sliding'
       || this.tokenSequence() == 123048  // 'json' 'some'
       || this.tokenSequence() == 123560  // 'json' 'stable'
       || this.tokenSequence() == 124072  // 'json' 'start'
       || this.tokenSequence() == 125608  // 'json' 'strict'
       || this.tokenSequence() == 126632  // 'json' 'structured-item'
       || this.tokenSequence() == 127144  // 'json' 'switch'
       || this.tokenSequence() == 127656  // 'json' 'text'
       || this.tokenSequence() == 129704  // 'json' 'to'
       || this.tokenSequence() == 130216  // 'json' 'treat'
       || this.tokenSequence() == 130728  // 'json' 'true'
       || this.tokenSequence() == 131240  // 'json' 'try'
       || this.tokenSequence() == 131752  // 'json' 'tumbling'
       || this.tokenSequence() == 132264  // 'json' 'type'
       || this.tokenSequence() == 132776  // 'json' 'typeswitch'
       || this.tokenSequence() == 133288  // 'json' 'union'
       || this.tokenSequence() == 134312  // 'json' 'unordered'
       || this.tokenSequence() == 134824  // 'json' 'updating'
       || this.tokenSequence() == 136360  // 'json' 'validate'
       || this.tokenSequence() == 136872  // 'json' 'value'
       || this.tokenSequence() == 137384  // 'json' 'variable'
       || this.tokenSequence() == 137896  // 'json' 'version'
       || this.tokenSequence() == 139432  // 'json' 'where'
       || this.tokenSequence() == 139944  // 'json' 'while'
       || this.tokenSequence() == 141480  // 'json' 'with'
       || this.tokenSequence() == 144040  // 'json' '{'
       || this.tokenSequence() == 145064) // 'json' '{|'
      {
        this.consumeT(168);         // 'json'
      }
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
      this.consumeT(165);           // 'into'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_CommonContent()
    {
      this.eventHandler.startNonterminal("CommonContent", this.e0);
      switch (this.token())
      {
      case 12:                      // PredefinedEntityRef
        this.consume(12);           // PredefinedEntityRef
        break;
      case 23:                      // CharRef
        this.consume(23);           // CharRef
        break;
      case 282:                     // '{{'
        this.consume(282);          // '{{'
        break;
      case 288:                     // '}}'
        this.consume(288);          // '}}'
        break;
      default:
        this.parse_BlockExpr();
      }
      this.eventHandler.endNonterminal("CommonContent", this.e0);
    }

    private try_CommonContent()
    {
      switch (this.token())
      {
      case 12:                      // PredefinedEntityRef
        this.consumeT(12);          // PredefinedEntityRef
        break;
      case 23:                      // CharRef
        this.consumeT(23);          // CharRef
        break;
      case 282:                     // '{{'
        this.consumeT(282);         // '{{'
        break;
      case 288:                     // '}}'
        this.consumeT(288);         // '}}'
        break;
      default:
        this.try_BlockExpr();
      }
    }

    private parse_ContentExpr()
    {
      this.eventHandler.startNonterminal("ContentExpr", this.e0);
      this.parse_StatementsAndExpr();
      this.eventHandler.endNonterminal("ContentExpr", this.e0);
    }

    private try_ContentExpr()
    {
      this.try_StatementsAndExpr();
    }

    private parse_CompDocConstructor()
    {
      this.eventHandler.startNonterminal("CompDocConstructor", this.e0);
      this.consume(120);            // 'document'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.whitespace();
      this.parse_BlockExpr();
      this.eventHandler.endNonterminal("CompDocConstructor", this.e0);
    }

    private try_CompDocConstructor()
    {
      this.consumeT(120);           // 'document'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.try_BlockExpr();
    }

    private parse_CompAttrConstructor()
    {
      this.eventHandler.startNonterminal("CompAttrConstructor", this.e0);
      this.consume(83);             // 'attribute'
      this.lookahead1W(250);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
      switch (this.token())
      {
      case 281:                     // '{'
        this.consume(281);          // '{'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_Expr();
        this.consume(287);          // '}'
        break;
      default:
        this.whitespace();
        this.parse_EQName();
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      switch (this.token())
      {
      case 281:                     // '{'
        this.lookahead2W(281);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 147225) // '{' '}'
      {
        this.lk = this.memoized(18, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.consumeT(281);     // '{'
            this.lookahead1W(91);   // S^WS | '(:' | '}'
            this.consumeT(287);     // '}'
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(18, this.e0, this.lk);
        }
      }
      switch (this.tokenSequence())
      {
      case -1:
        this.consume(281);          // '{'
        this.lookahead1W(91);       // S^WS | '(:' | '}'
        this.consume(287);          // '}'
        break;
      default:
        this.whitespace();
        this.parse_BlockExpr();
      }
      this.eventHandler.endNonterminal("CompAttrConstructor", this.e0);
    }

    private try_CompAttrConstructor()
    {
      this.consumeT(83);            // 'attribute'
      this.lookahead1W(250);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
      switch (this.token())
      {
      case 281:                     // '{'
        this.consumeT(281);         // '{'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_Expr();
        this.consumeT(287);         // '}'
        break;
      default:
        this.try_EQName();
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      switch (this.token())
      {
      case 281:                     // '{'
        this.lookahead2W(281);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 147225) // '{' '}'
      {
        this.lk = this.memoized(18, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.consumeT(281);     // '{'
            this.lookahead1W(91);   // S^WS | '(:' | '}'
            this.consumeT(287);     // '}'
            this.memoize(18, e0A, -1);
            this.lk = -3;
          }
          catch (p1A)
          {
            this.lk = -2;
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(18, e0A, -2);
          }
        }
      }
      switch (this.tokenSequence())
      {
      case -1:
        this.consumeT(281);         // '{'
        this.lookahead1W(91);       // S^WS | '(:' | '}'
        this.consumeT(287);         // '}'
        break;
      case -3:
        break;
      default:
        this.try_BlockExpr();
      }
    }

    private parse_CompPIConstructor()
    {
      this.eventHandler.startNonterminal("CompPIConstructor", this.e0);
      this.consume(220);            // 'processing-instruction'
      this.lookahead1W(242);        // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      switch (this.token())
      {
      case 281:                     // '{'
        this.consume(281);          // '{'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_Expr();
        this.consume(287);          // '}'
        break;
      default:
        this.whitespace();
        this.parse_NCName();
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      switch (this.token())
      {
      case 281:                     // '{'
        this.lookahead2W(281);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 147225) // '{' '}'
      {
        this.lk = this.memoized(19, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.consumeT(281);     // '{'
            this.lookahead1W(91);   // S^WS | '(:' | '}'
            this.consumeT(287);     // '}'
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(19, this.e0, this.lk);
        }
      }
      switch (this.tokenSequence())
      {
      case -1:
        this.consume(281);          // '{'
        this.lookahead1W(91);       // S^WS | '(:' | '}'
        this.consume(287);          // '}'
        break;
      default:
        this.whitespace();
        this.parse_BlockExpr();
      }
      this.eventHandler.endNonterminal("CompPIConstructor", this.e0);
    }

    private try_CompPIConstructor()
    {
      this.consumeT(220);           // 'processing-instruction'
      this.lookahead1W(242);        // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      switch (this.token())
      {
      case 281:                     // '{'
        this.consumeT(281);         // '{'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_Expr();
        this.consumeT(287);         // '}'
        break;
      default:
        this.try_NCName();
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      switch (this.token())
      {
      case 281:                     // '{'
        this.lookahead2W(281);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 147225) // '{' '}'
      {
        this.lk = this.memoized(19, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.consumeT(281);     // '{'
            this.lookahead1W(91);   // S^WS | '(:' | '}'
            this.consumeT(287);     // '}'
            this.memoize(19, e0A, -1);
            this.lk = -3;
          }
          catch (p1A)
          {
            this.lk = -2;
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(19, e0A, -2);
          }
        }
      }
      switch (this.tokenSequence())
      {
      case -1:
        this.consumeT(281);         // '{'
        this.lookahead1W(91);       // S^WS | '(:' | '}'
        this.consumeT(287);         // '}'
        break;
      case -3:
        break;
      default:
        this.try_BlockExpr();
      }
    }

    private parse_CompCommentConstructor()
    {
      this.eventHandler.startNonterminal("CompCommentConstructor", this.e0);
      this.consume(97);             // 'comment'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.whitespace();
      this.parse_BlockExpr();
      this.eventHandler.endNonterminal("CompCommentConstructor", this.e0);
    }

    private try_CompCommentConstructor()
    {
      this.consumeT(97);            // 'comment'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.try_BlockExpr();
    }

    private parse_CompTextConstructor()
    {
      this.eventHandler.startNonterminal("CompTextConstructor", this.e0);
      this.consume(249);            // 'text'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.whitespace();
      this.parse_BlockExpr();
      this.eventHandler.endNonterminal("CompTextConstructor", this.e0);
    }

    private try_CompTextConstructor()
    {
      this.consumeT(249);           // 'text'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.try_BlockExpr();
    }

    private parse_PrimaryExpr()
    {
      this.eventHandler.startNonterminal("PrimaryExpr", this.e0);
      switch (this.token())
      {
      case 187:                     // 'namespace'
        this.lookahead2W(247);      // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 220:                     // 'processing-instruction'
        this.lookahead2W(245);      // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 281:                     // '{'
        this.lookahead2W(283);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        break;
      case 83:                      // 'attribute'
      case 122:                     // 'element'
        this.lookahead2W(253);      // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
        break;
      case 97:                      // 'comment'
      case 249:                     // 'text'
        this.lookahead2W(97);       // S^WS | '#' | '(:' | '{'
        break;
      case 120:                     // 'document'
      case 206:                     // 'ordered'
      case 262:                     // 'unordered'
        this.lookahead2W(148);      // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 135:                     // 'false'
      case 197:                     // 'null'
      case 255:                     // 'true'
        this.lookahead2W(237);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
        break;
      case 6:                       // EQName^Token
      case 71:                      // 'after'
      case 73:                      // 'allowing'
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 76:                      // 'and'
      case 78:                      // 'append'
      case 80:                      // 'as'
      case 81:                      // 'ascending'
      case 82:                      // 'at'
      case 84:                      // 'base-uri'
      case 85:                      // 'before'
      case 86:                      // 'boundary-space'
      case 87:                      // 'break'
      case 89:                      // 'case'
      case 90:                      // 'cast'
      case 91:                      // 'castable'
      case 92:                      // 'catch'
      case 94:                      // 'child'
      case 95:                      // 'collation'
      case 98:                      // 'constraint'
      case 99:                      // 'construction'
      case 102:                     // 'context'
      case 103:                     // 'continue'
      case 104:                     // 'copy'
      case 105:                     // 'copy-namespaces'
      case 106:                     // 'count'
      case 107:                     // 'decimal-format'
      case 109:                     // 'declare'
      case 110:                     // 'default'
      case 111:                     // 'delete'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 114:                     // 'descending'
      case 119:                     // 'div'
      case 123:                     // 'else'
      case 124:                     // 'empty'
      case 126:                     // 'encoding'
      case 127:                     // 'end'
      case 129:                     // 'eq'
      case 130:                     // 'every'
      case 132:                     // 'except'
      case 133:                     // 'exit'
      case 134:                     // 'external'
      case 136:                     // 'first'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 139:                     // 'for'
      case 142:                     // 'from'
      case 143:                     // 'ft-option'
      case 148:                     // 'ge'
      case 150:                     // 'group'
      case 152:                     // 'gt'
      case 153:                     // 'idiv'
      case 155:                     // 'import'
      case 156:                     // 'in'
      case 157:                     // 'index'
      case 161:                     // 'insert'
      case 162:                     // 'instance'
      case 163:                     // 'integrity'
      case 164:                     // 'intersect'
      case 165:                     // 'into'
      case 166:                     // 'is'
      case 168:                     // 'json'
      case 170:                     // 'jsoniq'
      case 173:                     // 'last'
      case 174:                     // 'lax'
      case 175:                     // 'le'
      case 177:                     // 'let'
      case 179:                     // 'loop'
      case 181:                     // 'lt'
      case 183:                     // 'mod'
      case 184:                     // 'modify'
      case 185:                     // 'module'
      case 189:                     // 'ne'
      case 195:                     // 'nodes'
      case 198:                     // 'object'
      case 202:                     // 'only'
      case 203:                     // 'option'
      case 204:                     // 'or'
      case 205:                     // 'order'
      case 207:                     // 'ordering'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
      case 222:                     // 'rename'
      case 223:                     // 'replace'
      case 224:                     // 'return'
      case 225:                     // 'returning'
      case 226:                     // 'revalidation'
      case 228:                     // 'satisfies'
      case 229:                     // 'schema'
      case 232:                     // 'score'
      case 233:                     // 'select'
      case 234:                     // 'self'
      case 239:                     // 'sliding'
      case 240:                     // 'some'
      case 241:                     // 'stable'
      case 242:                     // 'start'
      case 245:                     // 'strict'
      case 253:                     // 'to'
      case 254:                     // 'treat'
      case 256:                     // 'try'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 266:                     // 'validate'
      case 267:                     // 'value'
      case 268:                     // 'variable'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
        this.lookahead2W(95);       // S^WS | '#' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 3353  // '{' EQName^Token
       || this.tokenSequence() == 4377  // '{' IntegerLiteral
       || this.tokenSequence() == 4889  // '{' DecimalLiteral
       || this.tokenSequence() == 5401  // '{' DoubleLiteral
       || this.tokenSequence() == 5913  // '{' StringLiteral
       || this.tokenSequence() == 16153 // '{' '$'
       || this.tokenSequence() == 16665 // '{' '$$'
       || this.tokenSequence() == 17177 // '{' '%'
       || this.tokenSequence() == 18055 // 'false' '('
       || this.tokenSequence() == 18117 // 'null' '('
       || this.tokenSequence() == 18175 // 'true' '('
       || this.tokenSequence() == 18201 // '{' '('
       || this.tokenSequence() == 18713 // '{' '(#'
       || this.tokenSequence() == 21273 // '{' '+'
       || this.tokenSequence() == 22297 // '{' '-'
       || this.tokenSequence() == 24345 // '{' '/'
       || this.tokenSequence() == 24857 // '{' '//'
       || this.tokenSequence() == 28441 // '{' '<'
       || this.tokenSequence() == 28953 // '{' '<!--'
       || this.tokenSequence() == 31001 // '{' '<?'
       || this.tokenSequence() == 35609 // '{' '['
       || this.tokenSequence() == 36633 // '{' 'after'
       || this.tokenSequence() == 37657 // '{' 'allowing'
       || this.tokenSequence() == 38169 // '{' 'ancestor'
       || this.tokenSequence() == 38681 // '{' 'ancestor-or-self'
       || this.tokenSequence() == 39193 // '{' 'and'
       || this.tokenSequence() == 40217 // '{' 'append'
       || this.tokenSequence() == 40729 // '{' 'array'
       || this.tokenSequence() == 41241 // '{' 'as'
       || this.tokenSequence() == 41753 // '{' 'ascending'
       || this.tokenSequence() == 42265 // '{' 'at'
       || this.tokenSequence() == 42777 // '{' 'attribute'
       || this.tokenSequence() == 43289 // '{' 'base-uri'
       || this.tokenSequence() == 43801 // '{' 'before'
       || this.tokenSequence() == 44313 // '{' 'boundary-space'
       || this.tokenSequence() == 44825 // '{' 'break'
       || this.tokenSequence() == 45849 // '{' 'case'
       || this.tokenSequence() == 46361 // '{' 'cast'
       || this.tokenSequence() == 46873 // '{' 'castable'
       || this.tokenSequence() == 47385 // '{' 'catch'
       || this.tokenSequence() == 48409 // '{' 'child'
       || this.tokenSequence() == 48921 // '{' 'collation'
       || this.tokenSequence() == 49945 // '{' 'comment'
       || this.tokenSequence() == 50457 // '{' 'constraint'
       || this.tokenSequence() == 50969 // '{' 'construction'
       || this.tokenSequence() == 52505 // '{' 'context'
       || this.tokenSequence() == 53017 // '{' 'continue'
       || this.tokenSequence() == 53529 // '{' 'copy'
       || this.tokenSequence() == 54041 // '{' 'copy-namespaces'
       || this.tokenSequence() == 54553 // '{' 'count'
       || this.tokenSequence() == 55065 // '{' 'decimal-format'
       || this.tokenSequence() == 56089 // '{' 'declare'
       || this.tokenSequence() == 56601 // '{' 'default'
       || this.tokenSequence() == 57113 // '{' 'delete'
       || this.tokenSequence() == 57625 // '{' 'descendant'
       || this.tokenSequence() == 58137 // '{' 'descendant-or-self'
       || this.tokenSequence() == 58649 // '{' 'descending'
       || this.tokenSequence() == 61209 // '{' 'div'
       || this.tokenSequence() == 61721 // '{' 'document'
       || this.tokenSequence() == 62233 // '{' 'document-node'
       || this.tokenSequence() == 62745 // '{' 'element'
       || this.tokenSequence() == 63257 // '{' 'else'
       || this.tokenSequence() == 63769 // '{' 'empty'
       || this.tokenSequence() == 64281 // '{' 'empty-sequence'
       || this.tokenSequence() == 64793 // '{' 'encoding'
       || this.tokenSequence() == 65305 // '{' 'end'
       || this.tokenSequence() == 66329 // '{' 'eq'
       || this.tokenSequence() == 66841 // '{' 'every'
       || this.tokenSequence() == 67865 // '{' 'except'
       || this.tokenSequence() == 68377 // '{' 'exit'
       || this.tokenSequence() == 68889 // '{' 'external'
       || this.tokenSequence() == 69401 // '{' 'false'
       || this.tokenSequence() == 69913 // '{' 'first'
       || this.tokenSequence() == 70425 // '{' 'following'
       || this.tokenSequence() == 70937 // '{' 'following-sibling'
       || this.tokenSequence() == 71449 // '{' 'for'
       || this.tokenSequence() == 72985 // '{' 'from'
       || this.tokenSequence() == 73497 // '{' 'ft-option'
       || this.tokenSequence() == 75545 // '{' 'function'
       || this.tokenSequence() == 76057 // '{' 'ge'
       || this.tokenSequence() == 77081 // '{' 'group'
       || this.tokenSequence() == 78105 // '{' 'gt'
       || this.tokenSequence() == 78617 // '{' 'idiv'
       || this.tokenSequence() == 79129 // '{' 'if'
       || this.tokenSequence() == 79641 // '{' 'import'
       || this.tokenSequence() == 80153 // '{' 'in'
       || this.tokenSequence() == 80665 // '{' 'index'
       || this.tokenSequence() == 82713 // '{' 'insert'
       || this.tokenSequence() == 83225 // '{' 'instance'
       || this.tokenSequence() == 83737 // '{' 'integrity'
       || this.tokenSequence() == 84249 // '{' 'intersect'
       || this.tokenSequence() == 84761 // '{' 'into'
       || this.tokenSequence() == 85273 // '{' 'is'
       || this.tokenSequence() == 85785 // '{' 'item'
       || this.tokenSequence() == 86297 // '{' 'json'
       || this.tokenSequence() == 86809 // '{' 'json-item'
       || this.tokenSequence() == 87321 // '{' 'jsoniq'
       || this.tokenSequence() == 88857 // '{' 'last'
       || this.tokenSequence() == 89369 // '{' 'lax'
       || this.tokenSequence() == 89881 // '{' 'le'
       || this.tokenSequence() == 90905 // '{' 'let'
       || this.tokenSequence() == 91929 // '{' 'loop'
       || this.tokenSequence() == 92953 // '{' 'lt'
       || this.tokenSequence() == 93977 // '{' 'mod'
       || this.tokenSequence() == 94489 // '{' 'modify'
       || this.tokenSequence() == 95001 // '{' 'module'
       || this.tokenSequence() == 96025 // '{' 'namespace'
       || this.tokenSequence() == 96537 // '{' 'namespace-node'
       || this.tokenSequence() == 97049 // '{' 'ne'
       || this.tokenSequence() == 99609 // '{' 'node'
       || this.tokenSequence() == 100121  // '{' 'nodes'
       || this.tokenSequence() == 100633  // '{' 'not'
       || this.tokenSequence() == 101145  // '{' 'null'
       || this.tokenSequence() == 101657  // '{' 'object'
       || this.tokenSequence() == 103705  // '{' 'only'
       || this.tokenSequence() == 104217  // '{' 'option'
       || this.tokenSequence() == 104729  // '{' 'or'
       || this.tokenSequence() == 105241  // '{' 'order'
       || this.tokenSequence() == 105753  // '{' 'ordered'
       || this.tokenSequence() == 106265  // '{' 'ordering'
       || this.tokenSequence() == 107801  // '{' 'parent'
       || this.tokenSequence() == 110873  // '{' 'preceding'
       || this.tokenSequence() == 111385  // '{' 'preceding-sibling'
       || this.tokenSequence() == 112921  // '{' 'processing-instruction'
       || this.tokenSequence() == 113945  // '{' 'rename'
       || this.tokenSequence() == 114457  // '{' 'replace'
       || this.tokenSequence() == 114969  // '{' 'return'
       || this.tokenSequence() == 115481  // '{' 'returning'
       || this.tokenSequence() == 115993  // '{' 'revalidation'
       || this.tokenSequence() == 117017  // '{' 'satisfies'
       || this.tokenSequence() == 117529  // '{' 'schema'
       || this.tokenSequence() == 118041  // '{' 'schema-attribute'
       || this.tokenSequence() == 118553  // '{' 'schema-element'
       || this.tokenSequence() == 119065  // '{' 'score'
       || this.tokenSequence() == 119577  // '{' 'select'
       || this.tokenSequence() == 120089  // '{' 'self'
       || this.tokenSequence() == 122649  // '{' 'sliding'
       || this.tokenSequence() == 123161  // '{' 'some'
       || this.tokenSequence() == 123673  // '{' 'stable'
       || this.tokenSequence() == 124185  // '{' 'start'
       || this.tokenSequence() == 125721  // '{' 'strict'
       || this.tokenSequence() == 126745  // '{' 'structured-item'
       || this.tokenSequence() == 127257  // '{' 'switch'
       || this.tokenSequence() == 127769  // '{' 'text'
       || this.tokenSequence() == 129817  // '{' 'to'
       || this.tokenSequence() == 130329  // '{' 'treat'
       || this.tokenSequence() == 130841  // '{' 'true'
       || this.tokenSequence() == 131353  // '{' 'try'
       || this.tokenSequence() == 131865  // '{' 'tumbling'
       || this.tokenSequence() == 132377  // '{' 'type'
       || this.tokenSequence() == 132889  // '{' 'typeswitch'
       || this.tokenSequence() == 133401  // '{' 'union'
       || this.tokenSequence() == 134425  // '{' 'unordered'
       || this.tokenSequence() == 134937  // '{' 'updating'
       || this.tokenSequence() == 136473  // '{' 'validate'
       || this.tokenSequence() == 136985  // '{' 'value'
       || this.tokenSequence() == 137497  // '{' 'variable'
       || this.tokenSequence() == 138009  // '{' 'version'
       || this.tokenSequence() == 139545  // '{' 'where'
       || this.tokenSequence() == 140057  // '{' 'while'
       || this.tokenSequence() == 141593  // '{' 'with'
       || this.tokenSequence() == 144153  // '{' '{'
       || this.tokenSequence() == 145177  // '{' '{|'
       || this.tokenSequence() == 147225) // '{' '}'
      {
        this.lk = this.memoized(20, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_Literal();
            this.lk = -1;
          }
          catch (p1A)
          {
            try
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.try_FunctionCall();
              this.lk = -5;
            }
            catch (p5A)
            {
              try
              {
                this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                this.try_BlockExpr();
                this.lk = -10;
              }
              catch (p10A)
              {
                this.lk = -11;
              }
            }
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(20, this.e0, this.lk);
        }
      }
      switch (this.tokenSequence())
      {
      case -1:
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 12935:                   // 'false' EOF
      case 12997:                   // 'null' EOF
      case 13055:                   // 'true' EOF
      case 13447:                   // 'false' '!'
      case 13509:                   // 'null' '!'
      case 13567:                   // 'true' '!'
      case 13959:                   // 'false' '!='
      case 14021:                   // 'null' '!='
      case 14079:                   // 'true' '!='
      case 19591:                   // 'false' ')'
      case 19653:                   // 'null' ')'
      case 19711:                   // 'true' ')'
      case 20103:                   // 'false' '*'
      case 20165:                   // 'null' '*'
      case 20223:                   // 'true' '*'
      case 21127:                   // 'false' '+'
      case 21189:                   // 'null' '+'
      case 21247:                   // 'true' '+'
      case 21639:                   // 'false' ','
      case 21701:                   // 'null' ','
      case 21759:                   // 'true' ','
      case 22151:                   // 'false' '-'
      case 22213:                   // 'null' '-'
      case 22271:                   // 'true' '-'
      case 23175:                   // 'false' '.'
      case 23237:                   // 'null' '.'
      case 23295:                   // 'true' '.'
      case 24199:                   // 'false' '/'
      case 24261:                   // 'null' '/'
      case 24319:                   // 'true' '/'
      case 24711:                   // 'false' '//'
      case 24773:                   // 'null' '//'
      case 24831:                   // 'true' '//'
      case 25735:                   // 'false' ':'
      case 25797:                   // 'null' ':'
      case 25855:                   // 'true' ':'
      case 27783:                   // 'false' ';'
      case 27845:                   // 'null' ';'
      case 27903:                   // 'true' ';'
      case 28295:                   // 'false' '<'
      case 28357:                   // 'null' '<'
      case 28415:                   // 'true' '<'
      case 29831:                   // 'false' '<<'
      case 29893:                   // 'null' '<<'
      case 29951:                   // 'true' '<<'
      case 30343:                   // 'false' '<='
      case 30405:                   // 'null' '<='
      case 30463:                   // 'true' '<='
      case 31367:                   // 'false' '='
      case 31429:                   // 'null' '='
      case 31487:                   // 'true' '='
      case 31879:                   // 'false' '>'
      case 31941:                   // 'null' '>'
      case 31999:                   // 'true' '>'
      case 32391:                   // 'false' '>='
      case 32453:                   // 'null' '>='
      case 32511:                   // 'true' '>='
      case 32903:                   // 'false' '>>'
      case 32965:                   // 'null' '>>'
      case 33023:                   // 'true' '>>'
      case 35463:                   // 'false' '['
      case 35525:                   // 'null' '['
      case 35583:                   // 'true' '['
      case 35975:                   // 'false' ']'
      case 36037:                   // 'null' ']'
      case 36095:                   // 'true' ']'
      case 36487:                   // 'false' 'after'
      case 36549:                   // 'null' 'after'
      case 36607:                   // 'true' 'after'
      case 39047:                   // 'false' 'and'
      case 39109:                   // 'null' 'and'
      case 39167:                   // 'true' 'and'
      case 41095:                   // 'false' 'as'
      case 41157:                   // 'null' 'as'
      case 41215:                   // 'true' 'as'
      case 41607:                   // 'false' 'ascending'
      case 41669:                   // 'null' 'ascending'
      case 41727:                   // 'true' 'ascending'
      case 42119:                   // 'false' 'at'
      case 42181:                   // 'null' 'at'
      case 42239:                   // 'true' 'at'
      case 43655:                   // 'false' 'before'
      case 43717:                   // 'null' 'before'
      case 43775:                   // 'true' 'before'
      case 45191:                   // 'false' 'by'
      case 45253:                   // 'null' 'by'
      case 45311:                   // 'true' 'by'
      case 45703:                   // 'false' 'case'
      case 45765:                   // 'null' 'case'
      case 45823:                   // 'true' 'case'
      case 46215:                   // 'false' 'cast'
      case 46277:                   // 'null' 'cast'
      case 46335:                   // 'true' 'cast'
      case 46727:                   // 'false' 'castable'
      case 46789:                   // 'null' 'castable'
      case 46847:                   // 'true' 'castable'
      case 48775:                   // 'false' 'collation'
      case 48837:                   // 'null' 'collation'
      case 48895:                   // 'true' 'collation'
      case 51335:                   // 'false' 'contains'
      case 51397:                   // 'null' 'contains'
      case 51455:                   // 'true' 'contains'
      case 54407:                   // 'false' 'count'
      case 54469:                   // 'null' 'count'
      case 54527:                   // 'true' 'count'
      case 56455:                   // 'false' 'default'
      case 56517:                   // 'null' 'default'
      case 56575:                   // 'true' 'default'
      case 58503:                   // 'false' 'descending'
      case 58565:                   // 'null' 'descending'
      case 58623:                   // 'true' 'descending'
      case 61063:                   // 'false' 'div'
      case 61125:                   // 'null' 'div'
      case 61183:                   // 'true' 'div'
      case 63111:                   // 'false' 'else'
      case 63173:                   // 'null' 'else'
      case 63231:                   // 'true' 'else'
      case 63623:                   // 'false' 'empty'
      case 63685:                   // 'null' 'empty'
      case 63743:                   // 'true' 'empty'
      case 65159:                   // 'false' 'end'
      case 65221:                   // 'null' 'end'
      case 65279:                   // 'true' 'end'
      case 66183:                   // 'false' 'eq'
      case 66245:                   // 'null' 'eq'
      case 66303:                   // 'true' 'eq'
      case 67719:                   // 'false' 'except'
      case 67781:                   // 'null' 'except'
      case 67839:                   // 'true' 'except'
      case 71303:                   // 'false' 'for'
      case 71365:                   // 'null' 'for'
      case 71423:                   // 'true' 'for'
      case 75911:                   // 'false' 'ge'
      case 75973:                   // 'null' 'ge'
      case 76031:                   // 'true' 'ge'
      case 76935:                   // 'false' 'group'
      case 76997:                   // 'null' 'group'
      case 77055:                   // 'true' 'group'
      case 77959:                   // 'false' 'gt'
      case 78021:                   // 'null' 'gt'
      case 78079:                   // 'true' 'gt'
      case 78471:                   // 'false' 'idiv'
      case 78533:                   // 'null' 'idiv'
      case 78591:                   // 'true' 'idiv'
      case 83079:                   // 'false' 'instance'
      case 83141:                   // 'null' 'instance'
      case 83199:                   // 'true' 'instance'
      case 84103:                   // 'false' 'intersect'
      case 84165:                   // 'null' 'intersect'
      case 84223:                   // 'true' 'intersect'
      case 84615:                   // 'false' 'into'
      case 84677:                   // 'null' 'into'
      case 84735:                   // 'true' 'into'
      case 85127:                   // 'false' 'is'
      case 85189:                   // 'null' 'is'
      case 85247:                   // 'true' 'is'
      case 89735:                   // 'false' 'le'
      case 89797:                   // 'null' 'le'
      case 89855:                   // 'true' 'le'
      case 90759:                   // 'false' 'let'
      case 90821:                   // 'null' 'let'
      case 90879:                   // 'true' 'let'
      case 92807:                   // 'false' 'lt'
      case 92869:                   // 'null' 'lt'
      case 92927:                   // 'true' 'lt'
      case 93831:                   // 'false' 'mod'
      case 93893:                   // 'null' 'mod'
      case 93951:                   // 'true' 'mod'
      case 94343:                   // 'false' 'modify'
      case 94405:                   // 'null' 'modify'
      case 94463:                   // 'true' 'modify'
      case 96903:                   // 'false' 'ne'
      case 96965:                   // 'null' 'ne'
      case 97023:                   // 'true' 'ne'
      case 103559:                  // 'false' 'only'
      case 103621:                  // 'null' 'only'
      case 103679:                  // 'true' 'only'
      case 104583:                  // 'false' 'or'
      case 104645:                  // 'null' 'or'
      case 104703:                  // 'true' 'or'
      case 105095:                  // 'false' 'order'
      case 105157:                  // 'null' 'order'
      case 105215:                  // 'true' 'order'
      case 107143:                  // 'false' 'paragraphs'
      case 107205:                  // 'null' 'paragraphs'
      case 107263:                  // 'true' 'paragraphs'
      case 114823:                  // 'false' 'return'
      case 114885:                  // 'null' 'return'
      case 114943:                  // 'true' 'return'
      case 116871:                  // 'false' 'satisfies'
      case 116933:                  // 'null' 'satisfies'
      case 116991:                  // 'true' 'satisfies'
      case 121479:                  // 'false' 'sentences'
      case 121541:                  // 'null' 'sentences'
      case 121599:                  // 'true' 'sentences'
      case 123527:                  // 'false' 'stable'
      case 123589:                  // 'null' 'stable'
      case 123647:                  // 'true' 'stable'
      case 124039:                  // 'false' 'start'
      case 124101:                  // 'null' 'start'
      case 124159:                  // 'true' 'start'
      case 129159:                  // 'false' 'times'
      case 129221:                  // 'null' 'times'
      case 129279:                  // 'true' 'times'
      case 129671:                  // 'false' 'to'
      case 129733:                  // 'null' 'to'
      case 129791:                  // 'true' 'to'
      case 130183:                  // 'false' 'treat'
      case 130245:                  // 'null' 'treat'
      case 130303:                  // 'true' 'treat'
      case 133255:                  // 'false' 'union'
      case 133317:                  // 'null' 'union'
      case 133375:                  // 'true' 'union'
      case 139399:                  // 'false' 'where'
      case 139461:                  // 'null' 'where'
      case 139519:                  // 'true' 'where'
      case 141447:                  // 'false' 'with'
      case 141509:                  // 'null' 'with'
      case 141567:                  // 'true' 'with'
      case 142983:                  // 'false' 'words'
      case 143045:                  // 'null' 'words'
      case 143103:                  // 'true' 'words'
      case 145543:                  // 'false' '|'
      case 145605:                  // 'null' '|'
      case 145663:                  // 'true' '|'
      case 146055:                  // 'false' '||'
      case 146117:                  // 'null' '||'
      case 146175:                  // 'true' '||'
      case 146567:                  // 'false' '|}'
      case 146629:                  // 'null' '|}'
      case 146687:                  // 'true' '|}'
      case 147079:                  // 'false' '}'
      case 147141:                  // 'null' '}'
      case 147199:                  // 'true' '}'
        this.parse_Literal();
        break;
      case 31:                      // '$'
        this.parse_VarRef();
        break;
      case 35:                      // '('
        this.parse_ParenthesizedExpr();
        break;
      case 32:                      // '$$'
        this.parse_ContextItemExpr();
        break;
      case -5:
      case 17926:                   // EQName^Token '('
      case 17991:                   // 'after' '('
      case 17993:                   // 'allowing' '('
      case 17994:                   // 'ancestor' '('
      case 17995:                   // 'ancestor-or-self' '('
      case 17996:                   // 'and' '('
      case 17998:                   // 'append' '('
      case 18000:                   // 'as' '('
      case 18001:                   // 'ascending' '('
      case 18002:                   // 'at' '('
      case 18004:                   // 'base-uri' '('
      case 18005:                   // 'before' '('
      case 18006:                   // 'boundary-space' '('
      case 18007:                   // 'break' '('
      case 18009:                   // 'case' '('
      case 18010:                   // 'cast' '('
      case 18011:                   // 'castable' '('
      case 18012:                   // 'catch' '('
      case 18014:                   // 'child' '('
      case 18015:                   // 'collation' '('
      case 18018:                   // 'constraint' '('
      case 18019:                   // 'construction' '('
      case 18022:                   // 'context' '('
      case 18023:                   // 'continue' '('
      case 18024:                   // 'copy' '('
      case 18025:                   // 'copy-namespaces' '('
      case 18026:                   // 'count' '('
      case 18027:                   // 'decimal-format' '('
      case 18029:                   // 'declare' '('
      case 18030:                   // 'default' '('
      case 18031:                   // 'delete' '('
      case 18032:                   // 'descendant' '('
      case 18033:                   // 'descendant-or-self' '('
      case 18034:                   // 'descending' '('
      case 18039:                   // 'div' '('
      case 18040:                   // 'document' '('
      case 18043:                   // 'else' '('
      case 18044:                   // 'empty' '('
      case 18046:                   // 'encoding' '('
      case 18047:                   // 'end' '('
      case 18049:                   // 'eq' '('
      case 18050:                   // 'every' '('
      case 18052:                   // 'except' '('
      case 18053:                   // 'exit' '('
      case 18054:                   // 'external' '('
      case 18056:                   // 'first' '('
      case 18057:                   // 'following' '('
      case 18058:                   // 'following-sibling' '('
      case 18059:                   // 'for' '('
      case 18062:                   // 'from' '('
      case 18063:                   // 'ft-option' '('
      case 18068:                   // 'ge' '('
      case 18070:                   // 'group' '('
      case 18072:                   // 'gt' '('
      case 18073:                   // 'idiv' '('
      case 18075:                   // 'import' '('
      case 18076:                   // 'in' '('
      case 18077:                   // 'index' '('
      case 18081:                   // 'insert' '('
      case 18082:                   // 'instance' '('
      case 18083:                   // 'integrity' '('
      case 18084:                   // 'intersect' '('
      case 18085:                   // 'into' '('
      case 18086:                   // 'is' '('
      case 18088:                   // 'json' '('
      case 18090:                   // 'jsoniq' '('
      case 18093:                   // 'last' '('
      case 18094:                   // 'lax' '('
      case 18095:                   // 'le' '('
      case 18097:                   // 'let' '('
      case 18099:                   // 'loop' '('
      case 18101:                   // 'lt' '('
      case 18103:                   // 'mod' '('
      case 18104:                   // 'modify' '('
      case 18105:                   // 'module' '('
      case 18107:                   // 'namespace' '('
      case 18109:                   // 'ne' '('
      case 18115:                   // 'nodes' '('
      case 18118:                   // 'object' '('
      case 18122:                   // 'only' '('
      case 18123:                   // 'option' '('
      case 18124:                   // 'or' '('
      case 18125:                   // 'order' '('
      case 18126:                   // 'ordered' '('
      case 18127:                   // 'ordering' '('
      case 18130:                   // 'parent' '('
      case 18136:                   // 'preceding' '('
      case 18137:                   // 'preceding-sibling' '('
      case 18142:                   // 'rename' '('
      case 18143:                   // 'replace' '('
      case 18144:                   // 'return' '('
      case 18145:                   // 'returning' '('
      case 18146:                   // 'revalidation' '('
      case 18148:                   // 'satisfies' '('
      case 18149:                   // 'schema' '('
      case 18152:                   // 'score' '('
      case 18153:                   // 'select' '('
      case 18154:                   // 'self' '('
      case 18159:                   // 'sliding' '('
      case 18160:                   // 'some' '('
      case 18161:                   // 'stable' '('
      case 18162:                   // 'start' '('
      case 18165:                   // 'strict' '('
      case 18173:                   // 'to' '('
      case 18174:                   // 'treat' '('
      case 18176:                   // 'try' '('
      case 18177:                   // 'tumbling' '('
      case 18178:                   // 'type' '('
      case 18180:                   // 'union' '('
      case 18182:                   // 'unordered' '('
      case 18183:                   // 'updating' '('
      case 18186:                   // 'validate' '('
      case 18187:                   // 'value' '('
      case 18188:                   // 'variable' '('
      case 18189:                   // 'version' '('
      case 18192:                   // 'where' '('
      case 18193:                   // 'while' '('
      case 18196:                   // 'with' '('
        this.parse_FunctionCall();
        break;
      case 144078:                  // 'ordered' '{'
        this.parse_OrderedExpr();
        break;
      case 144134:                  // 'unordered' '{'
        this.parse_UnorderedExpr();
        break;
      case 33:                      // '%'
      case 79:                      // 'array'
      case 121:                     // 'document-node'
      case 125:                     // 'empty-sequence'
      case 147:                     // 'function'
      case 154:                     // 'if'
      case 167:                     // 'item'
      case 169:                     // 'json-item'
      case 188:                     // 'namespace-node'
      case 194:                     // 'node'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
      case 247:                     // 'structured-item'
      case 248:                     // 'switch'
      case 259:                     // 'typeswitch'
      case 14854:                   // EQName^Token '#'
      case 14919:                   // 'after' '#'
      case 14921:                   // 'allowing' '#'
      case 14922:                   // 'ancestor' '#'
      case 14923:                   // 'ancestor-or-self' '#'
      case 14924:                   // 'and' '#'
      case 14926:                   // 'append' '#'
      case 14928:                   // 'as' '#'
      case 14929:                   // 'ascending' '#'
      case 14930:                   // 'at' '#'
      case 14931:                   // 'attribute' '#'
      case 14932:                   // 'base-uri' '#'
      case 14933:                   // 'before' '#'
      case 14934:                   // 'boundary-space' '#'
      case 14935:                   // 'break' '#'
      case 14937:                   // 'case' '#'
      case 14938:                   // 'cast' '#'
      case 14939:                   // 'castable' '#'
      case 14940:                   // 'catch' '#'
      case 14942:                   // 'child' '#'
      case 14943:                   // 'collation' '#'
      case 14945:                   // 'comment' '#'
      case 14946:                   // 'constraint' '#'
      case 14947:                   // 'construction' '#'
      case 14950:                   // 'context' '#'
      case 14951:                   // 'continue' '#'
      case 14952:                   // 'copy' '#'
      case 14953:                   // 'copy-namespaces' '#'
      case 14954:                   // 'count' '#'
      case 14955:                   // 'decimal-format' '#'
      case 14957:                   // 'declare' '#'
      case 14958:                   // 'default' '#'
      case 14959:                   // 'delete' '#'
      case 14960:                   // 'descendant' '#'
      case 14961:                   // 'descendant-or-self' '#'
      case 14962:                   // 'descending' '#'
      case 14967:                   // 'div' '#'
      case 14968:                   // 'document' '#'
      case 14970:                   // 'element' '#'
      case 14971:                   // 'else' '#'
      case 14972:                   // 'empty' '#'
      case 14974:                   // 'encoding' '#'
      case 14975:                   // 'end' '#'
      case 14977:                   // 'eq' '#'
      case 14978:                   // 'every' '#'
      case 14980:                   // 'except' '#'
      case 14981:                   // 'exit' '#'
      case 14982:                   // 'external' '#'
      case 14983:                   // 'false' '#'
      case 14984:                   // 'first' '#'
      case 14985:                   // 'following' '#'
      case 14986:                   // 'following-sibling' '#'
      case 14987:                   // 'for' '#'
      case 14990:                   // 'from' '#'
      case 14991:                   // 'ft-option' '#'
      case 14996:                   // 'ge' '#'
      case 14998:                   // 'group' '#'
      case 15000:                   // 'gt' '#'
      case 15001:                   // 'idiv' '#'
      case 15003:                   // 'import' '#'
      case 15004:                   // 'in' '#'
      case 15005:                   // 'index' '#'
      case 15009:                   // 'insert' '#'
      case 15010:                   // 'instance' '#'
      case 15011:                   // 'integrity' '#'
      case 15012:                   // 'intersect' '#'
      case 15013:                   // 'into' '#'
      case 15014:                   // 'is' '#'
      case 15016:                   // 'json' '#'
      case 15018:                   // 'jsoniq' '#'
      case 15021:                   // 'last' '#'
      case 15022:                   // 'lax' '#'
      case 15023:                   // 'le' '#'
      case 15025:                   // 'let' '#'
      case 15027:                   // 'loop' '#'
      case 15029:                   // 'lt' '#'
      case 15031:                   // 'mod' '#'
      case 15032:                   // 'modify' '#'
      case 15033:                   // 'module' '#'
      case 15035:                   // 'namespace' '#'
      case 15037:                   // 'ne' '#'
      case 15043:                   // 'nodes' '#'
      case 15045:                   // 'null' '#'
      case 15046:                   // 'object' '#'
      case 15050:                   // 'only' '#'
      case 15051:                   // 'option' '#'
      case 15052:                   // 'or' '#'
      case 15053:                   // 'order' '#'
      case 15054:                   // 'ordered' '#'
      case 15055:                   // 'ordering' '#'
      case 15058:                   // 'parent' '#'
      case 15064:                   // 'preceding' '#'
      case 15065:                   // 'preceding-sibling' '#'
      case 15068:                   // 'processing-instruction' '#'
      case 15070:                   // 'rename' '#'
      case 15071:                   // 'replace' '#'
      case 15072:                   // 'return' '#'
      case 15073:                   // 'returning' '#'
      case 15074:                   // 'revalidation' '#'
      case 15076:                   // 'satisfies' '#'
      case 15077:                   // 'schema' '#'
      case 15080:                   // 'score' '#'
      case 15081:                   // 'select' '#'
      case 15082:                   // 'self' '#'
      case 15087:                   // 'sliding' '#'
      case 15088:                   // 'some' '#'
      case 15089:                   // 'stable' '#'
      case 15090:                   // 'start' '#'
      case 15093:                   // 'strict' '#'
      case 15097:                   // 'text' '#'
      case 15101:                   // 'to' '#'
      case 15102:                   // 'treat' '#'
      case 15103:                   // 'true' '#'
      case 15104:                   // 'try' '#'
      case 15105:                   // 'tumbling' '#'
      case 15106:                   // 'type' '#'
      case 15108:                   // 'union' '#'
      case 15110:                   // 'unordered' '#'
      case 15111:                   // 'updating' '#'
      case 15114:                   // 'validate' '#'
      case 15115:                   // 'value' '#'
      case 15116:                   // 'variable' '#'
      case 15117:                   // 'version' '#'
      case 15120:                   // 'where' '#'
      case 15121:                   // 'while' '#'
      case 15124:                   // 'with' '#'
        this.parse_FunctionItemExpr();
        break;
      case -10:
      case 27929:                   // '{' ';'
        this.parse_BlockExpr();
        break;
      case -11:
      case 10009:                   // '{' NCName^Token
        this.parse_ObjectConstructor();
        break;
      case 69:                      // '['
        this.parse_ArrayConstructor();
        break;
      case 283:                     // '{|'
        this.parse_JSONSimpleObjectUnion();
        break;
      default:
        this.parse_Constructor();
      }
      this.eventHandler.endNonterminal("PrimaryExpr", this.e0);
    }

    private try_PrimaryExpr()
    {
      switch (this.token())
      {
      case 187:                     // 'namespace'
        this.lookahead2W(247);      // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 220:                     // 'processing-instruction'
        this.lookahead2W(245);      // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 281:                     // '{'
        this.lookahead2W(283);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        break;
      case 83:                      // 'attribute'
      case 122:                     // 'element'
        this.lookahead2W(253);      // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
        break;
      case 97:                      // 'comment'
      case 249:                     // 'text'
        this.lookahead2W(97);       // S^WS | '#' | '(:' | '{'
        break;
      case 120:                     // 'document'
      case 206:                     // 'ordered'
      case 262:                     // 'unordered'
        this.lookahead2W(148);      // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 135:                     // 'false'
      case 197:                     // 'null'
      case 255:                     // 'true'
        this.lookahead2W(237);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
        break;
      case 6:                       // EQName^Token
      case 71:                      // 'after'
      case 73:                      // 'allowing'
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 76:                      // 'and'
      case 78:                      // 'append'
      case 80:                      // 'as'
      case 81:                      // 'ascending'
      case 82:                      // 'at'
      case 84:                      // 'base-uri'
      case 85:                      // 'before'
      case 86:                      // 'boundary-space'
      case 87:                      // 'break'
      case 89:                      // 'case'
      case 90:                      // 'cast'
      case 91:                      // 'castable'
      case 92:                      // 'catch'
      case 94:                      // 'child'
      case 95:                      // 'collation'
      case 98:                      // 'constraint'
      case 99:                      // 'construction'
      case 102:                     // 'context'
      case 103:                     // 'continue'
      case 104:                     // 'copy'
      case 105:                     // 'copy-namespaces'
      case 106:                     // 'count'
      case 107:                     // 'decimal-format'
      case 109:                     // 'declare'
      case 110:                     // 'default'
      case 111:                     // 'delete'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 114:                     // 'descending'
      case 119:                     // 'div'
      case 123:                     // 'else'
      case 124:                     // 'empty'
      case 126:                     // 'encoding'
      case 127:                     // 'end'
      case 129:                     // 'eq'
      case 130:                     // 'every'
      case 132:                     // 'except'
      case 133:                     // 'exit'
      case 134:                     // 'external'
      case 136:                     // 'first'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 139:                     // 'for'
      case 142:                     // 'from'
      case 143:                     // 'ft-option'
      case 148:                     // 'ge'
      case 150:                     // 'group'
      case 152:                     // 'gt'
      case 153:                     // 'idiv'
      case 155:                     // 'import'
      case 156:                     // 'in'
      case 157:                     // 'index'
      case 161:                     // 'insert'
      case 162:                     // 'instance'
      case 163:                     // 'integrity'
      case 164:                     // 'intersect'
      case 165:                     // 'into'
      case 166:                     // 'is'
      case 168:                     // 'json'
      case 170:                     // 'jsoniq'
      case 173:                     // 'last'
      case 174:                     // 'lax'
      case 175:                     // 'le'
      case 177:                     // 'let'
      case 179:                     // 'loop'
      case 181:                     // 'lt'
      case 183:                     // 'mod'
      case 184:                     // 'modify'
      case 185:                     // 'module'
      case 189:                     // 'ne'
      case 195:                     // 'nodes'
      case 198:                     // 'object'
      case 202:                     // 'only'
      case 203:                     // 'option'
      case 204:                     // 'or'
      case 205:                     // 'order'
      case 207:                     // 'ordering'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
      case 222:                     // 'rename'
      case 223:                     // 'replace'
      case 224:                     // 'return'
      case 225:                     // 'returning'
      case 226:                     // 'revalidation'
      case 228:                     // 'satisfies'
      case 229:                     // 'schema'
      case 232:                     // 'score'
      case 233:                     // 'select'
      case 234:                     // 'self'
      case 239:                     // 'sliding'
      case 240:                     // 'some'
      case 241:                     // 'stable'
      case 242:                     // 'start'
      case 245:                     // 'strict'
      case 253:                     // 'to'
      case 254:                     // 'treat'
      case 256:                     // 'try'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 266:                     // 'validate'
      case 267:                     // 'value'
      case 268:                     // 'variable'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
        this.lookahead2W(95);       // S^WS | '#' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 3353  // '{' EQName^Token
       || this.tokenSequence() == 4377  // '{' IntegerLiteral
       || this.tokenSequence() == 4889  // '{' DecimalLiteral
       || this.tokenSequence() == 5401  // '{' DoubleLiteral
       || this.tokenSequence() == 5913  // '{' StringLiteral
       || this.tokenSequence() == 16153 // '{' '$'
       || this.tokenSequence() == 16665 // '{' '$$'
       || this.tokenSequence() == 17177 // '{' '%'
       || this.tokenSequence() == 18055 // 'false' '('
       || this.tokenSequence() == 18117 // 'null' '('
       || this.tokenSequence() == 18175 // 'true' '('
       || this.tokenSequence() == 18201 // '{' '('
       || this.tokenSequence() == 18713 // '{' '(#'
       || this.tokenSequence() == 21273 // '{' '+'
       || this.tokenSequence() == 22297 // '{' '-'
       || this.tokenSequence() == 24345 // '{' '/'
       || this.tokenSequence() == 24857 // '{' '//'
       || this.tokenSequence() == 28441 // '{' '<'
       || this.tokenSequence() == 28953 // '{' '<!--'
       || this.tokenSequence() == 31001 // '{' '<?'
       || this.tokenSequence() == 35609 // '{' '['
       || this.tokenSequence() == 36633 // '{' 'after'
       || this.tokenSequence() == 37657 // '{' 'allowing'
       || this.tokenSequence() == 38169 // '{' 'ancestor'
       || this.tokenSequence() == 38681 // '{' 'ancestor-or-self'
       || this.tokenSequence() == 39193 // '{' 'and'
       || this.tokenSequence() == 40217 // '{' 'append'
       || this.tokenSequence() == 40729 // '{' 'array'
       || this.tokenSequence() == 41241 // '{' 'as'
       || this.tokenSequence() == 41753 // '{' 'ascending'
       || this.tokenSequence() == 42265 // '{' 'at'
       || this.tokenSequence() == 42777 // '{' 'attribute'
       || this.tokenSequence() == 43289 // '{' 'base-uri'
       || this.tokenSequence() == 43801 // '{' 'before'
       || this.tokenSequence() == 44313 // '{' 'boundary-space'
       || this.tokenSequence() == 44825 // '{' 'break'
       || this.tokenSequence() == 45849 // '{' 'case'
       || this.tokenSequence() == 46361 // '{' 'cast'
       || this.tokenSequence() == 46873 // '{' 'castable'
       || this.tokenSequence() == 47385 // '{' 'catch'
       || this.tokenSequence() == 48409 // '{' 'child'
       || this.tokenSequence() == 48921 // '{' 'collation'
       || this.tokenSequence() == 49945 // '{' 'comment'
       || this.tokenSequence() == 50457 // '{' 'constraint'
       || this.tokenSequence() == 50969 // '{' 'construction'
       || this.tokenSequence() == 52505 // '{' 'context'
       || this.tokenSequence() == 53017 // '{' 'continue'
       || this.tokenSequence() == 53529 // '{' 'copy'
       || this.tokenSequence() == 54041 // '{' 'copy-namespaces'
       || this.tokenSequence() == 54553 // '{' 'count'
       || this.tokenSequence() == 55065 // '{' 'decimal-format'
       || this.tokenSequence() == 56089 // '{' 'declare'
       || this.tokenSequence() == 56601 // '{' 'default'
       || this.tokenSequence() == 57113 // '{' 'delete'
       || this.tokenSequence() == 57625 // '{' 'descendant'
       || this.tokenSequence() == 58137 // '{' 'descendant-or-self'
       || this.tokenSequence() == 58649 // '{' 'descending'
       || this.tokenSequence() == 61209 // '{' 'div'
       || this.tokenSequence() == 61721 // '{' 'document'
       || this.tokenSequence() == 62233 // '{' 'document-node'
       || this.tokenSequence() == 62745 // '{' 'element'
       || this.tokenSequence() == 63257 // '{' 'else'
       || this.tokenSequence() == 63769 // '{' 'empty'
       || this.tokenSequence() == 64281 // '{' 'empty-sequence'
       || this.tokenSequence() == 64793 // '{' 'encoding'
       || this.tokenSequence() == 65305 // '{' 'end'
       || this.tokenSequence() == 66329 // '{' 'eq'
       || this.tokenSequence() == 66841 // '{' 'every'
       || this.tokenSequence() == 67865 // '{' 'except'
       || this.tokenSequence() == 68377 // '{' 'exit'
       || this.tokenSequence() == 68889 // '{' 'external'
       || this.tokenSequence() == 69401 // '{' 'false'
       || this.tokenSequence() == 69913 // '{' 'first'
       || this.tokenSequence() == 70425 // '{' 'following'
       || this.tokenSequence() == 70937 // '{' 'following-sibling'
       || this.tokenSequence() == 71449 // '{' 'for'
       || this.tokenSequence() == 72985 // '{' 'from'
       || this.tokenSequence() == 73497 // '{' 'ft-option'
       || this.tokenSequence() == 75545 // '{' 'function'
       || this.tokenSequence() == 76057 // '{' 'ge'
       || this.tokenSequence() == 77081 // '{' 'group'
       || this.tokenSequence() == 78105 // '{' 'gt'
       || this.tokenSequence() == 78617 // '{' 'idiv'
       || this.tokenSequence() == 79129 // '{' 'if'
       || this.tokenSequence() == 79641 // '{' 'import'
       || this.tokenSequence() == 80153 // '{' 'in'
       || this.tokenSequence() == 80665 // '{' 'index'
       || this.tokenSequence() == 82713 // '{' 'insert'
       || this.tokenSequence() == 83225 // '{' 'instance'
       || this.tokenSequence() == 83737 // '{' 'integrity'
       || this.tokenSequence() == 84249 // '{' 'intersect'
       || this.tokenSequence() == 84761 // '{' 'into'
       || this.tokenSequence() == 85273 // '{' 'is'
       || this.tokenSequence() == 85785 // '{' 'item'
       || this.tokenSequence() == 86297 // '{' 'json'
       || this.tokenSequence() == 86809 // '{' 'json-item'
       || this.tokenSequence() == 87321 // '{' 'jsoniq'
       || this.tokenSequence() == 88857 // '{' 'last'
       || this.tokenSequence() == 89369 // '{' 'lax'
       || this.tokenSequence() == 89881 // '{' 'le'
       || this.tokenSequence() == 90905 // '{' 'let'
       || this.tokenSequence() == 91929 // '{' 'loop'
       || this.tokenSequence() == 92953 // '{' 'lt'
       || this.tokenSequence() == 93977 // '{' 'mod'
       || this.tokenSequence() == 94489 // '{' 'modify'
       || this.tokenSequence() == 95001 // '{' 'module'
       || this.tokenSequence() == 96025 // '{' 'namespace'
       || this.tokenSequence() == 96537 // '{' 'namespace-node'
       || this.tokenSequence() == 97049 // '{' 'ne'
       || this.tokenSequence() == 99609 // '{' 'node'
       || this.tokenSequence() == 100121  // '{' 'nodes'
       || this.tokenSequence() == 100633  // '{' 'not'
       || this.tokenSequence() == 101145  // '{' 'null'
       || this.tokenSequence() == 101657  // '{' 'object'
       || this.tokenSequence() == 103705  // '{' 'only'
       || this.tokenSequence() == 104217  // '{' 'option'
       || this.tokenSequence() == 104729  // '{' 'or'
       || this.tokenSequence() == 105241  // '{' 'order'
       || this.tokenSequence() == 105753  // '{' 'ordered'
       || this.tokenSequence() == 106265  // '{' 'ordering'
       || this.tokenSequence() == 107801  // '{' 'parent'
       || this.tokenSequence() == 110873  // '{' 'preceding'
       || this.tokenSequence() == 111385  // '{' 'preceding-sibling'
       || this.tokenSequence() == 112921  // '{' 'processing-instruction'
       || this.tokenSequence() == 113945  // '{' 'rename'
       || this.tokenSequence() == 114457  // '{' 'replace'
       || this.tokenSequence() == 114969  // '{' 'return'
       || this.tokenSequence() == 115481  // '{' 'returning'
       || this.tokenSequence() == 115993  // '{' 'revalidation'
       || this.tokenSequence() == 117017  // '{' 'satisfies'
       || this.tokenSequence() == 117529  // '{' 'schema'
       || this.tokenSequence() == 118041  // '{' 'schema-attribute'
       || this.tokenSequence() == 118553  // '{' 'schema-element'
       || this.tokenSequence() == 119065  // '{' 'score'
       || this.tokenSequence() == 119577  // '{' 'select'
       || this.tokenSequence() == 120089  // '{' 'self'
       || this.tokenSequence() == 122649  // '{' 'sliding'
       || this.tokenSequence() == 123161  // '{' 'some'
       || this.tokenSequence() == 123673  // '{' 'stable'
       || this.tokenSequence() == 124185  // '{' 'start'
       || this.tokenSequence() == 125721  // '{' 'strict'
       || this.tokenSequence() == 126745  // '{' 'structured-item'
       || this.tokenSequence() == 127257  // '{' 'switch'
       || this.tokenSequence() == 127769  // '{' 'text'
       || this.tokenSequence() == 129817  // '{' 'to'
       || this.tokenSequence() == 130329  // '{' 'treat'
       || this.tokenSequence() == 130841  // '{' 'true'
       || this.tokenSequence() == 131353  // '{' 'try'
       || this.tokenSequence() == 131865  // '{' 'tumbling'
       || this.tokenSequence() == 132377  // '{' 'type'
       || this.tokenSequence() == 132889  // '{' 'typeswitch'
       || this.tokenSequence() == 133401  // '{' 'union'
       || this.tokenSequence() == 134425  // '{' 'unordered'
       || this.tokenSequence() == 134937  // '{' 'updating'
       || this.tokenSequence() == 136473  // '{' 'validate'
       || this.tokenSequence() == 136985  // '{' 'value'
       || this.tokenSequence() == 137497  // '{' 'variable'
       || this.tokenSequence() == 138009  // '{' 'version'
       || this.tokenSequence() == 139545  // '{' 'where'
       || this.tokenSequence() == 140057  // '{' 'while'
       || this.tokenSequence() == 141593  // '{' 'with'
       || this.tokenSequence() == 144153  // '{' '{'
       || this.tokenSequence() == 145177  // '{' '{|'
       || this.tokenSequence() == 147225) // '{' '}'
      {
        this.lk = this.memoized(20, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_Literal();
            this.memoize(20, e0A, -1);
            this.lk = -14;
          }
          catch (p1A)
          {
            try
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.try_FunctionCall();
              this.memoize(20, e0A, -5);
              this.lk = -14;
            }
            catch (p5A)
            {
              try
              {
                this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                this.try_BlockExpr();
                this.memoize(20, e0A, -10);
                this.lk = -14;
              }
              catch (p10A)
              {
                this.lk = -11;
                this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                this.memoize(20, e0A, -11);
              }
            }
          }
        }
      }
      switch (this.tokenSequence())
      {
      case -1:
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 12935:                   // 'false' EOF
      case 12997:                   // 'null' EOF
      case 13055:                   // 'true' EOF
      case 13447:                   // 'false' '!'
      case 13509:                   // 'null' '!'
      case 13567:                   // 'true' '!'
      case 13959:                   // 'false' '!='
      case 14021:                   // 'null' '!='
      case 14079:                   // 'true' '!='
      case 19591:                   // 'false' ')'
      case 19653:                   // 'null' ')'
      case 19711:                   // 'true' ')'
      case 20103:                   // 'false' '*'
      case 20165:                   // 'null' '*'
      case 20223:                   // 'true' '*'
      case 21127:                   // 'false' '+'
      case 21189:                   // 'null' '+'
      case 21247:                   // 'true' '+'
      case 21639:                   // 'false' ','
      case 21701:                   // 'null' ','
      case 21759:                   // 'true' ','
      case 22151:                   // 'false' '-'
      case 22213:                   // 'null' '-'
      case 22271:                   // 'true' '-'
      case 23175:                   // 'false' '.'
      case 23237:                   // 'null' '.'
      case 23295:                   // 'true' '.'
      case 24199:                   // 'false' '/'
      case 24261:                   // 'null' '/'
      case 24319:                   // 'true' '/'
      case 24711:                   // 'false' '//'
      case 24773:                   // 'null' '//'
      case 24831:                   // 'true' '//'
      case 25735:                   // 'false' ':'
      case 25797:                   // 'null' ':'
      case 25855:                   // 'true' ':'
      case 27783:                   // 'false' ';'
      case 27845:                   // 'null' ';'
      case 27903:                   // 'true' ';'
      case 28295:                   // 'false' '<'
      case 28357:                   // 'null' '<'
      case 28415:                   // 'true' '<'
      case 29831:                   // 'false' '<<'
      case 29893:                   // 'null' '<<'
      case 29951:                   // 'true' '<<'
      case 30343:                   // 'false' '<='
      case 30405:                   // 'null' '<='
      case 30463:                   // 'true' '<='
      case 31367:                   // 'false' '='
      case 31429:                   // 'null' '='
      case 31487:                   // 'true' '='
      case 31879:                   // 'false' '>'
      case 31941:                   // 'null' '>'
      case 31999:                   // 'true' '>'
      case 32391:                   // 'false' '>='
      case 32453:                   // 'null' '>='
      case 32511:                   // 'true' '>='
      case 32903:                   // 'false' '>>'
      case 32965:                   // 'null' '>>'
      case 33023:                   // 'true' '>>'
      case 35463:                   // 'false' '['
      case 35525:                   // 'null' '['
      case 35583:                   // 'true' '['
      case 35975:                   // 'false' ']'
      case 36037:                   // 'null' ']'
      case 36095:                   // 'true' ']'
      case 36487:                   // 'false' 'after'
      case 36549:                   // 'null' 'after'
      case 36607:                   // 'true' 'after'
      case 39047:                   // 'false' 'and'
      case 39109:                   // 'null' 'and'
      case 39167:                   // 'true' 'and'
      case 41095:                   // 'false' 'as'
      case 41157:                   // 'null' 'as'
      case 41215:                   // 'true' 'as'
      case 41607:                   // 'false' 'ascending'
      case 41669:                   // 'null' 'ascending'
      case 41727:                   // 'true' 'ascending'
      case 42119:                   // 'false' 'at'
      case 42181:                   // 'null' 'at'
      case 42239:                   // 'true' 'at'
      case 43655:                   // 'false' 'before'
      case 43717:                   // 'null' 'before'
      case 43775:                   // 'true' 'before'
      case 45191:                   // 'false' 'by'
      case 45253:                   // 'null' 'by'
      case 45311:                   // 'true' 'by'
      case 45703:                   // 'false' 'case'
      case 45765:                   // 'null' 'case'
      case 45823:                   // 'true' 'case'
      case 46215:                   // 'false' 'cast'
      case 46277:                   // 'null' 'cast'
      case 46335:                   // 'true' 'cast'
      case 46727:                   // 'false' 'castable'
      case 46789:                   // 'null' 'castable'
      case 46847:                   // 'true' 'castable'
      case 48775:                   // 'false' 'collation'
      case 48837:                   // 'null' 'collation'
      case 48895:                   // 'true' 'collation'
      case 51335:                   // 'false' 'contains'
      case 51397:                   // 'null' 'contains'
      case 51455:                   // 'true' 'contains'
      case 54407:                   // 'false' 'count'
      case 54469:                   // 'null' 'count'
      case 54527:                   // 'true' 'count'
      case 56455:                   // 'false' 'default'
      case 56517:                   // 'null' 'default'
      case 56575:                   // 'true' 'default'
      case 58503:                   // 'false' 'descending'
      case 58565:                   // 'null' 'descending'
      case 58623:                   // 'true' 'descending'
      case 61063:                   // 'false' 'div'
      case 61125:                   // 'null' 'div'
      case 61183:                   // 'true' 'div'
      case 63111:                   // 'false' 'else'
      case 63173:                   // 'null' 'else'
      case 63231:                   // 'true' 'else'
      case 63623:                   // 'false' 'empty'
      case 63685:                   // 'null' 'empty'
      case 63743:                   // 'true' 'empty'
      case 65159:                   // 'false' 'end'
      case 65221:                   // 'null' 'end'
      case 65279:                   // 'true' 'end'
      case 66183:                   // 'false' 'eq'
      case 66245:                   // 'null' 'eq'
      case 66303:                   // 'true' 'eq'
      case 67719:                   // 'false' 'except'
      case 67781:                   // 'null' 'except'
      case 67839:                   // 'true' 'except'
      case 71303:                   // 'false' 'for'
      case 71365:                   // 'null' 'for'
      case 71423:                   // 'true' 'for'
      case 75911:                   // 'false' 'ge'
      case 75973:                   // 'null' 'ge'
      case 76031:                   // 'true' 'ge'
      case 76935:                   // 'false' 'group'
      case 76997:                   // 'null' 'group'
      case 77055:                   // 'true' 'group'
      case 77959:                   // 'false' 'gt'
      case 78021:                   // 'null' 'gt'
      case 78079:                   // 'true' 'gt'
      case 78471:                   // 'false' 'idiv'
      case 78533:                   // 'null' 'idiv'
      case 78591:                   // 'true' 'idiv'
      case 83079:                   // 'false' 'instance'
      case 83141:                   // 'null' 'instance'
      case 83199:                   // 'true' 'instance'
      case 84103:                   // 'false' 'intersect'
      case 84165:                   // 'null' 'intersect'
      case 84223:                   // 'true' 'intersect'
      case 84615:                   // 'false' 'into'
      case 84677:                   // 'null' 'into'
      case 84735:                   // 'true' 'into'
      case 85127:                   // 'false' 'is'
      case 85189:                   // 'null' 'is'
      case 85247:                   // 'true' 'is'
      case 89735:                   // 'false' 'le'
      case 89797:                   // 'null' 'le'
      case 89855:                   // 'true' 'le'
      case 90759:                   // 'false' 'let'
      case 90821:                   // 'null' 'let'
      case 90879:                   // 'true' 'let'
      case 92807:                   // 'false' 'lt'
      case 92869:                   // 'null' 'lt'
      case 92927:                   // 'true' 'lt'
      case 93831:                   // 'false' 'mod'
      case 93893:                   // 'null' 'mod'
      case 93951:                   // 'true' 'mod'
      case 94343:                   // 'false' 'modify'
      case 94405:                   // 'null' 'modify'
      case 94463:                   // 'true' 'modify'
      case 96903:                   // 'false' 'ne'
      case 96965:                   // 'null' 'ne'
      case 97023:                   // 'true' 'ne'
      case 103559:                  // 'false' 'only'
      case 103621:                  // 'null' 'only'
      case 103679:                  // 'true' 'only'
      case 104583:                  // 'false' 'or'
      case 104645:                  // 'null' 'or'
      case 104703:                  // 'true' 'or'
      case 105095:                  // 'false' 'order'
      case 105157:                  // 'null' 'order'
      case 105215:                  // 'true' 'order'
      case 107143:                  // 'false' 'paragraphs'
      case 107205:                  // 'null' 'paragraphs'
      case 107263:                  // 'true' 'paragraphs'
      case 114823:                  // 'false' 'return'
      case 114885:                  // 'null' 'return'
      case 114943:                  // 'true' 'return'
      case 116871:                  // 'false' 'satisfies'
      case 116933:                  // 'null' 'satisfies'
      case 116991:                  // 'true' 'satisfies'
      case 121479:                  // 'false' 'sentences'
      case 121541:                  // 'null' 'sentences'
      case 121599:                  // 'true' 'sentences'
      case 123527:                  // 'false' 'stable'
      case 123589:                  // 'null' 'stable'
      case 123647:                  // 'true' 'stable'
      case 124039:                  // 'false' 'start'
      case 124101:                  // 'null' 'start'
      case 124159:                  // 'true' 'start'
      case 129159:                  // 'false' 'times'
      case 129221:                  // 'null' 'times'
      case 129279:                  // 'true' 'times'
      case 129671:                  // 'false' 'to'
      case 129733:                  // 'null' 'to'
      case 129791:                  // 'true' 'to'
      case 130183:                  // 'false' 'treat'
      case 130245:                  // 'null' 'treat'
      case 130303:                  // 'true' 'treat'
      case 133255:                  // 'false' 'union'
      case 133317:                  // 'null' 'union'
      case 133375:                  // 'true' 'union'
      case 139399:                  // 'false' 'where'
      case 139461:                  // 'null' 'where'
      case 139519:                  // 'true' 'where'
      case 141447:                  // 'false' 'with'
      case 141509:                  // 'null' 'with'
      case 141567:                  // 'true' 'with'
      case 142983:                  // 'false' 'words'
      case 143045:                  // 'null' 'words'
      case 143103:                  // 'true' 'words'
      case 145543:                  // 'false' '|'
      case 145605:                  // 'null' '|'
      case 145663:                  // 'true' '|'
      case 146055:                  // 'false' '||'
      case 146117:                  // 'null' '||'
      case 146175:                  // 'true' '||'
      case 146567:                  // 'false' '|}'
      case 146629:                  // 'null' '|}'
      case 146687:                  // 'true' '|}'
      case 147079:                  // 'false' '}'
      case 147141:                  // 'null' '}'
      case 147199:                  // 'true' '}'
        this.try_Literal();
        break;
      case 31:                      // '$'
        this.try_VarRef();
        break;
      case 35:                      // '('
        this.try_ParenthesizedExpr();
        break;
      case 32:                      // '$$'
        this.try_ContextItemExpr();
        break;
      case -5:
      case 17926:                   // EQName^Token '('
      case 17991:                   // 'after' '('
      case 17993:                   // 'allowing' '('
      case 17994:                   // 'ancestor' '('
      case 17995:                   // 'ancestor-or-self' '('
      case 17996:                   // 'and' '('
      case 17998:                   // 'append' '('
      case 18000:                   // 'as' '('
      case 18001:                   // 'ascending' '('
      case 18002:                   // 'at' '('
      case 18004:                   // 'base-uri' '('
      case 18005:                   // 'before' '('
      case 18006:                   // 'boundary-space' '('
      case 18007:                   // 'break' '('
      case 18009:                   // 'case' '('
      case 18010:                   // 'cast' '('
      case 18011:                   // 'castable' '('
      case 18012:                   // 'catch' '('
      case 18014:                   // 'child' '('
      case 18015:                   // 'collation' '('
      case 18018:                   // 'constraint' '('
      case 18019:                   // 'construction' '('
      case 18022:                   // 'context' '('
      case 18023:                   // 'continue' '('
      case 18024:                   // 'copy' '('
      case 18025:                   // 'copy-namespaces' '('
      case 18026:                   // 'count' '('
      case 18027:                   // 'decimal-format' '('
      case 18029:                   // 'declare' '('
      case 18030:                   // 'default' '('
      case 18031:                   // 'delete' '('
      case 18032:                   // 'descendant' '('
      case 18033:                   // 'descendant-or-self' '('
      case 18034:                   // 'descending' '('
      case 18039:                   // 'div' '('
      case 18040:                   // 'document' '('
      case 18043:                   // 'else' '('
      case 18044:                   // 'empty' '('
      case 18046:                   // 'encoding' '('
      case 18047:                   // 'end' '('
      case 18049:                   // 'eq' '('
      case 18050:                   // 'every' '('
      case 18052:                   // 'except' '('
      case 18053:                   // 'exit' '('
      case 18054:                   // 'external' '('
      case 18056:                   // 'first' '('
      case 18057:                   // 'following' '('
      case 18058:                   // 'following-sibling' '('
      case 18059:                   // 'for' '('
      case 18062:                   // 'from' '('
      case 18063:                   // 'ft-option' '('
      case 18068:                   // 'ge' '('
      case 18070:                   // 'group' '('
      case 18072:                   // 'gt' '('
      case 18073:                   // 'idiv' '('
      case 18075:                   // 'import' '('
      case 18076:                   // 'in' '('
      case 18077:                   // 'index' '('
      case 18081:                   // 'insert' '('
      case 18082:                   // 'instance' '('
      case 18083:                   // 'integrity' '('
      case 18084:                   // 'intersect' '('
      case 18085:                   // 'into' '('
      case 18086:                   // 'is' '('
      case 18088:                   // 'json' '('
      case 18090:                   // 'jsoniq' '('
      case 18093:                   // 'last' '('
      case 18094:                   // 'lax' '('
      case 18095:                   // 'le' '('
      case 18097:                   // 'let' '('
      case 18099:                   // 'loop' '('
      case 18101:                   // 'lt' '('
      case 18103:                   // 'mod' '('
      case 18104:                   // 'modify' '('
      case 18105:                   // 'module' '('
      case 18107:                   // 'namespace' '('
      case 18109:                   // 'ne' '('
      case 18115:                   // 'nodes' '('
      case 18118:                   // 'object' '('
      case 18122:                   // 'only' '('
      case 18123:                   // 'option' '('
      case 18124:                   // 'or' '('
      case 18125:                   // 'order' '('
      case 18126:                   // 'ordered' '('
      case 18127:                   // 'ordering' '('
      case 18130:                   // 'parent' '('
      case 18136:                   // 'preceding' '('
      case 18137:                   // 'preceding-sibling' '('
      case 18142:                   // 'rename' '('
      case 18143:                   // 'replace' '('
      case 18144:                   // 'return' '('
      case 18145:                   // 'returning' '('
      case 18146:                   // 'revalidation' '('
      case 18148:                   // 'satisfies' '('
      case 18149:                   // 'schema' '('
      case 18152:                   // 'score' '('
      case 18153:                   // 'select' '('
      case 18154:                   // 'self' '('
      case 18159:                   // 'sliding' '('
      case 18160:                   // 'some' '('
      case 18161:                   // 'stable' '('
      case 18162:                   // 'start' '('
      case 18165:                   // 'strict' '('
      case 18173:                   // 'to' '('
      case 18174:                   // 'treat' '('
      case 18176:                   // 'try' '('
      case 18177:                   // 'tumbling' '('
      case 18178:                   // 'type' '('
      case 18180:                   // 'union' '('
      case 18182:                   // 'unordered' '('
      case 18183:                   // 'updating' '('
      case 18186:                   // 'validate' '('
      case 18187:                   // 'value' '('
      case 18188:                   // 'variable' '('
      case 18189:                   // 'version' '('
      case 18192:                   // 'where' '('
      case 18193:                   // 'while' '('
      case 18196:                   // 'with' '('
        this.try_FunctionCall();
        break;
      case 144078:                  // 'ordered' '{'
        this.try_OrderedExpr();
        break;
      case 144134:                  // 'unordered' '{'
        this.try_UnorderedExpr();
        break;
      case 33:                      // '%'
      case 79:                      // 'array'
      case 121:                     // 'document-node'
      case 125:                     // 'empty-sequence'
      case 147:                     // 'function'
      case 154:                     // 'if'
      case 167:                     // 'item'
      case 169:                     // 'json-item'
      case 188:                     // 'namespace-node'
      case 194:                     // 'node'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
      case 247:                     // 'structured-item'
      case 248:                     // 'switch'
      case 259:                     // 'typeswitch'
      case 14854:                   // EQName^Token '#'
      case 14919:                   // 'after' '#'
      case 14921:                   // 'allowing' '#'
      case 14922:                   // 'ancestor' '#'
      case 14923:                   // 'ancestor-or-self' '#'
      case 14924:                   // 'and' '#'
      case 14926:                   // 'append' '#'
      case 14928:                   // 'as' '#'
      case 14929:                   // 'ascending' '#'
      case 14930:                   // 'at' '#'
      case 14931:                   // 'attribute' '#'
      case 14932:                   // 'base-uri' '#'
      case 14933:                   // 'before' '#'
      case 14934:                   // 'boundary-space' '#'
      case 14935:                   // 'break' '#'
      case 14937:                   // 'case' '#'
      case 14938:                   // 'cast' '#'
      case 14939:                   // 'castable' '#'
      case 14940:                   // 'catch' '#'
      case 14942:                   // 'child' '#'
      case 14943:                   // 'collation' '#'
      case 14945:                   // 'comment' '#'
      case 14946:                   // 'constraint' '#'
      case 14947:                   // 'construction' '#'
      case 14950:                   // 'context' '#'
      case 14951:                   // 'continue' '#'
      case 14952:                   // 'copy' '#'
      case 14953:                   // 'copy-namespaces' '#'
      case 14954:                   // 'count' '#'
      case 14955:                   // 'decimal-format' '#'
      case 14957:                   // 'declare' '#'
      case 14958:                   // 'default' '#'
      case 14959:                   // 'delete' '#'
      case 14960:                   // 'descendant' '#'
      case 14961:                   // 'descendant-or-self' '#'
      case 14962:                   // 'descending' '#'
      case 14967:                   // 'div' '#'
      case 14968:                   // 'document' '#'
      case 14970:                   // 'element' '#'
      case 14971:                   // 'else' '#'
      case 14972:                   // 'empty' '#'
      case 14974:                   // 'encoding' '#'
      case 14975:                   // 'end' '#'
      case 14977:                   // 'eq' '#'
      case 14978:                   // 'every' '#'
      case 14980:                   // 'except' '#'
      case 14981:                   // 'exit' '#'
      case 14982:                   // 'external' '#'
      case 14983:                   // 'false' '#'
      case 14984:                   // 'first' '#'
      case 14985:                   // 'following' '#'
      case 14986:                   // 'following-sibling' '#'
      case 14987:                   // 'for' '#'
      case 14990:                   // 'from' '#'
      case 14991:                   // 'ft-option' '#'
      case 14996:                   // 'ge' '#'
      case 14998:                   // 'group' '#'
      case 15000:                   // 'gt' '#'
      case 15001:                   // 'idiv' '#'
      case 15003:                   // 'import' '#'
      case 15004:                   // 'in' '#'
      case 15005:                   // 'index' '#'
      case 15009:                   // 'insert' '#'
      case 15010:                   // 'instance' '#'
      case 15011:                   // 'integrity' '#'
      case 15012:                   // 'intersect' '#'
      case 15013:                   // 'into' '#'
      case 15014:                   // 'is' '#'
      case 15016:                   // 'json' '#'
      case 15018:                   // 'jsoniq' '#'
      case 15021:                   // 'last' '#'
      case 15022:                   // 'lax' '#'
      case 15023:                   // 'le' '#'
      case 15025:                   // 'let' '#'
      case 15027:                   // 'loop' '#'
      case 15029:                   // 'lt' '#'
      case 15031:                   // 'mod' '#'
      case 15032:                   // 'modify' '#'
      case 15033:                   // 'module' '#'
      case 15035:                   // 'namespace' '#'
      case 15037:                   // 'ne' '#'
      case 15043:                   // 'nodes' '#'
      case 15045:                   // 'null' '#'
      case 15046:                   // 'object' '#'
      case 15050:                   // 'only' '#'
      case 15051:                   // 'option' '#'
      case 15052:                   // 'or' '#'
      case 15053:                   // 'order' '#'
      case 15054:                   // 'ordered' '#'
      case 15055:                   // 'ordering' '#'
      case 15058:                   // 'parent' '#'
      case 15064:                   // 'preceding' '#'
      case 15065:                   // 'preceding-sibling' '#'
      case 15068:                   // 'processing-instruction' '#'
      case 15070:                   // 'rename' '#'
      case 15071:                   // 'replace' '#'
      case 15072:                   // 'return' '#'
      case 15073:                   // 'returning' '#'
      case 15074:                   // 'revalidation' '#'
      case 15076:                   // 'satisfies' '#'
      case 15077:                   // 'schema' '#'
      case 15080:                   // 'score' '#'
      case 15081:                   // 'select' '#'
      case 15082:                   // 'self' '#'
      case 15087:                   // 'sliding' '#'
      case 15088:                   // 'some' '#'
      case 15089:                   // 'stable' '#'
      case 15090:                   // 'start' '#'
      case 15093:                   // 'strict' '#'
      case 15097:                   // 'text' '#'
      case 15101:                   // 'to' '#'
      case 15102:                   // 'treat' '#'
      case 15103:                   // 'true' '#'
      case 15104:                   // 'try' '#'
      case 15105:                   // 'tumbling' '#'
      case 15106:                   // 'type' '#'
      case 15108:                   // 'union' '#'
      case 15110:                   // 'unordered' '#'
      case 15111:                   // 'updating' '#'
      case 15114:                   // 'validate' '#'
      case 15115:                   // 'value' '#'
      case 15116:                   // 'variable' '#'
      case 15117:                   // 'version' '#'
      case 15120:                   // 'where' '#'
      case 15121:                   // 'while' '#'
      case 15124:                   // 'with' '#'
        this.try_FunctionItemExpr();
        break;
      case -10:
      case 27929:                   // '{' ';'
        this.try_BlockExpr();
        break;
      case -11:
      case 10009:                   // '{' NCName^Token
        this.try_ObjectConstructor();
        break;
      case 69:                      // '['
        this.try_ArrayConstructor();
        break;
      case 283:                     // '{|'
        this.try_JSONSimpleObjectUnion();
        break;
      case -14:
        break;
      default:
        this.try_Constructor();
      }
    }

    private parse_JSONSimpleObjectUnion()
    {
      this.eventHandler.startNonterminal("JSONSimpleObjectUnion", this.e0);
      this.consume(283);            // '{|'
      this.lookahead1W(274);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '|}'
      if (this.token() != 286)      // '|}'
      {
        this.whitespace();
        this.parse_Expr();
      }
      this.consume(286);            // '|}'
      this.eventHandler.endNonterminal("JSONSimpleObjectUnion", this.e0);
    }

    private try_JSONSimpleObjectUnion()
    {
      this.consumeT(283);           // '{|'
      this.lookahead1W(274);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '|}'
      if (this.token() != 286)      // '|}'
      {
        this.try_Expr();
      }
      this.consumeT(286);           // '|}'
    }

    private parse_ObjectConstructor()
    {
      this.eventHandler.startNonterminal("ObjectConstructor", this.e0);
      this.consume(281);            // '{'
      this.lookahead1W(277);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      if (this.token() != 287)      // '}'
      {
        this.whitespace();
        this.parse_PairConstructorList();
      }
      this.consume(287);            // '}'
      this.eventHandler.endNonterminal("ObjectConstructor", this.e0);
    }

    private try_ObjectConstructor()
    {
      this.consumeT(281);           // '{'
      this.lookahead1W(277);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      if (this.token() != 287)      // '}'
      {
        this.try_PairConstructorList();
      }
      this.consumeT(287);           // '}'
    }

    private parse_PairConstructorList()
    {
      this.eventHandler.startNonterminal("PairConstructorList", this.e0);
      this.parse_PairConstructor();
      for (;;)
      {
        if (this.token() != 42)     // ','
        {
          break;
        }
        this.consume(42);           // ','
        this.lookahead1W(268);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_PairConstructor();
      }
      this.eventHandler.endNonterminal("PairConstructorList", this.e0);
    }

    private try_PairConstructorList()
    {
      this.try_PairConstructor();
      for (;;)
      {
        if (this.token() != 42)     // ','
        {
          break;
        }
        this.consumeT(42);          // ','
        this.lookahead1W(268);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_PairConstructor();
      }
    }

    private parse_PairConstructor()
    {
      this.eventHandler.startNonterminal("PairConstructor", this.e0);
      switch (this.token())
      {
      case 78:                      // 'append'
        this.lookahead2W(279);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 139:                     // 'for'
        this.lookahead2W(187);      // S^WS | '#' | '$' | '(' | '(:' | ':' | 'sliding' | 'tumbling'
        break;
      case 161:                     // 'insert'
        this.lookahead2W(282);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 177:                     // 'let'
        this.lookahead2W(178);      // S^WS | '#' | '$' | '(' | '(:' | ':' | 'score'
        break;
      case 187:                     // 'namespace'
        this.lookahead2W(252);      // NCName^Token | S^WS | '#' | '(' | '(:' | ':' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 220:                     // 'processing-instruction'
        this.lookahead2W(248);      // NCName^Token | S^WS | '#' | '(:' | ':' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 223:                     // 'replace'
        this.lookahead2W(180);      // S^WS | '#' | '(' | '(:' | ':' | 'node' | 'value'
        break;
      case 266:                     // 'validate'
        this.lookahead2W(191);      // S^WS | '#' | '(' | '(:' | ':' | 'lax' | 'strict' | 'type' | '{'
        break;
      case 83:                      // 'attribute'
      case 122:                     // 'element'
        this.lookahead2W(257);      // EQName^Token | S^WS | '#' | '(:' | ':' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
        break;
      case 97:                      // 'comment'
      case 249:                     // 'text'
        this.lookahead2W(149);      // S^WS | '#' | '(:' | ':' | '{'
        break;
      case 111:                     // 'delete'
      case 222:                     // 'rename'
        this.lookahead2W(262);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | ':' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      case 104:                     // 'copy'
      case 130:                     // 'every'
      case 240:                     // 'some'
        this.lookahead2W(165);      // S^WS | '#' | '$' | '(' | '(:' | ':'
        break;
      case 135:                     // 'false'
      case 197:                     // 'null'
      case 255:                     // 'true'
        this.lookahead2W(209);      // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '.' | '/' | '//' | ':' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
        break;
      case 120:                     // 'document'
      case 206:                     // 'ordered'
      case 256:                     // 'try'
      case 262:                     // 'unordered'
        this.lookahead2W(167);      // S^WS | '#' | '(' | '(:' | ':' | '{'
        break;
      case 121:                     // 'document-node'
      case 125:                     // 'empty-sequence'
      case 167:                     // 'item'
      case 188:                     // 'namespace-node'
      case 194:                     // 'node'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
        this.lookahead2W(96);       // S^WS | '#' | '(:' | ':'
        break;
      case 71:                      // 'after'
      case 73:                      // 'allowing'
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 76:                      // 'and'
      case 80:                      // 'as'
      case 81:                      // 'ascending'
      case 82:                      // 'at'
      case 84:                      // 'base-uri'
      case 85:                      // 'before'
      case 86:                      // 'boundary-space'
      case 87:                      // 'break'
      case 89:                      // 'case'
      case 90:                      // 'cast'
      case 91:                      // 'castable'
      case 92:                      // 'catch'
      case 94:                      // 'child'
      case 95:                      // 'collation'
      case 98:                      // 'constraint'
      case 99:                      // 'construction'
      case 102:                     // 'context'
      case 103:                     // 'continue'
      case 105:                     // 'copy-namespaces'
      case 106:                     // 'count'
      case 107:                     // 'decimal-format'
      case 109:                     // 'declare'
      case 110:                     // 'default'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 114:                     // 'descending'
      case 119:                     // 'div'
      case 123:                     // 'else'
      case 124:                     // 'empty'
      case 126:                     // 'encoding'
      case 127:                     // 'end'
      case 129:                     // 'eq'
      case 132:                     // 'except'
      case 133:                     // 'exit'
      case 134:                     // 'external'
      case 136:                     // 'first'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 142:                     // 'from'
      case 143:                     // 'ft-option'
      case 147:                     // 'function'
      case 148:                     // 'ge'
      case 150:                     // 'group'
      case 152:                     // 'gt'
      case 153:                     // 'idiv'
      case 154:                     // 'if'
      case 155:                     // 'import'
      case 156:                     // 'in'
      case 157:                     // 'index'
      case 162:                     // 'instance'
      case 163:                     // 'integrity'
      case 164:                     // 'intersect'
      case 165:                     // 'into'
      case 166:                     // 'is'
      case 168:                     // 'json'
      case 170:                     // 'jsoniq'
      case 173:                     // 'last'
      case 174:                     // 'lax'
      case 175:                     // 'le'
      case 179:                     // 'loop'
      case 181:                     // 'lt'
      case 183:                     // 'mod'
      case 184:                     // 'modify'
      case 185:                     // 'module'
      case 189:                     // 'ne'
      case 195:                     // 'nodes'
      case 198:                     // 'object'
      case 202:                     // 'only'
      case 203:                     // 'option'
      case 204:                     // 'or'
      case 205:                     // 'order'
      case 207:                     // 'ordering'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
      case 224:                     // 'return'
      case 225:                     // 'returning'
      case 226:                     // 'revalidation'
      case 228:                     // 'satisfies'
      case 229:                     // 'schema'
      case 232:                     // 'score'
      case 233:                     // 'select'
      case 234:                     // 'self'
      case 239:                     // 'sliding'
      case 241:                     // 'stable'
      case 242:                     // 'start'
      case 245:                     // 'strict'
      case 248:                     // 'switch'
      case 253:                     // 'to'
      case 254:                     // 'treat'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 259:                     // 'typeswitch'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 267:                     // 'value'
      case 268:                     // 'variable'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
        this.lookahead2W(144);      // S^WS | '#' | '(' | '(:' | ':'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 25735 // 'false' ':'
       || this.tokenSequence() == 25797 // 'null' ':'
       || this.tokenSequence() == 25855)  // 'true' ':'
      {
        this.lk = this.memoized(21, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_ExprSingle();
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(21, this.e0, this.lk);
        }
      }
      switch (this.tokenSequence())
      {
      case -2:
      case 19:                      // NCName^Token
      case 25671:                   // 'after' ':'
      case 25673:                   // 'allowing' ':'
      case 25674:                   // 'ancestor' ':'
      case 25675:                   // 'ancestor-or-self' ':'
      case 25676:                   // 'and' ':'
      case 25678:                   // 'append' ':'
      case 25680:                   // 'as' ':'
      case 25681:                   // 'ascending' ':'
      case 25682:                   // 'at' ':'
      case 25683:                   // 'attribute' ':'
      case 25684:                   // 'base-uri' ':'
      case 25685:                   // 'before' ':'
      case 25686:                   // 'boundary-space' ':'
      case 25687:                   // 'break' ':'
      case 25689:                   // 'case' ':'
      case 25690:                   // 'cast' ':'
      case 25691:                   // 'castable' ':'
      case 25692:                   // 'catch' ':'
      case 25694:                   // 'child' ':'
      case 25695:                   // 'collation' ':'
      case 25697:                   // 'comment' ':'
      case 25698:                   // 'constraint' ':'
      case 25699:                   // 'construction' ':'
      case 25702:                   // 'context' ':'
      case 25703:                   // 'continue' ':'
      case 25704:                   // 'copy' ':'
      case 25705:                   // 'copy-namespaces' ':'
      case 25706:                   // 'count' ':'
      case 25707:                   // 'decimal-format' ':'
      case 25709:                   // 'declare' ':'
      case 25710:                   // 'default' ':'
      case 25711:                   // 'delete' ':'
      case 25712:                   // 'descendant' ':'
      case 25713:                   // 'descendant-or-self' ':'
      case 25714:                   // 'descending' ':'
      case 25719:                   // 'div' ':'
      case 25720:                   // 'document' ':'
      case 25721:                   // 'document-node' ':'
      case 25722:                   // 'element' ':'
      case 25723:                   // 'else' ':'
      case 25724:                   // 'empty' ':'
      case 25725:                   // 'empty-sequence' ':'
      case 25726:                   // 'encoding' ':'
      case 25727:                   // 'end' ':'
      case 25729:                   // 'eq' ':'
      case 25730:                   // 'every' ':'
      case 25732:                   // 'except' ':'
      case 25733:                   // 'exit' ':'
      case 25734:                   // 'external' ':'
      case 25736:                   // 'first' ':'
      case 25737:                   // 'following' ':'
      case 25738:                   // 'following-sibling' ':'
      case 25739:                   // 'for' ':'
      case 25742:                   // 'from' ':'
      case 25743:                   // 'ft-option' ':'
      case 25747:                   // 'function' ':'
      case 25748:                   // 'ge' ':'
      case 25750:                   // 'group' ':'
      case 25752:                   // 'gt' ':'
      case 25753:                   // 'idiv' ':'
      case 25754:                   // 'if' ':'
      case 25755:                   // 'import' ':'
      case 25756:                   // 'in' ':'
      case 25757:                   // 'index' ':'
      case 25761:                   // 'insert' ':'
      case 25762:                   // 'instance' ':'
      case 25763:                   // 'integrity' ':'
      case 25764:                   // 'intersect' ':'
      case 25765:                   // 'into' ':'
      case 25766:                   // 'is' ':'
      case 25767:                   // 'item' ':'
      case 25768:                   // 'json' ':'
      case 25770:                   // 'jsoniq' ':'
      case 25773:                   // 'last' ':'
      case 25774:                   // 'lax' ':'
      case 25775:                   // 'le' ':'
      case 25777:                   // 'let' ':'
      case 25779:                   // 'loop' ':'
      case 25781:                   // 'lt' ':'
      case 25783:                   // 'mod' ':'
      case 25784:                   // 'modify' ':'
      case 25785:                   // 'module' ':'
      case 25787:                   // 'namespace' ':'
      case 25788:                   // 'namespace-node' ':'
      case 25789:                   // 'ne' ':'
      case 25794:                   // 'node' ':'
      case 25795:                   // 'nodes' ':'
      case 25798:                   // 'object' ':'
      case 25802:                   // 'only' ':'
      case 25803:                   // 'option' ':'
      case 25804:                   // 'or' ':'
      case 25805:                   // 'order' ':'
      case 25806:                   // 'ordered' ':'
      case 25807:                   // 'ordering' ':'
      case 25810:                   // 'parent' ':'
      case 25816:                   // 'preceding' ':'
      case 25817:                   // 'preceding-sibling' ':'
      case 25820:                   // 'processing-instruction' ':'
      case 25822:                   // 'rename' ':'
      case 25823:                   // 'replace' ':'
      case 25824:                   // 'return' ':'
      case 25825:                   // 'returning' ':'
      case 25826:                   // 'revalidation' ':'
      case 25828:                   // 'satisfies' ':'
      case 25829:                   // 'schema' ':'
      case 25830:                   // 'schema-attribute' ':'
      case 25831:                   // 'schema-element' ':'
      case 25832:                   // 'score' ':'
      case 25833:                   // 'select' ':'
      case 25834:                   // 'self' ':'
      case 25839:                   // 'sliding' ':'
      case 25840:                   // 'some' ':'
      case 25841:                   // 'stable' ':'
      case 25842:                   // 'start' ':'
      case 25845:                   // 'strict' ':'
      case 25848:                   // 'switch' ':'
      case 25849:                   // 'text' ':'
      case 25853:                   // 'to' ':'
      case 25854:                   // 'treat' ':'
      case 25856:                   // 'try' ':'
      case 25857:                   // 'tumbling' ':'
      case 25858:                   // 'type' ':'
      case 25859:                   // 'typeswitch' ':'
      case 25860:                   // 'union' ':'
      case 25862:                   // 'unordered' ':'
      case 25863:                   // 'updating' ':'
      case 25866:                   // 'validate' ':'
      case 25867:                   // 'value' ':'
      case 25868:                   // 'variable' ':'
      case 25869:                   // 'version' ':'
      case 25872:                   // 'where' ':'
      case 25873:                   // 'while' ':'
      case 25876:                   // 'with' ':'
        this.parse_NCName();
        break;
      default:
        this.parse_ExprSingle();
      }
      this.lookahead1W(26);         // S^WS | '(:' | ':'
      this.consume(50);             // ':'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("PairConstructor", this.e0);
    }

    private try_PairConstructor()
    {
      switch (this.token())
      {
      case 78:                      // 'append'
        this.lookahead2W(279);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 139:                     // 'for'
        this.lookahead2W(187);      // S^WS | '#' | '$' | '(' | '(:' | ':' | 'sliding' | 'tumbling'
        break;
      case 161:                     // 'insert'
        this.lookahead2W(282);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 177:                     // 'let'
        this.lookahead2W(178);      // S^WS | '#' | '$' | '(' | '(:' | ':' | 'score'
        break;
      case 187:                     // 'namespace'
        this.lookahead2W(252);      // NCName^Token | S^WS | '#' | '(' | '(:' | ':' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 220:                     // 'processing-instruction'
        this.lookahead2W(248);      // NCName^Token | S^WS | '#' | '(:' | ':' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 223:                     // 'replace'
        this.lookahead2W(180);      // S^WS | '#' | '(' | '(:' | ':' | 'node' | 'value'
        break;
      case 266:                     // 'validate'
        this.lookahead2W(191);      // S^WS | '#' | '(' | '(:' | ':' | 'lax' | 'strict' | 'type' | '{'
        break;
      case 83:                      // 'attribute'
      case 122:                     // 'element'
        this.lookahead2W(257);      // EQName^Token | S^WS | '#' | '(:' | ':' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
        break;
      case 97:                      // 'comment'
      case 249:                     // 'text'
        this.lookahead2W(149);      // S^WS | '#' | '(:' | ':' | '{'
        break;
      case 111:                     // 'delete'
      case 222:                     // 'rename'
        this.lookahead2W(262);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | ':' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      case 104:                     // 'copy'
      case 130:                     // 'every'
      case 240:                     // 'some'
        this.lookahead2W(165);      // S^WS | '#' | '$' | '(' | '(:' | ':'
        break;
      case 135:                     // 'false'
      case 197:                     // 'null'
      case 255:                     // 'true'
        this.lookahead2W(209);      // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '.' | '/' | '//' | ':' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
        break;
      case 120:                     // 'document'
      case 206:                     // 'ordered'
      case 256:                     // 'try'
      case 262:                     // 'unordered'
        this.lookahead2W(167);      // S^WS | '#' | '(' | '(:' | ':' | '{'
        break;
      case 121:                     // 'document-node'
      case 125:                     // 'empty-sequence'
      case 167:                     // 'item'
      case 188:                     // 'namespace-node'
      case 194:                     // 'node'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
        this.lookahead2W(96);       // S^WS | '#' | '(:' | ':'
        break;
      case 71:                      // 'after'
      case 73:                      // 'allowing'
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 76:                      // 'and'
      case 80:                      // 'as'
      case 81:                      // 'ascending'
      case 82:                      // 'at'
      case 84:                      // 'base-uri'
      case 85:                      // 'before'
      case 86:                      // 'boundary-space'
      case 87:                      // 'break'
      case 89:                      // 'case'
      case 90:                      // 'cast'
      case 91:                      // 'castable'
      case 92:                      // 'catch'
      case 94:                      // 'child'
      case 95:                      // 'collation'
      case 98:                      // 'constraint'
      case 99:                      // 'construction'
      case 102:                     // 'context'
      case 103:                     // 'continue'
      case 105:                     // 'copy-namespaces'
      case 106:                     // 'count'
      case 107:                     // 'decimal-format'
      case 109:                     // 'declare'
      case 110:                     // 'default'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 114:                     // 'descending'
      case 119:                     // 'div'
      case 123:                     // 'else'
      case 124:                     // 'empty'
      case 126:                     // 'encoding'
      case 127:                     // 'end'
      case 129:                     // 'eq'
      case 132:                     // 'except'
      case 133:                     // 'exit'
      case 134:                     // 'external'
      case 136:                     // 'first'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 142:                     // 'from'
      case 143:                     // 'ft-option'
      case 147:                     // 'function'
      case 148:                     // 'ge'
      case 150:                     // 'group'
      case 152:                     // 'gt'
      case 153:                     // 'idiv'
      case 154:                     // 'if'
      case 155:                     // 'import'
      case 156:                     // 'in'
      case 157:                     // 'index'
      case 162:                     // 'instance'
      case 163:                     // 'integrity'
      case 164:                     // 'intersect'
      case 165:                     // 'into'
      case 166:                     // 'is'
      case 168:                     // 'json'
      case 170:                     // 'jsoniq'
      case 173:                     // 'last'
      case 174:                     // 'lax'
      case 175:                     // 'le'
      case 179:                     // 'loop'
      case 181:                     // 'lt'
      case 183:                     // 'mod'
      case 184:                     // 'modify'
      case 185:                     // 'module'
      case 189:                     // 'ne'
      case 195:                     // 'nodes'
      case 198:                     // 'object'
      case 202:                     // 'only'
      case 203:                     // 'option'
      case 204:                     // 'or'
      case 205:                     // 'order'
      case 207:                     // 'ordering'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
      case 224:                     // 'return'
      case 225:                     // 'returning'
      case 226:                     // 'revalidation'
      case 228:                     // 'satisfies'
      case 229:                     // 'schema'
      case 232:                     // 'score'
      case 233:                     // 'select'
      case 234:                     // 'self'
      case 239:                     // 'sliding'
      case 241:                     // 'stable'
      case 242:                     // 'start'
      case 245:                     // 'strict'
      case 248:                     // 'switch'
      case 253:                     // 'to'
      case 254:                     // 'treat'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 259:                     // 'typeswitch'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 267:                     // 'value'
      case 268:                     // 'variable'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
        this.lookahead2W(144);      // S^WS | '#' | '(' | '(:' | ':'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.tokenSequence() == 25735 // 'false' ':'
       || this.tokenSequence() == 25797 // 'null' ':'
       || this.tokenSequence() == 25855)  // 'true' ':'
      {
        this.lk = this.memoized(21, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_ExprSingle();
            this.memoize(21, e0A, -1);
            this.lk = -3;
          }
          catch (p1A)
          {
            this.lk = -2;
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(21, e0A, -2);
          }
        }
      }
      switch (this.tokenSequence())
      {
      case -2:
      case 19:                      // NCName^Token
      case 25671:                   // 'after' ':'
      case 25673:                   // 'allowing' ':'
      case 25674:                   // 'ancestor' ':'
      case 25675:                   // 'ancestor-or-self' ':'
      case 25676:                   // 'and' ':'
      case 25678:                   // 'append' ':'
      case 25680:                   // 'as' ':'
      case 25681:                   // 'ascending' ':'
      case 25682:                   // 'at' ':'
      case 25683:                   // 'attribute' ':'
      case 25684:                   // 'base-uri' ':'
      case 25685:                   // 'before' ':'
      case 25686:                   // 'boundary-space' ':'
      case 25687:                   // 'break' ':'
      case 25689:                   // 'case' ':'
      case 25690:                   // 'cast' ':'
      case 25691:                   // 'castable' ':'
      case 25692:                   // 'catch' ':'
      case 25694:                   // 'child' ':'
      case 25695:                   // 'collation' ':'
      case 25697:                   // 'comment' ':'
      case 25698:                   // 'constraint' ':'
      case 25699:                   // 'construction' ':'
      case 25702:                   // 'context' ':'
      case 25703:                   // 'continue' ':'
      case 25704:                   // 'copy' ':'
      case 25705:                   // 'copy-namespaces' ':'
      case 25706:                   // 'count' ':'
      case 25707:                   // 'decimal-format' ':'
      case 25709:                   // 'declare' ':'
      case 25710:                   // 'default' ':'
      case 25711:                   // 'delete' ':'
      case 25712:                   // 'descendant' ':'
      case 25713:                   // 'descendant-or-self' ':'
      case 25714:                   // 'descending' ':'
      case 25719:                   // 'div' ':'
      case 25720:                   // 'document' ':'
      case 25721:                   // 'document-node' ':'
      case 25722:                   // 'element' ':'
      case 25723:                   // 'else' ':'
      case 25724:                   // 'empty' ':'
      case 25725:                   // 'empty-sequence' ':'
      case 25726:                   // 'encoding' ':'
      case 25727:                   // 'end' ':'
      case 25729:                   // 'eq' ':'
      case 25730:                   // 'every' ':'
      case 25732:                   // 'except' ':'
      case 25733:                   // 'exit' ':'
      case 25734:                   // 'external' ':'
      case 25736:                   // 'first' ':'
      case 25737:                   // 'following' ':'
      case 25738:                   // 'following-sibling' ':'
      case 25739:                   // 'for' ':'
      case 25742:                   // 'from' ':'
      case 25743:                   // 'ft-option' ':'
      case 25747:                   // 'function' ':'
      case 25748:                   // 'ge' ':'
      case 25750:                   // 'group' ':'
      case 25752:                   // 'gt' ':'
      case 25753:                   // 'idiv' ':'
      case 25754:                   // 'if' ':'
      case 25755:                   // 'import' ':'
      case 25756:                   // 'in' ':'
      case 25757:                   // 'index' ':'
      case 25761:                   // 'insert' ':'
      case 25762:                   // 'instance' ':'
      case 25763:                   // 'integrity' ':'
      case 25764:                   // 'intersect' ':'
      case 25765:                   // 'into' ':'
      case 25766:                   // 'is' ':'
      case 25767:                   // 'item' ':'
      case 25768:                   // 'json' ':'
      case 25770:                   // 'jsoniq' ':'
      case 25773:                   // 'last' ':'
      case 25774:                   // 'lax' ':'
      case 25775:                   // 'le' ':'
      case 25777:                   // 'let' ':'
      case 25779:                   // 'loop' ':'
      case 25781:                   // 'lt' ':'
      case 25783:                   // 'mod' ':'
      case 25784:                   // 'modify' ':'
      case 25785:                   // 'module' ':'
      case 25787:                   // 'namespace' ':'
      case 25788:                   // 'namespace-node' ':'
      case 25789:                   // 'ne' ':'
      case 25794:                   // 'node' ':'
      case 25795:                   // 'nodes' ':'
      case 25798:                   // 'object' ':'
      case 25802:                   // 'only' ':'
      case 25803:                   // 'option' ':'
      case 25804:                   // 'or' ':'
      case 25805:                   // 'order' ':'
      case 25806:                   // 'ordered' ':'
      case 25807:                   // 'ordering' ':'
      case 25810:                   // 'parent' ':'
      case 25816:                   // 'preceding' ':'
      case 25817:                   // 'preceding-sibling' ':'
      case 25820:                   // 'processing-instruction' ':'
      case 25822:                   // 'rename' ':'
      case 25823:                   // 'replace' ':'
      case 25824:                   // 'return' ':'
      case 25825:                   // 'returning' ':'
      case 25826:                   // 'revalidation' ':'
      case 25828:                   // 'satisfies' ':'
      case 25829:                   // 'schema' ':'
      case 25830:                   // 'schema-attribute' ':'
      case 25831:                   // 'schema-element' ':'
      case 25832:                   // 'score' ':'
      case 25833:                   // 'select' ':'
      case 25834:                   // 'self' ':'
      case 25839:                   // 'sliding' ':'
      case 25840:                   // 'some' ':'
      case 25841:                   // 'stable' ':'
      case 25842:                   // 'start' ':'
      case 25845:                   // 'strict' ':'
      case 25848:                   // 'switch' ':'
      case 25849:                   // 'text' ':'
      case 25853:                   // 'to' ':'
      case 25854:                   // 'treat' ':'
      case 25856:                   // 'try' ':'
      case 25857:                   // 'tumbling' ':'
      case 25858:                   // 'type' ':'
      case 25859:                   // 'typeswitch' ':'
      case 25860:                   // 'union' ':'
      case 25862:                   // 'unordered' ':'
      case 25863:                   // 'updating' ':'
      case 25866:                   // 'validate' ':'
      case 25867:                   // 'value' ':'
      case 25868:                   // 'variable' ':'
      case 25869:                   // 'version' ':'
      case 25872:                   // 'where' ':'
      case 25873:                   // 'while' ':'
      case 25876:                   // 'with' ':'
        this.try_NCName();
        break;
      case -3:
        break;
      default:
        this.try_ExprSingle();
      }
      this.lookahead1W(26);         // S^WS | '(:' | ':'
      this.consumeT(50);            // ':'
      this.lookahead1W(267);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_ArrayConstructor()
    {
      this.eventHandler.startNonterminal("ArrayConstructor", this.e0);
      this.consume(69);             // '['
      this.lookahead1W(273);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      if (this.token() != 70)       // ']'
      {
        this.whitespace();
        this.parse_Expr();
      }
      this.consume(70);             // ']'
      this.eventHandler.endNonterminal("ArrayConstructor", this.e0);
    }

    private try_ArrayConstructor()
    {
      this.consumeT(69);            // '['
      this.lookahead1W(273);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      if (this.token() != 70)       // ']'
      {
        this.try_Expr();
      }
      this.consumeT(70);            // ']'
    }

    private parse_BlockExpr()
    {
      this.eventHandler.startNonterminal("BlockExpr", this.e0);
      this.consume(281);            // '{'
      this.lookahead1W(281);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      this.whitespace();
      this.parse_StatementsAndOptionalExpr();
      this.consume(287);            // '}'
      this.eventHandler.endNonterminal("BlockExpr", this.e0);
    }

    private try_BlockExpr()
    {
      this.consumeT(281);           // '{'
      this.lookahead1W(281);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      this.try_StatementsAndOptionalExpr();
      this.consumeT(287);           // '}'
    }

    private parse_FunctionDecl()
    {
      this.eventHandler.startNonterminal("FunctionDecl", this.e0);
      this.consume(147);            // 'function'
      this.lookahead1W(246);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.consume(35);             // '('
      this.lookahead1W(98);         // S^WS | '$' | '(:' | ')'
      if (this.token() == 31)       // '$'
      {
        this.whitespace();
        this.parse_ParamList();
      }
      this.consume(38);             // ')'
      this.lookahead1W(158);        // S^WS | '(:' | 'as' | 'external' | '{'
      if (this.token() == 80)       // 'as'
      {
        this.whitespace();
        this.parse_ReturnType();
      }
      this.lookahead1W(122);        // S^WS | '(:' | 'external' | '{'
      switch (this.token())
      {
      case 281:                     // '{'
        this.consume(281);          // '{'
        this.lookahead1W(281);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        this.whitespace();
        this.parse_StatementsAndOptionalExpr();
        this.consume(287);          // '}'
        break;
      default:
        this.consume(134);          // 'external'
      }
      this.eventHandler.endNonterminal("FunctionDecl", this.e0);
    }

    private parse_ReturnType()
    {
      this.eventHandler.startNonterminal("ReturnType", this.e0);
      this.consume(80);             // 'as'
      this.lookahead1W(254);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_SequenceType();
      this.eventHandler.endNonterminal("ReturnType", this.e0);
    }

    private consume(t: number)
    {
      if (this.l1 == t)
      {
        this.whitespace();
        this.eventHandler.terminal(Parser.TOKEN[this.l1], this.b1, this.e1);
        this.b0 = this.b1; this.e0 = this.e1; this.l1 = this.l2; if (this.l1 != 0) {
        this.b1 = this.b2; this.e1 = this.e2; this.l2 = 0; }
      }
      else
      {
        this.error(this.b1, this.e1, 0, this.l1, t);
      }
    }

    private consumeT(t: number)
    {
      if (this.l1 == t)
      {
        this.b0 = this.b1; this.e0 = this.e1; this.l1 = this.l2; if (this.l1 != 0) {
        this.b1 = this.b2; this.e1 = this.e2; this.l2 = 0; }
      }
      else
      {
        this.error(this.b1, this.e1, 0, this.l1, t);
      }
    }

    private skip(code: number)
    {
      var b0W = this.b0; var e0W = this.e0; var l1W = this.l1;
      var b1W = this.b1; var e1W = this.e1;

      this.l1 = code; this.b1 = this.begin; this.e1 = this.end;
      this.l2 = 0;

      this.try_Whitespace();

      this.b0 = b0W; this.e0 = e0W; this.l1 = l1W; if (this.l1 != 0) {
      this.b1 = b1W; this.e1 = e1W; }
    }

    private whitespace()
    {
      if (this.e0 != this.b1)
      {
        this.eventHandler.whitespace(this.e0, this.b1);
        this.e0 = this.b1;
      }
    }

    private matchW(tokenSetId: number)
    {
      var code: number;
      for (;;)
      {
        code = this.match(tokenSetId);
        if (code != 22)             // S^WS
        {
          if (code != 37)           // '(:'
          {
            break;
          }
          this.skip(code);
        }
      }
      return code;
    }

    private lookahead1W(tokenSetId: number)
    {
      if (this.l1 == 0)
      {
        this.l1 = this.matchW(tokenSetId);
        this.b1 = this.begin;
        this.e1 = this.end;
      }
    }

    private lookahead2W(tokenSetId: number)
    {
      if (this.l2 == 0)
      {
        this.l2 = this.matchW(tokenSetId);
        this.b2 = this.begin;
        this.e2 = this.end;
      }
      this.lk = (this.l2 << 9) | this.l1;
    }

    private lookahead1(tokenSetId: number)
    {
      if (this.l1 == 0)
      {
        this.l1 = this.match(tokenSetId);
        this.b1 = this.begin;
        this.e1 = this.end;
      }
    }

    private lookahead2(tokenSetId: number)
    {
      if (this.l2 == 0)
      {
        this.l2 = this.match(tokenSetId);
        this.b2 = this.begin;
        this.e2 = this.end;
      }
      this.lk = (this.l2 << 9) | this.l1;
    }

    private error(b: number, e: number, s: number, l: number, t: number)
    {
      if (e >= this.ex)
      {
        this.bx = b;
        this.ex = e;
        this.sx = s;
        this.lx = l;
        this.tx = t;
      }
      throw new ParseException(this.bx, this.ex, this.sx, this.lx, this.tx);
    }

    private token(): number
    {
      return this.l1;
    }

    private tokenSequence(): number
    {
      return this.lk;
    }

    private lk: number; private b0: number; private e0: number;
    private l1: number; private b1: number; private e1: number;
    private l2: number; private b2: number; private e2: number;
    private bx: number; private ex: number; private sx: number; private lx: number; private tx: number;
    private eventHandler: ParsingEventHandler;
    private memo: Memoizer;

    private memoize(i: number, e: number, v: number)
    {
      this.memo[(e << 5) + i] = v;
    }

    private memoized(i: number, e: number): number
    {
      var v = this.memo[(e << 5) + i];
      return typeof v != "undefined" ? v : 0;
    }

    private input: string;
    private size: number;
    private begin: number;
    private end: number;

    private match(tokenSetId: number): number
    {
      var nonbmp = false;
      this.begin = this.end;
      var current = this.end;
      var result = Parser.INITIAL[tokenSetId];
      var state = 0;
      for (var code = result & 8191; code != 0; )
      {
        var charclass: number;
        var c0 = current < this.size ? this.input.charCodeAt(current) : 0;
        ++current;
        if (c0 < 0x80)
        {
          charclass = Parser.MAP0[c0];
        }
        else if (c0 < 0xd800)
        {
          var c1 = c0 >> 4;
          charclass = Parser.MAP1[(c0 & 15) + Parser.MAP1[(c1 & 31) + Parser.MAP1[c1 >> 5]]];
        }
        else
        {
          if (c0 < 0xdc00)
          {
            var c1: number = current < this.size ? this.input.charCodeAt(current) : 0;
            if (c1 >= 0xdc00 && c1 < 0xe000)
            {
              ++current;
              c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
              nonbmp = true;
            }
          }

          var lo = 0, hi = 5;
          for (var m = 3; ; m = (hi + lo) >> 1)
          {
            if (Parser.MAP2[m] > c0) hi = m - 1;
            else if (Parser.MAP2[6 + m] < c0) lo = m + 1;
            else {charclass = Parser.MAP2[12 + m]; break;}
            if (lo > hi) {charclass = 0; break;}
          }
        }

        state = code;
        var i0 = (charclass << 13) + code - 1;
        code = Parser.TRANSITION[(i0 & 15) + Parser.TRANSITION[i0 >> 4]];

        if (code > 8191)
        {
          result = code;
          code &= 8191;
          this.end = current;
        }
      }

      result >>= 13;
      if (result == 0)
      {
        this.end = current - 1;
        var c1: number = this.end < this.size ? this.input.charCodeAt(this.end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --this.end;
        this.error(this.begin, this.end, state, -1, -1);
      }

      if (nonbmp)
      {
        for (var i = result >> 9; i > 0; --i)
        {
          --this.end;
          var c1: number = this.end < this.size ? this.input.charCodeAt(this.end) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000) --this.end;
        }
      }
      else
      {
        this.end -= result >> 9;
      }

      if (this.end > this.size) this.end = this.size;
      return (result & 511) - 1;
    }

    private static getTokenSet(tokenSetId: number)
    {
      var set: string[] = [];
      var s = tokenSetId < 0 ? - tokenSetId : Parser.INITIAL[tokenSetId] & 8191;
      for (var i = 0; i < 289; i += 32)
      {
        var j = i;
        var i0 = (i >> 5) * 4317 + s - 1;
        var i1 = i0 >> 2;
        var i2 = i1 >> 2;
        var f = Parser.EXPECTED[(i0 & 3) + Parser.EXPECTED[(i1 & 3) + Parser.EXPECTED[(i2 & 15) + Parser.EXPECTED[i2 >> 4]]]];
        for ( ; f != 0; f >>>= 1, ++j)
        {
          if ((f & 1) != 0)
          {
            set.push(Parser.TOKEN[j]);
          }
        }
      }
      return set;
    }

    private static MAP0: number[] =
    [
      /*   0 */ 71, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3,
      /*  35 */ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22,
      /*  63 */ 23, 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36,
      /*  89 */ 30, 30, 37, 38, 39, 40, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
      /* 115 */ 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 40, 40
    ];

    private static MAP1: number[] =
    [
      /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
      /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
      /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
      /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
      /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
      /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
      /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
      /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
      /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
      /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
      /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
      /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 71, 0, 0, 0, 0, 0, 0, 0,
      /* 255 */ 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
      /* 289 */ 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
      /* 315 */ 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 40, 30, 30,
      /* 341 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37,
      /* 367 */ 38, 39, 40, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
      /* 393 */ 62, 63, 64, 65, 66, 67, 68, 69, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 40, 40, 40, 40,
      /* 419 */ 40, 40, 40, 70, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 70, 70, 70, 70, 70, 70,
      /* 445 */ 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70
    ];

    private static MAP2: number[] =
    [
      /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 40, 30, 40, 30, 30,
      /* 17 */ 40
    ];

    private static INITIAL: number[] =
    [
      /*   0 */ 1, 24578, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
      /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
      /*  54 */ 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
      /*  80 */ 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
      /* 105 */ 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
      /* 126 */ 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,
      /* 147 */ 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
      /* 168 */ 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
      /* 189 */ 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
      /* 210 */ 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
      /* 231 */ 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
      /* 252 */ 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
      /* 273 */ 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290
    ];

    private static TRANSITION: number[] =
    [
      /*     0 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*    15 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*    30 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*    45 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*    60 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*    75 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*    90 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   105 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   120 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   135 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   150 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   165 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   180 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   195 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   210 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   225 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   240 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   255 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   270 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   285 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   300 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   315 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   330 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   345 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   360 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   375 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   390 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   405 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   420 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   435 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   450 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   465 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   480 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   495 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   510 */ 37318, 37318, 36864, 36899, 36883, 36883, 36883, 36903, 36883, 36883, 36883, 36883, 36883, 36926, 36919,
      /*   525 */ 36883, 36883, 36879, 36883, 36883, 36942, 36991, 37318, 37318, 41289, 37087, 37318, 37318, 37010, 37318,
      /*   540 */ 37318, 37318, 37318, 37318, 65657, 40192, 38525, 37318, 37318, 39335, 40192, 38527, 37031, 44584, 37054,
      /*   555 */ 37076, 37318, 37318, 74250, 37318, 69924, 37107, 37136, 37152, 65815, 69390, 37247, 37265, 53482, 37182,
      /*   570 */ 37116, 37202, 37162, 37222, 37186, 37120, 37206, 37166, 74726, 69388, 37245, 37263, 53480, 37281, 37318,
      /*   585 */ 41092, 37317, 37318, 37318, 45006, 57380, 37335, 37318, 74671, 64449, 74683, 40193, 37351, 37378, 40192,
      /*   600 */ 39199, 37741, 69458, 41098, 41041, 37318, 46044, 37882, 69459, 41099, 41042, 37318, 46045, 37371, 74376,
      /*   615 */ 37355, 37382, 40192, 39202, 38523, 74469, 50180, 37398, 37414, 37436, 50351, 37475, 37318, 58014, 37496,
      /*   630 */ 39340, 37628, 37651, 37674, 55492, 37717, 38230, 37546, 37566, 58028, 41986, 37605, 37523, 37542, 37562,
      /*   645 */ 58024, 37582, 37601, 39304, 37621, 37644, 37667, 37690, 37709, 37733, 74273, 57770, 38317, 37757, 37779,
      /*   660 */ 37822, 46961, 37943, 37979, 37995, 38150, 38170, 38011, 38093, 38038, 38061, 37792, 39434, 38084, 38100,
      /*   675 */ 38045, 38068, 37799, 39441, 38116, 37992, 38147, 38166, 38186, 38022, 38246, 38263, 37318, 38304, 37318,
      /*   690 */ 38354, 38370, 45231, 38397, 38413, 37861, 37459, 38432, 38451, 68861, 37456, 38429, 38448, 38467, 45226,
      /*   705 */ 38483, 38407, 38516, 57783, 51848, 38545, 38580, 73050, 38677, 38610, 38626, 49222, 38643, 38660, 49221,
      /*   720 */ 38642, 38659, 38676, 38693, 38624, 38714, 38739, 38791, 38841, 38876, 38942, 38892, 60443, 38908, 60433,
      /*   735 */ 60449, 38914, 38930, 38946, 38962, 38978, 39013, 39048, 39078, 39105, 39169, 39156, 39172, 39188, 39089,
      /*   750 */ 39218, 39249, 55484, 39265, 39291, 55476, 39311, 39327, 37693, 37318, 65659, 38698, 39356, 39410, 37835,
      /*   765 */ 37848, 39457, 45051, 38498, 38500, 45058, 39494, 39520, 39559, 39504, 39575, 59063, 39606, 39616, 39632,
      /*   780 */ 39681, 39692, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   795 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   810 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   825 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   840 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   855 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   870 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   885 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   900 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   915 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   930 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   945 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   960 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   975 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*   990 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1005 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1020 */ 37318, 37318, 37318, 37318, 39708, 37318, 37318, 37318, 37318, 48276, 37318, 37318, 37318, 37318, 37318,
      /*  1035 */ 67919, 57964, 39727, 39739, 37318, 37318, 72403, 39755, 36991, 37318, 37318, 41289, 37087, 37318, 37318,
      /*  1050 */ 37010, 39794, 37318, 37318, 37318, 37318, 65657, 40192, 38525, 37318, 37318, 39813, 40192, 39835, 37031,
      /*  1065 */ 44584, 37054, 37076, 37318, 37318, 74250, 37318, 69924, 37107, 37136, 37152, 65815, 69390, 37247, 37265,
      /*  1080 */ 53482, 37182, 37116, 37202, 37162, 37222, 37186, 37120, 37206, 37166, 74726, 69388, 37245, 37263, 53480,
      /*  1095 */ 37281, 37318, 41092, 37317, 37318, 37318, 45006, 57380, 37335, 37318, 74671, 64449, 74683, 40193, 37351,
      /*  1110 */ 37378, 40192, 39199, 37741, 69458, 41098, 41041, 37318, 46044, 37882, 69459, 41099, 41042, 37318, 46045,
      /*  1125 */ 37371, 74376, 37355, 37382, 40192, 39202, 38523, 74469, 50180, 37398, 37414, 37436, 50351, 37475, 37318,
      /*  1140 */ 58014, 37496, 39340, 37628, 37651, 37674, 55492, 37717, 38230, 37546, 37566, 58028, 41986, 37605, 37523,
      /*  1155 */ 37542, 37562, 58024, 37582, 37601, 39304, 37621, 37644, 37667, 37690, 37709, 37733, 74273, 57770, 38317,
      /*  1170 */ 37757, 37779, 37822, 46961, 37943, 37979, 37995, 38150, 38170, 38011, 38093, 38038, 38061, 37792, 39434,
      /*  1185 */ 38084, 38100, 38045, 38068, 37799, 39441, 38116, 37992, 38147, 38166, 38186, 38022, 38246, 38263, 37318,
      /*  1200 */ 38304, 37318, 38354, 38370, 45231, 38397, 38413, 37861, 37459, 38432, 38451, 68861, 37456, 38429, 38448,
      /*  1215 */ 38467, 45226, 38483, 38407, 38516, 57783, 51848, 38545, 38580, 73050, 38677, 38610, 38626, 49222, 38643,
      /*  1230 */ 38660, 49221, 38642, 38659, 38676, 38693, 38624, 38714, 38739, 38791, 38841, 38876, 38942, 38892, 60443,
      /*  1245 */ 38908, 60433, 60449, 38914, 38930, 38946, 38962, 38978, 39013, 39048, 39078, 39105, 39169, 39156, 39172,
      /*  1260 */ 39188, 39089, 39218, 39249, 55484, 39265, 39291, 55476, 39311, 39327, 37693, 37318, 65659, 38698, 39356,
      /*  1275 */ 39410, 37835, 37848, 39457, 45051, 38498, 38500, 45058, 39494, 39520, 39559, 39504, 39575, 59063, 39606,
      /*  1290 */ 39616, 39632, 39681, 39692, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1305 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1320 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1335 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1350 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1365 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1380 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1395 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1410 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1425 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1440 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1455 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1470 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1485 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1500 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1515 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1530 */ 37318, 37318, 37318, 37318, 37318, 37318, 39854, 39870, 37318, 37318, 37318, 46325, 37318, 37318, 36994,
      /*  1545 */ 37318, 61657, 45847, 57964, 37318, 37318, 61650, 62405, 62409, 50496, 39889, 37318, 37318, 41289, 37087,
      /*  1560 */ 37318, 44009, 37010, 37318, 37318, 37318, 37318, 37318, 65657, 40192, 38525, 37318, 37318, 39335, 40192,
      /*  1575 */ 45833, 37031, 44584, 37054, 37076, 37318, 37318, 74250, 37318, 69924, 37107, 37136, 37152, 65815, 69390,
      /*  1590 */ 37247, 37265, 53482, 37182, 37116, 37202, 37162, 37222, 37186, 37120, 37206, 37166, 74726, 69388, 37245,
      /*  1605 */ 37263, 53480, 37281, 37318, 41092, 37317, 37318, 37318, 45006, 57380, 37335, 37318, 74671, 64449, 74683,
      /*  1620 */ 40193, 37351, 37378, 40192, 39199, 37741, 69458, 41098, 41041, 37318, 46044, 37882, 69459, 41099, 41042,
      /*  1635 */ 37318, 46045, 37371, 74376, 37355, 37382, 40192, 39202, 38523, 74469, 50180, 37398, 37414, 37436, 50351,
      /*  1650 */ 37475, 37318, 58014, 37496, 39340, 37628, 37651, 37674, 55492, 37717, 38230, 37546, 37566, 58028, 41986,
      /*  1665 */ 37605, 37523, 37542, 37562, 58024, 37582, 37601, 39304, 37621, 37644, 37667, 37690, 37709, 37733, 74273,
      /*  1680 */ 57770, 38317, 37757, 37779, 37822, 46961, 37943, 37979, 37995, 38150, 38170, 38011, 38093, 38038, 38061,
      /*  1695 */ 37792, 39434, 38084, 38100, 38045, 38068, 37799, 39441, 38116, 37992, 38147, 38166, 38186, 38022, 38246,
      /*  1710 */ 38263, 37318, 38304, 37318, 38354, 38370, 45231, 38397, 38413, 37861, 37459, 38432, 38451, 68861, 37456,
      /*  1725 */ 38429, 38448, 38467, 45226, 38483, 38407, 38516, 57783, 51848, 38545, 38580, 73050, 38677, 38610, 38626,
      /*  1740 */ 49222, 38643, 38660, 49221, 38642, 38659, 38676, 38693, 38624, 38714, 38739, 38791, 38841, 38876, 38942,
      /*  1755 */ 38892, 60443, 38908, 60433, 60449, 38914, 38930, 38946, 38962, 38978, 39013, 39048, 39078, 39105, 39169,
      /*  1770 */ 39156, 39172, 39188, 39089, 39218, 39249, 55484, 39265, 39291, 55476, 39311, 39327, 37693, 37318, 65659,
      /*  1785 */ 38698, 39356, 39410, 37835, 37848, 39457, 45051, 38498, 38500, 45058, 39494, 39520, 39559, 39504, 39575,
      /*  1800 */ 59063, 39606, 39616, 39632, 39681, 39692, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1815 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1830 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1845 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1860 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1875 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1890 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1905 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1920 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1935 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1950 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1965 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1980 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  1995 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2010 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2025 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2040 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 39908, 62747, 37318, 37318, 37318, 42026, 65655,
      /*  2055 */ 37318, 73568, 65651, 65646, 39935, 62736, 68791, 45102, 45088, 45095, 68779, 39950, 36991, 37318, 37318,
      /*  2070 */ 41289, 39994, 37318, 45426, 37010, 37318, 37318, 37318, 37318, 37318, 65657, 40192, 38525, 37318, 37318,
      /*  2085 */ 39335, 40192, 39370, 40016, 44584, 37054, 37076, 37318, 37318, 74250, 37318, 69924, 37107, 37136, 37152,
      /*  2100 */ 65815, 69390, 37247, 37265, 53482, 37182, 37116, 37202, 37162, 37222, 37186, 37120, 37206, 37166, 74726,
      /*  2115 */ 69388, 37245, 37263, 53480, 37281, 37318, 41092, 37317, 37318, 37318, 45006, 57380, 37335, 37318, 74671,
      /*  2130 */ 64449, 74683, 40193, 37351, 37378, 40192, 39199, 40039, 69458, 41098, 41041, 37318, 46044, 44842, 69459,
      /*  2145 */ 41099, 41042, 37318, 46045, 37371, 74376, 37355, 37382, 40192, 39202, 38523, 74469, 50180, 37398, 37414,
      /*  2160 */ 37436, 50351, 37475, 37318, 58014, 37496, 39340, 37628, 37651, 37674, 55492, 37717, 38230, 37546, 37566,
      /*  2175 */ 58028, 41986, 37605, 37523, 37542, 37562, 58024, 37582, 37601, 39304, 37621, 37644, 37667, 37690, 37709,
      /*  2190 */ 37733, 74273, 57770, 38317, 37757, 37779, 37822, 46961, 37943, 37979, 37995, 38150, 38170, 38011, 38093,
      /*  2205 */ 38038, 38061, 37792, 39434, 38084, 38100, 38045, 38068, 37799, 39441, 38116, 37992, 38147, 38166, 38186,
      /*  2220 */ 38022, 38246, 38263, 37318, 38304, 37318, 38354, 38370, 45231, 38397, 38413, 37861, 37459, 38432, 38451,
      /*  2235 */ 68861, 37456, 38429, 38448, 38467, 45226, 38483, 38407, 38516, 57783, 51848, 38545, 38580, 73050, 38677,
      /*  2250 */ 38610, 38626, 49222, 38643, 38660, 49221, 38642, 38659, 38676, 38693, 38624, 38714, 38739, 38791, 38841,
      /*  2265 */ 38876, 38942, 38892, 60443, 38908, 60433, 60449, 38914, 38930, 38946, 38962, 38978, 39013, 39048, 39078,
      /*  2280 */ 39105, 39169, 39156, 39172, 39188, 39089, 39218, 39249, 55484, 39265, 39291, 55476, 39311, 39327, 37693,
      /*  2295 */ 37318, 65659, 38698, 39356, 39410, 37835, 37848, 39457, 45051, 38498, 38500, 45058, 39494, 39520, 39559,
      /*  2310 */ 39504, 39575, 59063, 39606, 39616, 39632, 39681, 39692, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2325 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2340 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2355 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2370 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2385 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2400 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2415 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2430 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2445 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2460 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2475 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2490 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2505 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2520 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2535 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2550 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 39708, 47580, 37318, 37318, 37318,
      /*  2565 */ 48276, 40073, 37318, 37015, 71422, 71423, 40094, 57964, 37318, 37318, 67783, 40130, 40134, 40150, 36991,
      /*  2580 */ 37318, 37318, 41289, 37087, 37318, 37318, 37010, 37318, 37318, 37318, 37318, 37318, 65657, 40192, 38525,
      /*  2595 */ 37318, 37318, 40186, 40192, 38527, 37031, 44584, 37054, 37076, 37318, 37318, 74250, 37318, 69924, 37107,
      /*  2610 */ 37136, 37152, 65815, 69390, 37247, 37265, 53482, 37182, 37116, 37202, 37162, 37222, 37186, 37120, 37206,
      /*  2625 */ 37166, 74726, 69388, 37245, 37263, 53480, 37281, 37318, 41092, 37317, 37318, 37318, 45006, 57380, 37335,
      /*  2640 */ 37318, 74671, 64449, 74683, 40193, 37351, 37378, 40192, 39199, 37741, 69458, 41098, 41041, 37318, 46044,
      /*  2655 */ 37882, 69459, 41099, 41042, 37318, 46045, 37371, 74376, 37355, 37382, 40192, 39202, 38523, 74469, 50180,
      /*  2670 */ 37398, 37414, 37436, 50351, 37475, 37318, 58014, 37496, 39340, 37628, 37651, 37674, 55492, 37717, 38230,
      /*  2685 */ 37546, 37566, 58028, 41986, 37605, 37523, 37542, 37562, 58024, 37582, 37601, 39304, 37621, 37644, 37667,
      /*  2700 */ 37690, 37709, 37733, 74273, 57770, 38317, 37757, 37779, 37822, 46961, 37943, 37979, 37995, 38150, 38170,
      /*  2715 */ 38011, 38093, 38038, 38061, 37792, 39434, 38084, 38100, 38045, 38068, 37799, 39441, 38116, 37992, 38147,
      /*  2730 */ 38166, 38186, 38022, 38246, 38263, 37318, 38304, 37318, 38354, 38370, 45231, 38397, 38413, 37861, 37459,
      /*  2745 */ 38432, 38451, 68861, 37456, 38429, 38448, 38467, 45226, 38483, 38407, 38516, 57783, 51848, 38545, 38580,
      /*  2760 */ 73050, 38677, 38610, 38626, 49222, 38643, 38660, 49221, 38642, 38659, 38676, 38693, 38624, 38714, 38739,
      /*  2775 */ 38791, 38841, 38876, 38942, 38892, 60443, 38908, 60433, 60449, 38914, 38930, 38946, 38962, 38978, 39013,
      /*  2790 */ 39048, 39078, 39105, 39169, 39156, 39172, 39188, 39089, 39218, 39249, 55484, 39265, 39291, 55476, 39311,
      /*  2805 */ 39327, 37693, 37318, 65659, 38698, 39356, 39410, 37835, 37848, 39457, 45051, 38498, 38500, 45058, 39494,
      /*  2820 */ 39520, 39559, 39504, 39575, 59063, 39606, 39616, 39632, 39681, 39692, 37318, 37318, 37318, 37318, 37318,
      /*  2835 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2850 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2865 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2880 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2895 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2910 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2925 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2940 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2955 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2970 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  2985 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3000 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3015 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3030 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3045 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3060 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 39708, 37318, 37318,
      /*  3075 */ 37318, 37318, 48276, 71599, 37318, 37318, 37318, 37318, 67919, 40209, 37318, 37318, 66772, 40222, 40225,
      /*  3090 */ 40241, 36991, 37318, 37318, 41289, 37087, 37318, 37318, 37010, 37318, 37318, 37318, 37318, 37318, 65657,
      /*  3105 */ 40192, 38525, 37318, 37318, 39335, 40192, 38527, 37031, 44584, 37054, 37076, 37318, 37318, 74250, 37318,
      /*  3120 */ 69924, 37107, 37136, 37152, 65815, 69390, 37247, 37265, 53482, 37182, 37116, 37202, 37162, 37222, 37186,
      /*  3135 */ 37120, 37206, 37166, 74726, 69388, 37245, 37263, 53480, 37281, 37318, 41092, 37317, 37318, 37318, 45006,
      /*  3150 */ 57380, 37335, 37318, 74671, 64449, 74683, 40193, 37351, 37378, 40192, 39199, 37741, 69458, 41098, 41041,
      /*  3165 */ 37318, 46044, 37882, 69459, 41099, 41042, 37318, 46045, 37371, 74376, 37355, 37382, 40192, 39202, 38523,
      /*  3180 */ 74469, 50180, 37398, 37414, 37436, 50351, 37475, 37318, 58014, 37496, 39340, 37628, 37651, 37674, 55492,
      /*  3195 */ 37717, 38230, 37546, 37566, 58028, 41986, 37605, 37523, 37542, 37562, 58024, 37582, 37601, 39304, 37621,
      /*  3210 */ 37644, 37667, 37690, 37709, 37733, 74273, 57770, 38317, 37757, 37779, 37822, 46961, 37943, 37979, 37995,
      /*  3225 */ 38150, 38170, 38011, 38093, 38038, 38061, 37792, 39434, 38084, 38100, 38045, 38068, 37799, 39441, 38116,
      /*  3240 */ 37992, 38147, 38166, 38186, 38022, 38246, 38263, 37318, 38304, 37318, 38354, 38370, 45231, 38397, 38413,
      /*  3255 */ 37861, 37459, 38432, 38451, 68861, 37456, 38429, 38448, 38467, 45226, 38483, 38407, 38516, 57783, 51848,
      /*  3270 */ 38545, 38580, 73050, 38677, 38610, 38626, 49222, 38643, 38660, 49221, 38642, 38659, 38676, 38693, 38624,
      /*  3285 */ 38714, 38739, 38791, 38841, 38876, 38942, 38892, 60443, 38908, 60433, 60449, 38914, 38930, 38946, 38962,
      /*  3300 */ 38978, 39013, 39048, 39078, 39105, 39169, 39156, 39172, 39188, 39089, 39218, 39249, 55484, 39265, 39291,
      /*  3315 */ 55476, 39311, 39327, 37693, 37318, 65659, 38698, 39356, 39410, 37835, 37848, 39457, 45051, 38498, 38500,
      /*  3330 */ 45058, 39494, 39520, 39559, 39504, 39575, 59063, 39606, 39616, 39632, 39681, 39692, 37318, 37318, 37318,
      /*  3345 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3360 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3375 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3390 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3405 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3420 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3435 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3450 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3465 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3480 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3495 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3510 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3525 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3540 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3555 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3570 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 39708,
      /*  3585 */ 37318, 37318, 37318, 37318, 48276, 37318, 37318, 37318, 37318, 37318, 71606, 73347, 37318, 37318, 37318,
      /*  3600 */ 37318, 37318, 40283, 40324, 37318, 37318, 41289, 37087, 37318, 37318, 37010, 37318, 37318, 37318, 37318,
      /*  3615 */ 37318, 65657, 40192, 38525, 37318, 37318, 39335, 40192, 38527, 37031, 44584, 37054, 37076, 37318, 37318,
      /*  3630 */ 74250, 37318, 69924, 37107, 37136, 37152, 65815, 69390, 37247, 37265, 53482, 40344, 37116, 37202, 37162,
      /*  3645 */ 40378, 37186, 37120, 37206, 37166, 74726, 69388, 37245, 37263, 53480, 37281, 37318, 41092, 37317, 37318,
      /*  3660 */ 37318, 45006, 57380, 37335, 37318, 74671, 64449, 74683, 40193, 37351, 37378, 40192, 39199, 37741, 69458,
      /*  3675 */ 41098, 41041, 37318, 46044, 37882, 69459, 41099, 41042, 37318, 46045, 37371, 74376, 37355, 37382, 40192,
      /*  3690 */ 39202, 38523, 74469, 50180, 37398, 37414, 37436, 50351, 37475, 37318, 58014, 37496, 39340, 37628, 37651,
      /*  3705 */ 37674, 55492, 37717, 38230, 37546, 37566, 58028, 41986, 37605, 37523, 37542, 37562, 58024, 37582, 37601,
      /*  3720 */ 39304, 37621, 37644, 37667, 37690, 37709, 37733, 74273, 57770, 38317, 37757, 37779, 37822, 46961, 37943,
      /*  3735 */ 37979, 37995, 38150, 38170, 38011, 38093, 38038, 38061, 37792, 39434, 38084, 38100, 38045, 38068, 37799,
      /*  3750 */ 39441, 38116, 37992, 38147, 38166, 38186, 38022, 38246, 38263, 37318, 38304, 37318, 38354, 38370, 45231,
      /*  3765 */ 38397, 38413, 37861, 37459, 38432, 38451, 68861, 37456, 38429, 38448, 38467, 45226, 38483, 38407, 38516,
      /*  3780 */ 57783, 51848, 38545, 38580, 73050, 38677, 38610, 38626, 49222, 38643, 38660, 49221, 38642, 38659, 38676,
      /*  3795 */ 38693, 38624, 38714, 38739, 38791, 38841, 38876, 38942, 38892, 60443, 38908, 60433, 60449, 38914, 38930,
      /*  3810 */ 38946, 38962, 38978, 39013, 39048, 39078, 39105, 39169, 39156, 39172, 39188, 39089, 39218, 39249, 55484,
      /*  3825 */ 39265, 39291, 55476, 39311, 39327, 37693, 37318, 65659, 38698, 39356, 39410, 37835, 37848, 39457, 45051,
      /*  3840 */ 38498, 38500, 45058, 39494, 39520, 39559, 39504, 39575, 59063, 39606, 39616, 39632, 39681, 39692, 37318,
      /*  3855 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3870 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3885 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3900 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3915 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3930 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3945 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3960 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3975 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  3990 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4005 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4020 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4035 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4050 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4065 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4080 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4095 */ 37318, 40416, 40432, 37318, 37318, 37318, 48315, 37318, 37318, 37526, 37318, 62612, 40451, 57964, 37318,
      /*  4110 */ 37318, 62605, 65082, 65086, 40487, 40535, 37318, 37318, 41289, 37087, 37318, 37318, 40554, 37318, 37318,
      /*  4125 */ 37318, 37318, 37318, 65657, 40192, 38525, 37318, 37318, 39335, 40192, 38131, 40575, 44584, 37054, 37076,
      /*  4140 */ 37318, 37318, 74250, 37318, 69924, 37107, 37136, 37152, 65815, 69390, 37247, 37265, 53482, 37182, 37116,
      /*  4155 */ 37202, 37162, 37222, 37186, 37120, 37206, 37166, 74726, 69388, 37245, 37263, 53480, 37281, 37318, 41092,
      /*  4170 */ 37317, 37318, 37318, 45006, 57380, 37335, 37318, 74671, 64449, 74683, 40193, 37351, 37378, 40192, 39199,
      /*  4185 */ 37741, 69458, 41098, 41041, 37318, 46044, 37882, 69459, 41099, 41042, 37318, 46045, 37371, 74376, 37355,
      /*  4200 */ 37382, 40192, 39202, 38523, 74469, 50180, 37398, 37414, 37436, 50351, 37475, 37318, 58014, 37496, 39340,
      /*  4215 */ 37628, 37651, 37674, 55492, 37717, 38230, 37546, 37566, 58028, 41986, 37605, 37523, 37542, 37562, 58024,
      /*  4230 */ 37582, 37601, 39304, 37621, 37644, 37667, 37690, 37709, 37733, 74273, 57770, 38317, 37757, 37779, 37822,
      /*  4245 */ 46961, 37943, 37979, 37995, 38150, 38170, 38011, 38093, 38038, 38061, 37792, 39434, 38084, 38100, 38045,
      /*  4260 */ 38068, 37799, 39441, 38116, 37992, 38147, 38166, 38186, 38022, 38246, 38263, 37318, 38304, 37318, 38354,
      /*  4275 */ 38370, 45231, 38397, 38413, 37861, 37459, 38432, 38451, 68861, 37456, 38429, 38448, 38467, 45226, 38483,
      /*  4290 */ 38407, 38516, 57783, 51848, 38545, 38580, 73050, 38677, 38610, 38626, 49222, 38643, 38660, 49221, 38642,
      /*  4305 */ 38659, 38676, 38693, 38624, 38714, 38739, 38791, 38841, 38876, 38942, 38892, 60443, 38908, 60433, 60449,
      /*  4320 */ 38914, 38930, 38946, 38962, 38978, 39013, 39048, 39078, 39105, 39169, 39156, 39172, 39188, 39089, 39218,
      /*  4335 */ 39249, 55484, 39265, 39291, 55476, 39311, 39327, 37693, 37318, 65659, 38698, 39356, 39410, 37835, 37848,
      /*  4350 */ 39457, 45051, 38498, 38500, 45058, 39494, 39520, 39559, 39504, 39575, 59063, 39606, 39616, 39632, 39681,
      /*  4365 */ 39692, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4380 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4395 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4410 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4425 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4440 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4455 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4470 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4485 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4500 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4515 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4530 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4545 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4560 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4575 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4590 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4605 */ 37318, 37318, 37318, 40598, 40656, 40697, 40697, 40697, 40663, 40736, 40697, 40698, 40727, 40642, 40679,
      /*  4620 */ 40626, 40693, 40745, 40613, 40752, 40714, 40768, 36991, 37318, 37318, 40817, 40815, 37318, 37318, 37010,
      /*  4635 */ 37318, 37318, 37318, 37318, 37318, 65657, 40192, 38525, 37318, 37318, 39335, 40192, 38527, 37031, 44584,
      /*  4650 */ 37054, 40804, 37318, 37318, 74250, 37318, 69924, 37107, 37136, 37152, 65815, 69390, 37247, 37265, 53482,
      /*  4665 */ 37182, 37116, 37202, 37162, 37222, 37186, 37120, 37206, 37166, 74726, 69388, 37245, 37263, 53480, 37281,
      /*  4680 */ 37318, 41092, 37317, 37318, 37318, 45006, 57380, 37335, 37318, 74671, 64449, 74683, 40193, 37351, 37378,
      /*  4695 */ 40192, 39199, 37741, 69458, 41098, 41041, 37318, 46044, 37882, 69459, 41099, 41042, 37318, 46045, 37371,
      /*  4710 */ 74376, 37355, 37382, 40192, 39202, 38523, 74469, 50180, 37398, 37414, 37436, 50351, 37475, 37318, 58014,
      /*  4725 */ 37496, 39340, 37628, 37651, 37674, 55492, 37717, 38230, 37546, 37566, 58028, 41986, 37605, 37523, 37542,
      /*  4740 */ 37562, 58024, 37582, 37601, 39304, 37621, 37644, 37667, 37690, 37709, 37733, 74273, 57770, 38317, 37757,
      /*  4755 */ 37779, 37822, 46961, 37943, 37979, 37995, 38150, 38170, 38011, 38093, 38038, 38061, 37792, 39434, 38084,
      /*  4770 */ 38100, 38045, 38068, 37799, 39441, 38116, 37992, 38147, 38166, 38186, 38022, 38246, 38263, 37318, 38304,
      /*  4785 */ 37318, 38354, 38370, 45231, 38397, 38413, 37861, 37459, 38432, 38451, 68861, 37456, 38429, 38448, 38467,
      /*  4800 */ 45226, 38483, 38407, 38516, 57783, 51848, 38545, 38580, 73050, 38677, 38610, 38626, 49222, 38643, 38660,
      /*  4815 */ 49221, 38642, 38659, 38676, 38693, 38624, 38714, 38739, 38791, 38841, 38876, 38942, 38892, 60443, 38908,
      /*  4830 */ 60433, 60449, 38914, 38930, 38946, 38962, 38978, 39013, 39048, 39078, 39105, 39169, 39156, 39172, 39188,
      /*  4845 */ 39089, 39218, 39249, 55484, 39265, 39291, 55476, 39311, 39327, 37693, 37318, 65659, 38698, 39356, 39410,
      /*  4860 */ 37835, 37848, 39457, 45051, 38498, 38500, 45058, 39494, 39520, 39559, 39504, 39575, 59063, 39606, 39616,
      /*  4875 */ 39632, 39681, 39692, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4890 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4905 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4920 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4935 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4950 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4965 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4980 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  4995 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5010 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5025 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5040 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5055 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5070 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5085 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5100 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5115 */ 37318, 37318, 37318, 37318, 37318, 39708, 43152, 37318, 37318, 37318, 48276, 40833, 37318, 37318, 73511,
      /*  5130 */ 37318, 67919, 57964, 40868, 40872, 43155, 43156, 43784, 40888, 36991, 37318, 37318, 41289, 40924, 37318,
      /*  5145 */ 37318, 37010, 37318, 37318, 37318, 37318, 37318, 65657, 40192, 38525, 37318, 37318, 39335, 40192, 38527,
      /*  5160 */ 37031, 44584, 37054, 40942, 37318, 37318, 74250, 37318, 69924, 37107, 37136, 37152, 65815, 69390, 37247,
      /*  5175 */ 37265, 53482, 37182, 37116, 37202, 37162, 37222, 37186, 37120, 37206, 37166, 74726, 69388, 37245, 37263,
      /*  5190 */ 53480, 37281, 37318, 41092, 37317, 37318, 37318, 45006, 57380, 37335, 37318, 74671, 64449, 74683, 40193,
      /*  5205 */ 37351, 37378, 40192, 39199, 37741, 69458, 41098, 41041, 37318, 46044, 37882, 69459, 41099, 41042, 37318,
      /*  5220 */ 46045, 37371, 74376, 37355, 37382, 40192, 39202, 38523, 74469, 50180, 37398, 37414, 37436, 50351, 37475,
      /*  5235 */ 37318, 58014, 37496, 39340, 37628, 37651, 37674, 55492, 37717, 38230, 37546, 37566, 58028, 41986, 37605,
      /*  5250 */ 37523, 37542, 37562, 58024, 37582, 37601, 39304, 37621, 37644, 37667, 37690, 37709, 37733, 74273, 57770,
      /*  5265 */ 38317, 37757, 37779, 37822, 46961, 37943, 37979, 37995, 38150, 38170, 38011, 38093, 38038, 38061, 37792,
      /*  5280 */ 39434, 38084, 38100, 38045, 38068, 37799, 39441, 38116, 37992, 38147, 38166, 38186, 38022, 38246, 38263,
      /*  5295 */ 37318, 38304, 37318, 38354, 38370, 45231, 38397, 38413, 37861, 37459, 38432, 38451, 68861, 37456, 38429,
      /*  5310 */ 38448, 38467, 45226, 38483, 38407, 38516, 57783, 51848, 38545, 38580, 73050, 38677, 38610, 38626, 49222,
      /*  5325 */ 38643, 38660, 49221, 38642, 38659, 38676, 38693, 38624, 38714, 38739, 38791, 38841, 38876, 38942, 38892,
      /*  5340 */ 60443, 38908, 60433, 60449, 38914, 38930, 38946, 38962, 38978, 39013, 39048, 39078, 39105, 39169, 39156,
      /*  5355 */ 39172, 39188, 39089, 39218, 39249, 55484, 39265, 39291, 55476, 39311, 39327, 37693, 37318, 65659, 38698,
      /*  5370 */ 39356, 39410, 37835, 37848, 39457, 45051, 38498, 38500, 45058, 39494, 39520, 39559, 39504, 39575, 59063,
      /*  5385 */ 39606, 39616, 39632, 39681, 39692, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5400 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5415 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5430 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5445 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5460 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5475 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5490 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5505 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5520 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5535 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5550 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5565 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5580 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5595 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5610 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5625 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 39708, 43775, 37318, 37318, 37318, 48276, 37318, 37318,
      /*  5640 */ 37318, 37318, 69945, 73273, 57964, 40977, 41007, 44794, 41023, 73756, 40991, 36991, 37318, 37318, 41289,
      /*  5655 */ 37087, 37318, 37318, 37010, 37318, 37318, 37318, 37318, 37318, 65657, 40192, 38525, 37318, 37318, 39335,
      /*  5670 */ 40192, 38527, 37031, 44584, 37054, 37076, 37318, 37318, 74250, 37318, 69924, 37107, 37136, 37152, 65815,
      /*  5685 */ 69390, 37247, 37265, 53482, 37182, 37116, 37202, 37162, 41058, 37186, 37120, 37206, 37166, 74726, 69388,
      /*  5700 */ 37245, 37263, 53480, 37281, 37318, 41092, 37317, 37318, 37318, 45006, 57380, 37335, 37318, 74671, 64449,
      /*  5715 */ 74683, 40193, 37351, 37378, 40192, 39199, 37741, 69458, 41098, 41041, 37318, 46044, 37882, 69459, 41099,
      /*  5730 */ 41042, 37318, 46045, 37371, 74376, 37355, 37382, 40192, 39202, 38523, 74469, 50180, 37398, 37414, 37436,
      /*  5745 */ 50351, 37475, 37318, 58014, 37496, 39340, 37628, 37651, 37674, 55492, 37717, 38230, 37546, 37566, 58028,
      /*  5760 */ 41986, 37605, 37523, 37542, 37562, 58024, 37582, 37601, 39304, 37621, 37644, 37667, 37690, 37709, 37733,
      /*  5775 */ 74273, 57770, 38317, 37757, 37779, 37822, 46961, 37943, 37979, 37995, 38150, 38170, 38011, 38093, 38038,
      /*  5790 */ 38061, 37792, 39434, 38084, 38100, 38045, 38068, 37799, 39441, 38116, 37992, 38147, 38166, 38186, 38022,
      /*  5805 */ 38246, 38263, 37318, 38304, 37318, 38354, 38370, 45231, 38397, 38413, 37861, 37459, 38432, 38451, 68861,
      /*  5820 */ 37456, 38429, 38448, 38467, 45226, 38483, 38407, 38516, 57783, 51848, 38545, 38580, 73050, 38677, 38610,
      /*  5835 */ 38626, 49222, 38643, 38660, 49221, 38642, 38659, 38676, 38693, 38624, 38714, 38739, 38791, 38841, 38876,
      /*  5850 */ 38942, 38892, 60443, 38908, 60433, 60449, 38914, 38930, 38946, 38962, 38978, 39013, 39048, 39078, 39105,
      /*  5865 */ 39169, 39156, 39172, 39188, 39089, 39218, 39249, 55484, 39265, 39291, 55476, 39311, 39327, 37693, 37318,
      /*  5880 */ 65659, 38698, 39356, 39410, 37835, 37848, 39457, 45051, 38498, 38500, 45058, 39494, 39520, 39559, 39504,
      /*  5895 */ 39575, 59063, 39606, 39616, 39632, 39681, 39692, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5910 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5925 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5940 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5955 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5970 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  5985 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6000 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6015 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6030 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6045 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6060 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6075 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6090 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6105 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6120 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6135 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 39708, 37318, 37318, 37318, 37318, 48276,
      /*  6150 */ 37318, 37318, 37318, 37318, 45645, 38564, 57964, 41115, 41135, 37318, 41119, 41135, 41149, 36991, 37318,
      /*  6165 */ 37318, 41289, 37087, 37318, 37318, 37010, 37318, 37318, 37318, 37318, 37318, 65657, 40192, 38525, 37318,
      /*  6180 */ 37318, 39335, 40192, 38527, 37031, 44584, 37054, 37076, 37318, 37318, 37301, 37318, 69924, 37107, 37136,
      /*  6195 */ 37152, 65815, 69390, 37247, 37265, 53482, 37182, 37116, 37202, 37162, 37222, 37186, 37120, 37206, 37166,
      /*  6210 */ 74726, 69388, 37245, 37263, 53480, 37281, 37318, 41092, 37317, 37318, 37318, 45006, 57380, 37335, 37318,
      /*  6225 */ 74671, 64449, 74683, 40193, 37351, 37378, 40192, 39199, 37741, 69458, 41098, 41041, 37318, 46044, 37882,
      /*  6240 */ 69459, 41099, 41042, 37318, 46045, 37371, 74376, 37355, 37382, 40192, 39202, 38523, 74469, 50180, 37398,
      /*  6255 */ 37414, 37436, 50351, 37475, 37318, 58014, 37496, 39340, 37628, 37651, 37674, 55492, 37717, 38230, 37546,
      /*  6270 */ 37566, 58028, 41986, 37605, 37523, 37542, 37562, 58024, 37582, 37601, 39304, 37621, 37644, 37667, 37690,
      /*  6285 */ 37709, 37733, 74273, 57770, 38317, 37757, 37779, 37822, 46961, 37943, 37979, 37995, 38150, 38170, 38011,
      /*  6300 */ 38093, 38038, 38061, 37792, 39434, 38084, 38100, 38045, 38068, 37799, 39441, 38116, 37992, 38147, 38166,
      /*  6315 */ 38186, 38022, 38246, 38263, 37318, 38304, 37318, 38354, 38370, 45231, 38397, 38413, 37861, 37459, 38432,
      /*  6330 */ 38451, 68861, 37456, 38429, 38448, 38467, 45226, 38483, 38407, 38516, 57783, 51848, 38545, 38580, 73050,
      /*  6345 */ 38677, 38610, 38626, 49222, 38643, 38660, 49221, 38642, 38659, 38676, 38693, 38624, 38714, 38739, 38791,
      /*  6360 */ 38841, 38876, 38942, 38892, 60443, 38908, 60433, 60449, 38914, 38930, 38946, 38962, 38978, 39013, 39048,
      /*  6375 */ 39078, 39105, 39169, 39156, 39172, 39188, 39089, 39218, 39249, 55484, 39265, 39291, 55476, 39311, 39327,
      /*  6390 */ 37693, 37318, 65659, 38698, 39356, 39410, 37835, 37848, 39457, 45051, 38498, 38500, 45058, 39494, 39520,
      /*  6405 */ 39559, 39504, 39575, 59063, 39606, 39616, 39632, 39681, 39692, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6420 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6435 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6450 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6465 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6480 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6495 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6510 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6525 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6540 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6555 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6570 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6585 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6600 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6615 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6630 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6645 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 39708, 62620, 37318, 37318,
      /*  6660 */ 37318, 48276, 62315, 37318, 37318, 42112, 62617, 51150, 68655, 68669, 68671, 37318, 37318, 74000, 41165,
      /*  6675 */ 36991, 37318, 37318, 41289, 37087, 37318, 37318, 37010, 37318, 37318, 37318, 37318, 37318, 65657, 40192,
      /*  6690 */ 38525, 37318, 37318, 39335, 40192, 38527, 37031, 44584, 37054, 37076, 37318, 37318, 74250, 37318, 69924,
      /*  6705 */ 37107, 37136, 37152, 65815, 69390, 37247, 37265, 53482, 37182, 37116, 37202, 37162, 37222, 37186, 37120,
      /*  6720 */ 37206, 37166, 74726, 69388, 37245, 37263, 53480, 37281, 37318, 41092, 37317, 37318, 37318, 45006, 57380,
      /*  6735 */ 37335, 37318, 74671, 64449, 74683, 40193, 37351, 37378, 40192, 39199, 37741, 69458, 41098, 41041, 37318,
      /*  6750 */ 46044, 37882, 69459, 41099, 41042, 37318, 46045, 37371, 74376, 37355, 37382, 40192, 39202, 38523, 74469,
      /*  6765 */ 50180, 37398, 37414, 37436, 50351, 37475, 37318, 58014, 37496, 39340, 37628, 37651, 37674, 55492, 37717,
      /*  6780 */ 38230, 37546, 37566, 58028, 41986, 37605, 37523, 37542, 37562, 58024, 37582, 37601, 39304, 37621, 37644,
      /*  6795 */ 37667, 37690, 37709, 37733, 74273, 57770, 38317, 37757, 37779, 37822, 46961, 37943, 37979, 37995, 38150,
      /*  6810 */ 38170, 38011, 38093, 38038, 38061, 37792, 39434, 38084, 38100, 38045, 38068, 37799, 39441, 38116, 37992,
      /*  6825 */ 38147, 38166, 38186, 38022, 38246, 38263, 37318, 38304, 37318, 38354, 38370, 45231, 38397, 38413, 37861,
      /*  6840 */ 37459, 38432, 38451, 68861, 37456, 38429, 38448, 38467, 45226, 38483, 38407, 38516, 57783, 51848, 38545,
      /*  6855 */ 38580, 73050, 38677, 38610, 38626, 49222, 38643, 38660, 49221, 38642, 38659, 38676, 38693, 38624, 38714,
      /*  6870 */ 38739, 38791, 38841, 38876, 38942, 38892, 60443, 38908, 60433, 60449, 38914, 38930, 38946, 38962, 38978,
      /*  6885 */ 39013, 39048, 39078, 39105, 39169, 39156, 39172, 39188, 39089, 39218, 39249, 55484, 39265, 39291, 55476,
      /*  6900 */ 39311, 39327, 37693, 37318, 65659, 38698, 39356, 39410, 37835, 37848, 39457, 45051, 38498, 38500, 45058,
      /*  6915 */ 39494, 39520, 39559, 39504, 39575, 59063, 39606, 39616, 39632, 39681, 39692, 37318, 37318, 37318, 37318,
      /*  6930 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6945 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6960 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6975 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  6990 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7005 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7020 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7035 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7050 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7065 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7080 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7095 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7110 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7125 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7140 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7155 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 41215, 37318,
      /*  7170 */ 37318, 37318, 37318, 48276, 37318, 37318, 37318, 37318, 37318, 67919, 57964, 41238, 41258, 37318, 41242,
      /*  7185 */ 41258, 41272, 36991, 37318, 37318, 41289, 37087, 37318, 37318, 37010, 37318, 37318, 37318, 37318, 37318,
      /*  7200 */ 44404, 72644, 50028, 41369, 65498, 47282, 62003, 69205, 37318, 62433, 37318, 68839, 45752, 41288, 37301,
      /*  7215 */ 44633, 37318, 37318, 37318, 37318, 73164, 72644, 41305, 72644, 72644, 41324, 38775, 41542, 41542, 58552,
      /*  7230 */ 65498, 52179, 65498, 65498, 52319, 41461, 41342, 41461, 41461, 60376, 37318, 37318, 37318, 37318, 37318,
      /*  7245 */ 37318, 57380, 44576, 38329, 37318, 37318, 73164, 72644, 72644, 72644, 72644, 72644, 41363, 41542, 41542,
      /*  7260 */ 41542, 41542, 41542, 65493, 65498, 65498, 65498, 65498, 65498, 46825, 41461, 41461, 41461, 41461, 41461,
      /*  7275 */ 47041, 57802, 45001, 37318, 37318, 37318, 37318, 37318, 62575, 37318, 37318, 71516, 41385, 72644, 72644,
      /*  7290 */ 72644, 72645, 41405, 67865, 41542, 58857, 41542, 41542, 46917, 69302, 65498, 55881, 65498, 65498, 53308,
      /*  7305 */ 58621, 41461, 41722, 41461, 41461, 47863, 54854, 37318, 37318, 37318, 37318, 64802, 37318, 37318, 72642,
      /*  7320 */ 48855, 72644, 72644, 72644, 38767, 41542, 41439, 41542, 41542, 41444, 65497, 64981, 65498, 65498, 65498,
      /*  7335 */ 59803, 41461, 41460, 41461, 41461, 47863, 54854, 37318, 37318, 69109, 41478, 37318, 60498, 72644, 72644,
      /*  7350 */ 70521, 58547, 41542, 41542, 60742, 46770, 65498, 65498, 73471, 59798, 41461, 41461, 70944, 47288, 64766,
      /*  7365 */ 37318, 37318, 37507, 37318, 71005, 72644, 60920, 59569, 41542, 41542, 72922, 65498, 65498, 48896, 41461,
      /*  7380 */ 41461, 46878, 37318, 60844, 41498, 41222, 67506, 72644, 41518, 41541, 58729, 41559, 65498, 46559, 41593,
      /*  7395 */ 41462, 56939, 50451, 37318, 66947, 41614, 41423, 73664, 58829, 59801, 41638, 49498, 41664, 52412, 41686,
      /*  7410 */ 41702, 41738, 63218, 38594, 66255, 64873, 73961, 46828, 73161, 59759, 73663, 59797, 47605, 39543, 41802,
      /*  7425 */ 41825, 41848, 60496, 73658, 47451, 47606, 53268, 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318,
      /*  7440 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7455 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7470 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7485 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7500 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7515 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7530 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7545 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7560 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7575 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7590 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7605 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7620 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7635 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7650 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7665 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7680 */ 39708, 37318, 37318, 37318, 37318, 48276, 37318, 37318, 37318, 37318, 37318, 45787, 57964, 41925, 72170,
      /*  7695 */ 37318, 38278, 38288, 41945, 36991, 37318, 37318, 41289, 37087, 37318, 37318, 41981, 37318, 37318, 37318,
      /*  7710 */ 37318, 37318, 65657, 40192, 38525, 37318, 37318, 69382, 40192, 38527, 37031, 44584, 37054, 37076, 37318,
      /*  7725 */ 37318, 74250, 37318, 69924, 37107, 37136, 37152, 65815, 69390, 37247, 37265, 53482, 37182, 37116, 37202,
      /*  7740 */ 37162, 37222, 37186, 37120, 37206, 37166, 74726, 69388, 37245, 37263, 53480, 37281, 37318, 41092, 37317,
      /*  7755 */ 37318, 37318, 45006, 57380, 37335, 37318, 74671, 64449, 74683, 40193, 37351, 37378, 40192, 39199, 37741,
      /*  7770 */ 69458, 41098, 41041, 37318, 46044, 37882, 69459, 41099, 41042, 37318, 46045, 37371, 74376, 37355, 37382,
      /*  7785 */ 40192, 39202, 38523, 74469, 50180, 37398, 37414, 37436, 50351, 37475, 37318, 58014, 37496, 39340, 37628,
      /*  7800 */ 37651, 37674, 55492, 37717, 38230, 37546, 37566, 58028, 41986, 37605, 37523, 37542, 37562, 58024, 37582,
      /*  7815 */ 37601, 39304, 37621, 37644, 37667, 37690, 37709, 37733, 74273, 57770, 38317, 37757, 37779, 37822, 46961,
      /*  7830 */ 37943, 37979, 37995, 38150, 38170, 38011, 38093, 38038, 38061, 37792, 39434, 38084, 38100, 38045, 38068,
      /*  7845 */ 37799, 39441, 38116, 37992, 38147, 38166, 38186, 38022, 38246, 38263, 37318, 38304, 37318, 38354, 38370,
      /*  7860 */ 45231, 38397, 38413, 37861, 37459, 38432, 38451, 68861, 37456, 38429, 38448, 38467, 45226, 38483, 38407,
      /*  7875 */ 38516, 57783, 51848, 38545, 38580, 73050, 38677, 38610, 38626, 49222, 38643, 38660, 49221, 38642, 38659,
      /*  7890 */ 38676, 38693, 38624, 38714, 38739, 38791, 38841, 38876, 38942, 38892, 60443, 38908, 60433, 60449, 38914,
      /*  7905 */ 38930, 38946, 38962, 38978, 39013, 39048, 39078, 39105, 39169, 39156, 39172, 39188, 39089, 39218, 39249,
      /*  7920 */ 55484, 39265, 39291, 55476, 39311, 39327, 37693, 37318, 65659, 38698, 39356, 39410, 37835, 37848, 39457,
      /*  7935 */ 45051, 38498, 38500, 45058, 39494, 39520, 39559, 39504, 39575, 59063, 39606, 39616, 39632, 39681, 39692,
      /*  7950 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7965 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7980 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  7995 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8010 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8025 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8040 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8055 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8070 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8085 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8100 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8115 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8130 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8145 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8160 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8175 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8190 */ 37318, 37318, 39708, 42002, 37318, 37318, 37318, 45026, 37318, 37318, 37318, 37318, 37318, 67919, 57964,
      /*  8205 */ 42022, 71555, 37318, 43019, 43028, 71570, 36991, 37318, 37318, 41289, 37087, 37318, 37318, 37010, 42042,
      /*  8220 */ 37318, 73045, 37318, 37318, 65657, 40192, 38525, 37318, 37318, 39335, 40192, 45833, 37031, 44584, 37054,
      /*  8235 */ 37076, 37318, 37318, 74250, 37318, 69924, 37107, 37136, 37152, 65815, 69390, 37247, 37265, 53482, 37182,
      /*  8250 */ 37116, 37202, 37162, 37222, 37186, 37120, 37206, 37166, 74726, 69388, 37245, 37263, 53480, 37281, 37318,
      /*  8265 */ 41092, 37317, 37318, 37318, 45006, 57380, 37335, 37318, 74671, 64449, 74683, 40193, 37351, 37378, 40192,
      /*  8280 */ 39199, 37741, 69458, 41098, 41041, 37318, 46044, 37882, 69459, 41099, 41042, 37318, 46045, 37371, 74376,
      /*  8295 */ 37355, 37382, 40192, 39202, 38523, 74469, 50180, 37398, 37414, 37436, 50351, 37475, 37318, 58014, 37496,
      /*  8310 */ 39340, 37628, 37651, 37674, 55492, 37717, 38230, 37546, 37566, 58028, 41986, 37605, 37523, 37542, 37562,
      /*  8325 */ 58024, 37582, 37601, 39304, 37621, 37644, 37667, 37690, 37709, 37733, 74273, 57770, 38317, 37757, 37779,
      /*  8340 */ 37822, 46961, 37943, 37979, 37995, 38150, 38170, 38011, 38093, 38038, 38061, 37792, 39434, 38084, 38100,
      /*  8355 */ 38045, 38068, 37799, 39441, 38116, 37992, 38147, 38166, 38186, 38022, 38246, 38263, 37318, 38304, 37318,
      /*  8370 */ 38354, 38370, 45231, 38397, 38413, 37861, 37459, 38432, 38451, 68861, 37456, 38429, 38448, 38467, 45226,
      /*  8385 */ 38483, 38407, 38516, 57783, 51848, 38545, 38580, 73050, 38677, 38610, 38626, 49222, 38643, 38660, 49221,
      /*  8400 */ 38642, 38659, 38676, 38693, 38624, 38714, 38739, 38791, 38841, 38876, 38942, 38892, 60443, 38908, 60433,
      /*  8415 */ 60449, 38914, 38930, 38946, 38962, 38978, 39013, 39048, 39078, 39105, 39169, 39156, 39172, 39188, 39089,
      /*  8430 */ 39218, 39249, 55484, 39265, 39291, 55476, 39311, 39327, 37693, 37318, 65659, 38698, 39356, 39410, 37835,
      /*  8445 */ 37848, 39457, 45051, 38498, 38500, 45058, 39494, 39520, 39559, 39504, 39575, 59063, 39606, 39616, 39632,
      /*  8460 */ 39681, 39692, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8475 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8490 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8505 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8520 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8535 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8550 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8565 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8580 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8595 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8610 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8625 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8640 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8655 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8670 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8685 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8700 */ 37318, 37318, 37318, 37318, 39708, 42061, 37318, 37318, 37318, 48276, 37318, 37318, 37318, 37318, 37318,
      /*  8715 */ 50713, 57964, 37318, 37318, 37318, 38993, 38997, 42078, 42128, 37318, 37318, 41289, 37087, 37318, 37318,
      /*  8730 */ 42147, 37318, 37318, 37318, 37318, 37318, 44404, 72644, 50028, 41369, 65498, 42168, 62003, 69205, 37318,
      /*  8745 */ 37318, 37318, 68839, 37318, 37318, 39275, 37318, 37318, 37318, 37318, 37318, 73164, 72644, 72644, 72644,
      /*  8760 */ 72644, 41324, 41542, 41542, 41542, 58552, 65498, 65498, 65498, 65498, 57854, 41461, 41461, 41461, 41461,
      /*  8775 */ 64567, 42190, 37318, 37318, 37318, 37318, 37318, 42212, 37318, 37318, 37318, 37318, 73164, 72644, 72644,
      /*  8790 */ 72644, 72644, 72644, 41363, 41542, 41542, 41542, 41542, 41542, 65493, 65498, 65498, 65498, 65498, 65498,
      /*  8805 */ 46825, 41461, 41461, 41461, 41461, 41461, 67436, 42249, 37318, 37318, 37318, 37318, 37318, 44403, 37318,
      /*  8820 */ 37318, 37318, 72643, 72644, 72644, 72644, 72644, 72187, 38772, 41542, 41542, 41542, 41542, 41542, 72266,
      /*  8835 */ 65498, 65498, 65498, 65498, 65498, 59800, 41461, 41461, 41461, 41461, 41461, 47863, 51497, 37318, 37318,
      /*  8850 */ 37318, 37318, 37318, 37318, 37318, 72642, 72644, 72644, 72644, 72644, 42270, 41542, 41542, 41542, 41542,
      /*  8865 */ 49331, 65497, 65498, 65498, 65498, 65498, 59803, 41461, 41461, 41461, 41461, 47863, 47501, 37318, 37318,
      /*  8880 */ 37318, 37318, 37318, 60498, 72644, 72644, 72644, 42291, 41542, 41542, 41542, 59595, 65498, 65498, 65498,
      /*  8895 */ 59798, 41461, 41461, 41461, 47288, 37318, 37318, 37318, 37318, 37318, 72644, 72644, 60920, 41542, 41542,
      /*  8910 */ 41542, 65498, 65498, 65498, 63673, 41461, 41461, 56936, 37318, 37318, 37318, 73163, 72644, 72644, 50031,
      /*  8925 */ 41542, 73662, 65498, 65498, 59802, 41461, 41462, 56939, 61615, 37318, 72643, 60923, 41542, 73664, 65498,
      /*  8940 */ 59801, 41461, 49498, 72946, 72644, 50030, 54383, 59799, 54339, 61620, 60922, 73660, 47450, 46828, 73161,
      /*  8955 */ 59759, 73663, 59797, 47605, 60497, 50030, 47449, 46829, 60496, 73658, 47451, 47606, 53268, 62159, 62339,
      /*  8970 */ 66862, 41867, 41898, 41909, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  8985 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9000 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9015 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9030 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9045 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9060 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9075 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9090 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9105 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9120 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9135 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9150 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9165 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9180 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9195 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9210 */ 37318, 37318, 37318, 37318, 37318, 37318, 39708, 63809, 37318, 37318, 37318, 49242, 42389, 37318, 37318,
      /*  9225 */ 42312, 41767, 44524, 59934, 42356, 42367, 45136, 42383, 44513, 42405, 42445, 37318, 37318, 40926, 42420,
      /*  9240 */ 37318, 37318, 37010, 37318, 37318, 37318, 37318, 37318, 65657, 40192, 44142, 43528, 42807, 74542, 43714,
      /*  9255 */ 44329, 37031, 44584, 37054, 42466, 37318, 37318, 74250, 37318, 69924, 37107, 37136, 37152, 65815, 69390,
      /*  9270 */ 37247, 37265, 53482, 42495, 44053, 42520, 44234, 42536, 42631, 42566, 42582, 42617, 43323, 74548, 42732,
      /*  9285 */ 42652, 43181, 43457, 37318, 41092, 37317, 37318, 37318, 45006, 57380, 37335, 37318, 74671, 64449, 74683,
      /*  9300 */ 40193, 37351, 37378, 40192, 39199, 74695, 44148, 43301, 42504, 44146, 43812, 43314, 42636, 43906, 44107,
      /*  9315 */ 42807, 42594, 42699, 42706, 42722, 43750, 42901, 42677, 43141, 74469, 50180, 37398, 37414, 37436, 50351,
      /*  9330 */ 37475, 37318, 58014, 37496, 39340, 37628, 37651, 37674, 55492, 37717, 42748, 42962, 43618, 43603, 43820,
      /*  9345 */ 43354, 42764, 44271, 43892, 42788, 42804, 42826, 43918, 42855, 43210, 42882, 42898, 42920, 44134, 44337,
      /*  9360 */ 57770, 38317, 37757, 37779, 37822, 46961, 37943, 37979, 37995, 38150, 38170, 38011, 42949, 44040, 42992,
      /*  9375 */ 42978, 43271, 43008, 43044, 42839, 43084, 44099, 43110, 43126, 43172, 43197, 43740, 43442, 43226, 43242,
      /*  9390 */ 38263, 37318, 38304, 37318, 38354, 38370, 45231, 38397, 38413, 43259, 44205, 43287, 43339, 74705, 42601,
      /*  9405 */ 43379, 43395, 43411, 42683, 43427, 43493, 43509, 57783, 51848, 38545, 38580, 73050, 38677, 38610, 43544,
      /*  9420 */ 43363, 43588, 43648, 42772, 43664, 43059, 43680, 43709, 43730, 43766, 38739, 38791, 38841, 38876, 38942,
      /*  9435 */ 38892, 43800, 43836, 43632, 43878, 43941, 43957, 42665, 43973, 43989, 39013, 39048, 39078, 44025, 44069,
      /*  9450 */ 44085, 43094, 44123, 43693, 44164, 39249, 55484, 44195, 43559, 43068, 43925, 39327, 39819, 44240, 42810,
      /*  9465 */ 42904, 39356, 44221, 43849, 44282, 42866, 45051, 43520, 43862, 42933, 39494, 44256, 44298, 44314, 39590,
      /*  9480 */ 43572, 44353, 42550, 44369, 44420, 44431, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9495 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9510 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9525 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9540 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9555 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9570 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9585 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9600 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9615 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9630 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9645 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9660 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9675 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9690 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9705 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /*  9720 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 39708, 37091, 37318, 37318, 37318, 48276, 39140,
      /*  9735 */ 44447, 37318, 67184, 67184, 50155, 62190, 71955, 71957, 37318, 37089, 71946, 44465, 36991, 37318, 37318,
      /*  9750 */ 41289, 37087, 37318, 37318, 37010, 37318, 37318, 37318, 37318, 37318, 65657, 40192, 38525, 37318, 37318,
      /*  9765 */ 39335, 40192, 38527, 37031, 44584, 37054, 37076, 37318, 37318, 74250, 37318, 69924, 37107, 37136, 37152,
      /*  9780 */ 65815, 69390, 37247, 37265, 53482, 37182, 37116, 37202, 37162, 37222, 37186, 37120, 37206, 37166, 74726,
      /*  9795 */ 69388, 37245, 37263, 53480, 37281, 37318, 41092, 37317, 37318, 37318, 45006, 44502, 37335, 37318, 74671,
      /*  9810 */ 64449, 74683, 40193, 37351, 37378, 40192, 39199, 37741, 69458, 41098, 41041, 37318, 46044, 37882, 69459,
      /*  9825 */ 41099, 41042, 37318, 46045, 37371, 74376, 37355, 37382, 40192, 39202, 38381, 36956, 50180, 37398, 37414,
      /*  9840 */ 37436, 50351, 44540, 37318, 58014, 37496, 39340, 37628, 37651, 37674, 55492, 37717, 38230, 37546, 37566,
      /*  9855 */ 58028, 41986, 37605, 37523, 37542, 37562, 58024, 37582, 37601, 39304, 37621, 37644, 37667, 37690, 37709,
      /*  9870 */ 37733, 44565, 57770, 38317, 37757, 37779, 37822, 46961, 37943, 37979, 37995, 38150, 38170, 38011, 44600,
      /*  9885 */ 38038, 38061, 37792, 39434, 44649, 38100, 38045, 38068, 37799, 39441, 38116, 37992, 38147, 38166, 38186,
      /*  9900 */ 38022, 38246, 38263, 37318, 38304, 37318, 38354, 38370, 45231, 38397, 38413, 44665, 37459, 38432, 38451,
      /*  9915 */ 37229, 37456, 38429, 38448, 38467, 45226, 38483, 38407, 38516, 57783, 51848, 38545, 38580, 73050, 38677,
      /*  9930 */ 38610, 38626, 49222, 38643, 38660, 49221, 38642, 38659, 38676, 38693, 38624, 38714, 38739, 38791, 38841,
      /*  9945 */ 38876, 38942, 38892, 60443, 38908, 60433, 60449, 38914, 38930, 38946, 38962, 38978, 39013, 39048, 39078,
      /*  9960 */ 39105, 39169, 39156, 39172, 39188, 39089, 39218, 39249, 55484, 39265, 39291, 55476, 39311, 39327, 37693,
      /*  9975 */ 37318, 65659, 38698, 39356, 39410, 37835, 37848, 39457, 45051, 38498, 38500, 45058, 39494, 39520, 39559,
      /*  9990 */ 39504, 39575, 59063, 39606, 39616, 39632, 39681, 39692, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10005 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10020 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10035 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10050 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10065 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10080 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10095 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10110 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10125 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10140 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10155 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10170 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10185 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10200 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10215 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10230 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 39708, 37318, 37318, 37318, 37318,
      /* 10245 */ 48276, 37318, 37318, 37318, 37318, 37318, 37318, 73156, 44700, 44701, 37318, 74225, 74229, 44717, 36991,
      /* 10260 */ 37318, 37318, 41289, 37087, 37318, 37318, 37010, 37318, 37318, 46650, 37318, 37318, 65657, 40192, 38525,
      /* 10275 */ 37318, 37318, 39335, 40192, 44756, 37031, 44584, 37054, 37076, 37318, 37318, 74250, 37318, 69924, 37107,
      /* 10290 */ 37136, 37152, 65815, 69390, 37247, 37265, 53482, 37182, 37116, 37202, 37162, 37222, 37186, 37120, 37206,
      /* 10305 */ 37166, 74726, 69388, 37245, 37263, 53480, 37281, 37318, 41092, 37317, 37318, 37318, 45006, 57380, 37335,
      /* 10320 */ 37318, 74671, 64449, 74683, 40193, 37351, 37378, 40192, 39199, 37741, 69458, 41098, 41041, 37318, 46044,
      /* 10335 */ 37882, 69459, 41099, 41042, 37318, 46045, 37371, 74376, 37355, 37382, 40192, 39202, 38523, 74469, 50180,
      /* 10350 */ 37398, 37414, 37436, 50351, 37475, 37318, 58014, 37496, 39340, 37628, 37651, 37674, 55492, 37717, 38230,
      /* 10365 */ 37546, 37566, 58028, 41986, 37605, 37523, 37542, 37562, 58024, 37582, 37601, 39304, 37621, 37644, 37667,
      /* 10380 */ 37690, 37709, 37733, 74273, 57770, 38317, 37757, 37779, 37822, 46961, 37943, 37979, 37995, 38150, 38170,
      /* 10395 */ 38011, 38093, 38038, 38061, 37792, 39434, 38084, 38100, 38045, 38068, 37799, 39441, 38116, 37992, 38147,
      /* 10410 */ 38166, 38186, 38022, 38246, 38263, 37318, 38304, 37318, 38354, 38370, 45231, 38397, 38413, 37861, 37459,
      /* 10425 */ 38432, 38451, 68861, 37456, 38429, 38448, 38467, 45226, 38483, 38407, 38516, 57783, 51848, 38545, 38580,
      /* 10440 */ 73050, 38677, 38610, 38626, 49222, 38643, 38660, 49221, 38642, 38659, 38676, 38693, 38624, 38714, 38739,
      /* 10455 */ 38791, 38841, 38876, 38942, 38892, 60443, 38908, 60433, 60449, 38914, 38930, 38946, 38962, 38978, 39013,
      /* 10470 */ 39048, 39078, 39105, 39169, 39156, 39172, 39188, 39089, 39218, 39249, 55484, 39265, 39291, 55476, 39311,
      /* 10485 */ 39327, 37693, 37318, 65659, 38698, 39356, 39410, 37835, 37848, 39457, 45051, 38498, 38500, 45058, 39494,
      /* 10500 */ 39520, 39559, 39504, 39575, 59063, 39606, 39616, 39632, 39681, 39692, 37318, 37318, 37318, 37318, 37318,
      /* 10515 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10530 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10545 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10560 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10575 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10590 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10605 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10620 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10635 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10650 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10665 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10680 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10695 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10710 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10725 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 10740 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 44775, 67647, 37318,
      /* 10755 */ 37318, 37318, 48276, 37318, 37318, 37318, 37318, 37318, 67919, 57964, 44810, 44811, 37318, 37318, 74488,
      /* 10770 */ 44827, 44876, 37318, 37318, 41289, 37087, 37318, 37318, 37010, 37318, 37318, 44898, 37318, 37318, 65657,
      /* 10785 */ 40192, 38525, 37318, 37318, 39335, 40192, 44921, 37031, 44584, 37054, 37076, 37318, 37318, 74250, 37318,
      /* 10800 */ 69924, 37107, 37136, 37152, 65815, 69390, 37247, 37265, 53482, 37182, 37116, 37202, 37162, 37222, 37186,
      /* 10815 */ 37120, 37206, 37166, 74726, 69388, 37245, 37263, 53480, 37281, 37318, 41092, 37317, 37318, 37318, 45006,
      /* 10830 */ 57380, 37335, 37318, 74671, 64449, 74683, 40193, 37351, 37378, 40192, 39199, 37741, 69458, 41098, 41041,
      /* 10845 */ 37318, 46044, 37882, 69459, 41099, 41042, 37318, 46045, 37371, 74376, 37355, 37382, 40192, 39202, 38523,
      /* 10860 */ 74469, 50180, 37398, 37414, 37436, 50351, 37475, 37318, 58014, 37496, 39340, 37628, 37651, 37674, 55492,
      /* 10875 */ 37717, 38230, 37546, 37566, 58028, 41986, 37605, 37523, 37542, 37562, 58024, 37582, 37601, 39304, 37621,
      /* 10890 */ 37644, 37667, 37690, 37709, 37733, 74273, 57770, 38317, 37757, 37779, 37822, 46961, 37943, 37979, 37995,
      /* 10905 */ 38150, 38170, 38011, 38093, 38038, 38061, 37792, 39434, 38084, 38100, 38045, 38068, 37799, 39441, 38116,
      /* 10920 */ 37992, 38147, 38166, 38186, 38022, 38246, 38263, 37318, 38304, 37318, 38354, 38370, 45231, 38397, 38413,
      /* 10935 */ 37861, 37459, 38432, 38451, 68861, 37456, 38429, 38448, 38467, 45226, 38483, 38407, 38516, 57783, 51848,
      /* 10950 */ 38545, 38580, 73050, 38677, 38610, 38626, 49222, 38643, 38660, 49221, 38642, 38659, 38676, 38693, 38624,
      /* 10965 */ 38714, 38739, 38791, 38841, 38876, 38942, 38892, 60443, 38908, 60433, 60449, 38914, 38930, 38946, 38962,
      /* 10980 */ 38978, 39013, 39048, 39078, 39105, 39169, 39156, 39172, 39188, 39089, 39218, 39249, 55484, 39265, 39291,
      /* 10995 */ 55476, 39311, 39327, 37693, 37318, 65659, 38698, 39356, 39410, 37835, 37848, 39457, 45051, 38498, 38500,
      /* 11010 */ 45058, 39494, 39520, 39559, 39504, 39575, 59063, 39606, 39616, 39632, 39681, 39692, 37318, 37318, 37318,
      /* 11025 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11040 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11055 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11070 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11085 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11100 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11115 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11130 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11145 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11160 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11175 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11190 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11205 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11220 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11235 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11250 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 44940,
      /* 11265 */ 44949, 37318, 37318, 37318, 45580, 37318, 37318, 37318, 37318, 37318, 67919, 57964, 44969, 44970, 37318,
      /* 11280 */ 37318, 68795, 44986, 45022, 37318, 37318, 41289, 37087, 37318, 37318, 37010, 37318, 37318, 72142, 37318,
      /* 11295 */ 37318, 65657, 40192, 38525, 37318, 37318, 39335, 40192, 38201, 37031, 44584, 37054, 37076, 37318, 37318,
      /* 11310 */ 74250, 37318, 69924, 37107, 37136, 37152, 65815, 69390, 37247, 37265, 53482, 37182, 37116, 37202, 37162,
      /* 11325 */ 37222, 37186, 37120, 37206, 37166, 74726, 69388, 37245, 37263, 53480, 37281, 37318, 41092, 37317, 37318,
      /* 11340 */ 37318, 45006, 57380, 37335, 37318, 74671, 64449, 74683, 40193, 37351, 37378, 40192, 39199, 37741, 69458,
      /* 11355 */ 41098, 41041, 37318, 46044, 37882, 69459, 41099, 41042, 37318, 46045, 37371, 74376, 37355, 37382, 40192,
      /* 11370 */ 39202, 38523, 74469, 50180, 37398, 37414, 37436, 50351, 37475, 37318, 58014, 37496, 39340, 37628, 37651,
      /* 11385 */ 37674, 55492, 37717, 38230, 37546, 37566, 58028, 41986, 37605, 37523, 37542, 37562, 58024, 37582, 37601,
      /* 11400 */ 39304, 37621, 37644, 37667, 37690, 37709, 37733, 74273, 57770, 38317, 37757, 37779, 37822, 46961, 37943,
      /* 11415 */ 37979, 37995, 38150, 38170, 38011, 38093, 38038, 38061, 37792, 39434, 38084, 38100, 38045, 38068, 37799,
      /* 11430 */ 39441, 38116, 37992, 38147, 38166, 38186, 38022, 38246, 38263, 37318, 38304, 37318, 38354, 38370, 45231,
      /* 11445 */ 38397, 38413, 37861, 37459, 38432, 38451, 68861, 37456, 38429, 38448, 38467, 45226, 38483, 38407, 38516,
      /* 11460 */ 57783, 51848, 38545, 38580, 73050, 38677, 38610, 38626, 49222, 38643, 38660, 49221, 38642, 38659, 38676,
      /* 11475 */ 38693, 38624, 38714, 38739, 38791, 38841, 38876, 38942, 38892, 60443, 38908, 60433, 60449, 38914, 38930,
      /* 11490 */ 38946, 38962, 38978, 39013, 39048, 39078, 39105, 39169, 39156, 39172, 39188, 39089, 39218, 39249, 55484,
      /* 11505 */ 39265, 39291, 55476, 39311, 45042, 37693, 37318, 65659, 38698, 39356, 39410, 37835, 37848, 39457, 45051,
      /* 11520 */ 38498, 38500, 45058, 39494, 39520, 39559, 39504, 39575, 59063, 39606, 39616, 39632, 39681, 39692, 37318,
      /* 11535 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11550 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11565 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11580 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11595 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11610 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11625 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11640 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11655 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11670 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11685 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11700 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11715 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11730 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11745 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11760 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 11775 */ 37318, 45074, 37318, 37318, 37318, 37318, 48276, 59955, 37318, 37318, 37318, 59954, 73317, 57964, 37318,
      /* 11790 */ 45118, 37318, 37318, 45127, 45152, 36991, 37318, 37318, 41289, 37087, 37318, 37318, 37010, 45201, 37318,
      /* 11805 */ 37318, 37318, 37318, 65657, 40192, 38525, 37318, 37318, 45220, 40192, 45247, 37031, 44584, 37054, 37076,
      /* 11820 */ 37318, 37318, 74250, 37318, 69924, 37107, 37136, 37152, 65815, 69390, 37247, 37265, 53482, 37182, 37116,
      /* 11835 */ 37202, 37162, 37222, 37186, 37120, 37206, 37166, 74726, 69388, 37245, 37263, 53480, 37281, 37318, 41092,
      /* 11850 */ 37317, 37318, 37318, 45006, 57380, 37335, 37318, 74671, 64449, 74683, 40193, 37351, 37378, 40192, 39199,
      /* 11865 */ 37741, 69458, 41098, 41041, 37318, 46044, 37882, 69459, 41099, 41042, 37318, 46045, 37371, 74376, 37355,
      /* 11880 */ 37382, 40192, 39202, 38523, 74469, 50180, 37398, 37414, 37436, 50351, 37475, 37318, 58014, 37496, 39340,
      /* 11895 */ 37628, 37651, 37674, 55492, 37717, 38230, 37546, 37566, 58028, 41986, 37605, 37523, 37542, 37562, 58024,
      /* 11910 */ 37582, 37601, 39304, 37621, 37644, 37667, 37690, 37709, 37733, 74273, 57770, 38317, 37757, 37779, 37822,
      /* 11925 */ 46961, 37943, 37979, 37995, 38150, 38170, 38011, 38093, 38038, 38061, 37792, 39434, 38084, 38100, 38045,
      /* 11940 */ 38068, 37799, 39441, 38116, 37992, 38147, 38166, 38186, 38022, 38246, 38263, 37318, 38304, 37318, 38354,
      /* 11955 */ 38370, 45231, 38397, 38413, 37861, 37459, 38432, 38451, 68861, 37456, 38429, 38448, 38467, 45226, 38483,
      /* 11970 */ 38407, 38516, 57783, 51848, 38545, 38580, 73050, 38677, 38610, 38626, 49222, 38643, 38660, 49221, 38642,
      /* 11985 */ 38659, 38676, 38693, 38624, 38714, 38739, 38791, 38841, 38876, 38942, 38892, 60443, 38908, 60433, 60449,
      /* 12000 */ 38914, 38930, 38946, 38962, 38978, 39013, 39048, 39078, 39105, 39169, 39156, 39172, 39188, 39089, 39218,
      /* 12015 */ 39249, 55484, 39265, 39291, 55476, 39311, 39327, 37693, 37318, 65659, 38698, 39356, 39410, 37835, 37848,
      /* 12030 */ 39457, 45051, 38498, 38500, 45058, 39494, 39520, 39559, 39504, 39575, 59063, 39606, 39616, 39632, 39681,
      /* 12045 */ 39692, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12060 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12075 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12090 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12105 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12120 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12135 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12150 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12165 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12180 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12195 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12210 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12225 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12240 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12255 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12270 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12285 */ 37318, 37318, 37318, 39708, 37318, 37318, 37318, 37318, 48276, 37318, 37318, 37318, 37318, 37318, 67919,
      /* 12300 */ 57964, 37318, 37318, 37318, 46105, 37318, 45266, 36991, 37318, 37318, 41289, 37087, 37318, 37318, 37010,
      /* 12315 */ 37318, 37318, 37318, 37318, 37318, 65657, 40192, 38525, 37318, 37318, 39335, 40192, 38527, 37031, 44584,
      /* 12330 */ 37054, 37076, 37318, 37318, 74250, 37318, 69924, 37107, 37136, 37152, 65815, 69390, 37247, 37265, 53482,
      /* 12345 */ 37182, 37116, 37202, 37162, 37222, 37186, 37120, 37206, 37166, 74726, 69388, 37245, 37263, 53480, 37281,
      /* 12360 */ 37318, 41092, 37317, 37318, 37318, 45006, 57380, 37335, 37318, 74671, 64449, 74683, 40193, 37351, 37378,
      /* 12375 */ 40192, 39199, 37741, 69458, 41098, 41041, 37318, 46044, 37882, 69459, 41099, 41042, 37318, 46045, 37371,
      /* 12390 */ 74376, 37355, 37382, 40192, 39202, 38523, 74469, 50180, 37398, 37414, 37436, 50351, 37475, 37318, 58014,
      /* 12405 */ 37496, 39340, 37628, 37651, 37674, 55492, 37717, 38230, 37546, 37566, 58028, 41986, 37605, 37523, 37542,
      /* 12420 */ 37562, 58024, 37582, 37601, 39304, 37621, 37644, 37667, 37690, 37709, 37733, 74273, 57770, 38317, 37757,
      /* 12435 */ 37779, 37822, 46961, 37943, 37979, 37995, 38150, 38170, 38011, 38093, 38038, 38061, 37792, 39434, 38084,
      /* 12450 */ 38100, 38045, 38068, 37799, 39441, 38116, 37992, 38147, 38166, 38186, 38022, 38246, 38263, 37318, 38304,
      /* 12465 */ 37318, 38354, 38370, 45231, 38397, 38413, 37861, 37459, 38432, 38451, 68861, 37456, 38429, 38448, 38467,
      /* 12480 */ 45226, 38483, 38407, 38516, 57783, 51848, 38545, 38580, 73050, 38677, 38610, 38626, 49222, 38643, 38660,
      /* 12495 */ 49221, 38642, 38659, 38676, 38693, 38624, 38714, 38739, 38791, 38841, 38876, 38942, 38892, 60443, 38908,
      /* 12510 */ 60433, 60449, 38914, 38930, 38946, 38962, 38978, 39013, 39048, 39078, 39105, 39169, 39156, 39172, 39188,
      /* 12525 */ 39089, 39218, 39249, 55484, 39265, 39291, 55476, 39311, 39327, 37693, 37318, 65659, 38698, 39356, 39410,
      /* 12540 */ 37835, 37848, 39457, 45051, 38498, 38500, 45058, 39494, 39520, 39559, 39504, 39575, 59063, 39606, 39616,
      /* 12555 */ 39632, 39681, 39692, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12570 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12585 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12600 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12615 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12630 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12645 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12660 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12675 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12690 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12705 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12720 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12735 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12750 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12765 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12780 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 12795 */ 37318, 37318, 37318, 37318, 37318, 45302, 37318, 37318, 37318, 37318, 44953, 37318, 37318, 37318, 37318,
      /* 12810 */ 37318, 67919, 57964, 37318, 37318, 45323, 45350, 63443, 47000, 65689, 37318, 37318, 41289, 37087, 37318,
      /* 12825 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 44404, 72644, 50028, 41369, 65498, 47282, 62003, 72217,
      /* 12840 */ 37318, 37318, 37318, 68839, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 73164, 72644, 72644,
      /* 12855 */ 72644, 72644, 45386, 41542, 41542, 41542, 52709, 65498, 65498, 65498, 65498, 57854, 41461, 41461, 41461,
      /* 12870 */ 41461, 64567, 41960, 37318, 37318, 37318, 37318, 37318, 44399, 37318, 37318, 37318, 37318, 73164, 72644,
      /* 12885 */ 72644, 72644, 72644, 72644, 41363, 41542, 41542, 41542, 41542, 41542, 65493, 65498, 65498, 65498, 65498,
      /* 12900 */ 65498, 46825, 41461, 41461, 41461, 41461, 41461, 63696, 45404, 37318, 37318, 37318, 37318, 37318, 44403,
      /* 12915 */ 37318, 37318, 37318, 72643, 72644, 72644, 72644, 72644, 72645, 38772, 41542, 41542, 41542, 41542, 41542,
      /* 12930 */ 45363, 65498, 65498, 65498, 65498, 65498, 59800, 41461, 41461, 41461, 41461, 41461, 47863, 51497, 37318,
      /* 12945 */ 37318, 37318, 37318, 47785, 37318, 37318, 72642, 72644, 72644, 72644, 72644, 61913, 41542, 41542, 41542,
      /* 12960 */ 41542, 48876, 65497, 65498, 65498, 65498, 65498, 59803, 41461, 41461, 41461, 41461, 47863, 47501, 37318,
      /* 12975 */ 37318, 37318, 37318, 37318, 60498, 72644, 72644, 72644, 42291, 41542, 41542, 41542, 59595, 65498, 65498,
      /* 12990 */ 65498, 59798, 41461, 41461, 41461, 47288, 37318, 37318, 37318, 45425, 37318, 72644, 72644, 60920, 41542,
      /* 13005 */ 41542, 41542, 65498, 65498, 65498, 63673, 41461, 41461, 56936, 37318, 37318, 37318, 73163, 72644, 72644,
      /* 13020 */ 50031, 41542, 73662, 65498, 65498, 59802, 41461, 41462, 56939, 61615, 37318, 72643, 60923, 41542, 73664,
      /* 13035 */ 65498, 59801, 41461, 49498, 72946, 72644, 50030, 54383, 59799, 54339, 61620, 60922, 73660, 47450, 46828,
      /* 13050 */ 73161, 59759, 73663, 59797, 47605, 60497, 50030, 47449, 46829, 60496, 73658, 47451, 47606, 53268, 62159,
      /* 13065 */ 62339, 66862, 41867, 41898, 41909, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13080 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13095 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13110 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13125 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13140 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13155 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13170 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13185 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13200 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13215 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13230 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13245 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13260 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13275 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13290 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13305 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318, 37318, 37318, 37318, 44953, 37318, 37318,
      /* 13320 */ 37318, 37318, 37318, 67919, 57964, 37318, 37318, 45323, 45350, 63443, 47000, 65689, 37318, 37318, 41289,
      /* 13335 */ 37087, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 44404, 72644, 50028, 41369, 65498, 47282,
      /* 13350 */ 62003, 72217, 37318, 37318, 37318, 68839, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 73164,
      /* 13365 */ 72644, 72644, 72644, 72644, 45386, 41542, 41542, 41542, 52709, 65498, 65498, 65498, 65498, 57854, 41461,
      /* 13380 */ 41461, 41461, 41461, 64567, 41960, 37318, 37318, 37318, 37318, 37318, 44399, 37318, 37318, 37318, 37318,
      /* 13395 */ 73164, 72644, 72644, 72644, 72644, 72644, 41363, 41542, 41542, 41542, 41542, 41542, 65493, 65498, 65498,
      /* 13410 */ 65498, 65498, 65498, 46825, 41461, 41461, 41461, 41461, 41461, 63696, 45404, 37318, 37318, 37318, 37318,
      /* 13425 */ 37318, 44403, 37318, 37318, 37318, 72643, 72644, 72644, 72644, 72644, 72645, 38772, 41542, 41542, 41542,
      /* 13440 */ 41542, 41542, 45363, 65498, 65498, 65498, 65498, 65498, 59800, 41461, 41461, 41461, 41461, 41461, 47863,
      /* 13455 */ 51497, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 72642, 72644, 72644, 72644, 72644, 61913, 41542,
      /* 13470 */ 41542, 41542, 41542, 48876, 65497, 65498, 65498, 65498, 65498, 59803, 41461, 41461, 41461, 41461, 47863,
      /* 13485 */ 47501, 37318, 37318, 37318, 37318, 37318, 60498, 72644, 72644, 72644, 42291, 41542, 41542, 41542, 59595,
      /* 13500 */ 65498, 65498, 65498, 59798, 41461, 41461, 41461, 47288, 37318, 37318, 37318, 37318, 37318, 72644, 72644,
      /* 13515 */ 60920, 41542, 41542, 41542, 65498, 65498, 65498, 63673, 41461, 41461, 56936, 37318, 37318, 37318, 73163,
      /* 13530 */ 72644, 72644, 50031, 41542, 73662, 65498, 65498, 59802, 41461, 41462, 56939, 61615, 37318, 72643, 60923,
      /* 13545 */ 41542, 73664, 65498, 59801, 41461, 49498, 72946, 72644, 50030, 54383, 59799, 54339, 61620, 60922, 73660,
      /* 13560 */ 47450, 46828, 73161, 59759, 73663, 59797, 47605, 60497, 50030, 47449, 46829, 60496, 73658, 47451, 47606,
      /* 13575 */ 53268, 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13590 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13605 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13620 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13635 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13650 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13665 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13680 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13695 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13710 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13725 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13740 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13755 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13770 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13785 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13800 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13815 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318, 37318, 37318, 37318, 44953,
      /* 13830 */ 37318, 37318, 37318, 37318, 37318, 67919, 57964, 37318, 37318, 45323, 45350, 63443, 47000, 65689, 37318,
      /* 13845 */ 37318, 41289, 37087, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 44404, 72644, 50028, 41369,
      /* 13860 */ 65498, 47282, 62003, 72217, 37318, 37318, 37318, 68839, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 13875 */ 37318, 73164, 72644, 72644, 72644, 72644, 45386, 41542, 41542, 41542, 52709, 65498, 65498, 65498, 65498,
      /* 13890 */ 57854, 41461, 41461, 41461, 41461, 64567, 41960, 37318, 37318, 37318, 37318, 37318, 44399, 68819, 37318,
      /* 13905 */ 37318, 37318, 73164, 72644, 72644, 72644, 72644, 72644, 41363, 41542, 41542, 41542, 41542, 41542, 65493,
      /* 13920 */ 65498, 65498, 65498, 65498, 65498, 46825, 41461, 41461, 41461, 41461, 41461, 63696, 45404, 37318, 37318,
      /* 13935 */ 37318, 37318, 37318, 44403, 37318, 37318, 37318, 72643, 72644, 72644, 72644, 72644, 72645, 38772, 41542,
      /* 13950 */ 41542, 41542, 41542, 41542, 45363, 65498, 65498, 65498, 65498, 65498, 59800, 41461, 41461, 41461, 41461,
      /* 13965 */ 41461, 47863, 51497, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 72642, 72644, 72644, 72644, 72644,
      /* 13980 */ 61913, 41542, 41542, 41542, 41542, 48876, 65497, 65498, 65498, 65498, 65498, 59803, 41461, 41461, 41461,
      /* 13995 */ 41461, 47863, 47501, 37318, 37318, 37318, 37318, 37318, 60498, 72644, 72644, 72644, 42291, 41542, 41542,
      /* 14010 */ 41542, 59595, 65498, 65498, 65498, 59798, 41461, 41461, 41461, 47288, 37318, 37318, 37318, 37318, 37318,
      /* 14025 */ 72644, 72644, 60920, 41542, 41542, 41542, 65498, 65498, 65498, 63673, 41461, 41461, 56936, 37318, 37318,
      /* 14040 */ 37318, 73163, 72644, 72644, 50031, 41542, 73662, 65498, 65498, 59802, 41461, 41462, 56939, 61615, 37318,
      /* 14055 */ 72643, 60923, 41542, 73664, 65498, 59801, 41461, 49498, 72946, 72644, 50030, 54383, 59799, 54339, 61620,
      /* 14070 */ 60922, 73660, 47450, 46828, 73161, 59759, 73663, 59797, 47605, 60497, 50030, 47449, 46829, 60496, 73658,
      /* 14085 */ 47451, 47606, 53268, 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14100 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14115 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14130 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14145 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14160 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14175 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14190 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14205 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14220 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14235 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14250 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14265 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14280 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14295 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14310 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14325 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318, 37318, 37318,
      /* 14340 */ 37318, 44953, 37318, 37318, 37318, 37318, 37318, 67919, 57964, 37318, 37318, 45323, 45350, 63443, 47000,
      /* 14355 */ 65689, 37318, 37318, 41289, 37087, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 44404, 72644,
      /* 14370 */ 50028, 41369, 65498, 47282, 62003, 72217, 37318, 37318, 37318, 68839, 37318, 37318, 37318, 37318, 37318,
      /* 14385 */ 37318, 37318, 37318, 73164, 72644, 72644, 72644, 72644, 45386, 41542, 41542, 41542, 52709, 65498, 65498,
      /* 14400 */ 65498, 65498, 57854, 41461, 41461, 41461, 41461, 64567, 41960, 37318, 37318, 37318, 37318, 37318, 44399,
      /* 14415 */ 37318, 37318, 37318, 37318, 73164, 72644, 72644, 72644, 72644, 72644, 41363, 41542, 41542, 41542, 41542,
      /* 14430 */ 41542, 65493, 65498, 65498, 65498, 65498, 65498, 46825, 41461, 41461, 41461, 41461, 41461, 63696, 45404,
      /* 14445 */ 37318, 37318, 37318, 37318, 37318, 45442, 37318, 37318, 37318, 72643, 72644, 72644, 72644, 72644, 72645,
      /* 14460 */ 38772, 41542, 41542, 41542, 41542, 41542, 45363, 65498, 65498, 65498, 65498, 65498, 59800, 41461, 41461,
      /* 14475 */ 41461, 41461, 41461, 47863, 51497, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 72642, 72644, 72644,
      /* 14490 */ 72644, 72644, 61913, 41542, 41542, 41542, 41542, 48876, 65497, 65498, 65498, 65498, 65498, 59803, 41461,
      /* 14505 */ 41461, 41461, 41461, 47863, 47501, 37318, 37318, 37318, 37318, 37318, 60498, 72644, 72644, 72644, 42291,
      /* 14520 */ 41542, 41542, 41542, 59595, 65498, 65498, 65498, 59798, 41461, 41461, 41461, 47288, 37318, 37318, 37318,
      /* 14535 */ 37318, 37318, 72644, 72644, 60920, 41542, 41542, 41542, 65498, 65498, 65498, 63673, 41461, 41461, 56936,
      /* 14550 */ 37318, 37318, 37318, 73163, 72644, 72644, 50031, 41542, 73662, 65498, 65498, 59802, 41461, 41462, 56939,
      /* 14565 */ 61615, 37318, 72643, 60923, 41542, 73664, 65498, 59801, 41461, 49498, 72946, 72644, 50030, 54383, 59799,
      /* 14580 */ 54339, 61620, 60922, 73660, 47450, 46828, 73161, 59759, 73663, 59797, 47605, 60497, 50030, 47449, 46829,
      /* 14595 */ 60496, 73658, 47451, 47606, 53268, 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318, 37318, 37318,
      /* 14610 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14625 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14640 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14655 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14670 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14685 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14700 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14715 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14730 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14745 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14760 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14775 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14790 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14805 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14820 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 14835 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318,
      /* 14850 */ 37318, 37318, 37318, 44953, 37318, 37318, 37318, 37318, 37318, 67919, 57964, 37318, 37318, 45323, 45350,
      /* 14865 */ 63443, 47000, 65689, 37318, 37318, 41289, 37087, 37318, 37318, 50781, 37318, 37318, 37318, 37318, 37318,
      /* 14880 */ 44404, 72644, 50028, 41369, 65498, 47282, 62003, 72217, 37318, 37318, 37318, 68839, 37318, 37318, 53518,
      /* 14895 */ 37318, 37318, 37318, 37318, 37318, 73164, 72644, 72644, 72644, 72644, 45386, 41542, 41542, 41542, 52709,
      /* 14910 */ 65498, 65498, 65498, 65498, 57854, 41461, 41461, 41461, 41461, 64567, 41960, 37318, 37318, 37318, 37318,
      /* 14925 */ 37318, 44399, 37318, 37318, 37318, 37318, 73164, 72644, 72644, 72644, 72644, 72644, 41363, 41542, 41542,
      /* 14940 */ 41542, 41542, 41542, 65493, 65498, 65498, 65498, 65498, 65498, 46825, 41461, 41461, 41461, 41461, 41461,
      /* 14955 */ 63696, 45404, 37318, 37318, 37318, 37318, 37318, 44403, 37318, 37318, 37318, 72643, 72644, 72644, 72644,
      /* 14970 */ 72644, 72645, 38772, 41542, 41542, 41542, 41542, 41542, 45363, 65498, 65498, 65498, 65498, 65498, 59800,
      /* 14985 */ 41461, 41461, 41461, 41461, 41461, 47863, 51497, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 72642,
      /* 15000 */ 72644, 72644, 72644, 72644, 61913, 41542, 41542, 41542, 41542, 48876, 65497, 65498, 65498, 65498, 65498,
      /* 15015 */ 59803, 41461, 41461, 41461, 41461, 47863, 47501, 37318, 37318, 37318, 37318, 37318, 60498, 72644, 72644,
      /* 15030 */ 72644, 42291, 41542, 41542, 41542, 59595, 65498, 65498, 65498, 59798, 41461, 41461, 41461, 47288, 37318,
      /* 15045 */ 37318, 37318, 37318, 37318, 72644, 72644, 60920, 41542, 41542, 41542, 65498, 65498, 65498, 63673, 41461,
      /* 15060 */ 41461, 56936, 37318, 37318, 37318, 73163, 72644, 72644, 50031, 41542, 73662, 65498, 65498, 59802, 41461,
      /* 15075 */ 41462, 56939, 61615, 37318, 72643, 60923, 41542, 73664, 65498, 59801, 41461, 49498, 72946, 72644, 50030,
      /* 15090 */ 54383, 59799, 54339, 61620, 60922, 73660, 47450, 46828, 73161, 59759, 73663, 59797, 47605, 60497, 50030,
      /* 15105 */ 47449, 46829, 60496, 73658, 47451, 47606, 53268, 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318,
      /* 15120 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15135 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15150 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15165 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15180 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15195 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15210 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15225 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15240 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15255 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15270 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15285 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15300 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15315 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15330 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15345 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15360 */ 45302, 37318, 37318, 37318, 37318, 44953, 37318, 37318, 37318, 37318, 37318, 67919, 57964, 37318, 37318,
      /* 15375 */ 45323, 45350, 63443, 47000, 65689, 37318, 37318, 41289, 37087, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15390 */ 37318, 37318, 44404, 72644, 50028, 41369, 65498, 47282, 62003, 72217, 37318, 37318, 37318, 68839, 37318,
      /* 15405 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 73164, 72644, 72644, 72644, 72644, 45386, 41542, 41542,
      /* 15420 */ 41542, 52709, 65498, 65498, 65498, 65498, 57854, 41461, 41461, 41461, 41461, 60376, 37318, 37318, 37318,
      /* 15435 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 73164, 72644, 72644, 72644, 72644, 72644, 41363,
      /* 15450 */ 41542, 41542, 41542, 41542, 41542, 65493, 65498, 65498, 65498, 65498, 65498, 46825, 41461, 41461, 41461,
      /* 15465 */ 41461, 41461, 47041, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 72643, 72644,
      /* 15480 */ 72644, 72644, 72644, 72645, 38772, 41542, 41542, 41542, 41542, 41542, 45363, 65498, 65498, 65498, 65498,
      /* 15495 */ 65498, 59800, 41461, 41461, 41461, 41461, 41461, 47863, 54854, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15510 */ 37318, 72642, 72644, 72644, 72644, 72644, 38767, 41542, 41542, 41542, 41542, 41444, 65497, 65498, 65498,
      /* 15525 */ 65498, 65498, 59803, 41461, 41461, 41461, 41461, 47863, 54854, 37318, 37318, 37318, 37318, 37318, 60498,
      /* 15540 */ 72644, 72644, 72644, 58547, 41542, 41542, 41542, 46770, 65498, 65498, 65498, 59798, 41461, 41461, 41461,
      /* 15555 */ 47288, 37318, 37318, 37318, 37318, 37318, 72644, 72644, 60920, 41542, 41542, 41542, 65498, 65498, 65498,
      /* 15570 */ 63673, 41461, 41461, 56936, 37318, 37318, 37318, 73163, 72644, 72644, 50031, 41542, 73662, 65498, 65498,
      /* 15585 */ 59802, 41461, 41462, 56939, 61615, 37318, 72643, 60923, 41542, 73664, 65498, 59801, 41461, 49498, 72946,
      /* 15600 */ 72644, 50030, 54383, 59799, 54339, 61620, 60922, 73660, 47450, 46828, 73161, 59759, 73663, 59797, 47605,
      /* 15615 */ 60497, 50030, 47449, 46829, 60496, 73658, 47451, 47606, 53268, 62159, 62339, 66862, 41867, 41898, 41909,
      /* 15630 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15645 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15660 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15675 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15690 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15705 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15720 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15735 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15750 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15765 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15780 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15795 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15810 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15825 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15840 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15855 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15870 */ 37318, 37318, 45302, 37318, 37318, 37318, 37318, 44953, 37318, 37318, 37318, 37318, 37318, 67919, 57964,
      /* 15885 */ 37318, 37318, 45323, 45350, 63443, 47000, 65689, 37318, 37318, 41289, 37087, 37318, 37318, 37318, 37318,
      /* 15900 */ 37318, 37318, 37318, 37318, 44404, 72644, 50028, 41369, 65498, 47282, 62003, 65804, 37318, 37318, 37318,
      /* 15915 */ 68839, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 73164, 72644, 72644, 72644, 72644, 45386,
      /* 15930 */ 41542, 41542, 41542, 52709, 65498, 65498, 65498, 65498, 57854, 41461, 41461, 41461, 41461, 60376, 37318,
      /* 15945 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 73164, 72644, 72644, 72644, 72644,
      /* 15960 */ 72644, 41363, 41542, 41542, 41542, 41542, 41542, 65493, 65498, 65498, 65498, 65498, 65498, 46825, 41461,
      /* 15975 */ 41461, 41461, 41461, 41461, 47041, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 15990 */ 72643, 72644, 72644, 72644, 72644, 72645, 38772, 41542, 41542, 41542, 41542, 41542, 45363, 65498, 65498,
      /* 16005 */ 65498, 65498, 65498, 59800, 41461, 41461, 41461, 41461, 41461, 47863, 54854, 37318, 37318, 37318, 37318,
      /* 16020 */ 37318, 37318, 37318, 72642, 72644, 72644, 72644, 72644, 38767, 41542, 41542, 41542, 41542, 41444, 65497,
      /* 16035 */ 65498, 65498, 65498, 65498, 59803, 41461, 41461, 41461, 41461, 47863, 54854, 37318, 37318, 37318, 37318,
      /* 16050 */ 37318, 60498, 72644, 72644, 72644, 58547, 41542, 41542, 41542, 46770, 65498, 65498, 65498, 59798, 41461,
      /* 16065 */ 41461, 41461, 47288, 37318, 37318, 37318, 37318, 37318, 72644, 72644, 60920, 41542, 41542, 41542, 65498,
      /* 16080 */ 65498, 65498, 63673, 41461, 41461, 56936, 37318, 37318, 37318, 73163, 72644, 72644, 50031, 41542, 73662,
      /* 16095 */ 65498, 65498, 59802, 41461, 41462, 56939, 61615, 37318, 72643, 60923, 41542, 73664, 65498, 59801, 41461,
      /* 16110 */ 49498, 72946, 72644, 50030, 54383, 59799, 54339, 61620, 60922, 73660, 47450, 46828, 73161, 59759, 73663,
      /* 16125 */ 59797, 47605, 60497, 50030, 47449, 46829, 60496, 73658, 47451, 47606, 53268, 62159, 62339, 66862, 41867,
      /* 16140 */ 41898, 41909, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16155 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16170 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16185 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16200 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16215 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16230 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16245 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16260 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16275 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16290 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16305 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16320 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16335 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16350 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16365 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16380 */ 37318, 37318, 37318, 37318, 45302, 37318, 37318, 37318, 37318, 44953, 37318, 37318, 37318, 37318, 37318,
      /* 16395 */ 67919, 57964, 37318, 37318, 45323, 45350, 63443, 48653, 65689, 37318, 37318, 41289, 37087, 37318, 37318,
      /* 16410 */ 37318, 37318, 37318, 37318, 37318, 37318, 44404, 72644, 50028, 41369, 65498, 47282, 62003, 72217, 37318,
      /* 16425 */ 37318, 37318, 68839, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 73164, 72644, 72644, 72644,
      /* 16440 */ 72644, 45386, 41542, 41542, 41542, 52709, 65498, 65498, 65498, 65498, 57854, 41461, 41461, 41461, 41461,
      /* 16455 */ 60376, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 73164, 72644, 72644,
      /* 16470 */ 72644, 72644, 72644, 41363, 41542, 41542, 41542, 41542, 41542, 65493, 65498, 65498, 65498, 65498, 65498,
      /* 16485 */ 46825, 41461, 41461, 41461, 41461, 41461, 47041, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16500 */ 37318, 37318, 72643, 72644, 72644, 72644, 72644, 72645, 38772, 41542, 41542, 41542, 41542, 41542, 45363,
      /* 16515 */ 65498, 65498, 65498, 65498, 65498, 59800, 41461, 41461, 41461, 41461, 41461, 47863, 54854, 37318, 37318,
      /* 16530 */ 37318, 37318, 37318, 37318, 37318, 72642, 72644, 72644, 72644, 72644, 38767, 41542, 41542, 41542, 41542,
      /* 16545 */ 41444, 65497, 65498, 65498, 65498, 65498, 59803, 41461, 41461, 41461, 41461, 47863, 54854, 37318, 37318,
      /* 16560 */ 37318, 37318, 37318, 60498, 72644, 72644, 72644, 58547, 41542, 41542, 41542, 46770, 65498, 65498, 65498,
      /* 16575 */ 59798, 41461, 41461, 41461, 47288, 37318, 37318, 37318, 37318, 37318, 72644, 72644, 60920, 41542, 41542,
      /* 16590 */ 41542, 65498, 65498, 65498, 63673, 41461, 41461, 56936, 37318, 37318, 37318, 73163, 72644, 72644, 50031,
      /* 16605 */ 41542, 73662, 65498, 65498, 59802, 41461, 41462, 56939, 61615, 37318, 72643, 60923, 41542, 73664, 65498,
      /* 16620 */ 59801, 41461, 49498, 72946, 72644, 50030, 54383, 59799, 54339, 61620, 60922, 73660, 47450, 46828, 73161,
      /* 16635 */ 59759, 73663, 59797, 47605, 60497, 50030, 47449, 46829, 60496, 73658, 47451, 47606, 53268, 62159, 62339,
      /* 16650 */ 66862, 41867, 41898, 41909, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16665 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16680 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16695 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16710 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16725 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16740 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16755 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16770 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16785 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16800 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16815 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16830 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16845 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16860 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16875 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 16890 */ 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318, 37318, 37318, 37318, 44953, 37318, 37318, 37318,
      /* 16905 */ 37318, 37318, 67919, 60153, 37318, 37318, 45323, 45350, 63443, 47000, 65689, 37318, 37318, 41289, 37087,
      /* 16920 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 44404, 72644, 50028, 41369, 65498, 47282, 62003,
      /* 16935 */ 72217, 37318, 37318, 37318, 68839, 37318, 37318, 37318, 37318, 45477, 37318, 37318, 37318, 73164, 72644,
      /* 16950 */ 72644, 72644, 72644, 45386, 41542, 41542, 41542, 52709, 65498, 65498, 65498, 65498, 57854, 41461, 41461,
      /* 16965 */ 41461, 41461, 60376, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 73164,
      /* 16980 */ 72644, 72644, 72644, 72644, 72644, 41363, 41542, 41542, 41542, 41542, 41542, 65493, 65498, 65498, 65498,
      /* 16995 */ 65498, 65498, 46825, 41461, 41461, 41461, 41461, 41461, 47041, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17010 */ 37318, 37318, 37318, 37318, 72643, 72644, 72644, 72644, 72644, 72645, 38772, 41542, 41542, 41542, 41542,
      /* 17025 */ 41542, 45363, 65498, 65498, 65498, 65498, 65498, 59800, 41461, 41461, 41461, 41461, 41461, 47863, 54854,
      /* 17040 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 72642, 72644, 72644, 72644, 72644, 38767, 41542, 41542,
      /* 17055 */ 41542, 41542, 41444, 65497, 65498, 65498, 65498, 65498, 59803, 41461, 41461, 41461, 41461, 47863, 54854,
      /* 17070 */ 37318, 37318, 37318, 37318, 37318, 60498, 72644, 72644, 72644, 58547, 41542, 41542, 41542, 46770, 65498,
      /* 17085 */ 65498, 65498, 59798, 41461, 41461, 41461, 47288, 37318, 37318, 37318, 37318, 37318, 72644, 72644, 60920,
      /* 17100 */ 41542, 41542, 41542, 65498, 65498, 65498, 63673, 41461, 41461, 56936, 37318, 37318, 37318, 73163, 72644,
      /* 17115 */ 72644, 50031, 41542, 73662, 65498, 65498, 59802, 41461, 41462, 56939, 61615, 37318, 72643, 60923, 41542,
      /* 17130 */ 73664, 65498, 59801, 41461, 49498, 72946, 72644, 50030, 54383, 59799, 54339, 61620, 60922, 73660, 47450,
      /* 17145 */ 46828, 73161, 59759, 73663, 59797, 47605, 60497, 50030, 47449, 46829, 60496, 73658, 47451, 47606, 53268,
      /* 17160 */ 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17175 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17190 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17205 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17220 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17235 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17250 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17265 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17280 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17295 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17310 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17325 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17340 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17355 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17370 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17385 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17400 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318, 37318, 37318, 37318, 44953, 37318,
      /* 17415 */ 37318, 37318, 37318, 37318, 67919, 57964, 37318, 37318, 45496, 45525, 45509, 45539, 65689, 37318, 37318,
      /* 17430 */ 41289, 37087, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 44404, 72644, 50028, 41369, 65498,
      /* 17445 */ 47282, 62003, 72217, 37318, 37318, 37318, 68839, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17460 */ 73164, 72644, 72644, 72644, 72644, 45386, 41542, 41542, 41542, 52709, 65498, 65498, 65498, 65498, 57854,
      /* 17475 */ 41461, 41461, 41461, 41461, 60376, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17490 */ 37318, 73164, 72644, 72644, 72644, 72644, 72644, 41363, 41542, 41542, 41542, 41542, 41542, 65493, 65498,
      /* 17505 */ 65498, 65498, 65498, 65498, 46825, 41461, 41461, 41461, 41461, 41461, 47041, 37318, 37318, 37318, 37318,
      /* 17520 */ 37318, 37318, 37318, 37318, 37318, 37318, 72643, 72644, 72644, 72644, 72644, 72645, 38772, 41542, 41542,
      /* 17535 */ 41542, 41542, 41542, 45363, 65498, 65498, 65498, 65498, 65498, 59800, 41461, 41461, 41461, 41461, 41461,
      /* 17550 */ 47863, 54854, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 72642, 72644, 72644, 72644, 72644, 38767,
      /* 17565 */ 41542, 41542, 41542, 41542, 41444, 65497, 65498, 65498, 65498, 65498, 59803, 41461, 41461, 41461, 41461,
      /* 17580 */ 47863, 54854, 37318, 37318, 37318, 37318, 37318, 60498, 72644, 72644, 72644, 58547, 41542, 41542, 41542,
      /* 17595 */ 46770, 65498, 65498, 65498, 59798, 41461, 41461, 41461, 47288, 37318, 37318, 37318, 37318, 37318, 72644,
      /* 17610 */ 72644, 60920, 41542, 41542, 41542, 65498, 65498, 65498, 63673, 41461, 41461, 56936, 37318, 37318, 37318,
      /* 17625 */ 73163, 72644, 72644, 50031, 41542, 73662, 65498, 65498, 59802, 41461, 41462, 56939, 61615, 37318, 72643,
      /* 17640 */ 60923, 41542, 73664, 65498, 59801, 41461, 49498, 72946, 72644, 50030, 54383, 59799, 54339, 61620, 60922,
      /* 17655 */ 73660, 47450, 46828, 73161, 59759, 73663, 59797, 47605, 60497, 50030, 47449, 46829, 60496, 73658, 47451,
      /* 17670 */ 47606, 53268, 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17685 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17700 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17715 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17730 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17745 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17760 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17775 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17790 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17805 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17820 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17835 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17850 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17865 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17880 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17895 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17910 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318, 37318, 37318, 37318,
      /* 17925 */ 44953, 37318, 37318, 37318, 37318, 37318, 67919, 57964, 37318, 37318, 45323, 45350, 63443, 47000, 65689,
      /* 17940 */ 37318, 37318, 41289, 37087, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 44404, 72644, 50028,
      /* 17955 */ 41369, 65498, 47282, 62003, 72217, 37318, 37318, 37318, 68839, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 17970 */ 37318, 37318, 73164, 72644, 72644, 72644, 72644, 45386, 41542, 41542, 41542, 52709, 65498, 65498, 65498,
      /* 17985 */ 65498, 57854, 41461, 41461, 41461, 41461, 60376, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18000 */ 37318, 37318, 37318, 73164, 72644, 72644, 72644, 72644, 72644, 41363, 41542, 41542, 41542, 41542, 41542,
      /* 18015 */ 65493, 65498, 65498, 65498, 65498, 65498, 46825, 41461, 41461, 41461, 41461, 41461, 47041, 37318, 37318,
      /* 18030 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 72643, 72644, 72644, 72644, 72644, 72645, 38772,
      /* 18045 */ 41542, 41542, 41542, 41542, 41542, 45363, 65498, 65498, 65498, 65498, 65498, 59800, 41461, 41461, 41461,
      /* 18060 */ 41461, 41461, 47863, 54854, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 72642, 72644, 72644, 72644,
      /* 18075 */ 72644, 38767, 41542, 41542, 41542, 41542, 41444, 65497, 65498, 65498, 65498, 65498, 59803, 41461, 41461,
      /* 18090 */ 41461, 41461, 47863, 54854, 37318, 37318, 64785, 37318, 37318, 60498, 72644, 72644, 72644, 58547, 41542,
      /* 18105 */ 41542, 41542, 46770, 65498, 65498, 65498, 59798, 41461, 41461, 41461, 47288, 37318, 37318, 37318, 37318,
      /* 18120 */ 37318, 72644, 72644, 60920, 41542, 41542, 41542, 65498, 65498, 65498, 63673, 41461, 41461, 56936, 37318,
      /* 18135 */ 37318, 37318, 73163, 72644, 72644, 50031, 41542, 73662, 65498, 65498, 59802, 41461, 41462, 56939, 61615,
      /* 18150 */ 37318, 72643, 60923, 41542, 73664, 65498, 59801, 41461, 49498, 72946, 72644, 50030, 54383, 59799, 54339,
      /* 18165 */ 61620, 60922, 73660, 47450, 46828, 73161, 59759, 73663, 59797, 47605, 60497, 50030, 47449, 46829, 60496,
      /* 18180 */ 73658, 47451, 47606, 53268, 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318, 37318, 37318, 37318,
      /* 18195 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18210 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18225 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18240 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18255 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18270 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18285 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18300 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18315 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18330 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18345 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18360 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18375 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18390 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18405 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18420 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45555, 37318, 37318,
      /* 18435 */ 37318, 37318, 44953, 37318, 37318, 37318, 37318, 37318, 67919, 57964, 37318, 37318, 45323, 45350, 63443,
      /* 18450 */ 47000, 65689, 37318, 37318, 41289, 37087, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 44404,
      /* 18465 */ 72644, 50028, 41369, 65498, 47282, 62003, 72217, 37318, 37318, 37318, 68839, 37318, 37318, 37318, 37318,
      /* 18480 */ 37318, 37318, 37318, 37318, 73164, 72644, 72644, 72644, 72644, 45386, 41542, 41542, 41542, 52709, 65498,
      /* 18495 */ 65498, 65498, 65498, 57854, 41461, 41461, 41461, 41461, 60376, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18510 */ 37318, 37318, 37318, 37318, 37318, 73164, 72644, 72644, 72644, 72644, 72644, 41363, 41542, 41542, 41542,
      /* 18525 */ 41542, 41542, 65493, 65498, 65498, 65498, 65498, 65498, 46825, 41461, 41461, 41461, 41461, 41461, 47041,
      /* 18540 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 72643, 72644, 72644, 72644, 72644,
      /* 18555 */ 72645, 38772, 41542, 41542, 41542, 41542, 41542, 45363, 65498, 65498, 65498, 65498, 65498, 59800, 41461,
      /* 18570 */ 41461, 41461, 41461, 41461, 47863, 54854, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 72642, 72644,
      /* 18585 */ 72644, 72644, 72644, 38767, 41542, 41542, 41542, 41542, 41444, 65497, 65498, 65498, 65498, 65498, 59803,
      /* 18600 */ 41461, 41461, 41461, 41461, 47863, 54854, 37318, 37318, 37318, 37318, 37318, 60498, 72644, 72644, 72644,
      /* 18615 */ 58547, 41542, 41542, 41542, 46770, 65498, 65498, 65498, 59798, 41461, 41461, 41461, 47288, 37318, 37318,
      /* 18630 */ 37318, 37318, 37318, 72644, 72644, 60920, 41542, 41542, 41542, 65498, 65498, 65498, 63673, 41461, 41461,
      /* 18645 */ 56936, 37318, 37318, 37318, 73163, 72644, 72644, 50031, 41542, 73662, 65498, 65498, 59802, 41461, 41462,
      /* 18660 */ 56939, 61615, 37318, 72643, 60923, 41542, 73664, 65498, 59801, 41461, 49498, 72946, 72644, 50030, 54383,
      /* 18675 */ 59799, 54339, 61620, 60922, 73660, 47450, 46828, 73161, 59759, 73663, 59797, 47605, 60497, 50030, 47449,
      /* 18690 */ 46829, 60496, 73658, 47451, 47606, 53268, 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318, 37318,
      /* 18705 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18720 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18735 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18750 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18765 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18780 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18795 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18810 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18825 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18840 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18855 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18870 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18885 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18900 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18915 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 18930 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 39708,
      /* 18945 */ 38529, 37318, 37318, 37318, 48276, 37318, 37318, 37318, 37318, 37318, 67919, 57964, 45576, 74434, 37318,
      /* 18960 */ 74579, 74583, 74448, 36991, 37318, 37318, 41289, 37087, 37318, 37318, 37010, 37318, 37318, 37318, 37318,
      /* 18975 */ 37318, 65657, 40192, 38525, 37318, 37318, 39335, 40192, 38527, 37031, 44584, 37054, 37076, 37318, 37318,
      /* 18990 */ 74250, 68588, 69924, 37107, 37136, 37152, 65815, 69390, 37247, 37265, 53482, 37182, 37116, 37202, 37162,
      /* 19005 */ 37222, 37186, 37120, 37206, 37166, 74726, 69388, 37245, 37263, 53480, 37281, 37318, 41092, 37317, 37318,
      /* 19020 */ 37318, 45006, 57380, 37335, 37318, 74671, 64449, 74683, 40193, 37351, 37378, 40192, 39199, 37741, 69458,
      /* 19035 */ 41098, 41041, 37318, 46044, 37882, 69459, 41099, 41042, 37318, 46045, 37371, 74376, 37355, 37382, 40192,
      /* 19050 */ 39202, 38523, 74469, 50180, 37398, 37414, 37436, 50351, 37475, 37318, 58014, 37496, 39340, 37628, 37651,
      /* 19065 */ 37674, 55492, 37717, 38230, 37546, 37566, 58028, 41986, 37605, 37523, 37542, 37562, 58024, 37582, 37601,
      /* 19080 */ 39304, 37621, 37644, 37667, 37690, 37709, 37733, 74273, 57770, 38317, 37757, 37779, 37822, 46961, 37943,
      /* 19095 */ 37979, 37995, 38150, 38170, 38011, 38093, 38038, 38061, 37792, 39434, 38084, 38100, 38045, 38068, 37799,
      /* 19110 */ 39441, 38116, 37992, 38147, 38166, 38186, 38022, 38246, 38263, 37318, 38304, 37318, 38354, 38370, 45231,
      /* 19125 */ 38397, 38413, 37861, 37459, 38432, 38451, 68861, 37456, 38429, 38448, 38467, 45226, 38483, 38407, 38516,
      /* 19140 */ 57783, 51848, 38545, 38580, 73050, 38677, 38610, 38626, 49222, 38643, 38660, 49221, 38642, 38659, 38676,
      /* 19155 */ 38693, 38624, 38714, 38739, 45596, 38841, 38876, 38942, 38892, 60443, 38908, 60433, 60449, 38914, 38930,
      /* 19170 */ 38946, 38962, 38978, 39013, 39048, 39078, 39105, 39169, 39156, 39172, 39188, 39089, 39218, 39249, 55484,
      /* 19185 */ 39265, 39291, 55476, 39311, 39327, 37693, 37318, 65659, 38698, 39356, 39410, 37835, 37848, 39457, 45051,
      /* 19200 */ 38498, 38500, 45058, 39494, 39520, 39559, 39504, 39575, 59063, 39606, 39616, 39632, 39681, 39692, 37318,
      /* 19215 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19230 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19245 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19260 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19275 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19290 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19305 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19320 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19335 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19350 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19365 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19380 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19395 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19410 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19425 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19440 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19455 */ 37318, 39708, 37318, 37318, 37318, 37318, 48276, 37318, 37318, 37318, 37318, 37318, 67919, 57964, 37318,
      /* 19470 */ 37318, 37318, 37318, 37318, 45625, 45661, 37318, 37318, 41289, 37087, 37318, 37318, 37010, 37318, 37318,
      /* 19485 */ 37318, 37318, 37318, 65657, 40192, 38525, 37318, 37318, 39335, 40192, 45833, 37031, 44584, 37054, 37076,
      /* 19500 */ 37318, 37318, 74250, 37318, 69924, 37107, 37136, 37152, 65815, 69390, 37247, 37265, 53482, 37182, 37116,
      /* 19515 */ 37202, 37162, 37222, 37186, 37120, 37206, 37166, 74726, 69388, 37245, 37263, 53480, 37281, 37318, 41092,
      /* 19530 */ 37317, 37318, 37318, 45006, 57380, 37335, 37318, 74671, 64449, 74683, 40193, 37351, 37378, 40192, 39199,
      /* 19545 */ 37741, 69458, 41098, 41041, 37318, 46044, 37882, 69459, 41099, 41042, 37318, 46045, 37371, 74376, 37355,
      /* 19560 */ 37382, 40192, 39202, 38523, 74469, 50180, 37398, 37414, 37436, 50351, 37475, 37318, 58014, 37496, 39340,
      /* 19575 */ 37628, 37651, 37674, 55492, 37717, 38230, 37546, 37566, 58028, 41986, 37605, 37523, 37542, 37562, 58024,
      /* 19590 */ 37582, 37601, 39304, 37621, 37644, 37667, 37690, 37709, 37733, 74273, 57770, 38317, 37757, 37779, 37822,
      /* 19605 */ 46961, 37943, 37979, 37995, 38150, 38170, 38011, 38093, 38038, 38061, 37792, 39434, 38084, 38100, 38045,
      /* 19620 */ 38068, 37799, 39441, 38116, 37992, 38147, 38166, 38186, 38022, 38246, 38263, 37318, 38304, 37318, 38354,
      /* 19635 */ 38370, 45231, 38397, 38413, 37861, 37459, 38432, 38451, 68861, 37456, 38429, 38448, 38467, 45226, 38483,
      /* 19650 */ 38407, 38516, 57783, 51848, 38545, 38580, 73050, 38677, 38610, 38626, 49222, 38643, 38660, 49221, 38642,
      /* 19665 */ 38659, 38676, 38693, 38624, 38714, 38739, 38791, 38841, 38876, 38942, 38892, 60443, 38908, 60433, 60449,
      /* 19680 */ 38914, 38930, 38946, 38962, 38978, 39013, 39048, 39078, 39105, 39169, 39156, 39172, 39188, 39089, 39218,
      /* 19695 */ 39249, 55484, 39265, 39291, 55476, 39311, 39327, 37693, 37318, 65659, 38698, 39356, 39410, 37835, 37848,
      /* 19710 */ 39457, 45051, 38498, 38500, 45058, 39494, 39520, 39559, 39504, 39575, 59063, 39606, 39616, 39632, 39681,
      /* 19725 */ 39692, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19740 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19755 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19770 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19785 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19800 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19815 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19830 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19845 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19860 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19875 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19890 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19905 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19920 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19935 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19950 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 19965 */ 37318, 37318, 37318, 39708, 37318, 45715, 37318, 37318, 48276, 37318, 37318, 37318, 37318, 37318, 67919,
      /* 19980 */ 57964, 45680, 45684, 37318, 37318, 45700, 45732, 36991, 37318, 37318, 41289, 37087, 37318, 37318, 37010,
      /* 19995 */ 37318, 37318, 37318, 37318, 37318, 65657, 40192, 38525, 37318, 37318, 39335, 40192, 38527, 37031, 44584,
      /* 20010 */ 37054, 37076, 37318, 37318, 74250, 37318, 69924, 37107, 37136, 37152, 65815, 69390, 37247, 37265, 53482,
      /* 20025 */ 37182, 37116, 37202, 37162, 37222, 37186, 37120, 37206, 37166, 74726, 69388, 37245, 37263, 53480, 37281,
      /* 20040 */ 37318, 41092, 37317, 37318, 37318, 45006, 57380, 37335, 37318, 74671, 64449, 74683, 40193, 37351, 37378,
      /* 20055 */ 40192, 39199, 37741, 69458, 41098, 41041, 37318, 46044, 37882, 69459, 41099, 41042, 37318, 46045, 37371,
      /* 20070 */ 74376, 37355, 37382, 40192, 39202, 38523, 74469, 50180, 37398, 37414, 37436, 50351, 37475, 37318, 58014,
      /* 20085 */ 37496, 39340, 37628, 37651, 37674, 55492, 37717, 38230, 37546, 37566, 58028, 41986, 37605, 37523, 37542,
      /* 20100 */ 37562, 58024, 37582, 37601, 39304, 37621, 37644, 37667, 37690, 37709, 37733, 74273, 57770, 38317, 37757,
      /* 20115 */ 37779, 37822, 46961, 37943, 37979, 37995, 38150, 38170, 38011, 38093, 38038, 38061, 37792, 39434, 38084,
      /* 20130 */ 38100, 38045, 38068, 37799, 39441, 38116, 37992, 38147, 38166, 38186, 38022, 38246, 38263, 37318, 38304,
      /* 20145 */ 37318, 38354, 38370, 45231, 38397, 38413, 37861, 37459, 38432, 38451, 68861, 37456, 38429, 38448, 38467,
      /* 20160 */ 45226, 38483, 38407, 38516, 57783, 51848, 38545, 38580, 73050, 38677, 38610, 38626, 49222, 38643, 38660,
      /* 20175 */ 49221, 38642, 38659, 38676, 38693, 38624, 38714, 38739, 38791, 38841, 38876, 38942, 38892, 60443, 38908,
      /* 20190 */ 60433, 60449, 38914, 38930, 38946, 38962, 38978, 45768, 39048, 39078, 39105, 39169, 39156, 39172, 39188,
      /* 20205 */ 39089, 39218, 45803, 55484, 39265, 39291, 55476, 39311, 45819, 37693, 37318, 65659, 38698, 39356, 39410,
      /* 20220 */ 37835, 37848, 39457, 45051, 38498, 38500, 45058, 39494, 39520, 39559, 39504, 39575, 59063, 39606, 39616,
      /* 20235 */ 39632, 39681, 39692, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20250 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20265 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20280 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20295 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20310 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20325 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20340 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20355 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20370 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20385 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20400 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20415 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20430 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20445 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20460 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20475 */ 37318, 37318, 37318, 37318, 37318, 39708, 37318, 37318, 37318, 37318, 48276, 37318, 37318, 37318, 37318,
      /* 20490 */ 37318, 67919, 57964, 37318, 37318, 37318, 37318, 37318, 45266, 36991, 37318, 37318, 41289, 37087, 37318,
      /* 20505 */ 37318, 37010, 37318, 37318, 37318, 37318, 37318, 65657, 40192, 38525, 37318, 37318, 39335, 40192, 38527,
      /* 20520 */ 37031, 44584, 37054, 37076, 37318, 37318, 74250, 37318, 69924, 37107, 37136, 37152, 65815, 69390, 37247,
      /* 20535 */ 37265, 53482, 37182, 37116, 37202, 37162, 37222, 37186, 37120, 37206, 37166, 74726, 69388, 37245, 37263,
      /* 20550 */ 53480, 37281, 37318, 41092, 37317, 37318, 37318, 45006, 57380, 37335, 37318, 74671, 64449, 74683, 40193,
      /* 20565 */ 37351, 37378, 40192, 39199, 37741, 69458, 41098, 41041, 37318, 46044, 37882, 69459, 41099, 41042, 37318,
      /* 20580 */ 46045, 37371, 74376, 37355, 37382, 40192, 39202, 38523, 74469, 50180, 37398, 37414, 37436, 50351, 37475,
      /* 20595 */ 37318, 58014, 37496, 39340, 37628, 37651, 37674, 55492, 37717, 38230, 37546, 37566, 58028, 41986, 37605,
      /* 20610 */ 37523, 37542, 37562, 58024, 37582, 37601, 39304, 37621, 37644, 37667, 37690, 37709, 37733, 74273, 57770,
      /* 20625 */ 38317, 37757, 37779, 37822, 46961, 37943, 37979, 37995, 38150, 38170, 38011, 38093, 38038, 38061, 37792,
      /* 20640 */ 39434, 38084, 38100, 38045, 38068, 37799, 39441, 38116, 37992, 38147, 38166, 38186, 38022, 38246, 38263,
      /* 20655 */ 37318, 38304, 37318, 38354, 38370, 45231, 38397, 38413, 37861, 37459, 38432, 38451, 68861, 37456, 38429,
      /* 20670 */ 38448, 38467, 45226, 38483, 38407, 38516, 57783, 51848, 38545, 38580, 73050, 38677, 38610, 38626, 49222,
      /* 20685 */ 38643, 38660, 49221, 38642, 38659, 38676, 38693, 38624, 38714, 38739, 38791, 38841, 38876, 38942, 38892,
      /* 20700 */ 60443, 38908, 60433, 60449, 38914, 38930, 38946, 38962, 38978, 39013, 39048, 39078, 39105, 39169, 39156,
      /* 20715 */ 39172, 39188, 39089, 39218, 39249, 55484, 39265, 39291, 55476, 39311, 39327, 37693, 37318, 65659, 38698,
      /* 20730 */ 39356, 39410, 37835, 37848, 39457, 45051, 38498, 38500, 45058, 39494, 39520, 39559, 39504, 39575, 59063,
      /* 20745 */ 39606, 39616, 39632, 39681, 39692, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20760 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20775 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20790 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20805 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20820 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20835 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20850 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20865 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20880 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20895 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20910 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20925 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20940 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20955 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20970 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 20985 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318, 45863, 37318, 37318, 44953, 53155, 45882,
      /* 21000 */ 37318, 52352, 45886, 39423, 67164, 45902, 45916, 45932, 45961, 45945, 45975, 45991, 37318, 45455, 41670,
      /* 21015 */ 46020, 50786, 46004, 46033, 45185, 46061, 46096, 44613, 41965, 46121, 46173, 46189, 46205, 46221, 46237,
      /* 21030 */ 46288, 65632, 46304, 37318, 37318, 68839, 40298, 50758, 37318, 41033, 53889, 69149, 37318, 46321, 73164,
      /* 21045 */ 72644, 72644, 72644, 46341, 45386, 41542, 41542, 59697, 52709, 65498, 65498, 65498, 64013, 57854, 41461,
      /* 21060 */ 41461, 41461, 53427, 64567, 41960, 63943, 65692, 37318, 55390, 46361, 44399, 46380, 37318, 58658, 46936,
      /* 21075 */ 46397, 46417, 72644, 72644, 59240, 58293, 46453, 46492, 41542, 41542, 52156, 55833, 61582, 46520, 65498,
      /* 21090 */ 65498, 64241, 46547, 52866, 68024, 41461, 41461, 68015, 46594, 47566, 46621, 37318, 37318, 46672, 37318,
      /* 21105 */ 46264, 44403, 37318, 40057, 46707, 46725, 63333, 41308, 72644, 46741, 63340, 42275, 46760, 41542, 46793,
      /* 21120 */ 66052, 61720, 45363, 46811, 65498, 49417, 68460, 65498, 46845, 46864, 41461, 51002, 52264, 41461, 46904,
      /* 21135 */ 52111, 46933, 46952, 37318, 46684, 52530, 67711, 37318, 59166, 64847, 72644, 54549, 51902, 61913, 46986,
      /* 21150 */ 41542, 41542, 73854, 71759, 72272, 41570, 65498, 54158, 68314, 46848, 58449, 41461, 41461, 47016, 47035,
      /* 21165 */ 51372, 47057, 47076, 37318, 47124, 37318, 47140, 47156, 71524, 72644, 42291, 47208, 67563, 41542, 59595,
      /* 21180 */ 47244, 47267, 65498, 59798, 47304, 47328, 41461, 53433, 37318, 47344, 37318, 61381, 37318, 72644, 47362,
      /* 21195 */ 47380, 41542, 47407, 47424, 65498, 47447, 64139, 63673, 47467, 64041, 56936, 37318, 37318, 37318, 73163,
      /* 21210 */ 72644, 72644, 50031, 41542, 73662, 65498, 65498, 59802, 41461, 41462, 56939, 61615, 37318, 72643, 60923,
      /* 21225 */ 41542, 73664, 65498, 59801, 41461, 49498, 72946, 72644, 50030, 54383, 59799, 41347, 39062, 47486, 47520,
      /* 21240 */ 47551, 47602, 47622, 61702, 70577, 48688, 47605, 47638, 50030, 47449, 46829, 57656, 73658, 47451, 47606,
      /* 21255 */ 53268, 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21270 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21285 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21300 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21315 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21330 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21345 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21360 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21375 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21390 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21405 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21420 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21435 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21450 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21465 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21480 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21495 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318, 47659, 37318, 37318, 44953,
      /* 21510 */ 37318, 37318, 37318, 37318, 37318, 67919, 47681, 47697, 47709, 47725, 47754, 47738, 47770, 65689, 37318,
      /* 21525 */ 37318, 41289, 37087, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 44404, 67827, 50028, 47806,
      /* 21540 */ 47251, 47282, 47858, 50482, 37318, 37318, 37318, 68839, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21555 */ 37318, 73164, 72644, 72644, 72644, 72644, 45386, 41542, 41542, 41542, 52709, 65498, 65498, 65498, 65498,
      /* 21570 */ 57854, 41461, 41461, 41461, 41461, 64567, 41960, 37318, 37318, 37318, 37318, 73633, 44399, 56082, 37318,
      /* 21585 */ 56083, 37318, 73164, 72644, 72644, 72644, 72644, 47879, 41363, 41542, 41542, 41542, 41542, 47922, 65493,
      /* 21600 */ 65498, 65498, 65498, 65498, 47955, 46825, 41461, 41461, 41461, 67629, 66428, 63696, 45404, 37318, 37318,
      /* 21615 */ 37318, 37318, 37318, 44403, 37318, 37318, 37318, 72643, 72644, 72644, 72644, 72644, 72645, 38772, 41542,
      /* 21630 */ 41542, 41542, 41542, 41542, 45363, 65498, 65498, 65498, 65498, 65498, 59800, 41461, 41461, 41461, 41461,
      /* 21645 */ 41461, 47863, 51497, 37318, 58926, 37318, 37318, 64306, 57609, 37318, 65431, 72644, 72644, 72644, 56125,
      /* 21660 */ 63073, 47979, 41542, 41542, 41542, 70807, 58352, 65498, 65498, 65498, 65498, 47999, 41461, 41461, 41461,
      /* 21675 */ 41461, 48015, 47501, 37318, 37318, 37318, 37318, 37318, 60498, 72644, 72644, 72644, 42291, 41542, 41542,
      /* 21690 */ 41542, 59595, 65498, 65498, 65498, 59798, 41461, 41461, 41461, 47288, 37318, 37318, 37318, 37318, 37318,
      /* 21705 */ 72644, 72644, 60920, 41542, 41542, 41542, 65498, 65498, 65498, 63673, 41461, 41461, 56936, 37318, 37318,
      /* 21720 */ 37318, 73163, 72644, 72644, 50031, 41542, 73662, 65498, 65498, 59802, 41461, 41462, 56939, 61615, 37318,
      /* 21735 */ 72643, 60923, 41542, 73664, 65498, 59801, 41461, 49498, 72946, 72644, 50030, 54383, 59799, 54339, 61620,
      /* 21750 */ 60922, 73660, 47450, 46828, 65375, 48037, 48062, 48088, 48113, 60497, 50030, 47449, 46829, 60496, 73658,
      /* 21765 */ 47451, 47606, 53268, 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21780 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21795 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21810 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21825 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21840 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21855 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21870 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21885 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21900 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21915 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21930 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21945 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21960 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21975 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 21990 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22005 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318, 49548, 37318,
      /* 22020 */ 37318, 44953, 37318, 41780, 37318, 41482, 37318, 54642, 48139, 48155, 48170, 48186, 48215, 48199, 48231,
      /* 22035 */ 65689, 37318, 37318, 48273, 48292, 37318, 48311, 37318, 51503, 37318, 37318, 37318, 48331, 46709, 48623,
      /* 22050 */ 50028, 58342, 50938, 47282, 52495, 55465, 37318, 48349, 37318, 68839, 48369, 47665, 37318, 51866, 48388,
      /* 22065 */ 48408, 48427, 73007, 67026, 70205, 72644, 72644, 72644, 48444, 48468, 41542, 41542, 52709, 48501, 48532,
      /* 22080 */ 65498, 65498, 51441, 56912, 41461, 41461, 41461, 64567, 71585, 37318, 37318, 65402, 37318, 56580, 44399,
      /* 22095 */ 46364, 37873, 48553, 37318, 73164, 48570, 72644, 48622, 56986, 72644, 41363, 48639, 50032, 41542, 55261,
      /* 22110 */ 41542, 65493, 48669, 57135, 65498, 73731, 65498, 46825, 48704, 41598, 41461, 48739, 41461, 63696, 45404,
      /* 22125 */ 37318, 37318, 39025, 37318, 62106, 44403, 37318, 37318, 37318, 72643, 72644, 72644, 60958, 57260, 72645,
      /* 22140 */ 38772, 41542, 41542, 54046, 68350, 48760, 45363, 65498, 65498, 65498, 48780, 52828, 59800, 41461, 41461,
      /* 22155 */ 41461, 48796, 66903, 47863, 51534, 37318, 37318, 37318, 64199, 37318, 64441, 37318, 72642, 72644, 72644,
      /* 22170 */ 64854, 72644, 61913, 41542, 41542, 41542, 48812, 48876, 65497, 65498, 65498, 71839, 65498, 59803, 41461,
      /* 22185 */ 41461, 47470, 41461, 47863, 47501, 37318, 65142, 37318, 37318, 38723, 48831, 72644, 48851, 72644, 42291,
      /* 22200 */ 41542, 48871, 41542, 59595, 65498, 70398, 65498, 59798, 41461, 61249, 41461, 42174, 72114, 37318, 37318,
      /* 22215 */ 53513, 66795, 54283, 70249, 60920, 63484, 67969, 41542, 58586, 58373, 65498, 49897, 57220, 41461, 56936,
      /* 22230 */ 37318, 37318, 67331, 73163, 72644, 72800, 50031, 41542, 52475, 65498, 65498, 48892, 41461, 58211, 56939,
      /* 22245 */ 61615, 37318, 72643, 60923, 41542, 73664, 65498, 59801, 41461, 49498, 72946, 72644, 50030, 54383, 59799,
      /* 22260 */ 54339, 61620, 60922, 73660, 47450, 47019, 45307, 48912, 48959, 48989, 49019, 60497, 50030, 47449, 46829,
      /* 22275 */ 60496, 73658, 47451, 47606, 53268, 62159, 62339, 70340, 49053, 41898, 41909, 37318, 37318, 37318, 37318,
      /* 22290 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22305 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22320 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22335 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22350 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22365 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22380 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22395 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22410 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22425 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22440 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22455 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22470 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22485 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22500 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22515 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318,
      /* 22530 */ 37318, 49089, 37318, 44953, 37318, 48599, 37585, 39665, 37318, 67919, 49107, 49123, 49137, 49153, 49182,
      /* 22545 */ 49166, 49196, 65689, 37318, 37318, 41289, 37087, 37318, 37318, 37318, 37318, 37318, 48353, 37318, 48351,
      /* 22560 */ 60095, 51266, 41622, 41369, 62908, 47535, 62003, 72217, 37318, 62994, 49212, 68839, 37318, 49238, 37318,
      /* 22575 */ 49258, 37318, 51050, 39778, 49276, 57933, 60709, 68980, 49292, 71214, 49326, 70571, 70834, 49347, 57459,
      /* 22590 */ 49369, 49386, 49404, 49439, 49457, 61552, 61800, 49485, 58425, 64567, 41960, 37318, 37318, 68084, 37318,
      /* 22605 */ 56022, 44399, 37318, 37318, 37318, 70710, 73164, 72644, 72644, 72644, 72644, 49520, 41363, 41542, 41542,
      /* 22620 */ 41542, 52429, 41542, 65493, 65498, 65498, 65498, 59621, 65498, 46825, 41461, 41461, 41461, 65942, 41461,
      /* 22635 */ 71902, 49537, 37318, 37318, 48372, 63307, 37318, 44403, 37318, 37318, 38213, 70690, 72446, 72644, 72644,
      /* 22650 */ 72644, 64634, 56631, 49564, 49582, 41542, 41542, 56653, 45363, 49600, 48682, 65498, 65498, 64927, 49622,
      /* 22665 */ 49640, 70938, 41461, 41461, 62085, 49662, 51497, 37318, 37318, 37318, 37318, 37318, 49684, 37318, 68617,
      /* 22680 */ 72644, 72644, 69970, 72644, 65479, 41542, 41542, 41326, 41542, 48876, 49710, 65498, 65498, 47842, 65498,
      /* 22695 */ 59286, 41461, 41461, 58267, 41461, 47863, 47501, 37918, 62752, 37318, 37318, 49733, 60498, 55203, 65029,
      /* 22710 */ 49752, 42291, 67741, 65203, 74026, 59595, 66024, 65498, 49773, 59798, 49646, 41461, 49825, 47288, 37318,
      /* 22725 */ 51997, 37318, 37318, 37318, 72644, 72644, 60920, 41542, 41542, 41542, 65498, 65498, 65498, 63673, 41461,
      /* 22740 */ 41461, 56936, 37318, 49852, 37318, 73163, 72644, 60539, 50031, 41542, 72428, 65498, 65498, 49872, 41461,
      /* 22755 */ 70461, 56939, 61615, 37318, 72643, 60923, 41542, 57845, 65498, 49892, 41461, 49913, 72946, 72644, 50030,
      /* 22770 */ 54383, 59799, 54339, 40392, 49935, 49960, 49980, 50002, 57326, 50022, 50048, 50069, 50089, 60497, 50030,
      /* 22785 */ 47449, 46829, 60496, 73658, 47451, 47606, 53268, 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318,
      /* 22800 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22815 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22830 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22845 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22860 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22875 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22890 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22905 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22920 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22935 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22950 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22965 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22980 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 22995 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23010 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23025 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23040 */ 45302, 37318, 37318, 50115, 37318, 44953, 44449, 50137, 37318, 37060, 50171, 54108, 64429, 50196, 50210,
      /* 23055 */ 50226, 50255, 50239, 50269, 65689, 44626, 50285, 50301, 50316, 50332, 50367, 39233, 53108, 50384, 61398,
      /* 23070 */ 55344, 50419, 50467, 50512, 50528, 50544, 50594, 50610, 50651, 50667, 73014, 50694, 49260, 50729, 62653,
      /* 23085 */ 50756, 50774, 72085, 37318, 37318, 49073, 37318, 73164, 50802, 70730, 47643, 67373, 50837, 50866, 47931,
      /* 23100 */ 48477, 50890, 64147, 50934, 50954, 50974, 61240, 51024, 54206, 54678, 60300, 51066, 42093, 59527, 51082,
      /* 23115 */ 54503, 44179, 51132, 51166, 69514, 50121, 44486, 44480, 51182, 51198, 51247, 51290, 51306, 51322, 51357,
      /* 23130 */ 51407, 51457, 51482, 51519, 51581, 60231, 51607, 51635, 51659, 51675, 51432, 54188, 73942, 51691, 51713,
      /* 23145 */ 51750, 51800, 41753, 51824, 51840, 37318, 45167, 74354, 51864, 51882, 51918, 51962, 51982, 72643, 52018,
      /* 23160 */ 52052, 68101, 52072, 70228, 38772, 52096, 72897, 41542, 52136, 57279, 52172, 66566, 52195, 65498, 64541,
      /* 23175 */ 65498, 52222, 56902, 52245, 41461, 67612, 41461, 52280, 51497, 37891, 64079, 46636, 37318, 52344, 55168,
      /* 23190 */ 73701, 70986, 47906, 72644, 52368, 52401, 61913, 52428, 52445, 53191, 52464, 52511, 46777, 66351, 65498,
      /* 23205 */ 52546, 52580, 55946, 51008, 41461, 52615, 49469, 47863, 47501, 37318, 39657, 52645, 37318, 58484, 60498,
      /* 23220 */ 52664, 60195, 52685, 42291, 67536, 73887, 52704, 59595, 49809, 69760, 70602, 59798, 46578, 54457, 71795,
      /* 23235 */ 47288, 37318, 68581, 52725, 60872, 52759, 71031, 52775, 65989, 69245, 52802, 72675, 52206, 52852, 55908,
      /* 23250 */ 48097, 54237, 46605, 52882, 52918, 52936, 39919, 39478, 52952, 52973, 52992, 65449, 53038, 56792, 66087,
      /* 23265 */ 71786, 53088, 56765, 56939, 40362, 53104, 72643, 69978, 41542, 52310, 65498, 53124, 53817, 55637, 53146,
      /* 23280 */ 55211, 53171, 53289, 59799, 53207, 55668, 73239, 68122, 73294, 50578, 53242, 53264, 53284, 53305, 53324,
      /* 23295 */ 42326, 53340, 53356, 53372, 60496, 73658, 47451, 66435, 53400, 53449, 62339, 66862, 41867, 41898, 41909,
      /* 23310 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23325 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23340 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23355 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23370 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23385 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23400 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23415 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23430 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23445 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23460 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23475 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23490 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23505 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23520 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23535 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23550 */ 37318, 37318, 45302, 37318, 37318, 51938, 37318, 44953, 62203, 56053, 37318, 51929, 37318, 53498, 53534,
      /* 23565 */ 53550, 53564, 53580, 53609, 53593, 53623, 65689, 37318, 68909, 41289, 37087, 37318, 37318, 37318, 37318,
      /* 23580 */ 61388, 37318, 61393, 61388, 52002, 53639, 47391, 58863, 63536, 59869, 62003, 50482, 37318, 53663, 37318,
      /* 23595 */ 68839, 53663, 37318, 37318, 37318, 69142, 53682, 45250, 37318, 55674, 71208, 72644, 72644, 72644, 53704,
      /* 23610 */ 53738, 41542, 41542, 52709, 48072, 65498, 65498, 65498, 57854, 53755, 41461, 41461, 41461, 64567, 41960,
      /* 23625 */ 37318, 37318, 37318, 37318, 37318, 44399, 37318, 37318, 37318, 53779, 73164, 72644, 72644, 72644, 63735,
      /* 23640 */ 72644, 41363, 41542, 41542, 41542, 60760, 41542, 65493, 65498, 65498, 65498, 61277, 65498, 46825, 41461,
      /* 23655 */ 41461, 41461, 48744, 41461, 63696, 45404, 37318, 37318, 37318, 37318, 37318, 44403, 37318, 45747, 37318,
      /* 23670 */ 72643, 72644, 72644, 50815, 72644, 72645, 38772, 41542, 41542, 71247, 41542, 41542, 45363, 65498, 65498,
      /* 23685 */ 48537, 65498, 65498, 59800, 41461, 41461, 67762, 41461, 41461, 47863, 51497, 37318, 37318, 37318, 37318,
      /* 23700 */ 37318, 67308, 37318, 72642, 72644, 72644, 56359, 72644, 61913, 41542, 41542, 41542, 70112, 48876, 65497,
      /* 23715 */ 65498, 65498, 66735, 65498, 59803, 41461, 41461, 41461, 53797, 47863, 47501, 37318, 37318, 37318, 37318,
      /* 23730 */ 37318, 60498, 72644, 72644, 72644, 42291, 41542, 41542, 41542, 59595, 65498, 65498, 65498, 59798, 41461,
      /* 23745 */ 41461, 41461, 47288, 37318, 37318, 37318, 37318, 37318, 72644, 72644, 60920, 41542, 41542, 41542, 65498,
      /* 23760 */ 65498, 65498, 63673, 41461, 41461, 54260, 37318, 37318, 37318, 73163, 67467, 72644, 48046, 41542, 73662,
      /* 23775 */ 48935, 65498, 59802, 53815, 41462, 56939, 61615, 37318, 72643, 60923, 41542, 73664, 65498, 59801, 41461,
      /* 23790 */ 49498, 72946, 72644, 50030, 54383, 59799, 54339, 61620, 60922, 73660, 47450, 46828, 73161, 59759, 73663,
      /* 23805 */ 59797, 47605, 60497, 50030, 47449, 46829, 60496, 73658, 47451, 41851, 61054, 66378, 62339, 68189, 53833,
      /* 23820 */ 41898, 41909, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23835 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23850 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23865 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23880 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23895 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23910 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23925 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23940 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23955 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23970 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 23985 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24000 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24015 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24030 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24045 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24060 */ 37318, 37318, 37318, 37318, 45302, 37318, 37318, 37318, 37318, 44953, 37318, 39797, 37318, 37318, 37318,
      /* 24075 */ 67919, 53869, 53905, 53909, 53925, 53954, 53938, 53968, 65689, 37318, 37318, 41289, 37087, 37318, 45716,
      /* 24090 */ 37318, 37318, 37318, 37318, 37318, 37318, 44404, 72644, 50028, 41369, 65498, 47282, 62003, 46136, 46156,
      /* 24105 */ 37318, 37318, 68839, 37318, 37318, 37318, 37318, 40903, 37318, 37318, 37318, 73164, 72644, 72644, 72644,
      /* 24120 */ 72644, 45386, 41542, 41542, 41542, 52709, 65498, 65498, 65498, 65498, 57854, 41461, 41461, 41461, 41461,
      /* 24135 */ 60376, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 36975, 37318, 64085, 73164, 72644, 72644,
      /* 24150 */ 72644, 72644, 72644, 53984, 41542, 41542, 41542, 41542, 41542, 62136, 65498, 65498, 65498, 65498, 65498,
      /* 24165 */ 46825, 41461, 41461, 41461, 41461, 41461, 47041, 37318, 37318, 37318, 54006, 37318, 54026, 36968, 37318,
      /* 24180 */ 37318, 53666, 72643, 72644, 65774, 72644, 72644, 72645, 38772, 41542, 41542, 54043, 41542, 41542, 45363,
      /* 24195 */ 65498, 65498, 53015, 65498, 65498, 59800, 41461, 41461, 66593, 41461, 41461, 71140, 54854, 37318, 37318,
      /* 24210 */ 54062, 37318, 37318, 37318, 37318, 72642, 72644, 72644, 72644, 72644, 38767, 41542, 41542, 41542, 41542,
      /* 24225 */ 41444, 65497, 65498, 65498, 65498, 65498, 59803, 41461, 41461, 41461, 41461, 47863, 54854, 37318, 37318,
      /* 24240 */ 54082, 64821, 37318, 60498, 72644, 72644, 62830, 58547, 41542, 41542, 58315, 46770, 65498, 65498, 71297,
      /* 24255 */ 59798, 41461, 41461, 54740, 47288, 59033, 54099, 69440, 44860, 37318, 54124, 64478, 44740, 41542, 54141,
      /* 24270 */ 70297, 54157, 61206, 54174, 54204, 58614, 54222, 56936, 53884, 37318, 41072, 40582, 71978, 54276, 54299,
      /* 24285 */ 54319, 56380, 73391, 73919, 41714, 55599, 54335, 56939, 50403, 59838, 42233, 54355, 53715, 54379, 54399,
      /* 24300 */ 59801, 54439, 49498, 72946, 72644, 50030, 54383, 59799, 54339, 61620, 60922, 73660, 47450, 46828, 73161,
      /* 24315 */ 59759, 73663, 59797, 47605, 60497, 50030, 47449, 46829, 60496, 73658, 47451, 47606, 53268, 62159, 57408,
      /* 24330 */ 54473, 41867, 41898, 41909, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24345 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24360 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24375 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24390 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24405 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24420 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24435 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24450 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24465 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24480 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24495 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24510 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24525 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24540 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24555 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24570 */ 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318, 37318, 37318, 37318, 44953, 37318, 37318, 37318,
      /* 24585 */ 37318, 37318, 67919, 57964, 37318, 37318, 45323, 45350, 63443, 47000, 59399, 37318, 37318, 60166, 37087,
      /* 24600 */ 37318, 37318, 37318, 54501, 37318, 54501, 42045, 54519, 39472, 54546, 54565, 67872, 65498, 54590, 62375,
      /* 24615 */ 54624, 37318, 37318, 47504, 68839, 67717, 44759, 37318, 37318, 54658, 37318, 37318, 37318, 73164, 72644,
      /* 24630 */ 72644, 58045, 72644, 45386, 41542, 41542, 67542, 52709, 65498, 65498, 65498, 56180, 57854, 41461, 41461,
      /* 24645 */ 41461, 54676, 60376, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 68532, 57795, 73164,
      /* 24660 */ 72644, 72644, 72644, 72644, 72644, 54694, 41542, 41542, 41542, 41542, 41542, 54716, 65498, 65498, 65498,
      /* 24675 */ 65498, 65498, 54737, 41461, 41461, 41461, 41461, 41461, 54756, 71731, 37318, 37318, 37318, 37318, 37318,
      /* 24690 */ 37318, 37318, 37318, 74625, 57661, 72644, 72644, 72644, 72644, 72645, 38772, 54791, 41542, 41542, 41542,
      /* 24705 */ 41542, 45363, 54808, 65498, 65498, 65498, 65498, 59800, 54829, 41461, 41461, 41461, 41461, 47863, 54854,
      /* 24720 */ 37318, 37318, 66657, 37318, 37318, 37318, 37318, 72642, 72644, 72644, 72644, 58513, 38767, 41542, 41542,
      /* 24735 */ 41542, 63753, 41444, 65497, 65498, 65498, 65498, 70365, 59803, 41461, 41461, 41461, 60263, 47863, 54854,
      /* 24750 */ 37318, 37318, 49068, 37318, 37318, 60498, 72644, 72644, 72644, 58547, 41542, 41542, 41542, 46770, 65498,
      /* 24765 */ 65498, 65498, 59798, 41461, 41461, 41461, 47288, 37318, 37318, 37318, 37318, 37318, 72644, 72644, 60920,
      /* 24780 */ 41542, 41542, 41542, 65498, 65498, 65498, 63673, 41461, 41461, 56936, 37318, 54946, 37318, 40844, 72644,
      /* 24795 */ 72644, 50031, 41542, 73662, 65498, 65498, 59802, 41461, 41462, 54850, 61615, 65734, 72643, 61015, 41542,
      /* 24810 */ 72843, 65498, 54871, 41461, 54893, 72946, 72644, 50030, 54383, 59799, 54339, 61620, 60922, 73660, 47450,
      /* 24825 */ 46828, 73161, 59759, 73663, 59797, 47605, 60497, 50030, 47449, 46829, 60496, 73658, 47451, 47606, 53268,
      /* 24840 */ 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24855 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24870 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24885 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24900 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24915 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24930 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24945 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24960 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24975 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 24990 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25005 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25020 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25035 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25050 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25065 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25080 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318, 37318, 51946, 37318, 44953, 37318,
      /* 25095 */ 54915, 54931, 37318, 54967, 54974, 54990, 55006, 55021, 55037, 55066, 55050, 55080, 65689, 37318, 37318,
      /* 25110 */ 51966, 38825, 37318, 37318, 37318, 54010, 55096, 55115, 48257, 55149, 55184, 55227, 55249, 41525, 55284,
      /* 25125 */ 55303, 63265, 55333, 37318, 37318, 37318, 40256, 37318, 55133, 55360, 37318, 37318, 37318, 55377, 52524,
      /* 25140 */ 73164, 55412, 59232, 72644, 55450, 55508, 48452, 55571, 48764, 46504, 61212, 71358, 65498, 52836, 55590,
      /* 25155 */ 72384, 66401, 41461, 55624, 55653, 37318, 55162, 48123, 45480, 68146, 44384, 37318, 37318, 55690, 55710,
      /* 25170 */ 55730, 55750, 50821, 72644, 73775, 55770, 55805, 41363, 53990, 41542, 54303, 55821, 55849, 65493, 53022,
      /* 25185 */ 65498, 61780, 55897, 55924, 46825, 56459, 41461, 71394, 55962, 55996, 47041, 37318, 37318, 37318, 54660,
      /* 25200 */ 56044, 56069, 49736, 37318, 37318, 37318, 56099, 56122, 72644, 56141, 70528, 58519, 56160, 58143, 41542,
      /* 25215 */ 63117, 55574, 66717, 50850, 52564, 65498, 63146, 65498, 56203, 56221, 51808, 41461, 56467, 41461, 56251,
      /* 25230 */ 56269, 54854, 55099, 56307, 46073, 56323, 59679, 56339, 62046, 56355, 52688, 61008, 58074, 70003, 51212,
      /* 25245 */ 41542, 66283, 70084, 56375, 56396, 56430, 65125, 61593, 46531, 69280, 62369, 41461, 56449, 56483, 56517,
      /* 25260 */ 56546, 63230, 66178, 37927, 69494, 47228, 56575, 66873, 56144, 56596, 56612, 70031, 45388, 56647, 56669,
      /* 25275 */ 56693, 56729, 56747, 56781, 56815, 56873, 56892, 51765, 56928, 56955, 37318, 37318, 61883, 53848, 56976,
      /* 25290 */ 57010, 57028, 57047, 57072, 57089, 57107, 57133, 57151, 57170, 57197, 57216, 56936, 60597, 37318, 40353,
      /* 25305 */ 73163, 72644, 72644, 50031, 41542, 73662, 65498, 65498, 59802, 41461, 41462, 57236, 61615, 37318, 57252,
      /* 25320 */ 51333, 57276, 57295, 62141, 50073, 54877, 49498, 57311, 72644, 50030, 54383, 59799, 54339, 39384, 52786,
      /* 25335 */ 55523, 72337, 68506, 73161, 59759, 73663, 59797, 47605, 60497, 50030, 47449, 46829, 57331, 57347, 55938,
      /* 25350 */ 57396, 53268, 62159, 62339, 66862, 41867, 57424, 41909, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25365 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25380 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25395 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25410 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25425 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25440 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25455 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25470 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25485 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25500 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25515 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25530 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25545 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25560 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25575 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25590 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318, 37318, 42152, 37318,
      /* 25605 */ 44953, 37318, 37318, 37318, 37318, 37318, 67919, 57964, 37318, 37318, 57475, 57504, 57488, 57518, 65689,
      /* 25620 */ 37318, 37318, 41289, 37087, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 44404, 72644, 50028,
      /* 25635 */ 41369, 65498, 47282, 62003, 72217, 37318, 37318, 37318, 68839, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25650 */ 37318, 37318, 73164, 72644, 72644, 66211, 72644, 45386, 41542, 41542, 57534, 52709, 65498, 65498, 49388,
      /* 25665 */ 65498, 57854, 41461, 41461, 51784, 41461, 60376, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25680 */ 37318, 37318, 37318, 73164, 72644, 72644, 72644, 72644, 72644, 41363, 41542, 41542, 41542, 41542, 41542,
      /* 25695 */ 65493, 65498, 65498, 65498, 65498, 65498, 46825, 41461, 41461, 41461, 41461, 41461, 47041, 37318, 37318,
      /* 25710 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 72643, 72644, 72644, 72644, 72644, 72645, 38772,
      /* 25725 */ 41542, 41542, 41542, 41542, 41542, 45363, 65498, 65498, 65498, 65498, 65498, 59800, 41461, 41461, 41461,
      /* 25740 */ 41461, 41461, 47863, 54854, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 72642, 72644, 72644, 72644,
      /* 25755 */ 72644, 38767, 41542, 41542, 41542, 41542, 41444, 65497, 65498, 65498, 65498, 65498, 59803, 41461, 41461,
      /* 25770 */ 41461, 41461, 47863, 54854, 37318, 37318, 37318, 37318, 37318, 60498, 72644, 72644, 72644, 58547, 41542,
      /* 25785 */ 41542, 41542, 46770, 65498, 65498, 65498, 59798, 41461, 41461, 41461, 47288, 37318, 37318, 37318, 37318,
      /* 25800 */ 37318, 72644, 72644, 60920, 41542, 41542, 41542, 65498, 65498, 65498, 63673, 41461, 41461, 56936, 37318,
      /* 25815 */ 37318, 37318, 73163, 72644, 72644, 50031, 41542, 73662, 65498, 65498, 59802, 41461, 41462, 56939, 61615,
      /* 25830 */ 37318, 72643, 60923, 41542, 73664, 65498, 59801, 41461, 49498, 72946, 72644, 50030, 54383, 59799, 54339,
      /* 25845 */ 61620, 60922, 73660, 47450, 46828, 73161, 59759, 73663, 59797, 47605, 60497, 50030, 47449, 46829, 60496,
      /* 25860 */ 73658, 47451, 47606, 53268, 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318, 37318, 37318, 37318,
      /* 25875 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25890 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25905 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25920 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25935 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25950 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25965 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25980 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 25995 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26010 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26025 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26040 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26055 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26070 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26085 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26100 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318, 37318,
      /* 26115 */ 41502, 37318, 44953, 37318, 37318, 37318, 37318, 37318, 67919, 57964, 37318, 37318, 45323, 45350, 63443,
      /* 26130 */ 47000, 65689, 37318, 37318, 41289, 37087, 37318, 52736, 37318, 37318, 37318, 37318, 37318, 37318, 44404,
      /* 26145 */ 72644, 50028, 41369, 65498, 47282, 62003, 72217, 37318, 37318, 37318, 68839, 37318, 37318, 37318, 37318,
      /* 26160 */ 37318, 37318, 37318, 37318, 73164, 72644, 72644, 72644, 72644, 45386, 41542, 41542, 41542, 52709, 65498,
      /* 26175 */ 65498, 65498, 65498, 57854, 41461, 41461, 41461, 41461, 60376, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26190 */ 37318, 37318, 37318, 37318, 37318, 73164, 72644, 72644, 72644, 72644, 72644, 41363, 41542, 41542, 41542,
      /* 26205 */ 41542, 41542, 65493, 65498, 65498, 65498, 65498, 65498, 46825, 41461, 41461, 41461, 41461, 41461, 47041,
      /* 26220 */ 47060, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 57438, 72644, 72644, 72644, 72644,
      /* 26235 */ 72645, 61918, 41542, 41542, 41542, 41542, 41542, 45363, 57553, 65498, 65498, 65498, 65498, 59800, 57571,
      /* 26250 */ 41461, 41461, 41461, 41461, 47863, 54854, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 72642, 72644,
      /* 26265 */ 72644, 72644, 72644, 38767, 41542, 41542, 41542, 41542, 41444, 65497, 65498, 65498, 65498, 65498, 59803,
      /* 26280 */ 41461, 41461, 41461, 41461, 47863, 54854, 37318, 37318, 37318, 37318, 37318, 60498, 72644, 72644, 72644,
      /* 26295 */ 58547, 41542, 41542, 41542, 46770, 65498, 65498, 65498, 59798, 41461, 41461, 41461, 47288, 37318, 37318,
      /* 26310 */ 37318, 37318, 37318, 72644, 72644, 60920, 41542, 41542, 41542, 65498, 65498, 65498, 63673, 41461, 41461,
      /* 26325 */ 56936, 37318, 37318, 37318, 73163, 72644, 72644, 50031, 41542, 73662, 65498, 65498, 59802, 41461, 41462,
      /* 26340 */ 56939, 61615, 37318, 72643, 60923, 41542, 73664, 65498, 59801, 41461, 49498, 72946, 72644, 50030, 54383,
      /* 26355 */ 59799, 54339, 61620, 60922, 73660, 47450, 46828, 73161, 59759, 73663, 59797, 47605, 60497, 50030, 47449,
      /* 26370 */ 46829, 60496, 73658, 47451, 47606, 53268, 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318, 37318,
      /* 26385 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26400 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26415 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26430 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26445 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26460 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26475 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26490 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26505 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26520 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26535 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26550 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26565 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26580 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26595 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26610 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45302,
      /* 26625 */ 37318, 37318, 39711, 37318, 44953, 37318, 42450, 57589, 57607, 57625, 51565, 57641, 57677, 57681, 57697,
      /* 26640 */ 57726, 57710, 57740, 65689, 51556, 37318, 41289, 37087, 47346, 60068, 37318, 37318, 39892, 37318, 40511,
      /* 26655 */ 57756, 45560, 57818, 57834, 63977, 57879, 60331, 41648, 58000, 57914, 37318, 37318, 38814, 37318, 37318,
      /* 26670 */ 57949, 44882, 37318, 57925, 37318, 67807, 49037, 57985, 58044, 51257, 58061, 58115, 58131, 41542, 58165,
      /* 26685 */ 54574, 59660, 56705, 57154, 47834, 58193, 52256, 58227, 57863, 58246, 50918, 53781, 37318, 37318, 37318,
      /* 26700 */ 37318, 49029, 67667, 37318, 37318, 37318, 37318, 73164, 60986, 49757, 72644, 58283, 72644, 58309, 58331,
      /* 26715 */ 63863, 47408, 61105, 41542, 58368, 58389, 67585, 57555, 49801, 65498, 58422, 58441, 68033, 65185, 60256,
      /* 26730 */ 69351, 47041, 37318, 61839, 58465, 37318, 37318, 45281, 53688, 37318, 37318, 37318, 72643, 72644, 72644,
      /* 26745 */ 63835, 58500, 58535, 38772, 41542, 41542, 55268, 69704, 69729, 45363, 65498, 65498, 61489, 63774, 58568,
      /* 26760 */ 59800, 41461, 41461, 66754, 51734, 58602, 47863, 54854, 58637, 37318, 37318, 68901, 37318, 37318, 37318,
      /* 26775 */ 72642, 66219, 72644, 72644, 72644, 38767, 67986, 41542, 41542, 41542, 41444, 65497, 56713, 65498, 65498,
      /* 26790 */ 65498, 59803, 71875, 41461, 41461, 41461, 47863, 54899, 37318, 58657, 37318, 51097, 69488, 55754, 58674,
      /* 26805 */ 72644, 72644, 58694, 58724, 41542, 41542, 58745, 58769, 65498, 65498, 61143, 58793, 41461, 41461, 71804,
      /* 26820 */ 37318, 68935, 37318, 73352, 37318, 72644, 49303, 60920, 41542, 72302, 41542, 65498, 52557, 65498, 63673,
      /* 26835 */ 46570, 41461, 56936, 37318, 38852, 37318, 73163, 72644, 56106, 50031, 41542, 58818, 65498, 73828, 59802,
      /* 26850 */ 41461, 48715, 56939, 61615, 37318, 72643, 60923, 41542, 73664, 65498, 59801, 41461, 49498, 72946, 72644,
      /* 26865 */ 50030, 54383, 59799, 54339, 61620, 60922, 73660, 47450, 46828, 73161, 59759, 73663, 59797, 47605, 53248,
      /* 26880 */ 58845, 64251, 68569, 67094, 58879, 59108, 47606, 53268, 62159, 58907, 58895, 41867, 41898, 41909, 37318,
      /* 26895 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26910 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26925 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26940 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26955 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26970 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 26985 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27000 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27015 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27030 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27045 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27060 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27075 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27090 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27105 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27120 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27135 */ 37318, 45302, 37318, 37318, 37319, 37318, 44953, 37318, 37318, 58923, 37318, 37038, 61423, 60807, 58942,
      /* 27150 */ 58956, 58972, 59001, 58985, 59015, 65689, 38336, 37318, 41289, 37087, 37318, 59031, 37318, 37318, 40327,
      /* 27165 */ 37318, 38338, 59049, 40328, 59079, 54363, 41369, 59103, 48516, 62003, 72217, 37318, 37318, 59124, 68839,
      /* 27180 */ 37318, 63001, 62951, 44924, 37318, 37318, 37318, 59142, 59160, 59182, 72644, 59203, 59223, 59256, 41542,
      /* 27195 */ 57091, 48815, 59272, 59718, 65498, 52599, 56799, 57854, 54450, 41461, 63259, 59312, 52629, 59347, 40308,
      /* 27210 */ 54027, 37318, 37318, 37318, 37318, 56028, 37318, 37318, 37318, 73164, 56849, 59370, 68264, 72644, 72644,
      /* 27225 */ 41363, 63477, 59429, 70290, 41542, 41542, 65493, 64678, 69828, 70882, 65498, 65498, 46825, 59459, 66600,
      /* 27240 */ 59489, 41461, 41461, 47041, 37318, 60820, 72604, 37318, 37318, 56414, 63654, 59509, 37318, 37318, 72643,
      /* 27255 */ 61043, 72644, 72644, 59543, 72645, 59566, 72479, 41542, 41542, 59585, 41542, 65528, 73531, 59619, 65498,
      /* 27270 */ 70373, 65498, 59800, 54834, 59637, 41461, 64050, 41461, 47863, 54854, 37318, 37318, 37318, 37318, 37318,
      /* 27285 */ 37318, 37318, 72642, 72644, 72644, 72644, 72644, 38767, 41542, 41542, 41542, 41542, 41444, 65497, 65498,
      /* 27300 */ 65498, 65498, 65498, 59803, 41461, 41461, 41461, 41461, 47863, 54854, 37318, 37318, 37318, 37318, 37318,
      /* 27315 */ 60498, 72644, 72644, 72644, 58547, 41542, 41542, 41542, 46770, 65498, 65498, 65498, 59798, 41461, 41461,
      /* 27330 */ 41461, 47288, 44851, 37318, 37318, 37318, 37318, 59207, 72644, 60920, 61740, 41542, 41542, 73606, 65498,
      /* 27345 */ 65498, 49876, 41461, 41461, 56936, 37318, 37318, 37318, 73163, 72644, 72644, 50031, 61445, 73662, 65498,
      /* 27360 */ 59655, 59802, 56876, 41462, 56939, 61615, 37318, 72643, 60923, 41542, 73664, 65498, 59801, 41461, 49498,
      /* 27375 */ 59676, 72644, 59695, 59713, 71108, 58802, 59734, 59756, 59775, 59794, 59819, 73161, 59759, 73663, 59797,
      /* 27390 */ 47605, 60497, 50030, 47449, 46829, 60496, 59854, 73737, 67066, 53268, 62159, 62339, 66862, 41867, 41898,
      /* 27405 */ 41909, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27420 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27435 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27450 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27465 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27480 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27495 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27510 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27525 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27540 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27555 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27570 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27585 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27600 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27615 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27630 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27645 */ 37318, 37318, 37318, 45302, 37318, 37318, 37318, 67305, 48392, 37318, 54855, 59885, 59896, 59919, 66152,
      /* 27660 */ 67290, 59971, 59985, 60001, 60031, 60044, 60015, 65689, 47586, 44905, 38860, 60060, 60084, 37318, 60579,
      /* 27675 */ 48333, 40435, 72237, 60111, 60138, 60122, 60182, 60217, 60279, 60316, 65566, 60366, 50482, 58641, 37318,
      /* 27690 */ 37318, 48606, 72949, 68216, 73429, 60392, 69215, 60419, 37318, 60465, 60494, 60514, 60535, 72871, 72644,
      /* 27705 */ 60555, 49584, 41542, 47939, 52709, 70645, 70888, 65498, 70640, 57854, 54601, 60344, 63674, 41461, 59473,
      /* 27720 */ 64205, 46157, 37318, 60571, 37318, 37318, 37318, 60595, 37318, 37318, 45177, 73164, 60613, 72644, 53647,
      /* 27735 */ 72644, 72644, 41363, 60640, 41542, 61097, 41542, 41542, 58708, 70406, 65498, 55874, 65498, 65498, 50904,
      /* 27750 */ 58204, 41461, 60666, 41461, 41461, 47041, 37318, 37318, 37318, 37318, 40106, 37318, 37318, 44677, 60687,
      /* 27765 */ 37318, 60703, 72644, 72644, 46744, 72644, 58087, 60725, 41542, 41542, 41542, 60758, 74033, 52815, 65498,
      /* 27780 */ 65498, 65498, 52593, 61759, 41832, 41461, 41461, 41461, 53066, 69906, 47863, 49504, 60776, 60792, 64608,
      /* 27795 */ 60842, 51384, 60860, 60895, 60918, 60939, 60974, 61031, 61070, 38767, 70056, 61088, 61121, 61167, 41444,
      /* 27810 */ 65497, 61193, 61228, 55536, 61274, 59803, 61293, 61309, 61258, 72531, 61332, 54854, 48246, 61348, 61369,
      /* 27825 */ 61414, 58477, 51897, 68272, 58678, 65107, 61439, 53722, 46795, 49566, 61461, 54813, 65498, 61486, 61505,
      /* 27840 */ 72623, 61531, 61548, 61568, 67348, 61609, 37318, 37318, 61636, 61678, 47889, 61697, 61718, 52147, 61736,
      /* 27855 */ 61756, 56291, 61775, 61796, 55608, 61816, 46251, 61838, 37318, 61855, 73163, 61899, 68974, 61934, 52295,
      /* 27870 */ 73662, 61950, 58777, 71058, 61966, 62000, 62019, 63023, 62043, 40852, 60923, 72471, 73664, 62062, 59801,
      /* 27885 */ 62083, 49498, 62101, 55233, 62122, 54383, 62157, 62175, 62225, 62247, 62263, 62279, 62295, 62331, 57449,
      /* 27900 */ 55864, 54413, 66647, 60497, 50030, 47449, 46829, 60496, 73658, 47451, 47606, 62355, 62391, 62339, 66862,
      /* 27915 */ 41867, 41898, 57361, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27930 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27945 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27960 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27975 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 27990 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28005 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28020 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28035 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28050 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28065 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28080 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28095 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28110 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28125 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28140 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28155 */ 37318, 37318, 37318, 37318, 37318, 45302, 37318, 37318, 37318, 62425, 44953, 37318, 41929, 62645, 37318,
      /* 28170 */ 37318, 67919, 62449, 62465, 62479, 62495, 62524, 62508, 62538, 62554, 62570, 62591, 51116, 40267, 62636,
      /* 28185 */ 62669, 37763, 62688, 62721, 40114, 62768, 62784, 62800, 62846, 62862, 62878, 62894, 62929, 62967, 62983,
      /* 28200 */ 37318, 74513, 46381, 42254, 37318, 40466, 50397, 50445, 63017, 37318, 37318, 63039, 73164, 72644, 63059,
      /* 28215 */ 63089, 55789, 45386, 47983, 63105, 51466, 69257, 65498, 47963, 66977, 63139, 63162, 41461, 63187, 63203,
      /* 28230 */ 63246, 60376, 37318, 65243, 37318, 54083, 37318, 65923, 63281, 37318, 49694, 37318, 63306, 63323, 63356,
      /* 28245 */ 63373, 63389, 72644, 67473, 63412, 41542, 63428, 63500, 41542, 54700, 59443, 65498, 63522, 63557, 65498,
      /* 28260 */ 56187, 53414, 41461, 63578, 63594, 41461, 68051, 48021, 46148, 37318, 59832, 55125, 37318, 37318, 37318,
      /* 28275 */ 37318, 37318, 63803, 72643, 72644, 70758, 59187, 72644, 72645, 38772, 41542, 55434, 57073, 41542, 41542,
      /* 28290 */ 45363, 65498, 74070, 65498, 63613, 65498, 59800, 41461, 60671, 41461, 63633, 41461, 47863, 54854, 37318,
      /* 28305 */ 37318, 63653, 44684, 37318, 37318, 37318, 72642, 72644, 72644, 72644, 57012, 55426, 41542, 41542, 41542,
      /* 28320 */ 41542, 66835, 62140, 65498, 65498, 65498, 65498, 63670, 41461, 41461, 41461, 41461, 63690, 54854, 67948,
      /* 28335 */ 37318, 37318, 37318, 37318, 63712, 72644, 63734, 72644, 46430, 41542, 63751, 41542, 56170, 65498, 63769,
      /* 28350 */ 65498, 41577, 41461, 51728, 41461, 47288, 63790, 37318, 37318, 37318, 37318, 62822, 66520, 60920, 41416,
      /* 28365 */ 71239, 41542, 47825, 58753, 65498, 61151, 71116, 41461, 72584, 37318, 37318, 37318, 73163, 72644, 72644,
      /* 28380 */ 50031, 41542, 73662, 65498, 65498, 59802, 41461, 41462, 45334, 61615, 37318, 63825, 73373, 63858, 64501,
      /* 28395 */ 63879, 65885, 41461, 56530, 63897, 63917, 63966, 63993, 64029, 64066, 39534, 64101, 64126, 64163, 64186,
      /* 28410 */ 73161, 59759, 73663, 59797, 47605, 60497, 50030, 47449, 46829, 60496, 73658, 47451, 50006, 53268, 62159,
      /* 28425 */ 64221, 66862, 41867, 64277, 64293, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28440 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28455 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28470 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28485 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28500 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28515 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28530 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28545 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28560 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28575 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28590 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28605 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28620 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28635 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28650 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28665 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318, 37318, 37318, 66665, 44953, 37318, 37318,
      /* 28680 */ 68891, 37318, 64328, 64337, 67698, 39838, 64353, 64369, 64398, 64382, 64414, 65689, 37318, 69115, 41289,
      /* 28695 */ 37087, 37318, 37318, 63950, 37318, 51547, 37318, 37318, 37318, 44404, 64465, 64494, 64517, 49717, 67057,
      /* 28710 */ 64557, 72217, 37318, 64583, 37318, 68839, 37318, 40908, 40502, 64605, 50368, 64607, 37318, 37318, 62231,
      /* 28725 */ 64624, 67101, 73183, 63396, 64650, 67404, 68345, 48485, 71344, 64666, 64694, 64712, 71834, 64730, 57181,
      /* 28740 */ 60350, 61532, 53072, 55317, 64759, 37318, 64782, 64801, 45664, 45866, 38224, 37318, 37318, 37318, 37318,
      /* 28755 */ 73164, 72644, 72644, 52669, 72644, 72644, 41363, 41542, 41542, 67409, 41542, 41542, 65493, 65498, 65498,
      /* 28770 */ 55555, 65498, 65498, 46825, 41461, 41461, 68042, 41461, 41461, 49668, 53220, 61353, 37318, 37318, 37318,
      /* 28785 */ 64818, 59354, 57374, 68538, 37318, 72643, 72644, 64837, 72644, 72644, 72645, 64870, 41542, 64889, 41542,
      /* 28800 */ 41542, 41542, 68453, 65498, 51231, 64925, 65498, 65498, 59800, 41461, 61515, 64943, 41461, 41461, 47863,
      /* 28815 */ 54854, 59903, 37318, 37318, 37318, 37909, 37318, 37318, 72642, 72644, 72644, 64960, 72644, 56626, 41542,
      /* 28830 */ 41542, 73894, 41542, 42296, 65497, 65498, 65498, 64978, 65498, 59803, 41461, 41461, 71869, 41461, 47863,
      /* 28845 */ 54854, 37318, 37318, 37318, 37318, 37318, 60498, 72644, 72644, 72644, 58547, 41542, 41542, 41542, 46770,
      /* 28860 */ 65498, 65498, 65498, 59798, 41461, 41461, 41461, 47288, 37318, 37318, 52897, 37318, 59144, 72644, 72644,
      /* 28875 */ 60920, 41542, 41542, 41542, 65498, 65498, 65498, 63673, 41461, 41461, 62943, 37318, 37318, 37318, 73163,
      /* 28890 */ 72644, 72644, 50031, 41542, 73662, 65498, 65498, 59802, 41461, 41462, 56939, 61615, 37318, 72643, 60923,
      /* 28905 */ 41542, 73664, 65498, 59801, 41461, 56828, 64997, 65024, 65045, 64231, 59603, 54339, 38753, 60922, 73660,
      /* 28920 */ 47450, 46828, 73161, 59759, 73663, 59797, 47605, 60497, 50030, 47449, 46829, 60496, 73658, 47451, 47606,
      /* 28935 */ 53268, 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28950 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28965 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28980 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 28995 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29010 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29025 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29040 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29055 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29070 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29085 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29100 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29115 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29130 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29145 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29160 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29175 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318, 37318, 37318, 37318, 44953,
      /* 29190 */ 37318, 37318, 37318, 37318, 37318, 67919, 57964, 37318, 37318, 45323, 45350, 63443, 47000, 65689, 37318,
      /* 29205 */ 37318, 41289, 37087, 37318, 46305, 37318, 37318, 37318, 42426, 42429, 65068, 54066, 65102, 51341, 41369,
      /* 29220 */ 65123, 50559, 62003, 48585, 65141, 37318, 37318, 68839, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29235 */ 37318, 73164, 72644, 72644, 72644, 72644, 45386, 41542, 41542, 41542, 52709, 65498, 65498, 65498, 65498,
      /* 29250 */ 57854, 41461, 41461, 41461, 41461, 60376, 37318, 37318, 37318, 43472, 37318, 37318, 37318, 37318, 37318,
      /* 29265 */ 37318, 37318, 73164, 72644, 72644, 72644, 72644, 72644, 65158, 41542, 41542, 41542, 41542, 41542, 66019,
      /* 29280 */ 65498, 65498, 65498, 65498, 65498, 46825, 41461, 41461, 41461, 41461, 41461, 47041, 37318, 37318, 37318,
      /* 29295 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 72643, 72644, 72644, 72644, 72644, 72645, 38772, 41542,
      /* 29310 */ 41542, 41542, 41542, 41542, 45363, 65498, 65498, 65498, 65498, 65498, 59800, 41461, 41461, 41461, 41461,
      /* 29325 */ 41461, 47863, 54854, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 72642, 72644, 52976, 72644, 72644,
      /* 29340 */ 38767, 41542, 41542, 73801, 41542, 41444, 65497, 65498, 49370, 65498, 65498, 59803, 41461, 41461, 65182,
      /* 29355 */ 41461, 47863, 54854, 37318, 37318, 37318, 37318, 37318, 60498, 72644, 72644, 72644, 58547, 41542, 41542,
      /* 29370 */ 41542, 46770, 65498, 65498, 65498, 59798, 41461, 41461, 41461, 47288, 37318, 37318, 37318, 37318, 37318,
      /* 29385 */ 72644, 72644, 60920, 41542, 41542, 41542, 65498, 65498, 65498, 63673, 41461, 41461, 56936, 37318, 37318,
      /* 29400 */ 37318, 73163, 51274, 72644, 50031, 65201, 73662, 71079, 65498, 59802, 58261, 41462, 56939, 61615, 37318,
      /* 29415 */ 72643, 60923, 41542, 73664, 65498, 59801, 41461, 49498, 72946, 72644, 50030, 54383, 59799, 54339, 61620,
      /* 29430 */ 60922, 73660, 47450, 46828, 73161, 59759, 73663, 59797, 47605, 60497, 50030, 47449, 46829, 60496, 73658,
      /* 29445 */ 47451, 47606, 53268, 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29460 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29475 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29490 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29505 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29520 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29535 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29550 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29565 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29580 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29595 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29610 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29625 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29640 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29655 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29670 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29685 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318, 37318, 37318,
      /* 29700 */ 37806, 44953, 65219, 37318, 37420, 65239, 37318, 67919, 65259, 65275, 65288, 65304, 65333, 65317, 65347,
      /* 29715 */ 65689, 45409, 47790, 41289, 50740, 71165, 72077, 54775, 46691, 68943, 37318, 65363, 65398, 65418, 65465,
      /* 29730 */ 65515, 65551, 65582, 68491, 65617, 65675, 37318, 37318, 37318, 55396, 65708, 50432, 65732, 40783, 60879,
      /* 29745 */ 37318, 37318, 46888, 65750, 54125, 65773, 60201, 65790, 65831, 49353, 41542, 61177, 57056, 65855, 49783,
      /* 29760 */ 65498, 65874, 65901, 41461, 65939, 58230, 64743, 49003, 37318, 37318, 37318, 54951, 44007, 65958, 37318,
      /* 29775 */ 73691, 37318, 44004, 69414, 59740, 72644, 52378, 72644, 64962, 65976, 66005, 41542, 53183, 41542, 52448,
      /* 29790 */ 66040, 66074, 65498, 73466, 65498, 70854, 66103, 60245, 41461, 66119, 41461, 72537, 66911, 47041, 37318,
      /* 29805 */ 37318, 38803, 72980, 60478, 40954, 37318, 37480, 66138, 66168, 66202, 72644, 66235, 46345, 66251, 72645,
      /* 29820 */ 66271, 41542, 58177, 66299, 66320, 41542, 56559, 65498, 65535, 66344, 66367, 65498, 69808, 41461, 53763,
      /* 29835 */ 66394, 66417, 41461, 47863, 49919, 37318, 37318, 52902, 66451, 37318, 66495, 39978, 72642, 66512, 60519,
      /* 29850 */ 72644, 72644, 38767, 65839, 41542, 66536, 41542, 41444, 65497, 66557, 54721, 65498, 65498, 59803, 66582,
      /* 29865 */ 73488, 41461, 41461, 52328, 47223, 43477, 62672, 37318, 37318, 37318, 65382, 72644, 72644, 61681, 58099,
      /* 29880 */ 41542, 41542, 41542, 66616, 65498, 65498, 65498, 66632, 66681, 41461, 41461, 54252, 37318, 70963, 37318,
      /* 29895 */ 37318, 37318, 66698, 72644, 60920, 66716, 41542, 67896, 66733, 65498, 69783, 66751, 41461, 54608, 56936,
      /* 29910 */ 37318, 66770, 37318, 73163, 72644, 72644, 50031, 41542, 73662, 65498, 65498, 59802, 41461, 41462, 56939,
      /* 29925 */ 61615, 37318, 72643, 60923, 41542, 73664, 65498, 59801, 41461, 56009, 66788, 66811, 66827, 66851, 66889,
      /* 29940 */ 49836, 61620, 60922, 73660, 47450, 46828, 42223, 66927, 59778, 49606, 47605, 66943, 50030, 47449, 46829,
      /* 29955 */ 60496, 73658, 47451, 52229, 66963, 67001, 67042, 47192, 41867, 41898, 41909, 37318, 37318, 37318, 37318,
      /* 29970 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 29985 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30000 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30015 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30030 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30045 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30060 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30075 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30090 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30105 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30120 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30135 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30150 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30165 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30180 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30195 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318,
      /* 30210 */ 37318, 37318, 42006, 44953, 41194, 40023, 67082, 63290, 67117, 67133, 67149, 67200, 67214, 67230, 67259,
      /* 30225 */ 67243, 67275, 67324, 37318, 67347, 72149, 37087, 37318, 39873, 37318, 37318, 73640, 55694, 39647, 45609,
      /* 30240 */ 60403, 67364, 67389, 66058, 64007, 71278, 67425, 72217, 39770, 40165, 39032, 68839, 68408, 37318, 37318,
      /* 30255 */ 37318, 37318, 39965, 41180, 37318, 67452, 67489, 70764, 72644, 72644, 67522, 67558, 63467, 41542, 52709,
      /* 30270 */ 51619, 65498, 67579, 65498, 57854, 67601, 63637, 67628, 41461, 60376, 37318, 67645, 37318, 67663, 67683,
      /* 30285 */ 37318, 56960, 37318, 65223, 37318, 37318, 73164, 52080, 69630, 72644, 72644, 72644, 67733, 60734, 73861,
      /* 30300 */ 41542, 41542, 53739, 65493, 58399, 51643, 65498, 65498, 63881, 46825, 67757, 59323, 41461, 41461, 66122,
      /* 30315 */ 50625, 37318, 37318, 67778, 47108, 48295, 37318, 38228, 67799, 44787, 57969, 67823, 72644, 72644, 69591,
      /* 30330 */ 55783, 67843, 67888, 41542, 41542, 63123, 65166, 73809, 53005, 65498, 65498, 64714, 62913, 63541, 72852,
      /* 30345 */ 41461, 41461, 59639, 69865, 70909, 48723, 67912, 59519, 37318, 37900, 37318, 51391, 37318, 67935, 72642,
      /* 30360 */ 72644, 52056, 59087, 72644, 38767, 41542, 41542, 67964, 67985, 41444, 65497, 65498, 65858, 58406, 65498,
      /* 30375 */ 59803, 41461, 41461, 68002, 41461, 47863, 54854, 37318, 68397, 37318, 68076, 37318, 60498, 68624, 72644,
      /* 30390 */ 68100, 65444, 66541, 41542, 68117, 51222, 72818, 65498, 55549, 59798, 53799, 41461, 51777, 47288, 37318,
      /* 30405 */ 37318, 40078, 37318, 68138, 72644, 72644, 60920, 41542, 41542, 41542, 65498, 65498, 65498, 63673, 41461,
      /* 30420 */ 41461, 65915, 37954, 37318, 68162, 56840, 72644, 69566, 50031, 41542, 68178, 65498, 72029, 59802, 41461,
      /* 30435 */ 61324, 68205, 61615, 68239, 68255, 57031, 68288, 49964, 68312, 64170, 41461, 72350, 72946, 63842, 68330,
      /* 30450 */ 50053, 68366, 68384, 61620, 60922, 73660, 47450, 46828, 40170, 49310, 63506, 57898, 47605, 68424, 68440,
      /* 30465 */ 45370, 63171, 40400, 68476, 68554, 68604, 53268, 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318,
      /* 30480 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30495 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30510 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30525 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30540 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30555 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30570 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30585 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30600 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30615 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30630 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30645 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30660 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30675 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30690 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30705 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 30720 */ 45302, 37318, 37318, 37318, 38247, 68640, 37318, 37318, 44545, 44549, 42062, 66479, 66466, 68687, 68703,
      /* 30735 */ 68719, 68748, 68732, 68764, 68811, 49856, 37318, 68835, 73418, 40538, 54530, 37318, 68855, 37963, 68877,
      /* 30750 */ 39120, 68925, 68959, 68996, 69012, 46476, 69028, 71470, 69063, 59385, 62027, 45461, 65008, 68839, 69079,
      /* 30765 */ 37318, 38220, 69096, 65716, 69131, 41882, 69165, 69175, 69191, 63718, 59550, 63357, 69231, 50874, 46465,
      /* 30780 */ 70280, 70118, 64531, 65596, 69273, 69296, 57117, 69318, 73551, 69334, 69350, 69367, 69406, 69430, 37318,
      /* 30795 */ 69456, 69475, 69510, 37318, 37318, 68519, 50099, 69530, 44732, 69549, 69582, 60998, 72644, 69624, 41363,
      /* 30810 */ 69646, 69670, 69695, 41542, 69720, 65493, 69753, 69776, 69799, 65498, 69824, 48973, 69844, 69860, 69881,
      /* 30825 */ 41461, 69903, 51039, 37318, 69922, 62705, 62209, 69940, 52743, 51107, 45640, 57591, 40471, 72643, 69961,
      /* 30840 */ 69994, 72644, 48835, 70019, 70047, 70072, 69679, 41542, 41542, 70100, 64902, 48943, 63562, 65498, 65498,
      /* 30855 */ 70134, 59800, 68060, 61822, 41461, 41461, 70150, 47863, 72356, 45780, 37318, 73436, 47091, 37318, 37318,
      /* 30870 */ 70166, 72704, 72644, 70194, 70221, 70244, 47170, 73209, 73218, 70265, 66328, 41444, 70313, 65498, 70329,
      /* 30885 */ 70356, 70389, 60293, 70422, 70441, 54423, 70477, 47863, 50635, 37318, 50706, 66496, 53384, 69533, 46401,
      /* 30900 */ 70511, 72644, 72644, 70544, 70560, 70789, 41542, 70593, 70626, 69047, 65498, 52486, 70661, 69887, 41461,
      /* 30915 */ 70487, 37318, 41199, 59126, 70706, 37318, 70726, 70746, 56994, 70780, 70823, 72308, 70850, 70870, 65601,
      /* 30930 */ 70904, 70925, 51697, 70495, 37450, 37318, 70960, 70979, 71002, 71021, 63456, 46437, 71047, 71074, 71095,
      /* 30945 */ 49624, 59493, 71132, 71156, 71181, 41086, 71197, 69608, 71230, 71263, 71294, 71313, 57200, 49498, 72946,
      /* 30960 */ 72644, 50030, 54383, 59799, 54339, 61620, 60922, 73660, 47450, 46828, 73161, 59759, 65052, 64909, 59331,
      /* 30975 */ 55194, 71329, 71374, 71410, 71439, 71455, 66985, 70676, 53268, 62159, 62339, 66862, 71486, 71502, 41909,
      /* 30990 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31005 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31020 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31035 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31050 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31065 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31080 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31095 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31110 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31125 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31140 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31155 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31170 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31185 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31200 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31215 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31230 */ 37318, 37318, 45302, 37318, 37318, 37318, 37318, 71540, 37318, 37318, 62697, 37318, 37318, 67919, 71622,
      /* 31245 */ 71638, 71652, 71668, 71697, 71681, 71711, 65689, 37318, 37318, 41289, 71727, 43243, 37318, 54635, 37318,
      /* 31260 */ 47100, 37318, 37318, 37318, 44404, 60624, 71747, 71775, 71820, 71855, 71891, 71918, 50345, 37318, 37318,
      /* 31275 */ 68839, 37318, 37318, 64312, 71934, 37318, 37318, 37318, 63901, 73164, 71973, 72644, 72644, 67498, 71994,
      /* 31290 */ 41542, 41542, 41542, 72010, 61470, 65498, 65498, 49441, 57854, 72045, 41461, 41461, 72052, 56235, 72068,
      /* 31305 */ 37318, 72101, 73266, 37318, 37318, 37318, 72130, 72165, 37318, 45286, 73164, 72644, 72186, 72203, 52036,
      /* 31320 */ 66700, 41363, 41543, 41542, 72253, 47431, 72288, 65493, 56731, 65499, 62067, 70610, 72324, 46825, 73981,
      /* 31335 */ 63597, 47312, 56493, 72372, 47041, 37318, 38557, 37318, 72400, 37318, 37318, 37318, 52648, 37318, 37318,
      /* 31350 */ 72643, 69558, 72644, 72644, 72644, 72645, 72419, 58149, 41542, 41542, 41542, 41542, 61134, 64696, 65498,
      /* 31365 */ 65498, 65498, 65498, 59800, 57573, 41461, 41461, 41461, 41461, 47863, 56406, 37318, 67179, 37318, 37318,
      /* 31380 */ 37318, 37318, 60902, 62813, 72644, 72644, 72644, 72644, 42340, 41542, 41542, 41542, 41542, 41444, 47816,
      /* 31395 */ 65498, 65498, 65498, 65498, 64261, 41461, 41461, 41461, 41461, 47863, 54766, 37318, 37318, 46970, 37318,
      /* 31410 */ 37318, 39394, 72444, 72644, 72644, 67855, 72462, 41542, 57537, 51591, 72495, 65498, 65498, 72517, 72553,
      /* 31425 */ 41461, 41461, 72576, 37318, 72600, 37318, 37318, 37318, 72644, 72644, 60920, 41542, 41542, 41542, 65498,
      /* 31440 */ 65498, 65498, 63673, 41461, 41461, 56936, 37318, 37318, 37318, 73163, 72644, 72644, 50031, 41542, 73662,
      /* 31455 */ 65498, 65498, 59802, 41461, 41462, 56939, 61615, 37318, 65757, 60923, 69654, 73664, 69041, 59801, 72620,
      /* 31470 */ 49498, 72946, 72644, 50030, 54383, 59799, 54339, 61620, 60922, 73660, 47450, 46828, 73161, 59759, 73663,
      /* 31485 */ 59797, 47605, 72639, 72661, 49423, 56501, 60496, 73658, 47451, 47606, 53268, 68368, 54485, 72691, 41867,
      /* 31500 */ 41898, 41909, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31515 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31530 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31545 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31560 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31575 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31590 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31605 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31620 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31635 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31650 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31665 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31680 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31695 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31710 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31725 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31740 */ 37318, 37318, 37318, 37318, 45302, 37318, 37318, 37318, 37318, 42479, 51143, 66186, 50148, 37318, 40519,
      /* 31755 */ 67015, 72720, 37318, 37318, 72736, 72765, 72749, 72779, 65689, 37318, 37318, 41289, 37087, 37318, 37318,
      /* 31770 */ 37318, 37318, 37318, 37318, 37318, 37318, 44404, 72795, 49944, 41369, 72816, 50989, 62003, 72217, 37318,
      /* 31785 */ 49091, 63043, 68839, 37318, 37318, 37318, 37318, 37318, 52920, 37318, 37318, 73164, 47899, 72644, 73587,
      /* 31800 */ 72644, 45386, 72834, 41542, 56677, 52709, 56433, 65498, 65498, 72024, 57854, 55980, 41461, 64944, 41461,
      /* 31815 */ 60376, 37318, 37318, 37318, 37318, 37318, 55361, 37318, 37318, 37318, 53853, 37318, 73164, 72644, 72644,
      /* 31830 */ 72868, 72644, 72644, 41363, 41542, 41542, 72887, 41542, 41542, 65493, 65498, 65498, 72920, 65498, 65498,
      /* 31845 */ 46825, 41461, 56253, 41461, 41461, 41461, 47041, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 31860 */ 37318, 37318, 72643, 72644, 72644, 72644, 72644, 72645, 38772, 41542, 41542, 41542, 41542, 41542, 45363,
      /* 31875 */ 65498, 65498, 65498, 65498, 65498, 59800, 41461, 41461, 41461, 41461, 41461, 47863, 54854, 37318, 37318,
      /* 31890 */ 37318, 37318, 37318, 37318, 37318, 72642, 72644, 72644, 72644, 72644, 38767, 41542, 41542, 41542, 41542,
      /* 31905 */ 41444, 65497, 65498, 65498, 65498, 65498, 59803, 41461, 41461, 41461, 41461, 47863, 54854, 37318, 40788,
      /* 31920 */ 37318, 37318, 37318, 60498, 72644, 72644, 72644, 58547, 41542, 41542, 41542, 46770, 65498, 65498, 65498,
      /* 31935 */ 59798, 41461, 41461, 41461, 47288, 37318, 69080, 37318, 37318, 37318, 72644, 72644, 60920, 41542, 41542,
      /* 31950 */ 41542, 65498, 65498, 65498, 63673, 41461, 41461, 56936, 37318, 37318, 37318, 73163, 72644, 72644, 50031,
      /* 31965 */ 41542, 73662, 65498, 65498, 59802, 41461, 41462, 56939, 72938, 37318, 72643, 60923, 41542, 73664, 65498,
      /* 31980 */ 59801, 41461, 49498, 72946, 72644, 50030, 54383, 59799, 54339, 61620, 60922, 73660, 47450, 46828, 73161,
      /* 31995 */ 59759, 73663, 59797, 47605, 60497, 50030, 47449, 46829, 60496, 73658, 47451, 47606, 53268, 62159, 62339,
      /* 32010 */ 66862, 41867, 41898, 41909, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32025 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32040 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32055 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32070 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32085 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32100 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32115 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32130 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32145 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32160 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32175 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32190 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32205 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32220 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32235 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32250 */ 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318, 37318, 37318, 37318, 50678, 37318, 37318, 72976,
      /* 32265 */ 37318, 72965, 72996, 73030, 73066, 73080, 73096, 73125, 73109, 73141, 65689, 37318, 37318, 41289, 37087,
      /* 32280 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 44404, 49521, 50028, 47181, 50958, 47282, 59296,
      /* 32295 */ 63932, 37318, 37318, 37318, 68839, 37318, 37318, 37318, 37318, 45204, 37318, 37318, 37318, 73164, 72644,
      /* 32310 */ 72644, 72644, 72644, 45386, 41542, 41542, 41542, 52709, 65498, 65498, 65498, 65498, 57854, 41461, 41461,
      /* 32325 */ 41461, 41461, 60376, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 73164,
      /* 32340 */ 72644, 72644, 72644, 72644, 72644, 41363, 41542, 41542, 41542, 41542, 41542, 65493, 65498, 65498, 65498,
      /* 32355 */ 65498, 65498, 46825, 41461, 41461, 41461, 41461, 41461, 47041, 37318, 37318, 37318, 37318, 37318, 48411,
      /* 32370 */ 37318, 37318, 37318, 37318, 73180, 72644, 72644, 72644, 72644, 72645, 73199, 41542, 41542, 41542, 41542,
      /* 32385 */ 41542, 56282, 65498, 65498, 65498, 65498, 65498, 56756, 41461, 41461, 41461, 41461, 41461, 47863, 54854,
      /* 32400 */ 37318, 68223, 37318, 37318, 37318, 37318, 37318, 72642, 72644, 73234, 72644, 56857, 38767, 41542, 66304,
      /* 32415 */ 41542, 41542, 73255, 65497, 65498, 73289, 65498, 72501, 59803, 41461, 61976, 41461, 70425, 47863, 54854,
      /* 32430 */ 37318, 37318, 37318, 37318, 37318, 60498, 72644, 72644, 72644, 58547, 41542, 41542, 41542, 46770, 65498,
      /* 32445 */ 65498, 65498, 59798, 41461, 41461, 41461, 47288, 37318, 37318, 37318, 37318, 37318, 72644, 72644, 60920,
      /* 32460 */ 41542, 41542, 41542, 65498, 65498, 65498, 63673, 41461, 41461, 56936, 37318, 37318, 37318, 73163, 72644,
      /* 32475 */ 72644, 50031, 41542, 73662, 65498, 65498, 59802, 41461, 41462, 56939, 61615, 37318, 72643, 60923, 41542,
      /* 32490 */ 73664, 65498, 59801, 41461, 49498, 72946, 72644, 50030, 54383, 59799, 54339, 61620, 60922, 73660, 47450,
      /* 32505 */ 46828, 73161, 59759, 73663, 59797, 47605, 60497, 50030, 47449, 46829, 60496, 73658, 47451, 47606, 53268,
      /* 32520 */ 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32535 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32550 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32565 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32580 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32595 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32610 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32625 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32640 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32655 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32670 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32685 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32700 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32715 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32730 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32745 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32760 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45555, 37318, 37318, 37318, 37318, 44953, 37318,
      /* 32775 */ 37318, 37318, 37318, 37318, 67919, 57964, 37318, 37318, 45323, 45350, 63443, 47000, 65689, 37318, 37318,
      /* 32790 */ 41289, 73310, 37318, 39135, 37318, 37318, 37318, 46656, 37318, 73333, 55714, 73368, 64110, 41369, 73389,
      /* 32805 */ 53053, 62003, 72217, 37318, 37318, 37318, 73407, 48428, 48554, 40049, 37318, 37318, 37318, 37318, 37318,
      /* 32820 */ 73164, 72644, 61072, 72644, 52030, 45386, 41542, 41809, 41542, 73452, 65498, 65498, 58580, 63617, 57854,
      /* 32835 */ 41461, 41461, 73487, 55972, 60376, 73504, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 32850 */ 37318, 73164, 72644, 72644, 72644, 72644, 72644, 41363, 41542, 41542, 41542, 41542, 41542, 65493, 65498,
      /* 32865 */ 65498, 65498, 65498, 65498, 46825, 41461, 41461, 41461, 41461, 41461, 47041, 37318, 37318, 37318, 37318,
      /* 32880 */ 37318, 37318, 62308, 37318, 37318, 37318, 72643, 72644, 52957, 72644, 72644, 74050, 38772, 41542, 54792,
      /* 32895 */ 41542, 41542, 41542, 48926, 65498, 65498, 73527, 65498, 65498, 59800, 41461, 41461, 73547, 41461, 41461,
      /* 32910 */ 47863, 54854, 73567, 37318, 37318, 37318, 37318, 37318, 37318, 72642, 73584, 72644, 72644, 72644, 38767,
      /* 32925 */ 72904, 41542, 41542, 41542, 41444, 65497, 73603, 65498, 65498, 65498, 59803, 70455, 41461, 41461, 41461,
      /* 32940 */ 47863, 54854, 37318, 37318, 37318, 37318, 37318, 60498, 72644, 72644, 72644, 58547, 41542, 41542, 41542,
      /* 32955 */ 46770, 65498, 65498, 65498, 59798, 41461, 41461, 41461, 47288, 37318, 37318, 37318, 37318, 37318, 72644,
      /* 32970 */ 72644, 60920, 41542, 41542, 41542, 65498, 65498, 65498, 63673, 41461, 41461, 56936, 37318, 37318, 37318,
      /* 32985 */ 73163, 72644, 72644, 50031, 41542, 73662, 65498, 65498, 59802, 41461, 41462, 56939, 61615, 37318, 72643,
      /* 33000 */ 60923, 41542, 73664, 65498, 59801, 41461, 49498, 72946, 72644, 50030, 54383, 59799, 54339, 61620, 60922,
      /* 33015 */ 73660, 47450, 46828, 73161, 59759, 73663, 59797, 47605, 60497, 50030, 47449, 46829, 60496, 73658, 47451,
      /* 33030 */ 47606, 53268, 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33045 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33060 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33075 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33090 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33105 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33120 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33135 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33150 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33165 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33180 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33195 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33210 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33225 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33240 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33255 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33270 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318, 37318, 37318, 37318,
      /* 33285 */ 44953, 37318, 37318, 37318, 37318, 37318, 67919, 57964, 37318, 37318, 45323, 45350, 63443, 47000, 73622,
      /* 33300 */ 37318, 37318, 41289, 37087, 37318, 42196, 37318, 37318, 37318, 37318, 37318, 37318, 40000, 72644, 73656,
      /* 33315 */ 60650, 55287, 47282, 61984, 73680, 37318, 42131, 37318, 68839, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33330 */ 37318, 41786, 73164, 72644, 72644, 72644, 69600, 45386, 41542, 41542, 41542, 73717, 65498, 65498, 65498,
      /* 33345 */ 56205, 57854, 41461, 41461, 41461, 72560, 60376, 37318, 59949, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33360 */ 37318, 73753, 37318, 73164, 52385, 72644, 72644, 73772, 72644, 41363, 69737, 41542, 41542, 73791, 41542,
      /* 33375 */ 65493, 49792, 65498, 65498, 73825, 65498, 46825, 50572, 41461, 66682, 41461, 41461, 47041, 37318, 46080,
      /* 33390 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 72643, 41389, 72644, 72644, 72644, 72645, 73844,
      /* 33405 */ 41542, 73877, 41542, 41542, 41542, 51420, 65498, 73910, 65498, 65498, 65498, 49986, 41461, 73935, 41461,
      /* 33420 */ 41461, 41461, 47863, 54854, 37318, 37318, 37318, 37318, 37318, 61662, 37318, 72642, 72644, 47364, 72644,
      /* 33435 */ 72644, 38767, 41542, 41542, 70798, 41542, 41444, 65497, 65498, 65498, 73958, 65498, 59803, 41461, 41461,
      /* 33450 */ 73977, 41461, 47863, 54854, 37318, 37318, 42105, 37318, 37318, 60498, 72644, 72644, 72644, 58547, 41542,
      /* 33465 */ 41542, 41542, 46770, 65498, 65498, 65498, 59798, 41461, 41461, 41461, 47288, 73997, 37318, 37318, 40961,
      /* 33480 */ 37318, 60952, 72644, 60920, 74016, 41542, 41542, 57892, 65498, 65498, 71387, 41461, 41461, 56936, 37318,
      /* 33495 */ 60826, 37318, 73163, 72644, 74049, 50031, 68296, 73662, 65498, 74066, 59802, 53130, 41462, 56939, 61615,
      /* 33510 */ 37318, 72643, 60923, 41542, 73664, 65498, 59801, 41461, 49498, 72946, 72644, 50030, 54383, 59799, 54339,
      /* 33525 */ 61620, 60922, 73660, 47450, 46828, 73161, 59759, 73663, 59797, 47605, 60497, 50030, 47449, 46829, 60496,
      /* 33540 */ 73658, 47451, 47606, 53268, 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318, 37318, 37318, 37318,
      /* 33555 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33570 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33585 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33600 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33615 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33630 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33645 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33660 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33675 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33690 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33705 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33720 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33735 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33750 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33765 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33780 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 45302, 37318, 37318,
      /* 33795 */ 37318, 37318, 44953, 37318, 37318, 37318, 37318, 37318, 67919, 61870, 37318, 37318, 45323, 45350, 63443,
      /* 33810 */ 47000, 65689, 37318, 37318, 41289, 37087, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 44404,
      /* 33825 */ 72644, 50028, 41369, 65498, 47282, 62003, 72217, 37318, 37318, 37318, 68839, 37318, 37318, 37318, 37318,
      /* 33840 */ 37318, 37318, 37318, 37318, 73164, 72644, 72644, 72644, 72644, 45386, 41542, 41542, 41542, 52709, 65498,
      /* 33855 */ 65498, 65498, 65498, 57854, 41461, 41461, 41461, 41461, 60376, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 33870 */ 37318, 37318, 37318, 37318, 37318, 73164, 72644, 72644, 72644, 72644, 72644, 41363, 41542, 41542, 41542,
      /* 33885 */ 41542, 41542, 65493, 65498, 65498, 65498, 65498, 65498, 46825, 41461, 41461, 41461, 41461, 41461, 47041,
      /* 33900 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 72643, 72644, 72644, 72644, 72644,
      /* 33915 */ 72645, 38772, 41542, 41542, 41542, 41542, 41542, 45363, 65498, 65498, 65498, 65498, 65498, 59800, 41461,
      /* 33930 */ 41461, 41461, 41461, 41461, 47863, 54854, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 72642, 72644,
      /* 33945 */ 72644, 72644, 72644, 38767, 41542, 41542, 41542, 41542, 41444, 65497, 65498, 65498, 65498, 65498, 59803,
      /* 33960 */ 41461, 41461, 41461, 41461, 47863, 54854, 37318, 37318, 37318, 37318, 37318, 60498, 72644, 72644, 72644,
      /* 33975 */ 58547, 41542, 41542, 41542, 46770, 65498, 65498, 65498, 59798, 41461, 41461, 41461, 47288, 37318, 37318,
      /* 33990 */ 37318, 37318, 37318, 72644, 72644, 60920, 41542, 41542, 41542, 65498, 65498, 65498, 63673, 41461, 41461,
      /* 34005 */ 56936, 37318, 37318, 37318, 73163, 72644, 72644, 50031, 41542, 73662, 65498, 65498, 59802, 41461, 41462,
      /* 34020 */ 56939, 61615, 37318, 72643, 60923, 41542, 73664, 65498, 59801, 41461, 49498, 72946, 72644, 50030, 54383,
      /* 34035 */ 59799, 54339, 61620, 60922, 73660, 47450, 46828, 73161, 59759, 73663, 59797, 47605, 60497, 50030, 47449,
      /* 34050 */ 46829, 60496, 73658, 47451, 47606, 53268, 62159, 62339, 66862, 41867, 41898, 41909, 37318, 37318, 37318,
      /* 34065 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34080 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34095 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34110 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34125 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34140 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34155 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34170 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34185 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34200 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34215 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34230 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34245 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34260 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34275 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34290 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 39708,
      /* 34305 */ 37318, 37318, 37318, 37318, 64589, 74088, 74086, 40559, 74115, 74104, 74140, 74169, 37318, 74124, 74153,
      /* 34320 */ 74190, 74194, 74210, 36991, 37318, 37318, 41289, 37087, 37318, 37318, 74245, 37318, 37318, 37318, 37318,
      /* 34335 */ 37318, 65657, 40192, 74266, 55734, 37318, 53472, 40192, 38527, 37031, 44584, 37054, 37076, 37318, 37318,
      /* 34350 */ 74250, 37318, 69924, 37107, 37136, 37152, 65815, 69390, 37247, 37265, 53482, 72228, 37116, 37202, 37162,
      /* 34365 */ 74643, 37186, 37120, 37206, 37166, 74726, 69388, 37245, 37263, 53480, 37281, 37318, 41092, 37317, 37318,
      /* 34380 */ 37318, 45006, 57380, 37335, 37318, 74671, 64449, 74683, 40193, 37351, 37378, 40192, 39199, 37741, 69458,
      /* 34395 */ 41098, 41041, 37318, 46044, 37882, 69459, 41099, 41042, 37318, 46045, 37371, 74376, 37355, 37382, 40192,
      /* 34410 */ 39202, 38523, 74469, 50180, 37398, 37414, 37436, 50351, 37475, 37318, 58014, 37496, 39340, 37628, 37651,
      /* 34425 */ 37674, 55492, 37717, 38230, 37546, 37566, 58028, 41986, 37605, 37523, 37542, 37562, 58024, 37582, 37601,
      /* 34440 */ 39304, 37621, 37644, 37667, 37690, 37709, 37733, 74273, 57770, 38317, 37757, 37779, 37822, 46961, 37943,
      /* 34455 */ 37979, 37995, 38150, 38170, 38011, 38093, 38038, 38061, 37792, 39434, 38084, 38100, 38045, 38068, 37799,
      /* 34470 */ 39441, 38116, 37992, 38147, 38166, 38186, 38022, 38246, 38263, 37318, 38304, 37318, 38354, 38370, 45231,
      /* 34485 */ 38397, 38413, 37861, 37459, 38432, 38451, 68861, 37456, 38429, 38448, 38467, 45226, 38483, 38407, 38516,
      /* 34500 */ 57783, 51848, 38545, 38580, 73050, 38677, 38610, 38626, 49222, 38643, 38660, 49221, 38642, 38659, 38676,
      /* 34515 */ 38693, 38624, 38714, 38739, 38791, 38841, 38876, 38942, 38892, 60443, 38908, 60433, 60449, 38914, 38930,
      /* 34530 */ 38946, 38962, 38978, 39013, 39048, 39078, 39105, 39169, 39156, 39172, 39188, 39089, 39218, 39249, 55484,
      /* 34545 */ 39265, 39291, 55476, 39311, 39327, 37693, 37318, 65659, 38698, 39356, 39410, 37835, 37848, 39457, 45051,
      /* 34560 */ 38498, 38500, 45058, 39494, 39520, 39559, 39504, 39575, 59063, 39606, 39616, 39632, 39681, 39692, 37318,
      /* 34575 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34590 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34605 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34620 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34635 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34650 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34665 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34680 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34695 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34710 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34725 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34740 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34755 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34770 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34785 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34800 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 34815 */ 37318, 39708, 37318, 37318, 37318, 37318, 48276, 37318, 37318, 53226, 37318, 37318, 67919, 57964, 74289,
      /* 34830 */ 74334, 37318, 37318, 74319, 74303, 36991, 37318, 37318, 41289, 37087, 37318, 37318, 37010, 37318, 37318,
      /* 34845 */ 37318, 74350, 37318, 53463, 40192, 38525, 37318, 37318, 74370, 40192, 38527, 37031, 44584, 37054, 37076,
      /* 34860 */ 37318, 37318, 74250, 37318, 69924, 37107, 37136, 37152, 65815, 69390, 37247, 37265, 53482, 37182, 37116,
      /* 34875 */ 37202, 37162, 37222, 37186, 37120, 37206, 37166, 74726, 69388, 37245, 37263, 53480, 37281, 37318, 41092,
      /* 34890 */ 37317, 37318, 37318, 45006, 57380, 37335, 37318, 74671, 64449, 74683, 40193, 37351, 37378, 40192, 39199,
      /* 34905 */ 37741, 69458, 41098, 41041, 37318, 46044, 37882, 69459, 41099, 41042, 37318, 46045, 37371, 74376, 37355,
      /* 34920 */ 37382, 40192, 39202, 38523, 74469, 50180, 37398, 37414, 37436, 50351, 37475, 37318, 58014, 37496, 39340,
      /* 34935 */ 37628, 37651, 37674, 55492, 37717, 38230, 37546, 37566, 58028, 41986, 37605, 37523, 37542, 37562, 58024,
      /* 34950 */ 37582, 37601, 39304, 37621, 37644, 37667, 37690, 37709, 37733, 74273, 57770, 38317, 37757, 37779, 37822,
      /* 34965 */ 46961, 37943, 37979, 37995, 38150, 38170, 38011, 38093, 38038, 38061, 37792, 39434, 38084, 38100, 38045,
      /* 34980 */ 38068, 37799, 39441, 38116, 37992, 38147, 38166, 38186, 38022, 38246, 38263, 37318, 38304, 37318, 38354,
      /* 34995 */ 38370, 45231, 38397, 38413, 37861, 37459, 38432, 38451, 68861, 37456, 38429, 38448, 38467, 45226, 38483,
      /* 35010 */ 38407, 38516, 57783, 51848, 38545, 38580, 73050, 38677, 38610, 38626, 49222, 38643, 38660, 49221, 38642,
      /* 35025 */ 38659, 38676, 38693, 38624, 38714, 38739, 38791, 38841, 38876, 38942, 38892, 60443, 38908, 60433, 60449,
      /* 35040 */ 38914, 38930, 38946, 38962, 38978, 39013, 39048, 39078, 39105, 39169, 39156, 39172, 39188, 39089, 39218,
      /* 35055 */ 39249, 55484, 39265, 39291, 55476, 39311, 39327, 37693, 37318, 65659, 38698, 39356, 39410, 37835, 37848,
      /* 35070 */ 39457, 45051, 38498, 38500, 45058, 39494, 39520, 39559, 39504, 39575, 59063, 39606, 39616, 39632, 39681,
      /* 35085 */ 39692, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35100 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35115 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35130 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35145 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35160 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35175 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35190 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35205 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35220 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35235 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35250 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35265 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35280 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35295 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35310 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35325 */ 37318, 37318, 37318, 39708, 37318, 37318, 37318, 37318, 74174, 37318, 37318, 37318, 37318, 37318, 52120,
      /* 35340 */ 37296, 74401, 74403, 37318, 37318, 74392, 74419, 36991, 37318, 37318, 41289, 37087, 37318, 37318, 74464,
      /* 35355 */ 37318, 37318, 74485, 37318, 37318, 59413, 40192, 38525, 37318, 37318, 39335, 40192, 38527, 37031, 44584,
      /* 35370 */ 37054, 37076, 37318, 37318, 74250, 37318, 69924, 37107, 37136, 37152, 65815, 69390, 37247, 37265, 53482,
      /* 35385 */ 74504, 37116, 37202, 37162, 74529, 37186, 37120, 37206, 37166, 74726, 69388, 37245, 37263, 53480, 37281,
      /* 35400 */ 37318, 41092, 37317, 37318, 37318, 45006, 57380, 37335, 37318, 74671, 64449, 74683, 40193, 37351, 37378,
      /* 35415 */ 40192, 39199, 37741, 69458, 41098, 41041, 37318, 46044, 37882, 69459, 41099, 41042, 37318, 46045, 37371,
      /* 35430 */ 74376, 37355, 37382, 40192, 39202, 38523, 74469, 50180, 37398, 37414, 37436, 50351, 37475, 37318, 58014,
      /* 35445 */ 37496, 39340, 37628, 37651, 37674, 55492, 37717, 38230, 37546, 37566, 58028, 41986, 37605, 37523, 37542,
      /* 35460 */ 37562, 58024, 37582, 37601, 39304, 37621, 37644, 37667, 37690, 37709, 37733, 74273, 57770, 38317, 37757,
      /* 35475 */ 37779, 37822, 46961, 37943, 37979, 37995, 38150, 38170, 38011, 38093, 38038, 38061, 37792, 39434, 38084,
      /* 35490 */ 38100, 38045, 38068, 37799, 39441, 38116, 37992, 38147, 38166, 38186, 38022, 38246, 38263, 37318, 38304,
      /* 35505 */ 37318, 38354, 38370, 45231, 38397, 38413, 37861, 37459, 38432, 38451, 68861, 37456, 38429, 38448, 38467,
      /* 35520 */ 45226, 38483, 38407, 38516, 57783, 51848, 38545, 38580, 73050, 38677, 38610, 38626, 49222, 38643, 38660,
      /* 35535 */ 49221, 38642, 38659, 38676, 38693, 38624, 38714, 38739, 38791, 38841, 38876, 38942, 38892, 60443, 38908,
      /* 35550 */ 60433, 60449, 38914, 38930, 38946, 38962, 38978, 39013, 39048, 39078, 39105, 39169, 39156, 39172, 39188,
      /* 35565 */ 39089, 39218, 39249, 55484, 39265, 39291, 55476, 39311, 39327, 37693, 37318, 65659, 38698, 39356, 39410,
      /* 35580 */ 37835, 37848, 39457, 45051, 38498, 38500, 45058, 39494, 39520, 39559, 39504, 39575, 59063, 39606, 39616,
      /* 35595 */ 39632, 39681, 39692, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35610 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35625 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35640 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35655 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35670 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35685 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35700 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35715 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35730 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35745 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35760 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35775 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35790 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35805 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35820 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35835 */ 37318, 37318, 37318, 37318, 37318, 39708, 37318, 37318, 37318, 37318, 48276, 37318, 37318, 37318, 37318,
      /* 35850 */ 37318, 67919, 57964, 37318, 37318, 37318, 37318, 37318, 74564, 65689, 37318, 37318, 41289, 37087, 37318,
      /* 35865 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 44404, 72644, 50028, 41369, 65498, 47282, 62003, 69205,
      /* 35880 */ 37318, 37318, 37318, 68839, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 73164, 72644, 72644,
      /* 35895 */ 72644, 72644, 41324, 41542, 41542, 41542, 58552, 65498, 65498, 65498, 65498, 57854, 41461, 41461, 41461,
      /* 35910 */ 41461, 60376, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 73164, 72644,
      /* 35925 */ 72644, 72644, 72644, 72644, 41363, 41542, 41542, 41542, 41542, 41542, 65493, 65498, 65498, 65498, 65498,
      /* 35940 */ 65498, 46825, 41461, 41461, 41461, 41461, 41461, 47041, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 35955 */ 37318, 37318, 37318, 72643, 72644, 72644, 72644, 72644, 72645, 38772, 41542, 41542, 41542, 41542, 41542,
      /* 35970 */ 45363, 65498, 65498, 65498, 65498, 65498, 59800, 41461, 41461, 41461, 41461, 41461, 47863, 54854, 37318,
      /* 35985 */ 37318, 37318, 37318, 37318, 37318, 37318, 72642, 72644, 72644, 72644, 72644, 38767, 41542, 41542, 41542,
      /* 36000 */ 41542, 41444, 65497, 65498, 65498, 65498, 65498, 59803, 41461, 41461, 41461, 41461, 47863, 54854, 37318,
      /* 36015 */ 37318, 37318, 37318, 37318, 60498, 72644, 72644, 72644, 58547, 41542, 41542, 41542, 46770, 65498, 65498,
      /* 36030 */ 65498, 59798, 41461, 41461, 41461, 47288, 37318, 37318, 37318, 37318, 37318, 72644, 72644, 60920, 41542,
      /* 36045 */ 41542, 41542, 65498, 65498, 65498, 63673, 41461, 41461, 56936, 37318, 37318, 37318, 73163, 72644, 72644,
      /* 36060 */ 50031, 41542, 73662, 65498, 65498, 59802, 41461, 41462, 56939, 61615, 37318, 72643, 60923, 41542, 73664,
      /* 36075 */ 65498, 59801, 41461, 49498, 72946, 72644, 50030, 54383, 59799, 54339, 61620, 60922, 73660, 47450, 46828,
      /* 36090 */ 73161, 59759, 73663, 59797, 47605, 60497, 50030, 47449, 46829, 60496, 73658, 47451, 47606, 53268, 62159,
      /* 36105 */ 62339, 66862, 41867, 41898, 41909, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36120 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36135 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36150 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36165 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36180 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36195 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36210 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36225 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36240 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36255 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36270 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36285 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36300 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36315 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36330 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36345 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36360 */ 65960, 37318, 37318, 37318, 37318, 74599, 74601, 37318, 37318, 70178, 74617, 37014, 37318, 37318, 37318,
      /* 36375 */ 37318, 37318, 37318, 37010, 37318, 37318, 37318, 37318, 37318, 65657, 40192, 38525, 37318, 37318, 39335,
      /* 36390 */ 40192, 38527, 37031, 44584, 37054, 74641, 37318, 37318, 74250, 37318, 69924, 37107, 37136, 37152, 65815,
      /* 36405 */ 69390, 37247, 37265, 53482, 72228, 37116, 37202, 37162, 74643, 37186, 37120, 37206, 37166, 74726, 69388,
      /* 36420 */ 37245, 37263, 53480, 37281, 37318, 41092, 37317, 37318, 37318, 45006, 57380, 37335, 37318, 74671, 64449,
      /* 36435 */ 74683, 40193, 37351, 37378, 40192, 39199, 37741, 69458, 41098, 41041, 37318, 46044, 37882, 69459, 41099,
      /* 36450 */ 41042, 37318, 46045, 37371, 74376, 37355, 37382, 40192, 39202, 38523, 74469, 50180, 37398, 37414, 37436,
      /* 36465 */ 50351, 37475, 37318, 58014, 37496, 39340, 37628, 37651, 37674, 55492, 37717, 38230, 37546, 37566, 58028,
      /* 36480 */ 41986, 37605, 37523, 37542, 37562, 58024, 37582, 37601, 39304, 37621, 37644, 37667, 37690, 37709, 37733,
      /* 36495 */ 74273, 57770, 38317, 37757, 37779, 37822, 46961, 37943, 37979, 37995, 38150, 38170, 38011, 38093, 38038,
      /* 36510 */ 38061, 37792, 39434, 38084, 38100, 38045, 38068, 37799, 39441, 38116, 37992, 38147, 38166, 38186, 38022,
      /* 36525 */ 38246, 38263, 37318, 38304, 37318, 38354, 38370, 45231, 38397, 38413, 37861, 37459, 38432, 38451, 68861,
      /* 36540 */ 37456, 38429, 38448, 38467, 45226, 38483, 38407, 38516, 57783, 51848, 38545, 38580, 73050, 38677, 38610,
      /* 36555 */ 38626, 49222, 38643, 38660, 49221, 38642, 38659, 38676, 38693, 38624, 38714, 38739, 38791, 38841, 38876,
      /* 36570 */ 38942, 38892, 60443, 38908, 60433, 60449, 38914, 38930, 38946, 38962, 38978, 74659, 39048, 39078, 39105,
      /* 36585 */ 39169, 39156, 39172, 39188, 39089, 39218, 46272, 55484, 39265, 39291, 55476, 39311, 74721, 37693, 37318,
      /* 36600 */ 65659, 38698, 39356, 39410, 37835, 37848, 39457, 45051, 38498, 38500, 45058, 39494, 39520, 39559, 39504,
      /* 36615 */ 39575, 59063, 39606, 39616, 39632, 39681, 39692, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36630 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36645 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36660 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36675 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36690 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36705 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36720 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36735 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36750 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36765 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36780 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36795 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36810 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36825 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36840 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318,
      /* 36855 */ 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 37318, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 180524,
      /* 36875 */ 180524, 180524, 180524, 0, 188717, 0, 188717, 180524, 188717, 188717, 188717, 188717, 188717, 188717,
      /* 36889 */ 188717, 188717, 188717, 188717, 188717, 188717, 188717, 188717, 188717, 188717, 188717, 188717, 180524,
      /* 36902 */ 180524, 188717, 188717, 188717, 188717, 188717, 188717, 188717, 188717, 188717, 188717, 188717, 188717,
      /* 36915 */ 368, 188717, 180524, 188717, 188717, 188717, 188717, 188717, 131072, 188717, 188717, 188717, 188717,
      /* 36928 */ 188717, 188717, 188717, 188717, 188717, 188717, 188717, 139264, 147456, 188717, 188717, 188717, 188717,
      /* 36941 */ 188717, 188717, 188717, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 180524, 188717, 302, 303, 0, 0, 307, 0, 0,
      /* 36962 */ 0, 307, 0, 0, 0, 4931584, 0, 0, 0, 0, 0, 0, 2367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1854, 0, 0, 0, 0, 0, 0,
      /* 36991 */ 4268032, 306, 307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 4268032, 0, 0, 0, 0, 0,
      /* 37020 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262144, 0, 0, 4857856, 4874240, 0, 0, 4923392, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 37047 */ 341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5840896, 5849088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 328, 0, 0, 375, 375,
      /* 37075 */ 405, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 368, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 37104 */ 450560, 0, 0, 0, 0, 4857856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5259264, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 37131 */ 5414912, 0, 5447680, 0, 5464064, 0, 5414912, 5447680, 0, 0, 5562368, 5636096, 5685248, 0, 5750784,
      /* 37146 */ 5873664, 0, 0, 0, 0, 5636096, 5873664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5873664, 0, 0, 0, 0, 0,
      /* 37173 */ 0, 0, 0, 0, 0, 0, 6275072, 0, 0, 0, 914, 0, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 37201 */ 0, 0, 5447680, 0, 5464064, 0, 5480448, 5562368, 0, 0, 0, 5636096, 0, 5685248, 0, 0, 5750784, 0, 0, 0, 0,
      /* 37222 */ 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 990, 0, 0, 0, 4841472, 0, 0, 0, 4898816, 0, 4358144,
      /* 37246 */ 4358144, 4358144, 4358144, 4358144, 4358144, 5414912, 4358144, 5447680, 4358144, 5464064, 4358144,
      /* 37257 */ 5480448, 5562368, 4358144, 4358144, 4358144, 5636096, 4358144, 5636096, 4358144, 5685248, 4358144,
      /* 37268 */ 4358144, 5750784, 4358144, 4358144, 4358144, 4358144, 4358144, 5873664, 4358144, 4358144, 4358144,
      /* 37279 */ 4358144, 4358144, 4358144, 4358144, 4923392, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 4923392, 0,
      /* 37292 */ 0, 0, 0, 4366336, 0, 0, 0, 0, 418, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4276224, 1258, 0, 0, 0, 5603328, 0,
      /* 37319 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 341, 0, 0, 5341184, 0, 5652480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 37349 */ 0, 4759552, 4358144, 4358144, 4358144, 4358144, 4358144, 5242880, 4358144, 4358144, 4358144, 4358144,
      /* 37361 */ 4358144, 4358144, 4358144, 5341184, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 5808128,
      /* 37374 */ 4358144, 4358144, 4358144, 4825088, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 37385 */ 4358144, 4358144, 4358144, 5627904, 5652480, 4358144, 5701632, 4358144, 4358144, 5808128, 4358144,
      /* 37396 */ 4358144, 4358144, 5668864, 0, 0, 5791744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6201344, 6242304, 6250496, 0, 0,
      /* 37417 */ 0, 0, 6422528, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 351, 0, 0, 0, 0, 0, 0, 5619712, 0, 0, 0, 0, 0, 0, 0,
      /* 37445 */ 5726208, 5758976, 0, 0, 5791744, 0, 0, 0, 0, 0, 3664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5111808, 0, 0, 0, 0,
      /* 37471 */ 0, 5283840, 0, 0, 0, 0, 0, 5816320, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2389, 0, 2391, 2392, 0,
      /* 37497 */ 0, 0, 0, 6062080, 6463488, 0, 5398528, 0, 0, 6479872, 0, 0, 0, 0, 0, 0, 0, 3459, 0, 0, 0, 3463, 0, 0, 0,
      /* 37522 */ 0, 0, 0, 6463488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0, 0, 0, 4931584, 4939776, 0, 0, 0, 0,
      /* 37550 */ 0, 0, 5054464, 0, 0, 0, 0, 0, 0, 0, 0, 5210112, 0, 0, 0, 5210112, 0, 0, 0, 0, 5292032, 0, 0, 0, 0,
      /* 37575 */ 5365760, 0, 0, 0, 5455872, 0, 0, 5816320, 0, 5857280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327, 401,
      /* 37600 */ 0, 6119424, 0, 6168576, 0, 0, 0, 0, 0, 6242304, 0, 6291456, 0, 6316032, 0, 0, 0, 0, 0, 0, 0, 4358144,
      /* 37622 */ 4358144, 4931584, 4939776, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5054464, 4358144,
      /* 37633 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5210112, 4358144, 4358144, 4358144,
      /* 37644 */ 4358144, 4358144, 4358144, 5210112, 4358144, 4358144, 4358144, 4358144, 5292032, 4358144, 4358144,
      /* 37655 */ 4358144, 4358144, 5365760, 4358144, 4358144, 4358144, 5455872, 4358144, 4358144, 4358144, 4358144,
      /* 37666 */ 4358144, 4358144, 5455872, 4358144, 4358144, 4358144, 4358144, 4358144, 5554176, 5570560, 5578752,
      /* 37677 */ 5619712, 5668864, 4358144, 4358144, 4358144, 5791744, 5816320, 4358144, 5857280, 4358144, 4358144,
      /* 37688 */ 4358144, 4358144, 5816320, 4358144, 5857280, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 37699 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 6119424, 4358144, 6168576,
      /* 37712 */ 4358144, 4358144, 4358144, 4358144, 4358144, 6242304, 4358144, 6291456, 4358144, 6316032, 4358144,
      /* 37723 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6463488, 0, 4358144, 4358144,
      /* 37735 */ 4358144, 4358144, 4358144, 4358144, 6463488, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0,
      /* 37750 */ 4825088, 0, 0, 0, 0, 0, 0, 0, 6184960, 5316608, 0, 0, 5644288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 646, 755,
      /* 37775 */ 756, 757, 0, 0, 6217728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5390336, 5308416, 5488640, 0, 0, 0, 0, 0, 0, 0,
      /* 37800 */ 0, 0, 5799936, 0, 0, 5881856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 351, 352, 353, 0, 0, 0, 0, 5070848, 5431296, 0,
      /* 37825 */ 6430720, 0, 0, 0, 0, 0, 0, 0, 0, 5160960, 0, 0, 0, 0, 0, 0, 6053888, 0, 0, 0, 0, 0, 5013504, 0, 0, 0, 0,
      /* 37852 */ 0, 0, 6053888, 0, 0, 0, 4358144, 4358144, 5013504, 4358144, 4358144, 4358144, 0, 0, 0, 0, 4841472, 0, 0,
      /* 37871 */ 0, 4898816, 0, 0, 0, 0, 0, 0, 1851, 0, 1853, 0, 0, 0, 0, 0, 0, 0, 0, 4825088, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 37899 */ 2786, 0, 0, 0, 0, 0, 0, 0, 0, 2809, 0, 0, 0, 0, 0, 0, 0, 0, 2834, 0, 0, 0, 0, 0, 0, 0, 0, 3154, 0, 0, 0,
      /* 37930 */ 0, 0, 0, 0, 0, 3167, 3168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6283264, 6332416, 0, 0, 0, 5881856, 0, 5382144, 0,
      /* 37955 */ 0, 0, 0, 0, 0, 0, 3665, 3666, 0, 0, 0, 0, 0, 0, 0, 665, 0, 644, 0, 0, 0, 0, 0, 0, 0, 6266880, 4784128,
      /* 37982 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4915200, 4358144, 4956160,
      /* 37993 */ 4972544, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5070848, 4358144, 4358144, 4358144,
      /* 38004 */ 4358144, 4358144, 4358144, 4358144, 5218304, 4358144, 5267456, 4358144, 4358144, 4358144, 6184960,
      /* 38015 */ 4358144, 4358144, 6283264, 4358144, 4358144, 6332416, 4358144, 4358144, 4358144, 6389760, 4358144,
      /* 38026 */ 4358144, 6430720, 6438912, 4358144, 4358144, 4358144, 6266880, 6488064, 0, 0, 0, 6266880, 0, 0, 4915200,
      /* 38041 */ 0, 4956160, 4972544, 0, 0, 0, 0, 0, 0, 5070848, 0, 0, 0, 0, 0, 0, 0, 5218304, 0, 5267456, 0, 0, 0, 0,
      /* 38065 */ 5218304, 0, 5267456, 0, 0, 5308416, 5316608, 0, 0, 0, 5431296, 0, 5488640, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 38086 */ 6332416, 0, 0, 0, 6389760, 0, 0, 6430720, 6438912, 0, 0, 0, 0, 0, 0, 4784128, 0, 0, 0, 4849664, 0, 0, 0,
      /* 38109 */ 0, 0, 4915200, 0, 4956160, 4972544, 0, 0, 0, 6430720, 6438912, 4784128, 4358144, 4358144, 4358144,
      /* 38124 */ 4849664, 4358144, 4358144, 4358144, 4358144, 4358144, 4915200, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 38141 */ 0, 0, 302, 0, 303, 306, 5218304, 4358144, 5267456, 4358144, 4358144, 5308416, 5316608, 4358144, 4358144,
      /* 38156 */ 4358144, 5431296, 4358144, 5488640, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 38167 */ 4358144, 4358144, 4358144, 4358144, 4358144, 5799936, 4358144, 4358144, 5881856, 4358144, 4358144,
      /* 38178 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6103040, 4358144, 4358144, 4358144,
      /* 38189 */ 6103040, 4358144, 4358144, 4358144, 6184960, 4358144, 4358144, 4358144, 6283264, 4358144, 4358144,
      /* 38200 */ 6332416, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368640, 0, 0, 0, 0, 0, 0, 2411, 0, 0, 0, 0, 0, 0,
      /* 38226 */ 0, 0, 0, 1256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4931584, 4939776, 6488064, 0, 0, 0, 0, 0, 0, 0,
      /* 38254 */ 0, 0, 0, 0, 0, 0, 0, 0, 357, 5660672, 5718016, 0, 5865472, 0, 0, 6037504, 0, 0, 6078464, 0, 0, 6340608,
      /* 38276 */ 0, 6455296, 0, 0, 0, 0, 420, 420, 420, 420, 597, 597, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
      /* 38298 */ 420, 420, 420, 0, 420, 0, 0, 0, 0, 5472256, 0, 0, 0, 6209536, 0, 0, 0, 0, 6176768, 0, 0, 0, 0, 0, 0,
      /* 38323 */ 6373376, 6389760, 0, 0, 6488064, 6103040, 0, 0, 0, 0, 0, 0, 1850, 0, 0, 0, 0, 0, 0, 0, 0, 0, 662, 0, 0,
      /* 38348 */ 0, 0, 0, 0, 0, 0, 0, 4898816, 0, 5709824, 0, 0, 0, 5283840, 0, 0, 0, 0, 5251072, 0, 6414336, 5832704, 0,
      /* 38371 */ 5955584, 0, 0, 4358144, 4358144, 4841472, 4358144, 4358144, 4358144, 4898816, 4358144, 4358144, 4358144,
      /* 38384 */ 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 303, 0, 0, 0, 4358144, 5472256, 5521408, 4358144, 4358144,
      /* 38402 */ 4358144, 5595136, 5709824, 5718016, 4358144, 5824512, 5865472, 4358144, 4358144, 5922816, 4358144,
      /* 38413 */ 4358144, 6021120, 4358144, 6037504, 4358144, 4358144, 6078464, 6111232, 4358144, 6176768, 6209536,
      /* 38424 */ 6234112, 4358144, 4358144, 4358144, 4358144, 5283840, 0, 0, 0, 0, 5472256, 5521408, 0, 0, 0, 0, 5595136,
      /* 38441 */ 5709824, 5718016, 0, 5824512, 5865472, 0, 0, 5865472, 0, 0, 5922816, 0, 0, 6021120, 0, 6037504, 0, 0,
      /* 38459 */ 6078464, 6111232, 0, 6176768, 6209536, 0, 6234112, 0, 0, 6234112, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144,
      /* 38478 */ 4841472, 4358144, 4358144, 4358144, 4898816, 4358144, 5283840, 4358144, 4358144, 4358144, 4358144,
      /* 38489 */ 5472256, 5521408, 4358144, 4358144, 4358144, 4358144, 5595136, 5709824, 5718016, 4358144, 4358144, 0, 0,
      /* 38502 */ 0, 0, 0, 5193728, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 6209536, 4358144, 6234112, 4358144, 4358144,
      /* 38521 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 38540 */ 0, 0, 0, 0, 573440, 0, 0, 5890048, 0, 0, 0, 6160384, 0, 5095424, 5349376, 0, 5275648, 0, 0, 0, 0, 0, 0,
      /* 38563 */ 2308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 344064, 0, 0, 0, 0, 4997120, 0, 0, 0, 0, 0, 0, 0,
      /* 38590 */ 0, 0, 0, 5947392, 0, 0, 0, 0, 0, 3675, 0, 0, 0, 0, 0, 0, 0, 0, 4012, 528, 5103616, 4358144, 4358144,
      /* 38613 */ 5201920, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 38624 */ 5890048, 4358144, 4358144, 4358144, 6029312, 4358144, 4358144, 4358144, 4358144, 6160384, 4358144,
      /* 38635 */ 4358144, 4358144, 4358144, 4358144, 4358144, 6406144, 0, 5103616, 0, 0, 5201920, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 38654 */ 0, 0, 0, 5890048, 0, 0, 0, 0, 6029312, 0, 0, 0, 0, 6160384, 0, 0, 0, 0, 0, 0, 0, 6406144, 6406144,
      /* 38677 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4997120, 4358144, 4358144,
      /* 38688 */ 5038080, 4358144, 4358144, 4358144, 5095424, 5095424, 5103616, 4358144, 4358144, 5201920, 4358144,
      /* 38699 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 38710 */ 4358144, 0, 5013504, 0, 4358144, 6406144, 4358144, 4358144, 4358144, 0, 0, 0, 4890624, 0, 0, 0, 0, 0, 0,
      /* 38729 */ 0, 0, 3209, 0, 0, 3212, 0, 0, 0, 0, 0, 0, 5898240, 5963776, 0, 0, 6193152, 0, 0, 5406720, 6397952,
      /* 38750 */ 5300224, 5234688, 5423104, 0, 0, 0, 0, 0, 3675, 0, 0, 0, 0, 0, 4009, 0, 4011, 528, 528, 0, 0, 0, 0, 0,
      /* 38774 */ 0, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58815,
      /* 38789 */ 57893, 57893, 0, 0, 5988352, 0, 0, 6135808, 6307840, 0, 5996544, 4800512, 0, 6356992, 0, 0, 0, 0, 0, 0,
      /* 38809 */ 2317, 2318, 0, 2320, 2321, 0, 0, 0, 0, 0, 0, 1207, 0, 1209, 0, 0, 368, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 38836 */ 710, 0, 0, 0, 0, 0, 0, 0, 0, 5496832, 0, 0, 0, 0, 0, 5611520, 0, 0, 0, 0, 0, 0, 0, 3673, 0, 0, 0, 0, 0,
      /* 38865 */ 0, 0, 0, 693, 0, 0, 0, 0, 0, 0, 368, 4947968, 5021696, 5529600, 0, 0, 5169152, 0, 0, 0, 4800512,
      /* 38886 */ 4808704, 4358144, 4358144, 4890624, 4358144, 4947968, 4358144, 4358144, 4358144, 5898240, 4358144,
      /* 38897 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6307840, 4358144, 4358144, 6356992, 6381568,
      /* 38908 */ 5185536, 0, 5234688, 5300224, 0, 0, 5406720, 5529600, 0, 0, 0, 0, 5898240, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 38929 */ 6307840, 0, 0, 6356992, 6381568, 6397952, 4800512, 4808704, 4358144, 4358144, 4890624, 4358144, 4947968,
      /* 38942 */ 4358144, 4358144, 4358144, 5046272, 4358144, 4358144, 4358144, 4358144, 5185536, 4358144, 5234688,
      /* 38953 */ 5300224, 4358144, 4358144, 5406720, 5529600, 4358144, 4358144, 4358144, 4358144, 5898240, 4358144,
      /* 38964 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6307840, 4358144, 4358144, 6356992,
      /* 38975 */ 6381568, 6397952, 5021696, 4358144, 4358144, 5021696, 0, 0, 0, 4980736, 0, 0, 0, 0, 0, 5373952, 5734400,
      /* 38992 */ 6045696, 0, 0, 0, 0, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 0, 421, 0,
      /* 39013 */ 6258688, 6447104, 0, 0, 6127616, 0, 6348800, 5906432, 0, 5537792, 3675, 4882432, 0, 0, 0, 0, 0, 0, 2329,
      /* 39032 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5939200, 0, 0, 5677056, 6365184, 4866048,
      /* 39058 */ 0, 6070272, 5545984, 5152768, 0, 0, 0, 0, 0, 3675, 0, 0, 0, 0, 4008, 0, 4010, 0, 528, 4013, 6144000,
      /* 39079 */ 4358144, 4866048, 4882432, 4358144, 4980736, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 39090 */ 4358144, 4358144, 5324800, 5373952, 5537792, 5545984, 5586944, 5734400, 5971968, 4358144, 6045696,
      /* 39101 */ 4358144, 6070272, 4358144, 4358144, 5537792, 5545984, 5734400, 5971968, 4358144, 6045696, 4358144,
      /* 39112 */ 6070272, 4358144, 4358144, 4358144, 6348800, 0, 4866048, 4882432, 0, 0, 0, 0, 644, 0, 0, 0, 803, 0, 808,
      /* 39131 */ 0, 794, 0, 820, 0, 0, 0, 0, 735, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 450560, 450560, 0, 0, 450560, 0,
      /* 39157 */ 6045696, 0, 6070272, 0, 0, 0, 0, 6348800, 0, 4866048, 4882432, 0, 4980736, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 39178 */ 5324800, 5373952, 5537792, 5545984, 5586944, 5734400, 5971968, 0, 6045696, 0, 6070272, 0, 0, 0, 0,
      /* 39193 */ 6348800, 4358144, 4866048, 4882432, 4358144, 4980736, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 39204 */ 4358144, 4358144, 4358144, 6299648, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 39215 */ 4358144, 4358144, 4358144, 4358144, 4358144, 6348800, 4358144, 6144000, 0, 6144000, 0, 4988928, 5005312,
      /* 39228 */ 0, 0, 0, 0, 5775360, 0, 0, 0, 0, 749, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 759, 0, 0, 3675, 0, 0, 0, 0, 0, 0,
      /* 39258 */ 5693440, 0, 6496256, 5144576, 5136384, 0, 5914624, 4358144, 6324224, 0, 0, 5005312, 0, 0, 0, 5120000,
      /* 39274 */ 5136384, 0, 0, 0, 0, 0, 0, 0, 1252, 0, 0, 0, 748, 1259, 0, 0, 0, 0, 0, 0, 0, 6324224, 0, 0, 5005312, 0,
      /* 39300 */ 0, 0, 5120000, 5136384, 0, 0, 0, 0, 0, 0, 6463488, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 39317 */ 4358144, 4358144, 4358144, 4358144, 6324224, 5914624, 5914624, 0, 0, 0, 0, 0, 5513216, 5783552, 0, 3675,
      /* 39333 */ 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 39350 */ 4358144, 4931584, 4939776, 4358144, 4358144, 4358144, 0, 6053888, 0, 0, 0, 0, 0, 0, 0, 0, 6012928,
      /* 39367 */ 4358144, 4358144, 5013504, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1153, 0, 0, 0, 0, 0, 3675,
      /* 39390 */ 0, 0, 4006, 4007, 0, 0, 0, 0, 528, 528, 528, 528, 3220, 528, 528, 528, 528, 528, 528, 3227, 4358144,
      /* 39411 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6053888, 4358144, 4358144, 0, 0, 5013504, 0, 0, 0,
      /* 39426 */ 0, 0, 312, 414, 0, 0, 139264, 147456, 0, 0, 0, 0, 0, 0, 0, 6103040, 0, 0, 0, 6184960, 0, 0, 0, 6283264,
      /* 39450 */ 0, 0, 6332416, 0, 0, 0, 6389760, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6053888, 4358144,
      /* 39465 */ 4358144, 4358144, 0, 0, 0, 0, 5193728, 0, 0, 0, 0, 761, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 528, 528, 528,
      /* 39490 */ 3700, 528, 528, 528, 5742592, 0, 0, 0, 0, 0, 4358144, 4907008, 4358144, 5079040, 4358144, 5226496,
      /* 39506 */ 4358144, 5742592, 4358144, 4358144, 4358144, 6094848, 4358144, 5062656, 0, 0, 0, 0, 0, 4358144, 4358144,
      /* 39521 */ 6094848, 0, 4907008, 0, 5079040, 0, 5226496, 0, 5742592, 0, 0, 0, 6094848, 0, 0, 0, 0, 0, 3675, 0, 4005,
      /* 39542 */ 0, 0, 0, 0, 0, 0, 528, 528, 528, 528, 4155, 528, 528, 528, 528, 528, 528, 4907008, 0, 5079040, 0,
      /* 39563 */ 5226496, 0, 5742592, 0, 0, 0, 6094848, 0, 4358144, 4907008, 4358144, 5079040, 5062656, 4358144, 4358144,
      /* 39578 */ 4358144, 4358144, 4358144, 0, 5062656, 0, 0, 0, 0, 0, 6225920, 0, 5062656, 4358144, 4358144, 4358144,
      /* 39594 */ 4358144, 4358144, 913, 5063569, 913, 913, 913, 913, 913, 6226833, 989, 5063645, 0, 0, 0, 4816896,
      /* 39610 */ 4358144, 4358144, 4358144, 4358144, 6086656, 4816896, 0, 0, 0, 0, 6086656, 4816896, 4358144, 4358144,
      /* 39624 */ 4358144, 4358144, 6086656, 0, 5087232, 0, 5931008, 4358144, 5332992, 5980160, 4358144, 0, 5332992,
      /* 39637 */ 5980160, 0, 0, 5332992, 5980160, 0, 4358144, 5332992, 5980160, 4358144, 0, 0, 0, 0, 787, 0, 0, 0, 0,
      /* 39656 */ 806, 0, 0, 0, 0, 0, 0, 0, 3166, 0, 0, 0, 0, 0, 0, 0, 0, 327, 0, 0, 0, 0, 0, 0, 0, 5439488, 5128192,
      /* 39683 */ 4358144, 5128192, 0, 5128192, 0, 5128192, 4358144, 0, 4358144, 0, 0, 4358144, 0, 4358144, 0, 0, 4358144,
      /* 39700 */ 6004736, 6004736, 6004736, 6004736, 6004736, 0, 0, 0, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 39723 */ 0, 339, 340, 0, 0, 221652, 221652, 221652, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468,
      /* 39743 */ 221652, 468, 221652, 221652, 221652, 468, 221652, 221652, 221652, 221652, 221652, 221652, 221652,
      /* 39756 */ 221652, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 0, 1162, 0, 0, 1164, 0, 0, 0, 0,
      /* 39782 */ 0, 0, 0, 0, 1311, 0, 0, 0, 0, 0, 1179, 0, 0, 0, 762, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 383, 0, 0,
      /* 39813 */ 0, 0, 1064, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 39828 */ 4358144, 4358144, 4358144, 4358144, 913, 913, 913, 4358144, 4358144, 1064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 39848 */ 0, 0, 0, 507, 514, 514, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 237568, 302, 0, 306, 237568, 0, 0,
      /* 39875 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 643, 0, 0, 4268032, 98304, 307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 39905 */ 661, 0, 0, 4210979, 24578, 3, 0, 0, 297, 0, 0, 0, 0, 297, 0, 0, 0, 0, 0, 0, 0, 3685, 0, 0, 0, 3688,
      /* 39931 */ 3689, 0, 0, 0, 0, 0, 245760, 245760, 245760, 0, 0, 0, 0, 139264, 147456, 245760, 245760, 0, 0, 245760,
      /* 39951 */ 0, 4210979, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 0, 1164, 1297, 0, 0, 0, 0, 0, 0,
      /* 39977 */ 1304, 0, 0, 0, 0, 0, 2859, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2867, 368, 368, 0, 0, 0, 303104, 0, 0, 0, 0, 0, 0,
      /* 40006 */ 0, 0, 0, 0, 647, 0, 0, 0, 0, 528, 1158, 0, 4857856, 4874240, 0, 0, 4923392, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 40032 */ 379, 0, 0, 0, 0, 371, 0, 4358144, 4358144, 4358144, 4358144, 0, 1984, 0, 0, 0, 4825088, 0, 0, 0, 0, 0,
      /* 40054 */ 0, 0, 1253, 0, 0, 0, 0, 0, 0, 0, 0, 2399, 2400, 0, 0, 2402, 0, 0, 0, 0, 0, 262144, 262144, 262144, 0, 0,
      /* 40080 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3449, 0, 0, 0, 0, 0, 262144, 262144, 0, 262144, 0, 0, 0, 139264, 147456,
      /* 40105 */ 262144, 0, 0, 0, 0, 0, 0, 2344, 2345, 0, 0, 0, 0, 0, 0, 0, 0, 798, 0, 0, 0, 0, 0, 809, 0, 0, 0, 262144,
      /* 40133 */ 0, 262738, 262738, 262738, 262738, 262738, 262738, 262738, 262738, 262738, 262738, 262738, 262738,
      /* 40146 */ 262738, 0, 262738, 0, 0, 262738, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 0, 1177,
      /* 40170 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4086, 528, 528, 528, 528, 0, 270336, 0, 0, 0, 0, 4358144, 4358144,
      /* 40194 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 40205 */ 4358144, 4358144, 4358144, 5177344, 278528, 278528, 0, 0, 131072, 278528, 0, 0, 0, 0, 278528, 0, 0, 0,
      /* 40223 */ 0, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528,
      /* 40236 */ 278528, 278528, 0, 278528, 0, 0, 278528, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 302, 303, 0, 0, 0,
      /* 40259 */ 0, 1205, 1206, 0, 0, 0, 0, 0, 368, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 712, 0, 0, 0, 0, 1, 24578, 3,
      /* 40288 */ 0, 0, 4366336, 0, 0, 0, 0, 0, 302, 638, 0, 0, 0, 0, 1218, 0, 0, 0, 0, 1223, 0, 0, 0, 0, 0, 0, 0, 1752,
      /* 40316 */ 0, 0, 0, 1755, 0, 0, 1758, 0, 4268032, 306, 641, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 662, 0, 0, 528,
      /* 40344 */ 0, 1430, 0, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0, 0, 0, 0, 0, 0, 3686, 0, 0, 0, 0, 0, 0, 0, 0, 3826, 0,
      /* 40372 */ 3675, 0, 0, 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1525, 0, 0, 0, 0, 0, 3675, 4004, 0, 0,
      /* 40401 */ 0, 0, 0, 0, 0, 528, 528, 4209, 528, 4210, 528, 528, 528, 528, 528, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 40427 */ 0, 0, 0, 286720, 303, 0, 307, 286720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 663, 0, 792, 0, 307, 0, 0,
      /* 40455 */ 0, 0, 0, 0, 307, 139264, 287139, 0, 0, 0, 307, 0, 0, 0, 0, 1234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2414,
      /* 40483 */ 0, 0, 0, 0, 0, 307, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 302, 66175, 0, 0, 0, 0, 1250, 0, 0, 0,
      /* 40510 */ 1255, 0, 0, 0, 0, 0, 0, 0, 661, 0, 0, 0, 0, 0, 0, 0, 0, 378, 0, 363, 0, 0, 0, 0, 0, 4268032, 306, 98946,
      /* 40538 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 728, 0, 0, 0, 0, 122880, 0, 4268032, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 40568 */ 0, 0, 0, 2310144, 0, 0, 0, 0, 307, 4857856, 4874240, 0, 0, 4923392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 528, 528,
      /* 40593 */ 3699, 528, 528, 528, 528, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 304, 0, 304, 0, 304, 304,
      /* 40619 */ 304, 295216, 304, 304, 304, 295216, 295216, 304, 295216, 304, 304, 131072, 304, 304, 304, 304, 304,
      /* 40636 */ 295216, 304, 304, 304, 304, 295216, 304, 304, 304, 304, 295286, 295216, 295216, 295216, 295216, 295216,
      /* 40652 */ 295216, 304, 304, 304, 304, 304, 0, 0, 304, 304, 295216, 304, 304, 304, 304, 304, 304, 304, 304, 304,
      /* 40672 */ 304, 304, 304, 369, 304, 0, 295216, 304, 295286, 295216, 295216, 295216, 304, 304, 304, 295286, 139264,
      /* 40689 */ 147456, 295216, 295216, 304, 304, 295216, 295216, 295216, 304, 304, 304, 304, 304, 304, 304, 304, 304,
      /* 40706 */ 304, 304, 304, 304, 304, 304, 304, 295216, 295286, 295286, 295286, 295286, 295286, 295286, 295286,
      /* 40721 */ 295286, 295286, 295286, 295286, 295286, 295286, 295216, 295216, 295216, 295216, 295216, 304, 304, 304,
      /* 40735 */ 295216, 304, 304, 304, 304, 304, 304, 304, 295216, 374, 304, 304, 304, 304, 304, 304, 304, 295216, 304,
      /* 40754 */ 295216, 295216, 295216, 295216, 295216, 295216, 295216, 295216, 295286, 295286, 295286, 295286, 295286,
      /* 40767 */ 295286, 295216, 295216, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 0, 1267, 0, 0, 0,
      /* 40791 */ 0, 0, 0, 0, 0, 0, 0, 0, 3170, 0, 0, 0, 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 4399804, 4399804, 0, 0,
      /* 40819 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4399804, 0, 0, 319488, 0, 0, 0, 0, 0, 0, 319488, 319488, 0, 0, 0,
      /* 40847 */ 0, 0, 0, 0, 3696, 0, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3849, 528, 528, 528, 319488,
      /* 40869 */ 0, 0, 0, 319488, 319488, 319488, 319488, 319488, 319488, 319488, 319488, 319488, 319488, 319488, 319488,
      /* 40884 */ 319488, 319488, 319488, 319488, 319488, 319488, 0, 24578, 3, 0, 0, 4366336, 253952, 0, 0, 0, 0, 302,
      /* 40902 */ 303, 0, 0, 0, 0, 1282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1241, 0, 0, 0, 0, 368, 425984, 0, 0, 0, 0, 0, 0,
      /* 40932 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 4399805, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 368, 0, 0, 0, 0, 0, 0, 2357,
      /* 40961 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3461, 0, 0, 0, 0, 0, 0, 0, 327680, 327680, 327680, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 40990 */ 0, 327680, 327680, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 302, 303, 0, 327680, 327680, 327680,
      /* 41010 */ 327680, 327680, 335872, 327680, 327680, 327680, 335872, 327680, 327680, 327680, 327680, 327680, 327680,
      /* 41023 */ 49723, 0, 0, 0, 0, 0, 0, 0, 49723, 49723, 0, 0, 0, 0, 0, 0, 0, 1270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5627904,
      /* 41051 */ 5652480, 0, 5701632, 0, 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49152, 990, 0, 0, 0, 0, 0,
      /* 41077 */ 3683, 0, 0, 0, 0, 0, 0, 0, 3690, 0, 0, 0, 0, 0, 3836, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5242880, 0, 0, 0, 0,
      /* 41107 */ 0, 0, 0, 5341184, 0, 0, 0, 0, 0, 344064, 344064, 344064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 344064, 344064,
      /* 41131 */ 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064,
      /* 41144 */ 344064, 344064, 344064, 344064, 344064, 344064, 344064, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 302,
      /* 41163 */ 303, 0, 352256, 352256, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 0, 1309, 0, 0, 0,
      /* 41188 */ 0, 0, 0, 0, 0, 1315, 0, 0, 0, 0, 371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3438, 0, 0, 3440, 0, 1, 292, 3,
      /* 41218 */ 0, 0, 0, 298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 528, 3698, 528, 528, 528, 3701, 528, 0, 360448, 360448, 360448,
      /* 41242 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448,
      /* 41261 */ 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448,
      /* 41274 */ 1, 0, 3, 155942, 155942, 296, 0, 636, 0, 0, 0, 302, 303, 0, 1230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 41302 */ 0, 0, 368, 528, 528, 1376, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2460,
      /* 41323 */ 528, 0, 914, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 41339 */ 57893, 57893, 60322, 57943, 57943, 57943, 57943, 59004, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 41354 */ 57943, 57943, 57943, 57943, 528, 57893, 3998, 0, 4000, 528, 528, 528, 528, 58773, 0, 57893, 57893,
      /* 41371 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 0, 57916, 57916, 57916, 57916, 57916, 528, 528,
      /* 41387 */ 528, 2437, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2446, 528, 2448, 0, 0, 0,
      /* 41408 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59856, 57893, 57893, 57893, 57893, 57893, 57893, 60873,
      /* 41423 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 61213, 57893, 57893, 57893, 57893, 61214,
      /* 41438 */ 61215, 57893, 57893, 57893, 57893, 60300, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 41453 */ 57893, 57893, 0, 0, 0, 0, 0, 60432, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 41470 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 528, 0, 0, 0, 3191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 41494 */ 319, 0, 0, 0, 0, 0, 0, 3682, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 338, 0, 0, 0, 528, 57893, 61069, 57893,
      /* 41522 */ 57893, 57893, 61072, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58331, 0, 57916,
      /* 41537 */ 57916, 57916, 57916, 57916, 61080, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 41552 */ 57893, 57893, 57893, 57893, 57893, 57893, 59358, 61101, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 41567 */ 57916, 57916, 61109, 57916, 57916, 57916, 57916, 57916, 57916, 60360, 57916, 57916, 57916, 57916, 57916,
      /* 41582 */ 57916, 57916, 57916, 57916, 57943, 60707, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 41597 */ 61138, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59568, 57943,
      /* 41612 */ 57943, 57943, 528, 528, 3852, 3853, 528, 528, 528, 528, 528, 528, 528, 528, 57893, 57893, 57893, 57893,
      /* 41630 */ 57893, 57893, 57893, 57893, 57893, 58291, 57893, 57893, 57943, 57943, 57943, 61251, 57943, 57943, 57943,
      /* 41645 */ 57943, 61252, 61253, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 58468, 57943, 57943, 57943, 57943,
      /* 41660 */ 528, 528, 528, 898, 0, 0, 3675, 0, 0, 3929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 695, 0, 0, 0, 0, 368, 528,
      /* 41687 */ 528, 57893, 57893, 57893, 57893, 57893, 57893, 61299, 57893, 57893, 57893, 57893, 57893, 57893, 61305,
      /* 41702 */ 57893, 57893, 57893, 61309, 57893, 57916, 57916, 57916, 57916, 57916, 57916, 61315, 57916, 57916, 57916,
      /* 41717 */ 57916, 57916, 57943, 57943, 61128, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60066,
      /* 41732 */ 57943, 57943, 57943, 57943, 57943, 57943, 57916, 57916, 61321, 57916, 57916, 57916, 61325, 57916, 57943,
      /* 41747 */ 57943, 57943, 57943, 57943, 57943, 61331, 57943, 528, 1951, 528, 2283, 528, 57893, 59394, 57893, 59632,
      /* 41763 */ 57893, 2290, 0, 2291, 0, 0, 0, 0, 0, 417792, 0, 417792, 0, 0, 0, 0, 310, 0, 0, 0, 0, 0, 316, 0, 0, 0, 0,
      /* 41790 */ 0, 0, 0, 0, 0, 0, 1328, 0, 0, 0, 0, 0, 528, 528, 57893, 57893, 57893, 57893, 61511, 57893, 57893, 57893,
      /* 41812 */ 57893, 57893, 57893, 57893, 57893, 57893, 58826, 57893, 57893, 57893, 57893, 57893, 57893, 57916, 57916,
      /* 41827 */ 57916, 57916, 61524, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57943, 57943, 57943,
      /* 41842 */ 60024, 57943, 60026, 57943, 57943, 57943, 57943, 57943, 61537, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 41857 */ 57943, 57943, 57943, 0, 0, 0, 0, 0, 0, 4244, 528, 528, 528, 57893, 57893, 57893, 57893, 57916, 57916,
      /* 41876 */ 57916, 57916, 57943, 57943, 57943, 57943, 0, 0, 0, 0, 1310, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1316, 1269, 0,
      /* 41899 */ 528, 528, 57893, 57893, 57916, 57916, 57943, 57943, 0, 528, 57893, 57916, 57943, 0, 528, 57893, 57916,
      /* 41916 */ 57943, 0, 528, 57893, 57916, 57943, 0, 0, 0, 0, 376832, 376832, 376832, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 41940 */ 0, 346, 0, 0, 0, 0, 420, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 0, 1731, 0, 0, 0,
      /* 41968 */ 0, 0, 0, 0, 0, 0, 0, 0, 648, 0, 0, 0, 0, 0, 0, 0, 0, 4268780, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 41998 */ 6119424, 0, 6168576, 0, 0, 0, 0, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 354, 355, 356, 0, 0, 393685,
      /* 42024 */ 393685, 393685, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 0, 0, 245760, 0, 0, 475136, 0, 0, 0, 0, 0, 0,
      /* 42051 */ 0, 0, 0, 0, 0, 0, 0, 761, 0, 0, 305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 411, 0, 421, 1, 24578,
      /* 42082 */ 3, 155942, 155942, 296, 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 0, 1731, 0, 0, 0, 0, 1738, 0, 1740, 0, 0, 0,
      /* 42108 */ 0, 0, 0, 3180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352256, 0, 352256, 352256, 0, 0, 0, 305, 306, 307, 0, 0, 0, 0,
      /* 42135 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1185, 0, 0, 0, 0, 0, 748, 421, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 337, 0, 0, 0,
      /* 42167 */ 0, 57916, 0, 0, 0, 748, 57893, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 42184 */ 528, 528, 3413, 57893, 57893, 60760, 1725, 0, 0, 0, 1731, 1732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 741, 0, 0,
      /* 42209 */ 0, 0, 0, 0, 0, 0, 1252, 1825, 0, 0, 0, 0, 1259, 1259, 0, 0, 0, 0, 0, 0, 0, 4083, 0, 4085, 0, 528, 528,
      /* 42236 */ 528, 528, 528, 528, 528, 528, 528, 528, 3848, 528, 528, 528, 528, 0, 0, 2293, 1732, 2294, 0, 0, 0, 0, 0,
      /* 42259 */ 0, 0, 0, 0, 0, 0, 368, 368, 1212, 0, 0, 528, 528, 2499, 2932, 0, 0, 0, 0, 57893, 57893, 57893, 57893,
      /* 42282 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59860, 528, 528, 528, 2932, 0, 57893, 57893,
      /* 42298 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 0, 0, 2592, 0, 0, 417792, 0, 0, 0, 0,
      /* 42317 */ 417792, 0, 0, 0, 0, 0, 310, 0, 310, 0, 0, 0, 0, 0, 4151, 4152, 4153, 528, 528, 528, 4156, 528, 4158,
      /* 42340 */ 528, 528, 0, 0, 0, 0, 0, 0, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60283, 417792, 417792, 0,
      /* 42359 */ 0, 417792, 417792, 417792, 417792, 417792, 417792, 417792, 417792, 417792, 417792, 417792, 417792,
      /* 42372 */ 418102, 417792, 417792, 418101, 418102, 417792, 417792, 418101, 417792, 418101, 417792, 0, 417792, 0, 0,
      /* 42387 */ 0, 0, 417792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 310, 310, 310, 0, 418101, 417792, 1, 24578, 3, 0, 0,
      /* 42412 */ 4366971, 0, 0, 0, 0, 0, 302, 303, 311296, 4399805, 0, 0, 0, 311296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800,
      /* 42437 */ 0, 0, 0, 0, 0, 0, 0, 0, 4268032, 306, 307, 0, 434176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 381, 0, 384, 0,
      /* 42465 */ 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 4399805, 0, 0, 0, 0, 0, 363, 0, 0, 0, 0, 0, 0, 368, 0, 296,
      /* 42494 */ 0, 0, 914, 913, 913, 913, 913, 913, 4858769, 4875153, 913, 913, 913, 913, 913, 913, 913, 913, 913,
      /* 42513 */ 5628817, 5653393, 913, 5702545, 913, 913, 913, 913, 5448593, 913, 5464977, 913, 5481361, 5563281, 913,
      /* 42528 */ 913, 913, 5637009, 913, 5686161, 913, 913, 5751697, 913, 6275985, 913, 913, 913, 913, 913, 913, 913,
      /* 42545 */ 913, 913, 0, 0, 990, 989, 989, 989, 989, 6087645, 4817809, 4359057, 4359057, 4359057, 4359057, 6087569,
      /* 42561 */ 0, 5087232, 0, 5931008, 4358144, 989, 989, 5260253, 989, 989, 989, 989, 989, 989, 989, 989, 5415901,
      /* 42578 */ 989, 5448669, 989, 5465053, 989, 5481437, 5563357, 989, 989, 989, 5637085, 989, 5686237, 989, 989,
      /* 42593 */ 5751773, 989, 989, 989, 989, 989, 989, 6300637, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989,
      /* 42611 */ 5112797, 989, 989, 989, 989, 989, 989, 5874653, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989,
      /* 42630 */ 6276061, 989, 989, 989, 4858845, 4875229, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989,
      /* 42648 */ 989, 5178333, 989, 989, 4359057, 5637009, 4359057, 5686161, 4359057, 4359057, 5751697, 4359057, 4359057,
      /* 42661 */ 4359057, 4359057, 4359057, 5874577, 4359057, 4359057, 4359057, 4359057, 5186449, 4359057, 5235601,
      /* 42672 */ 5301137, 4359057, 4359057, 5407633, 5530513, 4359057, 4359057, 4359057, 4359057, 4359057, 6300561,
      /* 42683 */ 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057,
      /* 42694 */ 5112721, 4359057, 4359057, 4359057, 4359057, 989, 989, 5809041, 4359057, 4359057, 4359057, 4826001,
      /* 42706 */ 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057,
      /* 42717 */ 5178257, 4359057, 4359057, 4359057, 4359057, 4359057, 5243793, 4359057, 4359057, 4359057, 4359057,
      /* 42728 */ 4359057, 4359057, 4359057, 5342097, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 5415825,
      /* 42739 */ 4359057, 5448593, 4359057, 5464977, 4359057, 5481361, 5563281, 4359057, 4359057, 0, 0, 0, 913, 913, 913,
      /* 42754 */ 913, 913, 913, 913, 913, 913, 913, 913, 4932497, 4940689, 913, 913, 6464401, 0, 0, 0, 0, 989, 989, 989,
      /* 42774 */ 989, 989, 989, 989, 989, 989, 4998109, 989, 989, 5039069, 989, 989, 989, 5096413, 989, 5456861, 989,
      /* 42791 */ 989, 989, 989, 989, 5555165, 5571549, 5579741, 5620701, 5669853, 989, 989, 989, 5792733, 5817309, 989,
      /* 42806 */ 5858269, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 4359057,
      /* 42824 */ 4359057, 4359057, 6120413, 989, 6169565, 989, 989, 989, 989, 989, 6243293, 989, 6292445, 989, 6317021,
      /* 42839 */ 989, 989, 989, 989, 989, 5071837, 989, 989, 989, 989, 989, 989, 989, 5219293, 989, 5268445, 4359057,
      /* 42856 */ 4359057, 4932497, 4940689, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 5055377, 4359057,
      /* 42867 */ 4359057, 4359057, 4359057, 4359057, 4359057, 6054801, 4359057, 4359057, 4359057, 0, 0, 0, 0, 5193728, 0,
      /* 42882 */ 4359057, 5456785, 4359057, 4359057, 4359057, 4359057, 4359057, 5555089, 5571473, 5579665, 5620625,
      /* 42893 */ 5669777, 4359057, 4359057, 4359057, 5792657, 5817233, 4359057, 5858193, 4359057, 4359057, 4359057,
      /* 42904 */ 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057,
      /* 42915 */ 4359057, 4359057, 0, 5013504, 0, 6120337, 4359057, 6169489, 4359057, 4359057, 4359057, 4359057, 4359057,
      /* 42928 */ 6243217, 4359057, 6292369, 4359057, 6316945, 4359057, 4359057, 4359057, 5194641, 4359057, 4359057,
      /* 42939 */ 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4907008, 0, 5079040, 6094848, 6430720, 6438912, 0,
      /* 42952 */ 0, 0, 0, 0, 0, 4785041, 913, 913, 913, 4850577, 913, 913, 913, 913, 913, 913, 5055377, 913, 913, 913,
      /* 42972 */ 913, 913, 913, 913, 913, 5211025, 5489553, 913, 913, 913, 913, 913, 913, 913, 913, 913, 5800849, 913,
      /* 42990 */ 913, 5882769, 913, 913, 913, 913, 5219217, 913, 5268369, 913, 913, 5309329, 5317521, 913, 913, 913,
      /* 43006 */ 5432209, 913, 913, 913, 6333329, 913, 913, 913, 6390673, 913, 913, 6431633, 6439825, 0, 0, 0, 0, 0, 0,
      /* 43025 */ 0, 393685, 0, 393685, 393685, 393685, 393685, 393685, 393685, 393685, 393685, 393685, 393685, 393685,
      /* 43039 */ 393685, 393685, 393685, 0, 393685, 0, 4785117, 989, 989, 989, 4850653, 989, 989, 989, 989, 989, 4916189,
      /* 43056 */ 989, 4957149, 4973533, 989, 989, 989, 6030301, 989, 989, 989, 989, 6161373, 989, 989, 989, 989, 989,
      /* 43073 */ 989, 989, 6325213, 4359057, 4359057, 5006225, 4359057, 4359057, 4359057, 5120913, 5137297, 989, 989,
      /* 43086 */ 5309405, 5317597, 989, 989, 989, 5432285, 989, 5489629, 989, 989, 989, 989, 989, 989, 5325789, 5374941,
      /* 43102 */ 5538781, 5546973, 5587933, 5735389, 5972957, 989, 6046685, 989, 6104029, 989, 989, 989, 6185949, 989,
      /* 43116 */ 989, 989, 6284253, 989, 989, 6333405, 989, 989, 989, 6390749, 989, 989, 6431709, 6439901, 4785041,
      /* 43131 */ 4359057, 4359057, 4359057, 4850577, 4359057, 4359057, 4359057, 4359057, 4359057, 4916113, 4359057,
      /* 43142 */ 4358144, 4358144, 4358144, 4358144, 4358144, 913, 913, 913, 913, 913, 0, 0, 0, 0, 0, 0, 0, 319488, 0, 0,
      /* 43162 */ 0, 0, 0, 0, 0, 0, 0, 0, 319488, 0, 4957073, 4973457, 4359057, 4359057, 4359057, 4359057, 4359057,
      /* 43179 */ 4359057, 5071761, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 6275985,
      /* 43190 */ 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 5219217, 4359057, 5268369, 4359057,
      /* 43201 */ 4359057, 5309329, 5317521, 4359057, 4359057, 4359057, 5432209, 4359057, 5489553, 4359057, 4359057,
      /* 43212 */ 4359057, 5211025, 4359057, 4359057, 4359057, 4359057, 5292945, 4359057, 4359057, 4359057, 4359057,
      /* 43223 */ 5366673, 4359057, 4359057, 4359057, 4359057, 6390673, 4359057, 4359057, 6431633, 6439825, 4358144,
      /* 43234 */ 4358144, 4358144, 6266880, 6488064, 913, 913, 913, 6267793, 6488977, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 43255 */ 0, 0, 0, 730, 4358144, 4358144, 4358144, 0, 0, 913, 913, 4842385, 913, 913, 913, 4899729, 913, 913, 913,
      /* 43274 */ 913, 913, 913, 913, 6103953, 913, 913, 913, 6185873, 913, 913, 913, 6284177, 913, 913, 5473169, 5522321,
      /* 43291 */ 913, 913, 913, 913, 5596049, 5710737, 5718929, 913, 5825425, 5866385, 913, 913, 913, 913, 5243793, 913,
      /* 43307 */ 913, 913, 913, 913, 913, 913, 5342097, 913, 913, 913, 0, 0, 989, 989, 989, 4826077, 989, 989, 989, 989,
      /* 43327 */ 989, 989, 989, 0, 913, 4359057, 4359057, 4359057, 4359057, 4359057, 4858769, 4875153, 5923729, 913, 913,
      /* 43342 */ 6022033, 913, 6038417, 913, 913, 6079377, 6112145, 913, 6177681, 6210449, 913, 6235025, 913, 913, 913,
      /* 43357 */ 913, 6243217, 913, 6292369, 913, 6316945, 913, 913, 913, 913, 913, 913, 913, 4998033, 913, 913, 5038993,
      /* 43374 */ 913, 913, 913, 5096337, 5104529, 5284829, 989, 989, 989, 989, 5473245, 5522397, 989, 989, 989, 989,
      /* 43390 */ 5596125, 5710813, 5719005, 989, 5825501, 5866461, 989, 989, 5923805, 989, 989, 6022109, 989, 6038493,
      /* 43404 */ 989, 989, 6079453, 6112221, 989, 6177757, 6210525, 989, 6235101, 989, 989, 989, 989, 989, 989, 989,
      /* 43420 */ 4359057, 4359057, 4842385, 4359057, 4359057, 4359057, 4899729, 4359057, 5284753, 4359057, 4359057,
      /* 43431 */ 4359057, 4359057, 5473169, 5522321, 4359057, 4359057, 4359057, 4359057, 5596049, 5710737, 5718929,
      /* 43442 */ 4359057, 4359057, 4359057, 6103953, 4359057, 4359057, 4359057, 6185873, 4359057, 4359057, 4359057,
      /* 43453 */ 6284177, 4359057, 4359057, 6333329, 4359057, 4359057, 4923392, 4358144, 4358144, 4358144, 4358144,
      /* 43464 */ 4358144, 913, 4924305, 913, 913, 913, 913, 4366336, 0, 0, 0, 0, 1779, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 43488 */ 3156, 0, 3157, 0, 0, 5825425, 5866385, 4359057, 4359057, 5923729, 4359057, 4359057, 6022033, 4359057,
      /* 43502 */ 6038417, 4359057, 4359057, 6079377, 6112145, 4359057, 6177681, 6210449, 4359057, 6235025, 4359057,
      /* 43513 */ 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4358144, 4358144, 4358144, 913, 913, 913, 913,
      /* 43526 */ 913, 5194641, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 988, 989, 989, 989, 989, 989, 4358144,
      /* 43545 */ 4358144, 6029312, 4358144, 4358144, 4358144, 4358144, 6160384, 4358144, 4358144, 4358144, 4358144,
      /* 43556 */ 4358144, 4358144, 6406144, 913, 913, 913, 913, 6325137, 989, 989, 5006301, 989, 989, 989, 5120989,
      /* 43571 */ 5137373, 989, 989, 989, 989, 989, 6226909, 4359057, 5063569, 4359057, 4359057, 4359057, 4359057,
      /* 43584 */ 4359057, 6226833, 0, 6086656, 913, 913, 5202833, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913,
      /* 43602 */ 5890961, 913, 913, 913, 5555089, 5571473, 5579665, 5620625, 5669777, 913, 913, 913, 5792657, 5817233,
      /* 43616 */ 913, 5858193, 913, 913, 913, 913, 5292945, 913, 913, 913, 913, 5366673, 913, 913, 913, 5456785, 913,
      /* 43633 */ 913, 913, 913, 913, 6308753, 913, 913, 6357905, 6382481, 6398865, 4801501, 4809693, 989, 989, 4891613,
      /* 43648 */ 913, 913, 6030225, 913, 913, 913, 913, 6161297, 913, 913, 913, 913, 913, 913, 913, 6407057, 5104605,
      /* 43665 */ 989, 989, 5202909, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 5891037, 6407133, 4359057,
      /* 43682 */ 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4998033, 4359057, 4359057, 5038993,
      /* 43693 */ 4359057, 4359057, 4359057, 5325713, 5374865, 5538705, 5546897, 5587857, 5735313, 5972881, 4359057,
      /* 43704 */ 6046609, 4359057, 6071185, 4359057, 4359057, 5096337, 5104529, 4359057, 4359057, 5202833, 4359057,
      /* 43715 */ 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057,
      /* 43726 */ 4358144, 4358144, 4358144, 4358144, 5890961, 4359057, 4359057, 4359057, 6030225, 4359057, 4359057,
      /* 43737 */ 4359057, 4359057, 6161297, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 5800849, 4359057,
      /* 43748 */ 4359057, 5882769, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 5628817, 5653393, 4359057,
      /* 43759 */ 5702545, 4359057, 4359057, 5809041, 4359057, 4359057, 4359057, 4359057, 6407057, 4358144, 4358144,
      /* 43770 */ 4358144, 913, 913, 913, 4890624, 0, 0, 0, 0, 0, 0, 0, 0, 327680, 0, 0, 0, 0, 0, 0, 0, 0, 319488, 0, 0,
      /* 43795 */ 0, 0, 319488, 0, 319488, 6397952, 4801425, 4809617, 913, 913, 4891537, 913, 4948881, 913, 913, 913,
      /* 43811 */ 5047185, 913, 913, 913, 913, 913, 913, 913, 6300561, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913,
      /* 43830 */ 913, 913, 6120337, 913, 6169489, 913, 5186449, 913, 5235601, 5301137, 913, 913, 5407633, 5530513, 913,
      /* 43845 */ 913, 913, 913, 5899153, 913, 913, 913, 913, 913, 913, 6054801, 913, 913, 913, 989, 989, 5014493, 989,
      /* 43863 */ 989, 989, 989, 989, 5194717, 989, 989, 989, 989, 989, 989, 989, 989, 4359057, 4359057, 989, 4948957,
      /* 43880 */ 989, 989, 989, 5047261, 989, 989, 989, 989, 5186525, 989, 5235677, 5301213, 989, 989, 989, 5211101, 989,
      /* 43897 */ 989, 989, 989, 5293021, 989, 989, 989, 989, 5366749, 989, 989, 989, 5243869, 989, 989, 989, 989, 989,
      /* 43915 */ 989, 989, 5342173, 989, 989, 989, 989, 989, 989, 6464477, 4359057, 4359057, 4359057, 4359057, 4359057,
      /* 43930 */ 4359057, 4359057, 4359057, 4359057, 4359057, 6325137, 5914624, 5915537, 0, 0, 0, 5407709, 5530589, 989,
      /* 43944 */ 989, 989, 989, 5899229, 989, 989, 989, 989, 989, 989, 989, 989, 6308829, 989, 989, 6357981, 6382557,
      /* 43961 */ 6398941, 4801425, 4809617, 4359057, 4359057, 4891537, 4359057, 4948881, 4359057, 4359057, 4359057,
      /* 43972 */ 5047185, 5899153, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 6308753,
      /* 43983 */ 4359057, 4359057, 6357905, 6382481, 6398865, 5021696, 4358144, 4358144, 5022609, 913, 913, 0, 4980736,
      /* 43996 */ 0, 0, 0, 0, 0, 5373952, 5734400, 6045696, 0, 0, 0, 0, 1792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 44023 */ 114688, 0, 5537792, 5545984, 5734400, 5971968, 4358144, 6045696, 4358144, 6070272, 4358144, 4358144,
      /* 44035 */ 4358144, 6348800, 913, 4866961, 4883345, 913, 913, 4916113, 913, 4957073, 4973457, 913, 913, 913, 913,
      /* 44050 */ 913, 913, 5071761, 913, 913, 913, 913, 913, 913, 5260177, 913, 913, 913, 913, 913, 913, 913, 913,
      /* 44068 */ 5415825, 4981649, 913, 913, 913, 913, 913, 913, 913, 913, 5325713, 5374865, 5538705, 5546897, 5587857,
      /* 44083 */ 5735313, 5972881, 913, 6046609, 913, 6071185, 913, 913, 913, 913, 6349713, 989, 4867037, 4883421, 989,
      /* 44098 */ 4981725, 989, 989, 989, 5800925, 989, 989, 5882845, 989, 989, 989, 989, 989, 989, 989, 989, 989,
      /* 44115 */ 5628893, 5653469, 989, 5702621, 989, 989, 989, 989, 6071261, 989, 989, 989, 989, 6349789, 4359057,
      /* 44130 */ 4866961, 4883345, 4359057, 4981649, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 6464401,
      /* 44141 */ 4358144, 4358144, 4358144, 4358144, 4358144, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913,
      /* 44158 */ 913, 913, 913, 913, 5178257, 913, 4359057, 4359057, 6349713, 4358144, 6144000, 913, 6144913, 0, 4988928,
      /* 44173 */ 5005312, 0, 0, 0, 0, 5775360, 0, 0, 0, 0, 1795, 0, 0, 1798, 0, 1800, 0, 0, 0, 0, 0, 1806, 4358144,
      /* 44196 */ 6324224, 913, 913, 5006225, 913, 913, 913, 5120913, 5137297, 913, 913, 913, 913, 913, 913, 913, 5112721,
      /* 44213 */ 913, 913, 913, 913, 913, 5284753, 913, 913, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 44227 */ 4358144, 6053888, 4358144, 4358144, 913, 913, 5014417, 913, 913, 913, 913, 913, 5874577, 913, 913, 913,
      /* 44243 */ 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 989, 989, 989, 4358144, 6094848, 913, 4907921, 913,
      /* 44261 */ 5079953, 913, 5227409, 913, 5743505, 913, 913, 913, 6095761, 913, 989, 989, 4932573, 4940765, 989, 989,
      /* 44277 */ 989, 989, 989, 989, 5055453, 989, 989, 989, 989, 989, 989, 6054877, 989, 989, 989, 4359057, 4359057,
      /* 44294 */ 5014417, 4359057, 4359057, 4359057, 4907997, 989, 5080029, 989, 5227485, 989, 5743581, 989, 989, 989,
      /* 44308 */ 6095837, 989, 4359057, 4907921, 4359057, 5079953, 4359057, 5227409, 4359057, 5743505, 4359057, 4359057,
      /* 44320 */ 4359057, 6095761, 4359057, 5062656, 0, 0, 0, 0, 0, 4358144, 4358144, 0, 913, 913, 913, 913, 913, 913, 0,
      /* 44339 */ 0, 0, 0, 0, 0, 0, 0, 4956160, 4964352, 0, 0, 0, 0, 0, 0, 0, 0, 4816896, 4358144, 4358144, 4358144,
      /* 44360 */ 4358144, 6086656, 4817809, 913, 913, 913, 913, 6087569, 4817885, 5332992, 5980160, 4358144, 913,
      /* 44373 */ 5333905, 5981073, 913, 989, 5333981, 5981149, 989, 4359057, 5333905, 5981073, 4359057, 0, 0, 0, 0, 1811,
      /* 44389 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1820, 0, 0, 0, 0, 1825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 528,
      /* 44420 */ 5439488, 5128192, 4358144, 5129105, 913, 5129181, 989, 5129105, 4359057, 0, 4358144, 913, 989, 4359057,
      /* 44434 */ 0, 4358144, 913, 989, 4359057, 6004736, 6004736, 6005649, 6005725, 6005649, 0, 0, 0, 450560, 450560, 0,
      /* 44450 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 375, 0, 450560, 450560, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0,
      /* 44477 */ 0, 302, 303, 0, 0, 0, 0, 1876, 1877, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1867, 0, 0, 1870, 0, 0, 0, 0, 0,
      /* 44505 */ 196608, 0, 0, 0, 106496, 0, 0, 4284416, 0, 0, 0, 0, 0, 0, 0, 417792, 0, 0, 417792, 0, 0, 417792, 0,
      /* 44528 */ 417792, 0, 0, 0, 0, 139264, 147456, 417792, 0, 0, 0, 417792, 196608, 0, 0, 5816320, 6291456, 0, 0, 0, 0,
      /* 44549 */ 0, 0, 0, 0, 0, 0, 0, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0, 307, 0, 0, 0, 4956160, 4964352, 0, 0,
      /* 44578 */ 0, 0, 0, 0, 0, 466944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5480448, 0, 0, 0, 0, 0, 0, 6430720, 6438912, 914, 0,
      /* 44604 */ 0, 0, 914, 0, 4784128, 0, 0, 0, 4849664, 0, 0, 0, 0, 0, 648, 0, 0, 0, 0, 0, 0, 818, 0, 0, 0, 0, 0, 658,
      /* 44632 */ 659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1272, 0, 0, 0, 0, 0, 0, 0, 0, 6332416, 0, 0, 0, 6389760, 0, 0, 6430720,
      /* 44659 */ 6438912, 990, 0, 0, 0, 990, 4358144, 4358144, 4358144, 914, 0, 0, 0, 4841472, 0, 0, 0, 4898816, 0, 0, 0,
      /* 44680 */ 0, 0, 0, 2383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2825, 0, 0, 0, 0, 0, 0, 0, 459222, 459222, 459222, 459222,
      /* 44705 */ 459222, 459222, 459222, 459222, 459222, 459222, 459222, 459222, 459222, 459222, 459222, 459222, 459222,
      /* 44718 */ 459379, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 0, 1887, 0, 1889, 1865, 528, 528,
      /* 44742 */ 528, 528, 528, 528, 528, 528, 3516, 528, 528, 3519, 528, 528, 528, 60866, 4358144, 4358144, 483328, 0,
      /* 44760 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1243, 0, 0, 1, 24578, 3, 0, 0, 0, 0, 507904, 0, 0, 0, 507904, 0, 0,
      /* 44789 */ 0, 0, 0, 0, 2398, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49723, 0, 0, 0, 0, 0, 327680, 0, 507904, 507904, 507904,
      /* 44814 */ 507904, 507904, 507904, 507904, 507904, 507904, 507904, 507904, 507904, 507904, 507904, 507904, 507904,
      /* 44827 */ 507904, 507904, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 0, 2084, 0, 0, 0, 4825088,
      /* 44851 */ 0, 0, 0, 0, 0, 0, 0, 0, 3423, 0, 0, 0, 0, 0, 0, 0, 0, 3460, 0, 0, 0, 0, 0, 3465, 0, 4268032, 306, 307,
      /* 44879 */ 0, 0, 442368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1168, 1167, 0, 0, 0, 0, 0, 0, 0, 229376, 0, 491520, 524288,
      /* 44905 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 678, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 491520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 44933 */ 0, 0, 0, 0, 1275, 0, 1277, 1, 24578, 3, 0, 0, 0, 0, 0, 516096, 0, 0, 0, 516096, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 44961 */ 0, 0, 0, 0, 368, 0, 296, 0, 0, 516567, 516567, 516567, 516567, 516567, 516567, 516567, 516567, 516567,
      /* 44979 */ 516567, 516567, 516567, 516567, 516567, 516567, 516567, 516567, 516567, 1, 24578, 0, 0, 0, 4366336, 0,
      /* 44995 */ 0, 548864, 0, 0, 302, 303, 0, 0, 0, 0, 2306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5627904, 0, 0, 0,
      /* 45022 */ 4268032, 306, 307, 409600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 0, 308, 0, 0, 0, 5513216, 5783552,
      /* 45046 */ 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 5193728, 4358144,
      /* 45063 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4907008, 0, 5079040, 6094848, 1, 24578,
      /* 45076 */ 4227365, 0, 0, 0, 0, 0, 0, 299, 0, 0, 0, 299, 0, 0, 0, 0, 0, 245760, 0, 245760, 245760, 0, 0, 0, 245760,
      /* 45101 */ 245760, 0, 0, 0, 0, 0, 0, 245760, 0, 0, 0, 245760, 0, 0, 245760, 245760, 245760, 0, 0, 540672, 0, 0,
      /* 45123 */ 540672, 0, 0, 0, 540672, 0, 0, 0, 0, 0, 0, 0, 540672, 0, 0, 0, 0, 0, 0, 0, 0, 417792, 0, 0, 0, 417792,
      /* 45149 */ 0, 0, 0, 0, 0, 1, 24578, 4227365, 0, 0, 4366336, 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 0, 2328, 0, 0, 0, 0,
      /* 45176 */ 2332, 0, 0, 0, 0, 0, 0, 0, 1879, 0, 0, 0, 0, 0, 0, 0, 0, 768, 0, 0, 771, 0, 0, 0, 0, 0, 0, 499712, 0, 0,
      /* 45206 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1291, 0, 0, 0, 0, 499712, 0, 0, 0, 4358144, 4358144, 4358144, 4358144,
      /* 45230 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5111808, 4358144, 4358144, 4358144,
      /* 45241 */ 4358144, 4358144, 5283840, 4358144, 4358144, 4358144, 4358144, 4358144, 499712, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 45258 */ 0, 0, 0, 0, 0, 1314, 0, 0, 0, 0, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 0, 2355,
      /* 45286 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1882, 0, 0, 0, 0, 1, 24578, 3, 155942, 296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 45316 */ 0, 0, 528, 4087, 528, 4088, 528, 528, 57893, 528, 57893, 528, 528, 57893, 528, 528, 57916, 57893, 528,
      /* 45335 */ 528, 57893, 57893, 57893, 0, 0, 0, 0, 0, 0, 3821, 0, 0, 0, 0, 57916, 57893, 57893, 57893, 57893, 57893,
      /* 45356 */ 57893, 57893, 57916, 57916, 57893, 57893, 57943, 57893, 57893, 57893, 0, 0, 0, 0, 57916, 57916, 57916,
      /* 45373 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 61529, 57916, 57916, 57916, 57943, 57943, 58773, 914,
      /* 45388 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 45403 */ 60631, 0, 0, 2293, 0, 2294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 664, 0, 0, 0, 0, 3453, 0, 0, 0, 0, 0, 0, 0,
      /* 45433 */ 0, 0, 0, 0, 0, 0, 0, 0, 744, 1825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2373, 0, 0, 0, 0, 0, 674, 0, 0, 0,
      /* 45464 */ 0, 0, 0, 0, 0, 0, 0, 1182, 0, 0, 0, 0, 0, 0, 0, 1280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1788, 0, 0,
      /* 45496 */ 528, 57894, 528, 57894, 528, 528, 57894, 528, 528, 57917, 57894, 528, 528, 57894, 57894, 57894, 57894,
      /* 45513 */ 57944, 57944, 57894, 57894, 57894, 57894, 57944, 57944, 57894, 528, 57894, 57894, 57917, 57894, 57894,
      /* 45528 */ 57894, 57894, 57894, 57894, 57894, 57917, 57917, 57894, 57894, 57944, 57894, 57894, 57894, 1, 24578, 3,
      /* 45544 */ 155942, 155942, 296, 0, 0, 0, 0, 0, 302, 303, 0, 1, 24578, 3, 155943, 296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 45570 */ 0, 740, 661, 0, 0, 528, 0, 573440, 573440, 573440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 0, 516096,
      /* 45595 */ 0, 0, 0, 5988352, 0, 0, 6135808, 6307840, 0, 5996544, 4800512, 0, 6356992, 3675, 0, 0, 0, 0, 0, 694, 0,
      /* 45616 */ 0, 0, 787, 0, 0, 0, 0, 806, 0, 0, 0, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 637, 303, 0, 0, 0, 0,
      /* 45644 */ 2381, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 344064, 0, 0, 0, 0, 4268032, 640, 307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 45673 */ 0, 0, 0, 0, 1804, 0, 0, 581632, 0, 0, 0, 581632, 581632, 581632, 581632, 581632, 581632, 581632, 581632,
      /* 45692 */ 581632, 581632, 581632, 581632, 581632, 581632, 581632, 581632, 0, 581632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 45712 */ 0, 581632, 0, 581632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 746, 581632, 581632, 1, 24578, 3, 0,
      /* 45738 */ 0, 4366336, 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 0, 2397, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1225, 0, 0, 0,
      /* 45767 */ 0, 6258688, 6447104, 0, 0, 6127616, 0, 6348800, 5906432, 0, 5537792, 3827, 4882432, 0, 0, 0, 0, 0, 0,
      /* 45786 */ 2784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 0, 420, 0, 0, 0, 3926, 0, 0, 0, 0, 0, 0, 5693440,
      /* 45813 */ 0, 6496256, 5144576, 5136384, 0, 5914624, 0, 0, 5513216, 5783552, 0, 3926, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 45833 */ 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 306, 0, 0, 0, 0, 0, 0, 306, 237983, 147456,
      /* 45858 */ 0, 0, 0, 306, 0, 0, 311, 312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1819, 0, 0, 312, 0, 311, 311, 312,
      /* 45887 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 311, 409, 312, 0, 458, 472, 472, 472, 485, 485, 485, 485, 485, 485,
      /* 45912 */ 485, 485, 485, 506, 485, 485, 485, 485, 485, 524, 485, 485, 485, 524, 485, 485, 485, 485, 485, 485, 529,
      /* 45933 */ 57895, 529, 57895, 529, 529, 57895, 529, 529, 57918, 57895, 529, 529, 57895, 57895, 57895, 57895, 57945,
      /* 45950 */ 57945, 57895, 57895, 57895, 57895, 57945, 57945, 57895, 529, 57895, 57895, 57918, 57895, 57895, 57895,
      /* 45965 */ 57895, 57895, 57895, 57895, 57918, 57918, 57895, 57895, 57945, 57895, 57895, 57895, 1, 24578, 3, 155942,
      /* 45981 */ 155942, 296, 0, 0, 0, 0, 0, 302, 303, 0, 0, 306, 307, 0, 0, 0, 0, 0, 645, 0, 0, 648, 649, 0, 0, 0, 0, 0,
      /* 46009 */ 736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 745, 368, 368, 0, 0, 704, 0, 0, 0, 0, 0, 0, 0, 711, 0, 0, 0, 0, 0, 750,
      /* 46039 */ 0, 0, 0, 0, 645, 0, 0, 0, 0, 0, 0, 0, 6299648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 777, 0, 0, 781, 0, 0, 0, 0, 0,
      /* 46070 */ 0, 0, 789, 0, 0, 0, 0, 0, 0, 2807, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2310, 0, 0, 0, 0, 0, 0, 793, 0, 0, 0, 0,
      /* 46101 */ 0, 0, 0, 797, 0, 0, 0, 0, 0, 0, 0, 0, 557056, 557056, 0, 0, 0, 0, 0, 0, 0, 833, 793, 0, 0, 0, 0, 0, 837,
      /* 46130 */ 838, 0, 0, 0, 0, 793, 528, 528, 0, 57893, 57893, 57893, 57893, 57893, 57893, 155942, 1151, 0, 0, 1155,
      /* 46150 */ 0, 0, 0, 0, 2295, 0, 1160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1759, 528, 847, 851, 528, 528,
      /* 46178 */ 863, 528, 528, 528, 879, 528, 884, 528, 892, 528, 895, 528, 528, 909, 528, 57893, 57893, 57893, 58266,
      /* 46197 */ 58270, 57893, 57893, 58282, 57893, 57893, 57893, 58298, 57893, 58303, 57893, 58311, 57893, 58314, 57893,
      /* 46212 */ 57893, 58328, 57893, 0, 57916, 57916, 57916, 58342, 58346, 57916, 57916, 58358, 57916, 57916, 57916,
      /* 46227 */ 58374, 57916, 58379, 57916, 58387, 57916, 58390, 57916, 57916, 58404, 57916, 0, 0, 0, 0, 58303, 57943,
      /* 46244 */ 57943, 57943, 58417, 58421, 57943, 57943, 58433, 57943, 57943, 528, 528, 528, 57893, 57893, 57893, 0, 0,
      /* 46261 */ 3655, 0, 3657, 0, 0, 0, 0, 0, 2356, 0, 2358, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5693440, 0, 6496256, 5144576,
      /* 46285 */ 5136384, 0, 5914624, 57943, 58449, 57943, 58454, 57943, 58462, 57943, 58465, 57943, 57943, 58479, 57943,
      /* 46300 */ 847, 851, 1141, 895, 1159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 747, 0, 0, 0, 1320, 0, 0, 0, 0,
      /* 46329 */ 0, 0, 0, 0, 0, 0, 0, 0, 368, 302, 0, 0, 528, 528, 528, 1411, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 46353 */ 528, 528, 528, 528, 528, 2470, 528, 528, 0, 0, 1809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1842, 0, 0,
      /* 46380 */ 1832, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1201, 1885, 0, 0, 1886, 0, 0, 0, 0, 528, 528, 528,
      /* 46408 */ 528, 528, 528, 528, 528, 528, 528, 3225, 528, 528, 528, 1899, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 46428 */ 528, 1912, 528, 528, 528, 0, 0, 57893, 60609, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 46445 */ 57893, 61085, 57893, 57893, 57893, 57893, 57893, 57893, 528, 528, 528, 528, 58773, 1985, 57893, 57893,
      /* 46461 */ 57893, 57893, 57893, 59336, 57893, 57893, 57893, 57893, 57893, 58822, 57893, 57893, 57893, 57893, 58827,
      /* 46476 */ 57893, 57893, 57893, 57893, 57893, 58319, 57893, 57893, 57893, 57893, 0, 57916, 57916, 58341, 57916,
      /* 46491 */ 57916, 57893, 59342, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59355, 57893, 57893,
      /* 46506 */ 57893, 57893, 57893, 58859, 57893, 57893, 57893, 58866, 57893, 50676, 58773, 990, 57916, 57916, 59442,
      /* 46521 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59455, 57916, 57916, 57916, 57916, 57916,
      /* 46536 */ 57916, 60387, 57916, 57916, 57916, 57916, 57916, 57916, 60394, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 46551 */ 59514, 57916, 57916, 57916, 57916, 57916, 57916, 59520, 57916, 57916, 57916, 57916, 57916, 57943, 61127,
      /* 46566 */ 57943, 57943, 57943, 61130, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60968, 57943, 57943, 57943,
      /* 46581 */ 57943, 57943, 57943, 57943, 57943, 57943, 60721, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 46596 */ 57943, 59610, 57943, 57943, 57943, 57943, 57943, 57943, 59616, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 46611 */ 57943, 60982, 60984, 57943, 57943, 57943, 57943, 60988, 57943, 60990, 0, 0, 2293, 0, 2294, 0, 0, 0, 0,
      /* 46630 */ 0, 0, 0, 0, 0, 2300, 0, 0, 0, 0, 2806, 0, 0, 0, 0, 0, 2811, 0, 2813, 2814, 0, 0, 0, 0, 0, 483328, 0, 0,
      /* 46658 */ 0, 0, 0, 0, 0, 0, 0, 0, 801, 0, 0, 0, 0, 0, 0, 2325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2334, 0, 0, 0, 0, 0, 0,
      /* 46690 */ 2822, 0, 0, 0, 0, 0, 0, 0, 0, 0, 769, 0, 0, 0, 774, 0, 0, 0, 2407, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 46721 */ 0, 0, 702, 528, 2399, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2429, 528, 528, 2432, 528,
      /* 46742 */ 528, 2475, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2471, 528, 57893,
      /* 46761 */ 57893, 59863, 57893, 57893, 57893, 57893, 57893, 57893, 59871, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 46776 */ 0, 0, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60351, 57916, 57916, 57916, 57916, 57916,
      /* 46792 */ 57916, 57893, 59891, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 46807 */ 57893, 57893, 57893, 60640, 57916, 57916, 57916, 59949, 57916, 57916, 59952, 57916, 57916, 57916, 57916,
      /* 46822 */ 57916, 57916, 59960, 57916, 57916, 57893, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 46837 */ 57943, 57943, 57943, 57943, 0, 0, 0, 0, 57916, 57916, 60017, 57916, 57916, 57916, 57916, 57943, 57943,
      /* 46854 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60417, 57943, 57943, 57943, 57943, 57943, 60032, 57943,
      /* 46869 */ 57943, 60035, 57943, 57943, 57943, 57943, 57943, 57943, 60043, 57943, 57943, 528, 528, 528, 57893,
      /* 46884 */ 57893, 57893, 0, 3654, 0, 0, 0, 0, 0, 0, 0, 1325, 0, 0, 0, 1329, 0, 0, 0, 0, 57943, 57943, 60100, 57943,
      /* 46908 */ 57943, 57943, 57943, 2760, 528, 528, 528, 528, 60109, 57893, 57893, 57893, 0, 0, 0, 0, 57916, 57916,
      /* 46926 */ 57916, 57916, 57916, 57916, 57916, 59945, 57916, 0, 0, 2781, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 46949 */ 1884, 0, 0, 0, 0, 2794, 0, 0, 0, 0, 0, 2798, 0, 0, 0, 0, 0, 0, 0, 0, 4784128, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 46978 */ 3181, 0, 0, 0, 0, 0, 3186, 0, 57893, 60285, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 46996 */ 57893, 57893, 57893, 60293, 57893, 57893, 1, 24578, 3, 155942, 155942, 296, 0, 0, 0, 0, 0, 302, 303, 0,
      /* 47016 */ 57943, 57943, 60461, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 47031 */ 57943, 4075, 0, 4076, 57943, 60472, 57943, 57943, 57943, 57943, 57943, 528, 528, 528, 528, 528, 57893,
      /* 47048 */ 57893, 57893, 57893, 57893, 0, 0, 0, 0, 0, 0, 0, 3150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2299, 0,
      /* 47075 */ 0, 0, 3160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3173, 0, 0, 0, 0, 2820, 0, 0, 0, 2824, 0, 0, 0, 0, 0, 0,
      /* 47106 */ 0, 703, 0, 0, 0, 0, 0, 0, 0, 0, 2331, 0, 0, 0, 0, 0, 0, 0, 0, 3189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 47138 */ 3202, 3203, 0, 0, 3215, 0, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3226, 528, 528, 3230,
      /* 47159 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3239, 528, 528, 0, 0, 0, 0, 0, 0, 57893, 57893, 60279,
      /* 47181 */ 57893, 57893, 57893, 57893, 57893, 58320, 57893, 57893, 57893, 57893, 0, 57916, 57916, 57916, 57916,
      /* 47196 */ 57916, 57943, 57943, 57943, 57943, 57943, 57943, 0, 0, 4289, 0, 528, 60617, 57893, 57893, 60621, 57893,
      /* 47213 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60630, 57893, 0, 0, 3137, 3138, 0, 0, 0,
      /* 47231 */ 0, 0, 0, 0, 0, 0, 0, 0, 3199, 0, 0, 0, 0, 57916, 57916, 57916, 60666, 57916, 57916, 60670, 57916, 57916,
      /* 47253 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 58383, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 47268 */ 60679, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60687, 57916,
      /* 47283 */ 0, 0, 0, 0, 57893, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 528, 528, 528,
      /* 47301 */ 57893, 57893, 57893, 57943, 57943, 57943, 57943, 60715, 57943, 57943, 60719, 57943, 57943, 57943, 57943,
      /* 47316 */ 57943, 57943, 57943, 57943, 57943, 59582, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60728,
      /* 47331 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60736, 0, 3430, 0,
      /* 47347 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 729, 0, 528, 3495, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 47373 */ 528, 528, 528, 528, 528, 528, 2904, 528, 528, 528, 528, 3512, 528, 3514, 528, 528, 528, 528, 528, 528,
      /* 47393 */ 528, 528, 57893, 57893, 58259, 57893, 57893, 57893, 57893, 57893, 57893, 58292, 57893, 57893, 60879,
      /* 47408 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 47423 */ 59389, 57893, 57893, 57893, 57893, 60897, 57893, 60899, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 47438 */ 57893, 57893, 59399, 57893, 57893, 57893, 57893, 57893, 57893, 57916, 60921, 57916, 57916, 57916, 57916,
      /* 47453 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57943, 57943, 57943, 57943, 57943,
      /* 47468 */ 57943, 60963, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 47483 */ 57943, 60457, 57943, 528, 4015, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 57893, 61372,
      /* 47501 */ 57893, 302, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1199, 0, 0, 61374, 57893, 57893, 57893, 57893,
      /* 47525 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57916, 61388, 57916, 0, 0, 0, 0, 57893, 57943,
      /* 47542 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 58442, 61390, 57916, 57916, 57916, 57916, 57916,
      /* 47557 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57943, 61404, 57943, 528, 2281, 528, 528, 528, 57893,
      /* 47573 */ 59630, 57893, 57893, 57893, 2290, 0, 2291, 0, 0, 0, 0, 0, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 663, 0,
      /* 47598 */ 0, 666, 667, 0, 61406, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 47614 */ 57943, 0, 0, 0, 0, 0, 0, 528, 4077, 0, 0, 0, 0, 0, 0, 0, 4084, 0, 0, 528, 528, 528, 528, 4089, 0, 0,
      /* 47640 */ 4148, 0, 4150, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1399, 528, 528, 528, 0, 0, 0,
      /* 47662 */ 313, 314, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1240, 0, 0, 0, 0, 0, 0, 0, 427, 0, 131072, 0, 0, 0, 0, 427,
      /* 47691 */ 0, 0, 0, 0, 0, 427, 459, 0, 0, 0, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 523, 459,
      /* 47715 */ 523, 523, 523, 459, 523, 523, 523, 523, 523, 523, 530, 57896, 530, 57896, 530, 530, 57896, 530, 530,
      /* 47734 */ 57919, 57896, 530, 530, 57896, 57896, 57896, 57896, 57946, 57946, 57896, 57896, 57896, 57896, 57946,
      /* 47749 */ 57946, 57896, 621, 57896, 57973, 57919, 57896, 57896, 57896, 57896, 57896, 57896, 57896, 57919, 57919,
      /* 47764 */ 57896, 57896, 57946, 57896, 57896, 57896, 57973, 57973, 1, 24578, 3, 155942, 155942, 296, 0, 0, 0, 0, 0,
      /* 47783 */ 302, 303, 0, 0, 0, 0, 2830, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 680, 681, 0, 0, 0, 57893, 57893, 58307,
      /* 47809 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 0, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 47824 */ 60350, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60915, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 47839 */ 57916, 57916, 58942, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60389, 57916, 57916, 57916,
      /* 47854 */ 57916, 57916, 57916, 57916, 57943, 57943, 57943, 57943, 58458, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 47869 */ 57943, 528, 528, 528, 528, 528, 57893, 57893, 57893, 57893, 528, 528, 1965, 528, 528, 528, 528, 528,
      /* 47887 */ 528, 1972, 528, 528, 528, 528, 528, 528, 528, 3501, 528, 3503, 528, 528, 528, 528, 528, 528, 1360, 528,
      /* 47907 */ 528, 528, 528, 528, 528, 528, 528, 528, 2887, 528, 2889, 528, 528, 528, 528, 57893, 59408, 57893, 57893,
      /* 47926 */ 57893, 57893, 57893, 57893, 59416, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58823, 57893, 57893,
      /* 47941 */ 57893, 57893, 57893, 57893, 57893, 57893, 58840, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59508,
      /* 47956 */ 57916, 57916, 57916, 57916, 57916, 57916, 59516, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 47971 */ 58909, 57916, 57916, 57916, 58912, 57916, 57916, 57916, 57893, 57893, 57893, 60286, 57893, 57893, 57893,
      /* 47986 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58814, 57893, 57893, 57893, 60408, 57916,
      /* 48001 */ 57916, 57916, 57943, 57943, 57943, 57943, 57943, 57943, 60414, 57943, 57943, 57943, 57943, 60418, 57943,
      /* 48016 */ 57943, 57943, 60473, 57943, 57943, 57943, 528, 528, 528, 528, 528, 57893, 57893, 57893, 57893, 57893, 0,
      /* 48033 */ 0, 0, 0, 2292, 528, 528, 528, 4093, 528, 4095, 528, 528, 4097, 528, 57893, 57893, 57893, 57893, 57893,
      /* 48052 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 61077, 57893, 57893, 57893, 57893, 61450, 57893, 61452,
      /* 48067 */ 57893, 57893, 61454, 57893, 57893, 57916, 57916, 57916, 57916, 57916, 57916, 58879, 57916, 57916, 57916,
      /* 48082 */ 57916, 57916, 58891, 57916, 57916, 57916, 57916, 57916, 61464, 57916, 61466, 57916, 57916, 61468, 57916,
      /* 48097 */ 57916, 57943, 57943, 57943, 57943, 57943, 57943, 60956, 57943, 57943, 57943, 57943, 57943, 60960, 57943,
      /* 48112 */ 57943, 57943, 57943, 61478, 57943, 61480, 57943, 57943, 61482, 57943, 57943, 0, 0, 0, 0, 0, 0, 0, 1766,
      /* 48131 */ 0, 0, 1769, 0, 0, 0, 0, 0, 320, 320, 428, 429, 131072, 436, 429, 437, 439, 428, 436, 437, 0, 316, 437,
      /* 48154 */ 455, 460, 473, 473, 473, 486, 486, 486, 486, 486, 486, 486, 486, 486, 486, 508, 508, 521, 521, 522, 522,
      /* 48175 */ 508, 522, 522, 522, 508, 522, 522, 522, 522, 522, 522, 531, 57897, 531, 57897, 531, 531, 57897, 531,
      /* 48194 */ 531, 57920, 57897, 531, 531, 57897, 57897, 57897, 57897, 57947, 57947, 57897, 57897, 57897, 57897,
      /* 48209 */ 57947, 57947, 57897, 622, 57972, 57972, 57920, 57897, 57897, 57897, 57897, 57897, 57897, 57897, 57920,
      /* 48224 */ 57920, 57897, 57897, 57947, 57897, 57897, 57897, 57972, 57972, 1, 24578, 3, 155942, 155942, 296, 0, 0,
      /* 48241 */ 0, 0, 0, 302, 303, 0, 0, 0, 0, 3151, 0, 0, 0, 0, 0, 3155, 0, 0, 0, 0, 0, 0, 814, 0, 0, 0, 0, 0, 0, 819,
      /* 48271 */ 0, 0, 0, 686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 0, 0, 0, 368, 368, 702, 0, 0, 0, 0, 0, 0, 0,
      /* 48302 */ 0, 0, 0, 0, 0, 0, 2315, 0, 0, 0, 0, 0, 734, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 303, 0, 0, 0, 823,
      /* 48333 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 775, 0, 0, 1174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 48365 */ 804, 0, 0, 0, 0, 1216, 1174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2336, 0, 0, 0, 0, 0, 1281, 0, 0, 0,
      /* 48395 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 342, 296, 0, 0, 0, 1295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2363, 0,
      /* 48426 */ 0, 1307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1229, 58773, 914, 57893, 57893, 58777, 57893,
      /* 48450 */ 57893, 58781, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58808, 57893, 57893, 57893, 57893,
      /* 48465 */ 57893, 57893, 57893, 58795, 57893, 58800, 57893, 57893, 58804, 57893, 57893, 58807, 57893, 57893, 57893,
      /* 48480 */ 57893, 57893, 57893, 57893, 58838, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58841, 57893,
      /* 48495 */ 57893, 57893, 57893, 57893, 57893, 57893, 58872, 57916, 57916, 58876, 57916, 57916, 57916, 57916, 57916,
      /* 48510 */ 57916, 57916, 57916, 58890, 57916, 58895, 57916, 0, 0, 0, 0, 57893, 57943, 57943, 57943, 57943, 57943,
      /* 48527 */ 57943, 58428, 57943, 57943, 58444, 57916, 58899, 57916, 57916, 58902, 57916, 57916, 57916, 57916, 57916,
      /* 48542 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59985, 57916, 57916, 57916, 1860, 0, 0, 0, 0, 0, 0, 0,
      /* 48561 */ 0, 0, 0, 0, 0, 0, 0, 0, 1245, 528, 528, 528, 528, 1902, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 48584 */ 1914, 528, 528, 0, 57893, 57893, 57893, 57893, 57893, 57893, 155942, 1151, 0, 0, 1156, 0, 0, 0, 0, 327,
      /* 48604 */ 327, 377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1210, 0, 368, 368, 0, 1213, 0, 1929, 528, 528, 528, 528, 528, 528,
      /* 48629 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 896, 57893, 57893, 57893, 59345, 57893, 57893, 57893,
      /* 48646 */ 57893, 57893, 57893, 57893, 57893, 57893, 59357, 57893, 57893, 1, 24578, 3, 155942, 156282, 296, 0, 0,
      /* 48663 */ 0, 0, 0, 302, 303, 0, 57916, 57916, 59445, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 48680 */ 57916, 59457, 57916, 57916, 57916, 57916, 57916, 59967, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 48695 */ 57916, 57916, 57916, 57943, 57943, 57943, 57943, 61474, 57943, 59541, 57943, 57943, 57943, 57943, 57943,
      /* 48710 */ 57943, 57943, 57943, 57943, 59553, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 61152, 57943, 57943,
      /* 48725 */ 57943, 57943, 57943, 57943, 57943, 528, 528, 528, 2763, 2764, 57893, 57893, 57893, 60112, 57943, 57943,
      /* 48741 */ 57943, 59591, 59592, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 48756 */ 59601, 57943, 57943, 57943, 57893, 59917, 59918, 59919, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 48771 */ 57893, 57893, 57893, 57893, 57893, 58848, 57893, 57893, 58852, 57916, 59989, 57916, 57916, 57916, 57916,
      /* 48786 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60002, 57943, 60072, 57943, 57943, 57943,
      /* 48801 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60085, 57893, 57893, 60325, 57893,
      /* 48816 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58849, 57893, 57893,
      /* 48831 */ 0, 0, 0, 3216, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2484, 528, 528, 528,
      /* 48852 */ 528, 528, 3243, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2891, 528, 528, 57893,
      /* 48872 */ 57893, 57893, 57893, 60634, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 48887 */ 0, 2999, 0, 0, 0, 61125, 57916, 57916, 57916, 57916, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 48904 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60962, 528, 528, 4092, 528, 528, 528, 528, 528, 528,
      /* 48921 */ 528, 57893, 61444, 57893, 61445, 57893, 57893, 57893, 2589, 0, 0, 0, 57916, 57916, 57916, 57916, 57916,
      /* 48938 */ 57916, 57916, 57916, 57916, 61106, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59954, 57916,
      /* 48953 */ 57916, 59958, 57916, 57916, 57916, 59962, 57893, 61449, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 48968 */ 57893, 57916, 61458, 57916, 61459, 57916, 57916, 57893, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 48983 */ 57943, 57943, 57943, 57943, 57943, 59540, 57916, 61463, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 48998 */ 57916, 57943, 61472, 57943, 61473, 57943, 57943, 528, 528, 1715, 528, 528, 1718, 57893, 57893, 59064,
      /* 49014 */ 57893, 57893, 59067, 1151, 0, 57943, 61477, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 0,
      /* 49030 */ 0, 0, 0, 0, 0, 0, 1814, 0, 0, 0, 0, 0, 0, 0, 0, 528, 1338, 528, 528, 528, 528, 528, 528, 528, 528, 4291,
      /* 49056 */ 57893, 57893, 57893, 61637, 57916, 57916, 57916, 61639, 57943, 57943, 57943, 61641, 0, 0, 0, 0, 3178, 0,
      /* 49074 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1312, 0, 0, 0, 0, 326, 327, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 49105 */ 1186, 0, 0, 0, 377, 0, 131072, 0, 0, 0, 440, 377, 0, 0, 445, 451, 0, 377, 461, 474, 474, 474, 487, 487,
      /* 49129 */ 487, 487, 487, 487, 487, 487, 487, 487, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509,
      /* 49150 */ 509, 509, 509, 532, 57898, 532, 57898, 532, 532, 57898, 532, 532, 57921, 57898, 532, 532, 57898, 57898,
      /* 49168 */ 57898, 57898, 57948, 57948, 57898, 57898, 57898, 57898, 57948, 57948, 57898, 532, 57898, 57898, 57921,
      /* 49183 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57921, 57921, 57898, 57898, 57948, 57898, 57898, 57898,
      /* 49198 */ 1, 24578, 3, 155942, 155942, 296, 0, 0, 0, 0, 0, 302, 303, 0, 1188, 0, 1190, 1191, 0, 0, 0, 1193, 1194,
      /* 49221 */ 0, 0, 0, 0, 0, 0, 0, 0, 4997120, 0, 0, 5038080, 0, 0, 0, 5095424, 5103616, 0, 0, 1232, 1233, 0, 0, 0, 0,
      /* 49246 */ 0, 0, 0, 0, 0, 0, 0, 0, 370, 0, 0, 0, 1263, 1265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1200, 0,
      /* 49276 */ 1317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1303, 0, 0, 0, 1331, 1193, 528, 528, 1390, 528, 528, 1392, 528, 528,
      /* 49300 */ 528, 528, 1397, 528, 528, 528, 528, 528, 528, 3500, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 49320 */ 61443, 57893, 57893, 57893, 57893, 57893, 58773, 914, 57893, 57893, 58778, 57893, 57893, 57893, 57893,
      /* 49335 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 2588, 2999, 0, 0, 0, 58831, 57893, 57893, 57893, 57893,
      /* 49352 */ 58836, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58811, 58813, 57893, 57893,
      /* 49367 */ 57893, 57893, 58873, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 49382 */ 57916, 57916, 57916, 60380, 57916, 58900, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 49397 */ 57916, 57916, 57916, 57916, 57916, 58928, 57916, 57916, 58915, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 49412 */ 57916, 58924, 57916, 57916, 58926, 57916, 57916, 57916, 57916, 57916, 59980, 57916, 57916, 57916, 57916,
      /* 49427 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 61530, 57916, 57916, 57943, 57943, 57916, 58931, 57916,
      /* 49442 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 58950, 57916,
      /* 49457 */ 57916, 57916, 58956, 57916, 57916, 57916, 57916, 0, 58831, 57943, 57943, 58967, 57943, 57943, 57943,
      /* 49472 */ 57943, 57943, 57943, 60464, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60470, 57943, 57943,
      /* 49487 */ 57943, 57943, 59018, 57943, 57943, 59020, 57943, 57943, 57943, 57943, 59026, 57943, 57943, 57943, 528,
      /* 49502 */ 528, 57893, 57893, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2778, 1963, 528, 528, 528, 528, 528, 528,
      /* 49527 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 901, 0, 0, 2293, 0, 2294, 0, 0, 0, 0, 0, 2297, 0, 0, 0, 0,
      /* 49552 */ 0, 0, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 57893, 59862, 57893, 57893, 57893, 57893, 57893,
      /* 49571 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60650, 57893, 59878, 57893, 57893,
      /* 49586 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58816, 57893, 59947,
      /* 49601 */ 57916, 57916, 57916, 57916, 59951, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 49616 */ 57943, 57943, 57943, 57943, 57943, 61475, 60015, 57916, 57916, 57916, 57916, 57916, 57916, 57943, 57943,
      /* 49631 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 61133, 57943, 60030, 57943, 57943, 57943, 57943, 60034,
      /* 49646 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60723, 57943, 57943,
      /* 49661 */ 57943, 60098, 57943, 57943, 57943, 57943, 57943, 57943, 528, 528, 528, 528, 528, 57893, 57893, 57893,
      /* 49677 */ 57893, 57893, 0, 0, 0, 1729, 0, 0, 0, 0, 2844, 0, 0, 0, 0, 0, 2849, 0, 0, 0, 0, 0, 0, 0, 1852, 0, 0, 0,
      /* 49705 */ 0, 0, 0, 0, 1859, 0, 57916, 57916, 57916, 60347, 57916, 60348, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 49723 */ 57916, 57916, 57916, 58385, 57916, 57916, 57916, 57916, 58403, 57916, 0, 0, 3205, 0, 0, 0, 0, 0, 0, 0,
      /* 49743 */ 0, 0, 0, 0, 0, 0, 2374, 0, 0, 528, 528, 528, 528, 3253, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 49766 */ 528, 528, 528, 1926, 528, 528, 528, 57916, 60688, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 49782 */ 60694, 57916, 57916, 57916, 57916, 57916, 57916, 58906, 58908, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 49797 */ 57916, 57916, 59451, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59498, 57916, 57916, 57916,
      /* 49812 */ 57916, 57916, 57916, 57916, 57916, 60672, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57943, 57943,
      /* 49827 */ 60737, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60743, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 49842 */ 57943, 61339, 57943, 57943, 57943, 528, 57893, 0, 0, 0, 0, 0, 0, 3671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 49867 */ 0, 665, 0, 0, 668, 57916, 61126, 57916, 57916, 57916, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 49884 */ 57943, 57943, 57943, 57943, 57943, 57943, 60961, 57943, 57916, 57916, 57916, 61239, 57916, 57916, 57943,
      /* 49899 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60959, 57943, 57943, 57943, 57943, 61258,
      /* 49914 */ 57943, 57943, 528, 528, 57893, 57893, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2776, 2777, 0, 528, 528, 528,
      /* 49938 */ 528, 4018, 528, 528, 528, 528, 528, 528, 528, 528, 57893, 57893, 57893, 57893, 57893, 57893, 58280,
      /* 49955 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 61377, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 49970 */ 57893, 57893, 57893, 57916, 57916, 57916, 61223, 57916, 57916, 57916, 57916, 57916, 57916, 61393, 57916,
      /* 49985 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57943, 57943, 57943, 57943, 60025, 57943, 57943,
      /* 50000 */ 57943, 57943, 57943, 57943, 57943, 61409, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 50015 */ 0, 0, 0, 4241, 0, 4243, 528, 528, 528, 528, 528, 4094, 528, 528, 528, 528, 528, 57893, 57893, 57893,
      /* 50035 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59372, 57893, 57893,
      /* 50050 */ 57893, 61451, 57893, 57893, 57893, 57893, 57893, 57893, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 50065 */ 57916, 57916, 57916, 61318, 57916, 57916, 57916, 61465, 57916, 57916, 57916, 57916, 57916, 57916, 57943,
      /* 50080 */ 57943, 57943, 57943, 57943, 57943, 61244, 57943, 57943, 57943, 57943, 57943, 57943, 61479, 57943, 57943,
      /* 50095 */ 57943, 57943, 57943, 57943, 0, 0, 0, 0, 0, 0, 0, 1865, 1866, 0, 0, 0, 1869, 0, 0, 0, 0, 0, 328, 329,
      /* 50119 */ 330, 331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1855, 1856, 0, 1857, 1858, 0, 0, 376, 0, 0, 0, 0, 0, 328, 376,
      /* 50146 */ 331, 375, 0, 0, 0, 0, 0, 0, 363, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 450560, 0, 0, 0, 331,
      /* 50173 */ 0, 0, 0, 0, 0, 0, 376, 0, 0, 0, 0, 0, 0, 0, 0, 5210112, 0, 5365760, 0, 5554176, 5570560, 5578752, 0,
      /* 50196 */ 462, 475, 475, 475, 488, 488, 488, 488, 499, 501, 488, 488, 499, 488, 510, 510, 510, 510, 510, 525, 510,
      /* 50217 */ 510, 510, 525, 510, 510, 510, 510, 510, 510, 533, 57899, 533, 57899, 533, 533, 57899, 533, 533, 57922,
      /* 50236 */ 57899, 533, 533, 57899, 57899, 57899, 57899, 57949, 57949, 57899, 57899, 57899, 57899, 57949, 57949,
      /* 50251 */ 57899, 533, 57899, 57899, 57922, 57899, 57899, 57899, 57899, 57899, 57899, 57899, 57922, 57922, 57899,
      /* 50266 */ 57899, 57949, 57899, 57899, 57899, 1, 24578, 3, 155942, 155942, 296, 0, 0, 0, 0, 0, 302, 303, 0, 0, 670,
      /* 50287 */ 671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 683, 684, 685, 0, 0, 0, 689, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368,
      /* 50317 */ 368, 0, 0, 0, 0, 0, 0, 707, 708, 0, 0, 0, 0, 0, 714, 0, 0, 0, 718, 0, 720, 0, 0, 0, 0, 0, 0, 727, 0, 0,
      /* 50347 */ 0, 0, 0, 1163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6152192, 0, 0, 0, 6316032, 0, 731, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 50376 */ 0, 0, 0, 0, 0, 0, 0, 1292, 778, 779, 0, 0, 0, 0, 0, 0, 0, 0, 788, 0, 790, 0, 0, 0, 0, 0, 1201, 0, 0, 0,
      /* 50406 */ 0, 0, 0, 0, 0, 0, 0, 3675, 0, 0, 0, 3830, 0, 822, 0, 0, 0, 0, 0, 822, 822, 825, 0, 0, 0, 790, 0, 0, 0,
      /* 50435 */ 0, 0, 1235, 0, 1237, 0, 0, 0, 0, 1242, 0, 0, 0, 0, 0, 1268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3675, 0, 0,
      /* 50464 */ 3829, 0, 0, 0, 0, 834, 0, 0, 0, 0, 0, 0, 0, 788, 0, 0, 0, 834, 528, 528, 0, 57893, 57893, 57893, 57893,
      /* 50489 */ 57893, 57893, 155942, 1151, 0, 302, 0, 0, 306, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 65536, 303, 0,
      /* 50512 */ 528, 848, 528, 854, 528, 528, 869, 528, 528, 880, 528, 885, 528, 528, 894, 897, 902, 528, 910, 528,
      /* 50532 */ 57893, 57893, 57893, 58267, 57893, 58273, 57893, 57893, 58288, 57893, 57893, 58299, 57893, 58304, 57893,
      /* 50547 */ 57893, 58313, 58316, 58321, 57893, 58329, 57893, 0, 57916, 57916, 57916, 58343, 57916, 0, 0, 0, 0,
      /* 50564 */ 57893, 57943, 57943, 57943, 57943, 57943, 57943, 58430, 57943, 57943, 57943, 57943, 57943, 59547, 57943,
      /* 50579 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 61417, 57943, 0, 0, 0, 58349,
      /* 50595 */ 57916, 57916, 58364, 57916, 57916, 58375, 57916, 58380, 57916, 57916, 58389, 58392, 58397, 57916, 58405,
      /* 50610 */ 57916, 0, 0, 0, 0, 58304, 57943, 57943, 57943, 58418, 57943, 58424, 57943, 57943, 58439, 57943, 1906,
      /* 50627 */ 528, 528, 528, 528, 59349, 57893, 57893, 57893, 57893, 0, 0, 0, 0, 0, 3140, 0, 0, 3143, 3144, 0, 0,
      /* 50648 */ 3147, 3148, 0, 57943, 58450, 57943, 58455, 57943, 57943, 58464, 58467, 58472, 57943, 58480, 57943, 848,
      /* 50664 */ 528, 528, 1142, 902, 528, 0, 57893, 58267, 57893, 58492, 58321, 57893, 155942, 1151, 0, 0, 0, 0, 0, 0,
      /* 50684 */ 364, 365, 366, 367, 0, 0, 368, 0, 296, 0, 0, 0, 0, 1176, 0, 0, 0, 0, 0, 0, 0, 1183, 0, 0, 0, 0, 0, 0,
      /* 50712 */ 3165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 0, 421, 0, 0, 1203, 1204, 0, 0, 0, 0, 1208, 0, 0,
      /* 50739 */ 0, 368, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 713, 0, 0, 1231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 50771 */ 0, 1244, 0, 0, 0, 1248, 0, 0, 1200, 0, 0, 0, 0, 0, 749, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 726, 0, 0, 0,
      /* 50801 */ 0, 528, 1347, 528, 528, 528, 528, 528, 528, 1362, 528, 528, 528, 1367, 528, 528, 528, 528, 528, 2464,
      /* 50821 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1910, 528, 528, 528, 528, 58773, 914, 57893,
      /* 50840 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58786, 57893, 57893, 57893, 0, 0, 0, 0,
      /* 50857 */ 57916, 57916, 57916, 57916, 57916, 57916, 59944, 57916, 57916, 57893, 57893, 57893, 58801, 57893, 57893,
      /* 50872 */ 57893, 58806, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58809, 57893, 57893, 57893, 57893,
      /* 50887 */ 57893, 57893, 57893, 57893, 57893, 58854, 57893, 57893, 57893, 57893, 57893, 57893, 58865, 57893, 50676,
      /* 50902 */ 58773, 990, 57916, 57916, 57893, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 50917 */ 59537, 57943, 57943, 528, 1351, 528, 1408, 528, 528, 58790, 57893, 57893, 58847, 57893, 57893, 1151, 0,
      /* 50934 */ 57916, 57916, 57916, 58901, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 50949 */ 57916, 58391, 57916, 57916, 57916, 57916, 57916, 57916, 58918, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 50964 */ 57916, 57916, 57916, 57916, 57916, 57916, 58396, 57916, 57916, 57916, 57916, 57916, 57916, 58933, 57916,
      /* 50979 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 58949, 57916, 0, 0, 0, 0, 57893, 57943,
      /* 50996 */ 57943, 57943, 57943, 57943, 57943, 58431, 57943, 57943, 57943, 57943, 57943, 60063, 57943, 57943, 57943,
      /* 51011 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60428, 57943, 60430, 57943, 57943, 57943,
      /* 51026 */ 57943, 58975, 57943, 57943, 57943, 57943, 57943, 57943, 58990, 57943, 57943, 57943, 58995, 57943, 2280,
      /* 51041 */ 528, 2282, 528, 528, 59629, 57893, 59631, 57893, 57893, 0, 0, 0, 0, 0, 0, 1298, 0, 0, 0, 0, 1303, 0, 0,
      /* 51064 */ 0, 0, 59055, 57943, 528, 528, 528, 528, 528, 528, 57893, 57893, 57893, 57893, 57893, 57893, 1151, 1724,
      /* 51082 */ 0, 1760, 0, 0, 1763, 1764, 1765, 0, 1767, 1768, 0, 0, 0, 0, 1773, 0, 0, 0, 0, 3192, 0, 0, 0, 0, 3197, 0,
      /* 51108 */ 0, 0, 0, 0, 0, 0, 2368, 2369, 0, 0, 0, 0, 0, 0, 0, 692, 0, 0, 0, 0, 0, 0, 699, 368, 1807, 0, 0, 0, 0, 0,
      /* 51138 */ 0, 0, 0, 1816, 1817, 0, 0, 0, 0, 0, 0, 373, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 352256, 0,
      /* 51165 */ 0, 0, 1823, 0, 0, 1825, 0, 0, 0, 0, 0, 0, 0, 0, 1829, 1830, 1831, 0, 1870, 0, 0, 0, 1888, 1740, 1740,
      /* 51190 */ 1890, 528, 1892, 528, 1893, 1894, 528, 1896, 528, 528, 528, 1900, 528, 528, 528, 528, 528, 528, 528,
      /* 51209 */ 528, 528, 1913, 528, 528, 0, 0, 0, 0, 0, 0, 57893, 60278, 57893, 57893, 57893, 57893, 57893, 57893, 0,
      /* 51229 */ 2592, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59969, 57916, 57916, 57916, 57916, 57916,
      /* 51244 */ 57916, 59974, 57916, 528, 528, 1917, 528, 528, 528, 528, 1921, 528, 1923, 528, 528, 528, 528, 528, 528,
      /* 51263 */ 1393, 528, 1395, 528, 528, 528, 528, 528, 528, 528, 872, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 51283 */ 3710, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1933, 1934, 1936, 528, 528, 528, 528, 528, 528,
      /* 51303 */ 528, 1944, 1945, 528, 1947, 528, 528, 1950, 1951, 528, 528, 528, 528, 528, 528, 528, 1959, 528, 1961,
      /* 51322 */ 528, 1964, 528, 528, 528, 528, 528, 1971, 528, 528, 1973, 528, 528, 528, 528, 528, 528, 3855, 528, 528,
      /* 51342 */ 528, 528, 528, 57893, 57893, 57893, 57893, 57893, 57893, 58279, 57893, 57893, 57893, 57893, 57893, 528,
      /* 51358 */ 528, 528, 528, 58773, 0, 59332, 57893, 59334, 57893, 59335, 57893, 59337, 57893, 59339, 57893, 302, 306,
      /* 51375 */ 0, 0, 0, 0, 3141, 0, 0, 0, 3145, 0, 0, 0, 0, 0, 0, 2832, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2835, 0, 0, 0, 0, 0,
      /* 51406 */ 0, 57893, 57893, 59343, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59356, 57893,
      /* 51421 */ 57893, 57893, 0, 0, 0, 0, 57916, 57916, 57916, 57916, 59942, 57916, 57916, 57916, 57916, 57916, 59515,
      /* 51438 */ 57916, 57916, 59517, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 0, 57893, 57943, 57943, 58966,
      /* 51453 */ 57943, 57943, 58970, 57943, 57893, 59360, 57893, 57893, 57893, 57893, 59364, 57893, 59366, 57893, 57893,
      /* 51468 */ 57893, 57893, 57893, 57893, 57893, 58839, 57893, 57893, 58846, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 51483 */ 57893, 57893, 59376, 59377, 59379, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59387, 59388, 57893,
      /* 51498 */ 2770, 2291, 0, 2771, 2294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 770, 0, 0, 0, 0, 0, 59390, 57893, 57893, 59393,
      /* 51523 */ 59394, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59402, 57893, 59404, 57893, 2770, 2291, 0, 2771,
      /* 51539 */ 2294, 0, 0, 0, 0, 0, 0, 2775, 0, 0, 0, 0, 0, 784, 0, 0, 679, 0, 0, 0, 0, 0, 0, 0, 660, 661, 0, 0, 0, 0,
      /* 51569 */ 0, 0, 0, 384, 0, 139264, 147456, 0, 406, 0, 0, 406, 59407, 57893, 57893, 57893, 57893, 57893, 59415,
      /* 51588 */ 57893, 57893, 59417, 57893, 57893, 57893, 57893, 57893, 57893, 0, 0, 57916, 57916, 57916, 57916, 60660,
      /* 51604 */ 57916, 57916, 57916, 57916, 59443, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59456,
      /* 51619 */ 57916, 57916, 57916, 57916, 57916, 58878, 57916, 57916, 57916, 58882, 57916, 57916, 58893, 57916, 57916,
      /* 51634 */ 58897, 59460, 57916, 57916, 57916, 57916, 59464, 57916, 59466, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 51649 */ 57916, 57916, 59467, 59468, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59476, 59477, 59479,
      /* 51664 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59487, 59488, 57916, 59490, 57916, 57916, 59493, 59494,
      /* 51679 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59502, 57916, 59504, 57916, 59507, 57943, 57943, 57943,
      /* 51694 */ 59560, 57943, 59562, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 51709 */ 60987, 57943, 57943, 57943, 59572, 59573, 59575, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59583,
      /* 51724 */ 59584, 57943, 57943, 59586, 57943, 57943, 57943, 57943, 57943, 60731, 57943, 57943, 57943, 57943, 57943,
      /* 51739 */ 57943, 57943, 57943, 57943, 57943, 57943, 60081, 57943, 57943, 57943, 57943, 57943, 59589, 59590, 57943,
      /* 51754 */ 57943, 57943, 57943, 57943, 57943, 57943, 59598, 57943, 59600, 57943, 59603, 57943, 57943, 57943, 57943,
      /* 51769 */ 57943, 60739, 57943, 57943, 57943, 60742, 57943, 60744, 57943, 57943, 57943, 57943, 57943, 57943, 60740,
      /* 51784 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59023, 57943, 57943, 57943, 57943, 57943,
      /* 51799 */ 57943, 57943, 57943, 57943, 57943, 59611, 57943, 57943, 59613, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 51814 */ 57943, 57943, 57943, 60039, 57943, 57943, 57943, 57943, 57943, 57943, 0, 0, 2293, 0, 2294, 0, 0, 0, 0,
      /* 51833 */ 0, 0, 0, 0, 0, 0, 2301, 0, 0, 2304, 2305, 0, 0, 0, 2309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6406144, 5357568, 0,
      /* 51860 */ 5505024, 0, 0, 0, 0, 2352, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1276, 0, 1825, 0, 2365, 0, 0, 0, 0,
      /* 51889 */ 0, 0, 0, 0, 2372, 0, 0, 2375, 0, 0, 0, 0, 3217, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 51913 */ 528, 2929, 528, 528, 528, 0, 2378, 0, 0, 0, 0, 0, 0, 2385, 0, 2387, 0, 0, 0, 0, 0, 0, 403, 0, 0, 0, 0,
      /* 51940 */ 0, 0, 0, 0, 332, 333, 0, 0, 0, 0, 0, 0, 0, 0, 334, 335, 336, 0, 0, 0, 0, 0, 0, 0, 0, 2396, 0, 0, 0, 0,
      /* 51970 */ 0, 0, 0, 0, 0, 0, 0, 0, 697, 698, 0, 368, 2406, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2417, 0, 0, 0, 0,
      /* 52001 */ 3433, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 786, 0, 0, 0, 528, 2433, 528, 2435, 528, 528, 528, 528, 528, 528,
      /* 52027 */ 2443, 528, 2445, 528, 528, 528, 528, 528, 1414, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1956,
      /* 52047 */ 528, 528, 528, 528, 528, 528, 528, 528, 2451, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 52067 */ 528, 528, 2902, 528, 528, 2473, 528, 528, 528, 528, 528, 528, 2480, 528, 528, 528, 528, 528, 528, 528,
      /* 52087 */ 528, 1906, 528, 528, 528, 528, 528, 528, 528, 57893, 57893, 57893, 59864, 57893, 59866, 57893, 57893,
      /* 52104 */ 57893, 57893, 57893, 57893, 59874, 57893, 59876, 57893, 2770, 2291, 0, 2771, 2294, 0, 0, 2773, 0, 0, 0,
      /* 52123 */ 0, 0, 0, 0, 0, 2359296, 418, 418, 0, 0, 0, 0, 0, 57893, 57893, 59904, 59905, 57893, 57893, 57893, 57893,
      /* 52144 */ 57893, 57893, 59912, 57893, 57893, 57893, 57893, 57893, 57893, 60885, 57893, 60887, 57893, 57893, 57893,
      /* 52159 */ 57893, 57893, 57893, 57893, 59397, 57893, 57893, 59400, 57893, 57893, 57893, 57893, 57893, 59930, 59931,
      /* 52174 */ 57893, 0, 0, 0, 0, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 58910, 57916, 57916,
      /* 52191 */ 57916, 57916, 57916, 57916, 59963, 57916, 59965, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59971,
      /* 52206 */ 57916, 57916, 57916, 57916, 57916, 57916, 60914, 57916, 57916, 57916, 57916, 57916, 60918, 57916, 57916,
      /* 52221 */ 57916, 57916, 60016, 57916, 57916, 60019, 60020, 57916, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 52236 */ 57943, 57943, 0, 4239, 0, 0, 0, 0, 528, 60046, 57943, 60048, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 52254 */ 57943, 60054, 57943, 57943, 57943, 57943, 57943, 57943, 58979, 58986, 57943, 57943, 57943, 57943, 57943,
      /* 52269 */ 57943, 57943, 57943, 57943, 60079, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60099, 57943, 57943,
      /* 52284 */ 60102, 60103, 57943, 2435, 528, 2762, 528, 528, 59866, 57893, 60111, 57893, 57893, 57893, 57893, 57893,
      /* 52300 */ 61083, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 61089, 57893, 57893, 57893, 57893, 57893,
      /* 52315 */ 61219, 57893, 57893, 57893, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 1272, 57893, 57943, 57943,
      /* 52330 */ 57943, 57943, 57943, 57943, 57943, 528, 3132, 528, 528, 528, 57893, 60479, 57893, 57893, 0, 0, 2829, 0,
      /* 52348 */ 0, 0, 0, 2833, 0, 0, 0, 0, 0, 0, 0, 0, 312, 311, 0, 0, 0, 311, 311, 312, 2905, 528, 528, 528, 528, 2909,
      /* 52374 */ 528, 528, 528, 2914, 528, 528, 528, 528, 528, 528, 1920, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 52394 */ 1908, 528, 528, 528, 528, 528, 528, 528, 528, 2922, 528, 528, 528, 528, 528, 528, 528, 2927, 528, 528,
      /* 52414 */ 528, 528, 528, 528, 3940, 528, 528, 528, 528, 528, 528, 3946, 528, 528, 60284, 57893, 57893, 57893,
      /* 52432 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59406, 60296, 57893,
      /* 52447 */ 60298, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59403,
      /* 52462 */ 57893, 57893, 57893, 60324, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60332, 57893, 57893,
      /* 52477 */ 57893, 57893, 57893, 57893, 61096, 57893, 57893, 57893, 57893, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 52492 */ 60703, 57916, 57916, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 58466, 57943, 57943, 57943, 57943,
      /* 52507 */ 528, 528, 528, 896, 57893, 57893, 57893, 60338, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 0,
      /* 52523 */ 2999, 0, 0, 0, 0, 0, 1323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2836, 2837, 0, 0, 0, 0, 57916, 60382, 57916,
      /* 52549 */ 57916, 57916, 57916, 60386, 57916, 57916, 57916, 60391, 57916, 57916, 57916, 57916, 57916, 57916, 60926,
      /* 52564 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59956, 57916, 57916, 57916, 57916, 57916,
      /* 52579 */ 57916, 57916, 57916, 57916, 60399, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60405, 57916,
      /* 52594 */ 57916, 57916, 57916, 57916, 59992, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 52609 */ 58925, 57916, 57916, 57916, 57916, 57916, 57943, 57943, 57943, 57943, 60447, 57943, 57943, 57943, 57943,
      /* 52624 */ 60451, 57943, 57943, 57943, 60456, 57943, 57943, 528, 1352, 528, 528, 1717, 528, 58791, 57893, 57893,
      /* 52640 */ 57893, 59066, 57893, 1151, 0, 0, 0, 3177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2390, 0, 0, 528, 528,
      /* 52666 */ 528, 528, 3232, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1941, 528, 528, 528, 528,
      /* 52686 */ 528, 3251, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2892, 528, 57893,
      /* 52705 */ 57893, 57893, 57893, 60643, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 52720 */ 50676, 58773, 990, 57916, 57916, 3442, 3443, 0, 3444, 0, 3446, 0, 0, 0, 0, 3448, 0, 0, 0, 0, 0, 0, 737,
      /* 52743 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2360, 0, 0, 0, 0, 0, 2364, 3467, 0, 0, 0, 0, 3472, 3473, 0, 3475, 0, 0, 3478,
      /* 52771 */ 0, 0, 0, 3481, 528, 528, 528, 528, 3498, 528, 528, 528, 528, 528, 3504, 528, 528, 528, 528, 528, 528,
      /* 52792 */ 4020, 528, 4022, 4023, 528, 4025, 528, 57893, 57893, 57893, 57893, 57893, 57893, 60882, 57893, 57893,
      /* 52808 */ 57893, 57893, 57893, 60888, 57893, 57893, 60891, 57893, 57893, 57893, 0, 0, 0, 0, 57916, 57916, 57916,
      /* 52825 */ 59941, 57916, 59943, 57916, 57916, 57916, 57916, 57916, 60006, 60007, 60008, 57916, 57916, 57916, 57916,
      /* 52840 */ 57916, 57916, 57916, 57916, 58943, 57916, 57916, 58947, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 52855 */ 57916, 60924, 57916, 57916, 57916, 57916, 57916, 60930, 57916, 57916, 60933, 57916, 57916, 57893, 57943,
      /* 52870 */ 57943, 57943, 57943, 57943, 59532, 57943, 57943, 57943, 57943, 57943, 59538, 57943, 60991, 57943, 528,
      /* 52885 */ 528, 3650, 57893, 57893, 60997, 0, 0, 0, 0, 0, 0, 3659, 0, 0, 0, 0, 3445, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 52912 */ 0, 2812, 0, 0, 2815, 0, 0, 3662, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1306, 0, 3669, 0, 0, 0, 0, 0,
      /* 52942 */ 0, 0, 0, 0, 0, 0, 0, 3676, 0, 3678, 528, 528, 528, 528, 3705, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 52965 */ 528, 528, 528, 528, 2458, 528, 528, 528, 528, 528, 3715, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 52985 */ 528, 528, 528, 528, 528, 2903, 528, 528, 57893, 57893, 57893, 61071, 57893, 57893, 57893, 57893, 57893,
      /* 53002 */ 57893, 57893, 61076, 57893, 57893, 57893, 0, 0, 0, 0, 57916, 57916, 59940, 57916, 57916, 57916, 57916,
      /* 53019 */ 57916, 57916, 59981, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59453, 57916, 57916,
      /* 53034 */ 57916, 57916, 57916, 57916, 57893, 57893, 57893, 57893, 61095, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 53049 */ 57916, 57916, 57916, 61100, 57916, 0, 0, 0, 0, 57893, 57943, 57943, 57943, 57943, 57943, 57943, 58432,
      /* 53066 */ 57943, 57943, 57943, 57943, 57943, 60075, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 53081 */ 57943, 57943, 59048, 57943, 57943, 57943, 57943, 61134, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 53096 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 61145, 3832, 0, 0, 3835, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 53118 */ 0, 0, 772, 0, 0, 0, 57916, 57916, 61238, 57916, 57916, 57916, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 53136 */ 57943, 57943, 57943, 57943, 57943, 57943, 61142, 57943, 57943, 57943, 3924, 0, 3675, 0, 0, 0, 0, 0,
      /* 53154 */ 3932, 0, 0, 0, 0, 0, 0, 0, 312, 0, 0, 0, 0, 0, 311, 0, 311, 528, 528, 57893, 57893, 57893, 57893, 57893,
      /* 53178 */ 57893, 57893, 57893, 57893, 61301, 57893, 57893, 57893, 57893, 57893, 59363, 57893, 57893, 57893, 57893,
      /* 53193 */ 57893, 57893, 57893, 57893, 57893, 57893, 60315, 57893, 57893, 57893, 57893, 60319, 57893, 57893, 57943,
      /* 53208 */ 61333, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 528, 57893, 0, 0, 0, 0, 0, 1736,
      /* 53226 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2334720, 0, 2334720, 0, 0, 0, 0, 0, 0, 4079, 0, 0, 0, 0, 0, 0, 0, 528,
      /* 53254 */ 528, 528, 528, 528, 528, 528, 4157, 528, 4159, 528, 528, 4091, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 53274 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57916, 57916, 61448, 57893, 57893, 57893, 57893,
      /* 53289 */ 57893, 57893, 57893, 57893, 57893, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 61317,
      /* 53304 */ 57916, 61462, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57943, 57943, 57943, 57943,
      /* 53319 */ 57943, 57943, 57943, 60028, 57943, 61476, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 53334 */ 4141, 4142, 0, 0, 0, 4145, 528, 528, 61507, 61508, 61509, 57893, 57893, 57893, 61512, 57893, 61514,
      /* 53351 */ 57893, 57893, 57893, 57893, 61519, 61520, 61521, 61522, 57916, 57916, 57916, 61525, 57916, 61527, 57916,
      /* 53366 */ 57916, 57916, 57916, 61532, 61533, 61534, 61535, 57943, 57943, 57943, 61538, 57943, 61540, 57943, 57943,
      /* 53381 */ 57943, 57943, 61545, 0, 0, 0, 0, 0, 0, 3194, 0, 0, 0, 3198, 0, 3200, 0, 0, 0, 528, 4245, 528, 528, 528,
      /* 53405 */ 4249, 57893, 57893, 61595, 57893, 57893, 57893, 61599, 57893, 57916, 57916, 57893, 57943, 59529, 57943,
      /* 53420 */ 57943, 57943, 57943, 57943, 57943, 57943, 59536, 57943, 57943, 57943, 57943, 57943, 59040, 57943, 57943,
      /* 53435 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 528, 3412, 528, 57893, 60759, 57893, 61601,
      /* 53450 */ 57916, 57916, 57916, 61605, 57916, 57943, 57943, 61607, 57943, 57943, 57943, 61611, 57943, 0, 0, 0, 0,
      /* 53467 */ 0, 2342912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4359058, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 53485 */ 4358144, 4358144, 4358144, 6275072, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 53496 */ 4358144, 4358144, 0, 413, 0, 0, 0, 0, 0, 0, 413, 139264, 147456, 0, 0, 0, 422, 0, 0, 0, 0, 3456, 0, 0,
      /* 53520 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 749, 0, 0, 0, 0, 372, 372, 0, 430, 131072, 372, 430, 430, 0, 333, 372, 430,
      /* 53546 */ 0, 0, 430, 456, 430, 0, 0, 0, 430, 495, 495, 495, 500, 495, 495, 495, 500, 495, 430, 430, 430, 430, 430,
      /* 53569 */ 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 534, 57900, 534, 57900, 534, 534, 57900, 534,
      /* 53588 */ 534, 57923, 57900, 534, 534, 57900, 57900, 57900, 57900, 57950, 57950, 57900, 57900, 57900, 57900,
      /* 53603 */ 57950, 57950, 57900, 534, 57900, 57900, 57923, 57900, 57900, 57900, 57900, 57900, 57900, 57900, 57923,
      /* 53618 */ 57923, 57900, 57900, 57950, 57900, 57900, 57900, 1, 24578, 3, 155942, 155942, 296, 0, 0, 0, 0, 0, 302,
      /* 53637 */ 303, 0, 841, 528, 528, 528, 528, 528, 528, 873, 528, 528, 528, 528, 528, 528, 528, 528, 1939, 528, 528,
      /* 53658 */ 528, 528, 528, 528, 528, 0, 0, 1175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2416, 0, 0, 0, 0, 0, 1296,
      /* 53686 */ 0, 1175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2371, 0, 0, 0, 0, 0, 58773, 914, 57893, 57893, 57893, 57893,
      /* 53710 */ 57893, 57893, 57893, 57893, 58784, 57893, 57893, 57893, 57893, 57893, 57893, 61210, 57893, 57893, 57893,
      /* 53725 */ 57893, 57893, 57893, 57893, 57893, 57893, 60626, 57893, 57893, 60629, 57893, 57893, 57893, 58796, 57893,
      /* 53740 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59424,
      /* 53755 */ 57943, 58973, 57943, 57943, 57943, 57943, 57943, 58985, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 53770 */ 57943, 57943, 60053, 57943, 57943, 57943, 57943, 57943, 57943, 0, 1873, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 53792 */ 0, 0, 0, 1743, 1744, 57943, 60460, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 53809 */ 57943, 57943, 57943, 57943, 57943, 60726, 57943, 61135, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 53824 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 61257, 528, 528, 528, 61636, 57893, 57893,
      /* 53839 */ 57893, 61638, 57916, 57916, 57916, 61640, 57943, 57943, 57943, 0, 0, 0, 0, 3471, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 53861 */ 0, 0, 0, 1868, 0, 0, 0, 0, 0, 0, 0, 431, 131072, 0, 431, 431, 0, 0, 0, 431, 446, 0, 431, 0, 0, 0, 0,
      /* 53888 */ 3663, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1289, 0, 0, 0, 0, 431, 476, 476, 476, 489, 489, 489, 489, 489,
      /* 53914 */ 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 535, 57901, 535, 57901, 535, 535, 57901, 535,
      /* 53933 */ 535, 57924, 57901, 535, 535, 57901, 57901, 57901, 57901, 57951, 57951, 57901, 57901, 57901, 57901,
      /* 53948 */ 57951, 57951, 57901, 535, 57901, 57901, 57924, 57901, 57901, 57901, 57901, 57901, 57901, 57901, 57924,
      /* 53963 */ 57924, 57901, 57901, 57951, 57901, 57901, 57901, 1, 24578, 3, 155942, 155942, 296, 0, 0, 0, 0, 0, 302,
      /* 53982 */ 303, 0, 528, 528, 528, 528, 58773, 1986, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 53999 */ 57893, 59353, 57893, 57893, 57893, 57893, 57893, 0, 0, 0, 2327, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 773,
      /* 54023 */ 0, 0, 776, 2351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1774, 57893, 57893, 59892, 57893, 57893,
      /* 54048 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59900, 57893, 57893, 0, 0,
      /* 54064 */ 0, 2805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 0, 0, 528, 3175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 54095 */ 0, 0, 0, 1790, 0, 0, 3431, 0, 0, 0, 0, 0, 3437, 0, 0, 0, 0, 0, 0, 0, 331, 0, 139264, 147456, 0, 0, 0, 0,
      /* 54123 */ 0, 3482, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1372, 57893, 57893,
      /* 54143 */ 57893, 57893, 60883, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60893, 60908,
      /* 54158 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 54173 */ 60396, 60935, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60944, 57916, 57916, 60947,
      /* 54188 */ 57916, 57916, 57893, 59528, 57943, 59530, 57943, 59531, 57943, 59533, 57943, 59535, 57943, 57943, 57943,
      /* 54203 */ 59539, 57916, 60950, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 54218 */ 57943, 57943, 59012, 57943, 57943, 60977, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 54233 */ 60986, 57943, 57943, 60989, 57943, 57943, 57943, 57943, 57943, 60966, 57943, 57943, 57943, 57943, 57943,
      /* 54248 */ 60972, 57943, 57943, 60975, 57943, 57943, 57943, 57943, 57943, 60750, 57943, 57943, 57943, 57943, 528,
      /* 54263 */ 528, 528, 57893, 57893, 57893, 0, 0, 0, 0, 0, 0, 0, 3660, 528, 528, 528, 528, 3716, 528, 3718, 528, 528,
      /* 54285 */ 528, 528, 528, 528, 528, 528, 528, 528, 3491, 528, 528, 528, 528, 528, 528, 57893, 57893, 61070, 57893,
      /* 54304 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59385, 57893, 57893, 57893,
      /* 54319 */ 57893, 57893, 57893, 57893, 61082, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 61088, 57893,
      /* 54334 */ 61090, 57943, 61146, 57943, 61148, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 54349 */ 57943, 528, 57893, 0, 0, 0, 528, 528, 528, 528, 3854, 528, 528, 528, 528, 528, 528, 528, 57893, 57893,
      /* 54369 */ 57893, 57893, 57893, 57893, 58277, 57893, 57893, 58293, 57893, 57893, 61216, 57893, 57893, 57893, 57893,
      /* 54384 */ 57893, 57893, 57893, 57893, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 54399 */ 57916, 57916, 57916, 61229, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 61235, 57916,
      /* 54414 */ 57916, 57916, 57916, 57916, 61467, 57916, 57916, 61469, 57916, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 54429 */ 57943, 60449, 57943, 57943, 60453, 57943, 57943, 57943, 57943, 57943, 61248, 57943, 57943, 57943, 57943,
      /* 54444 */ 57943, 57943, 57943, 57943, 57943, 61254, 57943, 57943, 57943, 57943, 57943, 57943, 58980, 57943, 57943,
      /* 54459 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60734, 57943, 57943, 57943, 57943, 57943, 57916,
      /* 54474 */ 61625, 61626, 57916, 57916, 57943, 57943, 61629, 61630, 57943, 57943, 0, 0, 0, 0, 528, 528, 528, 528,
      /* 54492 */ 4275, 528, 57893, 57893, 57893, 57893, 61623, 57893, 57916, 0, 761, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 54515 */ 0, 0, 1789, 0, 761, 0, 0, 0, 0, 0, 761, 761, 0, 0, 828, 0, 0, 0, 0, 0, 0, 738, 0, 644, 738, 0, 742, 743,
      /* 54543 */ 644, 0, 0, 528, 528, 852, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2919,
      /* 54564 */ 528, 528, 528, 528, 911, 57893, 57893, 57893, 57893, 58271, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 54580 */ 57893, 58862, 57893, 57893, 57893, 50676, 58773, 990, 57916, 58871, 58406, 0, 0, 0, 0, 57893, 57943,
      /* 54597 */ 57943, 57943, 57943, 58422, 57943, 57943, 57943, 57943, 57943, 57943, 58981, 57943, 57943, 57943, 57943,
      /* 54612 */ 57943, 57943, 57943, 57943, 57943, 57943, 60985, 57943, 57943, 57943, 57943, 57943, 528, 911, 0, 58271,
      /* 54628 */ 57893, 57893, 57893, 57893, 58330, 155942, 1151, 0, 0, 0, 0, 0, 0, 751, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 54651 */ 139264, 147456, 0, 0, 319, 0, 0, 0, 1279, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2337, 0, 57943,
      /* 54677 */ 59035, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 54692 */ 59028, 57943, 528, 528, 528, 1983, 58773, 0, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 54708 */ 57893, 57893, 59418, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59427, 50676, 0, 57916, 57916,
      /* 54723 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60377, 57916, 57916, 57916, 57916,
      /* 54738 */ 59527, 57893, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 54753 */ 57943, 60746, 57943, 59623, 528, 528, 528, 528, 528, 57893, 57893, 57893, 57893, 57893, 0, 0, 0, 0, 0,
      /* 54772 */ 0, 0, 3142, 0, 0, 0, 0, 0, 0, 0, 752, 0, 0, 0, 0, 0, 0, 758, 0, 59861, 57893, 57893, 57893, 57893,
      /* 54796 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59889, 57916, 57916, 57916,
      /* 54811 */ 57916, 59950, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60675,
      /* 54826 */ 57916, 57916, 60678, 57943, 57943, 57943, 57943, 60033, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 54841 */ 57943, 57943, 57943, 57943, 57943, 60042, 57943, 57943, 57943, 3812, 528, 57893, 61158, 57893, 0, 0, 0,
      /* 54858 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 386, 57916, 57916, 57916, 57916, 61240, 57916, 57943, 57943, 57943,
      /* 54880 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 61255, 57943, 57943, 57943, 57943, 61259,
      /* 54895 */ 57943, 528, 528, 57893, 57893, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3146, 0, 0, 0, 0, 0, 334, 0, 0, 0, 0, 0,
      /* 54923 */ 0, 0, 0, 0, 0, 0, 334, 385, 387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402, 0, 0, 0, 0, 3672, 0, 0, 0,
      /* 54954 */ 0, 0, 0, 0, 0, 0, 0, 0, 1786, 0, 0, 0, 0, 334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 334, 0, 0, 139264,
      /* 54984 */ 147456, 0, 0, 0, 0, 0, 425, 425, 0, 0, 131072, 425, 0, 0, 0, 0, 425, 0, 447, 0, 0, 425, 335, 477, 477,
      /* 55009 */ 477, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 511, 519, 519, 519, 519, 519, 526, 519, 519, 519,
      /* 55030 */ 526, 519, 519, 519, 519, 519, 519, 536, 57902, 536, 57902, 536, 536, 57902, 536, 536, 57925, 57902, 536,
      /* 55049 */ 536, 57902, 57902, 57902, 57902, 57952, 57952, 57902, 57902, 57902, 57902, 57952, 57952, 57902, 536,
      /* 55064 */ 57902, 57902, 57925, 57902, 57902, 57902, 57902, 57902, 57902, 57902, 57925, 57925, 57902, 57902, 57952,
      /* 55079 */ 57902, 57902, 57902, 1, 24578, 3, 155942, 155942, 296, 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 780, 0, 0, 0,
      /* 55102 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2789, 2790, 0, 0, 795, 0, 0, 0, 0, 0, 0, 0, 799, 0, 0, 0, 0, 0, 0, 0,
      /* 55132 */ 2330, 0, 0, 0, 0, 0, 0, 0, 0, 1238, 0, 0, 0, 0, 0, 0, 0, 819, 0, 0, 0, 0, 0, 819, 819, 0, 0, 0, 0, 799,
      /* 55162 */ 0, 0, 0, 0, 0, 1750, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2850, 0, 0, 0, 0, 0, 0, 0, 0, 835, 795, 0, 0, 835, 0,
      /* 55193 */ 0, 0, 0, 0, 0, 0, 528, 528, 528, 4154, 528, 528, 528, 528, 528, 528, 528, 3234, 528, 528, 528, 528, 528,
      /* 55216 */ 528, 528, 528, 528, 3942, 528, 528, 528, 528, 528, 528, 528, 528, 528, 855, 528, 864, 528, 528, 528,
      /* 55236 */ 528, 528, 528, 528, 528, 528, 528, 528, 3944, 528, 528, 528, 528, 528, 528, 528, 912, 57893, 57893,
      /* 55255 */ 57893, 57893, 57893, 58274, 57893, 58283, 57893, 57893, 57893, 57893, 57893, 59395, 59396, 57893, 57893,
      /* 55270 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59897, 57893, 57893, 57893, 57893, 57893, 57893, 58350,
      /* 55285 */ 57916, 58359, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 55300 */ 58401, 57916, 57916, 58407, 0, 0, 0, 0, 57893, 57943, 57943, 57943, 57943, 57943, 58425, 57943, 58434,
      /* 55317 */ 57943, 57943, 528, 1354, 528, 528, 528, 528, 58793, 57893, 57893, 57893, 57893, 57893, 1151, 0, 1143,
      /* 55334 */ 912, 0, 57893, 57893, 57893, 57893, 58493, 58331, 155942, 1151, 0, 0, 0, 0, 0, 0, 790, 0, 802, 0, 816,
      /* 55355 */ 0, 0, 0, 0, 810, 1246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1821, 0, 0, 0, 1308, 0, 0, 0, 0, 0,
      /* 55386 */ 0, 0, 0, 1313, 0, 0, 0, 0, 0, 1796, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1211, 368, 368, 0, 0, 1214, 528, 528,
      /* 55414 */ 528, 1350, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1369, 528, 528, 0, 0, 0, 2933, 0, 1986, 57893,
      /* 55435 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59884, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 55450 */ 528, 1409, 528, 528, 1413, 528, 528, 528, 528, 528, 1420, 528, 528, 528, 1427, 528, 528, 0, 57893,
      /* 55469 */ 57893, 57893, 58315, 57893, 57893, 155942, 1151, 0, 0, 0, 0, 0, 0, 0, 6324224, 4358144, 4358144,
      /* 55486 */ 5005312, 4358144, 4358144, 4358144, 5120000, 5136384, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 55497 */ 4358144, 4358144, 4358144, 4358144, 6119424, 4358144, 6168576, 4358144, 4358144, 4358144, 4358144,
      /* 55508 */ 58773, 914, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58789,
      /* 55523 */ 57893, 57893, 57893, 57893, 57893, 61379, 57893, 61381, 61382, 57893, 61384, 57893, 61386, 57916, 57916,
      /* 55538 */ 57916, 57916, 57916, 60385, 57916, 57916, 57916, 57916, 57916, 57916, 60393, 57916, 57916, 57916, 57916,
      /* 55553 */ 57916, 60691, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59484, 57916, 57916,
      /* 55568 */ 57916, 57916, 57916, 57893, 57893, 58818, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 55583 */ 57893, 57893, 57893, 57893, 59914, 57893, 57893, 57916, 58954, 57916, 57916, 57916, 58961, 57916, 0,
      /* 55598 */ 57893, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 61140, 57943, 57943, 57943, 57943, 57943,
      /* 55613 */ 57943, 57943, 57943, 60969, 57943, 60971, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59038,
      /* 55628 */ 57943, 57943, 59042, 57943, 57943, 57943, 57943, 57943, 59049, 57943, 57943, 57943, 528, 528, 57893,
      /* 55643 */ 57893, 0, 0, 0, 0, 0, 0, 0, 0, 3923, 59056, 57943, 528, 528, 528, 528, 528, 528, 57893, 57893, 57893,
      /* 55664 */ 57893, 57893, 57893, 1151, 0, 0, 0, 0, 4003, 3675, 0, 0, 0, 0, 0, 0, 0, 0, 528, 528, 528, 528, 528, 528,
      /* 55688 */ 528, 1345, 1844, 1845, 0, 1847, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 806, 0, 0, 0, 0, 1861, 0, 1863, 0,
      /* 55715 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 839, 0, 0, 528, 0, 0, 0, 1875, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 990,
      /* 55747 */ 0, 0, 0, 0, 0, 1861, 0, 0, 0, 0, 0, 528, 528, 528, 528, 528, 528, 528, 528, 3223, 528, 528, 528, 528,
      /* 55771 */ 528, 528, 1949, 528, 528, 528, 528, 528, 528, 528, 528, 1958, 528, 528, 528, 528, 528, 2478, 528, 528,
      /* 55791 */ 528, 528, 528, 528, 528, 528, 528, 528, 1421, 528, 528, 528, 528, 528, 528, 528, 528, 1967, 528, 528,
      /* 55811 */ 528, 528, 528, 528, 528, 528, 528, 528, 1977, 1979, 57893, 57893, 59392, 57893, 57893, 57893, 57893,
      /* 55828 */ 57893, 57893, 57893, 57893, 59401, 57893, 57893, 57893, 57893, 57893, 59414, 57893, 57893, 57893, 57893,
      /* 55843 */ 57893, 57893, 59420, 57893, 57893, 57893, 57893, 57893, 59410, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 55858 */ 57893, 57893, 57893, 57893, 59421, 59423, 57893, 57893, 57893, 57893, 57893, 61453, 57893, 57893, 61455,
      /* 55873 */ 57893, 57916, 57916, 57916, 57916, 57916, 57916, 59482, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 55888 */ 57916, 57916, 59983, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59492, 57916, 57916, 57916, 57916,
      /* 55903 */ 57916, 57916, 57916, 57916, 59501, 57916, 57916, 57916, 57916, 57916, 57916, 60940, 60942, 57916, 57916,
      /* 55918 */ 57916, 57916, 60946, 57916, 60948, 60949, 57916, 59510, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 55933 */ 57916, 57916, 57916, 59521, 59523, 57916, 57916, 57916, 57916, 57916, 61570, 57916, 61571, 57916, 57916,
      /* 55948 */ 57916, 57916, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60416, 57943, 57943, 57943, 59588,
      /* 55963 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59597, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 55978 */ 57943, 59043, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 58988, 57943, 57943, 57943, 57943,
      /* 55993 */ 57943, 57943, 57943, 59606, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59617,
      /* 56008 */ 59619, 57943, 57943, 57943, 528, 528, 57893, 57893, 0, 0, 0, 0, 0, 3921, 0, 0, 0, 0, 0, 1812, 0, 0, 0,
      /* 56031 */ 0, 0, 0, 0, 0, 0, 0, 1839, 0, 0, 0, 0, 0, 0, 0, 2340, 0, 0, 0, 0, 0, 2346, 0, 0, 0, 0, 0, 0, 0, 372, 0,
      /* 56062 */ 0, 0, 380, 382, 0, 0, 0, 0, 0, 0, 2354, 0, 0, 0, 0, 0, 0, 0, 0, 2362, 0, 0, 0, 0, 0, 1835, 0, 0, 0, 0,
      /* 56092 */ 0, 0, 0, 0, 0, 0, 0, 0, 528, 528, 528, 528, 528, 2424, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 56116 */ 3722, 528, 528, 528, 528, 528, 528, 528, 2436, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 56136 */ 528, 528, 528, 2930, 528, 528, 528, 2463, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 56156 */ 528, 528, 3240, 3241, 0, 0, 0, 57893, 57893, 57893, 57893, 57893, 57893, 59855, 57893, 57893, 57893,
      /* 56173 */ 57893, 57893, 57893, 0, 0, 57916, 60658, 57916, 57916, 57916, 57916, 57916, 57916, 58940, 57916, 57916,
      /* 56189 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59518, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 56204 */ 60003, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 56219 */ 58951, 57916, 57916, 57916, 57916, 60018, 57916, 57916, 57916, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 56234 */ 60027, 57943, 57943, 528, 1355, 528, 528, 528, 528, 58794, 57893, 57893, 57893, 57893, 57893, 1151, 0,
      /* 56251 */ 57943, 60086, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 56266 */ 57943, 59570, 57943, 57943, 57943, 57943, 60101, 57943, 57943, 57943, 2436, 528, 528, 528, 528, 59867,
      /* 56282 */ 57893, 57893, 57893, 0, 0, 0, 0, 57916, 59939, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60927,
      /* 56299 */ 57916, 60929, 57916, 57916, 57916, 57916, 57916, 57916, 0, 2793, 0, 2795, 0, 0, 0, 0, 0, 0, 0, 0, 2800,
      /* 56320 */ 0, 0, 2803, 0, 0, 2818, 0, 0, 0, 0, 0, 0, 0, 2826, 0, 0, 0, 0, 2828, 0, 2842, 0, 0, 2845, 0, 0, 0, 0, 0,
      /* 56349 */ 0, 0, 0, 0, 0, 2855, 0, 0, 528, 2869, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 56372 */ 2918, 528, 528, 57893, 57893, 57893, 57893, 60327, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 56387 */ 57893, 57893, 57893, 57893, 57916, 57916, 61099, 57916, 57916, 60336, 57893, 57893, 57893, 60339, 57893,
      /* 56402 */ 57893, 57893, 57893, 57893, 57893, 0, 0, 0, 0, 0, 0, 2772, 0, 0, 0, 0, 0, 0, 0, 0, 2359, 0, 0, 0, 0, 0,
      /* 56428 */ 0, 0, 0, 57916, 60345, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 56444 */ 57916, 57916, 58894, 57916, 57916, 57943, 60433, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60438,
      /* 56459 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59549, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 56474 */ 57943, 57943, 60067, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60444, 57943, 57943, 57943, 57943,
      /* 56489 */ 57943, 57943, 57943, 60452, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59595, 57943, 57943, 57943,
      /* 56504 */ 57943, 57943, 57943, 57943, 57943, 57943, 61543, 57943, 57943, 0, 0, 0, 0, 60459, 57943, 57943, 57943,
      /* 56521 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60468, 57943, 57943, 57943, 528, 528, 57893,
      /* 56536 */ 57893, 0, 0, 0, 3919, 0, 0, 3922, 0, 0, 60471, 57943, 57943, 57943, 57943, 57943, 57943, 3131, 528, 528,
      /* 56556 */ 528, 528, 60478, 57893, 57893, 57893, 0, 0, 0, 0, 59938, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 56573 */ 57916, 59946, 3204, 0, 0, 0, 3206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1818, 0, 0, 0, 0, 528, 528, 528,
      /* 56599 */ 528, 3244, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3249, 528, 528, 528, 3252, 528, 3254, 528,
      /* 56619 */ 528, 528, 528, 528, 528, 528, 3258, 528, 528, 0, 0, 2503, 0, 0, 0, 57893, 57893, 57893, 57893, 57893,
      /* 56639 */ 57893, 57893, 57893, 57893, 59858, 57893, 57893, 57893, 60632, 57893, 57893, 57893, 57893, 60635, 57893,
      /* 56654 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59924, 57893, 59926, 57893, 57893, 57893,
      /* 56669 */ 57893, 60641, 57893, 57893, 57893, 60644, 57893, 60646, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 56684 */ 57893, 58843, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60651, 57893, 57893, 57893, 57893, 57893,
      /* 56699 */ 0, 0, 57916, 57916, 57916, 60659, 57916, 57916, 57916, 57916, 57916, 58905, 57916, 58907, 57916, 57916,
      /* 56715 */ 57916, 57916, 57916, 57916, 57916, 57916, 60362, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 56730 */ 60664, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 56745 */ 59458, 57916, 57916, 57916, 60680, 60681, 57916, 57916, 57916, 57916, 60684, 57916, 57916, 57916, 57916,
      /* 56760 */ 57916, 57916, 57916, 57943, 60022, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 61153, 57943,
      /* 56775 */ 57943, 57943, 57943, 57943, 57943, 528, 57916, 57916, 57916, 57916, 60690, 57916, 57916, 57916, 60693,
      /* 56790 */ 57916, 60695, 57916, 57916, 57916, 57916, 57916, 57916, 61105, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 56805 */ 57916, 57916, 57916, 58944, 57916, 57916, 57916, 57916, 57916, 58952, 57916, 57916, 57916, 60700, 57916,
      /* 56820 */ 57916, 57916, 57916, 57916, 57943, 57943, 57943, 60708, 57943, 57943, 57943, 528, 528, 57893, 57893,
      /* 56835 */ 3918, 0, 0, 0, 3920, 0, 0, 0, 0, 0, 0, 3695, 0, 3697, 528, 528, 528, 528, 528, 528, 528, 1905, 528, 528,
      /* 56859 */ 528, 528, 528, 528, 528, 528, 2926, 528, 528, 528, 528, 528, 528, 528, 57943, 57943, 60713, 57943,
      /* 56877 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 61144, 57943,
      /* 56892 */ 57943, 57943, 57943, 60729, 60730, 57943, 57943, 57943, 57943, 60733, 57943, 57943, 57943, 57943, 57943,
      /* 56907 */ 57943, 57943, 60036, 57943, 60038, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 58984, 57943, 58989,
      /* 56922 */ 57943, 57943, 58993, 57943, 57943, 58996, 57943, 57943, 57943, 57943, 60749, 57943, 57943, 57943, 57943,
      /* 56937 */ 57943, 528, 528, 528, 57893, 57893, 57893, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3417, 0, 0, 3420, 3421, 0,
      /* 56961 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1827, 0, 0, 0, 0, 528, 528, 528, 528, 3486, 528, 528, 528, 528, 3490, 528,
      /* 56987 */ 528, 528, 528, 528, 528, 1952, 1953, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3517, 528, 528, 528,
      /* 57007 */ 528, 528, 57893, 528, 3496, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 57027 */ 2931, 528, 3510, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 57893, 57893, 57893,
      /* 57046 */ 61204, 57893, 57893, 57893, 60870, 57893, 57893, 57893, 57893, 60874, 57893, 57893, 57893, 57893, 57893,
      /* 57061 */ 57893, 57893, 58863, 58864, 57893, 57893, 50676, 58773, 990, 57916, 57916, 60880, 57893, 57893, 57893,
      /* 57076 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59901, 57893, 60895,
      /* 57091 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58830,
      /* 57106 */ 57893, 57916, 57916, 57916, 57916, 60912, 57916, 57916, 57916, 57916, 60916, 57916, 57916, 57916, 57916,
      /* 57121 */ 57916, 57916, 58962, 0, 58963, 58964, 57943, 57943, 57943, 57943, 57943, 58971, 57916, 60922, 57916,
      /* 57136 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59472, 57916,
      /* 57151 */ 57916, 57916, 60937, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 57166 */ 57916, 58927, 57916, 58929, 57916, 57943, 57943, 57943, 57943, 60954, 57943, 57943, 57943, 57943, 60958,
      /* 57181 */ 57943, 57943, 57943, 57943, 57943, 57943, 58982, 57943, 57943, 57943, 57943, 58992, 57943, 57943, 57943,
      /* 57196 */ 57943, 57943, 57943, 60964, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 57211 */ 57943, 57943, 57943, 61256, 57943, 57943, 57943, 57943, 60979, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 57226 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60974, 57943, 60976, 528, 528, 57893, 57893, 57893, 0,
      /* 57242 */ 0, 0, 0, 3819, 0, 0, 0, 0, 0, 3822, 0, 528, 528, 528, 528, 528, 528, 3844, 528, 528, 528, 528, 528, 528,
      /* 57266 */ 528, 528, 2481, 528, 528, 528, 528, 528, 2485, 2486, 57893, 57893, 61206, 57893, 57893, 57893, 57893,
      /* 57283 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59927, 57893, 57893, 57893, 57893, 61217,
      /* 57298 */ 57893, 57893, 57893, 57893, 57893, 57893, 57916, 57916, 57916, 57916, 57916, 57916, 61225, 0, 0, 3675,
      /* 57314 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3934, 0, 0, 0, 0, 4080, 0, 0, 0, 0, 0, 0, 528, 528, 528, 528, 528, 528,
      /* 57343 */ 4211, 528, 4212, 528, 528, 528, 57893, 57893, 57893, 57893, 57893, 57893, 61562, 57893, 61563, 57893,
      /* 57359 */ 57893, 57893, 57893, 57916, 57943, 4313, 4314, 61659, 61660, 61661, 0, 528, 57893, 57916, 57943, 0, 0,
      /* 57376 */ 0, 0, 0, 2382, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4284416, 0, 0, 0, 0, 0, 57943, 57943, 61578, 57943, 61579,
      /* 57401 */ 57943, 57943, 57943, 57943, 0, 0, 0, 0, 0, 0, 528, 528, 4273, 4274, 528, 528, 57893, 57893, 61621,
      /* 57420 */ 61622, 57893, 57893, 57916, 0, 528, 528, 57893, 57893, 57916, 57916, 57943, 57943, 4303, 4304, 61649,
      /* 57436 */ 61650, 61651, 0, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2428, 528, 528, 528, 528, 528, 528, 4096,
      /* 57456 */ 528, 528, 4098, 57893, 57893, 57893, 57893, 57893, 57893, 58861, 57893, 57893, 57893, 57893, 50676,
      /* 57471 */ 58773, 990, 57916, 57916, 537, 57903, 537, 57903, 537, 537, 57903, 537, 537, 57926, 57903, 537, 537,
      /* 57488 */ 57903, 57903, 57903, 57903, 57953, 57953, 57903, 57903, 57903, 57903, 57953, 57953, 57903, 537, 57903,
      /* 57503 */ 57903, 57926, 57903, 57903, 57903, 57903, 57903, 57903, 57903, 57926, 57926, 57903, 57903, 57953, 57903,
      /* 57518 */ 57903, 57903, 1, 24578, 3, 155942, 155942, 296, 0, 0, 0, 0, 0, 302, 303, 0, 57893, 57893, 58833, 57893,
      /* 57538 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60649, 57893, 57893,
      /* 57553 */ 57916, 59948, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 57568 */ 57916, 59489, 57916, 57943, 60031, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 57583 */ 57943, 57943, 57943, 57943, 60044, 57943, 0, 384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2404, 0, 0,
      /* 57608 */ 340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2854, 0, 0, 0, 406, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 57640 */ 406, 0, 0, 0, 432, 131072, 0, 432, 432, 0, 0, 0, 432, 0, 452, 432, 0, 0, 0, 0, 4206, 0, 528, 528, 528,
      /* 57665 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 2430, 528, 528, 432, 478, 478, 478, 491, 491, 491, 491,
      /* 57685 */ 491, 491, 491, 491, 491, 491, 491, 491, 491, 491, 491, 491, 538, 57904, 538, 57904, 538, 538, 57904,
      /* 57704 */ 538, 538, 57927, 57904, 538, 538, 57904, 57904, 57904, 57904, 57954, 57954, 57904, 57904, 57904, 57904,
      /* 57720 */ 57954, 57954, 57904, 538, 57904, 57904, 57927, 57904, 57904, 57904, 57904, 57904, 57904, 57904, 57927,
      /* 57735 */ 57927, 57904, 57904, 57954, 57904, 57904, 57904, 1, 24578, 3, 155942, 155942, 296, 0, 0, 0, 0, 0, 302,
      /* 57754 */ 303, 0, 0, 0, 661, 0, 661, 0, 0, 0, 0, 826, 0, 0, 0, 661, 0, 0, 0, 0, 0, 5218304, 0, 0, 0, 0, 5799936,
      /* 57781 */ 0, 5881856, 0, 0, 0, 0, 0, 0, 5029888, 5038080, 0, 0, 5103616, 5201920, 0, 0, 0, 0, 0, 0, 1878, 0, 0, 0,
      /* 57805 */ 0, 0, 0, 0, 0, 0, 2296, 0, 0, 0, 0, 0, 0, 842, 528, 528, 528, 857, 528, 528, 528, 528, 528, 528, 528,
      /* 57830 */ 528, 528, 528, 898, 528, 528, 528, 528, 57893, 57893, 58260, 57893, 57893, 57893, 58276, 57893, 57893,
      /* 57847 */ 57893, 57893, 57893, 57893, 61220, 57893, 57893, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 0,
      /* 57862 */ 57893, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59022, 57943, 59024, 57943, 57943, 57943,
      /* 57877 */ 57943, 57943, 57916, 58352, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 58393,
      /* 57892 */ 57916, 57916, 57916, 57916, 57916, 60913, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 57907 */ 57916, 61471, 57943, 57943, 57943, 57943, 57943, 1160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1167, 1168, 0, 0, 0,
      /* 57929 */ 0, 0, 0, 1299, 0, 0, 0, 0, 0, 0, 0, 0, 528, 528, 1340, 528, 528, 528, 528, 528, 0, 0, 0, 1249, 0, 0, 0,
      /* 57956 */ 0, 0, 0, 0, 0, 0, 1260, 1261, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2415, 0, 0, 2418,
      /* 57985 */ 528, 528, 528, 528, 1351, 1358, 528, 528, 528, 528, 528, 528, 528, 528, 1371, 528, 528, 0, 57893, 57893,
      /* 58005 */ 57893, 58317, 57893, 57893, 294, 1151, 0, 0, 1155, 0, 0, 0, 0, 0, 5857280, 0, 6463488, 4939776, 0, 0,
      /* 58025 */ 5455872, 0, 0, 0, 0, 0, 5554176, 5570560, 5578752, 5619712, 5668864, 0, 0, 0, 5791744, 5816320, 0,
      /* 58042 */ 5857280, 0, 1373, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1406, 1408,
      /* 58062 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1423, 528, 528, 528, 528, 528, 2910, 528, 528,
      /* 58082 */ 528, 528, 528, 528, 2917, 528, 528, 528, 528, 528, 2490, 528, 528, 528, 528, 528, 528, 528, 528, 528, 0,
      /* 58103 */ 0, 57893, 57893, 57893, 57893, 57893, 60612, 57893, 60613, 57893, 57893, 57893, 58773, 914, 57893,
      /* 58118 */ 58776, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58790, 58797, 57893,
      /* 58133 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58810, 57893, 58812, 57893, 57893, 57893, 57893, 57893,
      /* 58148 */ 59867, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59872, 57893, 57893, 57893,
      /* 58163 */ 57893, 57893, 57893, 58832, 57893, 58834, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58847, 57893,
      /* 58178 */ 57893, 57893, 57893, 57893, 59881, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59888, 57893,
      /* 58193 */ 57916, 57916, 57916, 58957, 57916, 57916, 57916, 0, 57893, 57943, 58965, 57943, 57943, 57943, 57943,
      /* 58208 */ 57943, 57943, 59548, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 61154, 57943,
      /* 58223 */ 57943, 57943, 57943, 528, 58999, 57943, 59001, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 58238 */ 57943, 57943, 57943, 57943, 57943, 59027, 57943, 57943, 57943, 57943, 59037, 57943, 57943, 57943, 57943,
      /* 58253 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59052, 57943, 57943, 57943, 57943, 57943, 61139, 57943,
      /* 58268 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60454, 57943, 57943, 57943, 57943,
      /* 58283 */ 1946, 528, 528, 528, 528, 528, 528, 528, 528, 1955, 528, 528, 528, 528, 528, 528, 1970, 528, 528, 528,
      /* 58303 */ 528, 528, 528, 1976, 528, 528, 528, 528, 1982, 528, 58773, 1986, 57893, 57893, 57893, 57893, 57893,
      /* 58320 */ 57893, 57893, 57893, 57893, 57893, 60648, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 58335 */ 59346, 59347, 57893, 57893, 57893, 57893, 59354, 57893, 57893, 57893, 57893, 57893, 58315, 57893, 57893,
      /* 58350 */ 57893, 57893, 0, 57916, 57916, 57916, 57916, 57916, 57916, 60349, 57916, 57916, 57916, 57916, 60353,
      /* 58365 */ 57916, 57916, 57916, 57893, 59426, 57893, 50676, 2086, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 58380 */ 57916, 57916, 57916, 57916, 57916, 60932, 57916, 60934, 57916, 57916, 57916, 57916, 59446, 59447, 57916,
      /* 58395 */ 57916, 57916, 57916, 59454, 57916, 57916, 57916, 57916, 57916, 57916, 59449, 57916, 57916, 57916, 57916,
      /* 58410 */ 57916, 57916, 57916, 57916, 57916, 60390, 57916, 57916, 57916, 57916, 57916, 57916, 59526, 57916, 57893,
      /* 58425 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59051, 57943,
      /* 58440 */ 57943, 57943, 59542, 59543, 57943, 57943, 57943, 57943, 59550, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 58455 */ 57943, 57943, 57943, 60425, 57943, 57943, 57943, 57943, 57943, 57943, 0, 2313, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 58475 */ 0, 2322, 0, 0, 0, 0, 0, 0, 3208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3210, 3211, 0, 0, 0, 0, 0, 528, 528, 528,
      /* 58503 */ 528, 2477, 528, 528, 528, 528, 528, 528, 528, 2483, 528, 528, 528, 528, 528, 2924, 528, 528, 528, 528,
      /* 58523 */ 528, 528, 528, 528, 528, 528, 528, 2496, 528, 528, 528, 0, 528, 528, 528, 2488, 528, 528, 528, 528, 528,
      /* 58544 */ 528, 528, 528, 528, 528, 528, 0, 0, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 58561 */ 57893, 57893, 0, 0, 990, 57916, 57916, 57916, 57916, 57916, 60004, 57916, 57916, 57916, 57916, 57916,
      /* 58577 */ 57916, 57916, 60010, 57916, 57916, 57916, 57916, 57916, 58921, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 58592 */ 57916, 57916, 57916, 57916, 60917, 57916, 57916, 57916, 57916, 57916, 57943, 57943, 57943, 60087, 57943,
      /* 58607 */ 57943, 57943, 57943, 57943, 57943, 57943, 60093, 57943, 57943, 57943, 57943, 57943, 57943, 60967, 57943,
      /* 58622 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60040, 57943, 57943, 57943, 57943, 57943,
      /* 58637 */ 0, 0, 0, 2782, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1169, 1170, 1171, 1172, 3159, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 58666 */ 0, 0, 0, 0, 0, 0, 0, 1871, 528, 528, 528, 3231, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 58689 */ 528, 528, 3248, 528, 528, 528, 3262, 528, 0, 0, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 58707 */ 60614, 57893, 57893, 57893, 50676, 0, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 58722 */ 57916, 59441, 57893, 57893, 57893, 57893, 60622, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 58737 */ 57893, 57893, 57893, 57916, 61098, 57916, 57916, 57916, 57893, 57893, 57893, 57893, 60655, 57893, 0, 0,
      /* 58753 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60928, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 58768 */ 57916, 60663, 57916, 57916, 57916, 57916, 57916, 57916, 60671, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 58783 */ 57916, 57916, 61118, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57943, 60712, 57943, 57943, 57943,
      /* 58798 */ 57943, 57943, 57943, 60720, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 61340, 57943, 57943,
      /* 58813 */ 528, 57893, 0, 0, 0, 57893, 57893, 57893, 61094, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57916,
      /* 58830 */ 57916, 57916, 57916, 57916, 57916, 61232, 57916, 57916, 57916, 57916, 61233, 61234, 57916, 57916, 57916,
      /* 58845 */ 528, 528, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 61513, 57893, 61515, 57893, 57893, 57893,
      /* 58860 */ 57893, 57893, 59894, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 0, 57916,
      /* 58875 */ 57916, 58335, 57916, 57916, 528, 528, 61559, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 58890 */ 57893, 57893, 57893, 57893, 61567, 61624, 57916, 57916, 57916, 57916, 57943, 61628, 57943, 57943, 57943,
      /* 58905 */ 57943, 0, 0, 0, 0, 528, 4272, 528, 528, 528, 528, 57893, 61620, 57893, 57893, 57893, 57893, 57916, 0,
      /* 58924 */ 389, 341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2801, 0, 0, 463, 479, 479, 479, 463, 463, 463, 463,
      /* 58950 */ 463, 463, 463, 463, 463, 463, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512,
      /* 58971 */ 512, 539, 57905, 539, 57905, 539, 539, 57905, 539, 539, 57928, 57905, 539, 539, 57905, 57905, 57905,
      /* 58988 */ 57905, 57955, 57955, 57905, 57905, 57905, 57905, 57955, 57955, 57905, 539, 57905, 57905, 57928, 57905,
      /* 59003 */ 57905, 57905, 57905, 57905, 57905, 57905, 57928, 57928, 57905, 57905, 57955, 57905, 57905, 57905, 1,
      /* 59018 */ 24578, 3, 155942, 156282, 296, 0, 0, 0, 0, 0, 302, 303, 0, 0, 732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 59045 */ 0, 0, 3427, 0, 0, 0, 662, 0, 662, 0, 0, 0, 0, 0, 0, 0, 0, 662, 0, 0, 0, 0, 0, 6225920, 4358144, 5062656,
      /* 59071 */ 4358144, 4358144, 4358144, 4358144, 4358144, 6225920, 0, 6086656, 528, 528, 528, 528, 858, 528, 528,
      /* 59086 */ 874, 528, 528, 528, 528, 528, 528, 528, 528, 2913, 528, 528, 528, 528, 528, 528, 528, 57916, 58353,
      /* 59105 */ 57916, 57916, 58369, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 59120 */ 61575, 57943, 57943, 57943, 0, 1189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3451, 0, 0, 1318, 0, 0,
      /* 59146 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3480, 0, 0, 0, 1334, 0, 0, 0, 0, 0, 528, 528, 528, 528, 528, 528,
      /* 59174 */ 528, 528, 2876, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1352, 528, 528, 528, 528, 528, 528, 528,
      /* 59194 */ 528, 528, 528, 528, 528, 2469, 528, 528, 528, 528, 528, 528, 1391, 528, 528, 528, 528, 528, 528, 528,
      /* 59214 */ 528, 528, 528, 528, 528, 528, 3493, 528, 528, 528, 528, 1410, 528, 528, 528, 528, 528, 1418, 528, 528,
      /* 59234 */ 528, 528, 528, 528, 528, 1379, 528, 528, 528, 528, 528, 528, 528, 528, 1954, 528, 528, 1957, 528, 528,
      /* 59254 */ 528, 528, 58773, 914, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 59269 */ 57893, 57893, 58791, 57893, 57893, 57893, 58857, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 50676,
      /* 59284 */ 58773, 990, 57916, 57916, 57916, 57916, 57943, 57943, 57943, 60412, 57943, 60413, 57943, 57943, 57943,
      /* 59299 */ 57943, 57943, 57943, 57943, 58471, 57943, 57943, 57943, 57943, 528, 528, 528, 901, 57943, 57943, 57943,
      /* 59315 */ 57943, 59039, 57943, 57943, 57943, 57943, 57943, 59047, 57943, 57943, 57943, 57943, 57943, 57943, 59563,
      /* 59330 */ 59564, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 61484, 0, 0, 4143, 4144, 0, 0, 0,
      /* 59348 */ 1727, 0, 0, 0, 0, 1734, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2370, 0, 0, 0, 0, 0, 0, 528, 1916, 528, 528, 528,
      /* 59375 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 1927, 528, 528, 0, 57893, 57893, 57893, 58319, 57893,
      /* 59393 */ 57893, 155942, 1151, 0, 302, 0, 0, 306, 307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 650, 0, 0, 0, 0, 0, 2351104,
      /* 59419 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 59359, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 59438 */ 57893, 57893, 57893, 57893, 59370, 57893, 57893, 57893, 50676, 0, 57916, 59433, 57916, 57916, 57916,
      /* 59453 */ 57916, 57916, 57916, 57916, 59440, 57916, 57943, 57943, 57943, 59544, 57943, 57943, 57943, 57943, 57943,
      /* 59468 */ 57943, 57943, 57943, 57943, 59555, 57943, 57943, 528, 1714, 528, 1716, 528, 528, 59063, 57893, 57893,
      /* 59484 */ 59065, 57893, 57893, 1151, 0, 57943, 57943, 57943, 59577, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 59499 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 61143, 57943, 57943, 0, 0, 2379, 2380, 0, 0, 0, 0, 0,
      /* 59518 */ 2386, 0, 0, 0, 0, 0, 0, 0, 2785, 0, 0, 0, 0, 0, 0, 0, 0, 1753, 0, 0, 0, 0, 0, 0, 0, 528, 2474, 528, 528,
      /* 59547 */ 528, 528, 2479, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1396, 528, 528, 528, 1403, 1405, 528, 2501,
      /* 59567 */ 0, 0, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60878,
      /* 59583 */ 57893, 57893, 57893, 57893, 57893, 57893, 59906, 57893, 57893, 57893, 57893, 59911, 57893, 57893, 57893,
      /* 59598 */ 57893, 57893, 57893, 2999, 0, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57943, 61327,
      /* 59613 */ 57943, 57943, 61329, 57943, 57943, 57943, 57916, 59964, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 59628 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59506, 57916, 57943, 60047, 57943, 57943, 57943, 57943,
      /* 59643 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60070, 60071, 57916, 57916, 57916,
      /* 59658 */ 57916, 61115, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 58885, 58892,
      /* 59673 */ 57916, 57916, 57916, 0, 3925, 3675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2838, 2839, 0, 3949, 528,
      /* 59697 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58850,
      /* 59712 */ 57893, 57893, 57893, 61308, 57893, 57893, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 59727 */ 57916, 57916, 58886, 57916, 57916, 57916, 57916, 4001, 0, 0, 0, 0, 3675, 0, 0, 0, 0, 0, 0, 0, 0, 528,
      /* 59749 */ 528, 528, 528, 528, 528, 1895, 528, 528, 528, 4016, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 59769 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 61375, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 59784 */ 57893, 57893, 57893, 57893, 57916, 57916, 57916, 57916, 57916, 61461, 57916, 61391, 57916, 57916, 57916,
      /* 59799 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 59814 */ 57943, 57943, 57943, 57943, 57943, 57943, 61407, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 59829 */ 57943, 57943, 57943, 0, 0, 0, 0, 0, 2316, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3838, 0, 0, 0, 0, 0, 528, 528,
      /* 59856 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 61566, 57916, 0, 0,
      /* 59872 */ 0, 0, 57893, 57943, 57943, 58410, 57943, 57943, 57943, 57943, 57943, 57943, 58443, 0, 0, 0, 390, 391,
      /* 59890 */ 393, 343, 0, 0, 0, 0, 0, 0, 342, 0, 0, 0, 343, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2787, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 59921 */ 0, 390, 0, 0, 0, 0, 0, 0, 343, 0, 0, 0, 390, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 310, 0, 0,
      /* 59951 */ 0, 0, 1749, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 540672, 0, 0, 0, 0, 0, 0, 480, 480, 480, 480, 496, 496,
      /* 59978 */ 496, 496, 496, 496, 496, 496, 496, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480,
      /* 59999 */ 480, 480, 540, 57906, 540, 57906, 540, 540, 57906, 540, 540, 57929, 57906, 540, 540, 57906, 57906,
      /* 60016 */ 57906, 1, 24578, 3, 155942, 155942, 296, 0, 0, 0, 0, 0, 302, 303, 0, 57929, 57906, 57906, 57906, 57906,
      /* 60036 */ 57906, 57906, 57906, 57929, 57929, 57906, 57942, 57956, 57942, 57942, 57942, 57942, 57956, 57956, 57942,
      /* 60051 */ 57942, 57942, 57942, 57956, 57956, 57942, 540, 57906, 57906, 368, 368, 0, 0, 0, 0, 0, 706, 0, 0, 0, 0,
      /* 60072 */ 0, 0, 0, 0, 740, 0, 0, 0, 0, 740, 0, 746, 715, 0, 717, 0, 0, 0, 0, 0, 0, 0, 725, 0, 0, 0, 0, 0, 0, 804,
      /* 60102 */ 0, 0, 0, 0, 0, 0, 804, 0, 528, 0, 0, 813, 0, 796, 0, 0, 815, 0, 667, 0, 792, 0, 0, 0, 0, 0, 836, 0, 0,
      /* 60131 */ 0, 0, 796, 663, 840, 0, 528, 0, 792, 815, 0, 815, 813, 0, 0, 0, 827, 0, 0, 0, 663, 830, 0, 0, 0, 0,
      /* 60157 */ 131072, 0, 0, 0, 0, 0, 0, 0, 444, 0, 0, 0, 0, 0, 690, 691, 0, 0, 0, 0, 696, 0, 0, 0, 368, 843, 528, 528,
      /* 60185 */ 528, 859, 528, 528, 875, 528, 528, 528, 528, 889, 528, 528, 528, 528, 528, 3245, 528, 528, 528, 528,
      /* 60205 */ 528, 528, 528, 528, 528, 528, 528, 1398, 528, 528, 528, 528, 528, 907, 528, 528, 57893, 57893, 58261,
      /* 60224 */ 57893, 57893, 57893, 58278, 57893, 57893, 58294, 57893, 57893, 57893, 50676, 0, 59432, 57916, 59434,
      /* 60239 */ 57916, 59435, 57916, 59437, 57916, 59439, 57916, 57916, 57893, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 60254 */ 57943, 59534, 57943, 57943, 57943, 57943, 57943, 57943, 59594, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 60269 */ 57943, 57943, 57943, 57943, 60467, 57943, 57943, 57943, 57943, 57943, 57893, 57893, 58308, 57893, 57893,
      /* 60284 */ 57893, 57893, 58326, 57893, 57893, 0, 57916, 57916, 58337, 57916, 57916, 57916, 57916, 57943, 57943,
      /* 60299 */ 60411, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59044, 57943, 57943, 57943, 57943,
      /* 60314 */ 57943, 57943, 57916, 58354, 57916, 57916, 58370, 57916, 57916, 57916, 57916, 58384, 57916, 57916, 57916,
      /* 60329 */ 57916, 58402, 57916, 0, 0, 0, 0, 57893, 57943, 57943, 58411, 57943, 57943, 57943, 58427, 57943, 57943,
      /* 60346 */ 57943, 57943, 57943, 59005, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 60361 */ 59008, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 58459, 57943, 57943, 57943, 57943, 58477,
      /* 60376 */ 57943, 57943, 528, 528, 528, 528, 528, 528, 57893, 57893, 57893, 57893, 57893, 57893, 1151, 0, 0, 0,
      /* 60394 */ 1170, 0, 0, 0, 0, 0, 0, 0, 1172, 0, 0, 0, 0, 0, 0, 806, 0, 0, 0, 0, 787, 0, 806, 0, 528, 1293, 0, 0, 0,
      /* 60423 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1305, 0, 0, 0, 0, 0, 6307840, 0, 0, 6356992, 6381568, 6397952, 4800512,
      /* 60445 */ 4808704, 0, 0, 4890624, 0, 4947968, 0, 0, 0, 5046272, 0, 0, 0, 0, 5185536, 0, 5234688, 5300224, 0, 0, 0,
      /* 60466 */ 0, 1210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1305, 0, 0, 0, 0, 0, 2343, 0, 0, 0, 0, 0, 2347, 0, 0, 2349, 0, 0,
      /* 60495 */ 1333, 0, 0, 0, 0, 0, 0, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 60518 */ 1353, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2901, 528, 528, 528, 528, 528, 528,
      /* 60538 */ 1377, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3724, 528, 528, 58773, 914,
      /* 60557 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58792, 0, 0,
      /* 60573 */ 1777, 0, 0, 1780, 0, 1782, 0, 0, 0, 0, 0, 0, 0, 0, 753, 0, 0, 0, 0, 0, 0, 0, 0, 1833, 0, 0, 0, 0, 0, 0,
      /* 60603 */ 0, 0, 0, 0, 0, 0, 0, 0, 3667, 3668, 528, 1898, 528, 528, 528, 528, 528, 528, 528, 528, 1909, 528, 528,
      /* 60626 */ 528, 528, 528, 868, 528, 528, 528, 528, 528, 887, 528, 528, 528, 528, 59341, 57893, 57893, 57893, 57893,
      /* 60645 */ 57893, 57893, 57893, 57893, 59352, 57893, 57893, 57893, 57893, 57893, 57893, 58325, 57893, 57893, 57893,
      /* 60660 */ 0, 57916, 57916, 57916, 57916, 57916, 57943, 57943, 57943, 57943, 59578, 57943, 57943, 57943, 57943,
      /* 60675 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60056, 57943, 57943, 57943, 0, 2394, 0, 0, 0, 0,
      /* 60693 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2405, 0, 528, 528, 528, 2422, 2423, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 60717 */ 528, 528, 1366, 528, 528, 528, 528, 528, 0, 0, 0, 57893, 57893, 57893, 59852, 57893, 59854, 57893,
      /* 60735 */ 57893, 57893, 57893, 57893, 57893, 57893, 59349, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 60750 */ 60647, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59903, 57893, 57893, 57893, 57893, 57893,
      /* 60765 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59405, 57893, 0, 2780, 0, 0, 2783, 0, 0,
      /* 60783 */ 0, 0, 0, 0, 2788, 0, 0, 0, 2791, 2792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2802, 0, 0, 0, 0, 131072,
      /* 60812 */ 0, 0, 0, 0, 0, 0, 0, 448, 0, 0, 0, 0, 0, 2307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3674, 0, 0, 0, 0, 0, 0,
      /* 60843 */ 2817, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3677, 0, 0, 0, 2843, 0, 0, 0, 0, 0, 0, 0, 0, 2851, 0, 0,
      /* 60874 */ 0, 0, 0, 0, 3448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1287, 1288, 0, 0, 0, 0, 0, 0, 2857, 0, 0, 0, 0, 2860, 0, 0,
      /* 60904 */ 0, 0, 0, 0, 0, 0, 0, 2862, 0, 0, 0, 0, 0, 0, 2868, 0, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 60930 */ 528, 528, 528, 528, 528, 57893, 57893, 57893, 57893, 2879, 528, 528, 2882, 2883, 528, 528, 528, 528,
      /* 60948 */ 528, 2888, 528, 2890, 528, 528, 528, 528, 528, 3487, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 60968 */ 2468, 528, 528, 528, 528, 528, 528, 2894, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2900, 528, 528,
      /* 60988 */ 528, 528, 528, 1903, 1904, 528, 528, 528, 528, 1911, 528, 528, 528, 528, 528, 1935, 528, 528, 528, 1940,
      /* 61008 */ 528, 528, 528, 528, 528, 528, 2897, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3858, 528, 57893,
      /* 61028 */ 57893, 57893, 57893, 528, 528, 528, 528, 2908, 528, 528, 528, 528, 528, 528, 2916, 528, 528, 528, 528,
      /* 61047 */ 528, 2439, 528, 528, 528, 528, 2444, 528, 528, 528, 528, 528, 528, 61594, 57893, 57893, 57893, 57893,
      /* 61065 */ 57893, 57893, 57893, 61600, 57916, 528, 2921, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 61083 */ 528, 528, 528, 1387, 528, 57893, 60297, 57893, 60299, 57893, 57893, 57893, 57893, 60303, 57893, 57893,
      /* 61099 */ 57893, 57893, 57893, 57893, 57893, 59382, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59398,
      /* 61114 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60309, 57893, 57893, 57893, 57893, 57893,
      /* 61129 */ 57893, 57893, 57893, 57893, 60318, 57893, 57893, 57893, 0, 0, 0, 2593, 57916, 57916, 57916, 57916,
      /* 61145 */ 57916, 57916, 57916, 57916, 57916, 60704, 57916, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60957,
      /* 61160 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57893, 57893, 57893, 60326, 57893, 57893, 57893, 57893,
      /* 61175 */ 57893, 60331, 57893, 57893, 57893, 57893, 57893, 57893, 58837, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 61190 */ 57893, 58851, 57893, 60355, 57916, 57916, 60358, 60359, 57916, 57916, 57916, 57916, 57916, 60364, 57916,
      /* 61205 */ 60366, 57916, 57916, 57916, 57916, 57916, 60925, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 61220 */ 57916, 57916, 58884, 57916, 57916, 57916, 57916, 57916, 57916, 60370, 57916, 57916, 57916, 57916, 57916,
      /* 61235 */ 57916, 57916, 57916, 57916, 60376, 57916, 57916, 57916, 57916, 57916, 58960, 57916, 0, 57893, 57943,
      /* 61250 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60732, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 61265 */ 57943, 60450, 57943, 57943, 57943, 57943, 57943, 57943, 60458, 57916, 57916, 60398, 57916, 57916, 57916,
      /* 61280 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59505, 57916, 57916, 57943, 57943,
      /* 61295 */ 57943, 60420, 57943, 57943, 60423, 60424, 57943, 57943, 57943, 57943, 57943, 60429, 57943, 60431, 57943,
      /* 61310 */ 57943, 57943, 57943, 60435, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60441, 57943,
      /* 61325 */ 57943, 57943, 57943, 57943, 61150, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 528,
      /* 61340 */ 528, 3133, 528, 528, 57893, 57893, 60480, 57893, 0, 0, 3161, 3162, 3163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 61363 */ 0, 2311, 0, 0, 0, 0, 0, 3176, 0, 0, 0, 0, 0, 0, 0, 3182, 0, 3184, 0, 0, 0, 0, 0, 0, 3458, 0, 0, 0, 0, 0,
      /* 61393 */ 0, 0, 0, 0, 786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 802, 0, 807, 0, 810, 3188, 0, 0, 0, 0, 3193, 0, 0,
      /* 61422 */ 3196, 0, 0, 0, 0, 0, 0, 0, 389, 0, 139264, 147456, 0, 0, 0, 0, 0, 528, 528, 3263, 0, 0, 60608, 57893,
      /* 61446 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 61086, 57893, 57893, 57893, 57893, 57893,
      /* 61461 */ 57893, 57893, 60653, 57893, 57893, 60656, 0, 0, 60657, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 61477 */ 58880, 57916, 57916, 57916, 58889, 57916, 57916, 57916, 57916, 57916, 57916, 60689, 57916, 57916, 57916,
      /* 61492 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59986, 57916, 57916, 57916, 57916,
      /* 61507 */ 60699, 57916, 57916, 60702, 57916, 57916, 60705, 60706, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 61522 */ 60052, 57943, 57943, 57943, 57943, 57943, 57943, 60057, 57943, 60727, 57943, 57943, 57943, 57943, 57943,
      /* 61537 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59031, 57943, 57943, 57943, 60738,
      /* 61552 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 58994, 57943, 57943,
      /* 61567 */ 57943, 57943, 57943, 57943, 60748, 57943, 57943, 60751, 57943, 57943, 60754, 3411, 528, 528, 60758,
      /* 61582 */ 57893, 57893, 57893, 50676, 2085, 57916, 57916, 57916, 57916, 57916, 59436, 57916, 57916, 57916, 57916,
      /* 61597 */ 57916, 57916, 60373, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60379, 57916, 3429, 0, 0, 0, 0,
      /* 61614 */ 3434, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3675, 0, 0, 0, 0, 0, 0, 0, 0, 528, 528, 0, 0, 0, 3470, 0, 0, 0, 0,
      /* 61644 */ 0, 0, 3477, 0, 0, 3479, 0, 0, 0, 0, 306, 0, 0, 0, 0, 0, 0, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 61674 */ 2852, 0, 0, 0, 528, 528, 3484, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 61695 */ 3259, 528, 3509, 528, 528, 3511, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 57893, 57893,
      /* 61714 */ 57893, 57893, 61446, 57893, 57893, 60868, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 61729 */ 57893, 57893, 57893, 57893, 57893, 59928, 57893, 60894, 57893, 57893, 60896, 57893, 57893, 57893, 57893,
      /* 61744 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60877, 57893, 57893, 57893, 57916, 57916, 60910,
      /* 61759 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60012, 57916,
      /* 61774 */ 57916, 57916, 60936, 57916, 57916, 60938, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 61789 */ 57916, 57916, 59485, 57916, 57916, 57916, 57916, 57916, 57943, 57943, 60952, 57943, 57943, 57943, 57943,
      /* 61804 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59009, 57943, 57943, 57943, 57943, 57943, 60978,
      /* 61819 */ 57943, 57943, 60980, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60055,
      /* 61834 */ 57943, 57943, 57943, 60058, 3661, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2312, 3679, 0, 0, 0, 0,
      /* 61860 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3691, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 450, 0, 0, 0, 0, 0, 3457, 0,
      /* 61890 */ 0, 0, 0, 3462, 0, 0, 0, 0, 3466, 3702, 3703, 528, 528, 528, 528, 3707, 3708, 528, 528, 528, 528, 528,
      /* 61912 */ 3712, 528, 528, 0, 2932, 0, 0, 0, 0, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 61930 */ 57893, 59859, 57893, 57893, 528, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 61073, 61074, 57893,
      /* 61945 */ 57893, 57893, 57893, 61078, 61079, 57916, 57916, 61102, 61103, 57916, 57916, 57916, 57916, 61107, 61108,
      /* 61960 */ 57916, 57916, 57916, 57916, 57916, 61112, 57943, 57943, 61136, 61137, 57943, 57943, 57943, 57943, 57943,
      /* 61975 */ 61141, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60436, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 61990 */ 57943, 57943, 58476, 57943, 57943, 57943, 1139, 528, 528, 528, 57943, 57943, 61147, 57943, 57943, 57943,
      /* 62006 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 528, 528, 528, 528, 528, 528, 57893,
      /* 62022 */ 57893, 57893, 0, 0, 3817, 0, 0, 0, 0, 0, 0, 0, 0, 1165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3834, 0, 0, 0, 0, 0,
      /* 62051 */ 0, 0, 0, 0, 0, 0, 0, 0, 2865, 0, 0, 57916, 57916, 57916, 57916, 61230, 57916, 57916, 57916, 57916,
      /* 62071 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59486, 57916, 57916, 57916, 57916, 57943, 61249, 57943,
      /* 62086 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60096, 57943,
      /* 62101 */ 0, 0, 3675, 0, 3928, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2361, 0, 0, 0, 0, 528, 528, 57893, 57893, 57893,
      /* 62127 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 61303, 57893, 57893, 57893, 50676, 2086, 57916,
      /* 62142 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 61236,
      /* 62157 */ 61319, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 62172 */ 57943, 0, 0, 57943, 57943, 57943, 61335, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 528, 57893, 0,
      /* 62189 */ 3999, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 450560, 0, 0, 0, 0, 0, 372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 62219 */ 2333, 0, 0, 0, 0, 2338, 0, 4002, 0, 0, 0, 3675, 0, 0, 0, 0, 0, 0, 0, 0, 528, 528, 528, 1341, 528, 528,
      /* 62245 */ 528, 528, 4014, 528, 528, 528, 528, 4019, 528, 528, 528, 528, 4024, 528, 528, 57893, 57893, 61373,
      /* 62263 */ 57893, 57893, 57893, 57893, 61378, 57893, 57893, 57893, 57893, 61383, 57893, 57893, 57893, 57916, 57916,
      /* 62278 */ 61389, 57916, 57916, 57916, 57916, 61394, 57916, 57916, 57916, 57916, 61399, 57916, 57916, 57916, 57943,
      /* 62293 */ 57943, 61405, 57943, 57943, 57943, 57943, 61410, 57943, 57943, 57943, 57943, 61415, 57943, 57943, 57943,
      /* 62308 */ 0, 0, 0, 0, 0, 2366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352256, 0, 352256, 0, 0, 0, 0, 0, 0, 4078, 0, 0,
      /* 62336 */ 4081, 0, 0, 0, 0, 0, 528, 528, 528, 528, 528, 528, 57893, 57893, 57893, 57893, 57893, 57893, 57916, 528,
      /* 62356 */ 528, 4246, 4247, 528, 528, 57893, 57893, 57893, 61596, 61597, 57893, 57893, 57893, 57916, 57916, 57916,
      /* 62372 */ 57916, 57943, 60410, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 58481,
      /* 62387 */ 528, 852, 528, 528, 57916, 61602, 61603, 57916, 57916, 57916, 57943, 57943, 57943, 61608, 61609, 57943,
      /* 62403 */ 57943, 57943, 0, 0, 0, 0, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 0, 306, 0, 0,
      /* 62426 */ 0, 0, 345, 346, 347, 348, 349, 0, 0, 0, 0, 0, 0, 0, 0, 1181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 349, 348,
      /* 62453 */ 131072, 347, 348, 348, 0, 349, 347, 348, 0, 347, 348, 457, 464, 481, 481, 481, 492, 492, 492, 498, 492,
      /* 62474 */ 492, 498, 498, 492, 498, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513,
      /* 62495 */ 541, 57907, 541, 57907, 541, 541, 57907, 541, 541, 57930, 57907, 541, 541, 57907, 57907, 57907, 57907,
      /* 62512 */ 57957, 57957, 57907, 57907, 57907, 57907, 57957, 57957, 57907, 541, 57907, 57907, 57930, 57907, 57907,
      /* 62527 */ 57907, 57907, 57907, 57907, 57907, 57930, 57930, 57907, 57907, 57957, 57907, 57907, 57907, 1, 24578, 3,
      /* 62543 */ 155942, 155942, 296, 0, 0, 0, 0, 0, 302, 303, 0, 0, 306, 307, 0, 0, 0, 0, 0, 0, 646, 0, 0, 0, 0, 651,
      /* 62569 */ 652, 653, 654, 655, 656, 657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2388, 0, 0, 0, 0, 0, 0, 0, 672, 673, 0,
      /* 62597 */ 675, 676, 0, 0, 0, 0, 0, 682, 0, 0, 0, 0, 307, 0, 0, 0, 0, 0, 0, 307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 62628 */ 0, 352256, 0, 0, 0, 0, 0, 0, 0, 716, 0, 0, 719, 0, 721, 0, 723, 0, 0, 0, 0, 0, 0, 0, 394, 0, 0, 0, 0, 0,
      /* 62658 */ 0, 0, 0, 1222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 733, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3172, 0, 0, 0, 0,
      /* 62690 */ 0, 763, 764, 0, 766, 767, 675, 0, 0, 0, 0, 0, 0, 0, 395, 0, 0, 0, 0, 0, 0, 0, 0, 2319, 0, 0, 0, 0, 0, 0,
      /* 62720 */ 0, 0, 0, 0, 782, 783, 0, 785, 0, 0, 0, 0, 764, 0, 0, 791, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 245760, 0,
      /* 62748 */ 0, 0, 0, 245760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3171, 0, 0, 0, 0, 692, 0, 0, 0, 764, 0, 0, 0, 0, 0,
      /* 62779 */ 0, 0, 0, 757, 821, 0, 0, 0, 757, 0, 0, 824, 699, 0, 0, 0, 829, 0, 0, 0, 831, 0, 0, 0, 692, 699, 0, 0,
      /* 62807 */ 692, 829, 829, 0, 0, 0, 0, 0, 528, 528, 528, 528, 528, 528, 2874, 528, 528, 528, 528, 528, 528, 528,
      /* 62829 */ 3489, 528, 528, 528, 528, 528, 528, 528, 528, 3256, 528, 528, 528, 528, 528, 528, 528, 528, 849, 853,
      /* 62849 */ 856, 528, 865, 528, 528, 528, 881, 883, 886, 528, 528, 528, 899, 903, 528, 528, 528, 57893, 57893,
      /* 62868 */ 57893, 58268, 58272, 58275, 57893, 58284, 57893, 57893, 57893, 58300, 58302, 58305, 57893, 57893, 57893,
      /* 62883 */ 58318, 58322, 57893, 57893, 57893, 0, 57916, 57916, 57916, 58344, 58348, 58351, 57916, 58360, 57916,
      /* 62898 */ 57916, 57916, 58376, 58378, 58381, 57916, 57916, 57916, 58394, 58398, 57916, 57916, 57916, 57916, 58367,
      /* 62913 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59999, 57916, 57916,
      /* 62928 */ 57916, 57916, 0, 0, 0, 0, 58409, 57943, 57943, 57943, 58419, 58423, 58426, 57943, 58435, 57943, 57943,
      /* 62945 */ 528, 3649, 528, 57893, 60996, 57893, 0, 0, 0, 0, 0, 0, 0, 0, 1254, 0, 0, 0, 0, 0, 0, 0, 57943, 58451,
      /* 62969 */ 58453, 58456, 57943, 57943, 57943, 58469, 58473, 57943, 57943, 57943, 849, 1140, 528, 899, 903, 1144, 0,
      /* 62986 */ 58489, 58268, 57893, 58318, 58322, 58494, 155942, 1151, 0, 0, 0, 0, 0, 0, 1179, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 63009 */ 0, 1239, 0, 0, 0, 0, 0, 0, 1278, 0, 0, 0, 0, 1283, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3675, 0, 3828, 0, 0, 0,
      /* 63039 */ 0, 0, 0, 1321, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1198, 0, 0, 0, 528, 1375, 528, 528, 528, 1378, 528,
      /* 63066 */ 528, 528, 528, 528, 528, 528, 1385, 528, 528, 0, 2932, 0, 0, 0, 0, 57893, 57893, 57893, 57893, 57893,
      /* 63086 */ 57893, 60282, 57893, 1389, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1400, 528, 528, 1407,
      /* 63105 */ 58817, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58824, 57893, 57893, 58828, 57893, 57893, 57893,
      /* 63120 */ 57893, 57893, 59895, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59898, 59899,
      /* 63135 */ 57893, 57893, 57893, 57893, 57916, 57916, 57916, 58934, 57916, 57916, 58941, 57916, 57916, 57916, 57916,
      /* 63150 */ 57916, 57916, 57916, 57916, 57916, 59984, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 58955, 57916,
      /* 63165 */ 57916, 57916, 57916, 57916, 0, 57893, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 61542,
      /* 63180 */ 57943, 57943, 57943, 0, 4202, 0, 0, 57943, 57943, 57943, 59003, 57943, 57943, 57943, 59006, 57943,
      /* 63196 */ 57943, 57943, 57943, 57943, 57943, 57943, 59013, 57943, 57943, 59017, 57943, 57943, 57943, 57943, 57943,
      /* 63211 */ 57943, 57943, 57943, 57943, 57943, 57943, 59029, 57943, 57943, 57943, 57943, 57943, 61337, 57943, 57943,
      /* 63226 */ 57943, 61341, 57943, 528, 57893, 0, 0, 0, 0, 3139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3149, 57943, 59036, 57943,
      /* 63249 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59050, 57943, 57943, 57943, 57943, 57943,
      /* 63264 */ 59019, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 58482, 528, 528,
      /* 63279 */ 528, 528, 1822, 0, 1824, 0, 0, 0, 1826, 0, 746, 0, 0, 0, 0, 0, 0, 0, 399, 0, 0, 404, 0, 0, 0, 0, 0,
      /* 63306 */ 1872, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2350, 0, 1757, 0, 0, 0, 0, 0, 0, 528, 1891, 528, 528,
      /* 63335 */ 528, 528, 528, 528, 2440, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2495, 528, 528, 528, 528, 0,
      /* 63356 */ 1897, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1428, 528, 528, 528,
      /* 63376 */ 528, 1919, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1928, 528, 528, 528, 1932, 528, 528, 1937,
      /* 63396 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 1419, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 63416 */ 58773, 0, 57893, 59333, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59340, 57893, 57893, 57893,
      /* 63431 */ 59362, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59371, 57893, 57893, 57893,
      /* 63446 */ 57893, 57943, 57943, 57893, 57893, 57893, 57893, 57943, 57943, 57893, 528, 57893, 57893, 57893, 57893,
      /* 63461 */ 57893, 57893, 57893, 57893, 57893, 61075, 57893, 57893, 57893, 57893, 57893, 58821, 57893, 57893, 57893,
      /* 63476 */ 58825, 57893, 57893, 57893, 57893, 57893, 57893, 59348, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 63491 */ 57893, 57893, 60875, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59375, 57893, 57893, 59380,
      /* 63506 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 61457, 57916, 57916, 57916, 57916,
      /* 63521 */ 57916, 57916, 57916, 59462, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59471,
      /* 63536 */ 57916, 57916, 57916, 57916, 58368, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 63551 */ 57916, 57916, 60011, 57916, 57916, 57916, 57916, 59475, 57916, 57916, 59480, 57916, 57916, 57916, 57916,
      /* 63566 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59972, 57916, 57916, 57916, 59975, 59558, 57943, 57943,
      /* 63581 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59567, 57943, 57943, 57943, 59571, 57943, 57943,
      /* 63596 */ 59576, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59569,
      /* 63611 */ 57943, 57943, 57916, 57916, 57916, 59990, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 63626 */ 57916, 57916, 57916, 58948, 57916, 57916, 57916, 57943, 57943, 57943, 60073, 57943, 57943, 57943, 57943,
      /* 63641 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59010, 57943, 57943, 57943, 2804, 0, 0, 0, 0, 0,
      /* 63659 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2376, 57916, 60409, 57916, 57916, 57943, 57943, 57943, 57943, 57943,
      /* 63679 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59030, 57943, 57943, 57943, 57943,
      /* 63694 */ 60474, 57943, 57943, 528, 528, 528, 528, 528, 57893, 57893, 57893, 57893, 57893, 2290, 0, 2291, 0, 0,
      /* 63712 */ 3214, 0, 0, 0, 528, 3218, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1383, 528, 528, 528, 528,
      /* 63733 */ 1388, 3242, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1962, 57893,
      /* 63752 */ 60633, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 63767 */ 60335, 57893, 57916, 57916, 57916, 57916, 60682, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 63782 */ 57916, 57916, 57916, 59998, 57916, 57916, 57916, 57916, 0, 0, 3419, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3425, 0,
      /* 63804 */ 0, 0, 0, 0, 2410, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 417792, 309, 310, 0, 0, 0, 0, 3841, 528, 528, 528, 528,
      /* 63831 */ 528, 528, 528, 3846, 528, 528, 528, 528, 528, 528, 2465, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 63851 */ 528, 3943, 528, 3945, 528, 528, 528, 57893, 57893, 57893, 57893, 61208, 57893, 57893, 57893, 57893,
      /* 63867 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59369, 57893, 57893, 57893, 57893, 57916, 61227, 57916,
      /* 63882 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59524, 57916,
      /* 63897 */ 0, 0, 3675, 3927, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1266, 0, 0, 0, 528, 528, 528, 3937, 528, 528, 528,
      /* 63924 */ 528, 3941, 528, 528, 528, 528, 528, 3947, 528, 528, 0, 57893, 57893, 57893, 58320, 57893, 57893, 155942,
      /* 63942 */ 1151, 0, 0, 0, 0, 0, 0, 1751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 754, 0, 0, 0, 0, 0, 0, 528, 528, 57893, 57893,
      /* 63970 */ 57893, 61296, 57893, 57893, 57893, 57893, 61300, 57893, 57893, 57893, 57893, 57893, 58317, 57893, 57893,
      /* 63985 */ 57893, 57893, 0, 57916, 57916, 58336, 57916, 57916, 61306, 57893, 57893, 57893, 57893, 57916, 57916,
      /* 64000 */ 57916, 61312, 57916, 57916, 57916, 57916, 61316, 57916, 57916, 57916, 57916, 58371, 58373, 57916, 57916,
      /* 64015 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 58945, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 64030 */ 57916, 57916, 61322, 57916, 57916, 57916, 57916, 57943, 57943, 57943, 61328, 57943, 57943, 57943, 57943,
      /* 64045 */ 57943, 57943, 60981, 57943, 60983, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60078, 57943,
      /* 64060 */ 57943, 57943, 57943, 60083, 57943, 57943, 61332, 57943, 57943, 57943, 57943, 57943, 61338, 57943, 57943,
      /* 64075 */ 57943, 57943, 528, 57893, 0, 0, 0, 0, 0, 2797, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1881, 0, 0, 0, 0, 0, 528,
      /* 64102 */ 528, 528, 4017, 528, 528, 528, 4021, 528, 528, 528, 528, 528, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 64120 */ 58281, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 61376, 57893, 57893, 57893, 61380, 57893, 57893,
      /* 64135 */ 57893, 57893, 57893, 57893, 57916, 57916, 57916, 57916, 57916, 60939, 57916, 60941, 57916, 57916, 57916,
      /* 64150 */ 57916, 57916, 57916, 57916, 57916, 58881, 57916, 57916, 57916, 57916, 57916, 57916, 58896, 57916, 57916,
      /* 64165 */ 61392, 57916, 57916, 57916, 61396, 57916, 57916, 57916, 57916, 57916, 57916, 57943, 57943, 57943, 61242,
      /* 64180 */ 57943, 57943, 57943, 61245, 57943, 57943, 57943, 57943, 61408, 57943, 57943, 57943, 61412, 57943, 57943,
      /* 64195 */ 57943, 57943, 57943, 57943, 0, 0, 0, 0, 0, 2821, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1739, 0, 0, 0, 0, 0, 0,
      /* 64222 */ 4270, 0, 528, 528, 528, 528, 528, 528, 57893, 57893, 57893, 57893, 57893, 57893, 57916, 61311, 57916,
      /* 64239 */ 57916, 61313, 57916, 57916, 57916, 57916, 57916, 57916, 59497, 57916, 57916, 59500, 57916, 57916, 57916,
      /* 64254 */ 57916, 57916, 57916, 57916, 61526, 57916, 61528, 57916, 57916, 57916, 57916, 57943, 57943, 57943, 57943,
      /* 64269 */ 57943, 57943, 57943, 60415, 57943, 57943, 57943, 57943, 0, 528, 528, 57893, 57893, 57916, 57916, 57943,
      /* 64285 */ 57943, 0, 528, 57893, 57916, 57943, 4308, 4309, 61654, 61655, 61656, 0, 528, 57893, 57916, 57943, 0,
      /* 64302 */ 528, 57893, 57916, 57943, 0, 0, 0, 0, 0, 2831, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1257, 0, 0, 0, 0, 1262, 0,
      /* 64329 */ 350, 0, 408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 408, 0, 350, 0, 139264, 147456, 0, 0, 0, 0, 0, 514, 514, 514,
      /* 64356 */ 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 542, 57908, 542, 57908, 542, 542,
      /* 64375 */ 57908, 542, 542, 57931, 57908, 542, 542, 57908, 57908, 57908, 57908, 57958, 57958, 57908, 57908, 57908,
      /* 64391 */ 57908, 57958, 57958, 57908, 623, 57908, 57974, 57931, 57908, 57908, 57908, 57908, 57908, 57908, 57908,
      /* 64406 */ 57931, 57931, 57908, 57908, 57958, 57908, 57908, 57908, 57974, 57974, 1, 24578, 3, 155942, 155942, 296,
      /* 64422 */ 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 0, 131072, 0, 0, 0, 328, 0, 0, 330, 0, 0, 0, 0, 0, 0, 2847, 2848, 0,
      /* 64450 */ 0, 0, 0, 0, 0, 0, 0, 0, 5808128, 0, 0, 0, 0, 4792320, 4833280, 844, 528, 528, 528, 528, 528, 528, 528,
      /* 64473 */ 528, 528, 528, 528, 890, 528, 528, 528, 528, 528, 3499, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 64493 */ 3508, 528, 908, 528, 528, 57893, 57893, 58262, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 64509 */ 57893, 61222, 57916, 57916, 57916, 57916, 57916, 57916, 57893, 57893, 58309, 57893, 57893, 57893, 57893,
      /* 64524 */ 58327, 57893, 57893, 0, 57916, 57916, 58338, 57916, 57916, 57916, 57916, 58877, 57916, 57916, 57916,
      /* 64539 */ 57916, 58883, 57916, 57916, 57916, 57916, 57916, 57916, 59993, 59994, 57916, 57916, 57916, 57916, 57916,
      /* 64554 */ 57916, 60001, 57916, 57943, 57943, 57943, 57943, 58460, 57943, 57943, 57943, 57943, 58478, 57943, 57943,
      /* 64569 */ 528, 528, 528, 528, 528, 528, 57893, 57893, 57893, 57893, 57893, 57893, 1151, 1724, 1173, 0, 0, 0, 0,
      /* 64588 */ 1178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2310144, 0, 368, 0, 0, 0, 0, 0, 1173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 64618 */ 0, 0, 0, 0, 0, 2816, 528, 528, 528, 528, 1354, 528, 528, 528, 528, 1364, 528, 528, 528, 528, 528, 528,
      /* 64640 */ 2491, 528, 2493, 528, 528, 528, 528, 528, 528, 0, 58773, 914, 57893, 57893, 57893, 58779, 57893, 57893,
      /* 64658 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58793, 57916, 58874, 57916, 57916, 57916, 57916, 57916,
      /* 64673 */ 57916, 57916, 57916, 57916, 58888, 57916, 57916, 57916, 57916, 57916, 59448, 57916, 57916, 57916, 57916,
      /* 64688 */ 57916, 57916, 57916, 57916, 57916, 59459, 58898, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 64703 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59961, 57916, 58914, 57916, 57916, 57916, 57916, 57916,
      /* 64718 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59987, 59988, 58953, 57916, 57916,
      /* 64733 */ 57916, 57916, 57916, 57916, 0, 57893, 57943, 57943, 57943, 58968, 57943, 57943, 57943, 57943, 57943,
      /* 64748 */ 59041, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59053, 59054, 0, 1728, 0, 0, 0, 0, 1735,
      /* 64766 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3424, 0, 0, 0, 0, 0, 0, 0, 0, 1761, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 64798 */ 3185, 0, 0, 1775, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2840, 0, 0, 2353, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 64829 */ 0, 0, 0, 0, 0, 3201, 0, 0, 2449, 528, 528, 528, 528, 528, 528, 2454, 528, 2456, 528, 528, 528, 528, 528,
      /* 64852 */ 528, 2884, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2915, 528, 528, 528, 528, 528, 2502, 0, 0,
      /* 64873 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 61387, 57916,
      /* 64888 */ 57916, 57893, 57893, 57893, 59880, 57893, 57893, 57893, 57893, 57893, 57893, 59885, 57893, 59887, 57893,
      /* 64903 */ 57893, 57893, 0, 0, 2592, 0, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 61470,
      /* 64919 */ 57943, 57943, 57943, 57943, 57943, 57943, 59976, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 64934 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60013, 57916, 60059, 57943, 57943, 57943, 57943, 57943,
      /* 64949 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59033, 528, 2906, 528, 528, 528,
      /* 64965 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1960, 528, 57916, 57916, 60383, 57916, 57916,
      /* 64983 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60367, 57916, 57916, 0, 0,
      /* 64999 */ 3675, 0, 0, 0, 0, 3931, 0, 0, 3933, 0, 0, 0, 0, 0, 0, 1192, 0, 0, 0, 1196, 1197, 0, 0, 0, 0, 528, 3936,
      /* 65026 */ 528, 528, 3938, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3247, 528, 528, 528, 528,
      /* 65046 */ 528, 57893, 61295, 57893, 57893, 61297, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 65061 */ 61456, 57916, 57916, 57916, 57916, 57916, 57916, 0, 0, 800, 0, 800, 0, 0, 0, 0, 0, 0, 0, 0, 800, 0, 0,
      /* 65084 */ 0, 0, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 0, 307, 0, 528, 528, 528, 528,
      /* 65106 */ 860, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3257, 528, 528, 3260, 57916, 58355,
      /* 65125 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60368,
      /* 65140 */ 57916, 1161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3174, 528, 528, 528, 528, 58773, 1987, 57893,
      /* 65165 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59910, 57893, 57893, 57893, 57893, 57893,
      /* 65180 */ 57893, 57893, 57943, 57943, 60445, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 65195 */ 57943, 57943, 57943, 59585, 57943, 57943, 57893, 61081, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 65210 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60639, 57893, 0, 0, 0, 351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 65232 */ 0, 0, 0, 1746, 0, 0, 0, 0, 0, 0, 352, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1756, 1757, 0, 0, 0, 0, 353,
      /* 65262 */ 351, 131072, 0, 351, 351, 0, 353, 0, 351, 0, 0, 351, 353, 351, 0, 0, 0, 351, 351, 351, 351, 351, 351,
      /* 65285 */ 351, 351, 505, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 543,
      /* 65305 */ 57909, 543, 57909, 543, 543, 57909, 543, 543, 57932, 57909, 543, 543, 57909, 57909, 57909, 57909, 57959,
      /* 65322 */ 57959, 57909, 57909, 57909, 57909, 57959, 57959, 57909, 543, 57909, 57909, 57932, 57909, 57909, 57909,
      /* 65337 */ 57909, 57909, 57909, 57909, 57932, 57932, 57909, 57909, 57959, 57909, 57909, 57909, 1, 24578, 3, 155942,
      /* 65353 */ 155942, 296, 0, 0, 0, 0, 0, 302, 303, 0, 811, 812, 0, 0, 0, 0, 0, 0, 758, 0, 0, 817, 0, 0, 0, 0, 0, 0,
      /* 65381 */ 4082, 0, 0, 0, 0, 528, 528, 528, 528, 528, 3221, 528, 3222, 528, 528, 528, 528, 0, 817, 0, 664, 0, 0, 0,
      /* 65405 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1787, 0, 0, 0, 832, 0, 0, 0, 0, 0, 0, 812, 0, 0, 0, 0, 0, 0, 0, 528, 528,
      /* 65435 */ 528, 528, 528, 2873, 528, 528, 528, 528, 2877, 528, 528, 528, 0, 2503, 57893, 57893, 57893, 57893,
      /* 65453 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 61087, 57893, 57893, 57893, 57893, 528, 850, 528, 528,
      /* 65469 */ 528, 866, 870, 528, 528, 528, 528, 528, 891, 893, 528, 528, 0, 2932, 0, 0, 0, 0, 57893, 57893, 57893,
      /* 65490 */ 60280, 57893, 60281, 57893, 57893, 57893, 50676, 0, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 65505 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59473, 904, 528, 528, 528, 57893, 57893,
      /* 65521 */ 58263, 58269, 57893, 57893, 57893, 58285, 58289, 57893, 57893, 57893, 0, 2590, 0, 0, 57916, 57916,
      /* 65537 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59970, 57916, 57916, 57916, 57916, 57916, 57916, 57893,
      /* 65552 */ 57893, 58310, 58312, 57893, 57893, 58323, 57893, 57893, 57893, 0, 57916, 57916, 58339, 58345, 57916, 0,
      /* 65568 */ 0, 0, 0, 57893, 57943, 57943, 58412, 57943, 57943, 57943, 58429, 57943, 57943, 58445, 57916, 57916,
      /* 65584 */ 58361, 58365, 57916, 57916, 57916, 57916, 57916, 58386, 58388, 57916, 57916, 58399, 57916, 57916, 57916,
      /* 65599 */ 57916, 58904, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60945, 57916,
      /* 65614 */ 57916, 57916, 57916, 57943, 57943, 57943, 57943, 58461, 58463, 57943, 57943, 58474, 57943, 57943, 57943,
      /* 65629 */ 850, 528, 893, 528, 528, 0, 58270, 58266, 58491, 58314, 57893, 57893, 155942, 1151, 0, 0, 1154, 0, 0, 0,
      /* 65649 */ 0, 0, 245760, 245760, 245760, 245760, 245760, 245760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 65672 */ 4358144, 4358144, 4358144, 904, 528, 0, 57893, 58269, 58312, 57893, 58323, 57893, 155942, 1151, 0, 302,
      /* 65688 */ 0, 0, 306, 307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1772, 0, 0, 0, 0, 0, 1217, 0, 1219, 0, 1221, 0,
      /* 65717 */ 0, 0, 0, 0, 0, 0, 0, 1286, 0, 0, 0, 0, 0, 0, 0, 0, 1247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3839,
      /* 65749 */ 0, 1332, 0, 0, 0, 0, 0, 0, 0, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3850, 528,
      /* 65772 */ 528, 1374, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2461, 528, 528,
      /* 65792 */ 528, 1412, 528, 528, 528, 528, 528, 528, 528, 528, 1424, 1425, 528, 528, 0, 57893, 57893, 57893, 57893,
      /* 65811 */ 57893, 57893, 294, 1151, 0, 0, 0, 0, 0, 0, 0, 5480448, 4358144, 4358144, 4358144, 4358144, 4857856,
      /* 65828 */ 4874240, 4358144, 4358144, 58773, 914, 57893, 57893, 57893, 57893, 58780, 57893, 57893, 57893, 57893,
      /* 65842 */ 57893, 57893, 57893, 57893, 57893, 60289, 57893, 57893, 57893, 57893, 57893, 60294, 57893, 57916, 57916,
      /* 65857 */ 58875, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60378,
      /* 65872 */ 57916, 57916, 57916, 57916, 58932, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 58946, 57916, 57916,
      /* 65887 */ 57916, 57916, 57916, 57916, 61241, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 61246, 57943, 57916,
      /* 65902 */ 57916, 57916, 58958, 58959, 57916, 57916, 0, 57893, 57943, 57943, 57943, 57943, 58969, 57943, 57943,
      /* 65917 */ 3648, 528, 528, 60995, 57893, 57893, 0, 0, 0, 0, 0, 0, 0, 0, 1815, 0, 0, 0, 0, 0, 0, 0, 57943, 59000,
      /* 65941 */ 59002, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59602,
      /* 65956 */ 57943, 57943, 0, 1808, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212992, 0, 528, 528, 1966, 528, 528,
      /* 65981 */ 528, 528, 528, 528, 528, 528, 528, 1975, 528, 528, 528, 528, 528, 3513, 3515, 528, 528, 528, 3518, 528,
      /* 66001 */ 3520, 3521, 528, 57893, 528, 1981, 528, 528, 58773, 0, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 66018 */ 59338, 57893, 57893, 57893, 50676, 2087, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 66033 */ 57916, 57916, 60674, 57916, 57916, 57916, 57916, 57893, 59409, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 66048 */ 57893, 57893, 57893, 59419, 57893, 57893, 57893, 57893, 57893, 59907, 57893, 57893, 57893, 57893, 57893,
      /* 66063 */ 57893, 57893, 57893, 57893, 57893, 0, 57916, 57916, 58340, 57916, 57916, 59425, 57893, 57893, 50676, 0,
      /* 66079 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59438, 57916, 57916, 57916, 57916, 57916, 61116, 57916,
      /* 66094 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 61124, 57916, 59509, 57916, 57916, 57916, 57916, 57916,
      /* 66109 */ 57916, 57916, 57916, 57916, 59519, 57916, 57916, 57916, 57916, 59525, 57943, 57943, 59559, 57943, 57943,
      /* 66124 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59620, 57943, 57943, 2393,
      /* 66139 */ 0, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2403, 0, 0, 0, 0, 343, 390, 0, 0, 0, 139264, 147456, 0, 0, 0,
      /* 66166 */ 423, 0, 0, 0, 2408, 2409, 0, 0, 0, 0, 0, 2413, 0, 0, 0, 0, 0, 0, 0, 3153, 0, 0, 0, 0, 0, 0, 0, 0, 378,
      /* 66195 */ 0, 0, 0, 0, 0, 0, 0, 0, 2419, 528, 528, 528, 528, 528, 528, 2426, 528, 528, 528, 528, 528, 528, 528,
      /* 66218 */ 1394, 528, 528, 528, 528, 528, 528, 528, 528, 2886, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2450,
      /* 66238 */ 528, 528, 528, 528, 528, 528, 528, 528, 2457, 528, 2459, 528, 2462, 528, 528, 528, 2476, 528, 528, 528,
      /* 66258 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 61371, 57893, 57893, 0, 0, 0, 59849, 57893, 57893,
      /* 66277 */ 57893, 57893, 57893, 57893, 57893, 59857, 57893, 57893, 57893, 57893, 57893, 60301, 57893, 57893, 57893,
      /* 66292 */ 57893, 57893, 57893, 57893, 60306, 57893, 57893, 59890, 57893, 59893, 57893, 57893, 57893, 57893, 57893,
      /* 66307 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60304, 57893, 57893, 57893, 57893, 59902, 57893,
      /* 66322 */ 57893, 57893, 57893, 57893, 59908, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60330,
      /* 66337 */ 57893, 57893, 57893, 60333, 60334, 57893, 57893, 57916, 57916, 59977, 57916, 59979, 57916, 59982, 57916,
      /* 66352 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60363, 57916, 60365, 57916, 57916, 57916, 57916,
      /* 66367 */ 57916, 57916, 57916, 57916, 59991, 57916, 57916, 57916, 57916, 57916, 59997, 57916, 57916, 57916, 57916,
      /* 66382 */ 57916, 57916, 61606, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 0, 0, 57943, 57943, 60060, 57943,
      /* 66398 */ 60062, 57943, 60065, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59007, 57943, 57943,
      /* 66413 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60074, 57943, 57943, 57943, 57943, 57943, 60080,
      /* 66428 */ 57943, 57943, 57943, 57943, 57943, 57943, 59612, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 66443 */ 57943, 0, 0, 4240, 0, 0, 0, 528, 0, 0, 0, 2819, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2827, 0, 0, 0, 0, 131072,
      /* 66471 */ 0, 0, 0, 357, 0, 0, 0, 0, 359, 0, 0, 400, 0, 0, 0, 0, 0, 139264, 147456, 400, 411, 0, 424, 411, 2841, 0,
      /* 66497 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3187, 528, 2880, 528, 528, 528, 528, 528, 2885, 528, 528, 528,
      /* 66523 */ 528, 528, 528, 528, 528, 3502, 528, 528, 528, 528, 528, 528, 528, 57893, 57893, 57893, 60310, 57893,
      /* 66541 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60628, 57893, 57893, 57893,
      /* 66556 */ 57893, 57916, 60356, 57916, 57916, 57916, 57916, 57916, 60361, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 66571 */ 57916, 57916, 59953, 57916, 59955, 57916, 57916, 57916, 57916, 57916, 57916, 57943, 57943, 57943, 57943,
      /* 66586 */ 60421, 57943, 57943, 57943, 57943, 57943, 60426, 57943, 57943, 57943, 57943, 57943, 57943, 60064, 57943,
      /* 66601 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59566, 57943, 57943, 57943, 57943, 57943,
      /* 66616 */ 57893, 60652, 57893, 57893, 57893, 57893, 0, 0, 57916, 57916, 57916, 57916, 57916, 60661, 57916, 60662,
      /* 66632 */ 57916, 57916, 57916, 57916, 60701, 57916, 57916, 57916, 57916, 57943, 57943, 57943, 57943, 57943, 60710,
      /* 66647 */ 57943, 57943, 57943, 57943, 57943, 61481, 57943, 57943, 61483, 57943, 0, 0, 0, 0, 0, 0, 0, 2808, 0, 0,
      /* 66667 */ 0, 0, 0, 0, 0, 0, 350, 0, 0, 0, 0, 0, 0, 0, 60711, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 66689 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59587, 528, 3483, 528, 528, 528, 528, 528, 528,
      /* 66706 */ 528, 528, 528, 528, 528, 528, 528, 528, 1978, 528, 60867, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 66723 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59929, 57916, 60909, 57916, 57916, 57916,
      /* 66738 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60395, 57916, 57916, 57943,
      /* 66753 */ 60951, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60069,
      /* 66768 */ 57943, 57943, 0, 3670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 278528, 0, 0, 0, 3675, 0, 0, 0, 3930,
      /* 66795 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3476, 0, 0, 0, 0, 0, 0, 3935, 528, 528, 528, 528, 3939, 528, 528, 528, 528,
      /* 66821 */ 528, 528, 528, 528, 528, 3948, 528, 528, 61294, 57893, 57893, 57893, 57893, 61298, 57893, 57893, 57893,
      /* 66838 */ 57893, 57893, 57893, 57893, 57893, 60342, 57893, 57893, 0, 0, 0, 3000, 0, 57893, 61307, 57893, 57893,
      /* 66855 */ 57893, 61310, 57916, 57916, 57916, 57916, 61314, 57916, 57916, 57916, 57916, 57916, 57943, 57943, 57943,
      /* 66870 */ 57943, 57943, 57943, 0, 0, 0, 0, 528, 528, 528, 3219, 528, 528, 528, 528, 528, 3224, 528, 528, 57916,
      /* 66890 */ 57916, 57916, 57916, 61323, 57916, 57916, 57916, 61326, 57943, 57943, 57943, 57943, 61330, 57943, 57943,
      /* 66905 */ 57943, 57943, 57943, 60089, 60090, 60091, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 66920 */ 59615, 57943, 57943, 57943, 57943, 59621, 57943, 4090, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 66937 */ 57893, 57893, 57893, 57893, 57893, 61447, 0, 0, 0, 4149, 0, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 66957 */ 528, 528, 528, 528, 3851, 528, 528, 528, 528, 528, 4248, 528, 57893, 57893, 57893, 57893, 57893, 61598,
      /* 66975 */ 57893, 57893, 57916, 57916, 57916, 57916, 58919, 57916, 57916, 58923, 57916, 57916, 57916, 57916, 57916,
      /* 66990 */ 57916, 57916, 57916, 61572, 61573, 57916, 57916, 57943, 57943, 57943, 57943, 57916, 57916, 57916, 61604,
      /* 67005 */ 57916, 57916, 57943, 57943, 57943, 57943, 57943, 61610, 57943, 57943, 0, 0, 0, 0, 363, 0, 0, 0, 0,
      /* 67024 */ 139264, 147456, 0, 0, 0, 0, 0, 0, 1307, 0, 528, 528, 1339, 528, 1342, 528, 528, 528, 4269, 0, 4271, 528,
      /* 67046 */ 528, 528, 528, 528, 528, 57893, 57893, 57893, 57893, 57893, 57893, 57916, 0, 0, 0, 0, 57893, 57943,
      /* 67064 */ 57943, 58413, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 61582, 0, 0, 0, 0, 0, 0, 528, 388,
      /* 67083 */ 0, 354, 0, 0, 0, 0, 0, 397, 398, 0, 399, 0, 0, 0, 0, 0, 0, 4208, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 67109 */ 528, 1380, 528, 528, 528, 528, 528, 528, 371, 379, 407, 0, 0, 0, 371, 0, 0, 354, 0, 0, 0, 371, 0, 410,
      /* 67133 */ 412, 0, 371, 399, 0, 0, 371, 379, 0, 139264, 147456, 399, 410, 0, 0, 410, 0, 0, 0, 433, 131072, 0, 433,
      /* 67156 */ 433, 443, 0, 0, 433, 0, 412, 433, 0, 0, 0, 0, 131072, 0, 0, 0, 438, 0, 0, 0, 0, 0, 311, 0, 0, 0, 0,
      /* 67183 */ 2796, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 450560, 450560, 0, 0, 0, 465, 0, 0, 0, 493, 493, 493, 493, 493,
      /* 67209 */ 493, 493, 493, 493, 493, 515, 515, 515, 515, 515, 527, 515, 515, 515, 527, 515, 515, 515, 515, 515, 515,
      /* 67230 */ 544, 57910, 544, 57910, 544, 544, 57910, 544, 544, 57933, 57910, 544, 544, 57910, 57910, 57910, 57910,
      /* 67247 */ 57960, 57960, 57910, 57910, 57910, 57910, 57960, 57960, 57910, 624, 57910, 57975, 57933, 57910, 57910,
      /* 67262 */ 57910, 57910, 57910, 57910, 57910, 57933, 57933, 57910, 57910, 57960, 57910, 57910, 57910, 57975, 57975,
      /* 67277 */ 1, 24578, 3, 155942, 155942, 296, 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 0, 131072, 0, 0, 0, 441, 342, 0, 0,
      /* 67302 */ 0, 453, 0, 342, 343, 344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2853, 0, 0, 0, 306, 307, 0, 0, 0, 643,
      /* 67331 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3687, 0, 0, 0, 0, 0, 0, 669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 67363 */ 3428, 845, 528, 528, 528, 528, 528, 528, 876, 878, 528, 528, 528, 528, 528, 528, 528, 1415, 528, 528,
      /* 67383 */ 528, 528, 528, 528, 1426, 528, 528, 528, 528, 528, 57893, 57893, 58264, 57893, 57893, 57893, 57893,
      /* 67400 */ 57893, 57893, 58295, 58297, 57893, 57893, 57893, 57893, 58803, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 67415 */ 57893, 57893, 57893, 57893, 57893, 59384, 57893, 57893, 57893, 57893, 58448, 57943, 57943, 57943, 57943,
      /* 67430 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 528, 528, 528, 528, 528, 57893, 57893, 57893, 57893,
      /* 67446 */ 57893, 2290, 1725, 2291, 0, 0, 0, 0, 0, 1309, 1335, 1336, 0, 1309, 528, 528, 528, 528, 528, 528, 1344,
      /* 67467 */ 528, 528, 528, 528, 528, 3706, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1974, 528, 528,
      /* 67487 */ 528, 528, 528, 528, 1348, 528, 528, 1359, 528, 528, 1363, 528, 528, 528, 528, 528, 528, 528, 1416, 528,
      /* 67507 */ 528, 528, 528, 528, 528, 528, 528, 3709, 528, 528, 528, 528, 528, 528, 528, 58773, 914, 57893, 57893,
      /* 67526 */ 57893, 57893, 57893, 57893, 57893, 58783, 57893, 57893, 57893, 58787, 57893, 57893, 57893, 57893, 57893,
      /* 67541 */ 60623, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58845, 57893, 57893, 57893,
      /* 67556 */ 57893, 57893, 58798, 57893, 57893, 58802, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 67571 */ 57893, 57893, 57893, 60638, 57893, 57893, 57893, 57893, 57916, 58916, 57916, 57916, 57916, 58920, 57916,
      /* 67586 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59469, 57916, 57916, 57916, 57916, 57916,
      /* 67601 */ 58972, 57943, 57943, 57943, 58976, 57943, 57943, 58987, 57943, 57943, 58991, 57943, 57943, 57943, 57943,
      /* 67616 */ 57943, 57943, 60076, 60077, 57943, 57943, 57943, 57943, 57943, 57943, 60084, 57943, 59014, 57943, 57943,
      /* 67631 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59604, 1745,
      /* 67646 */ 1746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 507904, 0, 0, 0, 0, 1778, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 67677 */ 0, 0, 1828, 0, 0, 0, 1791, 0, 1793, 0, 0, 0, 1797, 0, 0, 0, 1801, 0, 0, 0, 1805, 0, 0, 0, 0, 131072, 0,
      /* 67704 */ 0, 0, 442, 0, 0, 0, 449, 0, 0, 0, 0, 0, 2846, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1224, 0, 0, 0, 0, 0, 1980,
      /* 67734 */ 528, 528, 528, 58773, 0, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60625,
      /* 67750 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57943, 57943, 57943, 57943, 59545, 57943, 57943, 57943,
      /* 67765 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60068, 57943, 57943, 57943, 0, 0, 2314,
      /* 67781 */ 0, 2315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262738, 0, 0, 0, 0, 2377, 0, 0, 0, 0, 0, 0, 2384, 0, 0, 0, 0,
      /* 67811 */ 0, 0, 0, 0, 1326, 1327, 0, 0, 1167, 0, 0, 0, 0, 528, 528, 2421, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 67835 */ 528, 528, 528, 528, 888, 528, 528, 528, 528, 528, 528, 528, 2489, 528, 528, 528, 528, 528, 528, 528,
      /* 67855 */ 528, 528, 528, 0, 0, 57893, 57893, 57893, 57893, 60611, 57893, 57893, 57893, 57893, 57893, 57893, 59868,
      /* 67872 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58330, 0, 57916, 57916, 57916, 57916,
      /* 67887 */ 58347, 0, 0, 0, 57893, 57893, 59851, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 67903 */ 57893, 60901, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60113, 0, 0, 1729, 0, 0, 1736, 0, 0, 0,
      /* 67922 */ 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 0, 0, 0, 0, 0, 2858, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2864, 0, 0, 0,
      /* 67951 */ 0, 0, 3152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3158, 57893, 57893, 57893, 57893, 60311, 57893, 57893, 57893,
      /* 67972 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60890, 57893, 60892, 57893, 57893, 60323, 57893,
      /* 67987 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60295,
      /* 68002 */ 60443, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60455, 57943, 57943,
      /* 68017 */ 57943, 57943, 57943, 59593, 57943, 57943, 59596, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 68032 */ 59551, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59565, 57943, 57943, 57943, 57943, 57943,
      /* 68047 */ 57943, 57943, 57943, 59580, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59614, 57943, 57943,
      /* 68062 */ 57943, 57943, 57943, 57943, 57943, 57943, 60037, 57943, 57943, 60041, 57943, 57943, 57943, 60045, 0, 0,
      /* 68078 */ 3190, 0, 0, 0, 0, 3195, 0, 0, 0, 0, 0, 0, 0, 0, 1783, 1784, 1785, 0, 0, 0, 0, 0, 3250, 528, 528, 528,
      /* 68104 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2472, 57893, 57893, 60642, 57893, 57893,
      /* 68122 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 61385, 57893, 57916, 57916,
      /* 68137 */ 57916, 0, 3468, 3469, 0, 0, 0, 0, 3474, 0, 0, 0, 0, 0, 0, 0, 0, 1799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3681,
      /* 68165 */ 0, 0, 0, 3684, 0, 0, 0, 0, 0, 0, 0, 0, 3692, 57893, 61092, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 68186 */ 57893, 57893, 57893, 57916, 57916, 57916, 57916, 57916, 57943, 57943, 57943, 57943, 57943, 57943, 0, 0,
      /* 68202 */ 0, 0, 4290, 528, 3813, 57893, 57893, 61159, 3816, 0, 0, 0, 0, 3820, 0, 0, 0, 0, 0, 0, 1236, 0, 0, 0, 0,
      /* 68227 */ 0, 0, 0, 0, 0, 2799, 0, 0, 0, 0, 0, 0, 0, 3833, 0, 0, 0, 0, 3837, 0, 0, 0, 0, 0, 0, 0, 0, 3840, 0, 528,
      /* 68257 */ 528, 528, 3842, 528, 528, 528, 3845, 528, 528, 528, 528, 528, 528, 528, 1938, 528, 528, 528, 528, 528,
      /* 68277 */ 528, 528, 528, 3235, 528, 528, 3238, 528, 528, 528, 528, 57893, 57893, 57893, 61207, 57893, 57893,
      /* 68294 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 61084, 57893, 57893, 57893, 57893,
      /* 68309 */ 57893, 57893, 57893, 61226, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 68324 */ 57916, 57916, 57916, 57916, 60407, 57916, 528, 528, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 68339 */ 57893, 57893, 57893, 61302, 57893, 61304, 57893, 57893, 57893, 57893, 58819, 57893, 57893, 57893, 57893,
      /* 68354 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59913, 57893, 57893, 57893, 57893, 57916, 61320, 57916,
      /* 68369 */ 57916, 57916, 57916, 57916, 57916, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 4268, 0,
      /* 68384 */ 57943, 57943, 61334, 57943, 61336, 57943, 57943, 57943, 57943, 57943, 57943, 528, 57893, 0, 0, 0, 0, 0,
      /* 68402 */ 3164, 0, 0, 0, 0, 3169, 0, 0, 0, 0, 0, 0, 1220, 0, 0, 0, 0, 0, 1226, 0, 1228, 0, 4146, 0, 0, 0, 0, 528,
      /* 68430 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 4160, 528, 528, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 68448 */ 57893, 57893, 57893, 57893, 61516, 57893, 57893, 57893, 0, 2591, 0, 0, 57916, 57916, 57916, 57916,
      /* 68464 */ 57916, 57916, 57916, 57916, 57916, 59996, 57916, 57916, 57916, 57916, 57916, 57916, 528, 528, 57893,
      /* 68479 */ 57893, 61560, 57893, 61561, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57916, 0, 0, 0, 0,
      /* 68496 */ 57893, 57943, 57943, 58414, 58420, 57943, 57943, 57943, 58436, 58440, 57943, 57943, 57943, 57943, 57943,
      /* 68511 */ 61411, 57943, 61413, 61414, 57943, 61416, 57943, 61418, 0, 0, 0, 0, 0, 1849, 0, 0, 0, 0, 0, 0, 1748, 0,
      /* 68533 */ 0, 0, 0, 0, 1864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2401, 0, 0, 0, 0, 0, 57916, 61568, 57916, 61569, 57916,
      /* 68559 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57943, 57943, 61576, 57943, 57943, 57943, 57943, 57943,
      /* 68574 */ 61539, 57943, 61541, 57943, 57943, 57943, 57943, 0, 0, 0, 0, 0, 0, 3435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 68597 */ 1273, 0, 0, 0, 0, 0, 0, 61577, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 0, 0, 0, 0, 0, 0,
      /* 68619 */ 528, 528, 528, 2871, 2872, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3237, 528, 528, 528, 528,
      /* 68639 */ 528, 358, 359, 360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 0, 296, 0, 0, 0, 0, 131072, 0, 352256, 352256, 0, 0,
      /* 68665 */ 0, 352256, 0, 0, 352256, 0, 352256, 352256, 352256, 352256, 352256, 352256, 352256, 352256, 352256,
      /* 68680 */ 352256, 352256, 352256, 352256, 352256, 352256, 352256, 0, 482, 482, 482, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 68701 */ 516, 516, 520, 520, 520, 520, 520, 516, 520, 520, 520, 516, 520, 520, 520, 520, 520, 520, 545, 57911,
      /* 68721 */ 545, 57911, 545, 545, 57911, 545, 545, 57934, 57911, 545, 545, 57911, 57911, 57911, 57911, 57961, 57961,
      /* 68738 */ 57911, 57911, 57911, 57911, 57961, 57961, 57911, 625, 57911, 57976, 57934, 57911, 57911, 57911, 57911,
      /* 68753 */ 57911, 57911, 57911, 57934, 57934, 57911, 57911, 57961, 57911, 57911, 57911, 57976, 57976, 1, 24578, 3,
      /* 68769 */ 155942, 155942, 296, 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 0, 245760, 0, 0, 245760, 0, 0, 245760, 0, 0,
      /* 68792 */ 245760, 0, 245760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 516567, 516567, 516567, 0, 306, 307, 0, 0, 0,
      /* 68817 */ 0, 644, 0, 0, 0, 0, 0, 0, 0, 0, 1837, 0, 0, 0, 0, 0, 0, 0, 0, 0, 687, 688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 68849 */ 0, 368, 368, 0, 0, 0, 760, 0, 0, 0, 0, 765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4841472, 0, 0, 0, 4898816, 0,
      /* 68877 */ 794, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 803, 0, 808, 0, 0, 0, 0, 392, 0, 0, 0, 396, 392, 0, 0, 0, 0, 0, 0, 0,
      /* 68908 */ 2823, 0, 0, 0, 0, 0, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 820, 0, 0, 0, 0, 0, 644, 0, 0, 0, 0, 0,
      /* 68940 */ 0, 0, 3436, 0, 0, 0, 0, 0, 0, 0, 0, 681, 0, 0, 0, 0, 0, 0, 680, 0, 0, 794, 0, 0, 0, 0, 0, 0, 0, 0, 644,
      /* 68971 */ 0, 0, 794, 528, 528, 528, 528, 528, 3717, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1381, 528,
      /* 68992 */ 528, 528, 528, 528, 846, 528, 528, 528, 528, 867, 871, 877, 528, 882, 528, 528, 528, 528, 528, 900, 528,
      /* 69013 */ 528, 528, 528, 57893, 57893, 58265, 57893, 57893, 57893, 57893, 58286, 58290, 58296, 57893, 58301,
      /* 69028 */ 57916, 57916, 58362, 58366, 58372, 57916, 58377, 57916, 57916, 57916, 57916, 57916, 58395, 57916, 57916,
      /* 69043 */ 57916, 57916, 57916, 61231, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60686,
      /* 69058 */ 57916, 57916, 57916, 57916, 57916, 57943, 58452, 57943, 57943, 57943, 57943, 57943, 58470, 57943, 57943,
      /* 69073 */ 57943, 57943, 528, 528, 528, 900, 1215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3441, 1264, 0, 0,
      /* 69099 */ 0, 0, 0, 1269, 0, 0, 0, 0, 0, 1274, 0, 0, 0, 0, 0, 3179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 679, 0, 0, 0, 0,
      /* 69130 */ 0, 0, 1294, 0, 0, 1165, 0, 0, 0, 1300, 0, 1302, 0, 0, 0, 0, 0, 0, 1284, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1301,
      /* 69159 */ 0, 0, 0, 0, 0, 0, 0, 1300, 1319, 0, 1322, 0, 0, 0, 1196, 0, 0, 0, 0, 1330, 0, 0, 1215, 1330, 1337, 528,
      /* 69185 */ 528, 528, 528, 1343, 528, 528, 528, 528, 1349, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1370,
      /* 69205 */ 528, 528, 0, 57893, 57893, 57893, 57893, 57893, 57893, 155942, 0, 0, 0, 0, 0, 0, 0, 1285, 0, 0, 0, 0,
      /* 69227 */ 1290, 0, 0, 0, 58773, 914, 58775, 57893, 57893, 57893, 57893, 57893, 58782, 57893, 57893, 57893, 57893,
      /* 69244 */ 58788, 57893, 57893, 57893, 57893, 57893, 60872, 57893, 57893, 57893, 57893, 57893, 60876, 57893, 57893,
      /* 69259 */ 57893, 57893, 57893, 58860, 57893, 57893, 57893, 57893, 57893, 50676, 58773, 990, 57916, 57916, 57916,
      /* 69274 */ 58917, 57916, 57916, 57916, 57916, 58922, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 69289 */ 60403, 57916, 57916, 57916, 60406, 57916, 57916, 58930, 57916, 57916, 57916, 58937, 58939, 57916, 57916,
      /* 69304 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59957, 57916, 57916, 57916, 57916, 57916, 57943,
      /* 69319 */ 57943, 57943, 57943, 58977, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 58998,
      /* 69334 */ 57943, 59016, 57943, 57943, 57943, 57943, 57943, 59021, 57943, 57943, 57943, 59025, 57943, 57943, 57943,
      /* 69349 */ 59032, 59034, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 69364 */ 57943, 57943, 59622, 57943, 59057, 528, 528, 528, 528, 528, 528, 57893, 57893, 57893, 57893, 57893,
      /* 69380 */ 57893, 1151, 0, 0, 0, 0, 385024, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 69395 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5259264, 4358144, 4358144, 4358144, 4358144, 0, 0,
      /* 69408 */ 1729, 0, 0, 0, 0, 1736, 0, 0, 0, 0, 0, 0, 0, 0, 1880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1747, 1748, 0, 0, 0, 0,
      /* 69438 */ 0, 1754, 0, 0, 0, 0, 0, 0, 0, 3447, 0, 0, 0, 0, 0, 3450, 0, 3452, 0, 1776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 69468 */ 0, 0, 0, 0, 5177344, 0, 0, 0, 0, 0, 1794, 0, 0, 0, 0, 0, 0, 0, 1802, 1803, 0, 0, 0, 0, 0, 3207, 0, 0, 0,
      /* 69497 */ 0, 0, 0, 0, 0, 0, 0, 3183, 0, 0, 0, 0, 0, 0, 0, 0, 1810, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1841, 0,
      /* 69528 */ 1843, 0, 0, 0, 1874, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3213, 0, 0, 528, 528, 528, 1901, 528, 528,
      /* 69555 */ 528, 528, 1907, 528, 528, 528, 528, 528, 528, 528, 2441, 528, 528, 528, 528, 528, 528, 528, 528, 3720,
      /* 69575 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1918, 528, 528, 528, 528, 1922, 528, 528, 528, 528,
      /* 69595 */ 528, 528, 528, 2466, 2467, 528, 528, 528, 528, 528, 528, 528, 1417, 528, 528, 528, 528, 528, 528, 528,
      /* 69615 */ 528, 3856, 528, 528, 528, 57893, 57893, 57893, 57893, 528, 528, 528, 528, 1968, 1969, 528, 528, 528,
      /* 69633 */ 528, 528, 528, 528, 528, 528, 528, 1924, 1925, 528, 528, 528, 528, 57893, 57893, 59344, 57893, 57893,
      /* 69651 */ 57893, 57893, 59350, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 61212, 57893, 57893, 57893,
      /* 69666 */ 57893, 57893, 57893, 57893, 57893, 57893, 59361, 57893, 57893, 57893, 57893, 59365, 57893, 57893, 57893,
      /* 69681 */ 57893, 57893, 57893, 57893, 57893, 59883, 57893, 57893, 57893, 59886, 57893, 57893, 57893, 57893, 57893,
      /* 69696 */ 57893, 57893, 57893, 59378, 57893, 57893, 57893, 59383, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 69711 */ 59909, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59915, 57893, 57893, 57893, 59412, 59413, 57893,
      /* 69726 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59921, 57893, 57893, 57893, 57893,
      /* 69741 */ 57893, 57893, 57893, 57893, 59351, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57916, 59444, 57916,
      /* 69756 */ 57916, 57916, 57916, 59450, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60685, 57916,
      /* 69771 */ 57916, 57916, 57916, 57916, 57916, 57916, 59461, 57916, 57916, 57916, 57916, 59465, 57916, 57916, 57916,
      /* 69786 */ 57916, 57916, 57916, 57916, 57916, 57916, 60943, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 69801 */ 57916, 59478, 57916, 57916, 57916, 59483, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60021,
      /* 69816 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60029, 57916, 57916, 59512, 59513, 57916, 57916, 57916,
      /* 69831 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59470, 57916, 57916, 57916, 57943, 57943,
      /* 69846 */ 57943, 57943, 59546, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59557, 57943,
      /* 69861 */ 57943, 57943, 57943, 59561, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 69876 */ 57943, 60082, 57943, 57943, 57943, 57943, 59574, 57943, 57943, 57943, 59579, 57943, 57943, 57943, 57943,
      /* 69891 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60735, 57943, 57943, 57943, 57943, 57943, 59608, 59609,
      /* 69906 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60095, 57943,
      /* 69921 */ 57943, 2302, 2303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5767168, 0, 2339, 0, 0, 2341, 2342, 0, 0,
      /* 69947 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 335872, 0, 0, 0, 0, 528, 2434, 528, 528, 2438, 528, 528, 528, 2442, 528, 528,
      /* 69972 */ 528, 528, 528, 528, 528, 2912, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3857, 528, 528, 57893,
      /* 69991 */ 57893, 57893, 57893, 528, 528, 528, 528, 2452, 528, 528, 528, 2455, 528, 528, 528, 528, 528, 528, 528,
      /* 70010 */ 2925, 528, 528, 528, 2928, 528, 528, 528, 528, 528, 2487, 528, 528, 528, 528, 528, 2492, 528, 528, 528,
      /* 70030 */ 528, 528, 528, 528, 0, 0, 57893, 57893, 57893, 60610, 57893, 57893, 57893, 57893, 57893, 60615, 57893,
      /* 70047 */ 0, 2503, 0, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 70063 */ 60288, 57893, 57893, 60291, 60292, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59865, 57893,
      /* 70078 */ 57893, 59869, 57893, 57893, 57893, 59873, 57893, 57893, 57893, 57893, 57893, 60312, 57893, 57893, 57893,
      /* 70093 */ 57893, 57893, 57893, 57893, 60320, 57893, 57893, 59916, 57893, 57893, 57893, 57893, 59920, 57893, 57893,
      /* 70108 */ 57893, 57893, 57893, 59925, 57893, 57893, 57893, 57893, 57893, 60328, 57893, 57893, 57893, 57893, 57893,
      /* 70123 */ 57893, 57893, 57893, 57893, 57893, 58867, 50676, 58773, 990, 58870, 57916, 57916, 57916, 57916, 57916,
      /* 70138 */ 60005, 57916, 57916, 57916, 57916, 60009, 57916, 57916, 57916, 57916, 57916, 60014, 57943, 57943, 57943,
      /* 70153 */ 57943, 60088, 57943, 57943, 57943, 57943, 60092, 57943, 57943, 57943, 57943, 57943, 60097, 2856, 0, 0,
      /* 70169 */ 0, 0, 0, 0, 0, 0, 0, 0, 2863, 0, 0, 0, 0, 0, 0, 212992, 0, 0, 0, 0, 0, 212992, 212992, 212992, 212992,
      /* 70194 */ 2893, 528, 528, 528, 528, 2896, 528, 528, 2898, 528, 2899, 528, 528, 528, 528, 528, 1356, 528, 1361,
      /* 70213 */ 528, 528, 1365, 528, 528, 1368, 528, 528, 528, 528, 528, 2907, 528, 528, 2911, 528, 528, 528, 528, 528,
      /* 70233 */ 528, 528, 528, 528, 2494, 528, 528, 2497, 2498, 528, 0, 2920, 528, 528, 528, 2923, 528, 528, 528, 528,
      /* 70253 */ 528, 528, 528, 528, 528, 528, 528, 528, 3506, 3507, 528, 528, 57893, 60308, 57893, 57893, 57893, 57893,
      /* 70271 */ 57893, 57893, 57893, 57893, 57893, 60317, 57893, 57893, 60321, 57893, 57893, 57893, 57893, 58835, 57893,
      /* 70286 */ 57893, 57893, 58842, 58844, 57893, 57893, 57893, 57893, 57893, 57893, 59381, 57893, 57893, 57893, 57893,
      /* 70301 */ 57893, 57893, 57893, 57893, 57893, 60902, 57893, 57893, 60905, 57893, 57893, 57893, 0, 57916, 57916,
      /* 70316 */ 60346, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60354, 60369, 57916,
      /* 70331 */ 57916, 57916, 57916, 60372, 57916, 57916, 60374, 57916, 60375, 57916, 57916, 57916, 57916, 57916, 57943,
      /* 70346 */ 57943, 57943, 57943, 57943, 57943, 4288, 0, 0, 0, 528, 57916, 57916, 57916, 57916, 60384, 57916, 57916,
      /* 70363 */ 60388, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60402, 57916, 57916, 57916, 57916, 57916,
      /* 70378 */ 57916, 57916, 57916, 59995, 57916, 57916, 57916, 57916, 60000, 57916, 57916, 57916, 60397, 57916, 57916,
      /* 70393 */ 57916, 60400, 60401, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60683, 57916, 57916,
      /* 70408 */ 57916, 57916, 57916, 57916, 57916, 57916, 59452, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57943,
      /* 70423 */ 57943, 60419, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 70438 */ 60469, 57943, 57943, 57943, 57943, 57943, 60434, 57943, 57943, 57943, 57943, 60437, 57943, 57943, 60439,
      /* 70453 */ 57943, 60440, 57943, 57943, 57943, 57943, 57943, 60422, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 70468 */ 57943, 57943, 57943, 57943, 61155, 57943, 57943, 57943, 528, 57943, 57943, 57943, 57943, 60462, 57943,
      /* 70483 */ 57943, 57943, 60465, 60466, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60752, 57943, 57943, 528,
      /* 70498 */ 528, 528, 57893, 57893, 57893, 0, 0, 0, 0, 0, 3658, 0, 0, 3228, 528, 528, 528, 528, 3233, 528, 528, 528,
      /* 70520 */ 3236, 528, 528, 528, 528, 528, 528, 3255, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2482, 528,
      /* 70540 */ 528, 528, 528, 528, 3261, 528, 528, 0, 0, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 70558 */ 57893, 60616, 57893, 60619, 57893, 57893, 57893, 57893, 60624, 57893, 57893, 57893, 60627, 57893, 57893,
      /* 70573 */ 57893, 57893, 57893, 58805, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57916,
      /* 70588 */ 57916, 57916, 57916, 61460, 57916, 57893, 57893, 57893, 60654, 57893, 57893, 0, 0, 57916, 57916, 57916,
      /* 70604 */ 57916, 57916, 57916, 57916, 57916, 60692, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59499,
      /* 70619 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60665, 57916, 60668, 57916, 57916, 57916,
      /* 70634 */ 57916, 60673, 57916, 57916, 57916, 60676, 57916, 57916, 57916, 57916, 58935, 57916, 57916, 57916, 57916,
      /* 70649 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 58887, 57916, 57916, 57916, 57916, 57943, 57943, 57943,
      /* 70664 */ 60714, 57943, 60717, 57943, 57943, 57943, 57943, 60722, 57943, 57943, 57943, 60725, 57943, 57943, 57943,
      /* 70679 */ 57943, 57943, 61580, 61581, 57943, 57943, 0, 0, 0, 0, 4242, 0, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 70699 */ 2427, 528, 528, 528, 528, 2431, 528, 0, 3454, 0, 3455, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1883, 0, 0,
      /* 70725 */ 0, 528, 528, 528, 3485, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1384, 528, 528, 528,
      /* 70746 */ 528, 528, 3497, 528, 528, 528, 528, 528, 528, 528, 528, 3505, 528, 528, 528, 528, 528, 2453, 528, 528,
      /* 70766 */ 528, 528, 528, 528, 528, 528, 528, 528, 1382, 528, 528, 528, 1386, 528, 57893, 57893, 60869, 57893,
      /* 70784 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60637, 57893, 57893,
      /* 70799 */ 57893, 57893, 57893, 57893, 57893, 57893, 60314, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 70814 */ 60341, 57893, 57893, 57893, 0, 2999, 0, 0, 0, 57893, 60881, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 70831 */ 57893, 57893, 60889, 57893, 57893, 57893, 57893, 57893, 58820, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 70846 */ 57893, 58829, 57893, 57893, 57916, 57916, 57916, 60911, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 70861 */ 57916, 57916, 57916, 57916, 57916, 59503, 57916, 57916, 57916, 57916, 57916, 60923, 57916, 57916, 57916,
      /* 70876 */ 57916, 57916, 57916, 57916, 57916, 60931, 57916, 57916, 57916, 57916, 57916, 59481, 57916, 57916, 57916,
      /* 70891 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 58911, 57916, 57916, 57916, 57916, 57916, 57916, 57943,
      /* 70906 */ 57943, 57943, 60953, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 70921 */ 60094, 57943, 57943, 57943, 57943, 57943, 57943, 60965, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 70936 */ 57943, 60973, 57943, 57943, 57943, 57943, 57943, 60050, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 70951 */ 57943, 57943, 57943, 57943, 57943, 60745, 57943, 57943, 57943, 0, 3680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 70973 */ 0, 0, 0, 3439, 0, 0, 0, 0, 0, 3693, 3694, 0, 0, 0, 0, 528, 528, 528, 528, 528, 528, 528, 2875, 528, 528,
      /* 70998 */ 528, 528, 528, 528, 528, 528, 3704, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 71018 */ 528, 3494, 528, 528, 3714, 528, 528, 528, 528, 528, 3719, 528, 3721, 528, 528, 528, 528, 528, 528, 3488,
      /* 71038 */ 528, 528, 528, 528, 528, 3492, 528, 528, 528, 61091, 57893, 61093, 57893, 57893, 57893, 57893, 57893,
      /* 71055 */ 57893, 57893, 57893, 57916, 57916, 57916, 57916, 57916, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 71070 */ 61131, 61132, 57943, 57943, 57916, 57916, 57916, 57916, 61104, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 71085 */ 57916, 57916, 57916, 57916, 57916, 61110, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 61114, 57916,
      /* 71100 */ 57916, 57916, 57916, 57916, 57916, 61120, 57916, 61122, 57916, 57916, 57916, 57916, 57916, 61324, 57916,
      /* 71115 */ 57916, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60970, 57943, 57943, 57943, 57943,
      /* 71130 */ 57943, 57943, 57943, 57943, 57943, 57943, 61149, 57943, 61151, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 71145 */ 57943, 57943, 528, 2761, 528, 528, 528, 57893, 60110, 57893, 57893, 528, 528, 57893, 57893, 57893, 0, 0,
      /* 71163 */ 0, 3818, 0, 0, 0, 0, 0, 0, 0, 722, 0, 724, 0, 0, 0, 0, 0, 0, 0, 0, 3823, 0, 0, 0, 0, 0, 0, 0, 3675, 0,
      /* 71193 */ 0, 0, 0, 3831, 0, 528, 528, 528, 528, 528, 3843, 528, 528, 528, 3847, 528, 528, 528, 528, 528, 1357,
      /* 71214 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1422, 528, 528, 528, 528, 57893, 61205, 57893,
      /* 71233 */ 57893, 57893, 61209, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60886, 57893,
      /* 71248 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59896, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 71263 */ 57893, 57893, 57893, 57893, 61218, 57893, 57893, 57893, 57893, 57916, 57916, 57916, 57916, 57916, 61224,
      /* 71278 */ 57916, 0, 0, 0, 0, 57893, 57943, 57943, 58415, 57943, 57943, 57943, 57943, 57943, 57943, 58446, 57916,
      /* 71295 */ 57916, 61228, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 71310 */ 60697, 57916, 57916, 57916, 61237, 57916, 57916, 57916, 57916, 57943, 57943, 57943, 57943, 57943, 61243,
      /* 71325 */ 57943, 57943, 57943, 61247, 528, 4162, 57893, 57893, 57893, 61510, 57893, 57893, 57893, 57893, 57893,
      /* 71340 */ 57893, 57893, 57893, 61518, 57893, 57893, 57893, 57893, 58858, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 71355 */ 50676, 58773, 990, 57916, 57916, 57916, 57916, 58903, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 71370 */ 57916, 57916, 58913, 57916, 57916, 57916, 57916, 61523, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 71385 */ 57916, 61531, 57916, 57943, 57943, 57943, 57943, 57943, 60955, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 71400 */ 57943, 57943, 57943, 59581, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 61536, 57943, 57943, 57943,
      /* 71415 */ 57943, 57943, 57943, 57943, 57943, 61544, 57943, 0, 0, 0, 0, 0, 0, 262144, 262144, 0, 0, 0, 0, 0, 0, 0,
      /* 71437 */ 0, 0, 0, 4203, 4204, 4205, 0, 4207, 528, 528, 528, 528, 528, 528, 528, 528, 528, 4213, 4214, 528, 57893,
      /* 71458 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 61564, 61565, 57893, 57893, 57916, 0, 0, 0, 0,
      /* 71475 */ 57893, 57943, 57943, 58416, 57943, 57943, 57943, 57943, 58437, 58441, 58447, 528, 528, 528, 57893,
      /* 71490 */ 57893, 57893, 57893, 57916, 57916, 57916, 57916, 57943, 57943, 57943, 57943, 4298, 0, 528, 4299, 57893,
      /* 71506 */ 61644, 57916, 61645, 57943, 61646, 0, 528, 57893, 57916, 57943, 0, 528, 528, 528, 528, 528, 528, 2425,
      /* 71524 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 3246, 528, 528, 528, 528, 528, 528, 0, 0, 0, 361, 362, 0,
      /* 71546 */ 0, 0, 0, 0, 0, 0, 368, 0, 296, 0, 0, 0, 0, 393685, 0, 393685, 393685, 393685, 0, 393685, 393685, 393685,
      /* 71568 */ 393685, 393685, 393685, 0, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 0, 1731, 0, 0,
      /* 71592 */ 0, 0, 0, 0, 0, 1741, 1742, 0, 0, 0, 0, 0, 278528, 278528, 0, 0, 0, 0, 0, 0, 0, 0, 0, 416, 416, 0, 0, 0,
      /* 71620 */ 0, 0, 426, 426, 0, 0, 131072, 426, 0, 0, 0, 0, 426, 0, 0, 454, 0, 426, 0, 483, 483, 483, 0, 0, 362, 362,
      /* 71646 */ 362, 502, 362, 362, 362, 362, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
      /* 71667 */ 483, 546, 57912, 546, 57912, 546, 546, 57912, 546, 546, 57935, 57912, 546, 546, 57912, 57912, 57912,
      /* 71684 */ 57912, 57962, 57962, 57912, 57912, 57912, 57912, 57962, 57962, 57912, 546, 57912, 57912, 57935, 57912,
      /* 71699 */ 57912, 57912, 57912, 57912, 57912, 57912, 57935, 57935, 57912, 57912, 57962, 57912, 57912, 57912, 1,
      /* 71714 */ 24578, 3, 155942, 155942, 296, 0, 0, 0, 0, 0, 302, 303, 0, 368, 368, 0, 703, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 71740 */ 0, 0, 0, 2298, 0, 0, 0, 905, 528, 528, 528, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58287,
      /* 71759 */ 57893, 57893, 57893, 57893, 57893, 60340, 57893, 57893, 57893, 57893, 57893, 0, 2999, 0, 0, 0, 57893,
      /* 71776 */ 58306, 57893, 57893, 57893, 57893, 58324, 57893, 57893, 57893, 0, 57916, 57916, 57916, 57916, 57916,
      /* 71791 */ 57943, 57943, 57943, 61129, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60741, 57943, 57943,
      /* 71806 */ 57943, 57943, 57943, 57943, 57943, 57943, 60753, 57943, 528, 528, 528, 57893, 57893, 57893, 57916,
      /* 71821 */ 57916, 58363, 57916, 57916, 57916, 57916, 57916, 58382, 57916, 57916, 57916, 57916, 58400, 57916, 57916,
      /* 71836 */ 57916, 57916, 58936, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60392,
      /* 71851 */ 57916, 57916, 57916, 57916, 57916, 0, 0, 0, 0, 58306, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 71868 */ 58438, 57943, 57943, 57943, 57943, 57943, 60448, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 71883 */ 57943, 57943, 57943, 60427, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 58457, 57943, 57943, 57943,
      /* 71898 */ 57943, 58475, 57943, 57943, 57943, 528, 528, 528, 528, 2284, 57893, 57893, 57893, 57893, 59633, 2290, 0,
      /* 71915 */ 2291, 0, 0, 905, 528, 0, 57893, 57893, 57893, 57893, 58324, 57893, 155942, 1151, 0, 1152, 0, 0, 1157, 0,
      /* 71935 */ 0, 0, 1266, 0, 0, 0, 0, 0, 0, 0, 1266, 0, 0, 0, 0, 0, 0, 450560, 0, 0, 450560, 0, 450560, 450560,
      /* 71959 */ 450560, 450560, 450560, 450560, 450560, 450560, 450560, 450560, 450560, 450560, 450560, 450560, 450560,
      /* 71972 */ 450560, 1346, 528, 528, 528, 1355, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3711,
      /* 71991 */ 528, 528, 528, 58773, 914, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 58785, 57893,
      /* 72007 */ 57893, 57893, 58794, 57893, 57893, 58855, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 50676,
      /* 72022 */ 58773, 990, 57916, 57916, 57916, 57916, 58938, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 72037 */ 57916, 57916, 57916, 61121, 57916, 57916, 57916, 57916, 57943, 57943, 58974, 57943, 57943, 57943, 58983,
      /* 72052 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59045, 57943, 57943, 57943, 57943, 57943,
      /* 72067 */ 57943, 0, 0, 0, 1730, 0, 0, 0, 0, 1737, 0, 0, 0, 0, 0, 0, 0, 739, 0, 0, 0, 0, 0, 0, 0, 0, 1271, 0, 0, 0,
      /* 72097 */ 0, 0, 0, 0, 0, 0, 0, 1762, 0, 0, 0, 0, 0, 0, 0, 1770, 1771, 0, 0, 0, 0, 0, 3422, 0, 0, 0, 0, 0, 0, 0,
      /* 72127 */ 3426, 0, 0, 0, 0, 0, 1834, 0, 0, 0, 0, 0, 0, 0, 1840, 0, 0, 0, 0, 0, 0, 532480, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 72157 */ 0, 694, 0, 0, 0, 0, 0, 368, 0, 0, 1846, 0, 1848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 376832, 0, 376832, 0,
      /* 72185 */ 0, 1915, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2499, 528, 1930,
      /* 72205 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1943, 528, 528, 0, 57893, 57893, 57893, 57893,
      /* 72224 */ 57893, 57893, 155942, 1151, 0, 0, 0, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0, 0, 0, 0, 0, 796, 0, 0, 0, 0,
      /* 72249 */ 805, 0, 0, 0, 59373, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59386,
      /* 72266 */ 57893, 57893, 57893, 2588, 0, 0, 0, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 72282 */ 60352, 57916, 57916, 57916, 57916, 57916, 57893, 57893, 59411, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 72297 */ 57893, 57893, 57893, 57893, 59422, 57893, 57893, 57893, 57893, 57893, 60884, 57893, 57893, 57893, 57893,
      /* 72312 */ 57893, 57893, 57893, 57893, 57893, 57893, 60903, 57893, 57893, 57893, 57893, 57893, 57916, 59511, 57916,
      /* 72327 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59522, 57916, 57916, 57916, 57916, 57916,
      /* 72342 */ 61395, 57916, 61397, 61398, 57916, 61400, 57916, 61402, 57943, 57943, 57943, 3916, 528, 61261, 57893, 0,
      /* 72358 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2774, 0, 0, 0, 0, 59607, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 72380 */ 57943, 57943, 57943, 59618, 57943, 57943, 57943, 57943, 57943, 58978, 57943, 57943, 57943, 57943, 57943,
      /* 72395 */ 57943, 57943, 57943, 57943, 58997, 0, 0, 2326, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221652, 221652,
      /* 72418 */ 221652, 0, 0, 2504, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 72434 */ 57893, 61097, 57893, 57893, 57893, 57916, 57916, 57916, 57916, 57916, 528, 3229, 528, 528, 528, 528,
      /* 72450 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2447, 528, 60618, 57893, 60620, 57893, 57893, 57893,
      /* 72468 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 61211, 57893, 57893, 57893, 57893,
      /* 72483 */ 57893, 57893, 57893, 57893, 59870, 57893, 57893, 57893, 57893, 59875, 57893, 57893, 57916, 57916, 57916,
      /* 72498 */ 60667, 57916, 60669, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60404, 57916,
      /* 72513 */ 57916, 57916, 57916, 57916, 60698, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57943, 57943,
      /* 72528 */ 57943, 57943, 60709, 57943, 57943, 57943, 57943, 57943, 60463, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 72543 */ 57943, 57943, 57943, 57943, 57943, 59599, 57943, 57943, 57943, 59605, 57943, 57943, 57943, 57943, 60716,
      /* 72558 */ 57943, 60718, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59046, 57943, 57943, 57943,
      /* 72573 */ 57943, 57943, 57943, 57943, 60747, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 528, 528,
      /* 72588 */ 528, 57893, 57893, 57893, 0, 0, 0, 3656, 0, 0, 0, 0, 0, 0, 0, 3432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 72616 */ 2323, 2324, 0, 0, 57943, 57943, 61250, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 72632 */ 57943, 57943, 57943, 57943, 60724, 57943, 57943, 0, 4147, 0, 0, 0, 528, 528, 528, 528, 528, 528, 528,
      /* 72651 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 0, 4161, 528, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 72669 */ 57893, 57893, 57893, 57893, 57893, 61517, 57893, 57893, 57893, 57893, 57893, 60898, 60900, 57893, 57893,
      /* 72684 */ 57893, 57893, 60904, 57893, 60906, 60907, 57893, 57916, 57916, 57916, 61627, 57916, 57943, 57943, 57943,
      /* 72699 */ 57943, 61631, 57943, 0, 0, 0, 0, 528, 528, 2870, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2878,
      /* 72720 */ 373, 373, 0, 0, 131072, 373, 0, 0, 0, 0, 373, 0, 0, 0, 0, 373, 547, 57913, 547, 57913, 547, 547, 57913,
      /* 72743 */ 547, 547, 57936, 57913, 547, 547, 57913, 57913, 57913, 57913, 57963, 57963, 57913, 57913, 57913, 57913,
      /* 72759 */ 57963, 57963, 57913, 547, 57913, 57913, 57936, 57913, 57913, 57913, 57913, 57913, 57913, 57913, 57936,
      /* 72774 */ 57936, 57913, 57913, 57963, 57913, 57913, 57913, 1, 24578, 3, 155942, 155942, 296, 0, 0, 0, 0, 0, 302,
      /* 72793 */ 303, 0, 528, 528, 528, 528, 861, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3723, 528,
      /* 72814 */ 528, 528, 57916, 58356, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 72829 */ 57916, 57916, 57916, 60677, 57916, 57893, 58799, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 72844 */ 57893, 57893, 57893, 57893, 57893, 57893, 61221, 57893, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 72859 */ 57943, 57943, 60023, 57943, 57943, 57943, 57943, 57943, 57943, 528, 528, 1931, 528, 528, 528, 528, 528,
      /* 72876 */ 528, 528, 528, 528, 528, 528, 528, 528, 1401, 528, 528, 57893, 59374, 57893, 57893, 57893, 57893, 57893,
      /* 72894 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59882, 57893, 57893, 57893, 57893, 57893,
      /* 72909 */ 57893, 57893, 57893, 57893, 60290, 57893, 57893, 57893, 57893, 57893, 57893, 59474, 57916, 57916, 57916,
      /* 72924 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60920, 57916, 0, 0,
      /* 72940 */ 0, 3824, 0, 3825, 0, 0, 0, 0, 3675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1227, 0, 0, 0, 0, 0, 364, 0,
      /* 72970 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2335, 0, 0, 0, 365, 0, 0, 0, 0, 364,
      /* 73002 */ 0, 0, 0, 139264, 147456, 0, 0, 0, 0, 0, 0, 1324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1166, 0, 0, 0, 0, 0, 0, 0,
      /* 73031 */ 0, 0, 434, 131072, 0, 434, 434, 0, 0, 0, 434, 0, 365, 434, 0, 0, 0, 0, 401408, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 73058 */ 0, 0, 0, 0, 6471680, 0, 0, 0, 466, 0, 0, 0, 494, 494, 497, 497, 497, 497, 503, 504, 497, 497, 517, 517,
      /* 73082 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 548, 57914, 548, 57914, 548, 548,
      /* 73102 */ 57914, 548, 548, 57937, 57914, 548, 548, 57914, 57914, 57914, 57914, 57964, 57964, 57914, 57914, 57914,
      /* 73118 */ 57914, 57964, 57964, 57914, 626, 57914, 57977, 57937, 57914, 57914, 57914, 57914, 57914, 57914, 57914,
      /* 73133 */ 57937, 57937, 57914, 57914, 57964, 57914, 57914, 57914, 57977, 57977, 1, 24578, 3, 155942, 155942, 296,
      /* 73149 */ 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 0, 459187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 528, 528, 528, 528, 528,
      /* 73177 */ 528, 528, 528, 0, 528, 2420, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1402, 528,
      /* 73198 */ 528, 0, 0, 0, 57893, 59850, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 73215 */ 60287, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60302, 57893, 57893, 57893, 57893,
      /* 73230 */ 60305, 57893, 57893, 60307, 528, 528, 528, 528, 2895, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 73249 */ 528, 528, 4026, 57893, 57893, 57893, 57893, 60337, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 73264 */ 57893, 57893, 0, 0, 0, 0, 0, 0, 1781, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 335872, 0, 0,
      /* 73289 */ 57916, 57916, 57916, 57916, 60371, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 73304 */ 57916, 61401, 57916, 57943, 57943, 57943, 368, 368, 0, 0, 0, 0, 705, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264,
      /* 73327 */ 147456, 0, 0, 540672, 0, 0, 0, 0, 735, 0, 801, 0, 0, 0, 0, 0, 0, 0, 0, 801, 0, 0, 0, 0, 416, 0, 0, 0, 0,
      /* 73356 */ 0, 0, 0, 0, 0, 0, 0, 0, 3464, 0, 0, 0, 528, 528, 528, 528, 862, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 73381 */ 528, 528, 528, 528, 61203, 57893, 57893, 57893, 57916, 58357, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 73397 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 61111, 57916, 1202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 73417 */ 0, 368, 368, 0, 0, 0, 0, 0, 0, 0, 0, 709, 0, 0, 0, 0, 0, 0, 1251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2810, 0, 0,
      /* 73448 */ 0, 0, 0, 0, 58853, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 50676, 58773,
      /* 73465 */ 990, 57916, 57916, 57916, 57916, 59463, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 73480 */ 57916, 57916, 60696, 57916, 57916, 57916, 57916, 59015, 57943, 57943, 57943, 57943, 57943, 57943, 57943,
      /* 73495 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 60442, 1726, 0, 0, 0, 0, 1733, 0, 0, 0, 0, 0, 0,
      /* 73516 */ 0, 0, 0, 0, 319488, 319488, 0, 0, 0, 0, 0, 57916, 57916, 57916, 59978, 57916, 57916, 57916, 57916,
      /* 73535 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59959, 57916, 57916, 57916, 57943, 57943, 57943,
      /* 73550 */ 60061, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59011, 57943,
      /* 73565 */ 57943, 57943, 2779, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245760, 528, 528, 2881, 528, 528, 528,
      /* 73590 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1404, 528, 528, 57916, 57916, 60357, 57916, 57916,
      /* 73608 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 60919, 57916, 57916, 0,
      /* 73623 */ 306, 307, 0, 0, 0, 0, 0, 0, 0, 647, 0, 0, 0, 0, 0, 0, 1813, 0, 0, 0, 0, 0, 0, 0, 0, 0, 787, 0, 0, 0, 0,
      /* 73654 */ 0, 0, 906, 528, 528, 528, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 73671 */ 57893, 57893, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 906, 528, 0, 57893, 58490, 57893, 57893,
      /* 73687 */ 58325, 57893, 155942, 1151, 0, 0, 0, 0, 0, 0, 1836, 0, 0, 1838, 0, 0, 0, 0, 0, 0, 0, 2861, 2813, 0, 0,
      /* 73712 */ 0, 0, 0, 2866, 0, 57893, 57893, 58856, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 50676,
      /* 73729 */ 58773, 990, 57916, 57916, 57916, 57916, 59495, 59496, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 73744 */ 57916, 57916, 57916, 57916, 61574, 57943, 57943, 57943, 57943, 0, 0, 1862, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 73766 */ 0, 0, 0, 327680, 327680, 327680, 528, 528, 1948, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
      /* 73786 */ 528, 528, 1942, 528, 528, 57893, 59391, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 73802 */ 57893, 57893, 57893, 57893, 57893, 60313, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 73817 */ 59922, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59491, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 73832 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 61123, 57916, 57916, 0, 0, 0, 57893,
      /* 73848 */ 57893, 57893, 57893, 59853, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60329, 57893, 57893,
      /* 73863 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59367, 59368, 57893, 57893, 57893, 57893, 57893, 59877,
      /* 73878 */ 57893, 59879, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893,
      /* 73893 */ 60636, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60316, 57893, 57893, 57893, 57893,
      /* 73908 */ 57893, 57893, 57916, 57916, 57916, 57916, 59966, 57916, 59968, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 73923 */ 57916, 57916, 57916, 61117, 57916, 61119, 57916, 57916, 57916, 57916, 57916, 57916, 57943, 57943, 57943,
      /* 73938 */ 57943, 60049, 57943, 60051, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59552, 57943,
      /* 73953 */ 57943, 57943, 57943, 59556, 57943, 60381, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916,
      /* 73968 */ 57916, 57916, 57916, 57916, 57916, 57916, 61403, 57943, 57943, 57943, 57943, 57943, 60446, 57943, 57943,
      /* 73983 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57943, 59554, 57943, 57943, 57943, 0,
      /* 73998 */ 3418, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352256, 352256, 352256, 57893, 57893, 57893, 57893,
      /* 74020 */ 60871, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 60645, 57893, 57893,
      /* 74035 */ 57893, 57893, 57893, 57893, 57893, 57893, 57893, 59923, 57893, 57893, 57893, 57893, 57893, 57893, 3713,
      /* 74050 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2500, 57916, 57916, 61113,
      /* 74069 */ 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 57916, 59973, 57916,
      /* 74084 */ 57916, 57916, 0, 0, 0, 2310144, 0, 0, 0, 0, 0, 0, 2310144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2310144, 0,
      /* 74110 */ 0, 2310144, 0, 0, 0, 0, 0, 0, 0, 2310144, 2310144, 0, 0, 0, 0, 0, 0, 0, 0, 2310144, 0, 0, 0, 2310144, 0,
      /* 74135 */ 0, 0, 0, 0, 2310144, 0, 2310144, 0, 0, 0, 0, 0, 0, 2310144, 2310561, 2310561, 0, 2310144, 0, 0, 2310144,
      /* 74156 */ 0, 0, 2310144, 0, 2310144, 2310144, 0, 2310144, 0, 2310144, 2310144, 0, 0, 0, 0, 0, 0, 2310561, 0, 0, 0,
      /* 74177 */ 0, 0, 0, 0, 0, 0, 0, 0, 2359296, 368, 0, 0, 0, 0, 2310144, 0, 0, 2310740, 2310740, 2310740, 2310740,
      /* 74198 */ 2310740, 2310740, 2310740, 2310740, 2310740, 2310740, 2310740, 2310740, 2310740, 2310144, 2310740,
      /* 74209 */ 2310144, 2310144, 2310740, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 0, 459347,
      /* 74230 */ 459347, 459347, 459347, 459347, 459347, 459347, 459347, 459347, 459347, 459347, 459347, 459347, 459222,
      /* 74243 */ 459379, 459222, 2318336, 0, 0, 0, 4268032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4276224, 0, 0, 0, 0,
      /* 74266 */ 4358144, 4358144, 4358144, 4358144, 0, 914, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4956160, 4964352, 0, 0, 0, 0,
      /* 74288 */ 0, 467, 2335204, 2335204, 2335204, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 2335238, 2335238,
      /* 74305 */ 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 74332 */ 2335238, 2335204, 2335238, 2335238, 2335238, 2335238, 2335238, 2335238, 2335238, 2335238, 2335238,
      /* 74343 */ 2335238, 2335238, 2335238, 2335238, 2335238, 2335238, 2335238, 0, 0, 0, 2342912, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 74362 */ 0, 0, 0, 0, 2348, 0, 0, 0, 0, 0, 0, 2326528, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 74382 */ 4358144, 4358144, 4358144, 4358144, 4358144, 5177344, 4358144, 4358144, 4358144, 4358144, 0, 0, 0,
      /* 74395 */ 2359296, 0, 2359296, 0, 0, 0, 2359296, 0, 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 2359296,
      /* 74410 */ 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 1,
      /* 74422 */ 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 0, 573440, 0, 573440, 573440, 573440, 0,
      /* 74444 */ 573440, 573440, 573440, 573440, 573440, 573440, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 302, 303, 0,
      /* 74464 */ 0, 2367488, 0, 0, 4268032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4931584, 0, 0, 0, 0, 0, 0, 2351104, 0, 0, 0,
      /* 74491 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 507904, 507904, 507904, 0, 913, 0, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0,
      /* 74516 */ 0, 0, 0, 0, 1180, 0, 0, 0, 0, 1184, 0, 0, 1187, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 989, 0, 0,
      /* 74545 */ 0, 0, 913, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057, 4359057,
      /* 74558 */ 4359057, 4359057, 4359057, 5260177, 4359057, 4359057, 0, 0, 1, 24578, 3, 155942, 155942, 296, 0, 0, 0,
      /* 74575 */ 0, 0, 302, 303, 0, 0, 0, 0, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440,
      /* 74592 */ 573440, 573440, 573440, 573440, 573440, 573440, 573440, 212992, 0, 212992, 212992, 212992, 212992,
      /* 74605 */ 212992, 212992, 212992, 212992, 212992, 212992, 212992, 212992, 212992, 212992, 212992, 212992, 212992,
      /* 74618 */ 212992, 0, 0, 0, 0, 0, 4366336, 0, 0, 0, 0, 0, 0, 0, 0, 2412, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6275072, 0,
      /* 74646 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6258688, 6447104, 0, 0, 6127616, 0, 6348800, 5906432, 0, 5537792,
      /* 74669 */ 0, 4882432, 0, 0, 0, 0, 0, 0, 4825088, 0, 0, 5177344, 0, 0, 0, 0, 5701632, 0, 0, 0, 0, 0, 4358144,
      /* 74692 */ 4358144, 4358144, 4825088, 4358144, 4358144, 4358144, 4358144, 0, 0, 913, 913, 913, 4826001, 913, 913,
      /* 74707 */ 913, 913, 913, 913, 0, 0, 989, 989, 4842461, 989, 989, 989, 4899805, 989, 0, 0, 5513216, 5783552, 0, 0,
      /* 74727 */ 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4857856, 4874240
    ];

    private static EXPECTED: number[] =
    [
      /*    0 */ 169, 185, 215, 1326, 231, 1001, 278, 928, 942, 1085, 320, 247, 263, 307, 336, 352, 368, 384, 400, 914,
      /*   20 */ 2264, 430, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2268, 1707, 1603, 1403, 460,
      /*   38 */ 1356, 1591, 491, 507, 517, 533, 1816, 1031, 2119, 564, 475, 580, 596, 625, 684, 700, 1905, 716, 1114,
      /*   57 */ 747, 778, 788, 1693, 1145, 762, 804, 820, 836, 852, 868, 884, 900, 958, 988, 1017, 972, 1997, 1047, 1057,
      /*   77 */ 1073, 1101, 1130, 2028, 1562, 1190, 1205, 1221, 1237, 1253, 1269, 1298, 1314, 1342, 1174, 1446, 1372,
      /*   94 */ 1876, 2073, 1633, 668, 1388, 1419, 1434, 1467, 1483, 1499, 1515, 609, 1531, 1547, 1578, 444, 654, 640,
      /*  112 */ 1619, 1649, 1662, 1678, 1723, 1738, 1754, 1770, 1786, 1802, 1832, 1848, 291, 1864, 2228, 1892, 1921,
      /*  129 */ 1937, 199, 2149, 1953, 1969, 1985, 1282, 2013, 2044, 2060, 2089, 2105, 548, 2135, 2165, 2181, 2197, 2213,
      /*  147 */ 1160, 2244, 731, 2260, 2264, 1457, 412, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2264,
      /*  165 */ 2264, 2264, 2264, 419, 2284, 2288, 2290, 2290, 2290, 2291, 2295, 2290, 2297, 2301, 2304, 2311, 2307,
      /*  182 */ 2315, 2318, 2322, 2326, 2330, 2334, 2338, 2345, 2345, 3446, 2344, 2345, 3427, 2352, 3605, 2345, 4169,
      /*  199 */ 2345, 2345, 2345, 3950, 4664, 4990, 4059, 4582, 2828, 4588, 2345, 4069, 4598, 2345, 4069, 4603, 2734,
      /*  216 */ 3100, 2397, 2497, 2359, 2366, 2466, 2372, 2376, 2345, 2345, 4266, 2345, 2345, 2383, 3820, 2359, 2359,
      /*  233 */ 2392, 2419, 2419, 2419, 2419, 2405, 2427, 2345, 2345, 2345, 2345, 2345, 2409, 2455, 3819, 2345, 2345,
      /*  250 */ 3099, 3100, 3100, 3100, 2495, 2398, 2398, 2398, 2504, 2359, 2359, 2359, 2482, 2419, 2419, 2419, 2517,
      /*  267 */ 2345, 2345, 2345, 2457, 2345, 3100, 3100, 3101, 2398, 2398, 2398, 2359, 2359, 2359, 2359, 2359, 2418,
      /*  284 */ 2419, 2419, 2419, 2419, 2419, 2424, 2437, 2345, 2345, 2345, 2345, 4505, 2729, 2345, 2345, 2345, 2345,
      /*  301 */ 4509, 5101, 4513, 2345, 2345, 3904, 2359, 2359, 2484, 2419, 2419, 2519, 2345, 3864, 2345, 4865, 3100,
      /*  318 */ 3100, 2501, 2398, 2538, 2359, 2359, 2359, 2359, 2359, 2548, 2419, 2419, 2419, 2419, 2395, 2490, 2345,
      /*  335 */ 2345, 2359, 2483, 2419, 2549, 2508, 3755, 2345, 4867, 4911, 2398, 2400, 2359, 2515, 2419, 2525, 3605,
      /*  352 */ 3100, 2476, 2401, 2547, 2550, 2816, 4868, 2399, 2481, 2485, 2735, 2532, 2503, 2361, 2368, 4866, 2476,
      /*  369 */ 2360, 2420, 4909, 2537, 2546, 2486, 2533, 2362, 2542, 2554, 2567, 2571, 2575, 2579, 2583, 2586, 2586,
      /*  386 */ 2586, 2598, 2591, 2586, 2587, 2595, 2602, 2606, 2610, 2614, 2618, 2622, 2626, 2630, 4594, 2634, 2345,
      /*  403 */ 2345, 2903, 2640, 2345, 2345, 2999, 2345, 2345, 2645, 2345, 2345, 2345, 2345, 2345, 2345, 4208, 2345,
      /*  420 */ 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 4460, 2655, 2345, 2345, 2345, 2345, 2345, 2345,
      /*  437 */ 2345, 2345, 2345, 2345, 2345, 2345, 2655, 2345, 2345, 2636, 4128, 2345, 2345, 2345, 2345, 2635, 4127,
      /*  454 */ 2345, 2345, 2345, 2345, 2635, 4127, 2794, 2345, 2345, 2345, 3016, 2798, 2345, 2345, 2345, 3017, 2799,
      /*  471 */ 2345, 2345, 2345, 2806, 2729, 2876, 3308, 2345, 2915, 2345, 3310, 2345, 2922, 2345, 3536, 2683, 4475,
      /*  488 */ 3831, 4927, 2685, 4422, 2850, 2345, 2345, 2345, 2345, 2345, 2345, 5004, 2345, 2345, 2345, 2345, 4417,
      /*  505 */ 3024, 3547, 2854, 5007, 2861, 2345, 2345, 2345, 2345, 4422, 2869, 2345, 2345, 2345, 2345, 2345, 2868,
      /*  522 */ 2729, 2345, 2345, 2345, 2345, 2345, 2873, 2345, 2345, 2345, 4443, 2345, 3549, 3338, 2880, 2345, 2345,
      /*  539 */ 2345, 2345, 2887, 2729, 2345, 2345, 2345, 2883, 2880, 2345, 2345, 4951, 4956, 2345, 2345, 2345, 2345,
      /*  556 */ 4604, 4971, 4982, 2345, 2345, 4805, 4988, 3762, 2345, 3965, 2345, 4436, 4591, 2907, 2345, 3192, 2909,
      /*  573 */ 2345, 4490, 2345, 3191, 2908, 2345, 3491, 4849, 4476, 4920, 4920, 4920, 4849, 2720, 4477, 4477, 4477,
      /*  590 */ 4918, 4922, 2683, 4476, 4863, 4478, 2719, 2684, 2432, 2429, 2431, 2563, 2345, 2345, 2345, 2345, 2345,
      /*  607 */ 2345, 2984, 2345, 2345, 2345, 2511, 4068, 4075, 2345, 2345, 4081, 2345, 4085, 2345, 2345, 4099, 2345,
      /*  624 */ 3067, 3768, 2729, 4088, 2928, 3046, 2947, 2932, 2935, 2938, 2940, 2940, 2944, 2345, 2951, 2956, 2345,
      /*  641 */ 2345, 5022, 2729, 2345, 2345, 2345, 2345, 4180, 2345, 2345, 2345, 2345, 5023, 2345, 4654, 2345, 4496,
      /*  658 */ 2345, 3077, 4168, 3570, 5100, 4176, 2345, 2345, 2345, 5024, 2345, 2345, 4147, 2345, 2345, 4258, 2345,
      /*  675 */ 2345, 2339, 3845, 2345, 3726, 3911, 3122, 3918, 2345, 4757, 2345, 4949, 2345, 2961, 2974, 2978, 3641,
      /*  692 */ 3718, 2988, 2996, 2722, 3003, 3008, 2345, 2998, 4205, 2345, 2952, 2345, 2345, 3697, 2345, 3015, 4630,
      /*  709 */ 3021, 3029, 3033, 2412, 2991, 2723, 3040, 3497, 2345, 2951, 2956, 2345, 5067, 4831, 2345, 3623, 2964,
      /*  726 */ 3050, 4101, 2345, 3156, 3059, 2345, 2345, 5115, 3712, 2387, 4578, 2345, 5120, 2458, 2509, 4221, 2345,
      /*  743 */ 5107, 2345, 3202, 2763, 3060, 2345, 2345, 2345, 3733, 2345, 2951, 2733, 2345, 4755, 4856, 3111, 4236,
      /*  760 */ 2557, 3086, 2345, 2348, 3162, 2345, 2345, 2527, 3154, 2345, 2345, 2347, 3161, 2345, 2345, 4684, 3167,
      /*  777 */ 3432, 4676, 3096, 2345, 2345, 2345, 2345, 2472, 3106, 2345, 2345, 2345, 2345, 2346, 3105, 2345, 2345,
      /*  794 */ 2345, 4878, 3110, 3119, 2345, 5067, 4832, 4234, 3023, 3126, 4109, 3602, 3171, 3176, 2345, 4069, 3180,
      /*  811 */ 2345, 4170, 3176, 2345, 2345, 3187, 2345, 4682, 3217, 4094, 3257, 3196, 3972, 3190, 2345, 3974, 2345,
      /*  828 */ 3251, 3209, 2345, 3973, 2345, 3214, 3218, 3223, 3227, 3231, 4192, 2345, 3229, 2345, 3237, 3606, 3242,
      /*  845 */ 3246, 4319, 3250, 3238, 3230, 3255, 3261, 3266, 3266, 3266, 3274, 3278, 3262, 3262, 3262, 3285, 3289,
      /*  862 */ 4198, 3290, 4959, 3294, 4246, 5038, 3298, 3302, 3306, 3316, 3322, 3329, 2345, 2345, 2345, 2345, 3926,
      /*  879 */ 2345, 2345, 2875, 3333, 3337, 4593, 3342, 3347, 4397, 3357, 3361, 3365, 3366, 3366, 3370, 2345, 4118,
      /*  896 */ 3376, 2345, 4445, 3382, 4945, 3392, 2721, 3398, 2829, 3406, 3410, 3417, 3424, 3004, 3431, 3947, 2345,
      /*  913 */ 3426, 2345, 2345, 3115, 3658, 4038, 4560, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2650, 2345, 2345,
      /*  930 */ 2454, 2345, 2345, 2345, 4867, 3100, 3100, 3100, 3100, 3101, 2398, 2398, 2398, 2398, 2545, 2359, 2359,
      /*  947 */ 2359, 2359, 2359, 2464, 2419, 2419, 2419, 2419, 2419, 2395, 2470, 4119, 2345, 2345, 3437, 3706, 3578,
      /*  964 */ 3394, 4115, 2345, 5085, 3441, 3522, 4170, 3451, 2345, 2345, 3132, 3489, 2345, 2345, 2345, 2345, 3143,
      /*  981 */ 3495, 2345, 2345, 2345, 2345, 4516, 3484, 2345, 4070, 3455, 2345, 2345, 2345, 4071, 3456, 2345, 2345,
      /*  998 */ 2345, 3460, 3464, 2345, 2345, 2345, 3098, 3100, 3100, 3100, 3100, 3100, 2397, 2398, 2398, 2398, 2398,
      /* 1015 */ 2398, 2480, 4118, 3830, 2345, 3469, 3584, 3579, 3476, 4935, 4215, 3011, 2345, 2345, 4515, 3483, 2345,
      /* 1032 */ 2345, 3191, 2898, 2345, 2345, 2345, 2892, 2345, 2345, 2345, 2897, 2345, 2345, 2345, 3963, 3232, 2345,
      /* 1049 */ 2345, 2345, 2345, 3517, 3490, 2345, 2345, 2345, 2345, 4515, 3520, 2345, 2345, 2345, 2345, 3982, 2345,
      /* 1066 */ 3526, 3585, 3535, 4117, 2786, 2345, 2345, 3541, 2345, 2345, 2345, 2345, 4530, 3545, 2345, 2345, 2345,
      /* 1083 */ 2345, 3541, 2345, 2345, 2345, 2345, 2456, 2345, 2345, 4910, 3100, 3100, 3100, 3100, 2476, 2398, 2398,
      /* 1100 */ 2398, 4531, 3232, 2345, 2345, 2345, 3560, 3565, 3576, 4115, 3204, 3583, 2345, 5095, 2345, 2345, 2345,
      /* 1117 */ 3163, 3064, 2345, 2345, 2345, 2345, 3219, 3071, 2345, 2345, 2345, 2345, 3157, 5054, 2345, 2345, 2345,
      /* 1134 */ 5094, 2345, 2345, 2345, 5053, 2345, 2345, 2345, 3590, 3966, 3561, 2345, 2521, 3137, 2345, 2345, 3754,
      /* 1151 */ 2981, 3141, 5078, 4842, 4667, 2967, 3147, 2528, 3155, 2345, 2751, 5076, 2686, 5082, 4996, 5091, 5099,
      /* 1168 */ 2345, 2345, 5072, 2345, 2345, 5105, 2345, 2345, 4450, 3818, 2345, 3825, 2345, 2460, 3835, 3839, 2345,
      /* 1185 */ 2345, 2345, 4069, 3843, 2345, 4928, 2345, 3443, 2345, 3828, 2345, 4052, 3148, 2345, 2386, 3114, 3150,
      /* 1202 */ 4047, 3149, 3635, 3635, 4052, 3113, 3150, 3150, 3150, 3980, 3634, 3112, 3635, 4053, 3622, 3635, 3150,
      /* 1219 */ 4974, 4976, 3627, 4978, 3631, 3640, 2345, 2345, 2345, 2345, 4428, 3779, 3723, 2345, 3595, 3645, 3649,
      /* 1236 */ 4091, 3655, 3663, 3667, 3671, 3675, 3679, 3680, 3684, 2345, 2801, 3689, 2345, 4841, 3695, 4295, 2763,
      /* 1253 */ 3350, 3199, 3691, 5040, 3485, 3701, 4584, 3465, 3705, 4823, 3710, 3716, 2345, 2345, 2802, 3690, 2345,
      /* 1270 */ 4616, 4756, 3722, 3731, 3957, 3201, 3737, 3750, 3759, 2345, 3940, 3766, 2345, 2345, 2345, 3312, 4745,
      /* 1287 */ 4749, 4761, 4765, 4769, 4773, 4777, 4781, 4785, 4788, 4792, 4795, 3504, 3232, 2345, 2345, 2345, 3505,
      /* 1304 */ 2345, 2345, 2345, 2646, 3772, 2345, 2345, 2345, 4427, 3778, 2345, 4164, 4095, 2345, 3785, 4903, 2651,
      /* 1321 */ 2345, 3753, 2345, 2345, 3793, 2345, 2345, 2345, 2345, 3098, 3100, 3100, 3100, 3100, 2398, 2398, 2398,
      /* 1338 */ 2398, 2478, 2359, 2359, 2345, 3797, 2345, 2345, 2345, 2345, 2345, 3801, 2345, 2345, 2345, 2345, 2345,
      /* 1355 */ 3805, 2345, 2345, 3846, 2810, 5004, 2345, 2345, 2345, 2345, 4151, 2345, 2815, 2820, 2833, 4077, 2838,
      /* 1372 */ 3850, 2345, 2345, 2345, 2345, 4737, 2345, 3855, 2458, 4716, 3837, 3863, 2345, 2345, 3172, 3871, 3924,
      /* 1389 */ 2345, 2340, 2345, 2345, 4149, 2345, 2339, 3845, 3723, 3089, 3789, 2345, 3930, 4129, 2345, 2776, 3914,
      /* 1406 */ 4135, 2728, 2345, 2345, 2345, 2345, 3210, 2345, 2784, 3082, 3938, 2345, 2790, 5046, 2345, 3935, 2345,
      /* 1423 */ 3944, 2730, 3877, 2345, 3352, 2732, 3955, 2731, 4157, 4157, 4157, 3351, 2732, 2732, 2732, 3531, 4156,
      /* 1440 */ 4716, 4157, 4718, 3878, 4157, 2732, 2345, 2345, 2345, 2345, 3851, 2345, 2345, 2345, 2345, 2345, 3850,
      /* 1457 */ 2345, 2345, 2345, 2345, 2345, 2345, 2345, 3612, 2663, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 3780,
      /* 1474 */ 3961, 2345, 2345, 3920, 3970, 3978, 3986, 3990, 3994, 3998, 4001, 4005, 4007, 4011, 2345, 2345, 2345,
      /* 1491 */ 4015, 2345, 3606, 4752, 4107, 3553, 4020, 4024, 4643, 4888, 4028, 2345, 4851, 2811, 4032, 4826, 4037,
      /* 1508 */ 4042, 4046, 2345, 2345, 4016, 2345, 3746, 4051, 3551, 3877, 4057, 3636, 4570, 4063, 2345, 2345, 2345,
      /* 1525 */ 2780, 2345, 2345, 2345, 2510, 4067, 4105, 2924, 4156, 4113, 2386, 4123, 4538, 2345, 2345, 2635, 4127,
      /* 1542 */ 2345, 2345, 2345, 2345, 2641, 4133, 2345, 2345, 2345, 2345, 2778, 4181, 2345, 2457, 2345, 2345, 4984,
      /* 1559 */ 5025, 2345, 4139, 2345, 2855, 3611, 2345, 2857, 2345, 2345, 3386, 2345, 2856, 2345, 2345, 3830, 3616,
      /* 1576 */ 2345, 3445, 2345, 4145, 2345, 4670, 3724, 4155, 3572, 3114, 4161, 2345, 2345, 2345, 3472, 2729, 2345,
      /* 1593 */ 2345, 2345, 2345, 2842, 2345, 2345, 2345, 2345, 3081, 2846, 2345, 2345, 2345, 2345, 2345, 2739, 2692,
      /* 1610 */ 3821, 2749, 2757, 2345, 2761, 2767, 2345, 2771, 4802, 2345, 4185, 3077, 3725, 4231, 3041, 4220, 2345,
      /* 1627 */ 5087, 2729, 2345, 2345, 2911, 4134, 2345, 2345, 4172, 2345, 2345, 2345, 2354, 3845, 2345, 3723, 3606,
      /* 1644 */ 2458, 3787, 3901, 2345, 3781, 3537, 4190, 2345, 2345, 2910, 4196, 3378, 3685, 3607, 4673, 4202, 2823,
      /* 1661 */ 2345, 4033, 2729, 2345, 3931, 2956, 2345, 3925, 4214, 4219, 4225, 4240, 4244, 4264, 2345, 4250, 2345,
      /* 1678 */ 4252, 2345, 2345, 4256, 2345, 4251, 3343, 4538, 4228, 4262, 2345, 4270, 3353, 2345, 4610, 2345, 3183,
      /* 1695 */ 3130, 2345, 2345, 2345, 2346, 3136, 2345, 2345, 2345, 2345, 3183, 3130, 2345, 2345, 2673, 2345, 2345,
      /* 1712 */ 2677, 3814, 2690, 2696, 2700, 2704, 2708, 2712, 2716, 3744, 2727, 4275, 4284, 4288, 4419, 2668, 3659,
      /* 1729 */ 2733, 4292, 4308, 4420, 3556, 3556, 3556, 4317, 3530, 4421, 4335, 4323, 3555, 3529, 3568, 3025, 2669,
      /* 1746 */ 3556, 4330, 4339, 4341, 4333, 4326, 4345, 4349, 4351, 2345, 2345, 2345, 2345, 3897, 2992, 2345, 4313,
      /* 1763 */ 4355, 4359, 4390, 4363, 4367, 4371, 4375, 4379, 4381, 4383, 2345, 2345, 2345, 4937, 4387, 4657, 4394,
      /* 1780 */ 4401, 4460, 2827, 4636, 4599, 4278, 4407, 4411, 5122, 3727, 4426, 4432, 2345, 4440, 4449, 2345, 2345,
      /* 1797 */ 4938, 3774, 2657, 4454, 4458, 3325, 2345, 3053, 4464, 4468, 2345, 2345, 2345, 5128, 4474, 2345, 2345,
      /* 1814 */ 2345, 4482, 2345, 2345, 4271, 2888, 2345, 2345, 2345, 2345, 3233, 2345, 2345, 2345, 4962, 2864, 3650,
      /* 1831 */ 2893, 2345, 3727, 4483, 2345, 2345, 2345, 3055, 4487, 4494, 2345, 2345, 3890, 4311, 2433, 2446, 3618,
      /* 1848 */ 2826, 4186, 5066, 4947, 2733, 2345, 2345, 2345, 3413, 4500, 2345, 2345, 2345, 2345, 3420, 2800, 4414,
      /* 1865 */ 4622, 4520, 3318, 2345, 2970, 5060, 2345, 2345, 2345, 2377, 4524, 2345, 2345, 2345, 2345, 3869, 2345,
      /* 1882 */ 2345, 2345, 2345, 4171, 3876, 2345, 2345, 2345, 4069, 3870, 2345, 4952, 4311, 2443, 4535, 2827, 3865,
      /* 1899 */ 3433, 2345, 2345, 2345, 2379, 4543, 2345, 2345, 2345, 3858, 2345, 2345, 2345, 2345, 3859, 2345, 2345,
      /* 1916 */ 2345, 2957, 3045, 2345, 2345, 2377, 4548, 2345, 2345, 2345, 2345, 3281, 4553, 2345, 2345, 2345, 2378,
      /* 1933 */ 4549, 4470, 2345, 4558, 2440, 4564, 3203, 4831, 2345, 2345, 2377, 4568, 2345, 2345, 2345, 3951, 2345,
      /* 1950 */ 2345, 2345, 4574, 2345, 4640, 2345, 4069, 4647, 2560, 4651, 4661, 2345, 4680, 4539, 4642, 5031, 2345,
      /* 1967 */ 5014, 4688, 4830, 4815, 4403, 3883, 4642, 4692, 4628, 4816, 4696, 4696, 4702, 4830, 4706, 4714, 4714,
      /* 1984 */ 4722, 2414, 2449, 3808, 4731, 2414, 4906, 2450, 4735, 4725, 4727, 4741, 4829, 2345, 2345, 2345, 2345,
      /* 2001 */ 3925, 2345, 2772, 3501, 4141, 3509, 4115, 4215, 3074, 2345, 2345, 3513, 4799, 2345, 2345, 2345, 2345,
      /* 2018 */ 4809, 3015, 4813, 4820, 4967, 2388, 2680, 4210, 4836, 4554, 2345, 3372, 2345, 2345, 3384, 2345, 2345,
      /* 2035 */ 3372, 2345, 2345, 2856, 2345, 2345, 3589, 3594, 3599, 4708, 3872, 4840, 4846, 2345, 4710, 4855, 2345,
      /* 2052 */ 2345, 4544, 4860, 2834, 3742, 4965, 3080, 4872, 4877, 4882, 2345, 2345, 2345, 2345, 3606, 4886, 2345,
      /* 2069 */ 2345, 2345, 3478, 4892, 2345, 2345, 2345, 3882, 2663, 2459, 3092, 3887, 2345, 2345, 3894, 2345, 2345,
      /* 2086 */ 2345, 2355, 2345, 3479, 2345, 2345, 2345, 2345, 4897, 3616, 2345, 2345, 4544, 4915, 3035, 4280, 2918,
      /* 2103 */ 3446, 4873, 4698, 4926, 2345, 2345, 2345, 2345, 2345, 4932, 2345, 2345, 2345, 2345, 3606, 4942, 2345,
      /* 2120 */ 2345, 4435, 3377, 3907, 2902, 2345, 4489, 2729, 2345, 3651, 2902, 2345, 3192, 2909, 2345, 4994, 5020,
      /* 2137 */ 5001, 3205, 5011, 2345, 2345, 2345, 2345, 2741, 2745, 2345, 2345, 2345, 2345, 4170, 4608, 2345, 2345,
      /* 2154 */ 4614, 4989, 4620, 4626, 3755, 4950, 2345, 4634, 2345, 5013, 2345, 2744, 2345, 2345, 2345, 2345, 2345,
      /* 2171 */ 2743, 2345, 2345, 2345, 2345, 2345, 2743, 4900, 2345, 4501, 4915, 3036, 5018, 3447, 3864, 5029, 2345,
      /* 2188 */ 2345, 2345, 4170, 5035, 2345, 2345, 2345, 2345, 4303, 5044, 2345, 2345, 2345, 2345, 5050, 2345, 2345,
      /* 2205 */ 2345, 2345, 4304, 4900, 2345, 3811, 3740, 4997, 5058, 5064, 2345, 2345, 2345, 5071, 2345, 2345, 2345,
      /* 2222 */ 3269, 2345, 2345, 2345, 4297, 4301, 2345, 3402, 2800, 2345, 2345, 2345, 2345, 3401, 4528, 2345, 2345,
      /* 2239 */ 2345, 2345, 3401, 4528, 4470, 4299, 2345, 2345, 3270, 2345, 5111, 4997, 4577, 2345, 2345, 2753, 2345,
      /* 2256 */ 4893, 5116, 2345, 2752, 2491, 2458, 2345, 5126, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
      /* 2273 */ 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2661, 3388, 2667, 2345, 7267, 5893, 5132, 5144, 5141, 5151,
      /* 2290 */ 5153, 5153, 5153, 5153, 5148, 5176, 5152, 5153, 5153, 5153, 5159, 5163, 5176, 5153, 5153, 5169, 5164,
      /* 2307 */ 5153, 5180, 5155, 5154, 5168, 5151, 6159, 5173, 5199, 5205, 5205, 5205, 5209, 5209, 5201, 5213, 5217,
      /* 2324 */ 5220, 5224, 5228, 5245, 5232, 5242, 5234, 5238, 5236, 5249, 5252, 7269, 7026, 5260, 5273, 5276, 5276,
      /* 2341 */ 5276, 5255, 5821, 5295, 5276, 5276, 5276, 5276, 5268, 5730, 6588, 6270, 5301, 5276, 5276, 5254, 6597,
      /* 2358 */ 5821, 6646, 6646, 6646, 6646, 5394, 5396, 5325, 5449, 5322, 5396, 5396, 5325, 5276, 5384, 5428, 5333,
      /* 2375 */ 5409, 5274, 5276, 5276, 5276, 5286, 5290, 7174, 5276, 6844, 7218, 6005, 5276, 5276, 5276, 6390, 6115,
      /* 2392 */ 6646, 6647, 5323, 5396, 5397, 5400, 5428, 5428, 5428, 5428, 6645, 6646, 6646, 5398, 5400, 5428, 5345,
      /* 2409 */ 6844, 7217, 5353, 5276, 5266, 5276, 5276, 5388, 7455, 5457, 5396, 5396, 5396, 5396, 5276, 5399, 5402,
      /* 2426 */ 6779, 5408, 6667, 5275, 5276, 5275, 5276, 5276, 6239, 5276, 6839, 5410, 6667, 5275, 5276, 5275, 6561,
      /* 2443 */ 5276, 5275, 6839, 6843, 7454, 7155, 5276, 5276, 7229, 5276, 5276, 6466, 5276, 5276, 6526, 5276, 5276,
      /* 2460 */ 5276, 5302, 5276, 5276, 6646, 5393, 5396, 5396, 5396, 5400, 5407, 6668, 5276, 5276, 5268, 6066, 5402,
      /* 2477 */ 5428, 5428, 5428, 5429, 6646, 6646, 6646, 5395, 5396, 5396, 5396, 5326, 5368, 5419, 5276, 5276, 5276,
      /* 2494 */ 5305, 5401, 5428, 5428, 5428, 5430, 6646, 5427, 5428, 5428, 5428, 6644, 6646, 6646, 5402, 5387, 5276,
      /* 2511 */ 5276, 5276, 5307, 6771, 6646, 5394, 5396, 5396, 5398, 5427, 5276, 5276, 5268, 6630, 5397, 5403, 5276,
      /* 2528 */ 5276, 5269, 5731, 6036, 5400, 5400, 5402, 5428, 6644, 5402, 5428, 5428, 6643, 6646, 5368, 5400, 5427,
      /* 2545 */ 6643, 6646, 6646, 6646, 5396, 5396, 5396, 5397, 5387, 6646, 5395, 5324, 5368, 5276, 5999, 5276, 5276,
      /* 2562 */ 7234, 6237, 5276, 6239, 6237, 5401, 6643, 5393, 5324, 5415, 5434, 5460, 5464, 5463, 5462, 5461, 5326,
      /* 2579 */ 7445, 6108, 6418, 5509, 5541, 5438, 5442, 5508, 5508, 5508, 5508, 5486, 5515, 5454, 5468, 5472, 5491,
      /* 2596 */ 5543, 5496, 5508, 5508, 5538, 5446, 5582, 5487, 5506, 5581, 5513, 5475, 5519, 5535, 6805, 6808, 5547,
      /* 2613 */ 6811, 6814, 6815, 6816, 5551, 5554, 5558, 5569, 5573, 5579, 5492, 5586, 5590, 5594, 5598, 5605, 5604,
      /* 2630 */ 5601, 5609, 5613, 5561, 6981, 5276, 5276, 5276, 5308, 5312, 7372, 5276, 5276, 5276, 5309, 7137, 5276,
      /* 2647 */ 5276, 5276, 5329, 5276, 6389, 5276, 5276, 6557, 5276, 6391, 5276, 5276, 5275, 5276, 6392, 6392, 5276,
      /* 2664 */ 5276, 5279, 5276, 6282, 5276, 5276, 5276, 5366, 5276, 6000, 6885, 5910, 7281, 5626, 5297, 5629, 5276,
      /* 2681 */ 5276, 7348, 5276, 5276, 7354, 5276, 5276, 5276, 5631, 5640, 5899, 5276, 5647, 5276, 6987, 5263, 5186,
      /* 2698 */ 5654, 5657, 5659, 5660, 5664, 5668, 5673, 5672, 5677, 5679, 5680, 5680, 5684, 5686, 5693, 5688, 5700,
      /* 2715 */ 5688, 5697, 5689, 5704, 5276, 5276, 7355, 5276, 5276, 5276, 5648, 6027, 6933, 6281, 5898, 5276, 5276,
      /* 2732 */ 5276, 5367, 5276, 5276, 5276, 5368, 5400, 5708, 6023, 5276, 5276, 5281, 7411, 7471, 7426, 5276, 5276,
      /* 2749 */ 6043, 5135, 5276, 5276, 5281, 7468, 6467, 5276, 5716, 5276, 5276, 5721, 6061, 5339, 5276, 5276, 5304,
      /* 2766 */ 5276, 5341, 5737, 5745, 5751, 5749, 5276, 5276, 5276, 5369, 6219, 5751, 5276, 5276, 5306, 5310, 6765,
      /* 2783 */ 5276, 5276, 6988, 5276, 6526, 5277, 6886, 6113, 5784, 5276, 5793, 7239, 5808, 5855, 5812, 5831, 7055,
      /* 2800 */ 5318, 5276, 5276, 5276, 5372, 5348, 7452, 5827, 5832, 7056, 5137, 5276, 5276, 5276, 5376, 5368, 5276,
      /* 2817 */ 6525, 5276, 5414, 5276, 7452, 7443, 5276, 5276, 7419, 6200, 5276, 5925, 5276, 5276, 5276, 7249, 5717,
      /* 2834 */ 5276, 5276, 5276, 5387, 5795, 7243, 5854, 5845, 7241, 5851, 5855, 5846, 7242, 5852, 5856, 5317, 5850,
      /* 2851 */ 5854, 5845, 5898, 5860, 5276, 5276, 5276, 5388, 6362, 5276, 5854, 5876, 5318, 5276, 5276, 7441, 6519,
      /* 2868 */ 7240, 5851, 5855, 5877, 5898, 5881, 5839, 5276, 5276, 5370, 5276, 5276, 5853, 5885, 5318, 5276, 5276,
      /* 2885 */ 7452, 6134, 7239, 6135, 5854, 5886, 5898, 6404, 5870, 6865, 5276, 5276, 6117, 5869, 6864, 5898, 5276,
      /* 2902 */ 6867, 5276, 5276, 5276, 5617, 6117, 5890, 6866, 5276, 5276, 5276, 5620, 6857, 5276, 6719, 6723, 5276,
      /* 2919 */ 5276, 7455, 6886, 6721, 5898, 5276, 5276, 5373, 5276, 5914, 5276, 5898, 7023, 5934, 5938, 5942, 5945,
      /* 2936 */ 5948, 5949, 5949, 5950, 5954, 5954, 5954, 5954, 5954, 5958, 5961, 5276, 5277, 5921, 5930, 5276, 6659,
      /* 2953 */ 6079, 5966, 6872, 6872, 5276, 5276, 5276, 5650, 6487, 5276, 5711, 6194, 7445, 7444, 5368, 5276, 6000,
      /* 2970 */ 6525, 5276, 7025, 5302, 6259, 5276, 5370, 5979, 6510, 5997, 5276, 6523, 5276, 5276, 6660, 6080, 5967,
      /* 2987 */ 5898, 6890, 5997, 5276, 6889, 5276, 5276, 5276, 5841, 6010, 5276, 6606, 5276, 5276, 5276, 5822, 6016,
      /* 3004 */ 5276, 5276, 5276, 5787, 5276, 6605, 6017, 5276, 5277, 5962, 6001, 7450, 5276, 5276, 5276, 5826, 5831,
      /* 3021 */ 5712, 6195, 7052, 5276, 5368, 5276, 5276, 5366, 5369, 6121, 5276, 6513, 5276, 6559, 5276, 5276, 5386,
      /* 3038 */ 5282, 5276, 6093, 5276, 5276, 5276, 5864, 6029, 5276, 5276, 5276, 5896, 6848, 5998, 5276, 6523, 6792,
      /* 3055 */ 5276, 5276, 6397, 7112, 6033, 6047, 6053, 5898, 5276, 6034, 6048, 6054, 5276, 5278, 5281, 6211, 6035,
      /* 3072 */ 6049, 6055, 5276, 5278, 5909, 5276, 5279, 6836, 6888, 5276, 5276, 5276, 7452, 5761, 6526, 6233, 6268,
      /* 3089 */ 5276, 5280, 5303, 6536, 5276, 6268, 6140, 6038, 6070, 5276, 5276, 5400, 5400, 5400, 5400, 5401, 6066,
      /* 3106 */ 6588, 6039, 5894, 5276, 7456, 5276, 5276, 5276, 6002, 5276, 5276, 5276, 5975, 5277, 6078, 6084, 5367,
      /* 3123 */ 6266, 7445, 6236, 5999, 6524, 5276, 6100, 6037, 6070, 5276, 5276, 5477, 5481, 6630, 6587, 6090, 5894,
      /* 3140 */ 5276, 6080, 6086, 5276, 5276, 5478, 5482, 6099, 5276, 5276, 5276, 6003, 5276, 5276, 6036, 6107, 5276,
      /* 3157 */ 5276, 5276, 6072, 6033, 6588, 6106, 5276, 5276, 5276, 6073, 6085, 5276, 5276, 7023, 6099, 5276, 5276,
      /* 3174 */ 5281, 6583, 5728, 5732, 6105, 5894, 5729, 5733, 6106, 5276, 5281, 6629, 6586, 5727, 5731, 6104, 6108,
      /* 3191 */ 5276, 5276, 5276, 6117, 5890, 5371, 6000, 6125, 6268, 6456, 5276, 6388, 5276, 5276, 5276, 6523, 5276,
      /* 3208 */ 7417, 6416, 5276, 5276, 5276, 6119, 5276, 6524, 6525, 6659, 6322, 5276, 5276, 5276, 6074, 5363, 7445,
      /* 3225 */ 5276, 5370, 6000, 6236, 5276, 6320, 5799, 5803, 5276, 5276, 5276, 6127, 6319, 5798, 5802, 5276, 5276,
      /* 3242 */ 6321, 5276, 7260, 7446, 5368, 6001, 6320, 5799, 5801, 5276, 5276, 6319, 5797, 5276, 7073, 5276, 7258,
      /* 3259 */ 7447, 5276, 7447, 5302, 7075, 5803, 5276, 5276, 7072, 7076, 5276, 5281, 7468, 7477, 5276, 5276, 7073,
      /* 3276 */ 7260, 7446, 5276, 7074, 5802, 5276, 5285, 5289, 7173, 6339, 7258, 7447, 6339, 7077, 5276, 6117, 7076,
      /* 3293 */ 5276, 6342, 5276, 6117, 6342, 6139, 6117, 6200, 6978, 5276, 6978, 5276, 6978, 5276, 7445, 6197, 5276,
      /* 3310 */ 6237, 6722, 5276, 5276, 5372, 7365, 6199, 6197, 5276, 6199, 5276, 5925, 7445, 6198, 6198, 6198, 5276,
      /* 3327 */ 5276, 5926, 6198, 5276, 6896, 6896, 5389, 6536, 5368, 5525, 6145, 5276, 5276, 5276, 6133, 6358, 5367,
      /* 3344 */ 5276, 5276, 6198, 6537, 6199, 6536, 6200, 5276, 6537, 5276, 5276, 5276, 6480, 6167, 6152, 6171, 6175,
      /* 3361 */ 6179, 6181, 6185, 6185, 6181, 6189, 6189, 6189, 6189, 6189, 6191, 5276, 5276, 5564, 6363, 6206, 5276,
      /* 3378 */ 5276, 5276, 6199, 6200, 6251, 5898, 5276, 5276, 5565, 5371, 5276, 5276, 5575, 6934, 6200, 5276, 7454,
      /* 3395 */ 5803, 7356, 5276, 6293, 5276, 5804, 5276, 5287, 5291, 7160, 7066, 6196, 5276, 5285, 6217, 6223, 7106,
      /* 3412 */ 6232, 5276, 5287, 7149, 7129, 6243, 5276, 7260, 5276, 5288, 7150, 7141, 6257, 5276, 5789, 5276, 5276,
      /* 3429 */ 5276, 6202, 6263, 5276, 5276, 5276, 6201, 5367, 5369, 5387, 6274, 6253, 5278, 6018, 5276, 5276, 5642,
      /* 3446 */ 5276, 5276, 5276, 6388, 6113, 5193, 6286, 6935, 6040, 6287, 6936, 6041, 5276, 5276, 5191, 5195, 6288,
      /* 3463 */ 6937, 6042, 5276, 5276, 5276, 6226, 5385, 6114, 6252, 5276, 5307, 5311, 5315, 7420, 7354, 5276, 5276,
      /* 3480 */ 5739, 7397, 7403, 6298, 6329, 5803, 5276, 5276, 6006, 6299, 6330, 5276, 5276, 5276, 6265, 6300, 6331,
      /* 3497 */ 5276, 5276, 5753, 5752, 5387, 6275, 5897, 5276, 5328, 6552, 6547, 5803, 6197, 7453, 7421, 6267, 6392,
      /* 3514 */ 5479, 6312, 6329, 5276, 6458, 5480, 6313, 6330, 5276, 5276, 5764, 5276, 5385, 6246, 6253, 5276, 5363,
      /* 3531 */ 5367, 5276, 5276, 6536, 6317, 6267, 5276, 5276, 5276, 5621, 6392, 7412, 6327, 6332, 6301, 5803, 5276,
      /* 3548 */ 5276, 5815, 7444, 6522, 5276, 5276, 5375, 5276, 5276, 5365, 5276, 5276, 5916, 5276, 5276, 5276, 6294,
      /* 3565 */ 5368, 5386, 6336, 5276, 5365, 5276, 6535, 5276, 6820, 7444, 5276, 5276, 6519, 6308, 5276, 6198, 5276,
      /* 3582 */ 7452, 5280, 5276, 5276, 5276, 6307, 6197, 5276, 6843, 5276, 6356, 6250, 6678, 5276, 5276, 5276, 6368,
      /* 3599 */ 5276, 6844, 5894, 5276, 5369, 5998, 6524, 5276, 5276, 5276, 5277, 6208, 6362, 5276, 5276, 5276, 6371,
      /* 3616 */ 5276, 6846, 5276, 5276, 5898, 5276, 6005, 5276, 5276, 6005, 5276, 5276, 6846, 6004, 6002, 6846, 6005,
      /* 3633 */ 6005, 6005, 5276, 5276, 6004, 5276, 5276, 6005, 6847, 5276, 5276, 5995, 6375, 5894, 5276, 6520, 6383,
      /* 3650 */ 5276, 5276, 5276, 6404, 5871, 6112, 7024, 6387, 6111, 5276, 5276, 5276, 5363, 6401, 6761, 6409, 6972,
      /* 3667 */ 6429, 6432, 6433, 6434, 6438, 6438, 6438, 6438, 6441, 6443, 6444, 6444, 6451, 6451, 6451, 6451, 6448,
      /* 3684 */ 6452, 5276, 5276, 5276, 6425, 5348, 6566, 5276, 5276, 5276, 6463, 6370, 6494, 5276, 5276, 5973, 5276,
      /* 3701 */ 5362, 6468, 5276, 6469, 6475, 5276, 5276, 5276, 6519, 5276, 6484, 5276, 5276, 6000, 5389, 6228, 6477,
      /* 3718 */ 5276, 5276, 6012, 5276, 6112, 5276, 5276, 5276, 6520, 5276, 5276, 5276, 6396, 5304, 6197, 5276, 5276,
      /* 3735 */ 6060, 6059, 5276, 6499, 6507, 5276, 5386, 5283, 5276, 5276, 6395, 5276, 5276, 5279, 6208, 6518, 5276,
      /* 3752 */ 5276, 5359, 5276, 5276, 5276, 6524, 5276, 5276, 6534, 6534, 5276, 5388, 5276, 5284, 6546, 6618, 5276,
      /* 3769 */ 5276, 6109, 5903, 6553, 6548, 5276, 5276, 6116, 5998, 5349, 6567, 5276, 5276, 5276, 6392, 6611, 5305,
      /* 3786 */ 6199, 5276, 6537, 6265, 5276, 6236, 6525, 5276, 6830, 6573, 5818, 5276, 6831, 5501, 5819, 5276, 6832,
      /* 3803 */ 5502, 5820, 6830, 5500, 5818, 5276, 5422, 6847, 5276, 5522, 7448, 5276, 5636, 6001, 5998, 6565, 5276,
      /* 3820 */ 5276, 5276, 6525, 5276, 5276, 7449, 6887, 6493, 5276, 5641, 6843, 5276, 5276, 5276, 6237, 6537, 5276,
      /* 3837 */ 6268, 6140, 5276, 6390, 5276, 6459, 6571, 6577, 5821, 5276, 5276, 5276, 6657, 5276, 7285, 5499, 6578,
      /* 3854 */ 5276, 5276, 6886, 5279, 5276, 5649, 6028, 6094, 5276, 6458, 5276, 5276, 5276, 6526, 7024, 6877, 5256,
      /* 3871 */ 6579, 5276, 5276, 5276, 6528, 6598, 5276, 5276, 5276, 6536, 5276, 6592, 5276, 5276, 5276, 6620, 5276,
      /* 3888 */ 6391, 6459, 5276, 5739, 7123, 6938, 5281, 6583, 6579, 5276, 5741, 7125, 6332, 6602, 5276, 6459, 5276,
      /* 3905 */ 5741, 7125, 6522, 5276, 6404, 5871, 5280, 5276, 5302, 5276, 5757, 5276, 5356, 6392, 6526, 5276, 5276,
      /* 3922 */ 6118, 5279, 6610, 5276, 5276, 5276, 6783, 5367, 6615, 5276, 5276, 5276, 6784, 5276, 6919, 6923, 5276,
      /* 3939 */ 5777, 5276, 5276, 5327, 6542, 5280, 6537, 6266, 5276, 5788, 6264, 5276, 5288, 7184, 7189, 5276, 5277,
      /* 3956 */ 5276, 5367, 5276, 6268, 6141, 6712, 6424, 5276, 5276, 6126, 5898, 5276, 5276, 5632, 6626, 6634, 5276,
      /* 3973 */ 5276, 6131, 6414, 6108, 5276, 5276, 6395, 5276, 6844, 5276, 5276, 5917, 5276, 6521, 5276, 6395, 6522,
      /* 3990 */ 6729, 6846, 5276, 5375, 6502, 6651, 6664, 6672, 6682, 6685, 6689, 6693, 6693, 6693, 6695, 6697, 6697,
      /* 4007 */ 6697, 6697, 6701, 6702, 6702, 6702, 6703, 6707, 5276, 6711, 6423, 5276, 5276, 5276, 6735, 5276, 6716,
      /* 4024 */ 5276, 7351, 5276, 6727, 5276, 7420, 6268, 6969, 6745, 5276, 5276, 5276, 6785, 5450, 5276, 5276, 5276,
      /* 4041 */ 6793, 6743, 6094, 5276, 6750, 6751, 5276, 5276, 5276, 6844, 6212, 5276, 5276, 5276, 6847, 5276, 5276,
      /* 4058 */ 6755, 5276, 5276, 6238, 5276, 6524, 6798, 6267, 6759, 6771, 6766, 5276, 5276, 5276, 6877, 5194, 6287,
      /* 4075 */ 5276, 7275, 5276, 5276, 6248, 5276, 5276, 6776, 6772, 6767, 6790, 5276, 6792, 5276, 5907, 5276, 6269,
      /* 4092 */ 5894, 7260, 7023, 5276, 5276, 5276, 6111, 6392, 6422, 6847, 5276, 6100, 5276, 6888, 5276, 5276, 6521,
      /* 4109 */ 5276, 5276, 6194, 7446, 5368, 7418, 5276, 5276, 6293, 5276, 5276, 5276, 6269, 6206, 7033, 6523, 6797,
      /* 4126 */ 6266, 5312, 5316, 5276, 5276, 5276, 6921, 5313, 5317, 5276, 5276, 5276, 6933, 6792, 6791, 5276, 5276,
      /* 4143 */ 6305, 5304, 6420, 6424, 5276, 5276, 6319, 6922, 5276, 5276, 6118, 5276, 5374, 5276, 5276, 6535, 5276,
      /* 4160 */ 5276, 7034, 7452, 6826, 5276, 5908, 5278, 6495, 5276, 6519, 5276, 5276, 5276, 5281, 5255, 6598, 5276,
      /* 4177 */ 7033, 5863, 6828, 6852, 5314, 5318, 5276, 5276, 6913, 5276, 5276, 5276, 6958, 6858, 5318, 5276, 5276,
      /* 4194 */ 6321, 5800, 6857, 5317, 5276, 5276, 6340, 5802, 6535, 5276, 6862, 5276, 6022, 5753, 5276, 5278, 5276,
      /* 4211 */ 5276, 7210, 5276, 6871, 5276, 5276, 5276, 7191, 6199, 6200, 5276, 5276, 5276, 7042, 6425, 5276, 5276,
      /* 4228 */ 6876, 6887, 5276, 5367, 6820, 7444, 5276, 6002, 5276, 6194, 7052, 5276, 6637, 6520, 5276, 6536, 5276,
      /* 4245 */ 6822, 5276, 5276, 6341, 5276, 7204, 5276, 5276, 5276, 7203, 5367, 5276, 6786, 5276, 5276, 6392, 6921,
      /* 4262 */ 6821, 5276, 5276, 6904, 5276, 5276, 6388, 6391, 6480, 5276, 5276, 5276, 7239, 5276, 6478, 5367, 5276,
      /* 4279 */ 6095, 5276, 5276, 6394, 5276, 6897, 5276, 5276, 6883, 6535, 5276, 5371, 6904, 5364, 5276, 6894, 5276,
      /* 4296 */ 6110, 5276, 5276, 5981, 7461, 7451, 5276, 5276, 5276, 5983, 7470, 5990, 5283, 6536, 6901, 5276, 6114,
      /* 4313 */ 5276, 6001, 6911, 5374, 6535, 5368, 5803, 5276, 6392, 6412, 5369, 5276, 5276, 5366, 5364, 6537, 6364,
      /* 4330 */ 5364, 5276, 5367, 5371, 5366, 5364, 5276, 5276, 6536, 5365, 5276, 5366, 5276, 5366, 5367, 6538, 6538,
      /* 4347 */ 6538, 5773, 5767, 5769, 5771, 5771, 5772, 5276, 7445, 5183, 5276, 5282, 5917, 7454, 6113, 6917, 6942,
      /* 4364 */ 7063, 5336, 6951, 6962, 6966, 5531, 6992, 6995, 6995, 6998, 7003, 7002, 7002, 7004, 7008, 7009, 7015,
      /* 4381 */ 7013, 7013, 7013, 7013, 7019, 7022, 7030, 5276, 5276, 6115, 5375, 5528, 6927, 5276, 7445, 6842, 7453,
      /* 4398 */ 6149, 6156, 6163, 7038, 6983, 5276, 5276, 6392, 7229, 5277, 5276, 5276, 7046, 7060, 5276, 7070, 5276,
      /* 4415 */ 6116, 5999, 5276, 6117, 5276, 5276, 5364, 5276, 5276, 5276, 7240, 7085, 5276, 5276, 5276, 7337, 5349,
      /* 4432 */ 5276, 6906, 7086, 5276, 6117, 5368, 5276, 5276, 6907, 5276, 7090, 5276, 6120, 5276, 5368, 5389, 6113,
      /* 4449 */ 7094, 5276, 5276, 5276, 7338, 6840, 5276, 6782, 7444, 6985, 5276, 5896, 5276, 6197, 5276, 5276, 7024,
      /* 4466 */ 5276, 7104, 5277, 5276, 5276, 6947, 6946, 5276, 6378, 5276, 5276, 5276, 7356, 5276, 5276, 7356, 6396,
      /* 4483 */ 7111, 7118, 6379, 5276, 7119, 6094, 5276, 5276, 6405, 5872, 5898, 6956, 6954, 5276, 5276, 6422, 6847,
      /* 4500 */ 7144, 5276, 5276, 5276, 7363, 5285, 5289, 7113, 7142, 5286, 7148, 7114, 7143, 6201, 5367, 5276, 5276,
      /* 4517 */ 6458, 5480, 6298, 7452, 7154, 5276, 5895, 5290, 7159, 7164, 5318, 7066, 5318, 5276, 5276, 6458, 5481,
      /* 4534 */ 6301, 6676, 5276, 5276, 6199, 5276, 5276, 5276, 6879, 7180, 5276, 5276, 5276, 7364, 5290, 7174, 7179,
      /* 4551 */ 5276, 5276, 7178, 5276, 5276, 5276, 7380, 5740, 7169, 5276, 5276, 6467, 5276, 6677, 6197, 5276, 5924,
      /* 4568 */ 7196, 6975, 5276, 5276, 6467, 7049, 5285, 7195, 7185, 6391, 6116, 5276, 5276, 5276, 7208, 7454, 5276,
      /* 4585 */ 5276, 6473, 6477, 6526, 5276, 7449, 5276, 6197, 6520, 5276, 7446, 5276, 5375, 7224, 5276, 5276, 5276,
      /* 4602 */ 7381, 7214, 5276, 5276, 5276, 7408, 7223, 6847, 5276, 5276, 6479, 5276, 7222, 6425, 5276, 6201, 6886,
      /* 4619 */ 6492, 7200, 5276, 6237, 5276, 5276, 6841, 6675, 5276, 5276, 5387, 5276, 5276, 6488, 5276, 6878, 6781,
      /* 4636 */ 5276, 5276, 6514, 5276, 5276, 6879, 7230, 5276, 5276, 5276, 7446, 7228, 5276, 5276, 6249, 7452, 5276,
      /* 4653 */ 5389, 5276, 6198, 6197, 5276, 6000, 5276, 6238, 5276, 6524, 6201, 5276, 6201, 7449, 5276, 6193, 7445,
      /* 4670 */ 5276, 5280, 6209, 6213, 5276, 6520, 5276, 5281, 6065, 6587, 6879, 7455, 5276, 5276, 6525, 6526, 6659,
      /* 4687 */ 6079, 7450, 5276, 6395, 7455, 6621, 6847, 5276, 7238, 5276, 6622, 5276, 5276, 6526, 7416, 5276, 6622,
      /* 4704 */ 5276, 7247, 6620, 7455, 5276, 5276, 6530, 5276, 7391, 6527, 6621, 6847, 5276, 5276, 6537, 5276, 5276,
      /* 4721 */ 6536, 6621, 6847, 7455, 5387, 5388, 6847, 5388, 7344, 5276, 5276, 7229, 7453, 5386, 5423, 5389, 5276,
      /* 4738 */ 5276, 6593, 5276, 5388, 5276, 5386, 5388, 7253, 5276, 7258, 7446, 6196, 5276, 5363, 5276, 6210, 6887,
      /* 4755 */ 5276, 5894, 5276, 5276, 5276, 5971, 7257, 5276, 5916, 6640, 7264, 6258, 5276, 5189, 5276, 7260, 5916,
      /* 4772 */ 7259, 6503, 7097, 7283, 7273, 5724, 7100, 7135, 7279, 6930, 7132, 7289, 7293, 7302, 7295, 7297, 7306,
      /* 4789 */ 7298, 7317, 7310, 7311, 7315, 7318, 7326, 7326, 7328, 7324, 7322, 7332, 7335, 5276, 6218, 5750, 5276,
      /* 4806 */ 5276, 7362, 7366, 7364, 7342, 5276, 6467, 5389, 5281, 5276, 5276, 6621, 5276, 5276, 6393, 5276, 5915,
      /* 4823 */ 5276, 6227, 6476, 5276, 5377, 6746, 5276, 5386, 5276, 5276, 5276, 7449, 5276, 5276, 7360, 7370, 7376,
      /* 4840 */ 7385, 5276, 5276, 5276, 7450, 5276, 5276, 6529, 7386, 5276, 6265, 5276, 5276, 5378, 6094, 7392, 5276,
      /* 4857 */ 5276, 5276, 7451, 7342, 7445, 6201, 5276, 6266, 5276, 5276, 5382, 5400, 5400, 5400, 5427, 6389, 6113,
      /* 4874 */ 5276, 5276, 6235, 6234, 5276, 5276, 5276, 7457, 5276, 6526, 6716, 7433, 7396, 7402, 5276, 5276, 6733,
      /* 4891 */ 6739, 7403, 5276, 5276, 5276, 7466, 7408, 7398, 7404, 6844, 5276, 6847, 5276, 6267, 6140, 5276, 5388,
      /* 4908 */ 7230, 5276, 5414, 5400, 5400, 5400, 5428, 7342, 7447, 7451, 5276, 6268, 5276, 6237, 6268, 5276, 5276,
      /* 4925 */ 7356, 6110, 6268, 5276, 5276, 5276, 5643, 7409, 5986, 7425, 5276, 6292, 5276, 5276, 5740, 7124, 7030,
      /* 4942 */ 7410, 5987, 7426, 5276, 6306, 5305, 5276, 5276, 6201, 5276, 5276, 5276, 5739, 7168, 7411, 5988, 7427,
      /* 4959 */ 5276, 6323, 7446, 6117, 5276, 5371, 5276, 5276, 7454, 5276, 6887, 5276, 5985, 5989, 6236, 6846, 6003,
      /* 4976 */ 5276, 6004, 5276, 6004, 6002, 5276, 6845, 5276, 5276, 5276, 6802, 5311, 6560, 7449, 5276, 5276, 5281,
      /* 4993 */ 7200, 5276, 6393, 5276, 7452, 5276, 5276, 5276, 6388, 6113, 5276, 6233, 5836, 5898, 5276, 5276, 7387,
      /* 5010 */ 5868, 7434, 5276, 5276, 5276, 6877, 7228, 6201, 5276, 7452, 5962, 5276, 5276, 5276, 6853, 5315, 5898,
      /* 5027 */ 5276, 5276, 7431, 5276, 5276, 5276, 6878, 7229, 5984, 7471, 5991, 5276, 6340, 5803, 5276, 5780, 5276,
      /* 5044 */ 5990, 5276, 5276, 5276, 6920, 5821, 5982, 7469, 5989, 5276, 6346, 6351, 5276, 5276, 6388, 6113, 5276,
      /* 5061 */ 5276, 6946, 5276, 5276, 7438, 5276, 5276, 7024, 5276, 5276, 5276, 7467, 7476, 5276, 5276, 7477, 5276,
      /* 5078 */ 5276, 5276, 7025, 5276, 7450, 5276, 5388, 5281, 6279, 5276, 5276, 5622, 5315, 5276, 6389, 6114, 5276,
      /* 5095 */ 6347, 6352, 5276, 5276, 5276, 7444, 5276, 5276, 5276, 6945, 7466, 7475, 5276, 5276, 7041, 5276, 5631,
      /* 5112 */ 5276, 5388, 5282, 7466, 7462, 5276, 5276, 5276, 7040, 5276, 5276, 5276, 7081, 5276, 5303, 5276, 5276,
      /* 5129 */ 5276, 7110, 6654, 0, 0, 1075838976, 2097152, -1845493760, 0, 0, 0x80000000, 16777216, 4194560, 4196352,
      /* 5143 */ 270532608, 2097152, 2097152, 268435456, 4194432, 16777216, 4194432, 3145728, 541065216, -2143289344,
      /* 5153 */ 4194304, 4194304, 4194304, 4194304, 541065216, 4194304, 4194304, 4194432, 37748736, -1606418432,
      /* 5163 */ 541065216, 541065216, 541065216, 541065216, 4194304, 4194304, 4196352, -1606418432, -1606418432,
      /* 5172 */ 541065216, 541065216, 4194304, 4198144, 541065216, 541065216, -2143289344, -2143289344, 8425488, 4194304,
      /* 5182 */ 4194304, 4194304, 1, 32768, 0, 0x80000000, 16, 33554432, 33554432, 0, 2, 4, 112, 128, 256, 3584, 16384,
      /* 5199 */ 37748736, 742391808, 239075328, 775946240, 775946240, 775946240, 171966464, 171966464, 171966464,
      /* 5208 */ 171966464, 239075328, 171966464, 775946240, 239075328, 4718592, 64, 4718592, 2097216, 4720640, 541589504,
      /* 5219 */ 4194368, 541589504, 4194400, 4194368, -2142763008, 541589504, 541065280, 4194368, 4194368, 541065312,
      /* 5229 */ 541065280, -2143289280, 4194368, -2143285408, -2143285408, -2143285440, -2143285440, -2143285440,
      /* 5237 */ -2143285440, -1605890240, -2142761152, -2109731008, -1606414528, -2142761152, -1606414528, -2143285440,
      /* 5245 */ -2143285440, -1606414528, -1606414528, -2143285440, -2109731008, 776470528, -1908404416, 775946304,
      /* 5253 */ -1908404416, 2, 4, 8, 16, 512, 1024, 4194304, 128, 128, 0, 0x80000000, 524288, 5242880, 0x80000000, 0, 0,
      /* 5270 */ 2, 12, 64, 256, 2048, 2048, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 4, 16, 224, 256, 512, 1024, 16777216,
      /* 5296 */ 16777216, 0, 0, 0x80000000, 65536, 1792, 0, 0, 0, 8, 0, 0, 0, 12, 32, 64, 1024, 2048, 57344, 262144,
      /* 5316 */ 50331648, 268435456, 1073741824, 0x80000000, 0, 0, 1536, 64, 524352, 524352, 524352, 0, 0, 0, 62, 64,
      /* 5332 */ 128, 64, 262144, 1048576, 0, 0x80000000, 2097152, 0, -2113929216, 0, 0, -1979711488, -1912602624, 64, 64,
      /* 5347 */ 1048576, 128, 256, 2048, 262144, 524288, 4096, 1024, 1024, 0, -570425344, 32505856, 0, 0, 48, 25165824,
      /* 5363 */ 0, 0, 0, 33554432, 268435456, 0, 0, 0, 524288, 0, 0, 0, 32, 0, 0, 0, 44, 64576, 319029248, 0, 524288,
      /* 5384 */ 524288, 524288, 0, 64, 0, 0, 0, 64, 0, 96, 96, 96, 524352, 524352, 524352, 524352, 524288, 524288,
      /* 5402 */ 524288, 524288, 64, 64, 0, 64, 128, 128, 128, 128, 2048, 2048, 0, 0, 524288, 524288, 64, 64, 128, 2048,
      /* 5422 */ 0, 0, 64, 128, 8388608, 524288, 64, 64, 64, 64, 32, 96, 64, 96, 96, 524352, 96, 160, 1056, 262176,
      /* 5442 */ 1048608, 2097184, 4194336, 536870944, 40, 262176, 32, 96, 0, 0, 0, 60, 40, 48, 1120, 96, 96, 64, 524352,
      /* 5461 */ 0, 524288, 64, 96, 524352, 0, 524288, 4195360, 6291488, 2097184, 2097184, 4194336, 4194336, 4194336, 32,
      /* 5476 */ 56, 0, 4, 16, 32, 64, 128, 256, 1536, 2048, 40, 262184, 40, 40, 40, 40, 40, 262176, 32, 32, 6292512,
      /* 5497 */ 4195360, 2097184, 32, 128, 1792, 8192, 16384, 131072, 524288, 4195104, 6292512, 32, 32, 32, 32, 4, 40,
      /* 5514 */ 262184, 32, 32, 34, 34, 262184, 40, 4196128, 32, 262144, 524288, 0, 0, 64, 256, 0, 2097152, 135790592,
      /* 5532 */ 131073, 4, 393233, 262184, 34, 42, 32, 524320, 32, 1073872896, 32, 32, 40, 1120, 96, 1056, 4194336, 32,
      /* 5550 */ 2098208, -322695456, -322695456, -322695456, -322695456, -322597152, -320598176, -322597152, -322597144,
      /* 5559 */ -321548576, -320598168, -322597144, -321548568, -37482773, 0, 0, 64, 1536, 32768, -322588952, -321548568,
      /* 5571 */ -322588952, -321548568, -322597144, 32, 0, 32, 64, 65536, 0, 96, 32, 32, 56, 262184, 40, 41, 262184, 32,
      /* 5589 */ 42, 224, 40, 262176, 42, 106, 293601323, 293601323, 293863467, 293699627, 293617707, 293716011,
      /* 5601 */ 293702203, 293702203, 293702203, 297896507, 293702203, 293702203, 293702203, 293702267, 293964347,
      /* 5610 */ 293702267, 297896507, 293964347, 297896507, 297896507, -322597144, -37744981, 0, 32, 524288, 0, 0, 64,
      /* 5623 */ 2048, 16384, 32768, 0, 0, 262144, 65536, 262144, 262144, 0, 4096, 0, 8, 0, 2, 65536, 262656, 328192, 0,
      /* 5642 */ 0, 0, 1536, 32768, 0, 5242880, 0, 0, 0, 1998, 518144, 8388608, -2147418112, 5242880, -1842937664,
      /* 5657 */ 201330721, 201330721, -2111369023, -2111369023, -2111369023, -2111369023, -2111360575, -2111369023,
      /* 5665 */ -2111369023, -2111369023, -1977151295, -1977151293, -1910042431, -1893265183, -2111368509, -1893265183,
      /* 5673 */ -1893265183, -1893265183, -1893265183, -2111368509, -1893265183, -1893265183, -553689472, -553656704,
      /* 5681 */ -553689472, -553689472, -553656704, -553656704, -553656704, -553656704, -553656704, -553656672,
      /* 5689 */ -553656672, -553656672, -553656672, -536912159, -553656672, -553656672, -553656664, -553656664,
      /* 5697 */ -553656672, -553656672, -553656670, -553656672, -553656672, -553656670, -553656608, -553656671,
      /* 5705 */ -536879391, -536879391, -536879391, 0, 0, 262656, 0, 0, 65, 1024, 0, 1, 4096, 201326592, 0, 0, 0, 0,
      /* 5723 */ 462976, -2113929216, 100663296, 100663296, 2, 4, 8, 64, 128, 512, 2048, 8192, 16384, 458752, 18874368,
      /* 5738 */ 463488, 0, 0, 1, 2, 4, 32, 0, 0, 1007232, 15728640, 1040000, 15728640, -570425344, 0, 0, 0, 2014, 0, 0,
      /* 5758 */ 0, 32505856, -570425344, 196608, 2097152, 301989888, 0, 0, 80, 268435456, 0, 268435456, 0, 268435456,
      /* 5772 */ 268435456, 268435456, 268435456, 0, 0, 0, 4096, 201326592, 0, 0, 96, 2260992, 12288, 0, 0x80000000, 0, 0,
      /* 5789 */ 118, 577408, 22020096, 1040187392, 0, 0, 167772160, 234881024, 128, 512, 2048, 196608, 262144, 33554432,
      /* 5803 */ 536870912, 0, 0, 0, 557056, 7168, 16384, 196608, 786432, 503316480, 1073741824, 0x80000000, 0, 0, 128,
      /* 5818 */ 131072, 524288, 58720256, 402653184, 0, 0, 0, 318767104, 128, 512, 7168, 16384, 32768, 32768, 196608,
      /* 5833 */ 786432, 1048576, 2097152, 4194304, 33554432, 268435456, 536870912, 0x80000000, 0, 0, 1, 256, 8388608,
      /* 5846 */ 234881024, 268435456, 1073741824, 0x80000000, 4096, 16384, 32768, 131072, 524288, 1048576, 2097152,
      /* 5857 */ 4194304, 8388608, 234881024, 0, 0, 201326592, 0, 0, 128, 536870912, 4194304, 512, 3072, 16384, 131072,
      /* 5872 */ 524288, 1048576, 4194304, 134217728, 8388608, 33554432, 201326592, 268435456, 1073741824, 0, 1048576,
      /* 5883 */ 4194304, 268435456, 4194304, 8388608, 134217728, 268435456, 1073741824, 3072, 131072, 524288, 1048576,
      /* 5894 */ 1073741824, 0, 0, 0, 0x80000000, 0, 0, 0, -2147483646, 16384, 18432, 67108864, 1073741824, 16384, 8192,
      /* 5909 */ 0, 0, 65536, 262144, 0, 0, 67108864, 0, 0, 0, 32768, 0, 1, 18952, 1024, 0, 0, 192, 0, 0, 0, 65, 1024,
      /* 5932 */ 1024, 100663298, 18952, 65, 268436480, 2101248, 524288, 1024, 19017, -1744550912, 8388624, 8388624,
      /* 5944 */ 8388624, -1739308032, -1739308032, -1739308032, -1739308032, -1736162288, -1736162288, -1736162288,
      /* 5952 */ -1736162288, -7868466, -7868466, -7868466, -7868466, -7868466, -7868450, -7868450, -7868450, -7868450, 0,
      /* 5963 */ 0, 0, 65536, 2048, 16384, 67108864, 134217728, 268435456, 0, 0, 1073741824, 18432, 0, 0, 1, 285212672, 0,
      /* 5980 */ 585, 0, 0, 2, 8, 16, 64, 128, 3072, 4096, 8192, 65536, 131072, 0, 0, 1024, 5521408, -1744830464, 0, 0, 0,
      /* 6001 */ 262144, 0, 0, 0, 1024, 0, 0, 0, 112, 1040, 0, 0, -1744830464, 0, -1744830464, 59238400, -67108864, 0, 0,
      /* 6020 */ 0, 327680, 2014, 0, 0, 0, 328192, 518144, 8388608, 50331648, 201326592, 805306368, -1073741824, 768,
      /* 6034 */ 1024, 10240, 16384, 32768, 458752, 50331648, 67108864, 134217728, 805306368, 0, 0, 0, 458880, 32768,
      /* 6048 */ 458752, 8388608, 50331648, 67108864, 134217728, 67108864, 134217728, 805306368, 1073741824, 0x80000000,
      /* 6058 */ 0, 0, 220, 0, 0, 0, 471424, 12, 192, 768, 1024, 2048, 805306368, 1073741824, 0, 0, 2, 204, 768, 1024, 4,
      /* 6079 */ 8, 32, 64, 512, 2048, 512, 2048, 16384, 67108864, 0, 0, 458752, 50331648, 67108864, 805306368,
      /* 6094 */ -1073741824, 0, 0, 0, 393240, 0, 1048576, 4194304, 0, 0, 16384, 458752, 50331648, 67108864, 536870912,
      /* 6109 */ 1073741824, 0, 0, 16384, 0, 0, 0, 256, 0, 0, 0, 512, 0, 0, 0, 585, 16, 0, 0, 1048576, 4194304,
      /* 6130 */ 0x80000000, 4, 8, 128, 512, 3072, 16384, 32768, 131072, 512, 0, 0, 4096, 1048576, 0x80000000, 8192,
      /* 6146 */ 2097152, 268435456, 0x80000000, 537395200, 537395200, 0, 4196352, 51380242, 51380242, 51380242, 0,
      /* 6157 */ 537395200, 4196352, 4196352, 276901888, 8540160, -1606418432, 0, 32768, 537395200, 4196352, 1082130432,
      /* 6168 */ 0, 4196352, 537427968, 22022147, 22349827, 22349827, 22349827, 22366219, 22349843, 22349827, 22349827,
      /* 6179 */ 22366219, 22349827, 55576594, 55576594, 55576594, 55576594, 55576594, 324012114, 55576594, 55576594,
      /* 6189 */ 1062785014, 1062785014, 1062785014, 1062785014, 0, 0, 2, 33554432, 0, 0, 0, 131072, 0, 0, 0, 8192,
      /* 6205 */ 8392704, 32768, 268435456, 0, 0, 2, 67108864, 12, 16384, 0, 65536, 0, 22020096, 0, 0, 0, 1040000,
      /* 6222 */ 15728640, 0, 0, 329728, 0, 0, 254, 1792, 2809856, 58720256, 19, 0, 0, 0, 1048576, 0, 0, 0, 2048, 0, 0, 0,
      /* 6244 */ 18, 33554432, 0, 0, 256, 8192, 0, 0, 8192, 2097152, 0, 0x80000000, 0, 82, 301989888, 0, 0, 0, 2101248,
      /* 6263 */ 22020096, 1040187392, 0, 0, 0, 4194304, 0, 0, 0, 16384, 1536, 0, 256, 0, 8192, 2097152, 16, 1048576,
      /* 6281 */ 16777216, 33554432, 268435456, 536870912, 0x80000000, 3584, 16384, 32768, 524288, 1048576, 4194304, 0, 0,
      /* 6294 */ 8388608, 1073741824, 0, 0, 1536, 2048, 16384, 32768, 524288, 4194304, 134217728, 0, 0, 134217728, 4096,
      /* 6309 */ 0, 8, 0, 256, 1536, 16384, 32768, 524288, 128, 536870912, 0, 0, 4, 8, 512, 2048, 0, 0, 1536, 32768,
      /* 6329 */ 524288, 4194304, 33554432, 134217728, 536870912, 0, 0, 8192, 2097152, 0x80000000, 0, 0, 512, 2048,
      /* 6343 */ 131072, 536870912, 0, 0, 16, 64, 1536, 32768, 32768, 524288, 134217728, 0, 0, 0, 524288, 0, 64, 64,
      /* 6361 */ 16392, 1536, 32768, 524288, 0, 0, 33554432, 8192, 0, 65536, 0, 0, 1, 1, 0, 1, 67174400, 33554432,
      /* 6379 */ 536870912, -1073741824, 0, 0, 0, 0, 524288, 134217728, 67174400, 0, 0, 0, 16777216, 0, 0, 0, 4, 0, 0, 0,
      /* 6399 */ 7, 16, 16384, 8, 8, 0, 0, 512, 3072, 131072, 131072, 268435456, 134217728, 8, 512, 2048, 196608, 262144,
      /* 6417 */ 50331648, 536870912, 1073741824, 0, 4, 8, 2048, 8192, 32768, 8388608, 0, 0, 134217736, 16908320,
      /* 6431 */ 547389524, 547389524, 555909216, 555909216, 555909216, 555909216, 564297840, 564297844, 564297844,
      /* 6440 */ 564297844, 564297844, 1001055742, 1001056254, 1001055742, 1001055742, 1001056254, 1001056254, 1001056254,
      /* 6449 */ 1001056254, 1001055742, 1001056254, 1001056254, 1001056254, 1001056254, 0, 1052672, 0x80000000, 0, 0, 4,
      /* 6461 */ 16, 0, 0, 84, 2129920, 8388608, 4096, 0, 0, 0, 116, 0, 254, 1280, 2809856, 58720256, 939524096, 0, 0, 0,
      /* 6481 */ 50331648, 268435456, 0, 0, 0, 939524096, 0, 0, 520, 1024, 0, 0, 1, 0, 67108864, 1073741824, 0, 0, 0, 20,
      /* 6501 */ 64, 32768, 8192, 0, 2048, 0, 2097152, 8388608, 536870912, 0, 0, 1024, 278528, 0, 0, 0, 393232, 163840, 0,
      /* 6520 */ 0, 0, 134217728, 0, 0, 0, 16, 0, 0, 0, 15, 208, 15360, 1245184, 52, 0, 0, 0, 268435456, 0, 0, 33554432,
      /* 6542 */ 64, 128, 1280, 24576, 163840, 524288, 2097152, 58720256, 402653184, 536870912, 128, 1792, 24576, 163840,
      /* 6556 */ 524288, 0, 4, 16, 8388608, 0, 0, 4096, 32768, 262144, 524288, 33554432, 134217728, 0, 0, 24, 32, 128,
      /* 6574 */ 1280, 8192, 16384, 8192, 524288, 16777216, 33554432, 402653184, 0, 4, 8, 16, 1024, 2048, 8192, 16384,
      /* 6590 */ 32768, 458752, 0, 262144, 33554432, 134217728, 0, 512, 1024, 16777216, 33554432, 402653184, 0, 4096,
      /* 6604 */ 1048576, 0, 0, 1998, 59238400, -67108864, 4, 8, 16, 402653184, 0, 0, 8, 16, 402653184, 536870912, 0, 0,
      /* 6622 */ 4, 64, 128, 8388608, 0, 0, 67108866, 12, 64, 128, 512, 1024, 4, 16384, 65536, 67108864, 0, 65536, 0, 0,
      /* 6642 */ 2048, 64, 64, 64, 96, 96, 96, 96, 0, 8192, 8192, 268435460, 32768, 65536, 2490368, 16777216, 0x80000000,
      /* 6659 */ 0, 0, 1, 4, 8, 2048, 8192, 3670016, 2048, 2048, 2048, 2048, 0, 8192, 34816, 9216, 4096, 0, 128, 0,
      /* 6679 */ 2097152, 0, 0, 4096, 4096, 29696, 29712, 29840, 29712, 29712, 29840, 29840, 536900624, 4224144, 144384,
      /* 6694 */ 144384, 144384, 144384, -754647956, -754647956, -754647956, -754647956, -754647956, -754647940,
      /* 6703 */ -754647940, -754647940, -754647940, -754516884, -754647956, -754516884, -754516884, -754516884, 4, 8,
      /* 6713 */ 256, 512, 2048, 0, 0, 3670016, 0, 0, 2048, 131072, 524288, 4194304, 0x80000000, 0, 0, 9216, 0, 0, 4,
      /* 6732 */ 134217728, 0, 29696, 0, 0, 4, 268435456, 0, 16, 0, 29824, 0, 60, 64576, 319029248, -1073741824, 0, 0,
      /* 6750 */ 319160320, 0, 0, 0, 319160320, 0, 0, 524288, 3145728, 0, 12288, 131072, 0, 8, 131072, 61440, 262144,
      /* 6767 */ 318767104, -1073741824, 0, 0, 64, 1024, 2048, 61440, 262144, 0, 28, 32, 64, 64, 64, 128, 0, 0, 16384,
      /* 6786 */ 32768, 50331648, 268435456, 0, 0, 0, 393216, 0, 0, 0, 486539264, 0, 128, 0, 536870912, 0, 0, 12, 16, 32,
      /* 6806 */ 327155712, 34, 1056, 32, 32, 42, 4457568, -326784344, -322851160, -322698144, -322698144, -322698144,
      /* 6818 */ -322698144, -322695456, 0, 0, 524288, 1048576, 0, 0, 0, 536870912, 4194304, 131072, 0, 0, 6, 56, 128,
      /* 6835 */ 1792, 2, 67108864, 16384, 0, 0, 4096, 4194304, 32768, 0, 0, 0, 8388608, 0, 0, 0, 72, 0, 8, 64, 2048,
      /* 6856 */ 57344, 16384, 32768, 262144, 50331648, 268435456, 0, 524288, 1048576, 2097152, 4194304, 134217728,
      /* 6868 */ 0x80000000, 0, 0, 50331648, 268435456, 0x80000000, 0, 0, 1, 0, 0, 2, 4, 16, 64, 1, 0, 2, 0, 0, 65536, 0,
      /* 6890 */ 0, 0, 1040, 8667136, 0, 131072, 131072, 0, 131072, 0, 131072, 0, 0, 524288, 536870912, 131072, 0, 0, 7,
      /* 6909 */ 27756528, -503316480, 0, 256, 0, 2048, 32768, 8388608, 262144, 2113536, 0, 0, 8, 16, 512, 402653184, 0,
      /* 6926 */ 0, 0, 256, 32768, 0, 0, 4224, 65536, 262144, 1048576, 4194304, 16777216, 33554432, 67108864, 134217728,
      /* 6941 */ 0, 0, 256, 262144, 0, 0, 8192, 268435456, 0, 0, 0, 4, 131073, 0, 0, 9728, 268435456, 0, 0, 16, 393216, 0,
      /* 6963 */ 131073, 131073, 33554624, 4, 0, 131073, 0, 0, 13312, 131072, 4194304, -2146430976, 131072, 2097152,
      /* 6977 */ 16777216, 0, 0, 512, 131072, 1048576, 2097152, 0, 1572864, 0, 0, 0, 0x80000000, 524288, 0, 1610612736,
      /* 6993 */ 1610612736, 1610612736, 393241, 393241, 393241, 393241, 805707793, 805707793, 1879449617, 805708049,
      /* 7003 */ 1879449617, 1879449617, 1879449617, 1879449617, -483948553, -475559945, -483948553, -475559945,
      /* 7011 */ -483948553, -483948553, -475559945, -475559945, -475559945, -475559945, -483948553, -483948553,
      /* 7019 */ -215504905, -475559945, -207116297, -207116297, 0, 0, 0, 1073741824, 0, 0, 2097152, 67108864, 134217728,
      /* 7032 */ 536870912, 0, 0, 24576, 0, 0, 0, 2113536, 0, 0, 8, 64, 0, 0, 0, 401424, 805306368, 0, 0, 28672, 0, 0,
      /* 7054 */ 4096, 2097152, 4194304, 8388608, 503316480, 1073741824, 0, 0, 1879048192, 0, 0, 32768, 2097152, 8388608,
      /* 7068 */ 16777216, 33554432, 0, 401680, 0, 0, 8, 512, 2048, 131072, 33554432, 536870912, 0, 0, 7, 19367920,
      /* 7084 */ -503316480, 27756528, -503316480, 0, 0, 0, 0, 0, 19376112, -234881024, 0, 27764720, -234881024, 0, 0,
      /* 7099 */ 32768, 33554436, 0, 0, 33554436, 24, 0, 0, 0, 11, 346112, 7, 16, 480, 1536, 32768, 65536, 393216,
      /* 7117 */ 10485760, 65536, 10878976, 16777216, 33554432, 536870912, 4, 32, 524288, 1048576, 33554432, 67108864,
      /* 7129 */ 65536, 393216, 2097152, 16777216, 262400, 65536, 4224, 4224, 0, 65536, 201326592, 0x80000000, 393216,
      /* 7142 */ 10485760, 16777216, 33554432, 1073741824, 0x80000000, 0, 16, 224, 256, 1536, 32768, 65536, 0, 16384,
      /* 7156 */ 2097152, 0, 0, 1024, 32768, 65536, 131072, 262144, 262144, 2097152, 16777216, 33554432, 4, 32, 524288,
      /* 7171 */ 134217728, 0, 512, 32768, 131072, 262144, 2097152, 2097152, 8388608, 16777216, 1073741824, 0, 0, 512,
      /* 7185 */ 32768, 131072, 2097152, 8388608, 8388608, 16777216, 0, 0, 16, 33554432, 4, 16, 224, 512, 32768, 4,
      /* 7201 */ 524288, 134217728, 0, 0, 32768, 50331648, 268435456, 4096, 32768, 0, 0, 16, 536870912, 16, 192, 32768,
      /* 7217 */ 8388608, 4096, 4096, 4096, 1536, 2, 4, 16, 192, 32768, 0, 16, 64, 128, 8388608, 0, 0, 0, 2, 4, 134217728,
      /* 7238 */ 4, 0, 0, 128, 512, 3072, 4096, 16384, 131072, 4, 128, 0, 0, 18, 17825792, 524288, 8388608, 33554432,
      /* 7256 */ 0x80000000, 8192, 0, 33554432, 0, 0, 33554432, 0, 0, 0, 268435456, 2, 4, 8, 262144, 262144, 1048576,
      /* 7273 */ 2048, 32768, 0, 0, 28, 0, 100663296, 4224, 65536, 65536, 262144, 33554432, 0, 2, 4, 24, -1072627712,
      /* 7290 */ 805306384, -1342177264, -1342177264, -1070006272, -1070006272, -1069989376, -1069989376, -258932720,
      /* 7298 */ -258932720, -258932720, -258932720, -225378288, -1069989376, -1069989360, -1065795072, -1061600768,
      /* 7306 */ -258932720, -225378288, -258932720, -258932720, 1260767, 34815199, 1260767, 34815199, 1260767, 34815199,
      /* 7316 */ 34815199, 1260767, 1260767, 34815199, 1260767, 1260767, 169032927, -1978450721, 169032927, -1978450721,
      /* 7326 */ 169032927, 169032927, 169032927, 169032927, 1242774751, -1978450721, -1978450721, -225231649,
      /* 7334 */ -1173144353, -225231649, -91013921, 0, 0, 32, 128, 256, 262144, 524288, 8388608, 0, 64, 0, 0, 1114112,
      /* 7350 */ 1073741824, 0, 0, 34816, 0, 0, 2048, 4194304, 0, 0, 0, 3735552, 0, 0, 32, 512, 2048, 32768, 262144,
      /* 7369 */ 524288, 3751936, 0, 0, 0, 48, 0, 0, 528, 7946240, 12140544, 9502720, 1610612736, 0, 0, 0, 15360, 1245184,
      /* 7387 */ 0, 0, 134217728, 128, 15, 9633792, 0, 0, 0, 2, 12, 80, 128, 7168, 8192, 7168, 8192, 196608, 1048576, 0,
      /* 7407 */ 0, 0, 1, 2, 12, 16, 64, 128, 256, 0, 0, 3145728, 0, 0, 0, 536870912, 0, 0, 8192, 65536, 131072, 1048576,
      /* 7429 */ 0, 0, 0, 2097152, 0, 16384, 0, 4194304, 0, 0, 2097152, 16384, 0, 0, 131072, 2097152, 0, 0, 0, 4096, 0, 0,
      /* 7451 */ 8192, 0, 0, 0, 128, 0, 0, 0, 208, 0, 64, 128, 1024, 4096, 0, 0, 2, 8, 64, 128, 1024, 2048, 4096, 8192,
      /* 7475 */ 128, 1024, 4096, 8192, 0, 0
    ];

    private static TOKEN: string [] =
    [
      "%ERROR",
      "PragmaContents",
      "DirCommentContents",
      "DirPIContents",
      "CDataSection",
      "Wildcard",
      "EQName",
      "URILiteral",
      "IntegerLiteral",
      "DecimalLiteral",
      "DoubleLiteral",
      "StringLiteral",
      "PredefinedEntityRef",
      "'\"\"'",
      "EscapeApos",
      "ElementContentChar",
      "QuotAttrContentChar",
      "AposAttrContentChar",
      "PITarget",
      "NCName",
      "QName",
      "S",
      "S",
      "CharRef",
      "CommentContents",
      "EOF",
      "'!'",
      "'!='",
      "'\"'",
      "'#'",
      "'#)'",
      "'$'",
      "'$$'",
      "'%'",
      "''''",
      "'('",
      "'(#'",
      "'(:'",
      "')'",
      "'*'",
      "'*'",
      "'+'",
      "','",
      "'-'",
      "'-->'",
      "'.'",
      "'..'",
      "'/'",
      "'//'",
      "'/>'",
      "':'",
      "':)'",
      "'::'",
      "':='",
      "';'",
      "'<'",
      "'<!--'",
      "'</'",
      "'<<'",
      "'<='",
      "'<?'",
      "'='",
      "'>'",
      "'>='",
      "'>>'",
      "'?'",
      "'?>'",
      "'@'",
      "'NaN'",
      "'['",
      "']'",
      "'after'",
      "'all'",
      "'allowing'",
      "'ancestor'",
      "'ancestor-or-self'",
      "'and'",
      "'any'",
      "'append'",
      "'array'",
      "'as'",
      "'ascending'",
      "'at'",
      "'attribute'",
      "'base-uri'",
      "'before'",
      "'boundary-space'",
      "'break'",
      "'by'",
      "'case'",
      "'cast'",
      "'castable'",
      "'catch'",
      "'check'",
      "'child'",
      "'collation'",
      "'collection'",
      "'comment'",
      "'constraint'",
      "'construction'",
      "'contains'",
      "'content'",
      "'context'",
      "'continue'",
      "'copy'",
      "'copy-namespaces'",
      "'count'",
      "'decimal-format'",
      "'decimal-separator'",
      "'declare'",
      "'default'",
      "'delete'",
      "'descendant'",
      "'descendant-or-self'",
      "'descending'",
      "'diacritics'",
      "'different'",
      "'digit'",
      "'distance'",
      "'div'",
      "'document'",
      "'document-node'",
      "'element'",
      "'else'",
      "'empty'",
      "'empty-sequence'",
      "'encoding'",
      "'end'",
      "'entire'",
      "'eq'",
      "'every'",
      "'exactly'",
      "'except'",
      "'exit'",
      "'external'",
      "'false'",
      "'first'",
      "'following'",
      "'following-sibling'",
      "'for'",
      "'foreach'",
      "'foreign'",
      "'from'",
      "'ft-option'",
      "'ftand'",
      "'ftnot'",
      "'ftor'",
      "'function'",
      "'ge'",
      "'greatest'",
      "'group'",
      "'grouping-separator'",
      "'gt'",
      "'idiv'",
      "'if'",
      "'import'",
      "'in'",
      "'index'",
      "'infinity'",
      "'inherit'",
      "'insensitive'",
      "'insert'",
      "'instance'",
      "'integrity'",
      "'intersect'",
      "'into'",
      "'is'",
      "'item'",
      "'json'",
      "'json-item'",
      "'jsoniq'",
      "'key'",
      "'language'",
      "'last'",
      "'lax'",
      "'le'",
      "'least'",
      "'let'",
      "'levels'",
      "'loop'",
      "'lowercase'",
      "'lt'",
      "'minus-sign'",
      "'mod'",
      "'modify'",
      "'module'",
      "'most'",
      "'namespace'",
      "'namespace-node'",
      "'ne'",
      "'next'",
      "'no'",
      "'no-inherit'",
      "'no-preserve'",
      "'node'",
      "'nodes'",
      "'not'",
      "'null'",
      "'object'",
      "'occurs'",
      "'of'",
      "'on'",
      "'only'",
      "'option'",
      "'or'",
      "'order'",
      "'ordered'",
      "'ordering'",
      "'paragraph'",
      "'paragraphs'",
      "'parent'",
      "'pattern-separator'",
      "'per-mille'",
      "'percent'",
      "'phrase'",
      "'position'",
      "'preceding'",
      "'preceding-sibling'",
      "'preserve'",
      "'previous'",
      "'processing-instruction'",
      "'relationship'",
      "'rename'",
      "'replace'",
      "'return'",
      "'returning'",
      "'revalidation'",
      "'same'",
      "'satisfies'",
      "'schema'",
      "'schema-attribute'",
      "'schema-element'",
      "'score'",
      "'select'",
      "'self'",
      "'sensitive'",
      "'sentence'",
      "'sentences'",
      "'skip'",
      "'sliding'",
      "'some'",
      "'stable'",
      "'start'",
      "'stemming'",
      "'stop'",
      "'strict'",
      "'strip'",
      "'structured-item'",
      "'switch'",
      "'text'",
      "'then'",
      "'thesaurus'",
      "'times'",
      "'to'",
      "'treat'",
      "'true'",
      "'try'",
      "'tumbling'",
      "'type'",
      "'typeswitch'",
      "'union'",
      "'unique'",
      "'unordered'",
      "'updating'",
      "'uppercase'",
      "'using'",
      "'validate'",
      "'value'",
      "'variable'",
      "'version'",
      "'weight'",
      "'when'",
      "'where'",
      "'while'",
      "'wildcards'",
      "'window'",
      "'with'",
      "'without'",
      "'word'",
      "'words'",
      "'zero-digit'",
      "'{'",
      "'{{'",
      "'{|'",
      "'|'",
      "'||'",
      "'|}'",
      "'}'",
      "'}}'"
    ];
  }

  export class TopDownTreeBuilder implements ParsingEventHandler
  {
    private input: string = null;
    private stack: Nonterminal[] = null;

    public reset(input: string): void
    {
      this.input = input;
      this.stack = [];
    }

    public startNonterminal(name: string, begin: number): void
    {
      var nonterminal = new Nonterminal(name, begin, begin, []);
      if (this.stack.length > 0) this.addChild(nonterminal);
      this.stack.push(nonterminal);
    }

    public endNonterminal(name: string, end: number): void
    {
      this.stack[this.stack.length - 1].end = end;
      if (this.stack.length > 1) this.stack.pop();
    }

    public terminal(name: string, begin: number, end: number): void
    {
      this.addChild(new Terminal(name, begin, end));
    }

    public whitespace(begin: number, end: number): void
    {
    }

    private addChild(s: Symbol): void
    {
      var current = this.stack[this.stack.length - 1];
      current.children.push(s);
    }

    public serialize(e: ParsingEventHandler): void
    {
      e.reset(this.input);
      this.stack[0].send(e);
    }
  }

  export abstract class Symbol
  {
    public name: string;
    public begin: number;
    public end: number;

    constructor(name: string, begin: number, end: number)
    {
      this.name = name;
      this.begin = begin;
      this.end = end;
    }

    public abstract send(e: ParsingEventHandler): void;
  }

  export class Terminal extends Symbol
  {
    constructor(name: string, begin: number, end: number)
    {
      super(name, begin, end);
    }

    public send(e: ParsingEventHandler): void
    {
      e.terminal(this.name, this.begin, this.end);
    }
  }

  export class Nonterminal extends Symbol
  {
    public children: Symbol[];

    constructor(name: string, begin: number, end: number, children: Symbol[])
    {
      super(name, begin, end);
      this.children = children;
    }

    public send(e: ParsingEventHandler): void
    {
      e.startNonterminal(this.name, this.begin);
      var pos = this.begin;
      this.children.forEach
      (
        function(c): void
        {
          if (pos < c.begin) e.whitespace(pos, c.begin);
          c.send(e);
          pos = c.end;
        }
      );
      if (pos < this.end) e.whitespace(pos, this.end);
      e.endNonterminal(this.name, this.end);
    }
  }
}

class XmlSerializer implements JSONiqParser.ParsingEventHandler
{
  private input: string = null;
  private delayedTag: string = null;
  private indent: boolean;
  private hasChildElement = false;
  private depth = 0;

  constructor(indent: boolean)
  {
    this.indent = indent;
  }

  reset(source: string)
  {
    process.stdout.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?" + ">");
    this.input = source;
    this.hasChildElement = false;
    this.depth = 0;
  }

  startNonterminal(tag: string, begin: number)
  {
    if (this.delayedTag != null)
    {
      process.stdout.write("<");
      process.stdout.write(this.delayedTag);
      process.stdout.write(">");
    }
    this.delayedTag = tag;
    if (this.indent)
    {
      process.stdout.write("\n");
      for (var i = 0; i < this.depth; ++i)
      {
        process.stdout.write("  ");
      }
    }
    this.hasChildElement = false;
    ++this.depth;
  }

  endNonterminal(tag: string, end: number)
  {
    --this.depth;
    if (this.delayedTag != null)
    {
      this.delayedTag = null;
      process.stdout.write("<");
      process.stdout.write(tag);
      process.stdout.write("/>");
    }
    else
    {
      if (this.indent)
      {
        if (this.hasChildElement)
        {
          process.stdout.write("\n");
          for (var i = 0; i < this.depth; ++i)
          {
            process.stdout.write("  ");
          }
        }
      }
      process.stdout.write("</");
      process.stdout.write(tag);
      process.stdout.write(">");
    }
    this.hasChildElement = true;
  }

  terminal(tag: string, begin: number, end: number)
  {
    if (tag.charAt(0) == '\'') tag = "TOKEN";
    this.startNonterminal(tag, begin);
    this.characters(begin, end);
    this.endNonterminal(tag, end);
  }

  whitespace(begin: number, end: number)
  {
    this.characters(begin, end);
  }

  private characters(begin: number, end: number)
  {
    if (begin < end)
    {
      if (this.delayedTag != null)
      {
        process.stdout.write("<");
        process.stdout.write(this.delayedTag);
        process.stdout.write(">");
        this.delayedTag = null;
      }
      process.stdout.write(this.input.substring(begin, end)
                   .replace(/&/g, "&amp;")
                   .replace(/</g, "&lt;")
                   .replace(/>/g, "&gt;"));
    }
  }
}

// main program for use with node.js

var fs = require('fs');

if (process.argv.length < 3)
{
  process.stderr.write("Usage: node JSONiqParser.js [-i] INPUT...\n");
  process.stderr.write("\n");
  process.stderr.write("  parse INPUT, which is either a filename or literal text enclosed in curly braces\n");
  process.stderr.write("\n");
  process.stderr.write("  Option:\n");
  process.stderr.write("    -i     indented parse tree\n");
}
else
{
  var indent = false;
  for (var i = 2; i < process.argv.length; ++i)
  {
    var arg = process.argv[i];
    if (arg === "-i")
    {
      indent = true;
      continue;
    }
    var input: string;
    if (/^{.*}$/.test(arg))
    {
      input = arg.substring(1, arg.length - 1);
    }
    else
    {
      var content = fs.readFileSync(arg, "utf-8");
      input = content.length > 0 && content.charCodeAt(0) == 0xFEFF
            ? content.substring(1)
            : content;
    }
    var s = new XmlSerializer(indent);
    var parser = new JSONiqParser.Parser(input, s);
    try
    {
      parser.parse_XQuery();
    }
    catch (pe)
    {
      if (! (pe instanceof JSONiqParser.ParseException))
      {
        throw pe;
      }
      else
      {
        throw parser.getErrorMessage(pe);
      }
    }
  }
}

// End
